// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "06/21/2018 11:15:55"
                                                                                
// Verilog Test Bench template for design : top
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ns

module top_vlg_tst();
  
  // constants                                           
  // general purpose registers
  reg eachvec;
  // test vector input registers
  reg IF_RX;
  reg IF_SAD_CKO1;
  reg IF_SAD_CKO2;
  reg [13:0] IF_SAD_D1;
  reg [13:0] IF_SAD_D2;
  reg IF_SAD_SDOUT1;
  reg IF_SAD_SDOUT2;
  reg IF_SYS_CLK;
  reg SLO_DAC1_MISO;
  // wires                                               
  wire IF_IND_FPGA1;
  wire IF_IND_FPGA2;
  wire IF_SAD_CLK1;
  wire IF_SAD_CLK2;
  wire IF_SAD_RESET1;
  wire IF_SAD_RESET2;
  wire IF_SAD_SCLK1;
  wire IF_SAD_SCLK2;
  wire IF_SAD_SDAT1;
  wire IF_SAD_SDAT2;
  wire IF_SAD_SEN1;
  wire IF_SAD_SEN2;
  wire IF_TEST;
  wire SLO_DAC1_CS;
  wire SLO_DAC1_MOSI;
  wire SLO_DAC1_SCLK;

  // assign statements (if any)                          
  top i1 
  (
    // port map - connection between master ports and signals/registers   
	 .IF_IND_FPGA1(IF_IND_FPGA1),
	 .IF_IND_FPGA2(IF_IND_FPGA2),
	 .IF_RX(IF_RX),
	 .IF_SAD_CKO1(IF_SAD_CKO1),
	 .IF_SAD_CKO2(IF_SAD_CKO2),
	 .IF_SAD_CLK1(IF_SAD_CLK1),
	 .IF_SAD_CLK2(IF_SAD_CLK2),
	 .IF_SAD_D1(IF_SAD_D1),
	 .IF_SAD_D2(IF_SAD_D2),
	 .IF_SAD_RESET1(IF_SAD_RESET1),
	 .IF_SAD_RESET2(IF_SAD_RESET2),
	 .IF_SAD_SCLK1(IF_SAD_SCLK1),
	 .IF_SAD_SCLK2(IF_SAD_SCLK2),
	 .IF_SAD_SDAT1(IF_SAD_SDAT1),
	 .IF_SAD_SDAT2(IF_SAD_SDAT2),
	 .IF_SAD_SDOUT1(IF_SAD_SDOUT1),
	 .IF_SAD_SDOUT2(IF_SAD_SDOUT2),
	 .IF_SAD_SEN1(IF_SAD_SEN1),
	 .IF_SAD_SEN2(IF_SAD_SEN2),
	 .IF_SYS_CLK(IF_SYS_CLK),
	 .IF_TEST(IF_TEST),
	 .SLO_DAC1_CS(SLO_DAC1_CS),
	 .SLO_DAC1_MISO(SLO_DAC1_MISO),
	 .SLO_DAC1_MOSI(SLO_DAC1_MOSI),
	 .SLO_DAC1_SCLK(SLO_DAC1_SCLK)
  );
  
  initial 
  begin                                                        
    $display("Running testbench");
	 IF_SYS_CLK  <= 1'b0;
	 IF_SAD_CKO1 <= 1'b0;
	 IF_SAD_CKO2 <= 1'b0;
  end                                                    

  /*always
  begin  
    @eachvec;                                              
  end*/           

  always #25 IF_SYS_CLK <= ~IF_SYS_CLK;
  
  always #2 begin 
    IF_SAD_CKO1 <= ~IF_SAD_CKO1;
    IF_SAD_CKO2 <= ~IF_SAD_CKO2;
  end
                                         
endmodule

