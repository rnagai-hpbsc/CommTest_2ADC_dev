module DAC_SPI (
  input        clk, 
  input        rst, 
  input [15:0] data, 
  input        ext_ctrl,
  output       spi_data,
  output       spi_sync,
  output       spi_sclk
  );
  
  reg        starts;
  reg [15:0] counts;
  reg        datain;
  reg  [1:0] prog;
  reg [15:0] senddata;
  
  
  always @(negedge rst or posedge clk) begin 
    if (~rst) begin 
	   starts   <=  1'b0;
		counts   <= 16'h0000;
		datain   <=  1'b0;
		prog     <=  2'b00;
		senddata <= 16'h0000;
    end
	 else begin 
	   starts <= 1'b1;
		counts <= starts ? counts + 1'b1 : 16'h0000;
		if (starts) begin 
		  if (counts[9:5]==5'd0 & ext_ctrl) begin 
		    senddata <= data;
		  end
		  /*case(DAC_SEQ_CNT[15:11])
          5'd0    : DAC_SENDDATA <= 16'h0000;
          5'd1    : DAC_SENDDATA <= 16'h1111;
          5'd2    : DAC_SENDDATA <= 16'h2222;
          5'd3    : DAC_SENDDATA <= 16'h3333;
		    5'd4    : DAC_SENDDATA <= 16'h4444;
		    5'd5    : DAC_SENDDATA <= 16'h5555;
		    5'd6    : DAC_SENDDATA <= 16'h6666;
		    5'd7    : DAC_SENDDATA <= 16'h7777;
		    5'd8    : DAC_SENDDATA <= 16'h8888;
		    5'd9    : DAC_SENDDATA <= 16'h9999;
		    5'd10   : DAC_SENDDATA <= 16'hAAAA;
		    5'd11   : DAC_SENDDATA <= 16'hBBBB;
		    5'd12   : DAC_SENDDATA <= 16'hCCCC;
		    5'd13   : DAC_SENDDATA <= 16'hDDDD;
		    5'd14   : DAC_SENDDATA <= 16'hEEEE;
		    5'd15   : DAC_SENDDATA <= 16'hFFFF;
          default : DAC_SENDDATA <= 16'hFFFF;
        endcase*/
		  case (counts[9:5]) 
		    5'd0  : datain <= 1'b0;
		    5'd1  : datain <= 1'b0; 
		    5'd2  : datain <= 1'b0;
		    5'd3  : datain <= 1'b0;
		    5'd4  : datain <= 1'b0;
		    5'd5  : datain <= 1'b0;
		    5'd6  : datain <= prog[1];
		    5'd7  : datain <= prog[0];
		    5'd8  : datain <= senddata[15];
		    5'd9  : datain <= senddata[14];
		    5'd10 : datain <= senddata[13];
		    5'd11 : datain <= senddata[12];
		    5'd12 : datain <= senddata[11];
		    5'd13 : datain <= senddata[10];
		    5'd14 : datain <= senddata[9];
		    5'd15 : datain <= senddata[8];
		    5'd16 : datain <= senddata[7];
		    5'd17 : datain <= senddata[6];
		    5'd18 : datain <= senddata[5]; 
		    5'd19 : datain <= senddata[4];
		    5'd20 : datain <= senddata[3];
		    5'd21 : datain <= senddata[2];
		    5'd22 : datain <= senddata[1];
		    5'd23 : datain <= senddata[0];
		    default : datain <= 1'b0;
		  endcase
		end 
		else begin 
		  senddata <= 16'h0000;
		  datain   <=  1'b0;
	   end
    end
  end
  
  assign spi_enable = starts & counts[10]; // active high
  
  assign spi_sync =  ~spi_enable;
  assign spi_sclk = ~(spi_enable & counts[4]);
  assign spi_data =   spi_enable & datain; 
 
endmodule 