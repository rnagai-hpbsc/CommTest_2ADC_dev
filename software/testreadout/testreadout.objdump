
testreadout.elf:     file format elf32-littlenios2
testreadout.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00010920 memsz 0x00010920 flags r-x
    LOAD off    0x00011940 vaddr 0x00010940 paddr 0x0001242c align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00013f18 vaddr 0x00013f18 paddr 0x00013f18 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000102dc  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000434  0001050c  0001050c  0001150c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  00010940  0001242c  00011940  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00013f18  00013f18  00013f18  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00014078  00014078  0001342c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001342c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f48  00000000  00000000  00013450  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024b6f  00000000  00000000  00014398  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000941a  00000000  00000000  00038f07  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ba6d  00000000  00000000  00042321  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000023d4  00000000  00000000  0004dd90  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003c1f  00000000  00000000  00050164  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017b11  00000000  00000000  00053d83  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006b894  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001930  00000000  00000000  0006b8d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00070626  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00070629  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00070635  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00070636  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00070637  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00070642  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0007064d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  00070658  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003c  00000000  00000000  0007065e  2**0
                  CONTENTS, READONLY
 26 .jdi          000051e6  00000000  00000000  0007069a  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0007005e  00000000  00000000  00075880  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
0001050c l    d  .rodata	00000000 .rodata
00010940 l    d  .rwdata	00000000 .rwdata
00013f18 l    d  .bss	00000000 .bss
00014078 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../testreadout_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 testreadout.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010686 l     O .rodata	00000010 zeroes.4404
00002aec l     F .text	000000bc __sbprintf
00010696 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002cfc l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004854 l     F .text	00000008 __fp_unlock
00004868 l     F .text	0000019c __sinit.part.1
00004a04 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010940 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00010d84 l     O .rwdata	00000020 lc_ctype_charset
00010d64 l     O .rwdata	00000020 lc_message_charset
00010da4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000106c8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008040 l     F .text	000000fc __sprint_r.part.0
000107ec l     O .rodata	00000010 zeroes.4349
0000967c l     F .text	000000bc __sbprintf
000107fc l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000d6c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000d7ec l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d818 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d920 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000da1c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000db08 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000dcf8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001241c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000dfb0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000e100 l     F .text	00000038 alt_dev_reg
0001138c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000e8f0 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000eafc l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000f3f4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000f898 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000f9f8 l     F .text	00000050 alt_get_errno
0000fa48 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00013f4c g     O .bss	00000004 alt_instruction_exception_handler
00000670 g     F .text	00000018 putchar
0000751c g     F .text	00000074 _mprec_log10
00007608 g     F .text	0000008c __any_on
00009d88 g     F .text	00000054 _isatty_r
000106d4 g     O .rodata	00000028 __mprec_tinytens
0000dc34 g     F .text	0000007c alt_main
00000688 g     F .text	000000c0 _puts_r
00013f78 g     O .bss	00000100 alt_irq
00009ddc g     F .text	00000060 _lseek_r
0000e448 g     F .text	0000005c altera_avalon_fifo_write_almostfull
0001242c g       *ABS*	00000000 __flash_rwdata_start
0000c09c g     F .text	00000088 .hidden __eqdf2
00014078 g       *ABS*	00000000 __alt_heap_start
0000062c g     F .text	0000003c printf
00009e9c g     F .text	0000009c _wcrtomb_r
00007f00 g     F .text	0000005c __sseek
00004bb4 g     F .text	00000010 __sinit
00009738 g     F .text	00000140 __swbuf_r
00005688 g     F .text	0000007c _setlocale_r
00004a0c g     F .text	00000078 __sfmoreglue
0000dcd4 g     F .text	00000024 __malloc_unlock
00006358 g     F .text	0000015c memmove
0000e1c0 g     F .text	00000098 altera_avalon_fifo_init
00004b9c g     F .text	00000018 _cleanup
0000e500 g     F .text	00000058 altera_avalon_fifo_write_fifo
000065dc g     F .text	000000a8 _Balloc
0000c124 g     F .text	000000dc .hidden __gtdf2
0000fe40 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
0000e69c g     F .text	00000028 altera_avalon_fifo_read_backpressure
00000020 g       *ABS*	00000000 __flash_exceptions_start
00009d2c g     F .text	0000005c _fstat_r
00013f30 g     O .bss	00000004 errno
00007e7c g     F .text	00000008 __seofread
00013f38 g     O .bss	00000004 alt_argv
0001a3ec g       *ABS*	00000000 _gp
0000df80 g     F .text	00000030 usleep
0000e38c g     F .text	00000060 altera_avalon_fifo_clear_event
0001120c g     O .rwdata	00000180 alt_fd_list
00000668 g     F .text	00000008 _putchar_r
0000fe64 g     F .text	00000090 alt_find_dev
00006210 g     F .text	00000148 memcpy
0000485c g     F .text	0000000c _cleanup_r
0000d4dc g     F .text	000000dc .hidden __floatsidf
0000f97c g     F .text	0000007c alt_io_redirect
0000c200 g     F .text	000000f4 .hidden __ltdf2
0001050c g       *ABS*	00000000 __DTOR_END__
00000748 g     F .text	00000014 puts
000100dc g     F .text	0000009c alt_exception_cause_generated_bad_addr
00007d60 g     F .text	00000074 __fpclassifyd
00007478 g     F .text	000000a4 __ratio
00009660 g     F .text	0000001c __vfiprintf_internal
0000ecfc g     F .text	0000021c altera_avalon_jtag_uart_read
000005fc g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000ad3c g     F .text	00000064 .hidden __udivsi3
0000d970 g     F .text	000000ac isatty
00010724 g     O .rodata	000000c8 __mprec_tens
00005704 g     F .text	0000000c __locale_charset
00013f2c g     O .bss	00000004 __malloc_top_pad
000123f4 g     O .rwdata	00000004 __mb_cur_max
00005734 g     F .text	0000000c _localeconv_r
00006a10 g     F .text	0000003c __i2b
00005038 g     F .text	000004c8 __sfvwrite_r
00007dd4 g     F .text	00000054 _sbrk_r
00009e3c g     F .text	00000060 _read_r
00012414 g     O .rwdata	00000004 alt_max_fd
00009a20 g     F .text	000000f0 _fclose_r
00004824 g     F .text	00000030 fflush
00013f28 g     O .bss	00000004 __malloc_max_sbrked_mem
0000ae20 g     F .text	000008ac .hidden __adddf3
00007220 g     F .text	0000010c __b2d
0000a680 g     F .text	000005c4 .hidden __umoddi3
0000db58 g     F .text	000000dc lseek
000123ec g     O .rwdata	00000004 _global_impure_ptr
000077fc g     F .text	00000564 _realloc_r
00014078 g       *ABS*	00000000 __bss_end
0000f7a8 g     F .text	000000f0 alt_iic_isr_register
0000fd38 g     F .text	00000108 alt_tick
0000a084 g     F .text	000005fc .hidden __udivdi3
00009c88 g     F .text	00000024 _fputwc_r
000106fc g     O .rodata	00000028 __mprec_bigtens
000067f4 g     F .text	00000104 __s2b
0000d5b8 g     F .text	000000a8 .hidden __floatunsidf
00006f60 g     F .text	00000060 __mcmp
00004bd4 g     F .text	00000018 __fp_lock_all
0000f75c g     F .text	0000004c alt_ic_irq_enabled
0000fc9c g     F .text	0000009c alt_alarm_stop
00013f40 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
000111e4 g     O .rwdata	00000028 alt_dev_null
0000f3d4 g     F .text	00000020 alt_dcache_flush_all
000068f8 g     F .text	00000068 __hi0bits
0000d45c g     F .text	00000080 .hidden __fixdfsi
0000e3ec g     F .text	0000005c altera_avalon_fifo_write_ienable
0001242c g       *ABS*	00000000 __ram_rwdata_end
0000e2fc g     F .text	0000002c altera_avalon_fifo_read_almostempty
0001240c g     O .rwdata	00000008 alt_dev_list
0000e000 g     F .text	00000100 write
00007694 g     F .text	000000a0 _putc_r
00010940 g       *ABS*	00000000 __ram_rodata_end
0000d868 g     F .text	000000b8 fstat
0000c200 g     F .text	000000f4 .hidden __ledf2
00006cd8 g     F .text	00000140 __pow5mult
00008154 g     F .text	0000150c ___vfiprintf_internal_r
00013f20 g     O .bss	00000004 __nlocale_changed
0000ada0 g     F .text	00000058 .hidden __umodsi3
00014078 g       *ABS*	00000000 end
0000e828 g     F .text	000000c8 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0000e328 g     F .text	0000003c altera_avalon_fifo_read_event
0001050c g       *ABS*	00000000 __CTOR_LIST__
000493e0 g       *ABS*	00000000 __alt_stack_pointer
0000d660 g     F .text	00000064 .hidden __clzsi2
0000ef18 g     F .text	00000224 altera_avalon_jtag_uart_write
0000e5c4 g     F .text	0000004c altera_avalon_fifo_read_fifo
00004bc4 g     F .text	00000004 __sfp_lock_acquire
0000612c g     F .text	000000e4 memchr
000007f4 g     F .text	000022dc ___vfprintf_internal_r
00004d28 g     F .text	00000310 _free_r
00005710 g     F .text	00000010 __locale_mb_cur_max
00010358 g     F .text	00000180 __call_exitprocs
00013f1c g     O .bss	00000004 __mlocale_changed
000123f8 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00013f44 g     O .bss	00000004 _alt_tick_rate
00006e18 g     F .text	00000148 __lshift
00013f48 g     O .bss	00000004 _alt_nticks
0000dd48 g     F .text	00000104 read
0000e170 g     F .text	00000050 alt_sys_init
00010240 g     F .text	00000118 __register_exitproc
00006a4c g     F .text	0000028c __multiply
0000eba4 g     F .text	00000068 altera_avalon_jtag_uart_close
0000adf8 g     F .text	00000028 .hidden __mulsi3
00010940 g       *ABS*	00000000 __ram_rwdata_start
0001050c g       *ABS*	00000000 __ram_rodata_start
00013f50 g     O .bss	00000028 __malloc_current_mallinfo
0000732c g     F .text	0000014c __d2b
0000e6c4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00010008 g     F .text	000000d4 alt_get_fd
0000f27c g     F .text	00000158 alt_busy_sleep
000098f0 g     F .text	00000054 _close_r
000101c4 g     F .text	0000007c memcmp
0000e784 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00014078 g       *ABS*	00000000 __alt_stack_base
0000e7d4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002ba8 g     F .text	00000154 __swsetup_r
0000e258 g     F .text	0000003c altera_avalon_fifo_read_status
0000b6cc g     F .text	000009d0 .hidden __divdf3
00004a84 g     F .text	00000118 __sfp
00007590 g     F .text	00000078 __copybits
00010ddc g     O .rwdata	00000408 __malloc_av_
00004bd0 g     F .text	00000004 __sinit_lock_release
0000c2f4 g     F .text	0000086c .hidden __muldf3
00007e28 g     F .text	00000054 __sread
0000e670 g     F .text	0000002c altera_avalon_fifo_read_other_info
0000fef4 g     F .text	00000114 alt_find_file
0000f444 g     F .text	000000a4 alt_dev_llist_insert
0000dcb0 g     F .text	00000024 __malloc_lock
0000ded0 g     F .text	000000b0 sbrk
000047c8 g     F .text	0000005c _fflush_r
00009944 g     F .text	000000dc _calloc_r
00013f18 g       *ABS*	00000000 __bss_start
000064b4 g     F .text	00000128 memset
0000026c g     F .text	00000390 main
00013f3c g     O .bss	00000004 alt_envp
00013f24 g     O .bss	00000004 __malloc_max_total_mem
0000e724 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000e364 g     F .text	00000028 altera_avalon_fifo_read_level
00009878 g     F .text	00000018 __swbuf
00007f5c g     F .text	00000008 __sclose
000493e0 g       *ABS*	00000000 __alt_heap_limit
00009b10 g     F .text	00000014 fclose
00002f24 g     F .text	00001688 _dtoa_r
00005920 g     F .text	0000080c _malloc_r
00009ff8 g     F .text	00000030 __ascii_wctomb
00012418 g     O .rwdata	00000004 alt_errno
00005500 g     F .text	000000c4 _fwalk
00007734 g     F .text	000000c8 putc
0000ac44 g     F .text	00000084 .hidden __divsi3
00004c04 g     F .text	00000124 _malloc_trim_r
0001050c g       *ABS*	00000000 __CTOR_END__
00007f64 g     F .text	000000dc strcmp
0001050c g       *ABS*	00000000 __flash_rodata_start
0001050c g       *ABS*	00000000 __DTOR_LIST__
0000c09c g     F .text	00000088 .hidden __nedf2
0000e138 g     F .text	00000038 alt_irq_init
0000de4c g     F .text	00000084 alt_release_fd
0001080c g     O .rodata	00000100 .hidden __clz_tab
00013f18 g     O .bss	00000004 _PathLocale
00010178 g     F .text	00000014 atexit
00009890 g     F .text	00000060 _write_r
00005740 g     F .text	00000018 setlocale
000123f0 g     O .rwdata	00000004 _impure_ptr
00013f34 g     O .bss	00000004 alt_argc
000045ac g     F .text	0000021c __sflush_r
0000f548 g     F .text	00000060 _do_dtors
0000572c g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
000071bc g     F .text	00000064 __ulp
00004bec g     F .text	00000018 __fp_unlock_all
00012404 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005758 g     F .text	0000000c localeconv
0000e610 g     F .text	00000060 altera_avalon_fifo_write_other_info
0000f5c8 g     F .text	00000050 alt_ic_isr_register
0001242c g       *ABS*	00000000 _edata
00014078 g       *ABS*	00000000 _end
00009b24 g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000ec0c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000f6b8 g     F .text	000000a4 alt_ic_irq_disable
00007e84 g     F .text	0000007c __swrite
000123fc g     O .rwdata	00000004 __malloc_trim_threshold
00005720 g     F .text	0000000c __locale_msgcharset
0001018c g     F .text	00000038 exit
000055c4 g     F .text	000000c4 _fwalk_reent
00006fc0 g     F .text	000001fc __mdiff
0000acc8 g     F .text	00000074 .hidden __modsi3
0000e294 g     F .text	0000003c altera_avalon_fifo_read_ienable
000493e0 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004bc8 g     F .text	00000004 __sfp_lock_release
000104d8 g     F .text	00000034 _exit
0000f13c g     F .text	00000140 alt_alarm_start
0000e2d0 g     F .text	0000002c altera_avalon_fifo_read_almostfull
00005764 g     F .text	000001bc __smakebuf_r
0000075c g     F .text	00000098 strlen
0000fb3c g     F .text	00000160 open
0000e558 g     F .text	0000006c altera_avalon_read_fifo
0000c124 g     F .text	000000dc .hidden __gedf2
00012400 g     O .rwdata	00000004 __wctomb
0000813c g     F .text	00000018 __sprint_r
0000f5a8 g     F .text	00000020 alt_icache_flush_all
00012420 g     O .rwdata	00000004 alt_priority_mask
0000f618 g     F .text	000000a0 alt_ic_irq_enable
00002ad0 g     F .text	0000001c __vfprintf_internal
0000a028 g     F .text	0000005c _wctomb_r
0000cb60 g     F .text	000008fc .hidden __subdf3
00006960 g     F .text	000000b0 __lo0bits
0000e4a4 g     F .text	0000005c altera_avalon_fifo_write_almostempty
00012424 g     O .rwdata	00000008 alt_alarm_list
0000f4e8 g     F .text	00000060 _do_ctors
00009f38 g     F .text	000000c0 wcrtomb
0000d714 g     F .text	000000d8 close
0000da84 g     F .text	00000084 alt_load
00009cac g     F .text	00000080 fputwc
00004bcc g     F .text	00000004 __sinit_lock_acquire
000066ac g     F .text	00000148 __multadd
00006684 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	108fde04 	addi	r2,r2,16248
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	108fde04 	addi	r2,r2,16248
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffb6d4c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffb6d40>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a6d817 	ldw	r2,-25760(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a6d817 	ldw	r2,-25760(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dee4f814 	ori	sp,sp,37856
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d6a8fb14 	ori	gp,gp,41964
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	108fc614 	ori	r2,r2,16152

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18d01e14 	ori	r3,r3,16504

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfffb6e74>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	000da840 	call	da84 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	000dc340 	call	dc34 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfffb6e88>

0000026c <main>:
#include "altera_avalon_pio_regs.h"
#include "altera_avalon_fifo_regs.h"
#include "altera_avalon_fifo_util.h"

int main()
{
     26c:	defff104 	addi	sp,sp,-60
     270:	dfc00e15 	stw	ra,56(sp)
     274:	df000d15 	stw	fp,52(sp)
     278:	df000d04 	addi	fp,sp,52
	printf("Hello world!\n");
     27c:	01000074 	movhi	r4,1
     280:	21014304 	addi	r4,r4,1292
     284:	00007480 	call	748 <puts>

	int index = 0;
     288:	e03ff415 	stw	zero,-48(fp)
	int data, data2;

	int version = IORD_ALTERA_AVALON_JTAG_UART_DATA(VERSION_INFO_BASE);
     28c:	00844034 	movhi	r2,4352
     290:	10800037 	ldwio	r2,0(r2)
     294:	e0bff615 	stw	r2,-40(fp)
	printf ("\n ** Version: %x ** \n\n",version);
     298:	e17ff617 	ldw	r5,-40(fp)
     29c:	01000074 	movhi	r4,1
     2a0:	21014704 	addi	r4,r4,1308
     2a4:	000062c0 	call	62c <printf>

	printf("Resetting...\n");
     2a8:	01000074 	movhi	r4,1
     2ac:	21014d04 	addi	r4,r4,1332
     2b0:	00007480 	call	748 <puts>
	IOWR_ALTERA_AVALON_PIO_DATA(EXT_RST_BASE,1);
     2b4:	00c00044 	movi	r3,1
     2b8:	00848034 	movhi	r2,4608
     2bc:	10c00035 	stwio	r3,0(r2)
	//usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(EXT_RST_BASE,0);
     2c0:	0007883a 	mov	r3,zero
     2c4:	00848034 	movhi	r2,4608
     2c8:	10c00035 	stwio	r3,0(r2)
	//usleep(1000000);
	printf("\n");
     2cc:	01000284 	movi	r4,10
     2d0:	00006700 	call	670 <putchar>

	int initvalue =4293918720; // 0xFFF00000;
     2d4:	00bffc34 	movhi	r2,65520
     2d8:	e0bff715 	stw	r2,-36(fp)

	int addr, value, sendvalue, sentvalue, baseline_1, baseline_2;

	printf("Address : ");
     2dc:	01000074 	movhi	r4,1
     2e0:	21015104 	addi	r4,r4,1348
     2e4:	000062c0 	call	62c <printf>
	//scanf("%d",&addr);
	addr = 0;
     2e8:	e03ff815 	stw	zero,-32(fp)
	printf("%d\n",addr);
     2ec:	e17ff817 	ldw	r5,-32(fp)
     2f0:	01000074 	movhi	r4,1
     2f4:	21015404 	addi	r4,r4,1360
     2f8:	000062c0 	call	62c <printf>
	printf("Input value : ");
     2fc:	01000074 	movhi	r4,1
     300:	21015504 	addi	r4,r4,1364
     304:	000062c0 	call	62c <printf>
	//scanf("%d",&value);
	value = 32768;
     308:	00a00014 	movui	r2,32768
     30c:	e0bff915 	stw	r2,-28(fp)
	printf("%d\n",value);
     310:	e17ff917 	ldw	r5,-28(fp)
     314:	01000074 	movhi	r4,1
     318:	21015404 	addi	r4,r4,1360
     31c:	000062c0 	call	62c <printf>
	sendvalue = initvalue + addr*256*256 + value;
     320:	e0bff817 	ldw	r2,-32(fp)
     324:	1006943a 	slli	r3,r2,16
     328:	e0bff717 	ldw	r2,-36(fp)
     32c:	1887883a 	add	r3,r3,r2
     330:	e0bff917 	ldw	r2,-28(fp)
     334:	1885883a 	add	r2,r3,r2
     338:	e0bffa15 	stw	r2,-24(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(DACCTRL_BASE,sendvalue);
     33c:	00888034 	movhi	r2,8704
     340:	e0fffa17 	ldw	r3,-24(fp)
     344:	10c00035 	stwio	r3,0(r2)
	printf("writing DACCTRL_BASE : %x\n",sendvalue);
     348:	e17ffa17 	ldw	r5,-24(fp)
     34c:	01000074 	movhi	r4,1
     350:	21015904 	addi	r4,r4,1380
     354:	000062c0 	call	62c <printf>
	usleep(1000000);
     358:	010003f4 	movhi	r4,15
     35c:	21109004 	addi	r4,r4,16960
     360:	000df800 	call	df80 <usleep>
	sentvalue = IORD_ALTERA_AVALON_PIO_DATA(DACCTRL_BASE);
     364:	00888034 	movhi	r2,8704
     368:	10800037 	ldwio	r2,0(r2)
     36c:	e0bffb15 	stw	r2,-20(fp)
	printf("Wrote value is %x\n",sentvalue);
     370:	e17ffb17 	ldw	r5,-20(fp)
     374:	01000074 	movhi	r4,1
     378:	21016004 	addi	r4,r4,1408
     37c:	000062c0 	call	62c <printf>
	usleep(1000000);
     380:	010003f4 	movhi	r4,15
     384:	21109004 	addi	r4,r4,16960
     388:	000df800 	call	df80 <usleep>
	baseline_1 = IORD_ALTERA_AVALON_PIO_DATA(BS_1_BASE);
     38c:	0084c034 	movhi	r2,4864
     390:	10800037 	ldwio	r2,0(r2)
     394:	e0bffc15 	stw	r2,-16(fp)
	printf("Actual Baseline value is : %d.\n",baseline_1);
     398:	e17ffc17 	ldw	r5,-16(fp)
     39c:	01000074 	movhi	r4,1
     3a0:	21016504 	addi	r4,r4,1428
     3a4:	000062c0 	call	62c <printf>

	printf("\n");
     3a8:	01000284 	movi	r4,10
     3ac:	00006700 	call	670 <putchar>

	printf("Address : ");
     3b0:	01000074 	movhi	r4,1
     3b4:	21015104 	addi	r4,r4,1348
     3b8:	000062c0 	call	62c <printf>
	//scanf("%d",&addr);
	addr = 4;
     3bc:	00800104 	movi	r2,4
     3c0:	e0bff815 	stw	r2,-32(fp)
	printf("%d\n",addr);
     3c4:	e17ff817 	ldw	r5,-32(fp)
     3c8:	01000074 	movhi	r4,1
     3cc:	21015404 	addi	r4,r4,1360
     3d0:	000062c0 	call	62c <printf>
	printf("Input value : ");
     3d4:	01000074 	movhi	r4,1
     3d8:	21015504 	addi	r4,r4,1364
     3dc:	000062c0 	call	62c <printf>
	//scanf("%d",&value);
	value = 32768;
     3e0:	00a00014 	movui	r2,32768
     3e4:	e0bff915 	stw	r2,-28(fp)
	printf("%d\n",value);
     3e8:	e17ff917 	ldw	r5,-28(fp)
     3ec:	01000074 	movhi	r4,1
     3f0:	21015404 	addi	r4,r4,1360
     3f4:	000062c0 	call	62c <printf>
	sendvalue = initvalue + addr*256*256 + value;
     3f8:	e0bff817 	ldw	r2,-32(fp)
     3fc:	1006943a 	slli	r3,r2,16
     400:	e0bff717 	ldw	r2,-36(fp)
     404:	1887883a 	add	r3,r3,r2
     408:	e0bff917 	ldw	r2,-28(fp)
     40c:	1885883a 	add	r2,r3,r2
     410:	e0bffa15 	stw	r2,-24(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(DACCTRL_BASE,sendvalue);
     414:	00888034 	movhi	r2,8704
     418:	e0fffa17 	ldw	r3,-24(fp)
     41c:	10c00035 	stwio	r3,0(r2)
	printf("writing DACCTRL_BASE : %x\n",sendvalue);
     420:	e17ffa17 	ldw	r5,-24(fp)
     424:	01000074 	movhi	r4,1
     428:	21015904 	addi	r4,r4,1380
     42c:	000062c0 	call	62c <printf>
	usleep(1000000);
     430:	010003f4 	movhi	r4,15
     434:	21109004 	addi	r4,r4,16960
     438:	000df800 	call	df80 <usleep>
	sentvalue = IORD_ALTERA_AVALON_PIO_DATA(DACCTRL_BASE);
     43c:	00888034 	movhi	r2,8704
     440:	10800037 	ldwio	r2,0(r2)
     444:	e0bffb15 	stw	r2,-20(fp)
	printf("Wrote value is %x\n",sentvalue);
     448:	e17ffb17 	ldw	r5,-20(fp)
     44c:	01000074 	movhi	r4,1
     450:	21016004 	addi	r4,r4,1408
     454:	000062c0 	call	62c <printf>
	usleep(1000000);
     458:	010003f4 	movhi	r4,15
     45c:	21109004 	addi	r4,r4,16960
     460:	000df800 	call	df80 <usleep>
	baseline_2 = IORD_ALTERA_AVALON_PIO_DATA(BS_2_BASE);
     464:	00850034 	movhi	r2,5120
     468:	10800037 	ldwio	r2,0(r2)
     46c:	e0bffd15 	stw	r2,-12(fp)
	printf("Actual Baseline value is : %d.\n",baseline_2);
     470:	e17ffd17 	ldw	r5,-12(fp)
     474:	01000074 	movhi	r4,1
     478:	21016504 	addi	r4,r4,1428
     47c:	000062c0 	call	62c <printf>

	printf("\nIf want to start data-taking, press enter...\n");
     480:	01000074 	movhi	r4,1
     484:	21016d04 	addi	r4,r4,1460
     488:	00007480 	call	748 <puts>

	printf("\n *** Start data-taking *** \n\n");
     48c:	01000074 	movhi	r4,1
     490:	21017904 	addi	r4,r4,1508
     494:	00007480 	call	748 <puts>

	IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_PIO_BASE,1);
     498:	00c00044 	movi	r3,1
     49c:	00880034 	movhi	r2,8192
     4a0:	10c00035 	stwio	r3,0(r2)

	int eventnumber = 0;
     4a4:	e03ff515 	stw	zero,-44(fp)
	printf("Event#0\n");
     4a8:	01000074 	movhi	r4,1
     4ac:	21018104 	addi	r4,r4,1540
     4b0:	00007480 	call	748 <puts>
	while (1) {
		++index;
     4b4:	e0bff417 	ldw	r2,-48(fp)
     4b8:	10800044 	addi	r2,r2,1
     4bc:	e0bff415 	stw	r2,-48(fp)
		data = IORD_ALTERA_AVALON_FIFO_DATA(FIFO_0_OUT_BASE);
     4c0:	00840074 	movhi	r2,4097
     4c4:	10a04004 	addi	r2,r2,-32512
     4c8:	10800037 	ldwio	r2,0(r2)
     4cc:	e0bffe15 	stw	r2,-8(fp)
		data2 = IORD_ALTERA_AVALON_FIFO_DATA(FIFO_1_OUT_BASE);
     4d0:	00840074 	movhi	r2,4097
     4d4:	10a44004 	addi	r2,r2,-28416
     4d8:	10800037 	ldwio	r2,0(r2)
     4dc:	e0bfff15 	stw	r2,-4(fp)
		baseline_1 = IORD_ALTERA_AVALON_PIO_DATA(BS_1_BASE);
     4e0:	0084c034 	movhi	r2,4864
     4e4:	10800037 	ldwio	r2,0(r2)
     4e8:	e0bffc15 	stw	r2,-16(fp)
		baseline_2 = IORD_ALTERA_AVALON_PIO_DATA(BS_2_BASE);
     4ec:	00850034 	movhi	r2,5120
     4f0:	10800037 	ldwio	r2,0(r2)
     4f4:	e0bffd15 	stw	r2,-12(fp)
		printf("%d,%d,%d,%d",index,data,data2,baseline_1);
     4f8:	e0bffc17 	ldw	r2,-16(fp)
     4fc:	d8800015 	stw	r2,0(sp)
     500:	e1ffff17 	ldw	r7,-4(fp)
     504:	e1bffe17 	ldw	r6,-8(fp)
     508:	e17ff417 	ldw	r5,-48(fp)
     50c:	01000074 	movhi	r4,1
     510:	21018304 	addi	r4,r4,1548
     514:	000062c0 	call	62c <printf>
		if (baseline_1+50<data) printf("*");
     518:	e0bffc17 	ldw	r2,-16(fp)
     51c:	10c00c84 	addi	r3,r2,50
     520:	e0bffe17 	ldw	r2,-8(fp)
     524:	1880020e 	bge	r3,r2,530 <main+0x2c4>
     528:	01000a84 	movi	r4,42
     52c:	00006700 	call	670 <putchar>
		printf(",%d",baseline_2);
     530:	e17ffd17 	ldw	r5,-12(fp)
     534:	01000074 	movhi	r4,1
     538:	21018604 	addi	r4,r4,1560
     53c:	000062c0 	call	62c <printf>
		if (baseline_2+50<data2) printf("*");
     540:	e0bffd17 	ldw	r2,-12(fp)
     544:	10c00c84 	addi	r3,r2,50
     548:	e0bfff17 	ldw	r2,-4(fp)
     54c:	1880020e 	bge	r3,r2,558 <main+0x2ec>
     550:	01000a84 	movi	r4,42
     554:	00006700 	call	670 <putchar>
		printf("\n");
     558:	01000284 	movi	r4,10
     55c:	00006700 	call	670 <putchar>
		if (altera_avalon_fifo_read_level(FIFO_0_OUT_CSR_BASE)==0) {
     560:	01040074 	movhi	r4,4097
     564:	21208004 	addi	r4,r4,-32256
     568:	000e3640 	call	e364 <altera_avalon_fifo_read_level>
     56c:	10000b1e 	bne	r2,zero,59c <main+0x330>
			//break;
			index=0;
     570:	e03ff415 	stw	zero,-48(fp)
			++eventnumber;
     574:	e0bff517 	ldw	r2,-44(fp)
     578:	10800044 	addi	r2,r2,1
     57c:	e0bff515 	stw	r2,-44(fp)
			printf("\nEvent#%d\n",eventnumber);
     580:	e17ff517 	ldw	r5,-44(fp)
     584:	01000074 	movhi	r4,1
     588:	21018704 	addi	r4,r4,1564
     58c:	000062c0 	call	62c <printf>
			IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_PIO_BASE,1);
     590:	00c00044 	movi	r3,1
     594:	00880034 	movhi	r2,8192
     598:	10c00035 	stwio	r3,0(r2)
		}
		if (index==1000) {
     59c:	e0bff417 	ldw	r2,-48(fp)
     5a0:	1080fa18 	cmpnei	r2,r2,1000
     5a4:	1000031e 	bne	r2,zero,5b4 <main+0x348>
			IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_PIO_BASE,0);
     5a8:	0007883a 	mov	r3,zero
     5ac:	00880034 	movhi	r2,8192
     5b0:	10c00035 	stwio	r3,0(r2)
		}
		if (eventnumber==10) break;
     5b4:	e0bff517 	ldw	r2,-44(fp)
     5b8:	10800298 	cmpnei	r2,r2,10
     5bc:	10000126 	beq	r2,zero,5c4 <main+0x358>
	}
     5c0:	003fbc06 	br	4b4 <__alt_data_end+0xfffb70d4>
			IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_PIO_BASE,1);
		}
		if (index==1000) {
			IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_PIO_BASE,0);
		}
		if (eventnumber==10) break;
     5c4:	0001883a 	nop
	}
	IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_PIO_BASE,0);
     5c8:	0007883a 	mov	r3,zero
     5cc:	00880034 	movhi	r2,8192
     5d0:	10c00035 	stwio	r3,0(r2)

	printf("End of the code. %c\n",0x04); // exit
     5d4:	01400104 	movi	r5,4
     5d8:	01000074 	movhi	r4,1
     5dc:	21018a04 	addi	r4,r4,1576
     5e0:	000062c0 	call	62c <printf>
	return 0;
     5e4:	0005883a 	mov	r2,zero
}
     5e8:	e037883a 	mov	sp,fp
     5ec:	dfc00117 	ldw	ra,4(sp)
     5f0:	df000017 	ldw	fp,0(sp)
     5f4:	dec00204 	addi	sp,sp,8
     5f8:	f800283a 	ret

000005fc <_printf_r>:
     5fc:	defffd04 	addi	sp,sp,-12
     600:	2805883a 	mov	r2,r5
     604:	dfc00015 	stw	ra,0(sp)
     608:	d9800115 	stw	r6,4(sp)
     60c:	d9c00215 	stw	r7,8(sp)
     610:	21400217 	ldw	r5,8(r4)
     614:	d9c00104 	addi	r7,sp,4
     618:	100d883a 	mov	r6,r2
     61c:	00007f40 	call	7f4 <___vfprintf_internal_r>
     620:	dfc00017 	ldw	ra,0(sp)
     624:	dec00304 	addi	sp,sp,12
     628:	f800283a 	ret

0000062c <printf>:
     62c:	defffc04 	addi	sp,sp,-16
     630:	dfc00015 	stw	ra,0(sp)
     634:	d9400115 	stw	r5,4(sp)
     638:	d9800215 	stw	r6,8(sp)
     63c:	d9c00315 	stw	r7,12(sp)
     640:	00800074 	movhi	r2,1
     644:	1088fc04 	addi	r2,r2,9200
     648:	10800017 	ldw	r2,0(r2)
     64c:	200b883a 	mov	r5,r4
     650:	d9800104 	addi	r6,sp,4
     654:	11000217 	ldw	r4,8(r2)
     658:	0002ad00 	call	2ad0 <__vfprintf_internal>
     65c:	dfc00017 	ldw	ra,0(sp)
     660:	dec00404 	addi	sp,sp,16
     664:	f800283a 	ret

00000668 <_putchar_r>:
     668:	21800217 	ldw	r6,8(r4)
     66c:	00076941 	jmpi	7694 <_putc_r>

00000670 <putchar>:
     670:	00800074 	movhi	r2,1
     674:	1088fc04 	addi	r2,r2,9200
     678:	200b883a 	mov	r5,r4
     67c:	11000017 	ldw	r4,0(r2)
     680:	21800217 	ldw	r6,8(r4)
     684:	00076941 	jmpi	7694 <_putc_r>

00000688 <_puts_r>:
     688:	defff604 	addi	sp,sp,-40
     68c:	dc000715 	stw	r16,28(sp)
     690:	2021883a 	mov	r16,r4
     694:	2809883a 	mov	r4,r5
     698:	dc400815 	stw	r17,32(sp)
     69c:	dfc00915 	stw	ra,36(sp)
     6a0:	2823883a 	mov	r17,r5
     6a4:	000075c0 	call	75c <strlen>
     6a8:	10c00044 	addi	r3,r2,1
     6ac:	d8800115 	stw	r2,4(sp)
     6b0:	00800074 	movhi	r2,1
     6b4:	10819004 	addi	r2,r2,1600
     6b8:	d8800215 	stw	r2,8(sp)
     6bc:	00800044 	movi	r2,1
     6c0:	d8800315 	stw	r2,12(sp)
     6c4:	00800084 	movi	r2,2
     6c8:	dc400015 	stw	r17,0(sp)
     6cc:	d8c00615 	stw	r3,24(sp)
     6d0:	dec00415 	stw	sp,16(sp)
     6d4:	d8800515 	stw	r2,20(sp)
     6d8:	80000226 	beq	r16,zero,6e4 <_puts_r+0x5c>
     6dc:	80800e17 	ldw	r2,56(r16)
     6e0:	10001426 	beq	r2,zero,734 <_puts_r+0xac>
     6e4:	81400217 	ldw	r5,8(r16)
     6e8:	2880030b 	ldhu	r2,12(r5)
     6ec:	10c8000c 	andi	r3,r2,8192
     6f0:	1800061e 	bne	r3,zero,70c <_puts_r+0x84>
     6f4:	29001917 	ldw	r4,100(r5)
     6f8:	00f7ffc4 	movi	r3,-8193
     6fc:	10880014 	ori	r2,r2,8192
     700:	20c6703a 	and	r3,r4,r3
     704:	2880030d 	sth	r2,12(r5)
     708:	28c01915 	stw	r3,100(r5)
     70c:	d9800404 	addi	r6,sp,16
     710:	8009883a 	mov	r4,r16
     714:	00050380 	call	5038 <__sfvwrite_r>
     718:	1000091e 	bne	r2,zero,740 <_puts_r+0xb8>
     71c:	00800284 	movi	r2,10
     720:	dfc00917 	ldw	ra,36(sp)
     724:	dc400817 	ldw	r17,32(sp)
     728:	dc000717 	ldw	r16,28(sp)
     72c:	dec00a04 	addi	sp,sp,40
     730:	f800283a 	ret
     734:	8009883a 	mov	r4,r16
     738:	0004bb40 	call	4bb4 <__sinit>
     73c:	003fe906 	br	6e4 <__alt_data_end+0xfffb7304>
     740:	00bfffc4 	movi	r2,-1
     744:	003ff606 	br	720 <__alt_data_end+0xfffb7340>

00000748 <puts>:
     748:	00800074 	movhi	r2,1
     74c:	1088fc04 	addi	r2,r2,9200
     750:	200b883a 	mov	r5,r4
     754:	11000017 	ldw	r4,0(r2)
     758:	00006881 	jmpi	688 <_puts_r>

0000075c <strlen>:
     75c:	208000cc 	andi	r2,r4,3
     760:	10002026 	beq	r2,zero,7e4 <strlen+0x88>
     764:	20800007 	ldb	r2,0(r4)
     768:	10002026 	beq	r2,zero,7ec <strlen+0x90>
     76c:	2005883a 	mov	r2,r4
     770:	00000206 	br	77c <strlen+0x20>
     774:	10c00007 	ldb	r3,0(r2)
     778:	18001826 	beq	r3,zero,7dc <strlen+0x80>
     77c:	10800044 	addi	r2,r2,1
     780:	10c000cc 	andi	r3,r2,3
     784:	183ffb1e 	bne	r3,zero,774 <__alt_data_end+0xfffb7394>
     788:	10c00017 	ldw	r3,0(r2)
     78c:	01ffbff4 	movhi	r7,65279
     790:	39ffbfc4 	addi	r7,r7,-257
     794:	00ca303a 	nor	r5,zero,r3
     798:	01a02074 	movhi	r6,32897
     79c:	19c7883a 	add	r3,r3,r7
     7a0:	31a02004 	addi	r6,r6,-32640
     7a4:	1946703a 	and	r3,r3,r5
     7a8:	1986703a 	and	r3,r3,r6
     7ac:	1800091e 	bne	r3,zero,7d4 <strlen+0x78>
     7b0:	10800104 	addi	r2,r2,4
     7b4:	10c00017 	ldw	r3,0(r2)
     7b8:	19cb883a 	add	r5,r3,r7
     7bc:	00c6303a 	nor	r3,zero,r3
     7c0:	28c6703a 	and	r3,r5,r3
     7c4:	1986703a 	and	r3,r3,r6
     7c8:	183ff926 	beq	r3,zero,7b0 <__alt_data_end+0xfffb73d0>
     7cc:	00000106 	br	7d4 <strlen+0x78>
     7d0:	10800044 	addi	r2,r2,1
     7d4:	10c00007 	ldb	r3,0(r2)
     7d8:	183ffd1e 	bne	r3,zero,7d0 <__alt_data_end+0xfffb73f0>
     7dc:	1105c83a 	sub	r2,r2,r4
     7e0:	f800283a 	ret
     7e4:	2005883a 	mov	r2,r4
     7e8:	003fe706 	br	788 <__alt_data_end+0xfffb73a8>
     7ec:	0005883a 	mov	r2,zero
     7f0:	f800283a 	ret

000007f4 <___vfprintf_internal_r>:
     7f4:	deffb804 	addi	sp,sp,-288
     7f8:	dfc04715 	stw	ra,284(sp)
     7fc:	ddc04515 	stw	r23,276(sp)
     800:	dd404315 	stw	r21,268(sp)
     804:	d9002d15 	stw	r4,180(sp)
     808:	282f883a 	mov	r23,r5
     80c:	302b883a 	mov	r21,r6
     810:	d9c02e15 	stw	r7,184(sp)
     814:	df004615 	stw	fp,280(sp)
     818:	dd804415 	stw	r22,272(sp)
     81c:	dd004215 	stw	r20,264(sp)
     820:	dcc04115 	stw	r19,260(sp)
     824:	dc804015 	stw	r18,256(sp)
     828:	dc403f15 	stw	r17,252(sp)
     82c:	dc003e15 	stw	r16,248(sp)
     830:	00057340 	call	5734 <_localeconv_r>
     834:	10800017 	ldw	r2,0(r2)
     838:	1009883a 	mov	r4,r2
     83c:	d8803415 	stw	r2,208(sp)
     840:	000075c0 	call	75c <strlen>
     844:	d8803715 	stw	r2,220(sp)
     848:	d8802d17 	ldw	r2,180(sp)
     84c:	10000226 	beq	r2,zero,858 <___vfprintf_internal_r+0x64>
     850:	10800e17 	ldw	r2,56(r2)
     854:	1000fb26 	beq	r2,zero,c44 <___vfprintf_internal_r+0x450>
     858:	b880030b 	ldhu	r2,12(r23)
     85c:	10c8000c 	andi	r3,r2,8192
     860:	1800061e 	bne	r3,zero,87c <___vfprintf_internal_r+0x88>
     864:	b9001917 	ldw	r4,100(r23)
     868:	00f7ffc4 	movi	r3,-8193
     86c:	10880014 	ori	r2,r2,8192
     870:	20c6703a 	and	r3,r4,r3
     874:	b880030d 	sth	r2,12(r23)
     878:	b8c01915 	stw	r3,100(r23)
     87c:	10c0020c 	andi	r3,r2,8
     880:	1800c326 	beq	r3,zero,b90 <___vfprintf_internal_r+0x39c>
     884:	b8c00417 	ldw	r3,16(r23)
     888:	1800c126 	beq	r3,zero,b90 <___vfprintf_internal_r+0x39c>
     88c:	1080068c 	andi	r2,r2,26
     890:	00c00284 	movi	r3,10
     894:	10c0c626 	beq	r2,r3,bb0 <___vfprintf_internal_r+0x3bc>
     898:	d8c00404 	addi	r3,sp,16
     89c:	05000074 	movhi	r20,1
     8a0:	d9001e04 	addi	r4,sp,120
     8a4:	a501a184 	addi	r20,r20,1670
     8a8:	d8c01e15 	stw	r3,120(sp)
     8ac:	d8002015 	stw	zero,128(sp)
     8b0:	d8001f15 	stw	zero,124(sp)
     8b4:	d8003315 	stw	zero,204(sp)
     8b8:	d8003615 	stw	zero,216(sp)
     8bc:	d8003815 	stw	zero,224(sp)
     8c0:	1811883a 	mov	r8,r3
     8c4:	d8003915 	stw	zero,228(sp)
     8c8:	d8003a15 	stw	zero,232(sp)
     8cc:	d8002f15 	stw	zero,188(sp)
     8d0:	d9002815 	stw	r4,160(sp)
     8d4:	a8800007 	ldb	r2,0(r21)
     8d8:	10028b26 	beq	r2,zero,1308 <___vfprintf_internal_r+0xb14>
     8dc:	00c00944 	movi	r3,37
     8e0:	a823883a 	mov	r17,r21
     8e4:	10c0021e 	bne	r2,r3,8f0 <___vfprintf_internal_r+0xfc>
     8e8:	00001406 	br	93c <___vfprintf_internal_r+0x148>
     8ec:	10c00326 	beq	r2,r3,8fc <___vfprintf_internal_r+0x108>
     8f0:	8c400044 	addi	r17,r17,1
     8f4:	88800007 	ldb	r2,0(r17)
     8f8:	103ffc1e 	bne	r2,zero,8ec <__alt_data_end+0xfffb750c>
     8fc:	8d61c83a 	sub	r16,r17,r21
     900:	80000e26 	beq	r16,zero,93c <___vfprintf_internal_r+0x148>
     904:	d8c02017 	ldw	r3,128(sp)
     908:	d8801f17 	ldw	r2,124(sp)
     90c:	45400015 	stw	r21,0(r8)
     910:	1c07883a 	add	r3,r3,r16
     914:	10800044 	addi	r2,r2,1
     918:	d8c02015 	stw	r3,128(sp)
     91c:	44000115 	stw	r16,4(r8)
     920:	d8801f15 	stw	r2,124(sp)
     924:	00c001c4 	movi	r3,7
     928:	1880a916 	blt	r3,r2,bd0 <___vfprintf_internal_r+0x3dc>
     92c:	42000204 	addi	r8,r8,8
     930:	d9402f17 	ldw	r5,188(sp)
     934:	2c0b883a 	add	r5,r5,r16
     938:	d9402f15 	stw	r5,188(sp)
     93c:	88800007 	ldb	r2,0(r17)
     940:	1000aa26 	beq	r2,zero,bec <___vfprintf_internal_r+0x3f8>
     944:	8d400044 	addi	r21,r17,1
     948:	8c400047 	ldb	r17,1(r17)
     94c:	0021883a 	mov	r16,zero
     950:	00bfffc4 	movi	r2,-1
     954:	0025883a 	mov	r18,zero
     958:	dc002905 	stb	r16,164(sp)
     95c:	d8002785 	stb	zero,158(sp)
     960:	d8002b05 	stb	zero,172(sp)
     964:	d8802a15 	stw	r2,168(sp)
     968:	d8003115 	stw	zero,196(sp)
     96c:	04c01604 	movi	r19,88
     970:	05800244 	movi	r22,9
     974:	9021883a 	mov	r16,r18
     978:	4039883a 	mov	fp,r8
     97c:	ad400044 	addi	r21,r21,1
     980:	88bff804 	addi	r2,r17,-32
     984:	98833236 	bltu	r19,r2,1650 <___vfprintf_internal_r+0xe5c>
     988:	100490ba 	slli	r2,r2,2
     98c:	00c00034 	movhi	r3,0
     990:	18c26804 	addi	r3,r3,2464
     994:	10c5883a 	add	r2,r2,r3
     998:	10800017 	ldw	r2,0(r2)
     99c:	1000683a 	jmp	r2
     9a0:	00001548 	cmpgei	zero,zero,85
     9a4:	00001650 	cmplti	zero,zero,89
     9a8:	00001650 	cmplti	zero,zero,89
     9ac:	00001568 	cmpgeui	zero,zero,85
     9b0:	00001650 	cmplti	zero,zero,89
     9b4:	00001650 	cmplti	zero,zero,89
     9b8:	00001650 	cmplti	zero,zero,89
     9bc:	00001650 	cmplti	zero,zero,89
     9c0:	00001650 	cmplti	zero,zero,89
     9c4:	00001650 	cmplti	zero,zero,89
     9c8:	00000c50 	cmplti	zero,zero,49
     9cc:	00001458 	cmpnei	zero,zero,81
     9d0:	00001650 	cmplti	zero,zero,89
     9d4:	00000b14 	movui	zero,44
     9d8:	00000c74 	movhi	zero,49
     9dc:	00001650 	cmplti	zero,zero,89
     9e0:	00000cc4 	movi	zero,51
     9e4:	00000cd0 	cmplti	zero,zero,51
     9e8:	00000cd0 	cmplti	zero,zero,51
     9ec:	00000cd0 	cmplti	zero,zero,51
     9f0:	00000cd0 	cmplti	zero,zero,51
     9f4:	00000cd0 	cmplti	zero,zero,51
     9f8:	00000cd0 	cmplti	zero,zero,51
     9fc:	00000cd0 	cmplti	zero,zero,51
     a00:	00000cd0 	cmplti	zero,zero,51
     a04:	00000cd0 	cmplti	zero,zero,51
     a08:	00001650 	cmplti	zero,zero,89
     a0c:	00001650 	cmplti	zero,zero,89
     a10:	00001650 	cmplti	zero,zero,89
     a14:	00001650 	cmplti	zero,zero,89
     a18:	00001650 	cmplti	zero,zero,89
     a1c:	00001650 	cmplti	zero,zero,89
     a20:	00001650 	cmplti	zero,zero,89
     a24:	00001650 	cmplti	zero,zero,89
     a28:	00001650 	cmplti	zero,zero,89
     a2c:	00001650 	cmplti	zero,zero,89
     a30:	00000d0c 	andi	zero,zero,52
     a34:	00000dd4 	movui	zero,55
     a38:	00001650 	cmplti	zero,zero,89
     a3c:	00000dd4 	movui	zero,55
     a40:	00001650 	cmplti	zero,zero,89
     a44:	00001650 	cmplti	zero,zero,89
     a48:	00001650 	cmplti	zero,zero,89
     a4c:	00001650 	cmplti	zero,zero,89
     a50:	00000e80 	call	e8 <alt_exception+0xc8>
     a54:	00001650 	cmplti	zero,zero,89
     a58:	00001650 	cmplti	zero,zero,89
     a5c:	00000e8c 	andi	zero,zero,58
     a60:	00001650 	cmplti	zero,zero,89
     a64:	00001650 	cmplti	zero,zero,89
     a68:	00001650 	cmplti	zero,zero,89
     a6c:	00001650 	cmplti	zero,zero,89
     a70:	00001650 	cmplti	zero,zero,89
     a74:	00001310 	cmplti	zero,zero,76
     a78:	00001650 	cmplti	zero,zero,89
     a7c:	00001650 	cmplti	zero,zero,89
     a80:	0000137c 	xorhi	zero,zero,77
     a84:	00001650 	cmplti	zero,zero,89
     a88:	00001650 	cmplti	zero,zero,89
     a8c:	00001650 	cmplti	zero,zero,89
     a90:	00001650 	cmplti	zero,zero,89
     a94:	00001650 	cmplti	zero,zero,89
     a98:	00001650 	cmplti	zero,zero,89
     a9c:	00001650 	cmplti	zero,zero,89
     aa0:	00001650 	cmplti	zero,zero,89
     aa4:	00001650 	cmplti	zero,zero,89
     aa8:	00001650 	cmplti	zero,zero,89
     aac:	000015f4 	movhi	zero,87
     ab0:	00001574 	movhi	zero,85
     ab4:	00000dd4 	movui	zero,55
     ab8:	00000dd4 	movui	zero,55
     abc:	00000dd4 	movui	zero,55
     ac0:	00001594 	movui	zero,86
     ac4:	00001574 	movhi	zero,85
     ac8:	00001650 	cmplti	zero,zero,89
     acc:	00001650 	cmplti	zero,zero,89
     ad0:	000015a0 	cmpeqi	zero,zero,86
     ad4:	00001650 	cmplti	zero,zero,89
     ad8:	000015b4 	movhi	zero,86
     adc:	00001438 	rdprs	zero,zero,80
     ae0:	00000b20 	cmpeqi	zero,zero,44
     ae4:	00001470 	cmpltui	zero,zero,81
     ae8:	00001650 	cmplti	zero,zero,89
     aec:	0000147c 	xorhi	zero,zero,81
     af0:	00001650 	cmplti	zero,zero,89
     af4:	000014e0 	cmpeqi	zero,zero,83
     af8:	00001650 	cmplti	zero,zero,89
     afc:	00001650 	cmplti	zero,zero,89
     b00:	00001500 	call	150 <alt_irq_handler+0x54>
     b04:	d8c03117 	ldw	r3,196(sp)
     b08:	d8802e15 	stw	r2,184(sp)
     b0c:	00c7c83a 	sub	r3,zero,r3
     b10:	d8c03115 	stw	r3,196(sp)
     b14:	84000114 	ori	r16,r16,4
     b18:	ac400007 	ldb	r17,0(r21)
     b1c:	003f9706 	br	97c <__alt_data_end+0xfffb759c>
     b20:	00800c04 	movi	r2,48
     b24:	d8802705 	stb	r2,156(sp)
     b28:	00801e04 	movi	r2,120
     b2c:	d8802745 	stb	r2,157(sp)
     b30:	d9002a17 	ldw	r4,168(sp)
     b34:	d8802e17 	ldw	r2,184(sp)
     b38:	d8002785 	stb	zero,158(sp)
     b3c:	e011883a 	mov	r8,fp
     b40:	10c00104 	addi	r3,r2,4
     b44:	14c00017 	ldw	r19,0(r2)
     b48:	002d883a 	mov	r22,zero
     b4c:	80800094 	ori	r2,r16,2
     b50:	2002ca16 	blt	r4,zero,167c <___vfprintf_internal_r+0xe88>
     b54:	00bfdfc4 	movi	r2,-129
     b58:	80a4703a 	and	r18,r16,r2
     b5c:	d8c02e15 	stw	r3,184(sp)
     b60:	94800094 	ori	r18,r18,2
     b64:	9802b41e 	bne	r19,zero,1638 <___vfprintf_internal_r+0xe44>
     b68:	01400074 	movhi	r5,1
     b6c:	29419a04 	addi	r5,r5,1640
     b70:	d9403915 	stw	r5,228(sp)
     b74:	04401e04 	movi	r17,120
     b78:	d8802a17 	ldw	r2,168(sp)
     b7c:	0039883a 	mov	fp,zero
     b80:	1001fa26 	beq	r2,zero,136c <___vfprintf_internal_r+0xb78>
     b84:	0027883a 	mov	r19,zero
     b88:	002d883a 	mov	r22,zero
     b8c:	00021906 	br	13f4 <___vfprintf_internal_r+0xc00>
     b90:	d9002d17 	ldw	r4,180(sp)
     b94:	b80b883a 	mov	r5,r23
     b98:	0002ba80 	call	2ba8 <__swsetup_r>
     b9c:	1005dc1e 	bne	r2,zero,2310 <___vfprintf_internal_r+0x1b1c>
     ba0:	b880030b 	ldhu	r2,12(r23)
     ba4:	00c00284 	movi	r3,10
     ba8:	1080068c 	andi	r2,r2,26
     bac:	10ff3a1e 	bne	r2,r3,898 <__alt_data_end+0xfffb74b8>
     bb0:	b880038f 	ldh	r2,14(r23)
     bb4:	103f3816 	blt	r2,zero,898 <__alt_data_end+0xfffb74b8>
     bb8:	d9c02e17 	ldw	r7,184(sp)
     bbc:	d9002d17 	ldw	r4,180(sp)
     bc0:	a80d883a 	mov	r6,r21
     bc4:	b80b883a 	mov	r5,r23
     bc8:	0002aec0 	call	2aec <__sbprintf>
     bcc:	00001106 	br	c14 <___vfprintf_internal_r+0x420>
     bd0:	d9002d17 	ldw	r4,180(sp)
     bd4:	d9801e04 	addi	r6,sp,120
     bd8:	b80b883a 	mov	r5,r23
     bdc:	000813c0 	call	813c <__sprint_r>
     be0:	1000081e 	bne	r2,zero,c04 <___vfprintf_internal_r+0x410>
     be4:	da000404 	addi	r8,sp,16
     be8:	003f5106 	br	930 <__alt_data_end+0xfffb7550>
     bec:	d8802017 	ldw	r2,128(sp)
     bf0:	10000426 	beq	r2,zero,c04 <___vfprintf_internal_r+0x410>
     bf4:	d9002d17 	ldw	r4,180(sp)
     bf8:	d9801e04 	addi	r6,sp,120
     bfc:	b80b883a 	mov	r5,r23
     c00:	000813c0 	call	813c <__sprint_r>
     c04:	b880030b 	ldhu	r2,12(r23)
     c08:	1080100c 	andi	r2,r2,64
     c0c:	1005c01e 	bne	r2,zero,2310 <___vfprintf_internal_r+0x1b1c>
     c10:	d8802f17 	ldw	r2,188(sp)
     c14:	dfc04717 	ldw	ra,284(sp)
     c18:	df004617 	ldw	fp,280(sp)
     c1c:	ddc04517 	ldw	r23,276(sp)
     c20:	dd804417 	ldw	r22,272(sp)
     c24:	dd404317 	ldw	r21,268(sp)
     c28:	dd004217 	ldw	r20,264(sp)
     c2c:	dcc04117 	ldw	r19,260(sp)
     c30:	dc804017 	ldw	r18,256(sp)
     c34:	dc403f17 	ldw	r17,252(sp)
     c38:	dc003e17 	ldw	r16,248(sp)
     c3c:	dec04804 	addi	sp,sp,288
     c40:	f800283a 	ret
     c44:	d9002d17 	ldw	r4,180(sp)
     c48:	0004bb40 	call	4bb4 <__sinit>
     c4c:	003f0206 	br	858 <__alt_data_end+0xfffb7478>
     c50:	d9002e17 	ldw	r4,184(sp)
     c54:	d9402e17 	ldw	r5,184(sp)
     c58:	21000017 	ldw	r4,0(r4)
     c5c:	28800104 	addi	r2,r5,4
     c60:	d9003115 	stw	r4,196(sp)
     c64:	203fa716 	blt	r4,zero,b04 <__alt_data_end+0xfffb7724>
     c68:	d8802e15 	stw	r2,184(sp)
     c6c:	ac400007 	ldb	r17,0(r21)
     c70:	003f4206 	br	97c <__alt_data_end+0xfffb759c>
     c74:	ac400007 	ldb	r17,0(r21)
     c78:	01000a84 	movi	r4,42
     c7c:	a8c00044 	addi	r3,r21,1
     c80:	89075826 	beq	r17,r4,29e4 <___vfprintf_internal_r+0x21f0>
     c84:	8cbff404 	addi	r18,r17,-48
     c88:	b486ae36 	bltu	r22,r18,2744 <___vfprintf_internal_r+0x1f50>
     c8c:	0009883a 	mov	r4,zero
     c90:	1823883a 	mov	r17,r3
     c94:	01400284 	movi	r5,10
     c98:	000adf80 	call	adf8 <__mulsi3>
     c9c:	88c00007 	ldb	r3,0(r17)
     ca0:	1489883a 	add	r4,r2,r18
     ca4:	8d400044 	addi	r21,r17,1
     ca8:	1cbff404 	addi	r18,r3,-48
     cac:	a823883a 	mov	r17,r21
     cb0:	b4bff82e 	bgeu	r22,r18,c94 <__alt_data_end+0xfffb78b4>
     cb4:	1823883a 	mov	r17,r3
     cb8:	2005f616 	blt	r4,zero,2494 <___vfprintf_internal_r+0x1ca0>
     cbc:	d9002a15 	stw	r4,168(sp)
     cc0:	003f2f06 	br	980 <__alt_data_end+0xfffb75a0>
     cc4:	84002014 	ori	r16,r16,128
     cc8:	ac400007 	ldb	r17,0(r21)
     ccc:	003f2b06 	br	97c <__alt_data_end+0xfffb759c>
     cd0:	8cbff404 	addi	r18,r17,-48
     cd4:	d8003115 	stw	zero,196(sp)
     cd8:	0009883a 	mov	r4,zero
     cdc:	a823883a 	mov	r17,r21
     ce0:	01400284 	movi	r5,10
     ce4:	000adf80 	call	adf8 <__mulsi3>
     ce8:	88c00007 	ldb	r3,0(r17)
     cec:	9089883a 	add	r4,r18,r2
     cf0:	ad400044 	addi	r21,r21,1
     cf4:	1cbff404 	addi	r18,r3,-48
     cf8:	a823883a 	mov	r17,r21
     cfc:	b4bff82e 	bgeu	r22,r18,ce0 <__alt_data_end+0xfffb7900>
     d00:	1823883a 	mov	r17,r3
     d04:	d9003115 	stw	r4,196(sp)
     d08:	003f1d06 	br	980 <__alt_data_end+0xfffb75a0>
     d0c:	8025883a 	mov	r18,r16
     d10:	dc002903 	ldbu	r16,164(sp)
     d14:	e011883a 	mov	r8,fp
     d18:	84003fcc 	andi	r16,r16,255
     d1c:	8007531e 	bne	r16,zero,2a6c <___vfprintf_internal_r+0x2278>
     d20:	94800414 	ori	r18,r18,16
     d24:	9080080c 	andi	r2,r18,32
     d28:	1003a326 	beq	r2,zero,1bb8 <___vfprintf_internal_r+0x13c4>
     d2c:	d9002e17 	ldw	r4,184(sp)
     d30:	20800117 	ldw	r2,4(r4)
     d34:	24c00017 	ldw	r19,0(r4)
     d38:	21000204 	addi	r4,r4,8
     d3c:	d9002e15 	stw	r4,184(sp)
     d40:	102d883a 	mov	r22,r2
     d44:	10047316 	blt	r2,zero,1f14 <___vfprintf_internal_r+0x1720>
     d48:	d9002a17 	ldw	r4,168(sp)
     d4c:	df002783 	ldbu	fp,158(sp)
     d50:	2003e416 	blt	r4,zero,1ce4 <___vfprintf_internal_r+0x14f0>
     d54:	00ffdfc4 	movi	r3,-129
     d58:	9d84b03a 	or	r2,r19,r22
     d5c:	90e4703a 	and	r18,r18,r3
     d60:	10018026 	beq	r2,zero,1364 <___vfprintf_internal_r+0xb70>
     d64:	b003ab26 	beq	r22,zero,1c14 <___vfprintf_internal_r+0x1420>
     d68:	dc402915 	stw	r17,164(sp)
     d6c:	dc001e04 	addi	r16,sp,120
     d70:	b023883a 	mov	r17,r22
     d74:	402d883a 	mov	r22,r8
     d78:	9809883a 	mov	r4,r19
     d7c:	880b883a 	mov	r5,r17
     d80:	01800284 	movi	r6,10
     d84:	000f883a 	mov	r7,zero
     d88:	000a6800 	call	a680 <__umoddi3>
     d8c:	10800c04 	addi	r2,r2,48
     d90:	843fffc4 	addi	r16,r16,-1
     d94:	9809883a 	mov	r4,r19
     d98:	880b883a 	mov	r5,r17
     d9c:	80800005 	stb	r2,0(r16)
     da0:	01800284 	movi	r6,10
     da4:	000f883a 	mov	r7,zero
     da8:	000a0840 	call	a084 <__udivdi3>
     dac:	1027883a 	mov	r19,r2
     db0:	10c4b03a 	or	r2,r2,r3
     db4:	1823883a 	mov	r17,r3
     db8:	103fef1e 	bne	r2,zero,d78 <__alt_data_end+0xfffb7998>
     dbc:	d8c02817 	ldw	r3,160(sp)
     dc0:	dc402917 	ldw	r17,164(sp)
     dc4:	b011883a 	mov	r8,r22
     dc8:	1c07c83a 	sub	r3,r3,r16
     dcc:	d8c02b15 	stw	r3,172(sp)
     dd0:	00005f06 	br	f50 <___vfprintf_internal_r+0x75c>
     dd4:	8025883a 	mov	r18,r16
     dd8:	dc002903 	ldbu	r16,164(sp)
     ddc:	e011883a 	mov	r8,fp
     de0:	84003fcc 	andi	r16,r16,255
     de4:	80071e1e 	bne	r16,zero,2a60 <___vfprintf_internal_r+0x226c>
     de8:	9080020c 	andi	r2,r18,8
     dec:	1004af26 	beq	r2,zero,20ac <___vfprintf_internal_r+0x18b8>
     df0:	d9002e17 	ldw	r4,184(sp)
     df4:	d9402e17 	ldw	r5,184(sp)
     df8:	d8802e17 	ldw	r2,184(sp)
     dfc:	21000017 	ldw	r4,0(r4)
     e00:	29400117 	ldw	r5,4(r5)
     e04:	10800204 	addi	r2,r2,8
     e08:	d9003615 	stw	r4,216(sp)
     e0c:	d9403815 	stw	r5,224(sp)
     e10:	d8802e15 	stw	r2,184(sp)
     e14:	d9003617 	ldw	r4,216(sp)
     e18:	d9403817 	ldw	r5,224(sp)
     e1c:	da003d15 	stw	r8,244(sp)
     e20:	04000044 	movi	r16,1
     e24:	0007d600 	call	7d60 <__fpclassifyd>
     e28:	da003d17 	ldw	r8,244(sp)
     e2c:	1404441e 	bne	r2,r16,1f40 <___vfprintf_internal_r+0x174c>
     e30:	d9003617 	ldw	r4,216(sp)
     e34:	d9403817 	ldw	r5,224(sp)
     e38:	000d883a 	mov	r6,zero
     e3c:	000f883a 	mov	r7,zero
     e40:	000c2000 	call	c200 <__ledf2>
     e44:	da003d17 	ldw	r8,244(sp)
     e48:	1005e316 	blt	r2,zero,25d8 <___vfprintf_internal_r+0x1de4>
     e4c:	df002783 	ldbu	fp,158(sp)
     e50:	008011c4 	movi	r2,71
     e54:	1445580e 	bge	r2,r17,23b8 <___vfprintf_internal_r+0x1bc4>
     e58:	04000074 	movhi	r16,1
     e5c:	84019204 	addi	r16,r16,1608
     e60:	00c000c4 	movi	r3,3
     e64:	00bfdfc4 	movi	r2,-129
     e68:	d8c02915 	stw	r3,164(sp)
     e6c:	90a4703a 	and	r18,r18,r2
     e70:	d8c02b15 	stw	r3,172(sp)
     e74:	d8002a15 	stw	zero,168(sp)
     e78:	d8003215 	stw	zero,200(sp)
     e7c:	00003a06 	br	f68 <___vfprintf_internal_r+0x774>
     e80:	84000214 	ori	r16,r16,8
     e84:	ac400007 	ldb	r17,0(r21)
     e88:	003ebc06 	br	97c <__alt_data_end+0xfffb759c>
     e8c:	8025883a 	mov	r18,r16
     e90:	dc002903 	ldbu	r16,164(sp)
     e94:	e011883a 	mov	r8,fp
     e98:	84003fcc 	andi	r16,r16,255
     e9c:	8007001e 	bne	r16,zero,2aa0 <___vfprintf_internal_r+0x22ac>
     ea0:	94800414 	ori	r18,r18,16
     ea4:	9080080c 	andi	r2,r18,32
     ea8:	1002fa26 	beq	r2,zero,1a94 <___vfprintf_internal_r+0x12a0>
     eac:	d9002e17 	ldw	r4,184(sp)
     eb0:	d9402a17 	ldw	r5,168(sp)
     eb4:	d8002785 	stb	zero,158(sp)
     eb8:	20800204 	addi	r2,r4,8
     ebc:	24c00017 	ldw	r19,0(r4)
     ec0:	25800117 	ldw	r22,4(r4)
     ec4:	2804b116 	blt	r5,zero,218c <___vfprintf_internal_r+0x1998>
     ec8:	013fdfc4 	movi	r4,-129
     ecc:	9d86b03a 	or	r3,r19,r22
     ed0:	d8802e15 	stw	r2,184(sp)
     ed4:	9124703a 	and	r18,r18,r4
     ed8:	1802fb1e 	bne	r3,zero,1ac8 <___vfprintf_internal_r+0x12d4>
     edc:	d8c02a17 	ldw	r3,168(sp)
     ee0:	0039883a 	mov	fp,zero
     ee4:	1805e526 	beq	r3,zero,267c <___vfprintf_internal_r+0x1e88>
     ee8:	0027883a 	mov	r19,zero
     eec:	002d883a 	mov	r22,zero
     ef0:	dc001e04 	addi	r16,sp,120
     ef4:	9806d0fa 	srli	r3,r19,3
     ef8:	b008977a 	slli	r4,r22,29
     efc:	b02cd0fa 	srli	r22,r22,3
     f00:	9cc001cc 	andi	r19,r19,7
     f04:	98800c04 	addi	r2,r19,48
     f08:	843fffc4 	addi	r16,r16,-1
     f0c:	20e6b03a 	or	r19,r4,r3
     f10:	80800005 	stb	r2,0(r16)
     f14:	9d86b03a 	or	r3,r19,r22
     f18:	183ff61e 	bne	r3,zero,ef4 <__alt_data_end+0xfffb7b14>
     f1c:	90c0004c 	andi	r3,r18,1
     f20:	18014126 	beq	r3,zero,1428 <___vfprintf_internal_r+0xc34>
     f24:	10803fcc 	andi	r2,r2,255
     f28:	1080201c 	xori	r2,r2,128
     f2c:	10bfe004 	addi	r2,r2,-128
     f30:	00c00c04 	movi	r3,48
     f34:	10c13c26 	beq	r2,r3,1428 <___vfprintf_internal_r+0xc34>
     f38:	80ffffc5 	stb	r3,-1(r16)
     f3c:	d8c02817 	ldw	r3,160(sp)
     f40:	80bfffc4 	addi	r2,r16,-1
     f44:	1021883a 	mov	r16,r2
     f48:	1887c83a 	sub	r3,r3,r2
     f4c:	d8c02b15 	stw	r3,172(sp)
     f50:	d8802b17 	ldw	r2,172(sp)
     f54:	d9002a17 	ldw	r4,168(sp)
     f58:	1100010e 	bge	r2,r4,f60 <___vfprintf_internal_r+0x76c>
     f5c:	2005883a 	mov	r2,r4
     f60:	d8802915 	stw	r2,164(sp)
     f64:	d8003215 	stw	zero,200(sp)
     f68:	e7003fcc 	andi	fp,fp,255
     f6c:	e700201c 	xori	fp,fp,128
     f70:	e73fe004 	addi	fp,fp,-128
     f74:	e0000326 	beq	fp,zero,f84 <___vfprintf_internal_r+0x790>
     f78:	d8c02917 	ldw	r3,164(sp)
     f7c:	18c00044 	addi	r3,r3,1
     f80:	d8c02915 	stw	r3,164(sp)
     f84:	90c0008c 	andi	r3,r18,2
     f88:	d8c02c15 	stw	r3,176(sp)
     f8c:	18000326 	beq	r3,zero,f9c <___vfprintf_internal_r+0x7a8>
     f90:	d8c02917 	ldw	r3,164(sp)
     f94:	18c00084 	addi	r3,r3,2
     f98:	d8c02915 	stw	r3,164(sp)
     f9c:	90c0210c 	andi	r3,r18,132
     fa0:	d8c03015 	stw	r3,192(sp)
     fa4:	1801c51e 	bne	r3,zero,16bc <___vfprintf_internal_r+0xec8>
     fa8:	d9003117 	ldw	r4,196(sp)
     fac:	d8c02917 	ldw	r3,164(sp)
     fb0:	20e7c83a 	sub	r19,r4,r3
     fb4:	04c1c10e 	bge	zero,r19,16bc <___vfprintf_internal_r+0xec8>
     fb8:	02400404 	movi	r9,16
     fbc:	d8c02017 	ldw	r3,128(sp)
     fc0:	d8801f17 	ldw	r2,124(sp)
     fc4:	4cc52f0e 	bge	r9,r19,2484 <___vfprintf_internal_r+0x1c90>
     fc8:	01400074 	movhi	r5,1
     fcc:	2941a584 	addi	r5,r5,1686
     fd0:	dc403b15 	stw	r17,236(sp)
     fd4:	d9403515 	stw	r5,212(sp)
     fd8:	9823883a 	mov	r17,r19
     fdc:	482d883a 	mov	r22,r9
     fe0:	9027883a 	mov	r19,r18
     fe4:	070001c4 	movi	fp,7
     fe8:	8025883a 	mov	r18,r16
     fec:	dc002d17 	ldw	r16,180(sp)
     ff0:	00000306 	br	1000 <___vfprintf_internal_r+0x80c>
     ff4:	8c7ffc04 	addi	r17,r17,-16
     ff8:	42000204 	addi	r8,r8,8
     ffc:	b440130e 	bge	r22,r17,104c <___vfprintf_internal_r+0x858>
    1000:	01000074 	movhi	r4,1
    1004:	18c00404 	addi	r3,r3,16
    1008:	10800044 	addi	r2,r2,1
    100c:	2101a584 	addi	r4,r4,1686
    1010:	41000015 	stw	r4,0(r8)
    1014:	45800115 	stw	r22,4(r8)
    1018:	d8c02015 	stw	r3,128(sp)
    101c:	d8801f15 	stw	r2,124(sp)
    1020:	e0bff40e 	bge	fp,r2,ff4 <__alt_data_end+0xfffb7c14>
    1024:	d9801e04 	addi	r6,sp,120
    1028:	b80b883a 	mov	r5,r23
    102c:	8009883a 	mov	r4,r16
    1030:	000813c0 	call	813c <__sprint_r>
    1034:	103ef31e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    1038:	8c7ffc04 	addi	r17,r17,-16
    103c:	d8c02017 	ldw	r3,128(sp)
    1040:	d8801f17 	ldw	r2,124(sp)
    1044:	da000404 	addi	r8,sp,16
    1048:	b47fed16 	blt	r22,r17,1000 <__alt_data_end+0xfffb7c20>
    104c:	9021883a 	mov	r16,r18
    1050:	9825883a 	mov	r18,r19
    1054:	8827883a 	mov	r19,r17
    1058:	dc403b17 	ldw	r17,236(sp)
    105c:	d9403517 	ldw	r5,212(sp)
    1060:	98c7883a 	add	r3,r19,r3
    1064:	10800044 	addi	r2,r2,1
    1068:	41400015 	stw	r5,0(r8)
    106c:	44c00115 	stw	r19,4(r8)
    1070:	d8c02015 	stw	r3,128(sp)
    1074:	d8801f15 	stw	r2,124(sp)
    1078:	010001c4 	movi	r4,7
    107c:	2082c516 	blt	r4,r2,1b94 <___vfprintf_internal_r+0x13a0>
    1080:	df002787 	ldb	fp,158(sp)
    1084:	42000204 	addi	r8,r8,8
    1088:	e0000c26 	beq	fp,zero,10bc <___vfprintf_internal_r+0x8c8>
    108c:	d8801f17 	ldw	r2,124(sp)
    1090:	d9002784 	addi	r4,sp,158
    1094:	18c00044 	addi	r3,r3,1
    1098:	10800044 	addi	r2,r2,1
    109c:	41000015 	stw	r4,0(r8)
    10a0:	01000044 	movi	r4,1
    10a4:	41000115 	stw	r4,4(r8)
    10a8:	d8c02015 	stw	r3,128(sp)
    10ac:	d8801f15 	stw	r2,124(sp)
    10b0:	010001c4 	movi	r4,7
    10b4:	20825e16 	blt	r4,r2,1a30 <___vfprintf_internal_r+0x123c>
    10b8:	42000204 	addi	r8,r8,8
    10bc:	d8802c17 	ldw	r2,176(sp)
    10c0:	10000c26 	beq	r2,zero,10f4 <___vfprintf_internal_r+0x900>
    10c4:	d8801f17 	ldw	r2,124(sp)
    10c8:	d9002704 	addi	r4,sp,156
    10cc:	18c00084 	addi	r3,r3,2
    10d0:	10800044 	addi	r2,r2,1
    10d4:	41000015 	stw	r4,0(r8)
    10d8:	01000084 	movi	r4,2
    10dc:	41000115 	stw	r4,4(r8)
    10e0:	d8c02015 	stw	r3,128(sp)
    10e4:	d8801f15 	stw	r2,124(sp)
    10e8:	010001c4 	movi	r4,7
    10ec:	20825816 	blt	r4,r2,1a50 <___vfprintf_internal_r+0x125c>
    10f0:	42000204 	addi	r8,r8,8
    10f4:	d9003017 	ldw	r4,192(sp)
    10f8:	00802004 	movi	r2,128
    10fc:	2081bb26 	beq	r4,r2,17ec <___vfprintf_internal_r+0xff8>
    1100:	d9402a17 	ldw	r5,168(sp)
    1104:	d8802b17 	ldw	r2,172(sp)
    1108:	28adc83a 	sub	r22,r5,r2
    110c:	0580310e 	bge	zero,r22,11d4 <___vfprintf_internal_r+0x9e0>
    1110:	07000404 	movi	fp,16
    1114:	d8801f17 	ldw	r2,124(sp)
    1118:	e584360e 	bge	fp,r22,21f4 <___vfprintf_internal_r+0x1a00>
    111c:	01400074 	movhi	r5,1
    1120:	2941a184 	addi	r5,r5,1670
    1124:	dc402a15 	stw	r17,168(sp)
    1128:	d9402c15 	stw	r5,176(sp)
    112c:	b023883a 	mov	r17,r22
    1130:	04c001c4 	movi	r19,7
    1134:	a82d883a 	mov	r22,r21
    1138:	902b883a 	mov	r21,r18
    113c:	8025883a 	mov	r18,r16
    1140:	dc002d17 	ldw	r16,180(sp)
    1144:	00000306 	br	1154 <___vfprintf_internal_r+0x960>
    1148:	8c7ffc04 	addi	r17,r17,-16
    114c:	42000204 	addi	r8,r8,8
    1150:	e440110e 	bge	fp,r17,1198 <___vfprintf_internal_r+0x9a4>
    1154:	18c00404 	addi	r3,r3,16
    1158:	10800044 	addi	r2,r2,1
    115c:	45000015 	stw	r20,0(r8)
    1160:	47000115 	stw	fp,4(r8)
    1164:	d8c02015 	stw	r3,128(sp)
    1168:	d8801f15 	stw	r2,124(sp)
    116c:	98bff60e 	bge	r19,r2,1148 <__alt_data_end+0xfffb7d68>
    1170:	d9801e04 	addi	r6,sp,120
    1174:	b80b883a 	mov	r5,r23
    1178:	8009883a 	mov	r4,r16
    117c:	000813c0 	call	813c <__sprint_r>
    1180:	103ea01e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    1184:	8c7ffc04 	addi	r17,r17,-16
    1188:	d8c02017 	ldw	r3,128(sp)
    118c:	d8801f17 	ldw	r2,124(sp)
    1190:	da000404 	addi	r8,sp,16
    1194:	e47fef16 	blt	fp,r17,1154 <__alt_data_end+0xfffb7d74>
    1198:	9021883a 	mov	r16,r18
    119c:	a825883a 	mov	r18,r21
    11a0:	b02b883a 	mov	r21,r22
    11a4:	882d883a 	mov	r22,r17
    11a8:	dc402a17 	ldw	r17,168(sp)
    11ac:	d9002c17 	ldw	r4,176(sp)
    11b0:	1d87883a 	add	r3,r3,r22
    11b4:	10800044 	addi	r2,r2,1
    11b8:	41000015 	stw	r4,0(r8)
    11bc:	45800115 	stw	r22,4(r8)
    11c0:	d8c02015 	stw	r3,128(sp)
    11c4:	d8801f15 	stw	r2,124(sp)
    11c8:	010001c4 	movi	r4,7
    11cc:	20821016 	blt	r4,r2,1a10 <___vfprintf_internal_r+0x121c>
    11d0:	42000204 	addi	r8,r8,8
    11d4:	9080400c 	andi	r2,r18,256
    11d8:	10013a1e 	bne	r2,zero,16c4 <___vfprintf_internal_r+0xed0>
    11dc:	d9402b17 	ldw	r5,172(sp)
    11e0:	d8801f17 	ldw	r2,124(sp)
    11e4:	44000015 	stw	r16,0(r8)
    11e8:	1947883a 	add	r3,r3,r5
    11ec:	10800044 	addi	r2,r2,1
    11f0:	41400115 	stw	r5,4(r8)
    11f4:	d8c02015 	stw	r3,128(sp)
    11f8:	d8801f15 	stw	r2,124(sp)
    11fc:	010001c4 	movi	r4,7
    1200:	2081f516 	blt	r4,r2,19d8 <___vfprintf_internal_r+0x11e4>
    1204:	42000204 	addi	r8,r8,8
    1208:	9480010c 	andi	r18,r18,4
    120c:	90003226 	beq	r18,zero,12d8 <___vfprintf_internal_r+0xae4>
    1210:	d9403117 	ldw	r5,196(sp)
    1214:	d8802917 	ldw	r2,164(sp)
    1218:	28a1c83a 	sub	r16,r5,r2
    121c:	04002e0e 	bge	zero,r16,12d8 <___vfprintf_internal_r+0xae4>
    1220:	04400404 	movi	r17,16
    1224:	d8801f17 	ldw	r2,124(sp)
    1228:	8c04c40e 	bge	r17,r16,253c <___vfprintf_internal_r+0x1d48>
    122c:	01400074 	movhi	r5,1
    1230:	2941a584 	addi	r5,r5,1686
    1234:	d9403515 	stw	r5,212(sp)
    1238:	048001c4 	movi	r18,7
    123c:	dcc02d17 	ldw	r19,180(sp)
    1240:	00000306 	br	1250 <___vfprintf_internal_r+0xa5c>
    1244:	843ffc04 	addi	r16,r16,-16
    1248:	42000204 	addi	r8,r8,8
    124c:	8c00130e 	bge	r17,r16,129c <___vfprintf_internal_r+0xaa8>
    1250:	01000074 	movhi	r4,1
    1254:	18c00404 	addi	r3,r3,16
    1258:	10800044 	addi	r2,r2,1
    125c:	2101a584 	addi	r4,r4,1686
    1260:	41000015 	stw	r4,0(r8)
    1264:	44400115 	stw	r17,4(r8)
    1268:	d8c02015 	stw	r3,128(sp)
    126c:	d8801f15 	stw	r2,124(sp)
    1270:	90bff40e 	bge	r18,r2,1244 <__alt_data_end+0xfffb7e64>
    1274:	d9801e04 	addi	r6,sp,120
    1278:	b80b883a 	mov	r5,r23
    127c:	9809883a 	mov	r4,r19
    1280:	000813c0 	call	813c <__sprint_r>
    1284:	103e5f1e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    1288:	843ffc04 	addi	r16,r16,-16
    128c:	d8c02017 	ldw	r3,128(sp)
    1290:	d8801f17 	ldw	r2,124(sp)
    1294:	da000404 	addi	r8,sp,16
    1298:	8c3fed16 	blt	r17,r16,1250 <__alt_data_end+0xfffb7e70>
    129c:	d9403517 	ldw	r5,212(sp)
    12a0:	1c07883a 	add	r3,r3,r16
    12a4:	10800044 	addi	r2,r2,1
    12a8:	41400015 	stw	r5,0(r8)
    12ac:	44000115 	stw	r16,4(r8)
    12b0:	d8c02015 	stw	r3,128(sp)
    12b4:	d8801f15 	stw	r2,124(sp)
    12b8:	010001c4 	movi	r4,7
    12bc:	2080060e 	bge	r4,r2,12d8 <___vfprintf_internal_r+0xae4>
    12c0:	d9002d17 	ldw	r4,180(sp)
    12c4:	d9801e04 	addi	r6,sp,120
    12c8:	b80b883a 	mov	r5,r23
    12cc:	000813c0 	call	813c <__sprint_r>
    12d0:	103e4c1e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    12d4:	d8c02017 	ldw	r3,128(sp)
    12d8:	d8803117 	ldw	r2,196(sp)
    12dc:	d9002917 	ldw	r4,164(sp)
    12e0:	1100010e 	bge	r2,r4,12e8 <___vfprintf_internal_r+0xaf4>
    12e4:	2005883a 	mov	r2,r4
    12e8:	d9402f17 	ldw	r5,188(sp)
    12ec:	288b883a 	add	r5,r5,r2
    12f0:	d9402f15 	stw	r5,188(sp)
    12f4:	1801c01e 	bne	r3,zero,19f8 <___vfprintf_internal_r+0x1204>
    12f8:	a8800007 	ldb	r2,0(r21)
    12fc:	d8001f15 	stw	zero,124(sp)
    1300:	da000404 	addi	r8,sp,16
    1304:	103d751e 	bne	r2,zero,8dc <__alt_data_end+0xfffb74fc>
    1308:	a823883a 	mov	r17,r21
    130c:	003d8b06 	br	93c <__alt_data_end+0xfffb755c>
    1310:	8025883a 	mov	r18,r16
    1314:	dc002903 	ldbu	r16,164(sp)
    1318:	e011883a 	mov	r8,fp
    131c:	84003fcc 	andi	r16,r16,255
    1320:	8005e51e 	bne	r16,zero,2ab8 <___vfprintf_internal_r+0x22c4>
    1324:	94800414 	ori	r18,r18,16
    1328:	9080080c 	andi	r2,r18,32
    132c:	10022b26 	beq	r2,zero,1bdc <___vfprintf_internal_r+0x13e8>
    1330:	d9002e17 	ldw	r4,184(sp)
    1334:	d9402a17 	ldw	r5,168(sp)
    1338:	d8002785 	stb	zero,158(sp)
    133c:	20c00204 	addi	r3,r4,8
    1340:	24c00017 	ldw	r19,0(r4)
    1344:	25800117 	ldw	r22,4(r4)
    1348:	28042e16 	blt	r5,zero,2404 <___vfprintf_internal_r+0x1c10>
    134c:	013fdfc4 	movi	r4,-129
    1350:	9d84b03a 	or	r2,r19,r22
    1354:	d8c02e15 	stw	r3,184(sp)
    1358:	9124703a 	and	r18,r18,r4
    135c:	0039883a 	mov	fp,zero
    1360:	103e801e 	bne	r2,zero,d64 <__alt_data_end+0xfffb7984>
    1364:	d9002a17 	ldw	r4,168(sp)
    1368:	2002e01e 	bne	r4,zero,1eec <___vfprintf_internal_r+0x16f8>
    136c:	d8002a15 	stw	zero,168(sp)
    1370:	d8002b15 	stw	zero,172(sp)
    1374:	dc001e04 	addi	r16,sp,120
    1378:	003ef506 	br	f50 <__alt_data_end+0xfffb7b70>
    137c:	8025883a 	mov	r18,r16
    1380:	dc002903 	ldbu	r16,164(sp)
    1384:	e011883a 	mov	r8,fp
    1388:	84003fcc 	andi	r16,r16,255
    138c:	8005ba1e 	bne	r16,zero,2a78 <___vfprintf_internal_r+0x2284>
    1390:	01000074 	movhi	r4,1
    1394:	21019504 	addi	r4,r4,1620
    1398:	d9003915 	stw	r4,228(sp)
    139c:	9080080c 	andi	r2,r18,32
    13a0:	10006126 	beq	r2,zero,1528 <___vfprintf_internal_r+0xd34>
    13a4:	d9402e17 	ldw	r5,184(sp)
    13a8:	2cc00017 	ldw	r19,0(r5)
    13ac:	2d800117 	ldw	r22,4(r5)
    13b0:	29400204 	addi	r5,r5,8
    13b4:	d9402e15 	stw	r5,184(sp)
    13b8:	9080004c 	andi	r2,r18,1
    13bc:	1001ac26 	beq	r2,zero,1a70 <___vfprintf_internal_r+0x127c>
    13c0:	9d84b03a 	or	r2,r19,r22
    13c4:	10038526 	beq	r2,zero,21dc <___vfprintf_internal_r+0x19e8>
    13c8:	d8c02a17 	ldw	r3,168(sp)
    13cc:	00800c04 	movi	r2,48
    13d0:	d8802705 	stb	r2,156(sp)
    13d4:	dc402745 	stb	r17,157(sp)
    13d8:	d8002785 	stb	zero,158(sp)
    13dc:	90800094 	ori	r2,r18,2
    13e0:	18047916 	blt	r3,zero,25c8 <___vfprintf_internal_r+0x1dd4>
    13e4:	00bfdfc4 	movi	r2,-129
    13e8:	90a4703a 	and	r18,r18,r2
    13ec:	94800094 	ori	r18,r18,2
    13f0:	0039883a 	mov	fp,zero
    13f4:	d9003917 	ldw	r4,228(sp)
    13f8:	dc001e04 	addi	r16,sp,120
    13fc:	988003cc 	andi	r2,r19,15
    1400:	b006973a 	slli	r3,r22,28
    1404:	2085883a 	add	r2,r4,r2
    1408:	9826d13a 	srli	r19,r19,4
    140c:	10800003 	ldbu	r2,0(r2)
    1410:	b02cd13a 	srli	r22,r22,4
    1414:	843fffc4 	addi	r16,r16,-1
    1418:	1ce6b03a 	or	r19,r3,r19
    141c:	80800005 	stb	r2,0(r16)
    1420:	9d84b03a 	or	r2,r19,r22
    1424:	103ff51e 	bne	r2,zero,13fc <__alt_data_end+0xfffb801c>
    1428:	d8c02817 	ldw	r3,160(sp)
    142c:	1c07c83a 	sub	r3,r3,r16
    1430:	d8c02b15 	stw	r3,172(sp)
    1434:	003ec606 	br	f50 <__alt_data_end+0xfffb7b70>
    1438:	8025883a 	mov	r18,r16
    143c:	dc002903 	ldbu	r16,164(sp)
    1440:	e011883a 	mov	r8,fp
    1444:	84003fcc 	andi	r16,r16,255
    1448:	803e9626 	beq	r16,zero,ea4 <__alt_data_end+0xfffb7ac4>
    144c:	d8c02b03 	ldbu	r3,172(sp)
    1450:	d8c02785 	stb	r3,158(sp)
    1454:	003e9306 	br	ea4 <__alt_data_end+0xfffb7ac4>
    1458:	00c00044 	movi	r3,1
    145c:	d8c02905 	stb	r3,164(sp)
    1460:	00c00ac4 	movi	r3,43
    1464:	d8c02b05 	stb	r3,172(sp)
    1468:	ac400007 	ldb	r17,0(r21)
    146c:	003d4306 	br	97c <__alt_data_end+0xfffb759c>
    1470:	84000814 	ori	r16,r16,32
    1474:	ac400007 	ldb	r17,0(r21)
    1478:	003d4006 	br	97c <__alt_data_end+0xfffb759c>
    147c:	d8802e17 	ldw	r2,184(sp)
    1480:	8025883a 	mov	r18,r16
    1484:	d8002785 	stb	zero,158(sp)
    1488:	14000017 	ldw	r16,0(r2)
    148c:	e011883a 	mov	r8,fp
    1490:	14c00104 	addi	r19,r2,4
    1494:	80042d26 	beq	r16,zero,254c <___vfprintf_internal_r+0x1d58>
    1498:	d8c02a17 	ldw	r3,168(sp)
    149c:	1803e416 	blt	r3,zero,2430 <___vfprintf_internal_r+0x1c3c>
    14a0:	180d883a 	mov	r6,r3
    14a4:	000b883a 	mov	r5,zero
    14a8:	8009883a 	mov	r4,r16
    14ac:	df003d15 	stw	fp,244(sp)
    14b0:	000612c0 	call	612c <memchr>
    14b4:	da003d17 	ldw	r8,244(sp)
    14b8:	10046826 	beq	r2,zero,265c <___vfprintf_internal_r+0x1e68>
    14bc:	1405c83a 	sub	r2,r2,r16
    14c0:	d8802b15 	stw	r2,172(sp)
    14c4:	1003e016 	blt	r2,zero,2448 <___vfprintf_internal_r+0x1c54>
    14c8:	df002783 	ldbu	fp,158(sp)
    14cc:	d8802915 	stw	r2,164(sp)
    14d0:	dcc02e15 	stw	r19,184(sp)
    14d4:	d8002a15 	stw	zero,168(sp)
    14d8:	d8003215 	stw	zero,200(sp)
    14dc:	003ea206 	br	f68 <__alt_data_end+0xfffb7b88>
    14e0:	8025883a 	mov	r18,r16
    14e4:	dc002903 	ldbu	r16,164(sp)
    14e8:	e011883a 	mov	r8,fp
    14ec:	84003fcc 	andi	r16,r16,255
    14f0:	803f8d26 	beq	r16,zero,1328 <__alt_data_end+0xfffb7f48>
    14f4:	d8c02b03 	ldbu	r3,172(sp)
    14f8:	d8c02785 	stb	r3,158(sp)
    14fc:	003f8a06 	br	1328 <__alt_data_end+0xfffb7f48>
    1500:	8025883a 	mov	r18,r16
    1504:	dc002903 	ldbu	r16,164(sp)
    1508:	e011883a 	mov	r8,fp
    150c:	84003fcc 	andi	r16,r16,255
    1510:	8005661e 	bne	r16,zero,2aac <___vfprintf_internal_r+0x22b8>
    1514:	01000074 	movhi	r4,1
    1518:	21019a04 	addi	r4,r4,1640
    151c:	d9003915 	stw	r4,228(sp)
    1520:	9080080c 	andi	r2,r18,32
    1524:	103f9f1e 	bne	r2,zero,13a4 <__alt_data_end+0xfffb7fc4>
    1528:	9080040c 	andi	r2,r18,16
    152c:	1002eb26 	beq	r2,zero,20dc <___vfprintf_internal_r+0x18e8>
    1530:	d8802e17 	ldw	r2,184(sp)
    1534:	002d883a 	mov	r22,zero
    1538:	14c00017 	ldw	r19,0(r2)
    153c:	10800104 	addi	r2,r2,4
    1540:	d8802e15 	stw	r2,184(sp)
    1544:	003f9c06 	br	13b8 <__alt_data_end+0xfffb7fd8>
    1548:	d8802b07 	ldb	r2,172(sp)
    154c:	1002e11e 	bne	r2,zero,20d4 <___vfprintf_internal_r+0x18e0>
    1550:	00c00044 	movi	r3,1
    1554:	d8c02905 	stb	r3,164(sp)
    1558:	00c00804 	movi	r3,32
    155c:	d8c02b05 	stb	r3,172(sp)
    1560:	ac400007 	ldb	r17,0(r21)
    1564:	003d0506 	br	97c <__alt_data_end+0xfffb759c>
    1568:	84000054 	ori	r16,r16,1
    156c:	ac400007 	ldb	r17,0(r21)
    1570:	003d0206 	br	97c <__alt_data_end+0xfffb759c>
    1574:	8025883a 	mov	r18,r16
    1578:	dc002903 	ldbu	r16,164(sp)
    157c:	e011883a 	mov	r8,fp
    1580:	84003fcc 	andi	r16,r16,255
    1584:	803de726 	beq	r16,zero,d24 <__alt_data_end+0xfffb7944>
    1588:	d8c02b03 	ldbu	r3,172(sp)
    158c:	d8c02785 	stb	r3,158(sp)
    1590:	003de406 	br	d24 <__alt_data_end+0xfffb7944>
    1594:	84001014 	ori	r16,r16,64
    1598:	ac400007 	ldb	r17,0(r21)
    159c:	003cf706 	br	97c <__alt_data_end+0xfffb759c>
    15a0:	ac400007 	ldb	r17,0(r21)
    15a4:	00801b04 	movi	r2,108
    15a8:	88838f26 	beq	r17,r2,23e8 <___vfprintf_internal_r+0x1bf4>
    15ac:	84000414 	ori	r16,r16,16
    15b0:	003cf206 	br	97c <__alt_data_end+0xfffb759c>
    15b4:	8025883a 	mov	r18,r16
    15b8:	dc002903 	ldbu	r16,164(sp)
    15bc:	e011883a 	mov	r8,fp
    15c0:	84003fcc 	andi	r16,r16,255
    15c4:	80053f1e 	bne	r16,zero,2ac4 <___vfprintf_internal_r+0x22d0>
    15c8:	9080080c 	andi	r2,r18,32
    15cc:	1002d226 	beq	r2,zero,2118 <___vfprintf_internal_r+0x1924>
    15d0:	d9002e17 	ldw	r4,184(sp)
    15d4:	d9402f17 	ldw	r5,188(sp)
    15d8:	20800017 	ldw	r2,0(r4)
    15dc:	2807d7fa 	srai	r3,r5,31
    15e0:	21000104 	addi	r4,r4,4
    15e4:	d9002e15 	stw	r4,184(sp)
    15e8:	11400015 	stw	r5,0(r2)
    15ec:	10c00115 	stw	r3,4(r2)
    15f0:	003cb806 	br	8d4 <__alt_data_end+0xfffb74f4>
    15f4:	d8c02e17 	ldw	r3,184(sp)
    15f8:	d9002e17 	ldw	r4,184(sp)
    15fc:	8025883a 	mov	r18,r16
    1600:	18800017 	ldw	r2,0(r3)
    1604:	21000104 	addi	r4,r4,4
    1608:	00c00044 	movi	r3,1
    160c:	e011883a 	mov	r8,fp
    1610:	d8c02915 	stw	r3,164(sp)
    1614:	d8002785 	stb	zero,158(sp)
    1618:	d8801405 	stb	r2,80(sp)
    161c:	d9002e15 	stw	r4,184(sp)
    1620:	d8c02b15 	stw	r3,172(sp)
    1624:	d8002a15 	stw	zero,168(sp)
    1628:	d8003215 	stw	zero,200(sp)
    162c:	dc001404 	addi	r16,sp,80
    1630:	0039883a 	mov	fp,zero
    1634:	003e5306 	br	f84 <__alt_data_end+0xfffb7ba4>
    1638:	01000074 	movhi	r4,1
    163c:	21019a04 	addi	r4,r4,1640
    1640:	0039883a 	mov	fp,zero
    1644:	d9003915 	stw	r4,228(sp)
    1648:	04401e04 	movi	r17,120
    164c:	003f6906 	br	13f4 <__alt_data_end+0xfffb8014>
    1650:	8025883a 	mov	r18,r16
    1654:	dc002903 	ldbu	r16,164(sp)
    1658:	e011883a 	mov	r8,fp
    165c:	84003fcc 	andi	r16,r16,255
    1660:	8005081e 	bne	r16,zero,2a84 <___vfprintf_internal_r+0x2290>
    1664:	883d6126 	beq	r17,zero,bec <__alt_data_end+0xfffb780c>
    1668:	00c00044 	movi	r3,1
    166c:	d8c02915 	stw	r3,164(sp)
    1670:	dc401405 	stb	r17,80(sp)
    1674:	d8002785 	stb	zero,158(sp)
    1678:	003fe906 	br	1620 <__alt_data_end+0xfffb8240>
    167c:	01400074 	movhi	r5,1
    1680:	29419a04 	addi	r5,r5,1640
    1684:	d9403915 	stw	r5,228(sp)
    1688:	d8c02e15 	stw	r3,184(sp)
    168c:	1025883a 	mov	r18,r2
    1690:	04401e04 	movi	r17,120
    1694:	9d84b03a 	or	r2,r19,r22
    1698:	1000fc1e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x1298>
    169c:	0039883a 	mov	fp,zero
    16a0:	00800084 	movi	r2,2
    16a4:	10803fcc 	andi	r2,r2,255
    16a8:	00c00044 	movi	r3,1
    16ac:	10c20f26 	beq	r2,r3,1eec <___vfprintf_internal_r+0x16f8>
    16b0:	00c00084 	movi	r3,2
    16b4:	10fd3326 	beq	r2,r3,b84 <__alt_data_end+0xfffb77a4>
    16b8:	003e0b06 	br	ee8 <__alt_data_end+0xfffb7b08>
    16bc:	d8c02017 	ldw	r3,128(sp)
    16c0:	003e7106 	br	1088 <__alt_data_end+0xfffb7ca8>
    16c4:	00801944 	movi	r2,101
    16c8:	14407e0e 	bge	r2,r17,18c4 <___vfprintf_internal_r+0x10d0>
    16cc:	d9003617 	ldw	r4,216(sp)
    16d0:	d9403817 	ldw	r5,224(sp)
    16d4:	000d883a 	mov	r6,zero
    16d8:	000f883a 	mov	r7,zero
    16dc:	d8c03c15 	stw	r3,240(sp)
    16e0:	da003d15 	stw	r8,244(sp)
    16e4:	000c09c0 	call	c09c <__eqdf2>
    16e8:	d8c03c17 	ldw	r3,240(sp)
    16ec:	da003d17 	ldw	r8,244(sp)
    16f0:	1000f71e 	bne	r2,zero,1ad0 <___vfprintf_internal_r+0x12dc>
    16f4:	d8801f17 	ldw	r2,124(sp)
    16f8:	01000074 	movhi	r4,1
    16fc:	2101a104 	addi	r4,r4,1668
    1700:	18c00044 	addi	r3,r3,1
    1704:	10800044 	addi	r2,r2,1
    1708:	41000015 	stw	r4,0(r8)
    170c:	01000044 	movi	r4,1
    1710:	41000115 	stw	r4,4(r8)
    1714:	d8c02015 	stw	r3,128(sp)
    1718:	d8801f15 	stw	r2,124(sp)
    171c:	010001c4 	movi	r4,7
    1720:	2082b816 	blt	r4,r2,2204 <___vfprintf_internal_r+0x1a10>
    1724:	42000204 	addi	r8,r8,8
    1728:	d8802617 	ldw	r2,152(sp)
    172c:	d9403317 	ldw	r5,204(sp)
    1730:	11400216 	blt	r2,r5,173c <___vfprintf_internal_r+0xf48>
    1734:	9080004c 	andi	r2,r18,1
    1738:	103eb326 	beq	r2,zero,1208 <__alt_data_end+0xfffb7e28>
    173c:	d8803717 	ldw	r2,220(sp)
    1740:	d9003417 	ldw	r4,208(sp)
    1744:	d9403717 	ldw	r5,220(sp)
    1748:	1887883a 	add	r3,r3,r2
    174c:	d8801f17 	ldw	r2,124(sp)
    1750:	41000015 	stw	r4,0(r8)
    1754:	41400115 	stw	r5,4(r8)
    1758:	10800044 	addi	r2,r2,1
    175c:	d8c02015 	stw	r3,128(sp)
    1760:	d8801f15 	stw	r2,124(sp)
    1764:	010001c4 	movi	r4,7
    1768:	20832916 	blt	r4,r2,2410 <___vfprintf_internal_r+0x1c1c>
    176c:	42000204 	addi	r8,r8,8
    1770:	d8803317 	ldw	r2,204(sp)
    1774:	143fffc4 	addi	r16,r2,-1
    1778:	043ea30e 	bge	zero,r16,1208 <__alt_data_end+0xfffb7e28>
    177c:	04400404 	movi	r17,16
    1780:	d8801f17 	ldw	r2,124(sp)
    1784:	8c00880e 	bge	r17,r16,19a8 <___vfprintf_internal_r+0x11b4>
    1788:	01400074 	movhi	r5,1
    178c:	2941a184 	addi	r5,r5,1670
    1790:	d9402c15 	stw	r5,176(sp)
    1794:	058001c4 	movi	r22,7
    1798:	dcc02d17 	ldw	r19,180(sp)
    179c:	00000306 	br	17ac <___vfprintf_internal_r+0xfb8>
    17a0:	42000204 	addi	r8,r8,8
    17a4:	843ffc04 	addi	r16,r16,-16
    17a8:	8c00820e 	bge	r17,r16,19b4 <___vfprintf_internal_r+0x11c0>
    17ac:	18c00404 	addi	r3,r3,16
    17b0:	10800044 	addi	r2,r2,1
    17b4:	45000015 	stw	r20,0(r8)
    17b8:	44400115 	stw	r17,4(r8)
    17bc:	d8c02015 	stw	r3,128(sp)
    17c0:	d8801f15 	stw	r2,124(sp)
    17c4:	b0bff60e 	bge	r22,r2,17a0 <__alt_data_end+0xfffb83c0>
    17c8:	d9801e04 	addi	r6,sp,120
    17cc:	b80b883a 	mov	r5,r23
    17d0:	9809883a 	mov	r4,r19
    17d4:	000813c0 	call	813c <__sprint_r>
    17d8:	103d0a1e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    17dc:	d8c02017 	ldw	r3,128(sp)
    17e0:	d8801f17 	ldw	r2,124(sp)
    17e4:	da000404 	addi	r8,sp,16
    17e8:	003fee06 	br	17a4 <__alt_data_end+0xfffb83c4>
    17ec:	d9403117 	ldw	r5,196(sp)
    17f0:	d8802917 	ldw	r2,164(sp)
    17f4:	28adc83a 	sub	r22,r5,r2
    17f8:	05be410e 	bge	zero,r22,1100 <__alt_data_end+0xfffb7d20>
    17fc:	07000404 	movi	fp,16
    1800:	d8801f17 	ldw	r2,124(sp)
    1804:	e5838f0e 	bge	fp,r22,2644 <___vfprintf_internal_r+0x1e50>
    1808:	01400074 	movhi	r5,1
    180c:	2941a184 	addi	r5,r5,1670
    1810:	dc403015 	stw	r17,192(sp)
    1814:	d9402c15 	stw	r5,176(sp)
    1818:	b023883a 	mov	r17,r22
    181c:	04c001c4 	movi	r19,7
    1820:	a82d883a 	mov	r22,r21
    1824:	902b883a 	mov	r21,r18
    1828:	8025883a 	mov	r18,r16
    182c:	dc002d17 	ldw	r16,180(sp)
    1830:	00000306 	br	1840 <___vfprintf_internal_r+0x104c>
    1834:	8c7ffc04 	addi	r17,r17,-16
    1838:	42000204 	addi	r8,r8,8
    183c:	e440110e 	bge	fp,r17,1884 <___vfprintf_internal_r+0x1090>
    1840:	18c00404 	addi	r3,r3,16
    1844:	10800044 	addi	r2,r2,1
    1848:	45000015 	stw	r20,0(r8)
    184c:	47000115 	stw	fp,4(r8)
    1850:	d8c02015 	stw	r3,128(sp)
    1854:	d8801f15 	stw	r2,124(sp)
    1858:	98bff60e 	bge	r19,r2,1834 <__alt_data_end+0xfffb8454>
    185c:	d9801e04 	addi	r6,sp,120
    1860:	b80b883a 	mov	r5,r23
    1864:	8009883a 	mov	r4,r16
    1868:	000813c0 	call	813c <__sprint_r>
    186c:	103ce51e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    1870:	8c7ffc04 	addi	r17,r17,-16
    1874:	d8c02017 	ldw	r3,128(sp)
    1878:	d8801f17 	ldw	r2,124(sp)
    187c:	da000404 	addi	r8,sp,16
    1880:	e47fef16 	blt	fp,r17,1840 <__alt_data_end+0xfffb8460>
    1884:	9021883a 	mov	r16,r18
    1888:	a825883a 	mov	r18,r21
    188c:	b02b883a 	mov	r21,r22
    1890:	882d883a 	mov	r22,r17
    1894:	dc403017 	ldw	r17,192(sp)
    1898:	d9002c17 	ldw	r4,176(sp)
    189c:	1d87883a 	add	r3,r3,r22
    18a0:	10800044 	addi	r2,r2,1
    18a4:	41000015 	stw	r4,0(r8)
    18a8:	45800115 	stw	r22,4(r8)
    18ac:	d8c02015 	stw	r3,128(sp)
    18b0:	d8801f15 	stw	r2,124(sp)
    18b4:	010001c4 	movi	r4,7
    18b8:	20818e16 	blt	r4,r2,1ef4 <___vfprintf_internal_r+0x1700>
    18bc:	42000204 	addi	r8,r8,8
    18c0:	003e0f06 	br	1100 <__alt_data_end+0xfffb7d20>
    18c4:	d9403317 	ldw	r5,204(sp)
    18c8:	00800044 	movi	r2,1
    18cc:	18c00044 	addi	r3,r3,1
    18d0:	1141530e 	bge	r2,r5,1e20 <___vfprintf_internal_r+0x162c>
    18d4:	dc401f17 	ldw	r17,124(sp)
    18d8:	00800044 	movi	r2,1
    18dc:	40800115 	stw	r2,4(r8)
    18e0:	8c400044 	addi	r17,r17,1
    18e4:	44000015 	stw	r16,0(r8)
    18e8:	d8c02015 	stw	r3,128(sp)
    18ec:	dc401f15 	stw	r17,124(sp)
    18f0:	008001c4 	movi	r2,7
    18f4:	14416b16 	blt	r2,r17,1ea4 <___vfprintf_internal_r+0x16b0>
    18f8:	42000204 	addi	r8,r8,8
    18fc:	d8803717 	ldw	r2,220(sp)
    1900:	d9003417 	ldw	r4,208(sp)
    1904:	8c400044 	addi	r17,r17,1
    1908:	10c7883a 	add	r3,r2,r3
    190c:	40800115 	stw	r2,4(r8)
    1910:	41000015 	stw	r4,0(r8)
    1914:	d8c02015 	stw	r3,128(sp)
    1918:	dc401f15 	stw	r17,124(sp)
    191c:	008001c4 	movi	r2,7
    1920:	14416916 	blt	r2,r17,1ec8 <___vfprintf_internal_r+0x16d4>
    1924:	45800204 	addi	r22,r8,8
    1928:	d9003617 	ldw	r4,216(sp)
    192c:	d9403817 	ldw	r5,224(sp)
    1930:	000d883a 	mov	r6,zero
    1934:	000f883a 	mov	r7,zero
    1938:	d8c03c15 	stw	r3,240(sp)
    193c:	000c09c0 	call	c09c <__eqdf2>
    1940:	d8c03c17 	ldw	r3,240(sp)
    1944:	1000bc26 	beq	r2,zero,1c38 <___vfprintf_internal_r+0x1444>
    1948:	d9403317 	ldw	r5,204(sp)
    194c:	84000044 	addi	r16,r16,1
    1950:	8c400044 	addi	r17,r17,1
    1954:	28bfffc4 	addi	r2,r5,-1
    1958:	1887883a 	add	r3,r3,r2
    195c:	b0800115 	stw	r2,4(r22)
    1960:	b4000015 	stw	r16,0(r22)
    1964:	d8c02015 	stw	r3,128(sp)
    1968:	dc401f15 	stw	r17,124(sp)
    196c:	008001c4 	movi	r2,7
    1970:	14414316 	blt	r2,r17,1e80 <___vfprintf_internal_r+0x168c>
    1974:	b5800204 	addi	r22,r22,8
    1978:	d9003a17 	ldw	r4,232(sp)
    197c:	df0022c4 	addi	fp,sp,139
    1980:	8c400044 	addi	r17,r17,1
    1984:	20c7883a 	add	r3,r4,r3
    1988:	b7000015 	stw	fp,0(r22)
    198c:	b1000115 	stw	r4,4(r22)
    1990:	d8c02015 	stw	r3,128(sp)
    1994:	dc401f15 	stw	r17,124(sp)
    1998:	008001c4 	movi	r2,7
    199c:	14400e16 	blt	r2,r17,19d8 <___vfprintf_internal_r+0x11e4>
    19a0:	b2000204 	addi	r8,r22,8
    19a4:	003e1806 	br	1208 <__alt_data_end+0xfffb7e28>
    19a8:	01000074 	movhi	r4,1
    19ac:	2101a184 	addi	r4,r4,1670
    19b0:	d9002c15 	stw	r4,176(sp)
    19b4:	d9002c17 	ldw	r4,176(sp)
    19b8:	1c07883a 	add	r3,r3,r16
    19bc:	44000115 	stw	r16,4(r8)
    19c0:	41000015 	stw	r4,0(r8)
    19c4:	10800044 	addi	r2,r2,1
    19c8:	d8c02015 	stw	r3,128(sp)
    19cc:	d8801f15 	stw	r2,124(sp)
    19d0:	010001c4 	movi	r4,7
    19d4:	20be0b0e 	bge	r4,r2,1204 <__alt_data_end+0xfffb7e24>
    19d8:	d9002d17 	ldw	r4,180(sp)
    19dc:	d9801e04 	addi	r6,sp,120
    19e0:	b80b883a 	mov	r5,r23
    19e4:	000813c0 	call	813c <__sprint_r>
    19e8:	103c861e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    19ec:	d8c02017 	ldw	r3,128(sp)
    19f0:	da000404 	addi	r8,sp,16
    19f4:	003e0406 	br	1208 <__alt_data_end+0xfffb7e28>
    19f8:	d9002d17 	ldw	r4,180(sp)
    19fc:	d9801e04 	addi	r6,sp,120
    1a00:	b80b883a 	mov	r5,r23
    1a04:	000813c0 	call	813c <__sprint_r>
    1a08:	103e3b26 	beq	r2,zero,12f8 <__alt_data_end+0xfffb7f18>
    1a0c:	003c7d06 	br	c04 <__alt_data_end+0xfffb7824>
    1a10:	d9002d17 	ldw	r4,180(sp)
    1a14:	d9801e04 	addi	r6,sp,120
    1a18:	b80b883a 	mov	r5,r23
    1a1c:	000813c0 	call	813c <__sprint_r>
    1a20:	103c781e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    1a24:	d8c02017 	ldw	r3,128(sp)
    1a28:	da000404 	addi	r8,sp,16
    1a2c:	003de906 	br	11d4 <__alt_data_end+0xfffb7df4>
    1a30:	d9002d17 	ldw	r4,180(sp)
    1a34:	d9801e04 	addi	r6,sp,120
    1a38:	b80b883a 	mov	r5,r23
    1a3c:	000813c0 	call	813c <__sprint_r>
    1a40:	103c701e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    1a44:	d8c02017 	ldw	r3,128(sp)
    1a48:	da000404 	addi	r8,sp,16
    1a4c:	003d9b06 	br	10bc <__alt_data_end+0xfffb7cdc>
    1a50:	d9002d17 	ldw	r4,180(sp)
    1a54:	d9801e04 	addi	r6,sp,120
    1a58:	b80b883a 	mov	r5,r23
    1a5c:	000813c0 	call	813c <__sprint_r>
    1a60:	103c681e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    1a64:	d8c02017 	ldw	r3,128(sp)
    1a68:	da000404 	addi	r8,sp,16
    1a6c:	003da106 	br	10f4 <__alt_data_end+0xfffb7d14>
    1a70:	d9402a17 	ldw	r5,168(sp)
    1a74:	d8002785 	stb	zero,158(sp)
    1a78:	283f0616 	blt	r5,zero,1694 <__alt_data_end+0xfffb82b4>
    1a7c:	00ffdfc4 	movi	r3,-129
    1a80:	9d84b03a 	or	r2,r19,r22
    1a84:	90e4703a 	and	r18,r18,r3
    1a88:	103c3b26 	beq	r2,zero,b78 <__alt_data_end+0xfffb7798>
    1a8c:	0039883a 	mov	fp,zero
    1a90:	003e5806 	br	13f4 <__alt_data_end+0xfffb8014>
    1a94:	9080040c 	andi	r2,r18,16
    1a98:	1001b326 	beq	r2,zero,2168 <___vfprintf_internal_r+0x1974>
    1a9c:	d8c02e17 	ldw	r3,184(sp)
    1aa0:	d9002a17 	ldw	r4,168(sp)
    1aa4:	d8002785 	stb	zero,158(sp)
    1aa8:	18800104 	addi	r2,r3,4
    1aac:	1cc00017 	ldw	r19,0(r3)
    1ab0:	002d883a 	mov	r22,zero
    1ab4:	2001b516 	blt	r4,zero,218c <___vfprintf_internal_r+0x1998>
    1ab8:	00ffdfc4 	movi	r3,-129
    1abc:	d8802e15 	stw	r2,184(sp)
    1ac0:	90e4703a 	and	r18,r18,r3
    1ac4:	983d0526 	beq	r19,zero,edc <__alt_data_end+0xfffb7afc>
    1ac8:	0039883a 	mov	fp,zero
    1acc:	003d0806 	br	ef0 <__alt_data_end+0xfffb7b10>
    1ad0:	dc402617 	ldw	r17,152(sp)
    1ad4:	0441d30e 	bge	zero,r17,2224 <___vfprintf_internal_r+0x1a30>
    1ad8:	dc403217 	ldw	r17,200(sp)
    1adc:	d8803317 	ldw	r2,204(sp)
    1ae0:	1440010e 	bge	r2,r17,1ae8 <___vfprintf_internal_r+0x12f4>
    1ae4:	1023883a 	mov	r17,r2
    1ae8:	04400a0e 	bge	zero,r17,1b14 <___vfprintf_internal_r+0x1320>
    1aec:	d8801f17 	ldw	r2,124(sp)
    1af0:	1c47883a 	add	r3,r3,r17
    1af4:	44000015 	stw	r16,0(r8)
    1af8:	10800044 	addi	r2,r2,1
    1afc:	44400115 	stw	r17,4(r8)
    1b00:	d8c02015 	stw	r3,128(sp)
    1b04:	d8801f15 	stw	r2,124(sp)
    1b08:	010001c4 	movi	r4,7
    1b0c:	20826516 	blt	r4,r2,24a4 <___vfprintf_internal_r+0x1cb0>
    1b10:	42000204 	addi	r8,r8,8
    1b14:	88026116 	blt	r17,zero,249c <___vfprintf_internal_r+0x1ca8>
    1b18:	d9003217 	ldw	r4,200(sp)
    1b1c:	2463c83a 	sub	r17,r4,r17
    1b20:	04407b0e 	bge	zero,r17,1d10 <___vfprintf_internal_r+0x151c>
    1b24:	05800404 	movi	r22,16
    1b28:	d8801f17 	ldw	r2,124(sp)
    1b2c:	b4419d0e 	bge	r22,r17,21a4 <___vfprintf_internal_r+0x19b0>
    1b30:	01000074 	movhi	r4,1
    1b34:	2101a184 	addi	r4,r4,1670
    1b38:	d9002c15 	stw	r4,176(sp)
    1b3c:	070001c4 	movi	fp,7
    1b40:	dcc02d17 	ldw	r19,180(sp)
    1b44:	00000306 	br	1b54 <___vfprintf_internal_r+0x1360>
    1b48:	42000204 	addi	r8,r8,8
    1b4c:	8c7ffc04 	addi	r17,r17,-16
    1b50:	b441970e 	bge	r22,r17,21b0 <___vfprintf_internal_r+0x19bc>
    1b54:	18c00404 	addi	r3,r3,16
    1b58:	10800044 	addi	r2,r2,1
    1b5c:	45000015 	stw	r20,0(r8)
    1b60:	45800115 	stw	r22,4(r8)
    1b64:	d8c02015 	stw	r3,128(sp)
    1b68:	d8801f15 	stw	r2,124(sp)
    1b6c:	e0bff60e 	bge	fp,r2,1b48 <__alt_data_end+0xfffb8768>
    1b70:	d9801e04 	addi	r6,sp,120
    1b74:	b80b883a 	mov	r5,r23
    1b78:	9809883a 	mov	r4,r19
    1b7c:	000813c0 	call	813c <__sprint_r>
    1b80:	103c201e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    1b84:	d8c02017 	ldw	r3,128(sp)
    1b88:	d8801f17 	ldw	r2,124(sp)
    1b8c:	da000404 	addi	r8,sp,16
    1b90:	003fee06 	br	1b4c <__alt_data_end+0xfffb876c>
    1b94:	d9002d17 	ldw	r4,180(sp)
    1b98:	d9801e04 	addi	r6,sp,120
    1b9c:	b80b883a 	mov	r5,r23
    1ba0:	000813c0 	call	813c <__sprint_r>
    1ba4:	103c171e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    1ba8:	d8c02017 	ldw	r3,128(sp)
    1bac:	df002787 	ldb	fp,158(sp)
    1bb0:	da000404 	addi	r8,sp,16
    1bb4:	003d3406 	br	1088 <__alt_data_end+0xfffb7ca8>
    1bb8:	9080040c 	andi	r2,r18,16
    1bbc:	10016126 	beq	r2,zero,2144 <___vfprintf_internal_r+0x1950>
    1bc0:	d9402e17 	ldw	r5,184(sp)
    1bc4:	2cc00017 	ldw	r19,0(r5)
    1bc8:	29400104 	addi	r5,r5,4
    1bcc:	d9402e15 	stw	r5,184(sp)
    1bd0:	982dd7fa 	srai	r22,r19,31
    1bd4:	b005883a 	mov	r2,r22
    1bd8:	003c5a06 	br	d44 <__alt_data_end+0xfffb7964>
    1bdc:	9080040c 	andi	r2,r18,16
    1be0:	10003526 	beq	r2,zero,1cb8 <___vfprintf_internal_r+0x14c4>
    1be4:	d8c02e17 	ldw	r3,184(sp)
    1be8:	d9002a17 	ldw	r4,168(sp)
    1bec:	d8002785 	stb	zero,158(sp)
    1bf0:	18800104 	addi	r2,r3,4
    1bf4:	1cc00017 	ldw	r19,0(r3)
    1bf8:	002d883a 	mov	r22,zero
    1bfc:	20003716 	blt	r4,zero,1cdc <___vfprintf_internal_r+0x14e8>
    1c00:	00ffdfc4 	movi	r3,-129
    1c04:	d8802e15 	stw	r2,184(sp)
    1c08:	90e4703a 	and	r18,r18,r3
    1c0c:	0039883a 	mov	fp,zero
    1c10:	983dd426 	beq	r19,zero,1364 <__alt_data_end+0xfffb7f84>
    1c14:	00800244 	movi	r2,9
    1c18:	14fc5336 	bltu	r2,r19,d68 <__alt_data_end+0xfffb7988>
    1c1c:	d8c02817 	ldw	r3,160(sp)
    1c20:	dc001dc4 	addi	r16,sp,119
    1c24:	9cc00c04 	addi	r19,r19,48
    1c28:	1c07c83a 	sub	r3,r3,r16
    1c2c:	dcc01dc5 	stb	r19,119(sp)
    1c30:	d8c02b15 	stw	r3,172(sp)
    1c34:	003cc606 	br	f50 <__alt_data_end+0xfffb7b70>
    1c38:	d8803317 	ldw	r2,204(sp)
    1c3c:	143fffc4 	addi	r16,r2,-1
    1c40:	043f4d0e 	bge	zero,r16,1978 <__alt_data_end+0xfffb8598>
    1c44:	07000404 	movi	fp,16
    1c48:	e400810e 	bge	fp,r16,1e50 <___vfprintf_internal_r+0x165c>
    1c4c:	01400074 	movhi	r5,1
    1c50:	2941a184 	addi	r5,r5,1670
    1c54:	d9402c15 	stw	r5,176(sp)
    1c58:	01c001c4 	movi	r7,7
    1c5c:	dcc02d17 	ldw	r19,180(sp)
    1c60:	00000306 	br	1c70 <___vfprintf_internal_r+0x147c>
    1c64:	b5800204 	addi	r22,r22,8
    1c68:	843ffc04 	addi	r16,r16,-16
    1c6c:	e4007b0e 	bge	fp,r16,1e5c <___vfprintf_internal_r+0x1668>
    1c70:	18c00404 	addi	r3,r3,16
    1c74:	8c400044 	addi	r17,r17,1
    1c78:	b5000015 	stw	r20,0(r22)
    1c7c:	b7000115 	stw	fp,4(r22)
    1c80:	d8c02015 	stw	r3,128(sp)
    1c84:	dc401f15 	stw	r17,124(sp)
    1c88:	3c7ff60e 	bge	r7,r17,1c64 <__alt_data_end+0xfffb8884>
    1c8c:	d9801e04 	addi	r6,sp,120
    1c90:	b80b883a 	mov	r5,r23
    1c94:	9809883a 	mov	r4,r19
    1c98:	d9c03c15 	stw	r7,240(sp)
    1c9c:	000813c0 	call	813c <__sprint_r>
    1ca0:	d9c03c17 	ldw	r7,240(sp)
    1ca4:	103bd71e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    1ca8:	d8c02017 	ldw	r3,128(sp)
    1cac:	dc401f17 	ldw	r17,124(sp)
    1cb0:	dd800404 	addi	r22,sp,16
    1cb4:	003fec06 	br	1c68 <__alt_data_end+0xfffb8888>
    1cb8:	9080100c 	andi	r2,r18,64
    1cbc:	d8002785 	stb	zero,158(sp)
    1cc0:	10010e26 	beq	r2,zero,20fc <___vfprintf_internal_r+0x1908>
    1cc4:	d9402e17 	ldw	r5,184(sp)
    1cc8:	d8c02a17 	ldw	r3,168(sp)
    1ccc:	002d883a 	mov	r22,zero
    1cd0:	28800104 	addi	r2,r5,4
    1cd4:	2cc0000b 	ldhu	r19,0(r5)
    1cd8:	183fc90e 	bge	r3,zero,1c00 <__alt_data_end+0xfffb8820>
    1cdc:	d8802e15 	stw	r2,184(sp)
    1ce0:	0039883a 	mov	fp,zero
    1ce4:	9d84b03a 	or	r2,r19,r22
    1ce8:	103c1e1e 	bne	r2,zero,d64 <__alt_data_end+0xfffb7984>
    1cec:	00800044 	movi	r2,1
    1cf0:	003e6c06 	br	16a4 <__alt_data_end+0xfffb82c4>
    1cf4:	d9002d17 	ldw	r4,180(sp)
    1cf8:	d9801e04 	addi	r6,sp,120
    1cfc:	b80b883a 	mov	r5,r23
    1d00:	000813c0 	call	813c <__sprint_r>
    1d04:	103bbf1e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    1d08:	d8c02017 	ldw	r3,128(sp)
    1d0c:	da000404 	addi	r8,sp,16
    1d10:	d9003217 	ldw	r4,200(sp)
    1d14:	d8802617 	ldw	r2,152(sp)
    1d18:	d9403317 	ldw	r5,204(sp)
    1d1c:	8123883a 	add	r17,r16,r4
    1d20:	11400216 	blt	r2,r5,1d2c <___vfprintf_internal_r+0x1538>
    1d24:	9100004c 	andi	r4,r18,1
    1d28:	20000d26 	beq	r4,zero,1d60 <___vfprintf_internal_r+0x156c>
    1d2c:	d9003717 	ldw	r4,220(sp)
    1d30:	d9403417 	ldw	r5,208(sp)
    1d34:	1907883a 	add	r3,r3,r4
    1d38:	d9001f17 	ldw	r4,124(sp)
    1d3c:	41400015 	stw	r5,0(r8)
    1d40:	d9403717 	ldw	r5,220(sp)
    1d44:	21000044 	addi	r4,r4,1
    1d48:	d8c02015 	stw	r3,128(sp)
    1d4c:	41400115 	stw	r5,4(r8)
    1d50:	d9001f15 	stw	r4,124(sp)
    1d54:	014001c4 	movi	r5,7
    1d58:	2901e816 	blt	r5,r4,24fc <___vfprintf_internal_r+0x1d08>
    1d5c:	42000204 	addi	r8,r8,8
    1d60:	d9003317 	ldw	r4,204(sp)
    1d64:	8121883a 	add	r16,r16,r4
    1d68:	2085c83a 	sub	r2,r4,r2
    1d6c:	8461c83a 	sub	r16,r16,r17
    1d70:	1400010e 	bge	r2,r16,1d78 <___vfprintf_internal_r+0x1584>
    1d74:	1021883a 	mov	r16,r2
    1d78:	04000a0e 	bge	zero,r16,1da4 <___vfprintf_internal_r+0x15b0>
    1d7c:	d9001f17 	ldw	r4,124(sp)
    1d80:	1c07883a 	add	r3,r3,r16
    1d84:	44400015 	stw	r17,0(r8)
    1d88:	21000044 	addi	r4,r4,1
    1d8c:	44000115 	stw	r16,4(r8)
    1d90:	d8c02015 	stw	r3,128(sp)
    1d94:	d9001f15 	stw	r4,124(sp)
    1d98:	014001c4 	movi	r5,7
    1d9c:	2901fb16 	blt	r5,r4,258c <___vfprintf_internal_r+0x1d98>
    1da0:	42000204 	addi	r8,r8,8
    1da4:	8001f716 	blt	r16,zero,2584 <___vfprintf_internal_r+0x1d90>
    1da8:	1421c83a 	sub	r16,r2,r16
    1dac:	043d160e 	bge	zero,r16,1208 <__alt_data_end+0xfffb7e28>
    1db0:	04400404 	movi	r17,16
    1db4:	d8801f17 	ldw	r2,124(sp)
    1db8:	8c3efb0e 	bge	r17,r16,19a8 <__alt_data_end+0xfffb85c8>
    1dbc:	01400074 	movhi	r5,1
    1dc0:	2941a184 	addi	r5,r5,1670
    1dc4:	d9402c15 	stw	r5,176(sp)
    1dc8:	058001c4 	movi	r22,7
    1dcc:	dcc02d17 	ldw	r19,180(sp)
    1dd0:	00000306 	br	1de0 <___vfprintf_internal_r+0x15ec>
    1dd4:	42000204 	addi	r8,r8,8
    1dd8:	843ffc04 	addi	r16,r16,-16
    1ddc:	8c3ef50e 	bge	r17,r16,19b4 <__alt_data_end+0xfffb85d4>
    1de0:	18c00404 	addi	r3,r3,16
    1de4:	10800044 	addi	r2,r2,1
    1de8:	45000015 	stw	r20,0(r8)
    1dec:	44400115 	stw	r17,4(r8)
    1df0:	d8c02015 	stw	r3,128(sp)
    1df4:	d8801f15 	stw	r2,124(sp)
    1df8:	b0bff60e 	bge	r22,r2,1dd4 <__alt_data_end+0xfffb89f4>
    1dfc:	d9801e04 	addi	r6,sp,120
    1e00:	b80b883a 	mov	r5,r23
    1e04:	9809883a 	mov	r4,r19
    1e08:	000813c0 	call	813c <__sprint_r>
    1e0c:	103b7d1e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    1e10:	d8c02017 	ldw	r3,128(sp)
    1e14:	d8801f17 	ldw	r2,124(sp)
    1e18:	da000404 	addi	r8,sp,16
    1e1c:	003fee06 	br	1dd8 <__alt_data_end+0xfffb89f8>
    1e20:	9088703a 	and	r4,r18,r2
    1e24:	203eab1e 	bne	r4,zero,18d4 <__alt_data_end+0xfffb84f4>
    1e28:	dc401f17 	ldw	r17,124(sp)
    1e2c:	40800115 	stw	r2,4(r8)
    1e30:	44000015 	stw	r16,0(r8)
    1e34:	8c400044 	addi	r17,r17,1
    1e38:	d8c02015 	stw	r3,128(sp)
    1e3c:	dc401f15 	stw	r17,124(sp)
    1e40:	008001c4 	movi	r2,7
    1e44:	14400e16 	blt	r2,r17,1e80 <___vfprintf_internal_r+0x168c>
    1e48:	45800204 	addi	r22,r8,8
    1e4c:	003eca06 	br	1978 <__alt_data_end+0xfffb8598>
    1e50:	01000074 	movhi	r4,1
    1e54:	2101a184 	addi	r4,r4,1670
    1e58:	d9002c15 	stw	r4,176(sp)
    1e5c:	d8802c17 	ldw	r2,176(sp)
    1e60:	1c07883a 	add	r3,r3,r16
    1e64:	8c400044 	addi	r17,r17,1
    1e68:	b0800015 	stw	r2,0(r22)
    1e6c:	b4000115 	stw	r16,4(r22)
    1e70:	d8c02015 	stw	r3,128(sp)
    1e74:	dc401f15 	stw	r17,124(sp)
    1e78:	008001c4 	movi	r2,7
    1e7c:	147ebd0e 	bge	r2,r17,1974 <__alt_data_end+0xfffb8594>
    1e80:	d9002d17 	ldw	r4,180(sp)
    1e84:	d9801e04 	addi	r6,sp,120
    1e88:	b80b883a 	mov	r5,r23
    1e8c:	000813c0 	call	813c <__sprint_r>
    1e90:	103b5c1e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    1e94:	d8c02017 	ldw	r3,128(sp)
    1e98:	dc401f17 	ldw	r17,124(sp)
    1e9c:	dd800404 	addi	r22,sp,16
    1ea0:	003eb506 	br	1978 <__alt_data_end+0xfffb8598>
    1ea4:	d9002d17 	ldw	r4,180(sp)
    1ea8:	d9801e04 	addi	r6,sp,120
    1eac:	b80b883a 	mov	r5,r23
    1eb0:	000813c0 	call	813c <__sprint_r>
    1eb4:	103b531e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    1eb8:	d8c02017 	ldw	r3,128(sp)
    1ebc:	dc401f17 	ldw	r17,124(sp)
    1ec0:	da000404 	addi	r8,sp,16
    1ec4:	003e8d06 	br	18fc <__alt_data_end+0xfffb851c>
    1ec8:	d9002d17 	ldw	r4,180(sp)
    1ecc:	d9801e04 	addi	r6,sp,120
    1ed0:	b80b883a 	mov	r5,r23
    1ed4:	000813c0 	call	813c <__sprint_r>
    1ed8:	103b4a1e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    1edc:	d8c02017 	ldw	r3,128(sp)
    1ee0:	dc401f17 	ldw	r17,124(sp)
    1ee4:	dd800404 	addi	r22,sp,16
    1ee8:	003e8f06 	br	1928 <__alt_data_end+0xfffb8548>
    1eec:	0027883a 	mov	r19,zero
    1ef0:	003f4a06 	br	1c1c <__alt_data_end+0xfffb883c>
    1ef4:	d9002d17 	ldw	r4,180(sp)
    1ef8:	d9801e04 	addi	r6,sp,120
    1efc:	b80b883a 	mov	r5,r23
    1f00:	000813c0 	call	813c <__sprint_r>
    1f04:	103b3f1e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    1f08:	d8c02017 	ldw	r3,128(sp)
    1f0c:	da000404 	addi	r8,sp,16
    1f10:	003c7b06 	br	1100 <__alt_data_end+0xfffb7d20>
    1f14:	d9402a17 	ldw	r5,168(sp)
    1f18:	04e7c83a 	sub	r19,zero,r19
    1f1c:	07000b44 	movi	fp,45
    1f20:	9804c03a 	cmpne	r2,r19,zero
    1f24:	05adc83a 	sub	r22,zero,r22
    1f28:	df002785 	stb	fp,158(sp)
    1f2c:	b0adc83a 	sub	r22,r22,r2
    1f30:	28017b16 	blt	r5,zero,2520 <___vfprintf_internal_r+0x1d2c>
    1f34:	00bfdfc4 	movi	r2,-129
    1f38:	90a4703a 	and	r18,r18,r2
    1f3c:	003b8906 	br	d64 <__alt_data_end+0xfffb7984>
    1f40:	d9003617 	ldw	r4,216(sp)
    1f44:	d9403817 	ldw	r5,224(sp)
    1f48:	da003d15 	stw	r8,244(sp)
    1f4c:	0007d600 	call	7d60 <__fpclassifyd>
    1f50:	da003d17 	ldw	r8,244(sp)
    1f54:	1000f026 	beq	r2,zero,2318 <___vfprintf_internal_r+0x1b24>
    1f58:	d9002a17 	ldw	r4,168(sp)
    1f5c:	05bff7c4 	movi	r22,-33
    1f60:	00bfffc4 	movi	r2,-1
    1f64:	8dac703a 	and	r22,r17,r22
    1f68:	20820026 	beq	r4,r2,276c <___vfprintf_internal_r+0x1f78>
    1f6c:	008011c4 	movi	r2,71
    1f70:	b081f726 	beq	r22,r2,2750 <___vfprintf_internal_r+0x1f5c>
    1f74:	d9003817 	ldw	r4,224(sp)
    1f78:	90c04014 	ori	r3,r18,256
    1f7c:	d8c02c15 	stw	r3,176(sp)
    1f80:	20021516 	blt	r4,zero,27d8 <___vfprintf_internal_r+0x1fe4>
    1f84:	dcc03817 	ldw	r19,224(sp)
    1f88:	d8002905 	stb	zero,164(sp)
    1f8c:	00801984 	movi	r2,102
    1f90:	8881f926 	beq	r17,r2,2778 <___vfprintf_internal_r+0x1f84>
    1f94:	00801184 	movi	r2,70
    1f98:	88821c26 	beq	r17,r2,280c <___vfprintf_internal_r+0x2018>
    1f9c:	00801144 	movi	r2,69
    1fa0:	b081ef26 	beq	r22,r2,2760 <___vfprintf_internal_r+0x1f6c>
    1fa4:	d8c02a17 	ldw	r3,168(sp)
    1fa8:	d8802104 	addi	r2,sp,132
    1fac:	d8800315 	stw	r2,12(sp)
    1fb0:	d9403617 	ldw	r5,216(sp)
    1fb4:	d8802504 	addi	r2,sp,148
    1fb8:	d9002d17 	ldw	r4,180(sp)
    1fbc:	d8800215 	stw	r2,8(sp)
    1fc0:	d8802604 	addi	r2,sp,152
    1fc4:	d8c00015 	stw	r3,0(sp)
    1fc8:	d8800115 	stw	r2,4(sp)
    1fcc:	01c00084 	movi	r7,2
    1fd0:	980d883a 	mov	r6,r19
    1fd4:	d8c03c15 	stw	r3,240(sp)
    1fd8:	da003d15 	stw	r8,244(sp)
    1fdc:	0002f240 	call	2f24 <_dtoa_r>
    1fe0:	1021883a 	mov	r16,r2
    1fe4:	008019c4 	movi	r2,103
    1fe8:	d8c03c17 	ldw	r3,240(sp)
    1fec:	da003d17 	ldw	r8,244(sp)
    1ff0:	88817126 	beq	r17,r2,25b8 <___vfprintf_internal_r+0x1dc4>
    1ff4:	008011c4 	movi	r2,71
    1ff8:	88829126 	beq	r17,r2,2a40 <___vfprintf_internal_r+0x224c>
    1ffc:	80f9883a 	add	fp,r16,r3
    2000:	d9003617 	ldw	r4,216(sp)
    2004:	000d883a 	mov	r6,zero
    2008:	000f883a 	mov	r7,zero
    200c:	980b883a 	mov	r5,r19
    2010:	da003d15 	stw	r8,244(sp)
    2014:	000c09c0 	call	c09c <__eqdf2>
    2018:	da003d17 	ldw	r8,244(sp)
    201c:	10018d26 	beq	r2,zero,2654 <___vfprintf_internal_r+0x1e60>
    2020:	d8802117 	ldw	r2,132(sp)
    2024:	1700062e 	bgeu	r2,fp,2040 <___vfprintf_internal_r+0x184c>
    2028:	01000c04 	movi	r4,48
    202c:	10c00044 	addi	r3,r2,1
    2030:	d8c02115 	stw	r3,132(sp)
    2034:	11000005 	stb	r4,0(r2)
    2038:	d8802117 	ldw	r2,132(sp)
    203c:	173ffb36 	bltu	r2,fp,202c <__alt_data_end+0xfffb8c4c>
    2040:	1405c83a 	sub	r2,r2,r16
    2044:	d8803315 	stw	r2,204(sp)
    2048:	008011c4 	movi	r2,71
    204c:	b0817626 	beq	r22,r2,2628 <___vfprintf_internal_r+0x1e34>
    2050:	00801944 	movi	r2,101
    2054:	1442800e 	bge	r2,r17,2a58 <___vfprintf_internal_r+0x2264>
    2058:	d8c02617 	ldw	r3,152(sp)
    205c:	00801984 	movi	r2,102
    2060:	d8c03215 	stw	r3,200(sp)
    2064:	8881fe26 	beq	r17,r2,2860 <___vfprintf_internal_r+0x206c>
    2068:	d8c03217 	ldw	r3,200(sp)
    206c:	d9003317 	ldw	r4,204(sp)
    2070:	1901dd16 	blt	r3,r4,27e8 <___vfprintf_internal_r+0x1ff4>
    2074:	9480004c 	andi	r18,r18,1
    2078:	90022b1e 	bne	r18,zero,2928 <___vfprintf_internal_r+0x2134>
    207c:	1805883a 	mov	r2,r3
    2080:	18028316 	blt	r3,zero,2a90 <___vfprintf_internal_r+0x229c>
    2084:	d8c03217 	ldw	r3,200(sp)
    2088:	044019c4 	movi	r17,103
    208c:	d8c02b15 	stw	r3,172(sp)
    2090:	df002907 	ldb	fp,164(sp)
    2094:	e001531e 	bne	fp,zero,25e4 <___vfprintf_internal_r+0x1df0>
    2098:	df002783 	ldbu	fp,158(sp)
    209c:	d8802915 	stw	r2,164(sp)
    20a0:	dc802c17 	ldw	r18,176(sp)
    20a4:	d8002a15 	stw	zero,168(sp)
    20a8:	003baf06 	br	f68 <__alt_data_end+0xfffb7b88>
    20ac:	d8c02e17 	ldw	r3,184(sp)
    20b0:	d9002e17 	ldw	r4,184(sp)
    20b4:	d9402e17 	ldw	r5,184(sp)
    20b8:	18c00017 	ldw	r3,0(r3)
    20bc:	21000117 	ldw	r4,4(r4)
    20c0:	29400204 	addi	r5,r5,8
    20c4:	d8c03615 	stw	r3,216(sp)
    20c8:	d9003815 	stw	r4,224(sp)
    20cc:	d9402e15 	stw	r5,184(sp)
    20d0:	003b5006 	br	e14 <__alt_data_end+0xfffb7a34>
    20d4:	ac400007 	ldb	r17,0(r21)
    20d8:	003a2806 	br	97c <__alt_data_end+0xfffb759c>
    20dc:	9080100c 	andi	r2,r18,64
    20e0:	1000a826 	beq	r2,zero,2384 <___vfprintf_internal_r+0x1b90>
    20e4:	d8c02e17 	ldw	r3,184(sp)
    20e8:	002d883a 	mov	r22,zero
    20ec:	1cc0000b 	ldhu	r19,0(r3)
    20f0:	18c00104 	addi	r3,r3,4
    20f4:	d8c02e15 	stw	r3,184(sp)
    20f8:	003caf06 	br	13b8 <__alt_data_end+0xfffb7fd8>
    20fc:	d9002e17 	ldw	r4,184(sp)
    2100:	d9402a17 	ldw	r5,168(sp)
    2104:	002d883a 	mov	r22,zero
    2108:	20800104 	addi	r2,r4,4
    210c:	24c00017 	ldw	r19,0(r4)
    2110:	283ebb0e 	bge	r5,zero,1c00 <__alt_data_end+0xfffb8820>
    2114:	003ef106 	br	1cdc <__alt_data_end+0xfffb88fc>
    2118:	9080040c 	andi	r2,r18,16
    211c:	1000921e 	bne	r2,zero,2368 <___vfprintf_internal_r+0x1b74>
    2120:	9480100c 	andi	r18,r18,64
    2124:	90013926 	beq	r18,zero,260c <___vfprintf_internal_r+0x1e18>
    2128:	d9402e17 	ldw	r5,184(sp)
    212c:	d8c02f17 	ldw	r3,188(sp)
    2130:	28800017 	ldw	r2,0(r5)
    2134:	29400104 	addi	r5,r5,4
    2138:	d9402e15 	stw	r5,184(sp)
    213c:	10c0000d 	sth	r3,0(r2)
    2140:	0039e406 	br	8d4 <__alt_data_end+0xfffb74f4>
    2144:	9080100c 	andi	r2,r18,64
    2148:	10008026 	beq	r2,zero,234c <___vfprintf_internal_r+0x1b58>
    214c:	d8802e17 	ldw	r2,184(sp)
    2150:	14c0000f 	ldh	r19,0(r2)
    2154:	10800104 	addi	r2,r2,4
    2158:	d8802e15 	stw	r2,184(sp)
    215c:	982dd7fa 	srai	r22,r19,31
    2160:	b005883a 	mov	r2,r22
    2164:	003af706 	br	d44 <__alt_data_end+0xfffb7964>
    2168:	9080100c 	andi	r2,r18,64
    216c:	d8002785 	stb	zero,158(sp)
    2170:	10008a1e 	bne	r2,zero,239c <___vfprintf_internal_r+0x1ba8>
    2174:	d9002e17 	ldw	r4,184(sp)
    2178:	d9402a17 	ldw	r5,168(sp)
    217c:	002d883a 	mov	r22,zero
    2180:	20800104 	addi	r2,r4,4
    2184:	24c00017 	ldw	r19,0(r4)
    2188:	283e4b0e 	bge	r5,zero,1ab8 <__alt_data_end+0xfffb86d8>
    218c:	9d86b03a 	or	r3,r19,r22
    2190:	d8802e15 	stw	r2,184(sp)
    2194:	183e4c1e 	bne	r3,zero,1ac8 <__alt_data_end+0xfffb86e8>
    2198:	0039883a 	mov	fp,zero
    219c:	0005883a 	mov	r2,zero
    21a0:	003d4006 	br	16a4 <__alt_data_end+0xfffb82c4>
    21a4:	01400074 	movhi	r5,1
    21a8:	2941a184 	addi	r5,r5,1670
    21ac:	d9402c15 	stw	r5,176(sp)
    21b0:	d9402c17 	ldw	r5,176(sp)
    21b4:	1c47883a 	add	r3,r3,r17
    21b8:	10800044 	addi	r2,r2,1
    21bc:	41400015 	stw	r5,0(r8)
    21c0:	44400115 	stw	r17,4(r8)
    21c4:	d8c02015 	stw	r3,128(sp)
    21c8:	d8801f15 	stw	r2,124(sp)
    21cc:	010001c4 	movi	r4,7
    21d0:	20bec816 	blt	r4,r2,1cf4 <__alt_data_end+0xfffb8914>
    21d4:	42000204 	addi	r8,r8,8
    21d8:	003ecd06 	br	1d10 <__alt_data_end+0xfffb8930>
    21dc:	d9002a17 	ldw	r4,168(sp)
    21e0:	d8002785 	stb	zero,158(sp)
    21e4:	203d2d16 	blt	r4,zero,169c <__alt_data_end+0xfffb82bc>
    21e8:	00bfdfc4 	movi	r2,-129
    21ec:	90a4703a 	and	r18,r18,r2
    21f0:	003a6106 	br	b78 <__alt_data_end+0xfffb7798>
    21f4:	01000074 	movhi	r4,1
    21f8:	2101a184 	addi	r4,r4,1670
    21fc:	d9002c15 	stw	r4,176(sp)
    2200:	003bea06 	br	11ac <__alt_data_end+0xfffb7dcc>
    2204:	d9002d17 	ldw	r4,180(sp)
    2208:	d9801e04 	addi	r6,sp,120
    220c:	b80b883a 	mov	r5,r23
    2210:	000813c0 	call	813c <__sprint_r>
    2214:	103a7b1e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    2218:	d8c02017 	ldw	r3,128(sp)
    221c:	da000404 	addi	r8,sp,16
    2220:	003d4106 	br	1728 <__alt_data_end+0xfffb8348>
    2224:	d8801f17 	ldw	r2,124(sp)
    2228:	01400074 	movhi	r5,1
    222c:	01000044 	movi	r4,1
    2230:	18c00044 	addi	r3,r3,1
    2234:	10800044 	addi	r2,r2,1
    2238:	2941a104 	addi	r5,r5,1668
    223c:	41000115 	stw	r4,4(r8)
    2240:	41400015 	stw	r5,0(r8)
    2244:	d8c02015 	stw	r3,128(sp)
    2248:	d8801f15 	stw	r2,124(sp)
    224c:	010001c4 	movi	r4,7
    2250:	20805c16 	blt	r4,r2,23c4 <___vfprintf_internal_r+0x1bd0>
    2254:	42000204 	addi	r8,r8,8
    2258:	8800041e 	bne	r17,zero,226c <___vfprintf_internal_r+0x1a78>
    225c:	d8803317 	ldw	r2,204(sp)
    2260:	1000021e 	bne	r2,zero,226c <___vfprintf_internal_r+0x1a78>
    2264:	9080004c 	andi	r2,r18,1
    2268:	103be726 	beq	r2,zero,1208 <__alt_data_end+0xfffb7e28>
    226c:	d9003717 	ldw	r4,220(sp)
    2270:	d8801f17 	ldw	r2,124(sp)
    2274:	d9403417 	ldw	r5,208(sp)
    2278:	20c7883a 	add	r3,r4,r3
    227c:	10800044 	addi	r2,r2,1
    2280:	41000115 	stw	r4,4(r8)
    2284:	41400015 	stw	r5,0(r8)
    2288:	d8c02015 	stw	r3,128(sp)
    228c:	d8801f15 	stw	r2,124(sp)
    2290:	010001c4 	movi	r4,7
    2294:	20812116 	blt	r4,r2,271c <___vfprintf_internal_r+0x1f28>
    2298:	42000204 	addi	r8,r8,8
    229c:	0463c83a 	sub	r17,zero,r17
    22a0:	0440730e 	bge	zero,r17,2470 <___vfprintf_internal_r+0x1c7c>
    22a4:	05800404 	movi	r22,16
    22a8:	b440860e 	bge	r22,r17,24c4 <___vfprintf_internal_r+0x1cd0>
    22ac:	01400074 	movhi	r5,1
    22b0:	2941a184 	addi	r5,r5,1670
    22b4:	d9402c15 	stw	r5,176(sp)
    22b8:	070001c4 	movi	fp,7
    22bc:	dcc02d17 	ldw	r19,180(sp)
    22c0:	00000306 	br	22d0 <___vfprintf_internal_r+0x1adc>
    22c4:	42000204 	addi	r8,r8,8
    22c8:	8c7ffc04 	addi	r17,r17,-16
    22cc:	b440800e 	bge	r22,r17,24d0 <___vfprintf_internal_r+0x1cdc>
    22d0:	18c00404 	addi	r3,r3,16
    22d4:	10800044 	addi	r2,r2,1
    22d8:	45000015 	stw	r20,0(r8)
    22dc:	45800115 	stw	r22,4(r8)
    22e0:	d8c02015 	stw	r3,128(sp)
    22e4:	d8801f15 	stw	r2,124(sp)
    22e8:	e0bff60e 	bge	fp,r2,22c4 <__alt_data_end+0xfffb8ee4>
    22ec:	d9801e04 	addi	r6,sp,120
    22f0:	b80b883a 	mov	r5,r23
    22f4:	9809883a 	mov	r4,r19
    22f8:	000813c0 	call	813c <__sprint_r>
    22fc:	103a411e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    2300:	d8c02017 	ldw	r3,128(sp)
    2304:	d8801f17 	ldw	r2,124(sp)
    2308:	da000404 	addi	r8,sp,16
    230c:	003fee06 	br	22c8 <__alt_data_end+0xfffb8ee8>
    2310:	00bfffc4 	movi	r2,-1
    2314:	003a3f06 	br	c14 <__alt_data_end+0xfffb7834>
    2318:	008011c4 	movi	r2,71
    231c:	1440b816 	blt	r2,r17,2600 <___vfprintf_internal_r+0x1e0c>
    2320:	04000074 	movhi	r16,1
    2324:	84019304 	addi	r16,r16,1612
    2328:	00c000c4 	movi	r3,3
    232c:	00bfdfc4 	movi	r2,-129
    2330:	d8c02915 	stw	r3,164(sp)
    2334:	90a4703a 	and	r18,r18,r2
    2338:	df002783 	ldbu	fp,158(sp)
    233c:	d8c02b15 	stw	r3,172(sp)
    2340:	d8002a15 	stw	zero,168(sp)
    2344:	d8003215 	stw	zero,200(sp)
    2348:	003b0706 	br	f68 <__alt_data_end+0xfffb7b88>
    234c:	d8c02e17 	ldw	r3,184(sp)
    2350:	1cc00017 	ldw	r19,0(r3)
    2354:	18c00104 	addi	r3,r3,4
    2358:	d8c02e15 	stw	r3,184(sp)
    235c:	982dd7fa 	srai	r22,r19,31
    2360:	b005883a 	mov	r2,r22
    2364:	003a7706 	br	d44 <__alt_data_end+0xfffb7964>
    2368:	d8c02e17 	ldw	r3,184(sp)
    236c:	d9002f17 	ldw	r4,188(sp)
    2370:	18800017 	ldw	r2,0(r3)
    2374:	18c00104 	addi	r3,r3,4
    2378:	d8c02e15 	stw	r3,184(sp)
    237c:	11000015 	stw	r4,0(r2)
    2380:	00395406 	br	8d4 <__alt_data_end+0xfffb74f4>
    2384:	d9002e17 	ldw	r4,184(sp)
    2388:	002d883a 	mov	r22,zero
    238c:	24c00017 	ldw	r19,0(r4)
    2390:	21000104 	addi	r4,r4,4
    2394:	d9002e15 	stw	r4,184(sp)
    2398:	003c0706 	br	13b8 <__alt_data_end+0xfffb7fd8>
    239c:	d9402e17 	ldw	r5,184(sp)
    23a0:	d8c02a17 	ldw	r3,168(sp)
    23a4:	002d883a 	mov	r22,zero
    23a8:	28800104 	addi	r2,r5,4
    23ac:	2cc0000b 	ldhu	r19,0(r5)
    23b0:	183dc10e 	bge	r3,zero,1ab8 <__alt_data_end+0xfffb86d8>
    23b4:	003f7506 	br	218c <__alt_data_end+0xfffb8dac>
    23b8:	04000074 	movhi	r16,1
    23bc:	84019104 	addi	r16,r16,1604
    23c0:	003aa706 	br	e60 <__alt_data_end+0xfffb7a80>
    23c4:	d9002d17 	ldw	r4,180(sp)
    23c8:	d9801e04 	addi	r6,sp,120
    23cc:	b80b883a 	mov	r5,r23
    23d0:	000813c0 	call	813c <__sprint_r>
    23d4:	103a0b1e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    23d8:	dc402617 	ldw	r17,152(sp)
    23dc:	d8c02017 	ldw	r3,128(sp)
    23e0:	da000404 	addi	r8,sp,16
    23e4:	003f9c06 	br	2258 <__alt_data_end+0xfffb8e78>
    23e8:	ac400043 	ldbu	r17,1(r21)
    23ec:	84000814 	ori	r16,r16,32
    23f0:	ad400044 	addi	r21,r21,1
    23f4:	8c403fcc 	andi	r17,r17,255
    23f8:	8c40201c 	xori	r17,r17,128
    23fc:	8c7fe004 	addi	r17,r17,-128
    2400:	00395e06 	br	97c <__alt_data_end+0xfffb759c>
    2404:	d8c02e15 	stw	r3,184(sp)
    2408:	0039883a 	mov	fp,zero
    240c:	003e3506 	br	1ce4 <__alt_data_end+0xfffb8904>
    2410:	d9002d17 	ldw	r4,180(sp)
    2414:	d9801e04 	addi	r6,sp,120
    2418:	b80b883a 	mov	r5,r23
    241c:	000813c0 	call	813c <__sprint_r>
    2420:	1039f81e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    2424:	d8c02017 	ldw	r3,128(sp)
    2428:	da000404 	addi	r8,sp,16
    242c:	003cd006 	br	1770 <__alt_data_end+0xfffb8390>
    2430:	8009883a 	mov	r4,r16
    2434:	df003d15 	stw	fp,244(sp)
    2438:	000075c0 	call	75c <strlen>
    243c:	d8802b15 	stw	r2,172(sp)
    2440:	da003d17 	ldw	r8,244(sp)
    2444:	103c200e 	bge	r2,zero,14c8 <__alt_data_end+0xfffb80e8>
    2448:	0005883a 	mov	r2,zero
    244c:	003c1e06 	br	14c8 <__alt_data_end+0xfffb80e8>
    2450:	d9002d17 	ldw	r4,180(sp)
    2454:	d9801e04 	addi	r6,sp,120
    2458:	b80b883a 	mov	r5,r23
    245c:	000813c0 	call	813c <__sprint_r>
    2460:	1039e81e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    2464:	d8c02017 	ldw	r3,128(sp)
    2468:	d8801f17 	ldw	r2,124(sp)
    246c:	da000404 	addi	r8,sp,16
    2470:	d9403317 	ldw	r5,204(sp)
    2474:	10800044 	addi	r2,r2,1
    2478:	44000015 	stw	r16,0(r8)
    247c:	28c7883a 	add	r3,r5,r3
    2480:	003b5b06 	br	11f0 <__alt_data_end+0xfffb7e10>
    2484:	01000074 	movhi	r4,1
    2488:	2101a584 	addi	r4,r4,1686
    248c:	d9003515 	stw	r4,212(sp)
    2490:	003af206 	br	105c <__alt_data_end+0xfffb7c7c>
    2494:	013fffc4 	movi	r4,-1
    2498:	003a0806 	br	cbc <__alt_data_end+0xfffb78dc>
    249c:	0023883a 	mov	r17,zero
    24a0:	003d9d06 	br	1b18 <__alt_data_end+0xfffb8738>
    24a4:	d9002d17 	ldw	r4,180(sp)
    24a8:	d9801e04 	addi	r6,sp,120
    24ac:	b80b883a 	mov	r5,r23
    24b0:	000813c0 	call	813c <__sprint_r>
    24b4:	1039d31e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    24b8:	d8c02017 	ldw	r3,128(sp)
    24bc:	da000404 	addi	r8,sp,16
    24c0:	003d9406 	br	1b14 <__alt_data_end+0xfffb8734>
    24c4:	01000074 	movhi	r4,1
    24c8:	2101a184 	addi	r4,r4,1670
    24cc:	d9002c15 	stw	r4,176(sp)
    24d0:	d9002c17 	ldw	r4,176(sp)
    24d4:	1c47883a 	add	r3,r3,r17
    24d8:	10800044 	addi	r2,r2,1
    24dc:	41000015 	stw	r4,0(r8)
    24e0:	44400115 	stw	r17,4(r8)
    24e4:	d8c02015 	stw	r3,128(sp)
    24e8:	d8801f15 	stw	r2,124(sp)
    24ec:	010001c4 	movi	r4,7
    24f0:	20bfd716 	blt	r4,r2,2450 <__alt_data_end+0xfffb9070>
    24f4:	42000204 	addi	r8,r8,8
    24f8:	003fdd06 	br	2470 <__alt_data_end+0xfffb9090>
    24fc:	d9002d17 	ldw	r4,180(sp)
    2500:	d9801e04 	addi	r6,sp,120
    2504:	b80b883a 	mov	r5,r23
    2508:	000813c0 	call	813c <__sprint_r>
    250c:	1039bd1e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    2510:	d8802617 	ldw	r2,152(sp)
    2514:	d8c02017 	ldw	r3,128(sp)
    2518:	da000404 	addi	r8,sp,16
    251c:	003e1006 	br	1d60 <__alt_data_end+0xfffb8980>
    2520:	00800044 	movi	r2,1
    2524:	10803fcc 	andi	r2,r2,255
    2528:	00c00044 	movi	r3,1
    252c:	10fa0d26 	beq	r2,r3,d64 <__alt_data_end+0xfffb7984>
    2530:	00c00084 	movi	r3,2
    2534:	10fbaf26 	beq	r2,r3,13f4 <__alt_data_end+0xfffb8014>
    2538:	003a6d06 	br	ef0 <__alt_data_end+0xfffb7b10>
    253c:	01000074 	movhi	r4,1
    2540:	2101a584 	addi	r4,r4,1686
    2544:	d9003515 	stw	r4,212(sp)
    2548:	003b5406 	br	129c <__alt_data_end+0xfffb7ebc>
    254c:	d8802a17 	ldw	r2,168(sp)
    2550:	00c00184 	movi	r3,6
    2554:	1880012e 	bgeu	r3,r2,255c <___vfprintf_internal_r+0x1d68>
    2558:	1805883a 	mov	r2,r3
    255c:	d8802b15 	stw	r2,172(sp)
    2560:	1000ef16 	blt	r2,zero,2920 <___vfprintf_internal_r+0x212c>
    2564:	04000074 	movhi	r16,1
    2568:	d8802915 	stw	r2,164(sp)
    256c:	dcc02e15 	stw	r19,184(sp)
    2570:	d8002a15 	stw	zero,168(sp)
    2574:	d8003215 	stw	zero,200(sp)
    2578:	84019f04 	addi	r16,r16,1660
    257c:	0039883a 	mov	fp,zero
    2580:	003a8006 	br	f84 <__alt_data_end+0xfffb7ba4>
    2584:	0021883a 	mov	r16,zero
    2588:	003e0706 	br	1da8 <__alt_data_end+0xfffb89c8>
    258c:	d9002d17 	ldw	r4,180(sp)
    2590:	d9801e04 	addi	r6,sp,120
    2594:	b80b883a 	mov	r5,r23
    2598:	000813c0 	call	813c <__sprint_r>
    259c:	1039991e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    25a0:	d8802617 	ldw	r2,152(sp)
    25a4:	d9403317 	ldw	r5,204(sp)
    25a8:	d8c02017 	ldw	r3,128(sp)
    25ac:	da000404 	addi	r8,sp,16
    25b0:	2885c83a 	sub	r2,r5,r2
    25b4:	003dfb06 	br	1da4 <__alt_data_end+0xfffb89c4>
    25b8:	9080004c 	andi	r2,r18,1
    25bc:	103e8f1e 	bne	r2,zero,1ffc <__alt_data_end+0xfffb8c1c>
    25c0:	d8802117 	ldw	r2,132(sp)
    25c4:	003e9e06 	br	2040 <__alt_data_end+0xfffb8c60>
    25c8:	1025883a 	mov	r18,r2
    25cc:	0039883a 	mov	fp,zero
    25d0:	00800084 	movi	r2,2
    25d4:	003fd306 	br	2524 <__alt_data_end+0xfffb9144>
    25d8:	07000b44 	movi	fp,45
    25dc:	df002785 	stb	fp,158(sp)
    25e0:	003a1b06 	br	e50 <__alt_data_end+0xfffb7a70>
    25e4:	00c00b44 	movi	r3,45
    25e8:	d8c02785 	stb	r3,158(sp)
    25ec:	d8802915 	stw	r2,164(sp)
    25f0:	dc802c17 	ldw	r18,176(sp)
    25f4:	d8002a15 	stw	zero,168(sp)
    25f8:	07000b44 	movi	fp,45
    25fc:	003a5e06 	br	f78 <__alt_data_end+0xfffb7b98>
    2600:	04000074 	movhi	r16,1
    2604:	84019404 	addi	r16,r16,1616
    2608:	003f4706 	br	2328 <__alt_data_end+0xfffb8f48>
    260c:	d9002e17 	ldw	r4,184(sp)
    2610:	d9402f17 	ldw	r5,188(sp)
    2614:	20800017 	ldw	r2,0(r4)
    2618:	21000104 	addi	r4,r4,4
    261c:	d9002e15 	stw	r4,184(sp)
    2620:	11400015 	stw	r5,0(r2)
    2624:	0038ab06 	br	8d4 <__alt_data_end+0xfffb74f4>
    2628:	dd802617 	ldw	r22,152(sp)
    262c:	00bfff44 	movi	r2,-3
    2630:	b0801c16 	blt	r22,r2,26a4 <___vfprintf_internal_r+0x1eb0>
    2634:	d9402a17 	ldw	r5,168(sp)
    2638:	2d801a16 	blt	r5,r22,26a4 <___vfprintf_internal_r+0x1eb0>
    263c:	dd803215 	stw	r22,200(sp)
    2640:	003e8906 	br	2068 <__alt_data_end+0xfffb8c88>
    2644:	01000074 	movhi	r4,1
    2648:	2101a184 	addi	r4,r4,1670
    264c:	d9002c15 	stw	r4,176(sp)
    2650:	003c9106 	br	1898 <__alt_data_end+0xfffb84b8>
    2654:	e005883a 	mov	r2,fp
    2658:	003e7906 	br	2040 <__alt_data_end+0xfffb8c60>
    265c:	d9002a17 	ldw	r4,168(sp)
    2660:	df002783 	ldbu	fp,158(sp)
    2664:	dcc02e15 	stw	r19,184(sp)
    2668:	d9002915 	stw	r4,164(sp)
    266c:	d9002b15 	stw	r4,172(sp)
    2670:	d8002a15 	stw	zero,168(sp)
    2674:	d8003215 	stw	zero,200(sp)
    2678:	003a3b06 	br	f68 <__alt_data_end+0xfffb7b88>
    267c:	9080004c 	andi	r2,r18,1
    2680:	0039883a 	mov	fp,zero
    2684:	10000426 	beq	r2,zero,2698 <___vfprintf_internal_r+0x1ea4>
    2688:	00800c04 	movi	r2,48
    268c:	dc001dc4 	addi	r16,sp,119
    2690:	d8801dc5 	stb	r2,119(sp)
    2694:	003b6406 	br	1428 <__alt_data_end+0xfffb8048>
    2698:	d8002b15 	stw	zero,172(sp)
    269c:	dc001e04 	addi	r16,sp,120
    26a0:	003a2b06 	br	f50 <__alt_data_end+0xfffb7b70>
    26a4:	8c7fff84 	addi	r17,r17,-2
    26a8:	b5bfffc4 	addi	r22,r22,-1
    26ac:	dd802615 	stw	r22,152(sp)
    26b0:	dc4022c5 	stb	r17,139(sp)
    26b4:	b000bf16 	blt	r22,zero,29b4 <___vfprintf_internal_r+0x21c0>
    26b8:	00800ac4 	movi	r2,43
    26bc:	d8802305 	stb	r2,140(sp)
    26c0:	00800244 	movi	r2,9
    26c4:	15807016 	blt	r2,r22,2888 <___vfprintf_internal_r+0x2094>
    26c8:	00800c04 	movi	r2,48
    26cc:	b5800c04 	addi	r22,r22,48
    26d0:	d8802345 	stb	r2,141(sp)
    26d4:	dd802385 	stb	r22,142(sp)
    26d8:	d88023c4 	addi	r2,sp,143
    26dc:	df0022c4 	addi	fp,sp,139
    26e0:	d8c03317 	ldw	r3,204(sp)
    26e4:	1739c83a 	sub	fp,r2,fp
    26e8:	d9003317 	ldw	r4,204(sp)
    26ec:	e0c7883a 	add	r3,fp,r3
    26f0:	df003a15 	stw	fp,232(sp)
    26f4:	d8c02b15 	stw	r3,172(sp)
    26f8:	00800044 	movi	r2,1
    26fc:	1100b30e 	bge	r2,r4,29cc <___vfprintf_internal_r+0x21d8>
    2700:	d8c02b17 	ldw	r3,172(sp)
    2704:	18c00044 	addi	r3,r3,1
    2708:	d8c02b15 	stw	r3,172(sp)
    270c:	1805883a 	mov	r2,r3
    2710:	1800ac16 	blt	r3,zero,29c4 <___vfprintf_internal_r+0x21d0>
    2714:	d8003215 	stw	zero,200(sp)
    2718:	003e5d06 	br	2090 <__alt_data_end+0xfffb8cb0>
    271c:	d9002d17 	ldw	r4,180(sp)
    2720:	d9801e04 	addi	r6,sp,120
    2724:	b80b883a 	mov	r5,r23
    2728:	000813c0 	call	813c <__sprint_r>
    272c:	1039351e 	bne	r2,zero,c04 <__alt_data_end+0xfffb7824>
    2730:	dc402617 	ldw	r17,152(sp)
    2734:	d8c02017 	ldw	r3,128(sp)
    2738:	d8801f17 	ldw	r2,124(sp)
    273c:	da000404 	addi	r8,sp,16
    2740:	003ed606 	br	229c <__alt_data_end+0xfffb8ebc>
    2744:	182b883a 	mov	r21,r3
    2748:	d8002a15 	stw	zero,168(sp)
    274c:	00388c06 	br	980 <__alt_data_end+0xfffb75a0>
    2750:	d8802a17 	ldw	r2,168(sp)
    2754:	103e071e 	bne	r2,zero,1f74 <__alt_data_end+0xfffb8b94>
    2758:	dc002a15 	stw	r16,168(sp)
    275c:	003e0506 	br	1f74 <__alt_data_end+0xfffb8b94>
    2760:	d9002a17 	ldw	r4,168(sp)
    2764:	20c00044 	addi	r3,r4,1
    2768:	003e0f06 	br	1fa8 <__alt_data_end+0xfffb8bc8>
    276c:	01400184 	movi	r5,6
    2770:	d9402a15 	stw	r5,168(sp)
    2774:	003dff06 	br	1f74 <__alt_data_end+0xfffb8b94>
    2778:	d8802104 	addi	r2,sp,132
    277c:	d8800315 	stw	r2,12(sp)
    2780:	d8802504 	addi	r2,sp,148
    2784:	d8800215 	stw	r2,8(sp)
    2788:	d8802604 	addi	r2,sp,152
    278c:	d8800115 	stw	r2,4(sp)
    2790:	d8802a17 	ldw	r2,168(sp)
    2794:	d9403617 	ldw	r5,216(sp)
    2798:	d9002d17 	ldw	r4,180(sp)
    279c:	d8800015 	stw	r2,0(sp)
    27a0:	01c000c4 	movi	r7,3
    27a4:	980d883a 	mov	r6,r19
    27a8:	da003d15 	stw	r8,244(sp)
    27ac:	0002f240 	call	2f24 <_dtoa_r>
    27b0:	d8c02a17 	ldw	r3,168(sp)
    27b4:	da003d17 	ldw	r8,244(sp)
    27b8:	1021883a 	mov	r16,r2
    27bc:	10f9883a 	add	fp,r2,r3
    27c0:	81000007 	ldb	r4,0(r16)
    27c4:	00800c04 	movi	r2,48
    27c8:	20805e26 	beq	r4,r2,2944 <___vfprintf_internal_r+0x2150>
    27cc:	d8c02617 	ldw	r3,152(sp)
    27d0:	e0f9883a 	add	fp,fp,r3
    27d4:	003e0a06 	br	2000 <__alt_data_end+0xfffb8c20>
    27d8:	00c00b44 	movi	r3,45
    27dc:	24e0003c 	xorhi	r19,r4,32768
    27e0:	d8c02905 	stb	r3,164(sp)
    27e4:	003de906 	br	1f8c <__alt_data_end+0xfffb8bac>
    27e8:	d8c03217 	ldw	r3,200(sp)
    27ec:	00c07a0e 	bge	zero,r3,29d8 <___vfprintf_internal_r+0x21e4>
    27f0:	00800044 	movi	r2,1
    27f4:	d9003317 	ldw	r4,204(sp)
    27f8:	1105883a 	add	r2,r2,r4
    27fc:	d8802b15 	stw	r2,172(sp)
    2800:	10004e16 	blt	r2,zero,293c <___vfprintf_internal_r+0x2148>
    2804:	044019c4 	movi	r17,103
    2808:	003e2106 	br	2090 <__alt_data_end+0xfffb8cb0>
    280c:	d9002a17 	ldw	r4,168(sp)
    2810:	d8802104 	addi	r2,sp,132
    2814:	d8800315 	stw	r2,12(sp)
    2818:	d9000015 	stw	r4,0(sp)
    281c:	d8802504 	addi	r2,sp,148
    2820:	d9403617 	ldw	r5,216(sp)
    2824:	d9002d17 	ldw	r4,180(sp)
    2828:	d8800215 	stw	r2,8(sp)
    282c:	d8802604 	addi	r2,sp,152
    2830:	d8800115 	stw	r2,4(sp)
    2834:	01c000c4 	movi	r7,3
    2838:	980d883a 	mov	r6,r19
    283c:	da003d15 	stw	r8,244(sp)
    2840:	0002f240 	call	2f24 <_dtoa_r>
    2844:	d8c02a17 	ldw	r3,168(sp)
    2848:	da003d17 	ldw	r8,244(sp)
    284c:	1021883a 	mov	r16,r2
    2850:	00801184 	movi	r2,70
    2854:	80f9883a 	add	fp,r16,r3
    2858:	88bfd926 	beq	r17,r2,27c0 <__alt_data_end+0xfffb93e0>
    285c:	003de806 	br	2000 <__alt_data_end+0xfffb8c20>
    2860:	d9002a17 	ldw	r4,168(sp)
    2864:	00c04d0e 	bge	zero,r3,299c <___vfprintf_internal_r+0x21a8>
    2868:	2000441e 	bne	r4,zero,297c <___vfprintf_internal_r+0x2188>
    286c:	9480004c 	andi	r18,r18,1
    2870:	9000421e 	bne	r18,zero,297c <___vfprintf_internal_r+0x2188>
    2874:	1805883a 	mov	r2,r3
    2878:	18006f16 	blt	r3,zero,2a38 <___vfprintf_internal_r+0x2244>
    287c:	d8c03217 	ldw	r3,200(sp)
    2880:	d8c02b15 	stw	r3,172(sp)
    2884:	003e0206 	br	2090 <__alt_data_end+0xfffb8cb0>
    2888:	df0022c4 	addi	fp,sp,139
    288c:	dc002a15 	stw	r16,168(sp)
    2890:	4027883a 	mov	r19,r8
    2894:	e021883a 	mov	r16,fp
    2898:	b009883a 	mov	r4,r22
    289c:	01400284 	movi	r5,10
    28a0:	000acc80 	call	acc8 <__modsi3>
    28a4:	10800c04 	addi	r2,r2,48
    28a8:	843fffc4 	addi	r16,r16,-1
    28ac:	b009883a 	mov	r4,r22
    28b0:	01400284 	movi	r5,10
    28b4:	80800005 	stb	r2,0(r16)
    28b8:	000ac440 	call	ac44 <__divsi3>
    28bc:	102d883a 	mov	r22,r2
    28c0:	00800244 	movi	r2,9
    28c4:	15bff416 	blt	r2,r22,2898 <__alt_data_end+0xfffb94b8>
    28c8:	9811883a 	mov	r8,r19
    28cc:	b0800c04 	addi	r2,r22,48
    28d0:	8027883a 	mov	r19,r16
    28d4:	997fffc4 	addi	r5,r19,-1
    28d8:	98bfffc5 	stb	r2,-1(r19)
    28dc:	dc002a17 	ldw	r16,168(sp)
    28e0:	2f006d2e 	bgeu	r5,fp,2a98 <___vfprintf_internal_r+0x22a4>
    28e4:	d9c02384 	addi	r7,sp,142
    28e8:	3ccfc83a 	sub	r7,r7,r19
    28ec:	d9002344 	addi	r4,sp,141
    28f0:	e1cf883a 	add	r7,fp,r7
    28f4:	00000106 	br	28fc <___vfprintf_internal_r+0x2108>
    28f8:	28800003 	ldbu	r2,0(r5)
    28fc:	20800005 	stb	r2,0(r4)
    2900:	21000044 	addi	r4,r4,1
    2904:	29400044 	addi	r5,r5,1
    2908:	393ffb1e 	bne	r7,r4,28f8 <__alt_data_end+0xfffb9518>
    290c:	d8802304 	addi	r2,sp,140
    2910:	14c5c83a 	sub	r2,r2,r19
    2914:	d8c02344 	addi	r3,sp,141
    2918:	1885883a 	add	r2,r3,r2
    291c:	003f7006 	br	26e0 <__alt_data_end+0xfffb9300>
    2920:	0005883a 	mov	r2,zero
    2924:	003f0f06 	br	2564 <__alt_data_end+0xfffb9184>
    2928:	d8c03217 	ldw	r3,200(sp)
    292c:	18c00044 	addi	r3,r3,1
    2930:	d8c02b15 	stw	r3,172(sp)
    2934:	1805883a 	mov	r2,r3
    2938:	183fb20e 	bge	r3,zero,2804 <__alt_data_end+0xfffb9424>
    293c:	0005883a 	mov	r2,zero
    2940:	003fb006 	br	2804 <__alt_data_end+0xfffb9424>
    2944:	d9003617 	ldw	r4,216(sp)
    2948:	000d883a 	mov	r6,zero
    294c:	000f883a 	mov	r7,zero
    2950:	980b883a 	mov	r5,r19
    2954:	d8c03c15 	stw	r3,240(sp)
    2958:	da003d15 	stw	r8,244(sp)
    295c:	000c09c0 	call	c09c <__eqdf2>
    2960:	d8c03c17 	ldw	r3,240(sp)
    2964:	da003d17 	ldw	r8,244(sp)
    2968:	103f9826 	beq	r2,zero,27cc <__alt_data_end+0xfffb93ec>
    296c:	00800044 	movi	r2,1
    2970:	10c7c83a 	sub	r3,r2,r3
    2974:	d8c02615 	stw	r3,152(sp)
    2978:	003f9506 	br	27d0 <__alt_data_end+0xfffb93f0>
    297c:	d9002a17 	ldw	r4,168(sp)
    2980:	d8c03217 	ldw	r3,200(sp)
    2984:	20800044 	addi	r2,r4,1
    2988:	1885883a 	add	r2,r3,r2
    298c:	d8802b15 	stw	r2,172(sp)
    2990:	103dbf0e 	bge	r2,zero,2090 <__alt_data_end+0xfffb8cb0>
    2994:	0005883a 	mov	r2,zero
    2998:	003dbd06 	br	2090 <__alt_data_end+0xfffb8cb0>
    299c:	2000201e 	bne	r4,zero,2a20 <___vfprintf_internal_r+0x222c>
    29a0:	9480004c 	andi	r18,r18,1
    29a4:	90001e1e 	bne	r18,zero,2a20 <___vfprintf_internal_r+0x222c>
    29a8:	00800044 	movi	r2,1
    29ac:	d8802b15 	stw	r2,172(sp)
    29b0:	003db706 	br	2090 <__alt_data_end+0xfffb8cb0>
    29b4:	00800b44 	movi	r2,45
    29b8:	05adc83a 	sub	r22,zero,r22
    29bc:	d8802305 	stb	r2,140(sp)
    29c0:	003f3f06 	br	26c0 <__alt_data_end+0xfffb92e0>
    29c4:	0005883a 	mov	r2,zero
    29c8:	003f5206 	br	2714 <__alt_data_end+0xfffb9334>
    29cc:	90a4703a 	and	r18,r18,r2
    29d0:	903f4e26 	beq	r18,zero,270c <__alt_data_end+0xfffb932c>
    29d4:	003f4a06 	br	2700 <__alt_data_end+0xfffb9320>
    29d8:	00800084 	movi	r2,2
    29dc:	10c5c83a 	sub	r2,r2,r3
    29e0:	003f8406 	br	27f4 <__alt_data_end+0xfffb9414>
    29e4:	d9402e17 	ldw	r5,184(sp)
    29e8:	d9002e17 	ldw	r4,184(sp)
    29ec:	ac400043 	ldbu	r17,1(r21)
    29f0:	29400017 	ldw	r5,0(r5)
    29f4:	20800104 	addi	r2,r4,4
    29f8:	d8802e15 	stw	r2,184(sp)
    29fc:	d9402a15 	stw	r5,168(sp)
    2a00:	182b883a 	mov	r21,r3
    2a04:	283e7b0e 	bge	r5,zero,23f4 <__alt_data_end+0xfffb9014>
    2a08:	8c403fcc 	andi	r17,r17,255
    2a0c:	017fffc4 	movi	r5,-1
    2a10:	8c40201c 	xori	r17,r17,128
    2a14:	d9402a15 	stw	r5,168(sp)
    2a18:	8c7fe004 	addi	r17,r17,-128
    2a1c:	0037d706 	br	97c <__alt_data_end+0xfffb759c>
    2a20:	d8c02a17 	ldw	r3,168(sp)
    2a24:	18c00084 	addi	r3,r3,2
    2a28:	d8c02b15 	stw	r3,172(sp)
    2a2c:	1805883a 	mov	r2,r3
    2a30:	183d970e 	bge	r3,zero,2090 <__alt_data_end+0xfffb8cb0>
    2a34:	003fd706 	br	2994 <__alt_data_end+0xfffb95b4>
    2a38:	0005883a 	mov	r2,zero
    2a3c:	003f8f06 	br	287c <__alt_data_end+0xfffb949c>
    2a40:	9080004c 	andi	r2,r18,1
    2a44:	103f821e 	bne	r2,zero,2850 <__alt_data_end+0xfffb9470>
    2a48:	d8802117 	ldw	r2,132(sp)
    2a4c:	1405c83a 	sub	r2,r2,r16
    2a50:	d8803315 	stw	r2,204(sp)
    2a54:	b47ef426 	beq	r22,r17,2628 <__alt_data_end+0xfffb9248>
    2a58:	dd802617 	ldw	r22,152(sp)
    2a5c:	003f1206 	br	26a8 <__alt_data_end+0xfffb92c8>
    2a60:	d8c02b03 	ldbu	r3,172(sp)
    2a64:	d8c02785 	stb	r3,158(sp)
    2a68:	0038df06 	br	de8 <__alt_data_end+0xfffb7a08>
    2a6c:	d8c02b03 	ldbu	r3,172(sp)
    2a70:	d8c02785 	stb	r3,158(sp)
    2a74:	0038aa06 	br	d20 <__alt_data_end+0xfffb7940>
    2a78:	d8c02b03 	ldbu	r3,172(sp)
    2a7c:	d8c02785 	stb	r3,158(sp)
    2a80:	003a4306 	br	1390 <__alt_data_end+0xfffb7fb0>
    2a84:	d8c02b03 	ldbu	r3,172(sp)
    2a88:	d8c02785 	stb	r3,158(sp)
    2a8c:	003af506 	br	1664 <__alt_data_end+0xfffb8284>
    2a90:	0005883a 	mov	r2,zero
    2a94:	003d7b06 	br	2084 <__alt_data_end+0xfffb8ca4>
    2a98:	d8802344 	addi	r2,sp,141
    2a9c:	003f1006 	br	26e0 <__alt_data_end+0xfffb9300>
    2aa0:	d8c02b03 	ldbu	r3,172(sp)
    2aa4:	d8c02785 	stb	r3,158(sp)
    2aa8:	0038fd06 	br	ea0 <__alt_data_end+0xfffb7ac0>
    2aac:	d8c02b03 	ldbu	r3,172(sp)
    2ab0:	d8c02785 	stb	r3,158(sp)
    2ab4:	003a9706 	br	1514 <__alt_data_end+0xfffb8134>
    2ab8:	d8c02b03 	ldbu	r3,172(sp)
    2abc:	d8c02785 	stb	r3,158(sp)
    2ac0:	003a1806 	br	1324 <__alt_data_end+0xfffb7f44>
    2ac4:	d8c02b03 	ldbu	r3,172(sp)
    2ac8:	d8c02785 	stb	r3,158(sp)
    2acc:	003abe06 	br	15c8 <__alt_data_end+0xfffb81e8>

00002ad0 <__vfprintf_internal>:
    2ad0:	00800074 	movhi	r2,1
    2ad4:	1088fc04 	addi	r2,r2,9200
    2ad8:	300f883a 	mov	r7,r6
    2adc:	280d883a 	mov	r6,r5
    2ae0:	200b883a 	mov	r5,r4
    2ae4:	11000017 	ldw	r4,0(r2)
    2ae8:	00007f41 	jmpi	7f4 <___vfprintf_internal_r>

00002aec <__sbprintf>:
    2aec:	2880030b 	ldhu	r2,12(r5)
    2af0:	2ac01917 	ldw	r11,100(r5)
    2af4:	2a80038b 	ldhu	r10,14(r5)
    2af8:	2a400717 	ldw	r9,28(r5)
    2afc:	2a000917 	ldw	r8,36(r5)
    2b00:	defee204 	addi	sp,sp,-1144
    2b04:	00c10004 	movi	r3,1024
    2b08:	dc011a15 	stw	r16,1128(sp)
    2b0c:	10bfff4c 	andi	r2,r2,65533
    2b10:	2821883a 	mov	r16,r5
    2b14:	d8cb883a 	add	r5,sp,r3
    2b18:	dc811c15 	stw	r18,1136(sp)
    2b1c:	dc411b15 	stw	r17,1132(sp)
    2b20:	dfc11d15 	stw	ra,1140(sp)
    2b24:	2025883a 	mov	r18,r4
    2b28:	d881030d 	sth	r2,1036(sp)
    2b2c:	dac11915 	stw	r11,1124(sp)
    2b30:	da81038d 	sth	r10,1038(sp)
    2b34:	da410715 	stw	r9,1052(sp)
    2b38:	da010915 	stw	r8,1060(sp)
    2b3c:	dec10015 	stw	sp,1024(sp)
    2b40:	dec10415 	stw	sp,1040(sp)
    2b44:	d8c10215 	stw	r3,1032(sp)
    2b48:	d8c10515 	stw	r3,1044(sp)
    2b4c:	d8010615 	stw	zero,1048(sp)
    2b50:	00007f40 	call	7f4 <___vfprintf_internal_r>
    2b54:	1023883a 	mov	r17,r2
    2b58:	10000416 	blt	r2,zero,2b6c <__sbprintf+0x80>
    2b5c:	d9410004 	addi	r5,sp,1024
    2b60:	9009883a 	mov	r4,r18
    2b64:	00047c80 	call	47c8 <_fflush_r>
    2b68:	10000d1e 	bne	r2,zero,2ba0 <__sbprintf+0xb4>
    2b6c:	d881030b 	ldhu	r2,1036(sp)
    2b70:	1080100c 	andi	r2,r2,64
    2b74:	10000326 	beq	r2,zero,2b84 <__sbprintf+0x98>
    2b78:	8080030b 	ldhu	r2,12(r16)
    2b7c:	10801014 	ori	r2,r2,64
    2b80:	8080030d 	sth	r2,12(r16)
    2b84:	8805883a 	mov	r2,r17
    2b88:	dfc11d17 	ldw	ra,1140(sp)
    2b8c:	dc811c17 	ldw	r18,1136(sp)
    2b90:	dc411b17 	ldw	r17,1132(sp)
    2b94:	dc011a17 	ldw	r16,1128(sp)
    2b98:	dec11e04 	addi	sp,sp,1144
    2b9c:	f800283a 	ret
    2ba0:	047fffc4 	movi	r17,-1
    2ba4:	003ff106 	br	2b6c <__alt_data_end+0xfffb978c>

00002ba8 <__swsetup_r>:
    2ba8:	00800074 	movhi	r2,1
    2bac:	defffd04 	addi	sp,sp,-12
    2bb0:	1088fc04 	addi	r2,r2,9200
    2bb4:	dc400115 	stw	r17,4(sp)
    2bb8:	2023883a 	mov	r17,r4
    2bbc:	11000017 	ldw	r4,0(r2)
    2bc0:	dc000015 	stw	r16,0(sp)
    2bc4:	dfc00215 	stw	ra,8(sp)
    2bc8:	2821883a 	mov	r16,r5
    2bcc:	20000226 	beq	r4,zero,2bd8 <__swsetup_r+0x30>
    2bd0:	20800e17 	ldw	r2,56(r4)
    2bd4:	10003126 	beq	r2,zero,2c9c <__swsetup_r+0xf4>
    2bd8:	8080030b 	ldhu	r2,12(r16)
    2bdc:	10c0020c 	andi	r3,r2,8
    2be0:	1009883a 	mov	r4,r2
    2be4:	18000f26 	beq	r3,zero,2c24 <__swsetup_r+0x7c>
    2be8:	80c00417 	ldw	r3,16(r16)
    2bec:	18001526 	beq	r3,zero,2c44 <__swsetup_r+0x9c>
    2bf0:	1100004c 	andi	r4,r2,1
    2bf4:	20001c1e 	bne	r4,zero,2c68 <__swsetup_r+0xc0>
    2bf8:	1080008c 	andi	r2,r2,2
    2bfc:	1000291e 	bne	r2,zero,2ca4 <__swsetup_r+0xfc>
    2c00:	80800517 	ldw	r2,20(r16)
    2c04:	80800215 	stw	r2,8(r16)
    2c08:	18001c26 	beq	r3,zero,2c7c <__swsetup_r+0xd4>
    2c0c:	0005883a 	mov	r2,zero
    2c10:	dfc00217 	ldw	ra,8(sp)
    2c14:	dc400117 	ldw	r17,4(sp)
    2c18:	dc000017 	ldw	r16,0(sp)
    2c1c:	dec00304 	addi	sp,sp,12
    2c20:	f800283a 	ret
    2c24:	2080040c 	andi	r2,r4,16
    2c28:	10002e26 	beq	r2,zero,2ce4 <__swsetup_r+0x13c>
    2c2c:	2080010c 	andi	r2,r4,4
    2c30:	10001e1e 	bne	r2,zero,2cac <__swsetup_r+0x104>
    2c34:	80c00417 	ldw	r3,16(r16)
    2c38:	20800214 	ori	r2,r4,8
    2c3c:	8080030d 	sth	r2,12(r16)
    2c40:	183feb1e 	bne	r3,zero,2bf0 <__alt_data_end+0xfffb9810>
    2c44:	1100a00c 	andi	r4,r2,640
    2c48:	01408004 	movi	r5,512
    2c4c:	217fe826 	beq	r4,r5,2bf0 <__alt_data_end+0xfffb9810>
    2c50:	800b883a 	mov	r5,r16
    2c54:	8809883a 	mov	r4,r17
    2c58:	00057640 	call	5764 <__smakebuf_r>
    2c5c:	8080030b 	ldhu	r2,12(r16)
    2c60:	80c00417 	ldw	r3,16(r16)
    2c64:	003fe206 	br	2bf0 <__alt_data_end+0xfffb9810>
    2c68:	80800517 	ldw	r2,20(r16)
    2c6c:	80000215 	stw	zero,8(r16)
    2c70:	0085c83a 	sub	r2,zero,r2
    2c74:	80800615 	stw	r2,24(r16)
    2c78:	183fe41e 	bne	r3,zero,2c0c <__alt_data_end+0xfffb982c>
    2c7c:	80c0030b 	ldhu	r3,12(r16)
    2c80:	0005883a 	mov	r2,zero
    2c84:	1900200c 	andi	r4,r3,128
    2c88:	203fe126 	beq	r4,zero,2c10 <__alt_data_end+0xfffb9830>
    2c8c:	18c01014 	ori	r3,r3,64
    2c90:	80c0030d 	sth	r3,12(r16)
    2c94:	00bfffc4 	movi	r2,-1
    2c98:	003fdd06 	br	2c10 <__alt_data_end+0xfffb9830>
    2c9c:	0004bb40 	call	4bb4 <__sinit>
    2ca0:	003fcd06 	br	2bd8 <__alt_data_end+0xfffb97f8>
    2ca4:	0005883a 	mov	r2,zero
    2ca8:	003fd606 	br	2c04 <__alt_data_end+0xfffb9824>
    2cac:	81400c17 	ldw	r5,48(r16)
    2cb0:	28000626 	beq	r5,zero,2ccc <__swsetup_r+0x124>
    2cb4:	80801004 	addi	r2,r16,64
    2cb8:	28800326 	beq	r5,r2,2cc8 <__swsetup_r+0x120>
    2cbc:	8809883a 	mov	r4,r17
    2cc0:	0004d280 	call	4d28 <_free_r>
    2cc4:	8100030b 	ldhu	r4,12(r16)
    2cc8:	80000c15 	stw	zero,48(r16)
    2ccc:	80c00417 	ldw	r3,16(r16)
    2cd0:	00bff6c4 	movi	r2,-37
    2cd4:	1108703a 	and	r4,r2,r4
    2cd8:	80000115 	stw	zero,4(r16)
    2cdc:	80c00015 	stw	r3,0(r16)
    2ce0:	003fd506 	br	2c38 <__alt_data_end+0xfffb9858>
    2ce4:	00800244 	movi	r2,9
    2ce8:	88800015 	stw	r2,0(r17)
    2cec:	20801014 	ori	r2,r4,64
    2cf0:	8080030d 	sth	r2,12(r16)
    2cf4:	00bfffc4 	movi	r2,-1
    2cf8:	003fc506 	br	2c10 <__alt_data_end+0xfffb9830>

00002cfc <quorem>:
    2cfc:	defff204 	addi	sp,sp,-56
    2d00:	ddc00b15 	stw	r23,44(sp)
    2d04:	20800417 	ldw	r2,16(r4)
    2d08:	2dc00417 	ldw	r23,16(r5)
    2d0c:	dfc00d15 	stw	ra,52(sp)
    2d10:	df000c15 	stw	fp,48(sp)
    2d14:	dd800a15 	stw	r22,40(sp)
    2d18:	dd400915 	stw	r21,36(sp)
    2d1c:	dd000815 	stw	r20,32(sp)
    2d20:	dcc00715 	stw	r19,28(sp)
    2d24:	dc800615 	stw	r18,24(sp)
    2d28:	dc400515 	stw	r17,20(sp)
    2d2c:	dc000415 	stw	r16,16(sp)
    2d30:	15c07a16 	blt	r2,r23,2f1c <quorem+0x220>
    2d34:	bdffffc4 	addi	r23,r23,-1
    2d38:	bde9883a 	add	r20,r23,r23
    2d3c:	28c00504 	addi	r3,r5,20
    2d40:	a529883a 	add	r20,r20,r20
    2d44:	1d39883a 	add	fp,r3,r20
    2d48:	24c00504 	addi	r19,r4,20
    2d4c:	d9400215 	stw	r5,8(sp)
    2d50:	9d29883a 	add	r20,r19,r20
    2d54:	e1400017 	ldw	r5,0(fp)
    2d58:	d9000015 	stw	r4,0(sp)
    2d5c:	a1000017 	ldw	r4,0(r20)
    2d60:	29400044 	addi	r5,r5,1
    2d64:	d8c00115 	stw	r3,4(sp)
    2d68:	dd000315 	stw	r20,12(sp)
    2d6c:	000ad3c0 	call	ad3c <__udivsi3>
    2d70:	1025883a 	mov	r18,r2
    2d74:	10003026 	beq	r2,zero,2e38 <quorem+0x13c>
    2d78:	dc400117 	ldw	r17,4(sp)
    2d7c:	9829883a 	mov	r20,r19
    2d80:	002d883a 	mov	r22,zero
    2d84:	0021883a 	mov	r16,zero
    2d88:	8d400017 	ldw	r21,0(r17)
    2d8c:	900b883a 	mov	r5,r18
    2d90:	8c400104 	addi	r17,r17,4
    2d94:	a93fffcc 	andi	r4,r21,65535
    2d98:	000adf80 	call	adf8 <__mulsi3>
    2d9c:	a808d43a 	srli	r4,r21,16
    2da0:	900b883a 	mov	r5,r18
    2da4:	15ad883a 	add	r22,r2,r22
    2da8:	000adf80 	call	adf8 <__mulsi3>
    2dac:	a1000017 	ldw	r4,0(r20)
    2db0:	b00cd43a 	srli	r6,r22,16
    2db4:	b0ffffcc 	andi	r3,r22,65535
    2db8:	217fffcc 	andi	r5,r4,65535
    2dbc:	2c21883a 	add	r16,r5,r16
    2dc0:	80c7c83a 	sub	r3,r16,r3
    2dc4:	2008d43a 	srli	r4,r4,16
    2dc8:	1185883a 	add	r2,r2,r6
    2dcc:	1821d43a 	srai	r16,r3,16
    2dd0:	117fffcc 	andi	r5,r2,65535
    2dd4:	2149c83a 	sub	r4,r4,r5
    2dd8:	2421883a 	add	r16,r4,r16
    2ddc:	8008943a 	slli	r4,r16,16
    2de0:	18ffffcc 	andi	r3,r3,65535
    2de4:	102cd43a 	srli	r22,r2,16
    2de8:	20c8b03a 	or	r4,r4,r3
    2dec:	a1000015 	stw	r4,0(r20)
    2df0:	8021d43a 	srai	r16,r16,16
    2df4:	a5000104 	addi	r20,r20,4
    2df8:	e47fe32e 	bgeu	fp,r17,2d88 <__alt_data_end+0xfffb99a8>
    2dfc:	d8c00317 	ldw	r3,12(sp)
    2e00:	18800017 	ldw	r2,0(r3)
    2e04:	10000c1e 	bne	r2,zero,2e38 <quorem+0x13c>
    2e08:	18bfff04 	addi	r2,r3,-4
    2e0c:	9880082e 	bgeu	r19,r2,2e30 <quorem+0x134>
    2e10:	18ffff17 	ldw	r3,-4(r3)
    2e14:	18000326 	beq	r3,zero,2e24 <quorem+0x128>
    2e18:	00000506 	br	2e30 <quorem+0x134>
    2e1c:	10c00017 	ldw	r3,0(r2)
    2e20:	1800031e 	bne	r3,zero,2e30 <quorem+0x134>
    2e24:	10bfff04 	addi	r2,r2,-4
    2e28:	bdffffc4 	addi	r23,r23,-1
    2e2c:	98bffb36 	bltu	r19,r2,2e1c <__alt_data_end+0xfffb9a3c>
    2e30:	d8c00017 	ldw	r3,0(sp)
    2e34:	1dc00415 	stw	r23,16(r3)
    2e38:	d9400217 	ldw	r5,8(sp)
    2e3c:	d9000017 	ldw	r4,0(sp)
    2e40:	0006f600 	call	6f60 <__mcmp>
    2e44:	10002816 	blt	r2,zero,2ee8 <quorem+0x1ec>
    2e48:	dc400117 	ldw	r17,4(sp)
    2e4c:	94800044 	addi	r18,r18,1
    2e50:	980d883a 	mov	r6,r19
    2e54:	0007883a 	mov	r3,zero
    2e58:	31000017 	ldw	r4,0(r6)
    2e5c:	89400017 	ldw	r5,0(r17)
    2e60:	31800104 	addi	r6,r6,4
    2e64:	20bfffcc 	andi	r2,r4,65535
    2e68:	10c7883a 	add	r3,r2,r3
    2e6c:	28bfffcc 	andi	r2,r5,65535
    2e70:	1885c83a 	sub	r2,r3,r2
    2e74:	280ad43a 	srli	r5,r5,16
    2e78:	2008d43a 	srli	r4,r4,16
    2e7c:	1007d43a 	srai	r3,r2,16
    2e80:	10bfffcc 	andi	r2,r2,65535
    2e84:	2149c83a 	sub	r4,r4,r5
    2e88:	20c9883a 	add	r4,r4,r3
    2e8c:	200a943a 	slli	r5,r4,16
    2e90:	8c400104 	addi	r17,r17,4
    2e94:	2007d43a 	srai	r3,r4,16
    2e98:	2884b03a 	or	r2,r5,r2
    2e9c:	30bfff15 	stw	r2,-4(r6)
    2ea0:	e47fed2e 	bgeu	fp,r17,2e58 <__alt_data_end+0xfffb9a78>
    2ea4:	bdc5883a 	add	r2,r23,r23
    2ea8:	1085883a 	add	r2,r2,r2
    2eac:	9887883a 	add	r3,r19,r2
    2eb0:	18800017 	ldw	r2,0(r3)
    2eb4:	10000c1e 	bne	r2,zero,2ee8 <quorem+0x1ec>
    2eb8:	18bfff04 	addi	r2,r3,-4
    2ebc:	9880082e 	bgeu	r19,r2,2ee0 <quorem+0x1e4>
    2ec0:	18ffff17 	ldw	r3,-4(r3)
    2ec4:	18000326 	beq	r3,zero,2ed4 <quorem+0x1d8>
    2ec8:	00000506 	br	2ee0 <quorem+0x1e4>
    2ecc:	10c00017 	ldw	r3,0(r2)
    2ed0:	1800031e 	bne	r3,zero,2ee0 <quorem+0x1e4>
    2ed4:	10bfff04 	addi	r2,r2,-4
    2ed8:	bdffffc4 	addi	r23,r23,-1
    2edc:	98bffb36 	bltu	r19,r2,2ecc <__alt_data_end+0xfffb9aec>
    2ee0:	d8c00017 	ldw	r3,0(sp)
    2ee4:	1dc00415 	stw	r23,16(r3)
    2ee8:	9005883a 	mov	r2,r18
    2eec:	dfc00d17 	ldw	ra,52(sp)
    2ef0:	df000c17 	ldw	fp,48(sp)
    2ef4:	ddc00b17 	ldw	r23,44(sp)
    2ef8:	dd800a17 	ldw	r22,40(sp)
    2efc:	dd400917 	ldw	r21,36(sp)
    2f00:	dd000817 	ldw	r20,32(sp)
    2f04:	dcc00717 	ldw	r19,28(sp)
    2f08:	dc800617 	ldw	r18,24(sp)
    2f0c:	dc400517 	ldw	r17,20(sp)
    2f10:	dc000417 	ldw	r16,16(sp)
    2f14:	dec00e04 	addi	sp,sp,56
    2f18:	f800283a 	ret
    2f1c:	0005883a 	mov	r2,zero
    2f20:	003ff206 	br	2eec <__alt_data_end+0xfffb9b0c>

00002f24 <_dtoa_r>:
    2f24:	20801017 	ldw	r2,64(r4)
    2f28:	deffde04 	addi	sp,sp,-136
    2f2c:	df002015 	stw	fp,128(sp)
    2f30:	dcc01b15 	stw	r19,108(sp)
    2f34:	dc801a15 	stw	r18,104(sp)
    2f38:	dc401915 	stw	r17,100(sp)
    2f3c:	dc001815 	stw	r16,96(sp)
    2f40:	dfc02115 	stw	ra,132(sp)
    2f44:	ddc01f15 	stw	r23,124(sp)
    2f48:	dd801e15 	stw	r22,120(sp)
    2f4c:	dd401d15 	stw	r21,116(sp)
    2f50:	dd001c15 	stw	r20,112(sp)
    2f54:	d9c00315 	stw	r7,12(sp)
    2f58:	2039883a 	mov	fp,r4
    2f5c:	3023883a 	mov	r17,r6
    2f60:	2825883a 	mov	r18,r5
    2f64:	dc002417 	ldw	r16,144(sp)
    2f68:	3027883a 	mov	r19,r6
    2f6c:	10000826 	beq	r2,zero,2f90 <_dtoa_r+0x6c>
    2f70:	21801117 	ldw	r6,68(r4)
    2f74:	00c00044 	movi	r3,1
    2f78:	100b883a 	mov	r5,r2
    2f7c:	1986983a 	sll	r3,r3,r6
    2f80:	11800115 	stw	r6,4(r2)
    2f84:	10c00215 	stw	r3,8(r2)
    2f88:	00066840 	call	6684 <_Bfree>
    2f8c:	e0001015 	stw	zero,64(fp)
    2f90:	88002e16 	blt	r17,zero,304c <_dtoa_r+0x128>
    2f94:	80000015 	stw	zero,0(r16)
    2f98:	889ffc2c 	andhi	r2,r17,32752
    2f9c:	00dffc34 	movhi	r3,32752
    2fa0:	10c01c26 	beq	r2,r3,3014 <_dtoa_r+0xf0>
    2fa4:	000d883a 	mov	r6,zero
    2fa8:	000f883a 	mov	r7,zero
    2fac:	9009883a 	mov	r4,r18
    2fb0:	980b883a 	mov	r5,r19
    2fb4:	000c09c0 	call	c09c <__eqdf2>
    2fb8:	10002b1e 	bne	r2,zero,3068 <_dtoa_r+0x144>
    2fbc:	d9c02317 	ldw	r7,140(sp)
    2fc0:	00800044 	movi	r2,1
    2fc4:	38800015 	stw	r2,0(r7)
    2fc8:	d8802517 	ldw	r2,148(sp)
    2fcc:	10019e26 	beq	r2,zero,3648 <_dtoa_r+0x724>
    2fd0:	d8c02517 	ldw	r3,148(sp)
    2fd4:	00800074 	movhi	r2,1
    2fd8:	1081a144 	addi	r2,r2,1669
    2fdc:	18800015 	stw	r2,0(r3)
    2fe0:	10bfffc4 	addi	r2,r2,-1
    2fe4:	dfc02117 	ldw	ra,132(sp)
    2fe8:	df002017 	ldw	fp,128(sp)
    2fec:	ddc01f17 	ldw	r23,124(sp)
    2ff0:	dd801e17 	ldw	r22,120(sp)
    2ff4:	dd401d17 	ldw	r21,116(sp)
    2ff8:	dd001c17 	ldw	r20,112(sp)
    2ffc:	dcc01b17 	ldw	r19,108(sp)
    3000:	dc801a17 	ldw	r18,104(sp)
    3004:	dc401917 	ldw	r17,100(sp)
    3008:	dc001817 	ldw	r16,96(sp)
    300c:	dec02204 	addi	sp,sp,136
    3010:	f800283a 	ret
    3014:	d8c02317 	ldw	r3,140(sp)
    3018:	0089c3c4 	movi	r2,9999
    301c:	18800015 	stw	r2,0(r3)
    3020:	90017726 	beq	r18,zero,3600 <_dtoa_r+0x6dc>
    3024:	00800074 	movhi	r2,1
    3028:	1081ad04 	addi	r2,r2,1716
    302c:	d9002517 	ldw	r4,148(sp)
    3030:	203fec26 	beq	r4,zero,2fe4 <__alt_data_end+0xfffb9c04>
    3034:	10c000c7 	ldb	r3,3(r2)
    3038:	1801781e 	bne	r3,zero,361c <_dtoa_r+0x6f8>
    303c:	10c000c4 	addi	r3,r2,3
    3040:	d9802517 	ldw	r6,148(sp)
    3044:	30c00015 	stw	r3,0(r6)
    3048:	003fe606 	br	2fe4 <__alt_data_end+0xfffb9c04>
    304c:	04e00034 	movhi	r19,32768
    3050:	9cffffc4 	addi	r19,r19,-1
    3054:	00800044 	movi	r2,1
    3058:	8ce6703a 	and	r19,r17,r19
    305c:	80800015 	stw	r2,0(r16)
    3060:	9823883a 	mov	r17,r19
    3064:	003fcc06 	br	2f98 <__alt_data_end+0xfffb9bb8>
    3068:	d8800204 	addi	r2,sp,8
    306c:	d8800015 	stw	r2,0(sp)
    3070:	d9c00104 	addi	r7,sp,4
    3074:	900b883a 	mov	r5,r18
    3078:	980d883a 	mov	r6,r19
    307c:	e009883a 	mov	r4,fp
    3080:	8820d53a 	srli	r16,r17,20
    3084:	000732c0 	call	732c <__d2b>
    3088:	d8800915 	stw	r2,36(sp)
    308c:	8001651e 	bne	r16,zero,3624 <_dtoa_r+0x700>
    3090:	dd800217 	ldw	r22,8(sp)
    3094:	dc000117 	ldw	r16,4(sp)
    3098:	00800804 	movi	r2,32
    309c:	b421883a 	add	r16,r22,r16
    30a0:	80c10c84 	addi	r3,r16,1074
    30a4:	10c2d10e 	bge	r2,r3,3bec <_dtoa_r+0xcc8>
    30a8:	00801004 	movi	r2,64
    30ac:	81010484 	addi	r4,r16,1042
    30b0:	10c7c83a 	sub	r3,r2,r3
    30b4:	9108d83a 	srl	r4,r18,r4
    30b8:	88e2983a 	sll	r17,r17,r3
    30bc:	2448b03a 	or	r4,r4,r17
    30c0:	000d5b80 	call	d5b8 <__floatunsidf>
    30c4:	017f8434 	movhi	r5,65040
    30c8:	01800044 	movi	r6,1
    30cc:	1009883a 	mov	r4,r2
    30d0:	194b883a 	add	r5,r3,r5
    30d4:	843fffc4 	addi	r16,r16,-1
    30d8:	d9801115 	stw	r6,68(sp)
    30dc:	000d883a 	mov	r6,zero
    30e0:	01cffe34 	movhi	r7,16376
    30e4:	000cb600 	call	cb60 <__subdf3>
    30e8:	0198dbf4 	movhi	r6,25455
    30ec:	01cff4f4 	movhi	r7,16339
    30f0:	3190d844 	addi	r6,r6,17249
    30f4:	39e1e9c4 	addi	r7,r7,-30809
    30f8:	1009883a 	mov	r4,r2
    30fc:	180b883a 	mov	r5,r3
    3100:	000c2f40 	call	c2f4 <__muldf3>
    3104:	01a2d874 	movhi	r6,35681
    3108:	01cff1f4 	movhi	r7,16327
    310c:	31b22cc4 	addi	r6,r6,-14157
    3110:	39e28a04 	addi	r7,r7,-30168
    3114:	180b883a 	mov	r5,r3
    3118:	1009883a 	mov	r4,r2
    311c:	000ae200 	call	ae20 <__adddf3>
    3120:	8009883a 	mov	r4,r16
    3124:	1029883a 	mov	r20,r2
    3128:	1823883a 	mov	r17,r3
    312c:	000d4dc0 	call	d4dc <__floatsidf>
    3130:	019427f4 	movhi	r6,20639
    3134:	01cff4f4 	movhi	r7,16339
    3138:	319e7ec4 	addi	r6,r6,31227
    313c:	39d104c4 	addi	r7,r7,17427
    3140:	1009883a 	mov	r4,r2
    3144:	180b883a 	mov	r5,r3
    3148:	000c2f40 	call	c2f4 <__muldf3>
    314c:	100d883a 	mov	r6,r2
    3150:	180f883a 	mov	r7,r3
    3154:	a009883a 	mov	r4,r20
    3158:	880b883a 	mov	r5,r17
    315c:	000ae200 	call	ae20 <__adddf3>
    3160:	1009883a 	mov	r4,r2
    3164:	180b883a 	mov	r5,r3
    3168:	1029883a 	mov	r20,r2
    316c:	1823883a 	mov	r17,r3
    3170:	000d45c0 	call	d45c <__fixdfsi>
    3174:	000d883a 	mov	r6,zero
    3178:	000f883a 	mov	r7,zero
    317c:	a009883a 	mov	r4,r20
    3180:	880b883a 	mov	r5,r17
    3184:	d8800515 	stw	r2,20(sp)
    3188:	000c2000 	call	c200 <__ledf2>
    318c:	10028716 	blt	r2,zero,3bac <_dtoa_r+0xc88>
    3190:	d8c00517 	ldw	r3,20(sp)
    3194:	00800584 	movi	r2,22
    3198:	10c27536 	bltu	r2,r3,3b70 <_dtoa_r+0xc4c>
    319c:	180490fa 	slli	r2,r3,3
    31a0:	00c00074 	movhi	r3,1
    31a4:	18c1c904 	addi	r3,r3,1828
    31a8:	1885883a 	add	r2,r3,r2
    31ac:	11000017 	ldw	r4,0(r2)
    31b0:	11400117 	ldw	r5,4(r2)
    31b4:	900d883a 	mov	r6,r18
    31b8:	980f883a 	mov	r7,r19
    31bc:	000c1240 	call	c124 <__gedf2>
    31c0:	00828d0e 	bge	zero,r2,3bf8 <_dtoa_r+0xcd4>
    31c4:	d9000517 	ldw	r4,20(sp)
    31c8:	d8000e15 	stw	zero,56(sp)
    31cc:	213fffc4 	addi	r4,r4,-1
    31d0:	d9000515 	stw	r4,20(sp)
    31d4:	b42dc83a 	sub	r22,r22,r16
    31d8:	b5bfffc4 	addi	r22,r22,-1
    31dc:	b0026f16 	blt	r22,zero,3b9c <_dtoa_r+0xc78>
    31e0:	d8000815 	stw	zero,32(sp)
    31e4:	d9c00517 	ldw	r7,20(sp)
    31e8:	38026416 	blt	r7,zero,3b7c <_dtoa_r+0xc58>
    31ec:	b1ed883a 	add	r22,r22,r7
    31f0:	d9c00d15 	stw	r7,52(sp)
    31f4:	d8000a15 	stw	zero,40(sp)
    31f8:	d9800317 	ldw	r6,12(sp)
    31fc:	00800244 	movi	r2,9
    3200:	11811436 	bltu	r2,r6,3654 <_dtoa_r+0x730>
    3204:	00800144 	movi	r2,5
    3208:	1184e10e 	bge	r2,r6,4590 <_dtoa_r+0x166c>
    320c:	31bfff04 	addi	r6,r6,-4
    3210:	d9800315 	stw	r6,12(sp)
    3214:	0023883a 	mov	r17,zero
    3218:	d9800317 	ldw	r6,12(sp)
    321c:	008000c4 	movi	r2,3
    3220:	30836726 	beq	r6,r2,3fc0 <_dtoa_r+0x109c>
    3224:	1183410e 	bge	r2,r6,3f2c <_dtoa_r+0x1008>
    3228:	d9c00317 	ldw	r7,12(sp)
    322c:	00800104 	movi	r2,4
    3230:	38827c26 	beq	r7,r2,3c24 <_dtoa_r+0xd00>
    3234:	00800144 	movi	r2,5
    3238:	3884c41e 	bne	r7,r2,454c <_dtoa_r+0x1628>
    323c:	00800044 	movi	r2,1
    3240:	d8800b15 	stw	r2,44(sp)
    3244:	d8c00517 	ldw	r3,20(sp)
    3248:	d9002217 	ldw	r4,136(sp)
    324c:	1907883a 	add	r3,r3,r4
    3250:	19800044 	addi	r6,r3,1
    3254:	d8c00c15 	stw	r3,48(sp)
    3258:	d9800615 	stw	r6,24(sp)
    325c:	0183a40e 	bge	zero,r6,40f0 <_dtoa_r+0x11cc>
    3260:	d9800617 	ldw	r6,24(sp)
    3264:	3021883a 	mov	r16,r6
    3268:	e0001115 	stw	zero,68(fp)
    326c:	008005c4 	movi	r2,23
    3270:	1184c92e 	bgeu	r2,r6,4598 <_dtoa_r+0x1674>
    3274:	00c00044 	movi	r3,1
    3278:	00800104 	movi	r2,4
    327c:	1085883a 	add	r2,r2,r2
    3280:	11000504 	addi	r4,r2,20
    3284:	180b883a 	mov	r5,r3
    3288:	18c00044 	addi	r3,r3,1
    328c:	313ffb2e 	bgeu	r6,r4,327c <__alt_data_end+0xfffb9e9c>
    3290:	e1401115 	stw	r5,68(fp)
    3294:	e009883a 	mov	r4,fp
    3298:	00065dc0 	call	65dc <_Balloc>
    329c:	d8800715 	stw	r2,28(sp)
    32a0:	e0801015 	stw	r2,64(fp)
    32a4:	00800384 	movi	r2,14
    32a8:	1400f736 	bltu	r2,r16,3688 <_dtoa_r+0x764>
    32ac:	8800f626 	beq	r17,zero,3688 <_dtoa_r+0x764>
    32b0:	d9c00517 	ldw	r7,20(sp)
    32b4:	01c39a0e 	bge	zero,r7,4120 <_dtoa_r+0x11fc>
    32b8:	388003cc 	andi	r2,r7,15
    32bc:	100490fa 	slli	r2,r2,3
    32c0:	382bd13a 	srai	r21,r7,4
    32c4:	00c00074 	movhi	r3,1
    32c8:	18c1c904 	addi	r3,r3,1828
    32cc:	1885883a 	add	r2,r3,r2
    32d0:	a8c0040c 	andi	r3,r21,16
    32d4:	12400017 	ldw	r9,0(r2)
    32d8:	12000117 	ldw	r8,4(r2)
    32dc:	18037926 	beq	r3,zero,40c4 <_dtoa_r+0x11a0>
    32e0:	00800074 	movhi	r2,1
    32e4:	1081bf04 	addi	r2,r2,1788
    32e8:	11800817 	ldw	r6,32(r2)
    32ec:	11c00917 	ldw	r7,36(r2)
    32f0:	9009883a 	mov	r4,r18
    32f4:	980b883a 	mov	r5,r19
    32f8:	da001715 	stw	r8,92(sp)
    32fc:	da401615 	stw	r9,88(sp)
    3300:	000b6cc0 	call	b6cc <__divdf3>
    3304:	da001717 	ldw	r8,92(sp)
    3308:	da401617 	ldw	r9,88(sp)
    330c:	ad4003cc 	andi	r21,r21,15
    3310:	040000c4 	movi	r16,3
    3314:	1023883a 	mov	r17,r2
    3318:	1829883a 	mov	r20,r3
    331c:	a8001126 	beq	r21,zero,3364 <_dtoa_r+0x440>
    3320:	05c00074 	movhi	r23,1
    3324:	bdc1bf04 	addi	r23,r23,1788
    3328:	4805883a 	mov	r2,r9
    332c:	4007883a 	mov	r3,r8
    3330:	a980004c 	andi	r6,r21,1
    3334:	1009883a 	mov	r4,r2
    3338:	a82bd07a 	srai	r21,r21,1
    333c:	180b883a 	mov	r5,r3
    3340:	30000426 	beq	r6,zero,3354 <_dtoa_r+0x430>
    3344:	b9800017 	ldw	r6,0(r23)
    3348:	b9c00117 	ldw	r7,4(r23)
    334c:	84000044 	addi	r16,r16,1
    3350:	000c2f40 	call	c2f4 <__muldf3>
    3354:	bdc00204 	addi	r23,r23,8
    3358:	a83ff51e 	bne	r21,zero,3330 <__alt_data_end+0xfffb9f50>
    335c:	1013883a 	mov	r9,r2
    3360:	1811883a 	mov	r8,r3
    3364:	480d883a 	mov	r6,r9
    3368:	400f883a 	mov	r7,r8
    336c:	8809883a 	mov	r4,r17
    3370:	a00b883a 	mov	r5,r20
    3374:	000b6cc0 	call	b6cc <__divdf3>
    3378:	d8800f15 	stw	r2,60(sp)
    337c:	d8c01015 	stw	r3,64(sp)
    3380:	d8c00e17 	ldw	r3,56(sp)
    3384:	18000626 	beq	r3,zero,33a0 <_dtoa_r+0x47c>
    3388:	d9000f17 	ldw	r4,60(sp)
    338c:	d9401017 	ldw	r5,64(sp)
    3390:	000d883a 	mov	r6,zero
    3394:	01cffc34 	movhi	r7,16368
    3398:	000c2000 	call	c200 <__ledf2>
    339c:	10040b16 	blt	r2,zero,43cc <_dtoa_r+0x14a8>
    33a0:	8009883a 	mov	r4,r16
    33a4:	000d4dc0 	call	d4dc <__floatsidf>
    33a8:	d9800f17 	ldw	r6,60(sp)
    33ac:	d9c01017 	ldw	r7,64(sp)
    33b0:	1009883a 	mov	r4,r2
    33b4:	180b883a 	mov	r5,r3
    33b8:	000c2f40 	call	c2f4 <__muldf3>
    33bc:	000d883a 	mov	r6,zero
    33c0:	01d00734 	movhi	r7,16412
    33c4:	1009883a 	mov	r4,r2
    33c8:	180b883a 	mov	r5,r3
    33cc:	000ae200 	call	ae20 <__adddf3>
    33d0:	1021883a 	mov	r16,r2
    33d4:	d8800617 	ldw	r2,24(sp)
    33d8:	047f3034 	movhi	r17,64704
    33dc:	1c63883a 	add	r17,r3,r17
    33e0:	10031826 	beq	r2,zero,4044 <_dtoa_r+0x1120>
    33e4:	d8c00517 	ldw	r3,20(sp)
    33e8:	db000617 	ldw	r12,24(sp)
    33ec:	d8c01315 	stw	r3,76(sp)
    33f0:	d9000b17 	ldw	r4,44(sp)
    33f4:	20038f26 	beq	r4,zero,4234 <_dtoa_r+0x1310>
    33f8:	60bfffc4 	addi	r2,r12,-1
    33fc:	100490fa 	slli	r2,r2,3
    3400:	00c00074 	movhi	r3,1
    3404:	18c1c904 	addi	r3,r3,1828
    3408:	1885883a 	add	r2,r3,r2
    340c:	11800017 	ldw	r6,0(r2)
    3410:	11c00117 	ldw	r7,4(r2)
    3414:	d8800717 	ldw	r2,28(sp)
    3418:	0009883a 	mov	r4,zero
    341c:	014ff834 	movhi	r5,16352
    3420:	db001615 	stw	r12,88(sp)
    3424:	15c00044 	addi	r23,r2,1
    3428:	000b6cc0 	call	b6cc <__divdf3>
    342c:	800d883a 	mov	r6,r16
    3430:	880f883a 	mov	r7,r17
    3434:	1009883a 	mov	r4,r2
    3438:	180b883a 	mov	r5,r3
    343c:	000cb600 	call	cb60 <__subdf3>
    3440:	d9401017 	ldw	r5,64(sp)
    3444:	d9000f17 	ldw	r4,60(sp)
    3448:	102b883a 	mov	r21,r2
    344c:	d8c01215 	stw	r3,72(sp)
    3450:	000d45c0 	call	d45c <__fixdfsi>
    3454:	1009883a 	mov	r4,r2
    3458:	1029883a 	mov	r20,r2
    345c:	000d4dc0 	call	d4dc <__floatsidf>
    3460:	d9000f17 	ldw	r4,60(sp)
    3464:	d9401017 	ldw	r5,64(sp)
    3468:	100d883a 	mov	r6,r2
    346c:	180f883a 	mov	r7,r3
    3470:	000cb600 	call	cb60 <__subdf3>
    3474:	1823883a 	mov	r17,r3
    3478:	d8c00717 	ldw	r3,28(sp)
    347c:	d9401217 	ldw	r5,72(sp)
    3480:	a2000c04 	addi	r8,r20,48
    3484:	1021883a 	mov	r16,r2
    3488:	1a000005 	stb	r8,0(r3)
    348c:	800d883a 	mov	r6,r16
    3490:	880f883a 	mov	r7,r17
    3494:	a809883a 	mov	r4,r21
    3498:	4029883a 	mov	r20,r8
    349c:	000c1240 	call	c124 <__gedf2>
    34a0:	00841d16 	blt	zero,r2,4518 <_dtoa_r+0x15f4>
    34a4:	800d883a 	mov	r6,r16
    34a8:	880f883a 	mov	r7,r17
    34ac:	0009883a 	mov	r4,zero
    34b0:	014ffc34 	movhi	r5,16368
    34b4:	000cb600 	call	cb60 <__subdf3>
    34b8:	d9401217 	ldw	r5,72(sp)
    34bc:	100d883a 	mov	r6,r2
    34c0:	180f883a 	mov	r7,r3
    34c4:	a809883a 	mov	r4,r21
    34c8:	000c1240 	call	c124 <__gedf2>
    34cc:	db001617 	ldw	r12,88(sp)
    34d0:	00840e16 	blt	zero,r2,450c <_dtoa_r+0x15e8>
    34d4:	00800044 	movi	r2,1
    34d8:	13006b0e 	bge	r2,r12,3688 <_dtoa_r+0x764>
    34dc:	d9000717 	ldw	r4,28(sp)
    34e0:	dd800f15 	stw	r22,60(sp)
    34e4:	dcc01015 	stw	r19,64(sp)
    34e8:	2319883a 	add	r12,r4,r12
    34ec:	dcc01217 	ldw	r19,72(sp)
    34f0:	602d883a 	mov	r22,r12
    34f4:	dc801215 	stw	r18,72(sp)
    34f8:	b825883a 	mov	r18,r23
    34fc:	00000906 	br	3524 <_dtoa_r+0x600>
    3500:	000cb600 	call	cb60 <__subdf3>
    3504:	a80d883a 	mov	r6,r21
    3508:	980f883a 	mov	r7,r19
    350c:	1009883a 	mov	r4,r2
    3510:	180b883a 	mov	r5,r3
    3514:	000c2000 	call	c200 <__ledf2>
    3518:	1003e816 	blt	r2,zero,44bc <_dtoa_r+0x1598>
    351c:	b825883a 	mov	r18,r23
    3520:	bd83e926 	beq	r23,r22,44c8 <_dtoa_r+0x15a4>
    3524:	a809883a 	mov	r4,r21
    3528:	980b883a 	mov	r5,r19
    352c:	000d883a 	mov	r6,zero
    3530:	01d00934 	movhi	r7,16420
    3534:	000c2f40 	call	c2f4 <__muldf3>
    3538:	000d883a 	mov	r6,zero
    353c:	01d00934 	movhi	r7,16420
    3540:	8009883a 	mov	r4,r16
    3544:	880b883a 	mov	r5,r17
    3548:	102b883a 	mov	r21,r2
    354c:	1827883a 	mov	r19,r3
    3550:	000c2f40 	call	c2f4 <__muldf3>
    3554:	180b883a 	mov	r5,r3
    3558:	1009883a 	mov	r4,r2
    355c:	1821883a 	mov	r16,r3
    3560:	1023883a 	mov	r17,r2
    3564:	000d45c0 	call	d45c <__fixdfsi>
    3568:	1009883a 	mov	r4,r2
    356c:	1029883a 	mov	r20,r2
    3570:	000d4dc0 	call	d4dc <__floatsidf>
    3574:	8809883a 	mov	r4,r17
    3578:	800b883a 	mov	r5,r16
    357c:	100d883a 	mov	r6,r2
    3580:	180f883a 	mov	r7,r3
    3584:	000cb600 	call	cb60 <__subdf3>
    3588:	a5000c04 	addi	r20,r20,48
    358c:	a80d883a 	mov	r6,r21
    3590:	980f883a 	mov	r7,r19
    3594:	1009883a 	mov	r4,r2
    3598:	180b883a 	mov	r5,r3
    359c:	95000005 	stb	r20,0(r18)
    35a0:	1021883a 	mov	r16,r2
    35a4:	1823883a 	mov	r17,r3
    35a8:	000c2000 	call	c200 <__ledf2>
    35ac:	bdc00044 	addi	r23,r23,1
    35b0:	800d883a 	mov	r6,r16
    35b4:	880f883a 	mov	r7,r17
    35b8:	0009883a 	mov	r4,zero
    35bc:	014ffc34 	movhi	r5,16368
    35c0:	103fcf0e 	bge	r2,zero,3500 <__alt_data_end+0xfffba120>
    35c4:	d8c01317 	ldw	r3,76(sp)
    35c8:	d8c00515 	stw	r3,20(sp)
    35cc:	d9400917 	ldw	r5,36(sp)
    35d0:	e009883a 	mov	r4,fp
    35d4:	00066840 	call	6684 <_Bfree>
    35d8:	d9000517 	ldw	r4,20(sp)
    35dc:	d9802317 	ldw	r6,140(sp)
    35e0:	d9c02517 	ldw	r7,148(sp)
    35e4:	b8000005 	stb	zero,0(r23)
    35e8:	20800044 	addi	r2,r4,1
    35ec:	30800015 	stw	r2,0(r6)
    35f0:	3802aa26 	beq	r7,zero,409c <_dtoa_r+0x1178>
    35f4:	3dc00015 	stw	r23,0(r7)
    35f8:	d8800717 	ldw	r2,28(sp)
    35fc:	003e7906 	br	2fe4 <__alt_data_end+0xfffb9c04>
    3600:	00800434 	movhi	r2,16
    3604:	10bfffc4 	addi	r2,r2,-1
    3608:	88a2703a 	and	r17,r17,r2
    360c:	883e851e 	bne	r17,zero,3024 <__alt_data_end+0xfffb9c44>
    3610:	00800074 	movhi	r2,1
    3614:	1081aa04 	addi	r2,r2,1704
    3618:	003e8406 	br	302c <__alt_data_end+0xfffb9c4c>
    361c:	10c00204 	addi	r3,r2,8
    3620:	003e8706 	br	3040 <__alt_data_end+0xfffb9c60>
    3624:	01400434 	movhi	r5,16
    3628:	297fffc4 	addi	r5,r5,-1
    362c:	994a703a 	and	r5,r19,r5
    3630:	9009883a 	mov	r4,r18
    3634:	843f0044 	addi	r16,r16,-1023
    3638:	294ffc34 	orhi	r5,r5,16368
    363c:	dd800217 	ldw	r22,8(sp)
    3640:	d8001115 	stw	zero,68(sp)
    3644:	003ea506 	br	30dc <__alt_data_end+0xfffb9cfc>
    3648:	00800074 	movhi	r2,1
    364c:	1081a104 	addi	r2,r2,1668
    3650:	003e6406 	br	2fe4 <__alt_data_end+0xfffb9c04>
    3654:	e0001115 	stw	zero,68(fp)
    3658:	000b883a 	mov	r5,zero
    365c:	e009883a 	mov	r4,fp
    3660:	00065dc0 	call	65dc <_Balloc>
    3664:	01bfffc4 	movi	r6,-1
    3668:	01c00044 	movi	r7,1
    366c:	d8800715 	stw	r2,28(sp)
    3670:	d9800c15 	stw	r6,48(sp)
    3674:	e0801015 	stw	r2,64(fp)
    3678:	d8000315 	stw	zero,12(sp)
    367c:	d9c00b15 	stw	r7,44(sp)
    3680:	d9800615 	stw	r6,24(sp)
    3684:	d8002215 	stw	zero,136(sp)
    3688:	d8800117 	ldw	r2,4(sp)
    368c:	10008916 	blt	r2,zero,38b4 <_dtoa_r+0x990>
    3690:	d9000517 	ldw	r4,20(sp)
    3694:	00c00384 	movi	r3,14
    3698:	19008616 	blt	r3,r4,38b4 <_dtoa_r+0x990>
    369c:	200490fa 	slli	r2,r4,3
    36a0:	00c00074 	movhi	r3,1
    36a4:	d9802217 	ldw	r6,136(sp)
    36a8:	18c1c904 	addi	r3,r3,1828
    36ac:	1885883a 	add	r2,r3,r2
    36b0:	14000017 	ldw	r16,0(r2)
    36b4:	14400117 	ldw	r17,4(r2)
    36b8:	30016316 	blt	r6,zero,3c48 <_dtoa_r+0xd24>
    36bc:	800d883a 	mov	r6,r16
    36c0:	880f883a 	mov	r7,r17
    36c4:	9009883a 	mov	r4,r18
    36c8:	980b883a 	mov	r5,r19
    36cc:	000b6cc0 	call	b6cc <__divdf3>
    36d0:	180b883a 	mov	r5,r3
    36d4:	1009883a 	mov	r4,r2
    36d8:	000d45c0 	call	d45c <__fixdfsi>
    36dc:	1009883a 	mov	r4,r2
    36e0:	102b883a 	mov	r21,r2
    36e4:	000d4dc0 	call	d4dc <__floatsidf>
    36e8:	800d883a 	mov	r6,r16
    36ec:	880f883a 	mov	r7,r17
    36f0:	1009883a 	mov	r4,r2
    36f4:	180b883a 	mov	r5,r3
    36f8:	000c2f40 	call	c2f4 <__muldf3>
    36fc:	100d883a 	mov	r6,r2
    3700:	180f883a 	mov	r7,r3
    3704:	9009883a 	mov	r4,r18
    3708:	980b883a 	mov	r5,r19
    370c:	000cb600 	call	cb60 <__subdf3>
    3710:	d9c00717 	ldw	r7,28(sp)
    3714:	1009883a 	mov	r4,r2
    3718:	a8800c04 	addi	r2,r21,48
    371c:	38800005 	stb	r2,0(r7)
    3720:	3dc00044 	addi	r23,r7,1
    3724:	d9c00617 	ldw	r7,24(sp)
    3728:	01800044 	movi	r6,1
    372c:	180b883a 	mov	r5,r3
    3730:	2005883a 	mov	r2,r4
    3734:	39803826 	beq	r7,r6,3818 <_dtoa_r+0x8f4>
    3738:	000d883a 	mov	r6,zero
    373c:	01d00934 	movhi	r7,16420
    3740:	000c2f40 	call	c2f4 <__muldf3>
    3744:	000d883a 	mov	r6,zero
    3748:	000f883a 	mov	r7,zero
    374c:	1009883a 	mov	r4,r2
    3750:	180b883a 	mov	r5,r3
    3754:	1025883a 	mov	r18,r2
    3758:	1827883a 	mov	r19,r3
    375c:	000c09c0 	call	c09c <__eqdf2>
    3760:	103f9a26 	beq	r2,zero,35cc <__alt_data_end+0xfffba1ec>
    3764:	d9c00617 	ldw	r7,24(sp)
    3768:	d8c00717 	ldw	r3,28(sp)
    376c:	b829883a 	mov	r20,r23
    3770:	38bfffc4 	addi	r2,r7,-1
    3774:	18ad883a 	add	r22,r3,r2
    3778:	00000a06 	br	37a4 <_dtoa_r+0x880>
    377c:	000c2f40 	call	c2f4 <__muldf3>
    3780:	000d883a 	mov	r6,zero
    3784:	000f883a 	mov	r7,zero
    3788:	1009883a 	mov	r4,r2
    378c:	180b883a 	mov	r5,r3
    3790:	1025883a 	mov	r18,r2
    3794:	1827883a 	mov	r19,r3
    3798:	b829883a 	mov	r20,r23
    379c:	000c09c0 	call	c09c <__eqdf2>
    37a0:	103f8a26 	beq	r2,zero,35cc <__alt_data_end+0xfffba1ec>
    37a4:	800d883a 	mov	r6,r16
    37a8:	880f883a 	mov	r7,r17
    37ac:	9009883a 	mov	r4,r18
    37b0:	980b883a 	mov	r5,r19
    37b4:	000b6cc0 	call	b6cc <__divdf3>
    37b8:	180b883a 	mov	r5,r3
    37bc:	1009883a 	mov	r4,r2
    37c0:	000d45c0 	call	d45c <__fixdfsi>
    37c4:	1009883a 	mov	r4,r2
    37c8:	102b883a 	mov	r21,r2
    37cc:	000d4dc0 	call	d4dc <__floatsidf>
    37d0:	800d883a 	mov	r6,r16
    37d4:	880f883a 	mov	r7,r17
    37d8:	1009883a 	mov	r4,r2
    37dc:	180b883a 	mov	r5,r3
    37e0:	000c2f40 	call	c2f4 <__muldf3>
    37e4:	100d883a 	mov	r6,r2
    37e8:	180f883a 	mov	r7,r3
    37ec:	9009883a 	mov	r4,r18
    37f0:	980b883a 	mov	r5,r19
    37f4:	000cb600 	call	cb60 <__subdf3>
    37f8:	aa000c04 	addi	r8,r21,48
    37fc:	a2000005 	stb	r8,0(r20)
    3800:	000d883a 	mov	r6,zero
    3804:	01d00934 	movhi	r7,16420
    3808:	1009883a 	mov	r4,r2
    380c:	180b883a 	mov	r5,r3
    3810:	a5c00044 	addi	r23,r20,1
    3814:	b53fd91e 	bne	r22,r20,377c <__alt_data_end+0xfffba39c>
    3818:	100d883a 	mov	r6,r2
    381c:	180f883a 	mov	r7,r3
    3820:	1009883a 	mov	r4,r2
    3824:	180b883a 	mov	r5,r3
    3828:	000ae200 	call	ae20 <__adddf3>
    382c:	100d883a 	mov	r6,r2
    3830:	180f883a 	mov	r7,r3
    3834:	8009883a 	mov	r4,r16
    3838:	880b883a 	mov	r5,r17
    383c:	1027883a 	mov	r19,r2
    3840:	1825883a 	mov	r18,r3
    3844:	000c2000 	call	c200 <__ledf2>
    3848:	10000816 	blt	r2,zero,386c <_dtoa_r+0x948>
    384c:	980d883a 	mov	r6,r19
    3850:	900f883a 	mov	r7,r18
    3854:	8009883a 	mov	r4,r16
    3858:	880b883a 	mov	r5,r17
    385c:	000c09c0 	call	c09c <__eqdf2>
    3860:	103f5a1e 	bne	r2,zero,35cc <__alt_data_end+0xfffba1ec>
    3864:	ad40004c 	andi	r21,r21,1
    3868:	a83f5826 	beq	r21,zero,35cc <__alt_data_end+0xfffba1ec>
    386c:	bd3fffc3 	ldbu	r20,-1(r23)
    3870:	b8bfffc4 	addi	r2,r23,-1
    3874:	1007883a 	mov	r3,r2
    3878:	01400e44 	movi	r5,57
    387c:	d9800717 	ldw	r6,28(sp)
    3880:	00000506 	br	3898 <_dtoa_r+0x974>
    3884:	18ffffc4 	addi	r3,r3,-1
    3888:	11824726 	beq	r2,r6,41a8 <_dtoa_r+0x1284>
    388c:	1d000003 	ldbu	r20,0(r3)
    3890:	102f883a 	mov	r23,r2
    3894:	10bfffc4 	addi	r2,r2,-1
    3898:	a1003fcc 	andi	r4,r20,255
    389c:	2100201c 	xori	r4,r4,128
    38a0:	213fe004 	addi	r4,r4,-128
    38a4:	217ff726 	beq	r4,r5,3884 <__alt_data_end+0xfffba4a4>
    38a8:	a2000044 	addi	r8,r20,1
    38ac:	12000005 	stb	r8,0(r2)
    38b0:	003f4606 	br	35cc <__alt_data_end+0xfffba1ec>
    38b4:	d9000b17 	ldw	r4,44(sp)
    38b8:	2000c826 	beq	r4,zero,3bdc <_dtoa_r+0xcb8>
    38bc:	d9800317 	ldw	r6,12(sp)
    38c0:	00c00044 	movi	r3,1
    38c4:	1980f90e 	bge	r3,r6,3cac <_dtoa_r+0xd88>
    38c8:	d8800617 	ldw	r2,24(sp)
    38cc:	d8c00a17 	ldw	r3,40(sp)
    38d0:	157fffc4 	addi	r21,r2,-1
    38d4:	1d41f316 	blt	r3,r21,40a4 <_dtoa_r+0x1180>
    38d8:	1d6bc83a 	sub	r21,r3,r21
    38dc:	d9c00617 	ldw	r7,24(sp)
    38e0:	3802aa16 	blt	r7,zero,438c <_dtoa_r+0x1468>
    38e4:	dd000817 	ldw	r20,32(sp)
    38e8:	d8800617 	ldw	r2,24(sp)
    38ec:	d8c00817 	ldw	r3,32(sp)
    38f0:	01400044 	movi	r5,1
    38f4:	e009883a 	mov	r4,fp
    38f8:	1887883a 	add	r3,r3,r2
    38fc:	d8c00815 	stw	r3,32(sp)
    3900:	b0ad883a 	add	r22,r22,r2
    3904:	0006a100 	call	6a10 <__i2b>
    3908:	1023883a 	mov	r17,r2
    390c:	a0000826 	beq	r20,zero,3930 <_dtoa_r+0xa0c>
    3910:	0580070e 	bge	zero,r22,3930 <_dtoa_r+0xa0c>
    3914:	a005883a 	mov	r2,r20
    3918:	b500b916 	blt	r22,r20,3c00 <_dtoa_r+0xcdc>
    391c:	d9000817 	ldw	r4,32(sp)
    3920:	a0a9c83a 	sub	r20,r20,r2
    3924:	b0adc83a 	sub	r22,r22,r2
    3928:	2089c83a 	sub	r4,r4,r2
    392c:	d9000815 	stw	r4,32(sp)
    3930:	d9800a17 	ldw	r6,40(sp)
    3934:	0181810e 	bge	zero,r6,3f3c <_dtoa_r+0x1018>
    3938:	d9c00b17 	ldw	r7,44(sp)
    393c:	3800b326 	beq	r7,zero,3c0c <_dtoa_r+0xce8>
    3940:	a800b226 	beq	r21,zero,3c0c <_dtoa_r+0xce8>
    3944:	880b883a 	mov	r5,r17
    3948:	a80d883a 	mov	r6,r21
    394c:	e009883a 	mov	r4,fp
    3950:	0006cd80 	call	6cd8 <__pow5mult>
    3954:	d9800917 	ldw	r6,36(sp)
    3958:	100b883a 	mov	r5,r2
    395c:	e009883a 	mov	r4,fp
    3960:	1023883a 	mov	r17,r2
    3964:	0006a4c0 	call	6a4c <__multiply>
    3968:	1021883a 	mov	r16,r2
    396c:	d8800a17 	ldw	r2,40(sp)
    3970:	d9400917 	ldw	r5,36(sp)
    3974:	e009883a 	mov	r4,fp
    3978:	1545c83a 	sub	r2,r2,r21
    397c:	d8800a15 	stw	r2,40(sp)
    3980:	00066840 	call	6684 <_Bfree>
    3984:	d8c00a17 	ldw	r3,40(sp)
    3988:	18009f1e 	bne	r3,zero,3c08 <_dtoa_r+0xce4>
    398c:	05c00044 	movi	r23,1
    3990:	e009883a 	mov	r4,fp
    3994:	b80b883a 	mov	r5,r23
    3998:	0006a100 	call	6a10 <__i2b>
    399c:	d9000d17 	ldw	r4,52(sp)
    39a0:	102b883a 	mov	r21,r2
    39a4:	2000ce26 	beq	r4,zero,3ce0 <_dtoa_r+0xdbc>
    39a8:	200d883a 	mov	r6,r4
    39ac:	100b883a 	mov	r5,r2
    39b0:	e009883a 	mov	r4,fp
    39b4:	0006cd80 	call	6cd8 <__pow5mult>
    39b8:	d9800317 	ldw	r6,12(sp)
    39bc:	102b883a 	mov	r21,r2
    39c0:	b981810e 	bge	r23,r6,3fc8 <_dtoa_r+0x10a4>
    39c4:	0027883a 	mov	r19,zero
    39c8:	a8800417 	ldw	r2,16(r21)
    39cc:	05c00804 	movi	r23,32
    39d0:	10800104 	addi	r2,r2,4
    39d4:	1085883a 	add	r2,r2,r2
    39d8:	1085883a 	add	r2,r2,r2
    39dc:	a885883a 	add	r2,r21,r2
    39e0:	11000017 	ldw	r4,0(r2)
    39e4:	00068f80 	call	68f8 <__hi0bits>
    39e8:	b885c83a 	sub	r2,r23,r2
    39ec:	1585883a 	add	r2,r2,r22
    39f0:	108007cc 	andi	r2,r2,31
    39f4:	1000b326 	beq	r2,zero,3cc4 <_dtoa_r+0xda0>
    39f8:	00c00804 	movi	r3,32
    39fc:	1887c83a 	sub	r3,r3,r2
    3a00:	01000104 	movi	r4,4
    3a04:	20c2cd0e 	bge	r4,r3,453c <_dtoa_r+0x1618>
    3a08:	00c00704 	movi	r3,28
    3a0c:	1885c83a 	sub	r2,r3,r2
    3a10:	d8c00817 	ldw	r3,32(sp)
    3a14:	a0a9883a 	add	r20,r20,r2
    3a18:	b0ad883a 	add	r22,r22,r2
    3a1c:	1887883a 	add	r3,r3,r2
    3a20:	d8c00815 	stw	r3,32(sp)
    3a24:	d9800817 	ldw	r6,32(sp)
    3a28:	0180040e 	bge	zero,r6,3a3c <_dtoa_r+0xb18>
    3a2c:	800b883a 	mov	r5,r16
    3a30:	e009883a 	mov	r4,fp
    3a34:	0006e180 	call	6e18 <__lshift>
    3a38:	1021883a 	mov	r16,r2
    3a3c:	0580050e 	bge	zero,r22,3a54 <_dtoa_r+0xb30>
    3a40:	a80b883a 	mov	r5,r21
    3a44:	b00d883a 	mov	r6,r22
    3a48:	e009883a 	mov	r4,fp
    3a4c:	0006e180 	call	6e18 <__lshift>
    3a50:	102b883a 	mov	r21,r2
    3a54:	d9c00e17 	ldw	r7,56(sp)
    3a58:	3801211e 	bne	r7,zero,3ee0 <_dtoa_r+0xfbc>
    3a5c:	d9800617 	ldw	r6,24(sp)
    3a60:	0181380e 	bge	zero,r6,3f44 <_dtoa_r+0x1020>
    3a64:	d8c00b17 	ldw	r3,44(sp)
    3a68:	1800ab1e 	bne	r3,zero,3d18 <_dtoa_r+0xdf4>
    3a6c:	dc800717 	ldw	r18,28(sp)
    3a70:	dcc00617 	ldw	r19,24(sp)
    3a74:	9029883a 	mov	r20,r18
    3a78:	00000206 	br	3a84 <_dtoa_r+0xb60>
    3a7c:	00066ac0 	call	66ac <__multadd>
    3a80:	1021883a 	mov	r16,r2
    3a84:	a80b883a 	mov	r5,r21
    3a88:	8009883a 	mov	r4,r16
    3a8c:	0002cfc0 	call	2cfc <quorem>
    3a90:	10800c04 	addi	r2,r2,48
    3a94:	90800005 	stb	r2,0(r18)
    3a98:	94800044 	addi	r18,r18,1
    3a9c:	9507c83a 	sub	r3,r18,r20
    3aa0:	000f883a 	mov	r7,zero
    3aa4:	01800284 	movi	r6,10
    3aa8:	800b883a 	mov	r5,r16
    3aac:	e009883a 	mov	r4,fp
    3ab0:	1cfff216 	blt	r3,r19,3a7c <__alt_data_end+0xfffba69c>
    3ab4:	1011883a 	mov	r8,r2
    3ab8:	d8800617 	ldw	r2,24(sp)
    3abc:	0082370e 	bge	zero,r2,439c <_dtoa_r+0x1478>
    3ac0:	d9000717 	ldw	r4,28(sp)
    3ac4:	0025883a 	mov	r18,zero
    3ac8:	20af883a 	add	r23,r4,r2
    3acc:	01800044 	movi	r6,1
    3ad0:	800b883a 	mov	r5,r16
    3ad4:	e009883a 	mov	r4,fp
    3ad8:	da001715 	stw	r8,92(sp)
    3adc:	0006e180 	call	6e18 <__lshift>
    3ae0:	a80b883a 	mov	r5,r21
    3ae4:	1009883a 	mov	r4,r2
    3ae8:	d8800915 	stw	r2,36(sp)
    3aec:	0006f600 	call	6f60 <__mcmp>
    3af0:	da001717 	ldw	r8,92(sp)
    3af4:	0081800e 	bge	zero,r2,40f8 <_dtoa_r+0x11d4>
    3af8:	b93fffc3 	ldbu	r4,-1(r23)
    3afc:	b8bfffc4 	addi	r2,r23,-1
    3b00:	1007883a 	mov	r3,r2
    3b04:	01800e44 	movi	r6,57
    3b08:	d9c00717 	ldw	r7,28(sp)
    3b0c:	00000506 	br	3b24 <_dtoa_r+0xc00>
    3b10:	18ffffc4 	addi	r3,r3,-1
    3b14:	11c12326 	beq	r2,r7,3fa4 <_dtoa_r+0x1080>
    3b18:	19000003 	ldbu	r4,0(r3)
    3b1c:	102f883a 	mov	r23,r2
    3b20:	10bfffc4 	addi	r2,r2,-1
    3b24:	21403fcc 	andi	r5,r4,255
    3b28:	2940201c 	xori	r5,r5,128
    3b2c:	297fe004 	addi	r5,r5,-128
    3b30:	29bff726 	beq	r5,r6,3b10 <__alt_data_end+0xfffba730>
    3b34:	21000044 	addi	r4,r4,1
    3b38:	11000005 	stb	r4,0(r2)
    3b3c:	a80b883a 	mov	r5,r21
    3b40:	e009883a 	mov	r4,fp
    3b44:	00066840 	call	6684 <_Bfree>
    3b48:	883ea026 	beq	r17,zero,35cc <__alt_data_end+0xfffba1ec>
    3b4c:	90000426 	beq	r18,zero,3b60 <_dtoa_r+0xc3c>
    3b50:	94400326 	beq	r18,r17,3b60 <_dtoa_r+0xc3c>
    3b54:	900b883a 	mov	r5,r18
    3b58:	e009883a 	mov	r4,fp
    3b5c:	00066840 	call	6684 <_Bfree>
    3b60:	880b883a 	mov	r5,r17
    3b64:	e009883a 	mov	r4,fp
    3b68:	00066840 	call	6684 <_Bfree>
    3b6c:	003e9706 	br	35cc <__alt_data_end+0xfffba1ec>
    3b70:	01800044 	movi	r6,1
    3b74:	d9800e15 	stw	r6,56(sp)
    3b78:	003d9606 	br	31d4 <__alt_data_end+0xfffb9df4>
    3b7c:	d8800817 	ldw	r2,32(sp)
    3b80:	d8c00517 	ldw	r3,20(sp)
    3b84:	d8000d15 	stw	zero,52(sp)
    3b88:	10c5c83a 	sub	r2,r2,r3
    3b8c:	00c9c83a 	sub	r4,zero,r3
    3b90:	d8800815 	stw	r2,32(sp)
    3b94:	d9000a15 	stw	r4,40(sp)
    3b98:	003d9706 	br	31f8 <__alt_data_end+0xfffb9e18>
    3b9c:	05adc83a 	sub	r22,zero,r22
    3ba0:	dd800815 	stw	r22,32(sp)
    3ba4:	002d883a 	mov	r22,zero
    3ba8:	003d8e06 	br	31e4 <__alt_data_end+0xfffb9e04>
    3bac:	d9000517 	ldw	r4,20(sp)
    3bb0:	000d4dc0 	call	d4dc <__floatsidf>
    3bb4:	100d883a 	mov	r6,r2
    3bb8:	180f883a 	mov	r7,r3
    3bbc:	a009883a 	mov	r4,r20
    3bc0:	880b883a 	mov	r5,r17
    3bc4:	000c09c0 	call	c09c <__eqdf2>
    3bc8:	103d7126 	beq	r2,zero,3190 <__alt_data_end+0xfffb9db0>
    3bcc:	d9c00517 	ldw	r7,20(sp)
    3bd0:	39ffffc4 	addi	r7,r7,-1
    3bd4:	d9c00515 	stw	r7,20(sp)
    3bd8:	003d6d06 	br	3190 <__alt_data_end+0xfffb9db0>
    3bdc:	dd400a17 	ldw	r21,40(sp)
    3be0:	dd000817 	ldw	r20,32(sp)
    3be4:	0023883a 	mov	r17,zero
    3be8:	003f4806 	br	390c <__alt_data_end+0xfffba52c>
    3bec:	10e3c83a 	sub	r17,r2,r3
    3bf0:	9448983a 	sll	r4,r18,r17
    3bf4:	003d3206 	br	30c0 <__alt_data_end+0xfffb9ce0>
    3bf8:	d8000e15 	stw	zero,56(sp)
    3bfc:	003d7506 	br	31d4 <__alt_data_end+0xfffb9df4>
    3c00:	b005883a 	mov	r2,r22
    3c04:	003f4506 	br	391c <__alt_data_end+0xfffba53c>
    3c08:	dc000915 	stw	r16,36(sp)
    3c0c:	d9800a17 	ldw	r6,40(sp)
    3c10:	d9400917 	ldw	r5,36(sp)
    3c14:	e009883a 	mov	r4,fp
    3c18:	0006cd80 	call	6cd8 <__pow5mult>
    3c1c:	1021883a 	mov	r16,r2
    3c20:	003f5a06 	br	398c <__alt_data_end+0xfffba5ac>
    3c24:	01c00044 	movi	r7,1
    3c28:	d9c00b15 	stw	r7,44(sp)
    3c2c:	d8802217 	ldw	r2,136(sp)
    3c30:	0081280e 	bge	zero,r2,40d4 <_dtoa_r+0x11b0>
    3c34:	100d883a 	mov	r6,r2
    3c38:	1021883a 	mov	r16,r2
    3c3c:	d8800c15 	stw	r2,48(sp)
    3c40:	d8800615 	stw	r2,24(sp)
    3c44:	003d8806 	br	3268 <__alt_data_end+0xfffb9e88>
    3c48:	d8800617 	ldw	r2,24(sp)
    3c4c:	00be9b16 	blt	zero,r2,36bc <__alt_data_end+0xfffba2dc>
    3c50:	10010f1e 	bne	r2,zero,4090 <_dtoa_r+0x116c>
    3c54:	880b883a 	mov	r5,r17
    3c58:	000d883a 	mov	r6,zero
    3c5c:	01d00534 	movhi	r7,16404
    3c60:	8009883a 	mov	r4,r16
    3c64:	000c2f40 	call	c2f4 <__muldf3>
    3c68:	900d883a 	mov	r6,r18
    3c6c:	980f883a 	mov	r7,r19
    3c70:	1009883a 	mov	r4,r2
    3c74:	180b883a 	mov	r5,r3
    3c78:	000c1240 	call	c124 <__gedf2>
    3c7c:	002b883a 	mov	r21,zero
    3c80:	0023883a 	mov	r17,zero
    3c84:	1000bf16 	blt	r2,zero,3f84 <_dtoa_r+0x1060>
    3c88:	d9802217 	ldw	r6,136(sp)
    3c8c:	ddc00717 	ldw	r23,28(sp)
    3c90:	018c303a 	nor	r6,zero,r6
    3c94:	d9800515 	stw	r6,20(sp)
    3c98:	a80b883a 	mov	r5,r21
    3c9c:	e009883a 	mov	r4,fp
    3ca0:	00066840 	call	6684 <_Bfree>
    3ca4:	883e4926 	beq	r17,zero,35cc <__alt_data_end+0xfffba1ec>
    3ca8:	003fad06 	br	3b60 <__alt_data_end+0xfffba780>
    3cac:	d9c01117 	ldw	r7,68(sp)
    3cb0:	3801bc26 	beq	r7,zero,43a4 <_dtoa_r+0x1480>
    3cb4:	10810cc4 	addi	r2,r2,1075
    3cb8:	dd400a17 	ldw	r21,40(sp)
    3cbc:	dd000817 	ldw	r20,32(sp)
    3cc0:	003f0a06 	br	38ec <__alt_data_end+0xfffba50c>
    3cc4:	00800704 	movi	r2,28
    3cc8:	d9000817 	ldw	r4,32(sp)
    3ccc:	a0a9883a 	add	r20,r20,r2
    3cd0:	b0ad883a 	add	r22,r22,r2
    3cd4:	2089883a 	add	r4,r4,r2
    3cd8:	d9000815 	stw	r4,32(sp)
    3cdc:	003f5106 	br	3a24 <__alt_data_end+0xfffba644>
    3ce0:	d8c00317 	ldw	r3,12(sp)
    3ce4:	b8c1fc0e 	bge	r23,r3,44d8 <_dtoa_r+0x15b4>
    3ce8:	0027883a 	mov	r19,zero
    3cec:	b805883a 	mov	r2,r23
    3cf0:	003f3e06 	br	39ec <__alt_data_end+0xfffba60c>
    3cf4:	880b883a 	mov	r5,r17
    3cf8:	e009883a 	mov	r4,fp
    3cfc:	000f883a 	mov	r7,zero
    3d00:	01800284 	movi	r6,10
    3d04:	00066ac0 	call	66ac <__multadd>
    3d08:	d9000c17 	ldw	r4,48(sp)
    3d0c:	1023883a 	mov	r17,r2
    3d10:	0102040e 	bge	zero,r4,4524 <_dtoa_r+0x1600>
    3d14:	d9000615 	stw	r4,24(sp)
    3d18:	0500050e 	bge	zero,r20,3d30 <_dtoa_r+0xe0c>
    3d1c:	880b883a 	mov	r5,r17
    3d20:	a00d883a 	mov	r6,r20
    3d24:	e009883a 	mov	r4,fp
    3d28:	0006e180 	call	6e18 <__lshift>
    3d2c:	1023883a 	mov	r17,r2
    3d30:	9801241e 	bne	r19,zero,41c4 <_dtoa_r+0x12a0>
    3d34:	8829883a 	mov	r20,r17
    3d38:	d9000617 	ldw	r4,24(sp)
    3d3c:	dcc00717 	ldw	r19,28(sp)
    3d40:	9480004c 	andi	r18,r18,1
    3d44:	20bfffc4 	addi	r2,r4,-1
    3d48:	9885883a 	add	r2,r19,r2
    3d4c:	d8800415 	stw	r2,16(sp)
    3d50:	dc800615 	stw	r18,24(sp)
    3d54:	a80b883a 	mov	r5,r21
    3d58:	8009883a 	mov	r4,r16
    3d5c:	0002cfc0 	call	2cfc <quorem>
    3d60:	880b883a 	mov	r5,r17
    3d64:	8009883a 	mov	r4,r16
    3d68:	102f883a 	mov	r23,r2
    3d6c:	0006f600 	call	6f60 <__mcmp>
    3d70:	a80b883a 	mov	r5,r21
    3d74:	a00d883a 	mov	r6,r20
    3d78:	e009883a 	mov	r4,fp
    3d7c:	102d883a 	mov	r22,r2
    3d80:	0006fc00 	call	6fc0 <__mdiff>
    3d84:	1007883a 	mov	r3,r2
    3d88:	10800317 	ldw	r2,12(r2)
    3d8c:	bc800c04 	addi	r18,r23,48
    3d90:	180b883a 	mov	r5,r3
    3d94:	10004e1e 	bne	r2,zero,3ed0 <_dtoa_r+0xfac>
    3d98:	8009883a 	mov	r4,r16
    3d9c:	d8c01615 	stw	r3,88(sp)
    3da0:	0006f600 	call	6f60 <__mcmp>
    3da4:	d8c01617 	ldw	r3,88(sp)
    3da8:	e009883a 	mov	r4,fp
    3dac:	d8801615 	stw	r2,88(sp)
    3db0:	180b883a 	mov	r5,r3
    3db4:	00066840 	call	6684 <_Bfree>
    3db8:	d8801617 	ldw	r2,88(sp)
    3dbc:	1000041e 	bne	r2,zero,3dd0 <_dtoa_r+0xeac>
    3dc0:	d9800317 	ldw	r6,12(sp)
    3dc4:	3000021e 	bne	r6,zero,3dd0 <_dtoa_r+0xeac>
    3dc8:	d8c00617 	ldw	r3,24(sp)
    3dcc:	18003726 	beq	r3,zero,3eac <_dtoa_r+0xf88>
    3dd0:	b0002016 	blt	r22,zero,3e54 <_dtoa_r+0xf30>
    3dd4:	b000041e 	bne	r22,zero,3de8 <_dtoa_r+0xec4>
    3dd8:	d9000317 	ldw	r4,12(sp)
    3ddc:	2000021e 	bne	r4,zero,3de8 <_dtoa_r+0xec4>
    3de0:	d8c00617 	ldw	r3,24(sp)
    3de4:	18001b26 	beq	r3,zero,3e54 <_dtoa_r+0xf30>
    3de8:	00810716 	blt	zero,r2,4208 <_dtoa_r+0x12e4>
    3dec:	d8c00417 	ldw	r3,16(sp)
    3df0:	9d800044 	addi	r22,r19,1
    3df4:	9c800005 	stb	r18,0(r19)
    3df8:	b02f883a 	mov	r23,r22
    3dfc:	98c10626 	beq	r19,r3,4218 <_dtoa_r+0x12f4>
    3e00:	800b883a 	mov	r5,r16
    3e04:	000f883a 	mov	r7,zero
    3e08:	01800284 	movi	r6,10
    3e0c:	e009883a 	mov	r4,fp
    3e10:	00066ac0 	call	66ac <__multadd>
    3e14:	1021883a 	mov	r16,r2
    3e18:	000f883a 	mov	r7,zero
    3e1c:	01800284 	movi	r6,10
    3e20:	880b883a 	mov	r5,r17
    3e24:	e009883a 	mov	r4,fp
    3e28:	8d002526 	beq	r17,r20,3ec0 <_dtoa_r+0xf9c>
    3e2c:	00066ac0 	call	66ac <__multadd>
    3e30:	a00b883a 	mov	r5,r20
    3e34:	000f883a 	mov	r7,zero
    3e38:	01800284 	movi	r6,10
    3e3c:	e009883a 	mov	r4,fp
    3e40:	1023883a 	mov	r17,r2
    3e44:	00066ac0 	call	66ac <__multadd>
    3e48:	1029883a 	mov	r20,r2
    3e4c:	b027883a 	mov	r19,r22
    3e50:	003fc006 	br	3d54 <__alt_data_end+0xfffba974>
    3e54:	9011883a 	mov	r8,r18
    3e58:	00800e0e 	bge	zero,r2,3e94 <_dtoa_r+0xf70>
    3e5c:	800b883a 	mov	r5,r16
    3e60:	01800044 	movi	r6,1
    3e64:	e009883a 	mov	r4,fp
    3e68:	da001715 	stw	r8,92(sp)
    3e6c:	0006e180 	call	6e18 <__lshift>
    3e70:	a80b883a 	mov	r5,r21
    3e74:	1009883a 	mov	r4,r2
    3e78:	1021883a 	mov	r16,r2
    3e7c:	0006f600 	call	6f60 <__mcmp>
    3e80:	da001717 	ldw	r8,92(sp)
    3e84:	0081960e 	bge	zero,r2,44e0 <_dtoa_r+0x15bc>
    3e88:	00800e44 	movi	r2,57
    3e8c:	40817026 	beq	r8,r2,4450 <_dtoa_r+0x152c>
    3e90:	ba000c44 	addi	r8,r23,49
    3e94:	8825883a 	mov	r18,r17
    3e98:	9dc00044 	addi	r23,r19,1
    3e9c:	9a000005 	stb	r8,0(r19)
    3ea0:	a023883a 	mov	r17,r20
    3ea4:	dc000915 	stw	r16,36(sp)
    3ea8:	003f2406 	br	3b3c <__alt_data_end+0xfffba75c>
    3eac:	00800e44 	movi	r2,57
    3eb0:	9011883a 	mov	r8,r18
    3eb4:	90816626 	beq	r18,r2,4450 <_dtoa_r+0x152c>
    3eb8:	05bff516 	blt	zero,r22,3e90 <__alt_data_end+0xfffbaab0>
    3ebc:	003ff506 	br	3e94 <__alt_data_end+0xfffbaab4>
    3ec0:	00066ac0 	call	66ac <__multadd>
    3ec4:	1023883a 	mov	r17,r2
    3ec8:	1029883a 	mov	r20,r2
    3ecc:	003fdf06 	br	3e4c <__alt_data_end+0xfffbaa6c>
    3ed0:	e009883a 	mov	r4,fp
    3ed4:	00066840 	call	6684 <_Bfree>
    3ed8:	00800044 	movi	r2,1
    3edc:	003fbc06 	br	3dd0 <__alt_data_end+0xfffba9f0>
    3ee0:	a80b883a 	mov	r5,r21
    3ee4:	8009883a 	mov	r4,r16
    3ee8:	0006f600 	call	6f60 <__mcmp>
    3eec:	103edb0e 	bge	r2,zero,3a5c <__alt_data_end+0xfffba67c>
    3ef0:	800b883a 	mov	r5,r16
    3ef4:	000f883a 	mov	r7,zero
    3ef8:	01800284 	movi	r6,10
    3efc:	e009883a 	mov	r4,fp
    3f00:	00066ac0 	call	66ac <__multadd>
    3f04:	1021883a 	mov	r16,r2
    3f08:	d8800517 	ldw	r2,20(sp)
    3f0c:	d8c00b17 	ldw	r3,44(sp)
    3f10:	10bfffc4 	addi	r2,r2,-1
    3f14:	d8800515 	stw	r2,20(sp)
    3f18:	183f761e 	bne	r3,zero,3cf4 <__alt_data_end+0xfffba914>
    3f1c:	d9000c17 	ldw	r4,48(sp)
    3f20:	0101730e 	bge	zero,r4,44f0 <_dtoa_r+0x15cc>
    3f24:	d9000615 	stw	r4,24(sp)
    3f28:	003ed006 	br	3a6c <__alt_data_end+0xfffba68c>
    3f2c:	00800084 	movi	r2,2
    3f30:	3081861e 	bne	r6,r2,454c <_dtoa_r+0x1628>
    3f34:	d8000b15 	stw	zero,44(sp)
    3f38:	003f3c06 	br	3c2c <__alt_data_end+0xfffba84c>
    3f3c:	dc000917 	ldw	r16,36(sp)
    3f40:	003e9206 	br	398c <__alt_data_end+0xfffba5ac>
    3f44:	d9c00317 	ldw	r7,12(sp)
    3f48:	00800084 	movi	r2,2
    3f4c:	11fec50e 	bge	r2,r7,3a64 <__alt_data_end+0xfffba684>
    3f50:	d9000617 	ldw	r4,24(sp)
    3f54:	20013c1e 	bne	r4,zero,4448 <_dtoa_r+0x1524>
    3f58:	a80b883a 	mov	r5,r21
    3f5c:	000f883a 	mov	r7,zero
    3f60:	01800144 	movi	r6,5
    3f64:	e009883a 	mov	r4,fp
    3f68:	00066ac0 	call	66ac <__multadd>
    3f6c:	100b883a 	mov	r5,r2
    3f70:	8009883a 	mov	r4,r16
    3f74:	102b883a 	mov	r21,r2
    3f78:	0006f600 	call	6f60 <__mcmp>
    3f7c:	dc000915 	stw	r16,36(sp)
    3f80:	00bf410e 	bge	zero,r2,3c88 <__alt_data_end+0xfffba8a8>
    3f84:	d9c00717 	ldw	r7,28(sp)
    3f88:	00800c44 	movi	r2,49
    3f8c:	38800005 	stb	r2,0(r7)
    3f90:	d8800517 	ldw	r2,20(sp)
    3f94:	3dc00044 	addi	r23,r7,1
    3f98:	10800044 	addi	r2,r2,1
    3f9c:	d8800515 	stw	r2,20(sp)
    3fa0:	003f3d06 	br	3c98 <__alt_data_end+0xfffba8b8>
    3fa4:	d9800517 	ldw	r6,20(sp)
    3fa8:	d9c00717 	ldw	r7,28(sp)
    3fac:	00800c44 	movi	r2,49
    3fb0:	31800044 	addi	r6,r6,1
    3fb4:	d9800515 	stw	r6,20(sp)
    3fb8:	38800005 	stb	r2,0(r7)
    3fbc:	003edf06 	br	3b3c <__alt_data_end+0xfffba75c>
    3fc0:	d8000b15 	stw	zero,44(sp)
    3fc4:	003c9f06 	br	3244 <__alt_data_end+0xfffb9e64>
    3fc8:	903e7e1e 	bne	r18,zero,39c4 <__alt_data_end+0xfffba5e4>
    3fcc:	00800434 	movhi	r2,16
    3fd0:	10bfffc4 	addi	r2,r2,-1
    3fd4:	9884703a 	and	r2,r19,r2
    3fd8:	1000ea1e 	bne	r2,zero,4384 <_dtoa_r+0x1460>
    3fdc:	9cdffc2c 	andhi	r19,r19,32752
    3fe0:	9800e826 	beq	r19,zero,4384 <_dtoa_r+0x1460>
    3fe4:	d9c00817 	ldw	r7,32(sp)
    3fe8:	b5800044 	addi	r22,r22,1
    3fec:	04c00044 	movi	r19,1
    3ff0:	39c00044 	addi	r7,r7,1
    3ff4:	d9c00815 	stw	r7,32(sp)
    3ff8:	d8800d17 	ldw	r2,52(sp)
    3ffc:	103e721e 	bne	r2,zero,39c8 <__alt_data_end+0xfffba5e8>
    4000:	00800044 	movi	r2,1
    4004:	003e7906 	br	39ec <__alt_data_end+0xfffba60c>
    4008:	8009883a 	mov	r4,r16
    400c:	000d4dc0 	call	d4dc <__floatsidf>
    4010:	d9800f17 	ldw	r6,60(sp)
    4014:	d9c01017 	ldw	r7,64(sp)
    4018:	1009883a 	mov	r4,r2
    401c:	180b883a 	mov	r5,r3
    4020:	000c2f40 	call	c2f4 <__muldf3>
    4024:	000d883a 	mov	r6,zero
    4028:	01d00734 	movhi	r7,16412
    402c:	1009883a 	mov	r4,r2
    4030:	180b883a 	mov	r5,r3
    4034:	000ae200 	call	ae20 <__adddf3>
    4038:	047f3034 	movhi	r17,64704
    403c:	1021883a 	mov	r16,r2
    4040:	1c63883a 	add	r17,r3,r17
    4044:	d9000f17 	ldw	r4,60(sp)
    4048:	d9401017 	ldw	r5,64(sp)
    404c:	000d883a 	mov	r6,zero
    4050:	01d00534 	movhi	r7,16404
    4054:	000cb600 	call	cb60 <__subdf3>
    4058:	800d883a 	mov	r6,r16
    405c:	880f883a 	mov	r7,r17
    4060:	1009883a 	mov	r4,r2
    4064:	180b883a 	mov	r5,r3
    4068:	102b883a 	mov	r21,r2
    406c:	1829883a 	mov	r20,r3
    4070:	000c1240 	call	c124 <__gedf2>
    4074:	00806c16 	blt	zero,r2,4228 <_dtoa_r+0x1304>
    4078:	89e0003c 	xorhi	r7,r17,32768
    407c:	800d883a 	mov	r6,r16
    4080:	a809883a 	mov	r4,r21
    4084:	a00b883a 	mov	r5,r20
    4088:	000c2000 	call	c200 <__ledf2>
    408c:	103d7e0e 	bge	r2,zero,3688 <__alt_data_end+0xfffba2a8>
    4090:	002b883a 	mov	r21,zero
    4094:	0023883a 	mov	r17,zero
    4098:	003efb06 	br	3c88 <__alt_data_end+0xfffba8a8>
    409c:	d8800717 	ldw	r2,28(sp)
    40a0:	003bd006 	br	2fe4 <__alt_data_end+0xfffb9c04>
    40a4:	d9000a17 	ldw	r4,40(sp)
    40a8:	d9800d17 	ldw	r6,52(sp)
    40ac:	dd400a15 	stw	r21,40(sp)
    40b0:	a905c83a 	sub	r2,r21,r4
    40b4:	308d883a 	add	r6,r6,r2
    40b8:	d9800d15 	stw	r6,52(sp)
    40bc:	002b883a 	mov	r21,zero
    40c0:	003e0606 	br	38dc <__alt_data_end+0xfffba4fc>
    40c4:	9023883a 	mov	r17,r18
    40c8:	9829883a 	mov	r20,r19
    40cc:	04000084 	movi	r16,2
    40d0:	003c9206 	br	331c <__alt_data_end+0xfffb9f3c>
    40d4:	04000044 	movi	r16,1
    40d8:	dc000c15 	stw	r16,48(sp)
    40dc:	dc000615 	stw	r16,24(sp)
    40e0:	dc002215 	stw	r16,136(sp)
    40e4:	e0001115 	stw	zero,68(fp)
    40e8:	000b883a 	mov	r5,zero
    40ec:	003c6906 	br	3294 <__alt_data_end+0xfffb9eb4>
    40f0:	3021883a 	mov	r16,r6
    40f4:	003ffb06 	br	40e4 <__alt_data_end+0xfffbad04>
    40f8:	1000021e 	bne	r2,zero,4104 <_dtoa_r+0x11e0>
    40fc:	4200004c 	andi	r8,r8,1
    4100:	403e7d1e 	bne	r8,zero,3af8 <__alt_data_end+0xfffba718>
    4104:	01000c04 	movi	r4,48
    4108:	00000106 	br	4110 <_dtoa_r+0x11ec>
    410c:	102f883a 	mov	r23,r2
    4110:	b8bfffc4 	addi	r2,r23,-1
    4114:	10c00007 	ldb	r3,0(r2)
    4118:	193ffc26 	beq	r3,r4,410c <__alt_data_end+0xfffbad2c>
    411c:	003e8706 	br	3b3c <__alt_data_end+0xfffba75c>
    4120:	d8800517 	ldw	r2,20(sp)
    4124:	00a3c83a 	sub	r17,zero,r2
    4128:	8800a426 	beq	r17,zero,43bc <_dtoa_r+0x1498>
    412c:	888003cc 	andi	r2,r17,15
    4130:	100490fa 	slli	r2,r2,3
    4134:	00c00074 	movhi	r3,1
    4138:	18c1c904 	addi	r3,r3,1828
    413c:	1885883a 	add	r2,r3,r2
    4140:	11800017 	ldw	r6,0(r2)
    4144:	11c00117 	ldw	r7,4(r2)
    4148:	9009883a 	mov	r4,r18
    414c:	980b883a 	mov	r5,r19
    4150:	8823d13a 	srai	r17,r17,4
    4154:	000c2f40 	call	c2f4 <__muldf3>
    4158:	d8800f15 	stw	r2,60(sp)
    415c:	d8c01015 	stw	r3,64(sp)
    4160:	8800e826 	beq	r17,zero,4504 <_dtoa_r+0x15e0>
    4164:	05000074 	movhi	r20,1
    4168:	a501bf04 	addi	r20,r20,1788
    416c:	04000084 	movi	r16,2
    4170:	8980004c 	andi	r6,r17,1
    4174:	1009883a 	mov	r4,r2
    4178:	8823d07a 	srai	r17,r17,1
    417c:	180b883a 	mov	r5,r3
    4180:	30000426 	beq	r6,zero,4194 <_dtoa_r+0x1270>
    4184:	a1800017 	ldw	r6,0(r20)
    4188:	a1c00117 	ldw	r7,4(r20)
    418c:	84000044 	addi	r16,r16,1
    4190:	000c2f40 	call	c2f4 <__muldf3>
    4194:	a5000204 	addi	r20,r20,8
    4198:	883ff51e 	bne	r17,zero,4170 <__alt_data_end+0xfffbad90>
    419c:	d8800f15 	stw	r2,60(sp)
    41a0:	d8c01015 	stw	r3,64(sp)
    41a4:	003c7606 	br	3380 <__alt_data_end+0xfffb9fa0>
    41a8:	00c00c04 	movi	r3,48
    41ac:	10c00005 	stb	r3,0(r2)
    41b0:	d8c00517 	ldw	r3,20(sp)
    41b4:	bd3fffc3 	ldbu	r20,-1(r23)
    41b8:	18c00044 	addi	r3,r3,1
    41bc:	d8c00515 	stw	r3,20(sp)
    41c0:	003db906 	br	38a8 <__alt_data_end+0xfffba4c8>
    41c4:	89400117 	ldw	r5,4(r17)
    41c8:	e009883a 	mov	r4,fp
    41cc:	00065dc0 	call	65dc <_Balloc>
    41d0:	89800417 	ldw	r6,16(r17)
    41d4:	89400304 	addi	r5,r17,12
    41d8:	11000304 	addi	r4,r2,12
    41dc:	31800084 	addi	r6,r6,2
    41e0:	318d883a 	add	r6,r6,r6
    41e4:	318d883a 	add	r6,r6,r6
    41e8:	1027883a 	mov	r19,r2
    41ec:	00062100 	call	6210 <memcpy>
    41f0:	01800044 	movi	r6,1
    41f4:	980b883a 	mov	r5,r19
    41f8:	e009883a 	mov	r4,fp
    41fc:	0006e180 	call	6e18 <__lshift>
    4200:	1029883a 	mov	r20,r2
    4204:	003ecc06 	br	3d38 <__alt_data_end+0xfffba958>
    4208:	00800e44 	movi	r2,57
    420c:	90809026 	beq	r18,r2,4450 <_dtoa_r+0x152c>
    4210:	92000044 	addi	r8,r18,1
    4214:	003f1f06 	br	3e94 <__alt_data_end+0xfffbaab4>
    4218:	9011883a 	mov	r8,r18
    421c:	8825883a 	mov	r18,r17
    4220:	a023883a 	mov	r17,r20
    4224:	003e2906 	br	3acc <__alt_data_end+0xfffba6ec>
    4228:	002b883a 	mov	r21,zero
    422c:	0023883a 	mov	r17,zero
    4230:	003f5406 	br	3f84 <__alt_data_end+0xfffbaba4>
    4234:	61bfffc4 	addi	r6,r12,-1
    4238:	300490fa 	slli	r2,r6,3
    423c:	00c00074 	movhi	r3,1
    4240:	18c1c904 	addi	r3,r3,1828
    4244:	1885883a 	add	r2,r3,r2
    4248:	11000017 	ldw	r4,0(r2)
    424c:	11400117 	ldw	r5,4(r2)
    4250:	d8800717 	ldw	r2,28(sp)
    4254:	880f883a 	mov	r7,r17
    4258:	d9801215 	stw	r6,72(sp)
    425c:	800d883a 	mov	r6,r16
    4260:	db001615 	stw	r12,88(sp)
    4264:	15c00044 	addi	r23,r2,1
    4268:	000c2f40 	call	c2f4 <__muldf3>
    426c:	d9401017 	ldw	r5,64(sp)
    4270:	d9000f17 	ldw	r4,60(sp)
    4274:	d8c01515 	stw	r3,84(sp)
    4278:	d8801415 	stw	r2,80(sp)
    427c:	000d45c0 	call	d45c <__fixdfsi>
    4280:	1009883a 	mov	r4,r2
    4284:	1021883a 	mov	r16,r2
    4288:	000d4dc0 	call	d4dc <__floatsidf>
    428c:	d9000f17 	ldw	r4,60(sp)
    4290:	d9401017 	ldw	r5,64(sp)
    4294:	100d883a 	mov	r6,r2
    4298:	180f883a 	mov	r7,r3
    429c:	000cb600 	call	cb60 <__subdf3>
    42a0:	1829883a 	mov	r20,r3
    42a4:	d8c00717 	ldw	r3,28(sp)
    42a8:	84000c04 	addi	r16,r16,48
    42ac:	1023883a 	mov	r17,r2
    42b0:	1c000005 	stb	r16,0(r3)
    42b4:	db001617 	ldw	r12,88(sp)
    42b8:	00800044 	movi	r2,1
    42bc:	60802226 	beq	r12,r2,4348 <_dtoa_r+0x1424>
    42c0:	d9c00717 	ldw	r7,28(sp)
    42c4:	8805883a 	mov	r2,r17
    42c8:	b82b883a 	mov	r21,r23
    42cc:	3b19883a 	add	r12,r7,r12
    42d0:	6023883a 	mov	r17,r12
    42d4:	a007883a 	mov	r3,r20
    42d8:	dc800f15 	stw	r18,60(sp)
    42dc:	000d883a 	mov	r6,zero
    42e0:	01d00934 	movhi	r7,16420
    42e4:	1009883a 	mov	r4,r2
    42e8:	180b883a 	mov	r5,r3
    42ec:	000c2f40 	call	c2f4 <__muldf3>
    42f0:	180b883a 	mov	r5,r3
    42f4:	1009883a 	mov	r4,r2
    42f8:	1829883a 	mov	r20,r3
    42fc:	1025883a 	mov	r18,r2
    4300:	000d45c0 	call	d45c <__fixdfsi>
    4304:	1009883a 	mov	r4,r2
    4308:	1021883a 	mov	r16,r2
    430c:	000d4dc0 	call	d4dc <__floatsidf>
    4310:	100d883a 	mov	r6,r2
    4314:	180f883a 	mov	r7,r3
    4318:	9009883a 	mov	r4,r18
    431c:	a00b883a 	mov	r5,r20
    4320:	84000c04 	addi	r16,r16,48
    4324:	000cb600 	call	cb60 <__subdf3>
    4328:	ad400044 	addi	r21,r21,1
    432c:	ac3fffc5 	stb	r16,-1(r21)
    4330:	ac7fea1e 	bne	r21,r17,42dc <__alt_data_end+0xfffbaefc>
    4334:	1023883a 	mov	r17,r2
    4338:	d8801217 	ldw	r2,72(sp)
    433c:	dc800f17 	ldw	r18,60(sp)
    4340:	1829883a 	mov	r20,r3
    4344:	b8af883a 	add	r23,r23,r2
    4348:	d9001417 	ldw	r4,80(sp)
    434c:	d9401517 	ldw	r5,84(sp)
    4350:	000d883a 	mov	r6,zero
    4354:	01cff834 	movhi	r7,16352
    4358:	000ae200 	call	ae20 <__adddf3>
    435c:	880d883a 	mov	r6,r17
    4360:	a00f883a 	mov	r7,r20
    4364:	1009883a 	mov	r4,r2
    4368:	180b883a 	mov	r5,r3
    436c:	000c2000 	call	c200 <__ledf2>
    4370:	10003e0e 	bge	r2,zero,446c <_dtoa_r+0x1548>
    4374:	d9001317 	ldw	r4,76(sp)
    4378:	bd3fffc3 	ldbu	r20,-1(r23)
    437c:	d9000515 	stw	r4,20(sp)
    4380:	003d3b06 	br	3870 <__alt_data_end+0xfffba490>
    4384:	0027883a 	mov	r19,zero
    4388:	003f1b06 	br	3ff8 <__alt_data_end+0xfffbac18>
    438c:	d8800817 	ldw	r2,32(sp)
    4390:	11e9c83a 	sub	r20,r2,r7
    4394:	0005883a 	mov	r2,zero
    4398:	003d5406 	br	38ec <__alt_data_end+0xfffba50c>
    439c:	00800044 	movi	r2,1
    43a0:	003dc706 	br	3ac0 <__alt_data_end+0xfffba6e0>
    43a4:	d8c00217 	ldw	r3,8(sp)
    43a8:	00800d84 	movi	r2,54
    43ac:	dd400a17 	ldw	r21,40(sp)
    43b0:	10c5c83a 	sub	r2,r2,r3
    43b4:	dd000817 	ldw	r20,32(sp)
    43b8:	003d4c06 	br	38ec <__alt_data_end+0xfffba50c>
    43bc:	dc800f15 	stw	r18,60(sp)
    43c0:	dcc01015 	stw	r19,64(sp)
    43c4:	04000084 	movi	r16,2
    43c8:	003bed06 	br	3380 <__alt_data_end+0xfffb9fa0>
    43cc:	d9000617 	ldw	r4,24(sp)
    43d0:	203f0d26 	beq	r4,zero,4008 <__alt_data_end+0xfffbac28>
    43d4:	d9800c17 	ldw	r6,48(sp)
    43d8:	01bcab0e 	bge	zero,r6,3688 <__alt_data_end+0xfffba2a8>
    43dc:	d9401017 	ldw	r5,64(sp)
    43e0:	d9000f17 	ldw	r4,60(sp)
    43e4:	000d883a 	mov	r6,zero
    43e8:	01d00934 	movhi	r7,16420
    43ec:	000c2f40 	call	c2f4 <__muldf3>
    43f0:	81000044 	addi	r4,r16,1
    43f4:	d8800f15 	stw	r2,60(sp)
    43f8:	d8c01015 	stw	r3,64(sp)
    43fc:	000d4dc0 	call	d4dc <__floatsidf>
    4400:	d9800f17 	ldw	r6,60(sp)
    4404:	d9c01017 	ldw	r7,64(sp)
    4408:	1009883a 	mov	r4,r2
    440c:	180b883a 	mov	r5,r3
    4410:	000c2f40 	call	c2f4 <__muldf3>
    4414:	01d00734 	movhi	r7,16412
    4418:	000d883a 	mov	r6,zero
    441c:	1009883a 	mov	r4,r2
    4420:	180b883a 	mov	r5,r3
    4424:	000ae200 	call	ae20 <__adddf3>
    4428:	d9c00517 	ldw	r7,20(sp)
    442c:	047f3034 	movhi	r17,64704
    4430:	1021883a 	mov	r16,r2
    4434:	39ffffc4 	addi	r7,r7,-1
    4438:	d9c01315 	stw	r7,76(sp)
    443c:	1c63883a 	add	r17,r3,r17
    4440:	db000c17 	ldw	r12,48(sp)
    4444:	003bea06 	br	33f0 <__alt_data_end+0xfffba010>
    4448:	dc000915 	stw	r16,36(sp)
    444c:	003e0e06 	br	3c88 <__alt_data_end+0xfffba8a8>
    4450:	01000e44 	movi	r4,57
    4454:	8825883a 	mov	r18,r17
    4458:	9dc00044 	addi	r23,r19,1
    445c:	99000005 	stb	r4,0(r19)
    4460:	a023883a 	mov	r17,r20
    4464:	dc000915 	stw	r16,36(sp)
    4468:	003da406 	br	3afc <__alt_data_end+0xfffba71c>
    446c:	d9801417 	ldw	r6,80(sp)
    4470:	d9c01517 	ldw	r7,84(sp)
    4474:	0009883a 	mov	r4,zero
    4478:	014ff834 	movhi	r5,16352
    447c:	000cb600 	call	cb60 <__subdf3>
    4480:	880d883a 	mov	r6,r17
    4484:	a00f883a 	mov	r7,r20
    4488:	1009883a 	mov	r4,r2
    448c:	180b883a 	mov	r5,r3
    4490:	000c1240 	call	c124 <__gedf2>
    4494:	00bc7c0e 	bge	zero,r2,3688 <__alt_data_end+0xfffba2a8>
    4498:	01000c04 	movi	r4,48
    449c:	00000106 	br	44a4 <_dtoa_r+0x1580>
    44a0:	102f883a 	mov	r23,r2
    44a4:	b8bfffc4 	addi	r2,r23,-1
    44a8:	10c00007 	ldb	r3,0(r2)
    44ac:	193ffc26 	beq	r3,r4,44a0 <__alt_data_end+0xfffbb0c0>
    44b0:	d9801317 	ldw	r6,76(sp)
    44b4:	d9800515 	stw	r6,20(sp)
    44b8:	003c4406 	br	35cc <__alt_data_end+0xfffba1ec>
    44bc:	d9801317 	ldw	r6,76(sp)
    44c0:	d9800515 	stw	r6,20(sp)
    44c4:	003cea06 	br	3870 <__alt_data_end+0xfffba490>
    44c8:	dd800f17 	ldw	r22,60(sp)
    44cc:	dcc01017 	ldw	r19,64(sp)
    44d0:	dc801217 	ldw	r18,72(sp)
    44d4:	003c6c06 	br	3688 <__alt_data_end+0xfffba2a8>
    44d8:	903e031e 	bne	r18,zero,3ce8 <__alt_data_end+0xfffba908>
    44dc:	003ebb06 	br	3fcc <__alt_data_end+0xfffbabec>
    44e0:	103e6c1e 	bne	r2,zero,3e94 <__alt_data_end+0xfffbaab4>
    44e4:	4080004c 	andi	r2,r8,1
    44e8:	103e6a26 	beq	r2,zero,3e94 <__alt_data_end+0xfffbaab4>
    44ec:	003e6606 	br	3e88 <__alt_data_end+0xfffbaaa8>
    44f0:	d8c00317 	ldw	r3,12(sp)
    44f4:	00800084 	movi	r2,2
    44f8:	10c02916 	blt	r2,r3,45a0 <_dtoa_r+0x167c>
    44fc:	d9000c17 	ldw	r4,48(sp)
    4500:	003e8806 	br	3f24 <__alt_data_end+0xfffbab44>
    4504:	04000084 	movi	r16,2
    4508:	003b9d06 	br	3380 <__alt_data_end+0xfffb9fa0>
    450c:	d9001317 	ldw	r4,76(sp)
    4510:	d9000515 	stw	r4,20(sp)
    4514:	003cd606 	br	3870 <__alt_data_end+0xfffba490>
    4518:	d8801317 	ldw	r2,76(sp)
    451c:	d8800515 	stw	r2,20(sp)
    4520:	003c2a06 	br	35cc <__alt_data_end+0xfffba1ec>
    4524:	d9800317 	ldw	r6,12(sp)
    4528:	00800084 	movi	r2,2
    452c:	11801516 	blt	r2,r6,4584 <_dtoa_r+0x1660>
    4530:	d9c00c17 	ldw	r7,48(sp)
    4534:	d9c00615 	stw	r7,24(sp)
    4538:	003df706 	br	3d18 <__alt_data_end+0xfffba938>
    453c:	193d3926 	beq	r3,r4,3a24 <__alt_data_end+0xfffba644>
    4540:	00c00f04 	movi	r3,60
    4544:	1885c83a 	sub	r2,r3,r2
    4548:	003ddf06 	br	3cc8 <__alt_data_end+0xfffba8e8>
    454c:	e009883a 	mov	r4,fp
    4550:	e0001115 	stw	zero,68(fp)
    4554:	000b883a 	mov	r5,zero
    4558:	00065dc0 	call	65dc <_Balloc>
    455c:	d8800715 	stw	r2,28(sp)
    4560:	d8c00717 	ldw	r3,28(sp)
    4564:	00bfffc4 	movi	r2,-1
    4568:	01000044 	movi	r4,1
    456c:	d8800c15 	stw	r2,48(sp)
    4570:	e0c01015 	stw	r3,64(fp)
    4574:	d9000b15 	stw	r4,44(sp)
    4578:	d8800615 	stw	r2,24(sp)
    457c:	d8002215 	stw	zero,136(sp)
    4580:	003c4106 	br	3688 <__alt_data_end+0xfffba2a8>
    4584:	d8c00c17 	ldw	r3,48(sp)
    4588:	d8c00615 	stw	r3,24(sp)
    458c:	003e7006 	br	3f50 <__alt_data_end+0xfffbab70>
    4590:	04400044 	movi	r17,1
    4594:	003b2006 	br	3218 <__alt_data_end+0xfffb9e38>
    4598:	000b883a 	mov	r5,zero
    459c:	003b3d06 	br	3294 <__alt_data_end+0xfffb9eb4>
    45a0:	d8800c17 	ldw	r2,48(sp)
    45a4:	d8800615 	stw	r2,24(sp)
    45a8:	003e6906 	br	3f50 <__alt_data_end+0xfffbab70>

000045ac <__sflush_r>:
    45ac:	2880030b 	ldhu	r2,12(r5)
    45b0:	defffb04 	addi	sp,sp,-20
    45b4:	dcc00315 	stw	r19,12(sp)
    45b8:	dc400115 	stw	r17,4(sp)
    45bc:	dfc00415 	stw	ra,16(sp)
    45c0:	dc800215 	stw	r18,8(sp)
    45c4:	dc000015 	stw	r16,0(sp)
    45c8:	10c0020c 	andi	r3,r2,8
    45cc:	2823883a 	mov	r17,r5
    45d0:	2027883a 	mov	r19,r4
    45d4:	1800311e 	bne	r3,zero,469c <__sflush_r+0xf0>
    45d8:	28c00117 	ldw	r3,4(r5)
    45dc:	10820014 	ori	r2,r2,2048
    45e0:	2880030d 	sth	r2,12(r5)
    45e4:	00c04b0e 	bge	zero,r3,4714 <__sflush_r+0x168>
    45e8:	8a000a17 	ldw	r8,40(r17)
    45ec:	40002326 	beq	r8,zero,467c <__sflush_r+0xd0>
    45f0:	9c000017 	ldw	r16,0(r19)
    45f4:	10c4000c 	andi	r3,r2,4096
    45f8:	98000015 	stw	zero,0(r19)
    45fc:	18004826 	beq	r3,zero,4720 <__sflush_r+0x174>
    4600:	89801417 	ldw	r6,80(r17)
    4604:	10c0010c 	andi	r3,r2,4
    4608:	18000626 	beq	r3,zero,4624 <__sflush_r+0x78>
    460c:	88c00117 	ldw	r3,4(r17)
    4610:	88800c17 	ldw	r2,48(r17)
    4614:	30cdc83a 	sub	r6,r6,r3
    4618:	10000226 	beq	r2,zero,4624 <__sflush_r+0x78>
    461c:	88800f17 	ldw	r2,60(r17)
    4620:	308dc83a 	sub	r6,r6,r2
    4624:	89400717 	ldw	r5,28(r17)
    4628:	000f883a 	mov	r7,zero
    462c:	9809883a 	mov	r4,r19
    4630:	403ee83a 	callr	r8
    4634:	00ffffc4 	movi	r3,-1
    4638:	10c04426 	beq	r2,r3,474c <__sflush_r+0x1a0>
    463c:	88c0030b 	ldhu	r3,12(r17)
    4640:	89000417 	ldw	r4,16(r17)
    4644:	88000115 	stw	zero,4(r17)
    4648:	197dffcc 	andi	r5,r3,63487
    464c:	8940030d 	sth	r5,12(r17)
    4650:	89000015 	stw	r4,0(r17)
    4654:	18c4000c 	andi	r3,r3,4096
    4658:	18002c1e 	bne	r3,zero,470c <__sflush_r+0x160>
    465c:	89400c17 	ldw	r5,48(r17)
    4660:	9c000015 	stw	r16,0(r19)
    4664:	28000526 	beq	r5,zero,467c <__sflush_r+0xd0>
    4668:	88801004 	addi	r2,r17,64
    466c:	28800226 	beq	r5,r2,4678 <__sflush_r+0xcc>
    4670:	9809883a 	mov	r4,r19
    4674:	0004d280 	call	4d28 <_free_r>
    4678:	88000c15 	stw	zero,48(r17)
    467c:	0005883a 	mov	r2,zero
    4680:	dfc00417 	ldw	ra,16(sp)
    4684:	dcc00317 	ldw	r19,12(sp)
    4688:	dc800217 	ldw	r18,8(sp)
    468c:	dc400117 	ldw	r17,4(sp)
    4690:	dc000017 	ldw	r16,0(sp)
    4694:	dec00504 	addi	sp,sp,20
    4698:	f800283a 	ret
    469c:	2c800417 	ldw	r18,16(r5)
    46a0:	903ff626 	beq	r18,zero,467c <__alt_data_end+0xfffbb29c>
    46a4:	2c000017 	ldw	r16,0(r5)
    46a8:	108000cc 	andi	r2,r2,3
    46ac:	2c800015 	stw	r18,0(r5)
    46b0:	84a1c83a 	sub	r16,r16,r18
    46b4:	1000131e 	bne	r2,zero,4704 <__sflush_r+0x158>
    46b8:	28800517 	ldw	r2,20(r5)
    46bc:	88800215 	stw	r2,8(r17)
    46c0:	04000316 	blt	zero,r16,46d0 <__sflush_r+0x124>
    46c4:	003fed06 	br	467c <__alt_data_end+0xfffbb29c>
    46c8:	90a5883a 	add	r18,r18,r2
    46cc:	043feb0e 	bge	zero,r16,467c <__alt_data_end+0xfffbb29c>
    46d0:	88800917 	ldw	r2,36(r17)
    46d4:	89400717 	ldw	r5,28(r17)
    46d8:	800f883a 	mov	r7,r16
    46dc:	900d883a 	mov	r6,r18
    46e0:	9809883a 	mov	r4,r19
    46e4:	103ee83a 	callr	r2
    46e8:	80a1c83a 	sub	r16,r16,r2
    46ec:	00bff616 	blt	zero,r2,46c8 <__alt_data_end+0xfffbb2e8>
    46f0:	88c0030b 	ldhu	r3,12(r17)
    46f4:	00bfffc4 	movi	r2,-1
    46f8:	18c01014 	ori	r3,r3,64
    46fc:	88c0030d 	sth	r3,12(r17)
    4700:	003fdf06 	br	4680 <__alt_data_end+0xfffbb2a0>
    4704:	0005883a 	mov	r2,zero
    4708:	003fec06 	br	46bc <__alt_data_end+0xfffbb2dc>
    470c:	88801415 	stw	r2,80(r17)
    4710:	003fd206 	br	465c <__alt_data_end+0xfffbb27c>
    4714:	28c00f17 	ldw	r3,60(r5)
    4718:	00ffb316 	blt	zero,r3,45e8 <__alt_data_end+0xfffbb208>
    471c:	003fd706 	br	467c <__alt_data_end+0xfffbb29c>
    4720:	89400717 	ldw	r5,28(r17)
    4724:	000d883a 	mov	r6,zero
    4728:	01c00044 	movi	r7,1
    472c:	9809883a 	mov	r4,r19
    4730:	403ee83a 	callr	r8
    4734:	100d883a 	mov	r6,r2
    4738:	00bfffc4 	movi	r2,-1
    473c:	30801426 	beq	r6,r2,4790 <__sflush_r+0x1e4>
    4740:	8880030b 	ldhu	r2,12(r17)
    4744:	8a000a17 	ldw	r8,40(r17)
    4748:	003fae06 	br	4604 <__alt_data_end+0xfffbb224>
    474c:	98c00017 	ldw	r3,0(r19)
    4750:	183fba26 	beq	r3,zero,463c <__alt_data_end+0xfffbb25c>
    4754:	01000744 	movi	r4,29
    4758:	19000626 	beq	r3,r4,4774 <__sflush_r+0x1c8>
    475c:	01000584 	movi	r4,22
    4760:	19000426 	beq	r3,r4,4774 <__sflush_r+0x1c8>
    4764:	88c0030b 	ldhu	r3,12(r17)
    4768:	18c01014 	ori	r3,r3,64
    476c:	88c0030d 	sth	r3,12(r17)
    4770:	003fc306 	br	4680 <__alt_data_end+0xfffbb2a0>
    4774:	8880030b 	ldhu	r2,12(r17)
    4778:	88c00417 	ldw	r3,16(r17)
    477c:	88000115 	stw	zero,4(r17)
    4780:	10bdffcc 	andi	r2,r2,63487
    4784:	8880030d 	sth	r2,12(r17)
    4788:	88c00015 	stw	r3,0(r17)
    478c:	003fb306 	br	465c <__alt_data_end+0xfffbb27c>
    4790:	98800017 	ldw	r2,0(r19)
    4794:	103fea26 	beq	r2,zero,4740 <__alt_data_end+0xfffbb360>
    4798:	00c00744 	movi	r3,29
    479c:	10c00226 	beq	r2,r3,47a8 <__sflush_r+0x1fc>
    47a0:	00c00584 	movi	r3,22
    47a4:	10c0031e 	bne	r2,r3,47b4 <__sflush_r+0x208>
    47a8:	9c000015 	stw	r16,0(r19)
    47ac:	0005883a 	mov	r2,zero
    47b0:	003fb306 	br	4680 <__alt_data_end+0xfffbb2a0>
    47b4:	88c0030b 	ldhu	r3,12(r17)
    47b8:	3005883a 	mov	r2,r6
    47bc:	18c01014 	ori	r3,r3,64
    47c0:	88c0030d 	sth	r3,12(r17)
    47c4:	003fae06 	br	4680 <__alt_data_end+0xfffbb2a0>

000047c8 <_fflush_r>:
    47c8:	defffd04 	addi	sp,sp,-12
    47cc:	dc000115 	stw	r16,4(sp)
    47d0:	dfc00215 	stw	ra,8(sp)
    47d4:	2021883a 	mov	r16,r4
    47d8:	20000226 	beq	r4,zero,47e4 <_fflush_r+0x1c>
    47dc:	20800e17 	ldw	r2,56(r4)
    47e0:	10000c26 	beq	r2,zero,4814 <_fflush_r+0x4c>
    47e4:	2880030f 	ldh	r2,12(r5)
    47e8:	1000051e 	bne	r2,zero,4800 <_fflush_r+0x38>
    47ec:	0005883a 	mov	r2,zero
    47f0:	dfc00217 	ldw	ra,8(sp)
    47f4:	dc000117 	ldw	r16,4(sp)
    47f8:	dec00304 	addi	sp,sp,12
    47fc:	f800283a 	ret
    4800:	8009883a 	mov	r4,r16
    4804:	dfc00217 	ldw	ra,8(sp)
    4808:	dc000117 	ldw	r16,4(sp)
    480c:	dec00304 	addi	sp,sp,12
    4810:	00045ac1 	jmpi	45ac <__sflush_r>
    4814:	d9400015 	stw	r5,0(sp)
    4818:	0004bb40 	call	4bb4 <__sinit>
    481c:	d9400017 	ldw	r5,0(sp)
    4820:	003ff006 	br	47e4 <__alt_data_end+0xfffbb404>

00004824 <fflush>:
    4824:	20000526 	beq	r4,zero,483c <fflush+0x18>
    4828:	00800074 	movhi	r2,1
    482c:	1088fc04 	addi	r2,r2,9200
    4830:	200b883a 	mov	r5,r4
    4834:	11000017 	ldw	r4,0(r2)
    4838:	00047c81 	jmpi	47c8 <_fflush_r>
    483c:	00800074 	movhi	r2,1
    4840:	1088fb04 	addi	r2,r2,9196
    4844:	11000017 	ldw	r4,0(r2)
    4848:	01400034 	movhi	r5,0
    484c:	2951f204 	addi	r5,r5,18376
    4850:	00055c41 	jmpi	55c4 <_fwalk_reent>

00004854 <__fp_unlock>:
    4854:	0005883a 	mov	r2,zero
    4858:	f800283a 	ret

0000485c <_cleanup_r>:
    485c:	01400074 	movhi	r5,1
    4860:	29668804 	addi	r5,r5,-26080
    4864:	00055c41 	jmpi	55c4 <_fwalk_reent>

00004868 <__sinit.part.1>:
    4868:	defff704 	addi	sp,sp,-36
    486c:	00c00034 	movhi	r3,0
    4870:	dfc00815 	stw	ra,32(sp)
    4874:	ddc00715 	stw	r23,28(sp)
    4878:	dd800615 	stw	r22,24(sp)
    487c:	dd400515 	stw	r21,20(sp)
    4880:	dd000415 	stw	r20,16(sp)
    4884:	dcc00315 	stw	r19,12(sp)
    4888:	dc800215 	stw	r18,8(sp)
    488c:	dc400115 	stw	r17,4(sp)
    4890:	dc000015 	stw	r16,0(sp)
    4894:	18d21704 	addi	r3,r3,18524
    4898:	24000117 	ldw	r16,4(r4)
    489c:	20c00f15 	stw	r3,60(r4)
    48a0:	2080bb04 	addi	r2,r4,748
    48a4:	00c000c4 	movi	r3,3
    48a8:	20c0b915 	stw	r3,740(r4)
    48ac:	2080ba15 	stw	r2,744(r4)
    48b0:	2000b815 	stw	zero,736(r4)
    48b4:	05c00204 	movi	r23,8
    48b8:	00800104 	movi	r2,4
    48bc:	2025883a 	mov	r18,r4
    48c0:	b80d883a 	mov	r6,r23
    48c4:	81001704 	addi	r4,r16,92
    48c8:	000b883a 	mov	r5,zero
    48cc:	80000015 	stw	zero,0(r16)
    48d0:	80000115 	stw	zero,4(r16)
    48d4:	80000215 	stw	zero,8(r16)
    48d8:	8080030d 	sth	r2,12(r16)
    48dc:	80001915 	stw	zero,100(r16)
    48e0:	8000038d 	sth	zero,14(r16)
    48e4:	80000415 	stw	zero,16(r16)
    48e8:	80000515 	stw	zero,20(r16)
    48ec:	80000615 	stw	zero,24(r16)
    48f0:	00064b40 	call	64b4 <memset>
    48f4:	05800034 	movhi	r22,0
    48f8:	94400217 	ldw	r17,8(r18)
    48fc:	05400034 	movhi	r21,0
    4900:	05000034 	movhi	r20,0
    4904:	04c00034 	movhi	r19,0
    4908:	b59f8a04 	addi	r22,r22,32296
    490c:	ad5fa104 	addi	r21,r21,32388
    4910:	a51fc004 	addi	r20,r20,32512
    4914:	9cdfd704 	addi	r19,r19,32604
    4918:	85800815 	stw	r22,32(r16)
    491c:	85400915 	stw	r21,36(r16)
    4920:	85000a15 	stw	r20,40(r16)
    4924:	84c00b15 	stw	r19,44(r16)
    4928:	84000715 	stw	r16,28(r16)
    492c:	00800284 	movi	r2,10
    4930:	8880030d 	sth	r2,12(r17)
    4934:	00800044 	movi	r2,1
    4938:	b80d883a 	mov	r6,r23
    493c:	89001704 	addi	r4,r17,92
    4940:	000b883a 	mov	r5,zero
    4944:	88000015 	stw	zero,0(r17)
    4948:	88000115 	stw	zero,4(r17)
    494c:	88000215 	stw	zero,8(r17)
    4950:	88001915 	stw	zero,100(r17)
    4954:	8880038d 	sth	r2,14(r17)
    4958:	88000415 	stw	zero,16(r17)
    495c:	88000515 	stw	zero,20(r17)
    4960:	88000615 	stw	zero,24(r17)
    4964:	00064b40 	call	64b4 <memset>
    4968:	94000317 	ldw	r16,12(r18)
    496c:	00800484 	movi	r2,18
    4970:	8c400715 	stw	r17,28(r17)
    4974:	8d800815 	stw	r22,32(r17)
    4978:	8d400915 	stw	r21,36(r17)
    497c:	8d000a15 	stw	r20,40(r17)
    4980:	8cc00b15 	stw	r19,44(r17)
    4984:	8080030d 	sth	r2,12(r16)
    4988:	00800084 	movi	r2,2
    498c:	80000015 	stw	zero,0(r16)
    4990:	80000115 	stw	zero,4(r16)
    4994:	80000215 	stw	zero,8(r16)
    4998:	80001915 	stw	zero,100(r16)
    499c:	8080038d 	sth	r2,14(r16)
    49a0:	80000415 	stw	zero,16(r16)
    49a4:	80000515 	stw	zero,20(r16)
    49a8:	80000615 	stw	zero,24(r16)
    49ac:	b80d883a 	mov	r6,r23
    49b0:	000b883a 	mov	r5,zero
    49b4:	81001704 	addi	r4,r16,92
    49b8:	00064b40 	call	64b4 <memset>
    49bc:	00800044 	movi	r2,1
    49c0:	84000715 	stw	r16,28(r16)
    49c4:	85800815 	stw	r22,32(r16)
    49c8:	85400915 	stw	r21,36(r16)
    49cc:	85000a15 	stw	r20,40(r16)
    49d0:	84c00b15 	stw	r19,44(r16)
    49d4:	90800e15 	stw	r2,56(r18)
    49d8:	dfc00817 	ldw	ra,32(sp)
    49dc:	ddc00717 	ldw	r23,28(sp)
    49e0:	dd800617 	ldw	r22,24(sp)
    49e4:	dd400517 	ldw	r21,20(sp)
    49e8:	dd000417 	ldw	r20,16(sp)
    49ec:	dcc00317 	ldw	r19,12(sp)
    49f0:	dc800217 	ldw	r18,8(sp)
    49f4:	dc400117 	ldw	r17,4(sp)
    49f8:	dc000017 	ldw	r16,0(sp)
    49fc:	dec00904 	addi	sp,sp,36
    4a00:	f800283a 	ret

00004a04 <__fp_lock>:
    4a04:	0005883a 	mov	r2,zero
    4a08:	f800283a 	ret

00004a0c <__sfmoreglue>:
    4a0c:	defffc04 	addi	sp,sp,-16
    4a10:	dc800215 	stw	r18,8(sp)
    4a14:	2825883a 	mov	r18,r5
    4a18:	dc000015 	stw	r16,0(sp)
    4a1c:	01401a04 	movi	r5,104
    4a20:	2021883a 	mov	r16,r4
    4a24:	913fffc4 	addi	r4,r18,-1
    4a28:	dfc00315 	stw	ra,12(sp)
    4a2c:	dc400115 	stw	r17,4(sp)
    4a30:	000adf80 	call	adf8 <__mulsi3>
    4a34:	8009883a 	mov	r4,r16
    4a38:	11401d04 	addi	r5,r2,116
    4a3c:	1023883a 	mov	r17,r2
    4a40:	00059200 	call	5920 <_malloc_r>
    4a44:	1021883a 	mov	r16,r2
    4a48:	10000726 	beq	r2,zero,4a68 <__sfmoreglue+0x5c>
    4a4c:	11000304 	addi	r4,r2,12
    4a50:	10000015 	stw	zero,0(r2)
    4a54:	14800115 	stw	r18,4(r2)
    4a58:	11000215 	stw	r4,8(r2)
    4a5c:	89801a04 	addi	r6,r17,104
    4a60:	000b883a 	mov	r5,zero
    4a64:	00064b40 	call	64b4 <memset>
    4a68:	8005883a 	mov	r2,r16
    4a6c:	dfc00317 	ldw	ra,12(sp)
    4a70:	dc800217 	ldw	r18,8(sp)
    4a74:	dc400117 	ldw	r17,4(sp)
    4a78:	dc000017 	ldw	r16,0(sp)
    4a7c:	dec00404 	addi	sp,sp,16
    4a80:	f800283a 	ret

00004a84 <__sfp>:
    4a84:	defffb04 	addi	sp,sp,-20
    4a88:	dc000015 	stw	r16,0(sp)
    4a8c:	04000074 	movhi	r16,1
    4a90:	8408fb04 	addi	r16,r16,9196
    4a94:	dcc00315 	stw	r19,12(sp)
    4a98:	2027883a 	mov	r19,r4
    4a9c:	81000017 	ldw	r4,0(r16)
    4aa0:	dfc00415 	stw	ra,16(sp)
    4aa4:	dc800215 	stw	r18,8(sp)
    4aa8:	20800e17 	ldw	r2,56(r4)
    4aac:	dc400115 	stw	r17,4(sp)
    4ab0:	1000021e 	bne	r2,zero,4abc <__sfp+0x38>
    4ab4:	00048680 	call	4868 <__sinit.part.1>
    4ab8:	81000017 	ldw	r4,0(r16)
    4abc:	2480b804 	addi	r18,r4,736
    4ac0:	047fffc4 	movi	r17,-1
    4ac4:	91000117 	ldw	r4,4(r18)
    4ac8:	94000217 	ldw	r16,8(r18)
    4acc:	213fffc4 	addi	r4,r4,-1
    4ad0:	20000a16 	blt	r4,zero,4afc <__sfp+0x78>
    4ad4:	8080030f 	ldh	r2,12(r16)
    4ad8:	10000c26 	beq	r2,zero,4b0c <__sfp+0x88>
    4adc:	80c01d04 	addi	r3,r16,116
    4ae0:	00000206 	br	4aec <__sfp+0x68>
    4ae4:	18bfe60f 	ldh	r2,-104(r3)
    4ae8:	10000826 	beq	r2,zero,4b0c <__sfp+0x88>
    4aec:	213fffc4 	addi	r4,r4,-1
    4af0:	1c3ffd04 	addi	r16,r3,-12
    4af4:	18c01a04 	addi	r3,r3,104
    4af8:	247ffa1e 	bne	r4,r17,4ae4 <__alt_data_end+0xfffbb704>
    4afc:	90800017 	ldw	r2,0(r18)
    4b00:	10001d26 	beq	r2,zero,4b78 <__sfp+0xf4>
    4b04:	1025883a 	mov	r18,r2
    4b08:	003fee06 	br	4ac4 <__alt_data_end+0xfffbb6e4>
    4b0c:	00bfffc4 	movi	r2,-1
    4b10:	8080038d 	sth	r2,14(r16)
    4b14:	00800044 	movi	r2,1
    4b18:	8080030d 	sth	r2,12(r16)
    4b1c:	80001915 	stw	zero,100(r16)
    4b20:	80000015 	stw	zero,0(r16)
    4b24:	80000215 	stw	zero,8(r16)
    4b28:	80000115 	stw	zero,4(r16)
    4b2c:	80000415 	stw	zero,16(r16)
    4b30:	80000515 	stw	zero,20(r16)
    4b34:	80000615 	stw	zero,24(r16)
    4b38:	01800204 	movi	r6,8
    4b3c:	000b883a 	mov	r5,zero
    4b40:	81001704 	addi	r4,r16,92
    4b44:	00064b40 	call	64b4 <memset>
    4b48:	8005883a 	mov	r2,r16
    4b4c:	80000c15 	stw	zero,48(r16)
    4b50:	80000d15 	stw	zero,52(r16)
    4b54:	80001115 	stw	zero,68(r16)
    4b58:	80001215 	stw	zero,72(r16)
    4b5c:	dfc00417 	ldw	ra,16(sp)
    4b60:	dcc00317 	ldw	r19,12(sp)
    4b64:	dc800217 	ldw	r18,8(sp)
    4b68:	dc400117 	ldw	r17,4(sp)
    4b6c:	dc000017 	ldw	r16,0(sp)
    4b70:	dec00504 	addi	sp,sp,20
    4b74:	f800283a 	ret
    4b78:	01400104 	movi	r5,4
    4b7c:	9809883a 	mov	r4,r19
    4b80:	0004a0c0 	call	4a0c <__sfmoreglue>
    4b84:	90800015 	stw	r2,0(r18)
    4b88:	103fde1e 	bne	r2,zero,4b04 <__alt_data_end+0xfffbb724>
    4b8c:	00800304 	movi	r2,12
    4b90:	98800015 	stw	r2,0(r19)
    4b94:	0005883a 	mov	r2,zero
    4b98:	003ff006 	br	4b5c <__alt_data_end+0xfffbb77c>

00004b9c <_cleanup>:
    4b9c:	00800074 	movhi	r2,1
    4ba0:	1088fb04 	addi	r2,r2,9196
    4ba4:	11000017 	ldw	r4,0(r2)
    4ba8:	01400074 	movhi	r5,1
    4bac:	29668804 	addi	r5,r5,-26080
    4bb0:	00055c41 	jmpi	55c4 <_fwalk_reent>

00004bb4 <__sinit>:
    4bb4:	20800e17 	ldw	r2,56(r4)
    4bb8:	10000126 	beq	r2,zero,4bc0 <__sinit+0xc>
    4bbc:	f800283a 	ret
    4bc0:	00048681 	jmpi	4868 <__sinit.part.1>

00004bc4 <__sfp_lock_acquire>:
    4bc4:	f800283a 	ret

00004bc8 <__sfp_lock_release>:
    4bc8:	f800283a 	ret

00004bcc <__sinit_lock_acquire>:
    4bcc:	f800283a 	ret

00004bd0 <__sinit_lock_release>:
    4bd0:	f800283a 	ret

00004bd4 <__fp_lock_all>:
    4bd4:	00800074 	movhi	r2,1
    4bd8:	1088fc04 	addi	r2,r2,9200
    4bdc:	11000017 	ldw	r4,0(r2)
    4be0:	01400034 	movhi	r5,0
    4be4:	29528104 	addi	r5,r5,18948
    4be8:	00055001 	jmpi	5500 <_fwalk>

00004bec <__fp_unlock_all>:
    4bec:	00800074 	movhi	r2,1
    4bf0:	1088fc04 	addi	r2,r2,9200
    4bf4:	11000017 	ldw	r4,0(r2)
    4bf8:	01400034 	movhi	r5,0
    4bfc:	29521504 	addi	r5,r5,18516
    4c00:	00055001 	jmpi	5500 <_fwalk>

00004c04 <_malloc_trim_r>:
    4c04:	defffb04 	addi	sp,sp,-20
    4c08:	dcc00315 	stw	r19,12(sp)
    4c0c:	04c00074 	movhi	r19,1
    4c10:	dc800215 	stw	r18,8(sp)
    4c14:	dc400115 	stw	r17,4(sp)
    4c18:	dc000015 	stw	r16,0(sp)
    4c1c:	dfc00415 	stw	ra,16(sp)
    4c20:	2821883a 	mov	r16,r5
    4c24:	9cc37704 	addi	r19,r19,3548
    4c28:	2025883a 	mov	r18,r4
    4c2c:	000dcb00 	call	dcb0 <__malloc_lock>
    4c30:	98800217 	ldw	r2,8(r19)
    4c34:	14400117 	ldw	r17,4(r2)
    4c38:	00bfff04 	movi	r2,-4
    4c3c:	88a2703a 	and	r17,r17,r2
    4c40:	8c21c83a 	sub	r16,r17,r16
    4c44:	8403fbc4 	addi	r16,r16,4079
    4c48:	8020d33a 	srli	r16,r16,12
    4c4c:	0083ffc4 	movi	r2,4095
    4c50:	843fffc4 	addi	r16,r16,-1
    4c54:	8020933a 	slli	r16,r16,12
    4c58:	1400060e 	bge	r2,r16,4c74 <_malloc_trim_r+0x70>
    4c5c:	000b883a 	mov	r5,zero
    4c60:	9009883a 	mov	r4,r18
    4c64:	0007dd40 	call	7dd4 <_sbrk_r>
    4c68:	98c00217 	ldw	r3,8(r19)
    4c6c:	1c47883a 	add	r3,r3,r17
    4c70:	10c00a26 	beq	r2,r3,4c9c <_malloc_trim_r+0x98>
    4c74:	9009883a 	mov	r4,r18
    4c78:	000dcd40 	call	dcd4 <__malloc_unlock>
    4c7c:	0005883a 	mov	r2,zero
    4c80:	dfc00417 	ldw	ra,16(sp)
    4c84:	dcc00317 	ldw	r19,12(sp)
    4c88:	dc800217 	ldw	r18,8(sp)
    4c8c:	dc400117 	ldw	r17,4(sp)
    4c90:	dc000017 	ldw	r16,0(sp)
    4c94:	dec00504 	addi	sp,sp,20
    4c98:	f800283a 	ret
    4c9c:	040bc83a 	sub	r5,zero,r16
    4ca0:	9009883a 	mov	r4,r18
    4ca4:	0007dd40 	call	7dd4 <_sbrk_r>
    4ca8:	00ffffc4 	movi	r3,-1
    4cac:	10c00d26 	beq	r2,r3,4ce4 <_malloc_trim_r+0xe0>
    4cb0:	00c00074 	movhi	r3,1
    4cb4:	18cfd404 	addi	r3,r3,16208
    4cb8:	18800017 	ldw	r2,0(r3)
    4cbc:	99000217 	ldw	r4,8(r19)
    4cc0:	8c23c83a 	sub	r17,r17,r16
    4cc4:	8c400054 	ori	r17,r17,1
    4cc8:	1421c83a 	sub	r16,r2,r16
    4ccc:	24400115 	stw	r17,4(r4)
    4cd0:	9009883a 	mov	r4,r18
    4cd4:	1c000015 	stw	r16,0(r3)
    4cd8:	000dcd40 	call	dcd4 <__malloc_unlock>
    4cdc:	00800044 	movi	r2,1
    4ce0:	003fe706 	br	4c80 <__alt_data_end+0xfffbb8a0>
    4ce4:	000b883a 	mov	r5,zero
    4ce8:	9009883a 	mov	r4,r18
    4cec:	0007dd40 	call	7dd4 <_sbrk_r>
    4cf0:	99000217 	ldw	r4,8(r19)
    4cf4:	014003c4 	movi	r5,15
    4cf8:	1107c83a 	sub	r3,r2,r4
    4cfc:	28ffdd0e 	bge	r5,r3,4c74 <__alt_data_end+0xfffbb894>
    4d00:	01400074 	movhi	r5,1
    4d04:	2948fe04 	addi	r5,r5,9208
    4d08:	29400017 	ldw	r5,0(r5)
    4d0c:	18c00054 	ori	r3,r3,1
    4d10:	20c00115 	stw	r3,4(r4)
    4d14:	00c00074 	movhi	r3,1
    4d18:	1145c83a 	sub	r2,r2,r5
    4d1c:	18cfd404 	addi	r3,r3,16208
    4d20:	18800015 	stw	r2,0(r3)
    4d24:	003fd306 	br	4c74 <__alt_data_end+0xfffbb894>

00004d28 <_free_r>:
    4d28:	28004126 	beq	r5,zero,4e30 <_free_r+0x108>
    4d2c:	defffd04 	addi	sp,sp,-12
    4d30:	dc400115 	stw	r17,4(sp)
    4d34:	dc000015 	stw	r16,0(sp)
    4d38:	2023883a 	mov	r17,r4
    4d3c:	2821883a 	mov	r16,r5
    4d40:	dfc00215 	stw	ra,8(sp)
    4d44:	000dcb00 	call	dcb0 <__malloc_lock>
    4d48:	81ffff17 	ldw	r7,-4(r16)
    4d4c:	00bfff84 	movi	r2,-2
    4d50:	01000074 	movhi	r4,1
    4d54:	81bffe04 	addi	r6,r16,-8
    4d58:	3884703a 	and	r2,r7,r2
    4d5c:	21037704 	addi	r4,r4,3548
    4d60:	308b883a 	add	r5,r6,r2
    4d64:	2a400117 	ldw	r9,4(r5)
    4d68:	22000217 	ldw	r8,8(r4)
    4d6c:	00ffff04 	movi	r3,-4
    4d70:	48c6703a 	and	r3,r9,r3
    4d74:	2a005726 	beq	r5,r8,4ed4 <_free_r+0x1ac>
    4d78:	28c00115 	stw	r3,4(r5)
    4d7c:	39c0004c 	andi	r7,r7,1
    4d80:	3800091e 	bne	r7,zero,4da8 <_free_r+0x80>
    4d84:	823ffe17 	ldw	r8,-8(r16)
    4d88:	22400204 	addi	r9,r4,8
    4d8c:	320dc83a 	sub	r6,r6,r8
    4d90:	31c00217 	ldw	r7,8(r6)
    4d94:	1205883a 	add	r2,r2,r8
    4d98:	3a406526 	beq	r7,r9,4f30 <_free_r+0x208>
    4d9c:	32000317 	ldw	r8,12(r6)
    4da0:	3a000315 	stw	r8,12(r7)
    4da4:	41c00215 	stw	r7,8(r8)
    4da8:	28cf883a 	add	r7,r5,r3
    4dac:	39c00117 	ldw	r7,4(r7)
    4db0:	39c0004c 	andi	r7,r7,1
    4db4:	38003a26 	beq	r7,zero,4ea0 <_free_r+0x178>
    4db8:	10c00054 	ori	r3,r2,1
    4dbc:	30c00115 	stw	r3,4(r6)
    4dc0:	3087883a 	add	r3,r6,r2
    4dc4:	18800015 	stw	r2,0(r3)
    4dc8:	00c07fc4 	movi	r3,511
    4dcc:	18801936 	bltu	r3,r2,4e34 <_free_r+0x10c>
    4dd0:	1004d0fa 	srli	r2,r2,3
    4dd4:	01c00044 	movi	r7,1
    4dd8:	21400117 	ldw	r5,4(r4)
    4ddc:	10c00044 	addi	r3,r2,1
    4de0:	18c7883a 	add	r3,r3,r3
    4de4:	1005d0ba 	srai	r2,r2,2
    4de8:	18c7883a 	add	r3,r3,r3
    4dec:	18c7883a 	add	r3,r3,r3
    4df0:	1907883a 	add	r3,r3,r4
    4df4:	3884983a 	sll	r2,r7,r2
    4df8:	19c00017 	ldw	r7,0(r3)
    4dfc:	1a3ffe04 	addi	r8,r3,-8
    4e00:	1144b03a 	or	r2,r2,r5
    4e04:	32000315 	stw	r8,12(r6)
    4e08:	31c00215 	stw	r7,8(r6)
    4e0c:	20800115 	stw	r2,4(r4)
    4e10:	19800015 	stw	r6,0(r3)
    4e14:	39800315 	stw	r6,12(r7)
    4e18:	8809883a 	mov	r4,r17
    4e1c:	dfc00217 	ldw	ra,8(sp)
    4e20:	dc400117 	ldw	r17,4(sp)
    4e24:	dc000017 	ldw	r16,0(sp)
    4e28:	dec00304 	addi	sp,sp,12
    4e2c:	000dcd41 	jmpi	dcd4 <__malloc_unlock>
    4e30:	f800283a 	ret
    4e34:	100ad27a 	srli	r5,r2,9
    4e38:	00c00104 	movi	r3,4
    4e3c:	19404a36 	bltu	r3,r5,4f68 <_free_r+0x240>
    4e40:	100ad1ba 	srli	r5,r2,6
    4e44:	28c00e44 	addi	r3,r5,57
    4e48:	18c7883a 	add	r3,r3,r3
    4e4c:	29400e04 	addi	r5,r5,56
    4e50:	18c7883a 	add	r3,r3,r3
    4e54:	18c7883a 	add	r3,r3,r3
    4e58:	1909883a 	add	r4,r3,r4
    4e5c:	20c00017 	ldw	r3,0(r4)
    4e60:	01c00074 	movhi	r7,1
    4e64:	213ffe04 	addi	r4,r4,-8
    4e68:	39c37704 	addi	r7,r7,3548
    4e6c:	20c04426 	beq	r4,r3,4f80 <_free_r+0x258>
    4e70:	01ffff04 	movi	r7,-4
    4e74:	19400117 	ldw	r5,4(r3)
    4e78:	29ca703a 	and	r5,r5,r7
    4e7c:	1140022e 	bgeu	r2,r5,4e88 <_free_r+0x160>
    4e80:	18c00217 	ldw	r3,8(r3)
    4e84:	20fffb1e 	bne	r4,r3,4e74 <__alt_data_end+0xfffbba94>
    4e88:	19000317 	ldw	r4,12(r3)
    4e8c:	31000315 	stw	r4,12(r6)
    4e90:	30c00215 	stw	r3,8(r6)
    4e94:	21800215 	stw	r6,8(r4)
    4e98:	19800315 	stw	r6,12(r3)
    4e9c:	003fde06 	br	4e18 <__alt_data_end+0xfffbba38>
    4ea0:	29c00217 	ldw	r7,8(r5)
    4ea4:	10c5883a 	add	r2,r2,r3
    4ea8:	00c00074 	movhi	r3,1
    4eac:	18c37904 	addi	r3,r3,3556
    4eb0:	38c03b26 	beq	r7,r3,4fa0 <_free_r+0x278>
    4eb4:	2a000317 	ldw	r8,12(r5)
    4eb8:	11400054 	ori	r5,r2,1
    4ebc:	3087883a 	add	r3,r6,r2
    4ec0:	3a000315 	stw	r8,12(r7)
    4ec4:	41c00215 	stw	r7,8(r8)
    4ec8:	31400115 	stw	r5,4(r6)
    4ecc:	18800015 	stw	r2,0(r3)
    4ed0:	003fbd06 	br	4dc8 <__alt_data_end+0xfffbb9e8>
    4ed4:	39c0004c 	andi	r7,r7,1
    4ed8:	10c5883a 	add	r2,r2,r3
    4edc:	3800071e 	bne	r7,zero,4efc <_free_r+0x1d4>
    4ee0:	81fffe17 	ldw	r7,-8(r16)
    4ee4:	31cdc83a 	sub	r6,r6,r7
    4ee8:	30c00317 	ldw	r3,12(r6)
    4eec:	31400217 	ldw	r5,8(r6)
    4ef0:	11c5883a 	add	r2,r2,r7
    4ef4:	28c00315 	stw	r3,12(r5)
    4ef8:	19400215 	stw	r5,8(r3)
    4efc:	10c00054 	ori	r3,r2,1
    4f00:	30c00115 	stw	r3,4(r6)
    4f04:	00c00074 	movhi	r3,1
    4f08:	18c8ff04 	addi	r3,r3,9212
    4f0c:	18c00017 	ldw	r3,0(r3)
    4f10:	21800215 	stw	r6,8(r4)
    4f14:	10ffc036 	bltu	r2,r3,4e18 <__alt_data_end+0xfffbba38>
    4f18:	00800074 	movhi	r2,1
    4f1c:	108fcb04 	addi	r2,r2,16172
    4f20:	11400017 	ldw	r5,0(r2)
    4f24:	8809883a 	mov	r4,r17
    4f28:	0004c040 	call	4c04 <_malloc_trim_r>
    4f2c:	003fba06 	br	4e18 <__alt_data_end+0xfffbba38>
    4f30:	28c9883a 	add	r4,r5,r3
    4f34:	21000117 	ldw	r4,4(r4)
    4f38:	2100004c 	andi	r4,r4,1
    4f3c:	2000391e 	bne	r4,zero,5024 <_free_r+0x2fc>
    4f40:	29c00217 	ldw	r7,8(r5)
    4f44:	29000317 	ldw	r4,12(r5)
    4f48:	1885883a 	add	r2,r3,r2
    4f4c:	10c00054 	ori	r3,r2,1
    4f50:	39000315 	stw	r4,12(r7)
    4f54:	21c00215 	stw	r7,8(r4)
    4f58:	30c00115 	stw	r3,4(r6)
    4f5c:	308d883a 	add	r6,r6,r2
    4f60:	30800015 	stw	r2,0(r6)
    4f64:	003fac06 	br	4e18 <__alt_data_end+0xfffbba38>
    4f68:	00c00504 	movi	r3,20
    4f6c:	19401536 	bltu	r3,r5,4fc4 <_free_r+0x29c>
    4f70:	28c01704 	addi	r3,r5,92
    4f74:	18c7883a 	add	r3,r3,r3
    4f78:	294016c4 	addi	r5,r5,91
    4f7c:	003fb406 	br	4e50 <__alt_data_end+0xfffbba70>
    4f80:	280bd0ba 	srai	r5,r5,2
    4f84:	00c00044 	movi	r3,1
    4f88:	38800117 	ldw	r2,4(r7)
    4f8c:	194a983a 	sll	r5,r3,r5
    4f90:	2007883a 	mov	r3,r4
    4f94:	2884b03a 	or	r2,r5,r2
    4f98:	38800115 	stw	r2,4(r7)
    4f9c:	003fbb06 	br	4e8c <__alt_data_end+0xfffbbaac>
    4fa0:	21800515 	stw	r6,20(r4)
    4fa4:	21800415 	stw	r6,16(r4)
    4fa8:	10c00054 	ori	r3,r2,1
    4fac:	31c00315 	stw	r7,12(r6)
    4fb0:	31c00215 	stw	r7,8(r6)
    4fb4:	30c00115 	stw	r3,4(r6)
    4fb8:	308d883a 	add	r6,r6,r2
    4fbc:	30800015 	stw	r2,0(r6)
    4fc0:	003f9506 	br	4e18 <__alt_data_end+0xfffbba38>
    4fc4:	00c01504 	movi	r3,84
    4fc8:	19400536 	bltu	r3,r5,4fe0 <_free_r+0x2b8>
    4fcc:	100ad33a 	srli	r5,r2,12
    4fd0:	28c01bc4 	addi	r3,r5,111
    4fd4:	18c7883a 	add	r3,r3,r3
    4fd8:	29401b84 	addi	r5,r5,110
    4fdc:	003f9c06 	br	4e50 <__alt_data_end+0xfffbba70>
    4fe0:	00c05504 	movi	r3,340
    4fe4:	19400536 	bltu	r3,r5,4ffc <_free_r+0x2d4>
    4fe8:	100ad3fa 	srli	r5,r2,15
    4fec:	28c01e04 	addi	r3,r5,120
    4ff0:	18c7883a 	add	r3,r3,r3
    4ff4:	29401dc4 	addi	r5,r5,119
    4ff8:	003f9506 	br	4e50 <__alt_data_end+0xfffbba70>
    4ffc:	00c15504 	movi	r3,1364
    5000:	19400536 	bltu	r3,r5,5018 <_free_r+0x2f0>
    5004:	100ad4ba 	srli	r5,r2,18
    5008:	28c01f44 	addi	r3,r5,125
    500c:	18c7883a 	add	r3,r3,r3
    5010:	29401f04 	addi	r5,r5,124
    5014:	003f8e06 	br	4e50 <__alt_data_end+0xfffbba70>
    5018:	00c03f84 	movi	r3,254
    501c:	01401f84 	movi	r5,126
    5020:	003f8b06 	br	4e50 <__alt_data_end+0xfffbba70>
    5024:	10c00054 	ori	r3,r2,1
    5028:	30c00115 	stw	r3,4(r6)
    502c:	308d883a 	add	r6,r6,r2
    5030:	30800015 	stw	r2,0(r6)
    5034:	003f7806 	br	4e18 <__alt_data_end+0xfffbba38>

00005038 <__sfvwrite_r>:
    5038:	30800217 	ldw	r2,8(r6)
    503c:	10006726 	beq	r2,zero,51dc <__sfvwrite_r+0x1a4>
    5040:	28c0030b 	ldhu	r3,12(r5)
    5044:	defff404 	addi	sp,sp,-48
    5048:	dd400715 	stw	r21,28(sp)
    504c:	dd000615 	stw	r20,24(sp)
    5050:	dc000215 	stw	r16,8(sp)
    5054:	dfc00b15 	stw	ra,44(sp)
    5058:	df000a15 	stw	fp,40(sp)
    505c:	ddc00915 	stw	r23,36(sp)
    5060:	dd800815 	stw	r22,32(sp)
    5064:	dcc00515 	stw	r19,20(sp)
    5068:	dc800415 	stw	r18,16(sp)
    506c:	dc400315 	stw	r17,12(sp)
    5070:	1880020c 	andi	r2,r3,8
    5074:	2821883a 	mov	r16,r5
    5078:	202b883a 	mov	r21,r4
    507c:	3029883a 	mov	r20,r6
    5080:	10002726 	beq	r2,zero,5120 <__sfvwrite_r+0xe8>
    5084:	28800417 	ldw	r2,16(r5)
    5088:	10002526 	beq	r2,zero,5120 <__sfvwrite_r+0xe8>
    508c:	1880008c 	andi	r2,r3,2
    5090:	a4400017 	ldw	r17,0(r20)
    5094:	10002a26 	beq	r2,zero,5140 <__sfvwrite_r+0x108>
    5098:	05a00034 	movhi	r22,32768
    509c:	0027883a 	mov	r19,zero
    50a0:	0025883a 	mov	r18,zero
    50a4:	b5bf0004 	addi	r22,r22,-1024
    50a8:	980d883a 	mov	r6,r19
    50ac:	a809883a 	mov	r4,r21
    50b0:	90004626 	beq	r18,zero,51cc <__sfvwrite_r+0x194>
    50b4:	900f883a 	mov	r7,r18
    50b8:	b480022e 	bgeu	r22,r18,50c4 <__sfvwrite_r+0x8c>
    50bc:	01e00034 	movhi	r7,32768
    50c0:	39ff0004 	addi	r7,r7,-1024
    50c4:	80800917 	ldw	r2,36(r16)
    50c8:	81400717 	ldw	r5,28(r16)
    50cc:	103ee83a 	callr	r2
    50d0:	00805a0e 	bge	zero,r2,523c <__sfvwrite_r+0x204>
    50d4:	a0c00217 	ldw	r3,8(r20)
    50d8:	98a7883a 	add	r19,r19,r2
    50dc:	90a5c83a 	sub	r18,r18,r2
    50e0:	1885c83a 	sub	r2,r3,r2
    50e4:	a0800215 	stw	r2,8(r20)
    50e8:	103fef1e 	bne	r2,zero,50a8 <__alt_data_end+0xfffbbcc8>
    50ec:	0005883a 	mov	r2,zero
    50f0:	dfc00b17 	ldw	ra,44(sp)
    50f4:	df000a17 	ldw	fp,40(sp)
    50f8:	ddc00917 	ldw	r23,36(sp)
    50fc:	dd800817 	ldw	r22,32(sp)
    5100:	dd400717 	ldw	r21,28(sp)
    5104:	dd000617 	ldw	r20,24(sp)
    5108:	dcc00517 	ldw	r19,20(sp)
    510c:	dc800417 	ldw	r18,16(sp)
    5110:	dc400317 	ldw	r17,12(sp)
    5114:	dc000217 	ldw	r16,8(sp)
    5118:	dec00c04 	addi	sp,sp,48
    511c:	f800283a 	ret
    5120:	800b883a 	mov	r5,r16
    5124:	a809883a 	mov	r4,r21
    5128:	0002ba80 	call	2ba8 <__swsetup_r>
    512c:	1000ee1e 	bne	r2,zero,54e8 <__sfvwrite_r+0x4b0>
    5130:	80c0030b 	ldhu	r3,12(r16)
    5134:	a4400017 	ldw	r17,0(r20)
    5138:	1880008c 	andi	r2,r3,2
    513c:	103fd61e 	bne	r2,zero,5098 <__alt_data_end+0xfffbbcb8>
    5140:	1880004c 	andi	r2,r3,1
    5144:	1000421e 	bne	r2,zero,5250 <__sfvwrite_r+0x218>
    5148:	0039883a 	mov	fp,zero
    514c:	0025883a 	mov	r18,zero
    5150:	90001a26 	beq	r18,zero,51bc <__sfvwrite_r+0x184>
    5154:	1880800c 	andi	r2,r3,512
    5158:	84c00217 	ldw	r19,8(r16)
    515c:	10002126 	beq	r2,zero,51e4 <__sfvwrite_r+0x1ac>
    5160:	982f883a 	mov	r23,r19
    5164:	94c09636 	bltu	r18,r19,53c0 <__sfvwrite_r+0x388>
    5168:	1881200c 	andi	r2,r3,1152
    516c:	1000a11e 	bne	r2,zero,53f4 <__sfvwrite_r+0x3bc>
    5170:	81000017 	ldw	r4,0(r16)
    5174:	b80d883a 	mov	r6,r23
    5178:	e00b883a 	mov	r5,fp
    517c:	00063580 	call	6358 <memmove>
    5180:	80c00217 	ldw	r3,8(r16)
    5184:	81000017 	ldw	r4,0(r16)
    5188:	9005883a 	mov	r2,r18
    518c:	1ce7c83a 	sub	r19,r3,r19
    5190:	25cf883a 	add	r7,r4,r23
    5194:	84c00215 	stw	r19,8(r16)
    5198:	81c00015 	stw	r7,0(r16)
    519c:	a0c00217 	ldw	r3,8(r20)
    51a0:	e0b9883a 	add	fp,fp,r2
    51a4:	90a5c83a 	sub	r18,r18,r2
    51a8:	18a7c83a 	sub	r19,r3,r2
    51ac:	a4c00215 	stw	r19,8(r20)
    51b0:	983fce26 	beq	r19,zero,50ec <__alt_data_end+0xfffbbd0c>
    51b4:	80c0030b 	ldhu	r3,12(r16)
    51b8:	903fe61e 	bne	r18,zero,5154 <__alt_data_end+0xfffbbd74>
    51bc:	8f000017 	ldw	fp,0(r17)
    51c0:	8c800117 	ldw	r18,4(r17)
    51c4:	8c400204 	addi	r17,r17,8
    51c8:	003fe106 	br	5150 <__alt_data_end+0xfffbbd70>
    51cc:	8cc00017 	ldw	r19,0(r17)
    51d0:	8c800117 	ldw	r18,4(r17)
    51d4:	8c400204 	addi	r17,r17,8
    51d8:	003fb306 	br	50a8 <__alt_data_end+0xfffbbcc8>
    51dc:	0005883a 	mov	r2,zero
    51e0:	f800283a 	ret
    51e4:	81000017 	ldw	r4,0(r16)
    51e8:	80800417 	ldw	r2,16(r16)
    51ec:	11005a36 	bltu	r2,r4,5358 <__sfvwrite_r+0x320>
    51f0:	85c00517 	ldw	r23,20(r16)
    51f4:	95c05836 	bltu	r18,r23,5358 <__sfvwrite_r+0x320>
    51f8:	00a00034 	movhi	r2,32768
    51fc:	10bfffc4 	addi	r2,r2,-1
    5200:	9009883a 	mov	r4,r18
    5204:	1480012e 	bgeu	r2,r18,520c <__sfvwrite_r+0x1d4>
    5208:	1009883a 	mov	r4,r2
    520c:	b80b883a 	mov	r5,r23
    5210:	000ac440 	call	ac44 <__divsi3>
    5214:	b80b883a 	mov	r5,r23
    5218:	1009883a 	mov	r4,r2
    521c:	000adf80 	call	adf8 <__mulsi3>
    5220:	81400717 	ldw	r5,28(r16)
    5224:	80c00917 	ldw	r3,36(r16)
    5228:	100f883a 	mov	r7,r2
    522c:	e00d883a 	mov	r6,fp
    5230:	a809883a 	mov	r4,r21
    5234:	183ee83a 	callr	r3
    5238:	00bfd816 	blt	zero,r2,519c <__alt_data_end+0xfffbbdbc>
    523c:	8080030b 	ldhu	r2,12(r16)
    5240:	10801014 	ori	r2,r2,64
    5244:	8080030d 	sth	r2,12(r16)
    5248:	00bfffc4 	movi	r2,-1
    524c:	003fa806 	br	50f0 <__alt_data_end+0xfffbbd10>
    5250:	0027883a 	mov	r19,zero
    5254:	0011883a 	mov	r8,zero
    5258:	0039883a 	mov	fp,zero
    525c:	0025883a 	mov	r18,zero
    5260:	90001f26 	beq	r18,zero,52e0 <__sfvwrite_r+0x2a8>
    5264:	40005a26 	beq	r8,zero,53d0 <__sfvwrite_r+0x398>
    5268:	982d883a 	mov	r22,r19
    526c:	94c0012e 	bgeu	r18,r19,5274 <__sfvwrite_r+0x23c>
    5270:	902d883a 	mov	r22,r18
    5274:	81000017 	ldw	r4,0(r16)
    5278:	80800417 	ldw	r2,16(r16)
    527c:	b02f883a 	mov	r23,r22
    5280:	81c00517 	ldw	r7,20(r16)
    5284:	1100032e 	bgeu	r2,r4,5294 <__sfvwrite_r+0x25c>
    5288:	80c00217 	ldw	r3,8(r16)
    528c:	38c7883a 	add	r3,r7,r3
    5290:	1d801816 	blt	r3,r22,52f4 <__sfvwrite_r+0x2bc>
    5294:	b1c03e16 	blt	r22,r7,5390 <__sfvwrite_r+0x358>
    5298:	80800917 	ldw	r2,36(r16)
    529c:	81400717 	ldw	r5,28(r16)
    52a0:	e00d883a 	mov	r6,fp
    52a4:	da000115 	stw	r8,4(sp)
    52a8:	a809883a 	mov	r4,r21
    52ac:	103ee83a 	callr	r2
    52b0:	102f883a 	mov	r23,r2
    52b4:	da000117 	ldw	r8,4(sp)
    52b8:	00bfe00e 	bge	zero,r2,523c <__alt_data_end+0xfffbbe5c>
    52bc:	9de7c83a 	sub	r19,r19,r23
    52c0:	98001f26 	beq	r19,zero,5340 <__sfvwrite_r+0x308>
    52c4:	a0800217 	ldw	r2,8(r20)
    52c8:	e5f9883a 	add	fp,fp,r23
    52cc:	95e5c83a 	sub	r18,r18,r23
    52d0:	15efc83a 	sub	r23,r2,r23
    52d4:	a5c00215 	stw	r23,8(r20)
    52d8:	b83f8426 	beq	r23,zero,50ec <__alt_data_end+0xfffbbd0c>
    52dc:	903fe11e 	bne	r18,zero,5264 <__alt_data_end+0xfffbbe84>
    52e0:	8f000017 	ldw	fp,0(r17)
    52e4:	8c800117 	ldw	r18,4(r17)
    52e8:	0011883a 	mov	r8,zero
    52ec:	8c400204 	addi	r17,r17,8
    52f0:	003fdb06 	br	5260 <__alt_data_end+0xfffbbe80>
    52f4:	180d883a 	mov	r6,r3
    52f8:	e00b883a 	mov	r5,fp
    52fc:	da000115 	stw	r8,4(sp)
    5300:	d8c00015 	stw	r3,0(sp)
    5304:	00063580 	call	6358 <memmove>
    5308:	d8c00017 	ldw	r3,0(sp)
    530c:	80800017 	ldw	r2,0(r16)
    5310:	800b883a 	mov	r5,r16
    5314:	a809883a 	mov	r4,r21
    5318:	10c5883a 	add	r2,r2,r3
    531c:	80800015 	stw	r2,0(r16)
    5320:	d8c00015 	stw	r3,0(sp)
    5324:	00047c80 	call	47c8 <_fflush_r>
    5328:	d8c00017 	ldw	r3,0(sp)
    532c:	da000117 	ldw	r8,4(sp)
    5330:	103fc21e 	bne	r2,zero,523c <__alt_data_end+0xfffbbe5c>
    5334:	182f883a 	mov	r23,r3
    5338:	9de7c83a 	sub	r19,r19,r23
    533c:	983fe11e 	bne	r19,zero,52c4 <__alt_data_end+0xfffbbee4>
    5340:	800b883a 	mov	r5,r16
    5344:	a809883a 	mov	r4,r21
    5348:	00047c80 	call	47c8 <_fflush_r>
    534c:	103fbb1e 	bne	r2,zero,523c <__alt_data_end+0xfffbbe5c>
    5350:	0011883a 	mov	r8,zero
    5354:	003fdb06 	br	52c4 <__alt_data_end+0xfffbbee4>
    5358:	94c0012e 	bgeu	r18,r19,5360 <__sfvwrite_r+0x328>
    535c:	9027883a 	mov	r19,r18
    5360:	980d883a 	mov	r6,r19
    5364:	e00b883a 	mov	r5,fp
    5368:	00063580 	call	6358 <memmove>
    536c:	80800217 	ldw	r2,8(r16)
    5370:	80c00017 	ldw	r3,0(r16)
    5374:	14c5c83a 	sub	r2,r2,r19
    5378:	1cc7883a 	add	r3,r3,r19
    537c:	80800215 	stw	r2,8(r16)
    5380:	80c00015 	stw	r3,0(r16)
    5384:	10004326 	beq	r2,zero,5494 <__sfvwrite_r+0x45c>
    5388:	9805883a 	mov	r2,r19
    538c:	003f8306 	br	519c <__alt_data_end+0xfffbbdbc>
    5390:	b00d883a 	mov	r6,r22
    5394:	e00b883a 	mov	r5,fp
    5398:	da000115 	stw	r8,4(sp)
    539c:	00063580 	call	6358 <memmove>
    53a0:	80800217 	ldw	r2,8(r16)
    53a4:	80c00017 	ldw	r3,0(r16)
    53a8:	da000117 	ldw	r8,4(sp)
    53ac:	1585c83a 	sub	r2,r2,r22
    53b0:	1dad883a 	add	r22,r3,r22
    53b4:	80800215 	stw	r2,8(r16)
    53b8:	85800015 	stw	r22,0(r16)
    53bc:	003fbf06 	br	52bc <__alt_data_end+0xfffbbedc>
    53c0:	81000017 	ldw	r4,0(r16)
    53c4:	9027883a 	mov	r19,r18
    53c8:	902f883a 	mov	r23,r18
    53cc:	003f6906 	br	5174 <__alt_data_end+0xfffbbd94>
    53d0:	900d883a 	mov	r6,r18
    53d4:	01400284 	movi	r5,10
    53d8:	e009883a 	mov	r4,fp
    53dc:	000612c0 	call	612c <memchr>
    53e0:	10003e26 	beq	r2,zero,54dc <__sfvwrite_r+0x4a4>
    53e4:	10800044 	addi	r2,r2,1
    53e8:	1727c83a 	sub	r19,r2,fp
    53ec:	02000044 	movi	r8,1
    53f0:	003f9d06 	br	5268 <__alt_data_end+0xfffbbe88>
    53f4:	80800517 	ldw	r2,20(r16)
    53f8:	81400417 	ldw	r5,16(r16)
    53fc:	81c00017 	ldw	r7,0(r16)
    5400:	10a7883a 	add	r19,r2,r2
    5404:	9885883a 	add	r2,r19,r2
    5408:	1026d7fa 	srli	r19,r2,31
    540c:	396dc83a 	sub	r22,r7,r5
    5410:	b1000044 	addi	r4,r22,1
    5414:	9885883a 	add	r2,r19,r2
    5418:	1027d07a 	srai	r19,r2,1
    541c:	2485883a 	add	r2,r4,r18
    5420:	980d883a 	mov	r6,r19
    5424:	9880022e 	bgeu	r19,r2,5430 <__sfvwrite_r+0x3f8>
    5428:	1027883a 	mov	r19,r2
    542c:	100d883a 	mov	r6,r2
    5430:	18c1000c 	andi	r3,r3,1024
    5434:	18001c26 	beq	r3,zero,54a8 <__sfvwrite_r+0x470>
    5438:	300b883a 	mov	r5,r6
    543c:	a809883a 	mov	r4,r21
    5440:	00059200 	call	5920 <_malloc_r>
    5444:	102f883a 	mov	r23,r2
    5448:	10002926 	beq	r2,zero,54f0 <__sfvwrite_r+0x4b8>
    544c:	81400417 	ldw	r5,16(r16)
    5450:	b00d883a 	mov	r6,r22
    5454:	1009883a 	mov	r4,r2
    5458:	00062100 	call	6210 <memcpy>
    545c:	8080030b 	ldhu	r2,12(r16)
    5460:	00fedfc4 	movi	r3,-1153
    5464:	10c4703a 	and	r2,r2,r3
    5468:	10802014 	ori	r2,r2,128
    546c:	8080030d 	sth	r2,12(r16)
    5470:	bd89883a 	add	r4,r23,r22
    5474:	9d8fc83a 	sub	r7,r19,r22
    5478:	85c00415 	stw	r23,16(r16)
    547c:	84c00515 	stw	r19,20(r16)
    5480:	81000015 	stw	r4,0(r16)
    5484:	9027883a 	mov	r19,r18
    5488:	81c00215 	stw	r7,8(r16)
    548c:	902f883a 	mov	r23,r18
    5490:	003f3806 	br	5174 <__alt_data_end+0xfffbbd94>
    5494:	800b883a 	mov	r5,r16
    5498:	a809883a 	mov	r4,r21
    549c:	00047c80 	call	47c8 <_fflush_r>
    54a0:	103fb926 	beq	r2,zero,5388 <__alt_data_end+0xfffbbfa8>
    54a4:	003f6506 	br	523c <__alt_data_end+0xfffbbe5c>
    54a8:	a809883a 	mov	r4,r21
    54ac:	00077fc0 	call	77fc <_realloc_r>
    54b0:	102f883a 	mov	r23,r2
    54b4:	103fee1e 	bne	r2,zero,5470 <__alt_data_end+0xfffbc090>
    54b8:	81400417 	ldw	r5,16(r16)
    54bc:	a809883a 	mov	r4,r21
    54c0:	0004d280 	call	4d28 <_free_r>
    54c4:	8080030b 	ldhu	r2,12(r16)
    54c8:	00ffdfc4 	movi	r3,-129
    54cc:	1884703a 	and	r2,r3,r2
    54d0:	00c00304 	movi	r3,12
    54d4:	a8c00015 	stw	r3,0(r21)
    54d8:	003f5906 	br	5240 <__alt_data_end+0xfffbbe60>
    54dc:	94c00044 	addi	r19,r18,1
    54e0:	02000044 	movi	r8,1
    54e4:	003f6006 	br	5268 <__alt_data_end+0xfffbbe88>
    54e8:	00bfffc4 	movi	r2,-1
    54ec:	003f0006 	br	50f0 <__alt_data_end+0xfffbbd10>
    54f0:	00800304 	movi	r2,12
    54f4:	a8800015 	stw	r2,0(r21)
    54f8:	8080030b 	ldhu	r2,12(r16)
    54fc:	003f5006 	br	5240 <__alt_data_end+0xfffbbe60>

00005500 <_fwalk>:
    5500:	defff704 	addi	sp,sp,-36
    5504:	dd000415 	stw	r20,16(sp)
    5508:	dfc00815 	stw	ra,32(sp)
    550c:	ddc00715 	stw	r23,28(sp)
    5510:	dd800615 	stw	r22,24(sp)
    5514:	dd400515 	stw	r21,20(sp)
    5518:	dcc00315 	stw	r19,12(sp)
    551c:	dc800215 	stw	r18,8(sp)
    5520:	dc400115 	stw	r17,4(sp)
    5524:	dc000015 	stw	r16,0(sp)
    5528:	2500b804 	addi	r20,r4,736
    552c:	a0002326 	beq	r20,zero,55bc <_fwalk+0xbc>
    5530:	282b883a 	mov	r21,r5
    5534:	002f883a 	mov	r23,zero
    5538:	05800044 	movi	r22,1
    553c:	04ffffc4 	movi	r19,-1
    5540:	a4400117 	ldw	r17,4(r20)
    5544:	a4800217 	ldw	r18,8(r20)
    5548:	8c7fffc4 	addi	r17,r17,-1
    554c:	88000d16 	blt	r17,zero,5584 <_fwalk+0x84>
    5550:	94000304 	addi	r16,r18,12
    5554:	94800384 	addi	r18,r18,14
    5558:	8080000b 	ldhu	r2,0(r16)
    555c:	8c7fffc4 	addi	r17,r17,-1
    5560:	813ffd04 	addi	r4,r16,-12
    5564:	b080042e 	bgeu	r22,r2,5578 <_fwalk+0x78>
    5568:	9080000f 	ldh	r2,0(r18)
    556c:	14c00226 	beq	r2,r19,5578 <_fwalk+0x78>
    5570:	a83ee83a 	callr	r21
    5574:	b8aeb03a 	or	r23,r23,r2
    5578:	84001a04 	addi	r16,r16,104
    557c:	94801a04 	addi	r18,r18,104
    5580:	8cfff51e 	bne	r17,r19,5558 <__alt_data_end+0xfffbc178>
    5584:	a5000017 	ldw	r20,0(r20)
    5588:	a03fed1e 	bne	r20,zero,5540 <__alt_data_end+0xfffbc160>
    558c:	b805883a 	mov	r2,r23
    5590:	dfc00817 	ldw	ra,32(sp)
    5594:	ddc00717 	ldw	r23,28(sp)
    5598:	dd800617 	ldw	r22,24(sp)
    559c:	dd400517 	ldw	r21,20(sp)
    55a0:	dd000417 	ldw	r20,16(sp)
    55a4:	dcc00317 	ldw	r19,12(sp)
    55a8:	dc800217 	ldw	r18,8(sp)
    55ac:	dc400117 	ldw	r17,4(sp)
    55b0:	dc000017 	ldw	r16,0(sp)
    55b4:	dec00904 	addi	sp,sp,36
    55b8:	f800283a 	ret
    55bc:	002f883a 	mov	r23,zero
    55c0:	003ff206 	br	558c <__alt_data_end+0xfffbc1ac>

000055c4 <_fwalk_reent>:
    55c4:	defff704 	addi	sp,sp,-36
    55c8:	dd000415 	stw	r20,16(sp)
    55cc:	dfc00815 	stw	ra,32(sp)
    55d0:	ddc00715 	stw	r23,28(sp)
    55d4:	dd800615 	stw	r22,24(sp)
    55d8:	dd400515 	stw	r21,20(sp)
    55dc:	dcc00315 	stw	r19,12(sp)
    55e0:	dc800215 	stw	r18,8(sp)
    55e4:	dc400115 	stw	r17,4(sp)
    55e8:	dc000015 	stw	r16,0(sp)
    55ec:	2500b804 	addi	r20,r4,736
    55f0:	a0002326 	beq	r20,zero,5680 <_fwalk_reent+0xbc>
    55f4:	282b883a 	mov	r21,r5
    55f8:	2027883a 	mov	r19,r4
    55fc:	002f883a 	mov	r23,zero
    5600:	05800044 	movi	r22,1
    5604:	04bfffc4 	movi	r18,-1
    5608:	a4400117 	ldw	r17,4(r20)
    560c:	a4000217 	ldw	r16,8(r20)
    5610:	8c7fffc4 	addi	r17,r17,-1
    5614:	88000c16 	blt	r17,zero,5648 <_fwalk_reent+0x84>
    5618:	84000304 	addi	r16,r16,12
    561c:	8080000b 	ldhu	r2,0(r16)
    5620:	8c7fffc4 	addi	r17,r17,-1
    5624:	817ffd04 	addi	r5,r16,-12
    5628:	b080052e 	bgeu	r22,r2,5640 <_fwalk_reent+0x7c>
    562c:	8080008f 	ldh	r2,2(r16)
    5630:	9809883a 	mov	r4,r19
    5634:	14800226 	beq	r2,r18,5640 <_fwalk_reent+0x7c>
    5638:	a83ee83a 	callr	r21
    563c:	b8aeb03a 	or	r23,r23,r2
    5640:	84001a04 	addi	r16,r16,104
    5644:	8cbff51e 	bne	r17,r18,561c <__alt_data_end+0xfffbc23c>
    5648:	a5000017 	ldw	r20,0(r20)
    564c:	a03fee1e 	bne	r20,zero,5608 <__alt_data_end+0xfffbc228>
    5650:	b805883a 	mov	r2,r23
    5654:	dfc00817 	ldw	ra,32(sp)
    5658:	ddc00717 	ldw	r23,28(sp)
    565c:	dd800617 	ldw	r22,24(sp)
    5660:	dd400517 	ldw	r21,20(sp)
    5664:	dd000417 	ldw	r20,16(sp)
    5668:	dcc00317 	ldw	r19,12(sp)
    566c:	dc800217 	ldw	r18,8(sp)
    5670:	dc400117 	ldw	r17,4(sp)
    5674:	dc000017 	ldw	r16,0(sp)
    5678:	dec00904 	addi	sp,sp,36
    567c:	f800283a 	ret
    5680:	002f883a 	mov	r23,zero
    5684:	003ff206 	br	5650 <__alt_data_end+0xfffbc270>

00005688 <_setlocale_r>:
    5688:	30001b26 	beq	r6,zero,56f8 <_setlocale_r+0x70>
    568c:	01400074 	movhi	r5,1
    5690:	defffe04 	addi	sp,sp,-8
    5694:	2941af04 	addi	r5,r5,1724
    5698:	3009883a 	mov	r4,r6
    569c:	dc000015 	stw	r16,0(sp)
    56a0:	dfc00115 	stw	ra,4(sp)
    56a4:	3021883a 	mov	r16,r6
    56a8:	0007f640 	call	7f64 <strcmp>
    56ac:	1000061e 	bne	r2,zero,56c8 <_setlocale_r+0x40>
    56b0:	00800074 	movhi	r2,1
    56b4:	1081ae04 	addi	r2,r2,1720
    56b8:	dfc00117 	ldw	ra,4(sp)
    56bc:	dc000017 	ldw	r16,0(sp)
    56c0:	dec00204 	addi	sp,sp,8
    56c4:	f800283a 	ret
    56c8:	01400074 	movhi	r5,1
    56cc:	2941ae04 	addi	r5,r5,1720
    56d0:	8009883a 	mov	r4,r16
    56d4:	0007f640 	call	7f64 <strcmp>
    56d8:	103ff526 	beq	r2,zero,56b0 <__alt_data_end+0xfffbc2d0>
    56dc:	01400074 	movhi	r5,1
    56e0:	29419904 	addi	r5,r5,1636
    56e4:	8009883a 	mov	r4,r16
    56e8:	0007f640 	call	7f64 <strcmp>
    56ec:	103ff026 	beq	r2,zero,56b0 <__alt_data_end+0xfffbc2d0>
    56f0:	0005883a 	mov	r2,zero
    56f4:	003ff006 	br	56b8 <__alt_data_end+0xfffbc2d8>
    56f8:	00800074 	movhi	r2,1
    56fc:	1081ae04 	addi	r2,r2,1720
    5700:	f800283a 	ret

00005704 <__locale_charset>:
    5704:	00800074 	movhi	r2,1
    5708:	10836104 	addi	r2,r2,3460
    570c:	f800283a 	ret

00005710 <__locale_mb_cur_max>:
    5710:	00800074 	movhi	r2,1
    5714:	1088fd04 	addi	r2,r2,9204
    5718:	10800017 	ldw	r2,0(r2)
    571c:	f800283a 	ret

00005720 <__locale_msgcharset>:
    5720:	00800074 	movhi	r2,1
    5724:	10835904 	addi	r2,r2,3428
    5728:	f800283a 	ret

0000572c <__locale_cjk_lang>:
    572c:	0005883a 	mov	r2,zero
    5730:	f800283a 	ret

00005734 <_localeconv_r>:
    5734:	00800074 	movhi	r2,1
    5738:	10836904 	addi	r2,r2,3492
    573c:	f800283a 	ret

00005740 <setlocale>:
    5740:	00800074 	movhi	r2,1
    5744:	1088fc04 	addi	r2,r2,9200
    5748:	280d883a 	mov	r6,r5
    574c:	200b883a 	mov	r5,r4
    5750:	11000017 	ldw	r4,0(r2)
    5754:	00056881 	jmpi	5688 <_setlocale_r>

00005758 <localeconv>:
    5758:	00800074 	movhi	r2,1
    575c:	10836904 	addi	r2,r2,3492
    5760:	f800283a 	ret

00005764 <__smakebuf_r>:
    5764:	2880030b 	ldhu	r2,12(r5)
    5768:	10c0008c 	andi	r3,r2,2
    576c:	1800411e 	bne	r3,zero,5874 <__smakebuf_r+0x110>
    5770:	deffec04 	addi	sp,sp,-80
    5774:	dc000f15 	stw	r16,60(sp)
    5778:	2821883a 	mov	r16,r5
    577c:	2940038f 	ldh	r5,14(r5)
    5780:	dc401015 	stw	r17,64(sp)
    5784:	dfc01315 	stw	ra,76(sp)
    5788:	dcc01215 	stw	r19,72(sp)
    578c:	dc801115 	stw	r18,68(sp)
    5790:	2023883a 	mov	r17,r4
    5794:	28001c16 	blt	r5,zero,5808 <__smakebuf_r+0xa4>
    5798:	d80d883a 	mov	r6,sp
    579c:	0009d2c0 	call	9d2c <_fstat_r>
    57a0:	10001816 	blt	r2,zero,5804 <__smakebuf_r+0xa0>
    57a4:	d8800117 	ldw	r2,4(sp)
    57a8:	00e00014 	movui	r3,32768
    57ac:	10bc000c 	andi	r2,r2,61440
    57b0:	14c80020 	cmpeqi	r19,r2,8192
    57b4:	10c03726 	beq	r2,r3,5894 <__smakebuf_r+0x130>
    57b8:	80c0030b 	ldhu	r3,12(r16)
    57bc:	18c20014 	ori	r3,r3,2048
    57c0:	80c0030d 	sth	r3,12(r16)
    57c4:	00c80004 	movi	r3,8192
    57c8:	10c0521e 	bne	r2,r3,5914 <__smakebuf_r+0x1b0>
    57cc:	8140038f 	ldh	r5,14(r16)
    57d0:	8809883a 	mov	r4,r17
    57d4:	0009d880 	call	9d88 <_isatty_r>
    57d8:	10004c26 	beq	r2,zero,590c <__smakebuf_r+0x1a8>
    57dc:	8080030b 	ldhu	r2,12(r16)
    57e0:	80c010c4 	addi	r3,r16,67
    57e4:	80c00015 	stw	r3,0(r16)
    57e8:	10800054 	ori	r2,r2,1
    57ec:	8080030d 	sth	r2,12(r16)
    57f0:	00800044 	movi	r2,1
    57f4:	80c00415 	stw	r3,16(r16)
    57f8:	80800515 	stw	r2,20(r16)
    57fc:	04810004 	movi	r18,1024
    5800:	00000706 	br	5820 <__smakebuf_r+0xbc>
    5804:	8080030b 	ldhu	r2,12(r16)
    5808:	10c0200c 	andi	r3,r2,128
    580c:	18001f1e 	bne	r3,zero,588c <__smakebuf_r+0x128>
    5810:	04810004 	movi	r18,1024
    5814:	10820014 	ori	r2,r2,2048
    5818:	8080030d 	sth	r2,12(r16)
    581c:	0027883a 	mov	r19,zero
    5820:	900b883a 	mov	r5,r18
    5824:	8809883a 	mov	r4,r17
    5828:	00059200 	call	5920 <_malloc_r>
    582c:	10002c26 	beq	r2,zero,58e0 <__smakebuf_r+0x17c>
    5830:	80c0030b 	ldhu	r3,12(r16)
    5834:	01000034 	movhi	r4,0
    5838:	21121704 	addi	r4,r4,18524
    583c:	89000f15 	stw	r4,60(r17)
    5840:	18c02014 	ori	r3,r3,128
    5844:	80c0030d 	sth	r3,12(r16)
    5848:	80800015 	stw	r2,0(r16)
    584c:	80800415 	stw	r2,16(r16)
    5850:	84800515 	stw	r18,20(r16)
    5854:	98001a1e 	bne	r19,zero,58c0 <__smakebuf_r+0x15c>
    5858:	dfc01317 	ldw	ra,76(sp)
    585c:	dcc01217 	ldw	r19,72(sp)
    5860:	dc801117 	ldw	r18,68(sp)
    5864:	dc401017 	ldw	r17,64(sp)
    5868:	dc000f17 	ldw	r16,60(sp)
    586c:	dec01404 	addi	sp,sp,80
    5870:	f800283a 	ret
    5874:	288010c4 	addi	r2,r5,67
    5878:	28800015 	stw	r2,0(r5)
    587c:	28800415 	stw	r2,16(r5)
    5880:	00800044 	movi	r2,1
    5884:	28800515 	stw	r2,20(r5)
    5888:	f800283a 	ret
    588c:	04801004 	movi	r18,64
    5890:	003fe006 	br	5814 <__alt_data_end+0xfffbc434>
    5894:	81000a17 	ldw	r4,40(r16)
    5898:	00c00034 	movhi	r3,0
    589c:	18dfc004 	addi	r3,r3,32512
    58a0:	20ffc51e 	bne	r4,r3,57b8 <__alt_data_end+0xfffbc3d8>
    58a4:	8080030b 	ldhu	r2,12(r16)
    58a8:	04810004 	movi	r18,1024
    58ac:	84801315 	stw	r18,76(r16)
    58b0:	1484b03a 	or	r2,r2,r18
    58b4:	8080030d 	sth	r2,12(r16)
    58b8:	0027883a 	mov	r19,zero
    58bc:	003fd806 	br	5820 <__alt_data_end+0xfffbc440>
    58c0:	8140038f 	ldh	r5,14(r16)
    58c4:	8809883a 	mov	r4,r17
    58c8:	0009d880 	call	9d88 <_isatty_r>
    58cc:	103fe226 	beq	r2,zero,5858 <__alt_data_end+0xfffbc478>
    58d0:	8080030b 	ldhu	r2,12(r16)
    58d4:	10800054 	ori	r2,r2,1
    58d8:	8080030d 	sth	r2,12(r16)
    58dc:	003fde06 	br	5858 <__alt_data_end+0xfffbc478>
    58e0:	8080030b 	ldhu	r2,12(r16)
    58e4:	10c0800c 	andi	r3,r2,512
    58e8:	183fdb1e 	bne	r3,zero,5858 <__alt_data_end+0xfffbc478>
    58ec:	10800094 	ori	r2,r2,2
    58f0:	80c010c4 	addi	r3,r16,67
    58f4:	8080030d 	sth	r2,12(r16)
    58f8:	00800044 	movi	r2,1
    58fc:	80c00015 	stw	r3,0(r16)
    5900:	80c00415 	stw	r3,16(r16)
    5904:	80800515 	stw	r2,20(r16)
    5908:	003fd306 	br	5858 <__alt_data_end+0xfffbc478>
    590c:	04810004 	movi	r18,1024
    5910:	003fc306 	br	5820 <__alt_data_end+0xfffbc440>
    5914:	0027883a 	mov	r19,zero
    5918:	04810004 	movi	r18,1024
    591c:	003fc006 	br	5820 <__alt_data_end+0xfffbc440>

00005920 <_malloc_r>:
    5920:	defff504 	addi	sp,sp,-44
    5924:	dc800315 	stw	r18,12(sp)
    5928:	dfc00a15 	stw	ra,40(sp)
    592c:	df000915 	stw	fp,36(sp)
    5930:	ddc00815 	stw	r23,32(sp)
    5934:	dd800715 	stw	r22,28(sp)
    5938:	dd400615 	stw	r21,24(sp)
    593c:	dd000515 	stw	r20,20(sp)
    5940:	dcc00415 	stw	r19,16(sp)
    5944:	dc400215 	stw	r17,8(sp)
    5948:	dc000115 	stw	r16,4(sp)
    594c:	288002c4 	addi	r2,r5,11
    5950:	00c00584 	movi	r3,22
    5954:	2025883a 	mov	r18,r4
    5958:	18807f2e 	bgeu	r3,r2,5b58 <_malloc_r+0x238>
    595c:	047ffe04 	movi	r17,-8
    5960:	1462703a 	and	r17,r2,r17
    5964:	8800a316 	blt	r17,zero,5bf4 <_malloc_r+0x2d4>
    5968:	8940a236 	bltu	r17,r5,5bf4 <_malloc_r+0x2d4>
    596c:	000dcb00 	call	dcb0 <__malloc_lock>
    5970:	00807dc4 	movi	r2,503
    5974:	1441e92e 	bgeu	r2,r17,611c <_malloc_r+0x7fc>
    5978:	8804d27a 	srli	r2,r17,9
    597c:	1000a126 	beq	r2,zero,5c04 <_malloc_r+0x2e4>
    5980:	00c00104 	movi	r3,4
    5984:	18811e36 	bltu	r3,r2,5e00 <_malloc_r+0x4e0>
    5988:	8804d1ba 	srli	r2,r17,6
    598c:	12000e44 	addi	r8,r2,57
    5990:	11c00e04 	addi	r7,r2,56
    5994:	4209883a 	add	r4,r8,r8
    5998:	04c00074 	movhi	r19,1
    599c:	2109883a 	add	r4,r4,r4
    59a0:	9cc37704 	addi	r19,r19,3548
    59a4:	2109883a 	add	r4,r4,r4
    59a8:	9909883a 	add	r4,r19,r4
    59ac:	24000117 	ldw	r16,4(r4)
    59b0:	213ffe04 	addi	r4,r4,-8
    59b4:	24009726 	beq	r4,r16,5c14 <_malloc_r+0x2f4>
    59b8:	80800117 	ldw	r2,4(r16)
    59bc:	01bfff04 	movi	r6,-4
    59c0:	014003c4 	movi	r5,15
    59c4:	1184703a 	and	r2,r2,r6
    59c8:	1447c83a 	sub	r3,r2,r17
    59cc:	28c00716 	blt	r5,r3,59ec <_malloc_r+0xcc>
    59d0:	1800920e 	bge	r3,zero,5c1c <_malloc_r+0x2fc>
    59d4:	84000317 	ldw	r16,12(r16)
    59d8:	24008e26 	beq	r4,r16,5c14 <_malloc_r+0x2f4>
    59dc:	80800117 	ldw	r2,4(r16)
    59e0:	1184703a 	and	r2,r2,r6
    59e4:	1447c83a 	sub	r3,r2,r17
    59e8:	28fff90e 	bge	r5,r3,59d0 <__alt_data_end+0xfffbc5f0>
    59ec:	3809883a 	mov	r4,r7
    59f0:	01800074 	movhi	r6,1
    59f4:	9c000417 	ldw	r16,16(r19)
    59f8:	31837704 	addi	r6,r6,3548
    59fc:	32000204 	addi	r8,r6,8
    5a00:	82013426 	beq	r16,r8,5ed4 <_malloc_r+0x5b4>
    5a04:	80c00117 	ldw	r3,4(r16)
    5a08:	00bfff04 	movi	r2,-4
    5a0c:	188e703a 	and	r7,r3,r2
    5a10:	3c45c83a 	sub	r2,r7,r17
    5a14:	00c003c4 	movi	r3,15
    5a18:	18811f16 	blt	r3,r2,5e98 <_malloc_r+0x578>
    5a1c:	32000515 	stw	r8,20(r6)
    5a20:	32000415 	stw	r8,16(r6)
    5a24:	10007f0e 	bge	r2,zero,5c24 <_malloc_r+0x304>
    5a28:	00807fc4 	movi	r2,511
    5a2c:	11c0fd36 	bltu	r2,r7,5e24 <_malloc_r+0x504>
    5a30:	3806d0fa 	srli	r3,r7,3
    5a34:	01c00044 	movi	r7,1
    5a38:	30800117 	ldw	r2,4(r6)
    5a3c:	19400044 	addi	r5,r3,1
    5a40:	294b883a 	add	r5,r5,r5
    5a44:	1807d0ba 	srai	r3,r3,2
    5a48:	294b883a 	add	r5,r5,r5
    5a4c:	294b883a 	add	r5,r5,r5
    5a50:	298b883a 	add	r5,r5,r6
    5a54:	38c6983a 	sll	r3,r7,r3
    5a58:	29c00017 	ldw	r7,0(r5)
    5a5c:	2a7ffe04 	addi	r9,r5,-8
    5a60:	1886b03a 	or	r3,r3,r2
    5a64:	82400315 	stw	r9,12(r16)
    5a68:	81c00215 	stw	r7,8(r16)
    5a6c:	30c00115 	stw	r3,4(r6)
    5a70:	2c000015 	stw	r16,0(r5)
    5a74:	3c000315 	stw	r16,12(r7)
    5a78:	2005d0ba 	srai	r2,r4,2
    5a7c:	01400044 	movi	r5,1
    5a80:	288a983a 	sll	r5,r5,r2
    5a84:	19406f36 	bltu	r3,r5,5c44 <_malloc_r+0x324>
    5a88:	28c4703a 	and	r2,r5,r3
    5a8c:	10000a1e 	bne	r2,zero,5ab8 <_malloc_r+0x198>
    5a90:	00bfff04 	movi	r2,-4
    5a94:	294b883a 	add	r5,r5,r5
    5a98:	2088703a 	and	r4,r4,r2
    5a9c:	28c4703a 	and	r2,r5,r3
    5aa0:	21000104 	addi	r4,r4,4
    5aa4:	1000041e 	bne	r2,zero,5ab8 <_malloc_r+0x198>
    5aa8:	294b883a 	add	r5,r5,r5
    5aac:	28c4703a 	and	r2,r5,r3
    5ab0:	21000104 	addi	r4,r4,4
    5ab4:	103ffc26 	beq	r2,zero,5aa8 <__alt_data_end+0xfffbc6c8>
    5ab8:	02bfff04 	movi	r10,-4
    5abc:	024003c4 	movi	r9,15
    5ac0:	21800044 	addi	r6,r4,1
    5ac4:	318d883a 	add	r6,r6,r6
    5ac8:	318d883a 	add	r6,r6,r6
    5acc:	318d883a 	add	r6,r6,r6
    5ad0:	998d883a 	add	r6,r19,r6
    5ad4:	333ffe04 	addi	r12,r6,-8
    5ad8:	2017883a 	mov	r11,r4
    5adc:	31800104 	addi	r6,r6,4
    5ae0:	34000017 	ldw	r16,0(r6)
    5ae4:	31fffd04 	addi	r7,r6,-12
    5ae8:	81c0041e 	bne	r16,r7,5afc <_malloc_r+0x1dc>
    5aec:	0000fb06 	br	5edc <_malloc_r+0x5bc>
    5af0:	1801030e 	bge	r3,zero,5f00 <_malloc_r+0x5e0>
    5af4:	84000317 	ldw	r16,12(r16)
    5af8:	81c0f826 	beq	r16,r7,5edc <_malloc_r+0x5bc>
    5afc:	80800117 	ldw	r2,4(r16)
    5b00:	1284703a 	and	r2,r2,r10
    5b04:	1447c83a 	sub	r3,r2,r17
    5b08:	48fff90e 	bge	r9,r3,5af0 <__alt_data_end+0xfffbc710>
    5b0c:	80800317 	ldw	r2,12(r16)
    5b10:	81000217 	ldw	r4,8(r16)
    5b14:	89400054 	ori	r5,r17,1
    5b18:	81400115 	stw	r5,4(r16)
    5b1c:	20800315 	stw	r2,12(r4)
    5b20:	11000215 	stw	r4,8(r2)
    5b24:	8463883a 	add	r17,r16,r17
    5b28:	9c400515 	stw	r17,20(r19)
    5b2c:	9c400415 	stw	r17,16(r19)
    5b30:	18800054 	ori	r2,r3,1
    5b34:	88800115 	stw	r2,4(r17)
    5b38:	8a000315 	stw	r8,12(r17)
    5b3c:	8a000215 	stw	r8,8(r17)
    5b40:	88e3883a 	add	r17,r17,r3
    5b44:	88c00015 	stw	r3,0(r17)
    5b48:	9009883a 	mov	r4,r18
    5b4c:	000dcd40 	call	dcd4 <__malloc_unlock>
    5b50:	80800204 	addi	r2,r16,8
    5b54:	00001b06 	br	5bc4 <_malloc_r+0x2a4>
    5b58:	04400404 	movi	r17,16
    5b5c:	89402536 	bltu	r17,r5,5bf4 <_malloc_r+0x2d4>
    5b60:	000dcb00 	call	dcb0 <__malloc_lock>
    5b64:	00800184 	movi	r2,6
    5b68:	01000084 	movi	r4,2
    5b6c:	04c00074 	movhi	r19,1
    5b70:	1085883a 	add	r2,r2,r2
    5b74:	9cc37704 	addi	r19,r19,3548
    5b78:	1085883a 	add	r2,r2,r2
    5b7c:	9885883a 	add	r2,r19,r2
    5b80:	14000117 	ldw	r16,4(r2)
    5b84:	10fffe04 	addi	r3,r2,-8
    5b88:	80c0d926 	beq	r16,r3,5ef0 <_malloc_r+0x5d0>
    5b8c:	80c00117 	ldw	r3,4(r16)
    5b90:	81000317 	ldw	r4,12(r16)
    5b94:	00bfff04 	movi	r2,-4
    5b98:	1884703a 	and	r2,r3,r2
    5b9c:	81400217 	ldw	r5,8(r16)
    5ba0:	8085883a 	add	r2,r16,r2
    5ba4:	10c00117 	ldw	r3,4(r2)
    5ba8:	29000315 	stw	r4,12(r5)
    5bac:	21400215 	stw	r5,8(r4)
    5bb0:	18c00054 	ori	r3,r3,1
    5bb4:	10c00115 	stw	r3,4(r2)
    5bb8:	9009883a 	mov	r4,r18
    5bbc:	000dcd40 	call	dcd4 <__malloc_unlock>
    5bc0:	80800204 	addi	r2,r16,8
    5bc4:	dfc00a17 	ldw	ra,40(sp)
    5bc8:	df000917 	ldw	fp,36(sp)
    5bcc:	ddc00817 	ldw	r23,32(sp)
    5bd0:	dd800717 	ldw	r22,28(sp)
    5bd4:	dd400617 	ldw	r21,24(sp)
    5bd8:	dd000517 	ldw	r20,20(sp)
    5bdc:	dcc00417 	ldw	r19,16(sp)
    5be0:	dc800317 	ldw	r18,12(sp)
    5be4:	dc400217 	ldw	r17,8(sp)
    5be8:	dc000117 	ldw	r16,4(sp)
    5bec:	dec00b04 	addi	sp,sp,44
    5bf0:	f800283a 	ret
    5bf4:	00800304 	movi	r2,12
    5bf8:	90800015 	stw	r2,0(r18)
    5bfc:	0005883a 	mov	r2,zero
    5c00:	003ff006 	br	5bc4 <__alt_data_end+0xfffbc7e4>
    5c04:	01002004 	movi	r4,128
    5c08:	02001004 	movi	r8,64
    5c0c:	01c00fc4 	movi	r7,63
    5c10:	003f6106 	br	5998 <__alt_data_end+0xfffbc5b8>
    5c14:	4009883a 	mov	r4,r8
    5c18:	003f7506 	br	59f0 <__alt_data_end+0xfffbc610>
    5c1c:	81000317 	ldw	r4,12(r16)
    5c20:	003fde06 	br	5b9c <__alt_data_end+0xfffbc7bc>
    5c24:	81c5883a 	add	r2,r16,r7
    5c28:	11400117 	ldw	r5,4(r2)
    5c2c:	9009883a 	mov	r4,r18
    5c30:	29400054 	ori	r5,r5,1
    5c34:	11400115 	stw	r5,4(r2)
    5c38:	000dcd40 	call	dcd4 <__malloc_unlock>
    5c3c:	80800204 	addi	r2,r16,8
    5c40:	003fe006 	br	5bc4 <__alt_data_end+0xfffbc7e4>
    5c44:	9c000217 	ldw	r16,8(r19)
    5c48:	00bfff04 	movi	r2,-4
    5c4c:	85800117 	ldw	r22,4(r16)
    5c50:	b0ac703a 	and	r22,r22,r2
    5c54:	b4400336 	bltu	r22,r17,5c64 <_malloc_r+0x344>
    5c58:	b445c83a 	sub	r2,r22,r17
    5c5c:	00c003c4 	movi	r3,15
    5c60:	18805d16 	blt	r3,r2,5dd8 <_malloc_r+0x4b8>
    5c64:	05c00074 	movhi	r23,1
    5c68:	00800074 	movhi	r2,1
    5c6c:	108fcb04 	addi	r2,r2,16172
    5c70:	bdc8fe04 	addi	r23,r23,9208
    5c74:	15400017 	ldw	r21,0(r2)
    5c78:	b8c00017 	ldw	r3,0(r23)
    5c7c:	00bfffc4 	movi	r2,-1
    5c80:	858d883a 	add	r6,r16,r22
    5c84:	8d6b883a 	add	r21,r17,r21
    5c88:	1880ea26 	beq	r3,r2,6034 <_malloc_r+0x714>
    5c8c:	ad4403c4 	addi	r21,r21,4111
    5c90:	00bc0004 	movi	r2,-4096
    5c94:	a8aa703a 	and	r21,r21,r2
    5c98:	a80b883a 	mov	r5,r21
    5c9c:	9009883a 	mov	r4,r18
    5ca0:	d9800015 	stw	r6,0(sp)
    5ca4:	0007dd40 	call	7dd4 <_sbrk_r>
    5ca8:	1029883a 	mov	r20,r2
    5cac:	00bfffc4 	movi	r2,-1
    5cb0:	d9800017 	ldw	r6,0(sp)
    5cb4:	a080e826 	beq	r20,r2,6058 <_malloc_r+0x738>
    5cb8:	a180a636 	bltu	r20,r6,5f54 <_malloc_r+0x634>
    5cbc:	07000074 	movhi	fp,1
    5cc0:	e70fd404 	addi	fp,fp,16208
    5cc4:	e0800017 	ldw	r2,0(fp)
    5cc8:	a887883a 	add	r3,r21,r2
    5ccc:	e0c00015 	stw	r3,0(fp)
    5cd0:	3500e626 	beq	r6,r20,606c <_malloc_r+0x74c>
    5cd4:	b9000017 	ldw	r4,0(r23)
    5cd8:	00bfffc4 	movi	r2,-1
    5cdc:	2080ee26 	beq	r4,r2,6098 <_malloc_r+0x778>
    5ce0:	a185c83a 	sub	r2,r20,r6
    5ce4:	10c5883a 	add	r2,r2,r3
    5ce8:	e0800015 	stw	r2,0(fp)
    5cec:	a0c001cc 	andi	r3,r20,7
    5cf0:	1800bc26 	beq	r3,zero,5fe4 <_malloc_r+0x6c4>
    5cf4:	a0e9c83a 	sub	r20,r20,r3
    5cf8:	00840204 	movi	r2,4104
    5cfc:	a5000204 	addi	r20,r20,8
    5d00:	10c7c83a 	sub	r3,r2,r3
    5d04:	a545883a 	add	r2,r20,r21
    5d08:	1083ffcc 	andi	r2,r2,4095
    5d0c:	18abc83a 	sub	r21,r3,r2
    5d10:	a80b883a 	mov	r5,r21
    5d14:	9009883a 	mov	r4,r18
    5d18:	0007dd40 	call	7dd4 <_sbrk_r>
    5d1c:	00ffffc4 	movi	r3,-1
    5d20:	10c0e126 	beq	r2,r3,60a8 <_malloc_r+0x788>
    5d24:	1505c83a 	sub	r2,r2,r20
    5d28:	1545883a 	add	r2,r2,r21
    5d2c:	10800054 	ori	r2,r2,1
    5d30:	e0c00017 	ldw	r3,0(fp)
    5d34:	9d000215 	stw	r20,8(r19)
    5d38:	a0800115 	stw	r2,4(r20)
    5d3c:	a8c7883a 	add	r3,r21,r3
    5d40:	e0c00015 	stw	r3,0(fp)
    5d44:	84c00e26 	beq	r16,r19,5d80 <_malloc_r+0x460>
    5d48:	018003c4 	movi	r6,15
    5d4c:	3580a72e 	bgeu	r6,r22,5fec <_malloc_r+0x6cc>
    5d50:	81400117 	ldw	r5,4(r16)
    5d54:	013ffe04 	movi	r4,-8
    5d58:	b0bffd04 	addi	r2,r22,-12
    5d5c:	1104703a 	and	r2,r2,r4
    5d60:	2900004c 	andi	r4,r5,1
    5d64:	2088b03a 	or	r4,r4,r2
    5d68:	81000115 	stw	r4,4(r16)
    5d6c:	01400144 	movi	r5,5
    5d70:	8089883a 	add	r4,r16,r2
    5d74:	21400115 	stw	r5,4(r4)
    5d78:	21400215 	stw	r5,8(r4)
    5d7c:	3080cd36 	bltu	r6,r2,60b4 <_malloc_r+0x794>
    5d80:	00800074 	movhi	r2,1
    5d84:	108fca04 	addi	r2,r2,16168
    5d88:	11000017 	ldw	r4,0(r2)
    5d8c:	20c0012e 	bgeu	r4,r3,5d94 <_malloc_r+0x474>
    5d90:	10c00015 	stw	r3,0(r2)
    5d94:	00800074 	movhi	r2,1
    5d98:	108fc904 	addi	r2,r2,16164
    5d9c:	11000017 	ldw	r4,0(r2)
    5da0:	9c000217 	ldw	r16,8(r19)
    5da4:	20c0012e 	bgeu	r4,r3,5dac <_malloc_r+0x48c>
    5da8:	10c00015 	stw	r3,0(r2)
    5dac:	80c00117 	ldw	r3,4(r16)
    5db0:	00bfff04 	movi	r2,-4
    5db4:	1886703a 	and	r3,r3,r2
    5db8:	1c45c83a 	sub	r2,r3,r17
    5dbc:	1c400236 	bltu	r3,r17,5dc8 <_malloc_r+0x4a8>
    5dc0:	00c003c4 	movi	r3,15
    5dc4:	18800416 	blt	r3,r2,5dd8 <_malloc_r+0x4b8>
    5dc8:	9009883a 	mov	r4,r18
    5dcc:	000dcd40 	call	dcd4 <__malloc_unlock>
    5dd0:	0005883a 	mov	r2,zero
    5dd4:	003f7b06 	br	5bc4 <__alt_data_end+0xfffbc7e4>
    5dd8:	88c00054 	ori	r3,r17,1
    5ddc:	80c00115 	stw	r3,4(r16)
    5de0:	8463883a 	add	r17,r16,r17
    5de4:	10800054 	ori	r2,r2,1
    5de8:	9c400215 	stw	r17,8(r19)
    5dec:	88800115 	stw	r2,4(r17)
    5df0:	9009883a 	mov	r4,r18
    5df4:	000dcd40 	call	dcd4 <__malloc_unlock>
    5df8:	80800204 	addi	r2,r16,8
    5dfc:	003f7106 	br	5bc4 <__alt_data_end+0xfffbc7e4>
    5e00:	00c00504 	movi	r3,20
    5e04:	18804a2e 	bgeu	r3,r2,5f30 <_malloc_r+0x610>
    5e08:	00c01504 	movi	r3,84
    5e0c:	18806e36 	bltu	r3,r2,5fc8 <_malloc_r+0x6a8>
    5e10:	8804d33a 	srli	r2,r17,12
    5e14:	12001bc4 	addi	r8,r2,111
    5e18:	11c01b84 	addi	r7,r2,110
    5e1c:	4209883a 	add	r4,r8,r8
    5e20:	003edd06 	br	5998 <__alt_data_end+0xfffbc5b8>
    5e24:	3804d27a 	srli	r2,r7,9
    5e28:	00c00104 	movi	r3,4
    5e2c:	1880442e 	bgeu	r3,r2,5f40 <_malloc_r+0x620>
    5e30:	00c00504 	movi	r3,20
    5e34:	18808136 	bltu	r3,r2,603c <_malloc_r+0x71c>
    5e38:	11401704 	addi	r5,r2,92
    5e3c:	10c016c4 	addi	r3,r2,91
    5e40:	294b883a 	add	r5,r5,r5
    5e44:	294b883a 	add	r5,r5,r5
    5e48:	294b883a 	add	r5,r5,r5
    5e4c:	994b883a 	add	r5,r19,r5
    5e50:	28800017 	ldw	r2,0(r5)
    5e54:	01800074 	movhi	r6,1
    5e58:	297ffe04 	addi	r5,r5,-8
    5e5c:	31837704 	addi	r6,r6,3548
    5e60:	28806526 	beq	r5,r2,5ff8 <_malloc_r+0x6d8>
    5e64:	01bfff04 	movi	r6,-4
    5e68:	10c00117 	ldw	r3,4(r2)
    5e6c:	1986703a 	and	r3,r3,r6
    5e70:	38c0022e 	bgeu	r7,r3,5e7c <_malloc_r+0x55c>
    5e74:	10800217 	ldw	r2,8(r2)
    5e78:	28bffb1e 	bne	r5,r2,5e68 <__alt_data_end+0xfffbca88>
    5e7c:	11400317 	ldw	r5,12(r2)
    5e80:	98c00117 	ldw	r3,4(r19)
    5e84:	81400315 	stw	r5,12(r16)
    5e88:	80800215 	stw	r2,8(r16)
    5e8c:	2c000215 	stw	r16,8(r5)
    5e90:	14000315 	stw	r16,12(r2)
    5e94:	003ef806 	br	5a78 <__alt_data_end+0xfffbc698>
    5e98:	88c00054 	ori	r3,r17,1
    5e9c:	80c00115 	stw	r3,4(r16)
    5ea0:	8463883a 	add	r17,r16,r17
    5ea4:	34400515 	stw	r17,20(r6)
    5ea8:	34400415 	stw	r17,16(r6)
    5eac:	10c00054 	ori	r3,r2,1
    5eb0:	8a000315 	stw	r8,12(r17)
    5eb4:	8a000215 	stw	r8,8(r17)
    5eb8:	88c00115 	stw	r3,4(r17)
    5ebc:	88a3883a 	add	r17,r17,r2
    5ec0:	88800015 	stw	r2,0(r17)
    5ec4:	9009883a 	mov	r4,r18
    5ec8:	000dcd40 	call	dcd4 <__malloc_unlock>
    5ecc:	80800204 	addi	r2,r16,8
    5ed0:	003f3c06 	br	5bc4 <__alt_data_end+0xfffbc7e4>
    5ed4:	30c00117 	ldw	r3,4(r6)
    5ed8:	003ee706 	br	5a78 <__alt_data_end+0xfffbc698>
    5edc:	5ac00044 	addi	r11,r11,1
    5ee0:	588000cc 	andi	r2,r11,3
    5ee4:	31800204 	addi	r6,r6,8
    5ee8:	103efd1e 	bne	r2,zero,5ae0 <__alt_data_end+0xfffbc700>
    5eec:	00002406 	br	5f80 <_malloc_r+0x660>
    5ef0:	14000317 	ldw	r16,12(r2)
    5ef4:	143f251e 	bne	r2,r16,5b8c <__alt_data_end+0xfffbc7ac>
    5ef8:	21000084 	addi	r4,r4,2
    5efc:	003ebc06 	br	59f0 <__alt_data_end+0xfffbc610>
    5f00:	8085883a 	add	r2,r16,r2
    5f04:	10c00117 	ldw	r3,4(r2)
    5f08:	81000317 	ldw	r4,12(r16)
    5f0c:	81400217 	ldw	r5,8(r16)
    5f10:	18c00054 	ori	r3,r3,1
    5f14:	10c00115 	stw	r3,4(r2)
    5f18:	29000315 	stw	r4,12(r5)
    5f1c:	21400215 	stw	r5,8(r4)
    5f20:	9009883a 	mov	r4,r18
    5f24:	000dcd40 	call	dcd4 <__malloc_unlock>
    5f28:	80800204 	addi	r2,r16,8
    5f2c:	003f2506 	br	5bc4 <__alt_data_end+0xfffbc7e4>
    5f30:	12001704 	addi	r8,r2,92
    5f34:	11c016c4 	addi	r7,r2,91
    5f38:	4209883a 	add	r4,r8,r8
    5f3c:	003e9606 	br	5998 <__alt_data_end+0xfffbc5b8>
    5f40:	3804d1ba 	srli	r2,r7,6
    5f44:	11400e44 	addi	r5,r2,57
    5f48:	10c00e04 	addi	r3,r2,56
    5f4c:	294b883a 	add	r5,r5,r5
    5f50:	003fbc06 	br	5e44 <__alt_data_end+0xfffbca64>
    5f54:	84ff5926 	beq	r16,r19,5cbc <__alt_data_end+0xfffbc8dc>
    5f58:	00800074 	movhi	r2,1
    5f5c:	10837704 	addi	r2,r2,3548
    5f60:	14000217 	ldw	r16,8(r2)
    5f64:	00bfff04 	movi	r2,-4
    5f68:	80c00117 	ldw	r3,4(r16)
    5f6c:	1886703a 	and	r3,r3,r2
    5f70:	003f9106 	br	5db8 <__alt_data_end+0xfffbc9d8>
    5f74:	60800217 	ldw	r2,8(r12)
    5f78:	213fffc4 	addi	r4,r4,-1
    5f7c:	1300651e 	bne	r2,r12,6114 <_malloc_r+0x7f4>
    5f80:	208000cc 	andi	r2,r4,3
    5f84:	633ffe04 	addi	r12,r12,-8
    5f88:	103ffa1e 	bne	r2,zero,5f74 <__alt_data_end+0xfffbcb94>
    5f8c:	98800117 	ldw	r2,4(r19)
    5f90:	0146303a 	nor	r3,zero,r5
    5f94:	1884703a 	and	r2,r3,r2
    5f98:	98800115 	stw	r2,4(r19)
    5f9c:	294b883a 	add	r5,r5,r5
    5fa0:	117f2836 	bltu	r2,r5,5c44 <__alt_data_end+0xfffbc864>
    5fa4:	283f2726 	beq	r5,zero,5c44 <__alt_data_end+0xfffbc864>
    5fa8:	2886703a 	and	r3,r5,r2
    5fac:	5809883a 	mov	r4,r11
    5fb0:	183ec31e 	bne	r3,zero,5ac0 <__alt_data_end+0xfffbc6e0>
    5fb4:	294b883a 	add	r5,r5,r5
    5fb8:	2886703a 	and	r3,r5,r2
    5fbc:	21000104 	addi	r4,r4,4
    5fc0:	183ffc26 	beq	r3,zero,5fb4 <__alt_data_end+0xfffbcbd4>
    5fc4:	003ebe06 	br	5ac0 <__alt_data_end+0xfffbc6e0>
    5fc8:	00c05504 	movi	r3,340
    5fcc:	18801236 	bltu	r3,r2,6018 <_malloc_r+0x6f8>
    5fd0:	8804d3fa 	srli	r2,r17,15
    5fd4:	12001e04 	addi	r8,r2,120
    5fd8:	11c01dc4 	addi	r7,r2,119
    5fdc:	4209883a 	add	r4,r8,r8
    5fe0:	003e6d06 	br	5998 <__alt_data_end+0xfffbc5b8>
    5fe4:	00c40004 	movi	r3,4096
    5fe8:	003f4606 	br	5d04 <__alt_data_end+0xfffbc924>
    5fec:	00800044 	movi	r2,1
    5ff0:	a0800115 	stw	r2,4(r20)
    5ff4:	003f7406 	br	5dc8 <__alt_data_end+0xfffbc9e8>
    5ff8:	1805d0ba 	srai	r2,r3,2
    5ffc:	01c00044 	movi	r7,1
    6000:	30c00117 	ldw	r3,4(r6)
    6004:	388e983a 	sll	r7,r7,r2
    6008:	2805883a 	mov	r2,r5
    600c:	38c6b03a 	or	r3,r7,r3
    6010:	30c00115 	stw	r3,4(r6)
    6014:	003f9b06 	br	5e84 <__alt_data_end+0xfffbcaa4>
    6018:	00c15504 	movi	r3,1364
    601c:	18801a36 	bltu	r3,r2,6088 <_malloc_r+0x768>
    6020:	8804d4ba 	srli	r2,r17,18
    6024:	12001f44 	addi	r8,r2,125
    6028:	11c01f04 	addi	r7,r2,124
    602c:	4209883a 	add	r4,r8,r8
    6030:	003e5906 	br	5998 <__alt_data_end+0xfffbc5b8>
    6034:	ad400404 	addi	r21,r21,16
    6038:	003f1706 	br	5c98 <__alt_data_end+0xfffbc8b8>
    603c:	00c01504 	movi	r3,84
    6040:	18802336 	bltu	r3,r2,60d0 <_malloc_r+0x7b0>
    6044:	3804d33a 	srli	r2,r7,12
    6048:	11401bc4 	addi	r5,r2,111
    604c:	10c01b84 	addi	r3,r2,110
    6050:	294b883a 	add	r5,r5,r5
    6054:	003f7b06 	br	5e44 <__alt_data_end+0xfffbca64>
    6058:	9c000217 	ldw	r16,8(r19)
    605c:	00bfff04 	movi	r2,-4
    6060:	80c00117 	ldw	r3,4(r16)
    6064:	1886703a 	and	r3,r3,r2
    6068:	003f5306 	br	5db8 <__alt_data_end+0xfffbc9d8>
    606c:	3083ffcc 	andi	r2,r6,4095
    6070:	103f181e 	bne	r2,zero,5cd4 <__alt_data_end+0xfffbc8f4>
    6074:	99000217 	ldw	r4,8(r19)
    6078:	b545883a 	add	r2,r22,r21
    607c:	10800054 	ori	r2,r2,1
    6080:	20800115 	stw	r2,4(r4)
    6084:	003f3e06 	br	5d80 <__alt_data_end+0xfffbc9a0>
    6088:	01003f84 	movi	r4,254
    608c:	02001fc4 	movi	r8,127
    6090:	01c01f84 	movi	r7,126
    6094:	003e4006 	br	5998 <__alt_data_end+0xfffbc5b8>
    6098:	00800074 	movhi	r2,1
    609c:	1088fe04 	addi	r2,r2,9208
    60a0:	15000015 	stw	r20,0(r2)
    60a4:	003f1106 	br	5cec <__alt_data_end+0xfffbc90c>
    60a8:	00800044 	movi	r2,1
    60ac:	002b883a 	mov	r21,zero
    60b0:	003f1f06 	br	5d30 <__alt_data_end+0xfffbc950>
    60b4:	81400204 	addi	r5,r16,8
    60b8:	9009883a 	mov	r4,r18
    60bc:	0004d280 	call	4d28 <_free_r>
    60c0:	00800074 	movhi	r2,1
    60c4:	108fd404 	addi	r2,r2,16208
    60c8:	10c00017 	ldw	r3,0(r2)
    60cc:	003f2c06 	br	5d80 <__alt_data_end+0xfffbc9a0>
    60d0:	00c05504 	movi	r3,340
    60d4:	18800536 	bltu	r3,r2,60ec <_malloc_r+0x7cc>
    60d8:	3804d3fa 	srli	r2,r7,15
    60dc:	11401e04 	addi	r5,r2,120
    60e0:	10c01dc4 	addi	r3,r2,119
    60e4:	294b883a 	add	r5,r5,r5
    60e8:	003f5606 	br	5e44 <__alt_data_end+0xfffbca64>
    60ec:	00c15504 	movi	r3,1364
    60f0:	18800536 	bltu	r3,r2,6108 <_malloc_r+0x7e8>
    60f4:	3804d4ba 	srli	r2,r7,18
    60f8:	11401f44 	addi	r5,r2,125
    60fc:	10c01f04 	addi	r3,r2,124
    6100:	294b883a 	add	r5,r5,r5
    6104:	003f4f06 	br	5e44 <__alt_data_end+0xfffbca64>
    6108:	01403f84 	movi	r5,254
    610c:	00c01f84 	movi	r3,126
    6110:	003f4c06 	br	5e44 <__alt_data_end+0xfffbca64>
    6114:	98800117 	ldw	r2,4(r19)
    6118:	003fa006 	br	5f9c <__alt_data_end+0xfffbcbbc>
    611c:	8808d0fa 	srli	r4,r17,3
    6120:	20800044 	addi	r2,r4,1
    6124:	1085883a 	add	r2,r2,r2
    6128:	003e9006 	br	5b6c <__alt_data_end+0xfffbc78c>

0000612c <memchr>:
    612c:	208000cc 	andi	r2,r4,3
    6130:	280f883a 	mov	r7,r5
    6134:	10003426 	beq	r2,zero,6208 <memchr+0xdc>
    6138:	30bfffc4 	addi	r2,r6,-1
    613c:	30001a26 	beq	r6,zero,61a8 <memchr+0x7c>
    6140:	20c00003 	ldbu	r3,0(r4)
    6144:	29803fcc 	andi	r6,r5,255
    6148:	30c0051e 	bne	r6,r3,6160 <memchr+0x34>
    614c:	00001806 	br	61b0 <memchr+0x84>
    6150:	10001526 	beq	r2,zero,61a8 <memchr+0x7c>
    6154:	20c00003 	ldbu	r3,0(r4)
    6158:	10bfffc4 	addi	r2,r2,-1
    615c:	30c01426 	beq	r6,r3,61b0 <memchr+0x84>
    6160:	21000044 	addi	r4,r4,1
    6164:	20c000cc 	andi	r3,r4,3
    6168:	183ff91e 	bne	r3,zero,6150 <__alt_data_end+0xfffbcd70>
    616c:	020000c4 	movi	r8,3
    6170:	40801136 	bltu	r8,r2,61b8 <memchr+0x8c>
    6174:	10000c26 	beq	r2,zero,61a8 <memchr+0x7c>
    6178:	20c00003 	ldbu	r3,0(r4)
    617c:	29403fcc 	andi	r5,r5,255
    6180:	28c00b26 	beq	r5,r3,61b0 <memchr+0x84>
    6184:	20c00044 	addi	r3,r4,1
    6188:	39803fcc 	andi	r6,r7,255
    618c:	2089883a 	add	r4,r4,r2
    6190:	00000306 	br	61a0 <memchr+0x74>
    6194:	18c00044 	addi	r3,r3,1
    6198:	197fffc3 	ldbu	r5,-1(r3)
    619c:	31400526 	beq	r6,r5,61b4 <memchr+0x88>
    61a0:	1805883a 	mov	r2,r3
    61a4:	20fffb1e 	bne	r4,r3,6194 <__alt_data_end+0xfffbcdb4>
    61a8:	0005883a 	mov	r2,zero
    61ac:	f800283a 	ret
    61b0:	2005883a 	mov	r2,r4
    61b4:	f800283a 	ret
    61b8:	28c03fcc 	andi	r3,r5,255
    61bc:	1812923a 	slli	r9,r3,8
    61c0:	02ffbff4 	movhi	r11,65279
    61c4:	02a02074 	movhi	r10,32897
    61c8:	48d2b03a 	or	r9,r9,r3
    61cc:	4806943a 	slli	r3,r9,16
    61d0:	5affbfc4 	addi	r11,r11,-257
    61d4:	52a02004 	addi	r10,r10,-32640
    61d8:	48d2b03a 	or	r9,r9,r3
    61dc:	20c00017 	ldw	r3,0(r4)
    61e0:	48c6f03a 	xor	r3,r9,r3
    61e4:	1acd883a 	add	r6,r3,r11
    61e8:	00c6303a 	nor	r3,zero,r3
    61ec:	30c6703a 	and	r3,r6,r3
    61f0:	1a86703a 	and	r3,r3,r10
    61f4:	183fe01e 	bne	r3,zero,6178 <__alt_data_end+0xfffbcd98>
    61f8:	10bfff04 	addi	r2,r2,-4
    61fc:	21000104 	addi	r4,r4,4
    6200:	40bff636 	bltu	r8,r2,61dc <__alt_data_end+0xfffbcdfc>
    6204:	003fdb06 	br	6174 <__alt_data_end+0xfffbcd94>
    6208:	3005883a 	mov	r2,r6
    620c:	003fd706 	br	616c <__alt_data_end+0xfffbcd8c>

00006210 <memcpy>:
    6210:	defffd04 	addi	sp,sp,-12
    6214:	dfc00215 	stw	ra,8(sp)
    6218:	dc400115 	stw	r17,4(sp)
    621c:	dc000015 	stw	r16,0(sp)
    6220:	00c003c4 	movi	r3,15
    6224:	2005883a 	mov	r2,r4
    6228:	1980452e 	bgeu	r3,r6,6340 <memcpy+0x130>
    622c:	2906b03a 	or	r3,r5,r4
    6230:	18c000cc 	andi	r3,r3,3
    6234:	1800441e 	bne	r3,zero,6348 <memcpy+0x138>
    6238:	347ffc04 	addi	r17,r6,-16
    623c:	8822d13a 	srli	r17,r17,4
    6240:	28c00104 	addi	r3,r5,4
    6244:	23400104 	addi	r13,r4,4
    6248:	8820913a 	slli	r16,r17,4
    624c:	2b000204 	addi	r12,r5,8
    6250:	22c00204 	addi	r11,r4,8
    6254:	84000504 	addi	r16,r16,20
    6258:	2a800304 	addi	r10,r5,12
    625c:	22400304 	addi	r9,r4,12
    6260:	2c21883a 	add	r16,r5,r16
    6264:	2811883a 	mov	r8,r5
    6268:	200f883a 	mov	r7,r4
    626c:	41000017 	ldw	r4,0(r8)
    6270:	1fc00017 	ldw	ra,0(r3)
    6274:	63c00017 	ldw	r15,0(r12)
    6278:	39000015 	stw	r4,0(r7)
    627c:	53800017 	ldw	r14,0(r10)
    6280:	6fc00015 	stw	ra,0(r13)
    6284:	5bc00015 	stw	r15,0(r11)
    6288:	4b800015 	stw	r14,0(r9)
    628c:	18c00404 	addi	r3,r3,16
    6290:	39c00404 	addi	r7,r7,16
    6294:	42000404 	addi	r8,r8,16
    6298:	6b400404 	addi	r13,r13,16
    629c:	63000404 	addi	r12,r12,16
    62a0:	5ac00404 	addi	r11,r11,16
    62a4:	52800404 	addi	r10,r10,16
    62a8:	4a400404 	addi	r9,r9,16
    62ac:	1c3fef1e 	bne	r3,r16,626c <__alt_data_end+0xfffbce8c>
    62b0:	89c00044 	addi	r7,r17,1
    62b4:	380e913a 	slli	r7,r7,4
    62b8:	310003cc 	andi	r4,r6,15
    62bc:	02c000c4 	movi	r11,3
    62c0:	11c7883a 	add	r3,r2,r7
    62c4:	29cb883a 	add	r5,r5,r7
    62c8:	5900212e 	bgeu	r11,r4,6350 <memcpy+0x140>
    62cc:	1813883a 	mov	r9,r3
    62d0:	2811883a 	mov	r8,r5
    62d4:	200f883a 	mov	r7,r4
    62d8:	42800017 	ldw	r10,0(r8)
    62dc:	4a400104 	addi	r9,r9,4
    62e0:	39ffff04 	addi	r7,r7,-4
    62e4:	4abfff15 	stw	r10,-4(r9)
    62e8:	42000104 	addi	r8,r8,4
    62ec:	59fffa36 	bltu	r11,r7,62d8 <__alt_data_end+0xfffbcef8>
    62f0:	213fff04 	addi	r4,r4,-4
    62f4:	2008d0ba 	srli	r4,r4,2
    62f8:	318000cc 	andi	r6,r6,3
    62fc:	21000044 	addi	r4,r4,1
    6300:	2109883a 	add	r4,r4,r4
    6304:	2109883a 	add	r4,r4,r4
    6308:	1907883a 	add	r3,r3,r4
    630c:	290b883a 	add	r5,r5,r4
    6310:	30000626 	beq	r6,zero,632c <memcpy+0x11c>
    6314:	198d883a 	add	r6,r3,r6
    6318:	29c00003 	ldbu	r7,0(r5)
    631c:	18c00044 	addi	r3,r3,1
    6320:	29400044 	addi	r5,r5,1
    6324:	19ffffc5 	stb	r7,-1(r3)
    6328:	19bffb1e 	bne	r3,r6,6318 <__alt_data_end+0xfffbcf38>
    632c:	dfc00217 	ldw	ra,8(sp)
    6330:	dc400117 	ldw	r17,4(sp)
    6334:	dc000017 	ldw	r16,0(sp)
    6338:	dec00304 	addi	sp,sp,12
    633c:	f800283a 	ret
    6340:	2007883a 	mov	r3,r4
    6344:	003ff206 	br	6310 <__alt_data_end+0xfffbcf30>
    6348:	2007883a 	mov	r3,r4
    634c:	003ff106 	br	6314 <__alt_data_end+0xfffbcf34>
    6350:	200d883a 	mov	r6,r4
    6354:	003fee06 	br	6310 <__alt_data_end+0xfffbcf30>

00006358 <memmove>:
    6358:	2005883a 	mov	r2,r4
    635c:	29000b2e 	bgeu	r5,r4,638c <memmove+0x34>
    6360:	298f883a 	add	r7,r5,r6
    6364:	21c0092e 	bgeu	r4,r7,638c <memmove+0x34>
    6368:	2187883a 	add	r3,r4,r6
    636c:	198bc83a 	sub	r5,r3,r6
    6370:	30004826 	beq	r6,zero,6494 <memmove+0x13c>
    6374:	39ffffc4 	addi	r7,r7,-1
    6378:	39000003 	ldbu	r4,0(r7)
    637c:	18ffffc4 	addi	r3,r3,-1
    6380:	19000005 	stb	r4,0(r3)
    6384:	28fffb1e 	bne	r5,r3,6374 <__alt_data_end+0xfffbcf94>
    6388:	f800283a 	ret
    638c:	00c003c4 	movi	r3,15
    6390:	1980412e 	bgeu	r3,r6,6498 <memmove+0x140>
    6394:	2886b03a 	or	r3,r5,r2
    6398:	18c000cc 	andi	r3,r3,3
    639c:	1800401e 	bne	r3,zero,64a0 <memmove+0x148>
    63a0:	33fffc04 	addi	r15,r6,-16
    63a4:	781ed13a 	srli	r15,r15,4
    63a8:	28c00104 	addi	r3,r5,4
    63ac:	13400104 	addi	r13,r2,4
    63b0:	781c913a 	slli	r14,r15,4
    63b4:	2b000204 	addi	r12,r5,8
    63b8:	12c00204 	addi	r11,r2,8
    63bc:	73800504 	addi	r14,r14,20
    63c0:	2a800304 	addi	r10,r5,12
    63c4:	12400304 	addi	r9,r2,12
    63c8:	2b9d883a 	add	r14,r5,r14
    63cc:	2811883a 	mov	r8,r5
    63d0:	100f883a 	mov	r7,r2
    63d4:	41000017 	ldw	r4,0(r8)
    63d8:	39c00404 	addi	r7,r7,16
    63dc:	18c00404 	addi	r3,r3,16
    63e0:	393ffc15 	stw	r4,-16(r7)
    63e4:	193ffc17 	ldw	r4,-16(r3)
    63e8:	6b400404 	addi	r13,r13,16
    63ec:	5ac00404 	addi	r11,r11,16
    63f0:	693ffc15 	stw	r4,-16(r13)
    63f4:	61000017 	ldw	r4,0(r12)
    63f8:	4a400404 	addi	r9,r9,16
    63fc:	42000404 	addi	r8,r8,16
    6400:	593ffc15 	stw	r4,-16(r11)
    6404:	51000017 	ldw	r4,0(r10)
    6408:	63000404 	addi	r12,r12,16
    640c:	52800404 	addi	r10,r10,16
    6410:	493ffc15 	stw	r4,-16(r9)
    6414:	1bbfef1e 	bne	r3,r14,63d4 <__alt_data_end+0xfffbcff4>
    6418:	79000044 	addi	r4,r15,1
    641c:	2008913a 	slli	r4,r4,4
    6420:	328003cc 	andi	r10,r6,15
    6424:	02c000c4 	movi	r11,3
    6428:	1107883a 	add	r3,r2,r4
    642c:	290b883a 	add	r5,r5,r4
    6430:	5a801e2e 	bgeu	r11,r10,64ac <memmove+0x154>
    6434:	1813883a 	mov	r9,r3
    6438:	2811883a 	mov	r8,r5
    643c:	500f883a 	mov	r7,r10
    6440:	41000017 	ldw	r4,0(r8)
    6444:	4a400104 	addi	r9,r9,4
    6448:	39ffff04 	addi	r7,r7,-4
    644c:	493fff15 	stw	r4,-4(r9)
    6450:	42000104 	addi	r8,r8,4
    6454:	59fffa36 	bltu	r11,r7,6440 <__alt_data_end+0xfffbd060>
    6458:	513fff04 	addi	r4,r10,-4
    645c:	2008d0ba 	srli	r4,r4,2
    6460:	318000cc 	andi	r6,r6,3
    6464:	21000044 	addi	r4,r4,1
    6468:	2109883a 	add	r4,r4,r4
    646c:	2109883a 	add	r4,r4,r4
    6470:	1907883a 	add	r3,r3,r4
    6474:	290b883a 	add	r5,r5,r4
    6478:	30000b26 	beq	r6,zero,64a8 <memmove+0x150>
    647c:	198d883a 	add	r6,r3,r6
    6480:	29c00003 	ldbu	r7,0(r5)
    6484:	18c00044 	addi	r3,r3,1
    6488:	29400044 	addi	r5,r5,1
    648c:	19ffffc5 	stb	r7,-1(r3)
    6490:	19bffb1e 	bne	r3,r6,6480 <__alt_data_end+0xfffbd0a0>
    6494:	f800283a 	ret
    6498:	1007883a 	mov	r3,r2
    649c:	003ff606 	br	6478 <__alt_data_end+0xfffbd098>
    64a0:	1007883a 	mov	r3,r2
    64a4:	003ff506 	br	647c <__alt_data_end+0xfffbd09c>
    64a8:	f800283a 	ret
    64ac:	500d883a 	mov	r6,r10
    64b0:	003ff106 	br	6478 <__alt_data_end+0xfffbd098>

000064b4 <memset>:
    64b4:	20c000cc 	andi	r3,r4,3
    64b8:	2005883a 	mov	r2,r4
    64bc:	18004426 	beq	r3,zero,65d0 <memset+0x11c>
    64c0:	31ffffc4 	addi	r7,r6,-1
    64c4:	30004026 	beq	r6,zero,65c8 <memset+0x114>
    64c8:	2813883a 	mov	r9,r5
    64cc:	200d883a 	mov	r6,r4
    64d0:	2007883a 	mov	r3,r4
    64d4:	00000406 	br	64e8 <memset+0x34>
    64d8:	3a3fffc4 	addi	r8,r7,-1
    64dc:	31800044 	addi	r6,r6,1
    64e0:	38003926 	beq	r7,zero,65c8 <memset+0x114>
    64e4:	400f883a 	mov	r7,r8
    64e8:	18c00044 	addi	r3,r3,1
    64ec:	32400005 	stb	r9,0(r6)
    64f0:	1a0000cc 	andi	r8,r3,3
    64f4:	403ff81e 	bne	r8,zero,64d8 <__alt_data_end+0xfffbd0f8>
    64f8:	010000c4 	movi	r4,3
    64fc:	21c02d2e 	bgeu	r4,r7,65b4 <memset+0x100>
    6500:	29003fcc 	andi	r4,r5,255
    6504:	200c923a 	slli	r6,r4,8
    6508:	3108b03a 	or	r4,r6,r4
    650c:	200c943a 	slli	r6,r4,16
    6510:	218cb03a 	or	r6,r4,r6
    6514:	010003c4 	movi	r4,15
    6518:	21c0182e 	bgeu	r4,r7,657c <memset+0xc8>
    651c:	3b3ffc04 	addi	r12,r7,-16
    6520:	6018d13a 	srli	r12,r12,4
    6524:	1a000104 	addi	r8,r3,4
    6528:	1ac00204 	addi	r11,r3,8
    652c:	6008913a 	slli	r4,r12,4
    6530:	1a800304 	addi	r10,r3,12
    6534:	1813883a 	mov	r9,r3
    6538:	21000504 	addi	r4,r4,20
    653c:	1909883a 	add	r4,r3,r4
    6540:	49800015 	stw	r6,0(r9)
    6544:	41800015 	stw	r6,0(r8)
    6548:	59800015 	stw	r6,0(r11)
    654c:	51800015 	stw	r6,0(r10)
    6550:	42000404 	addi	r8,r8,16
    6554:	4a400404 	addi	r9,r9,16
    6558:	5ac00404 	addi	r11,r11,16
    655c:	52800404 	addi	r10,r10,16
    6560:	413ff71e 	bne	r8,r4,6540 <__alt_data_end+0xfffbd160>
    6564:	63000044 	addi	r12,r12,1
    6568:	6018913a 	slli	r12,r12,4
    656c:	39c003cc 	andi	r7,r7,15
    6570:	010000c4 	movi	r4,3
    6574:	1b07883a 	add	r3,r3,r12
    6578:	21c00e2e 	bgeu	r4,r7,65b4 <memset+0x100>
    657c:	1813883a 	mov	r9,r3
    6580:	3811883a 	mov	r8,r7
    6584:	010000c4 	movi	r4,3
    6588:	49800015 	stw	r6,0(r9)
    658c:	423fff04 	addi	r8,r8,-4
    6590:	4a400104 	addi	r9,r9,4
    6594:	223ffc36 	bltu	r4,r8,6588 <__alt_data_end+0xfffbd1a8>
    6598:	393fff04 	addi	r4,r7,-4
    659c:	2008d0ba 	srli	r4,r4,2
    65a0:	39c000cc 	andi	r7,r7,3
    65a4:	21000044 	addi	r4,r4,1
    65a8:	2109883a 	add	r4,r4,r4
    65ac:	2109883a 	add	r4,r4,r4
    65b0:	1907883a 	add	r3,r3,r4
    65b4:	38000526 	beq	r7,zero,65cc <memset+0x118>
    65b8:	19cf883a 	add	r7,r3,r7
    65bc:	19400005 	stb	r5,0(r3)
    65c0:	18c00044 	addi	r3,r3,1
    65c4:	38fffd1e 	bne	r7,r3,65bc <__alt_data_end+0xfffbd1dc>
    65c8:	f800283a 	ret
    65cc:	f800283a 	ret
    65d0:	2007883a 	mov	r3,r4
    65d4:	300f883a 	mov	r7,r6
    65d8:	003fc706 	br	64f8 <__alt_data_end+0xfffbd118>

000065dc <_Balloc>:
    65dc:	20801317 	ldw	r2,76(r4)
    65e0:	defffc04 	addi	sp,sp,-16
    65e4:	dc400115 	stw	r17,4(sp)
    65e8:	dc000015 	stw	r16,0(sp)
    65ec:	dfc00315 	stw	ra,12(sp)
    65f0:	dc800215 	stw	r18,8(sp)
    65f4:	2023883a 	mov	r17,r4
    65f8:	2821883a 	mov	r16,r5
    65fc:	10000f26 	beq	r2,zero,663c <_Balloc+0x60>
    6600:	8407883a 	add	r3,r16,r16
    6604:	18c7883a 	add	r3,r3,r3
    6608:	10c7883a 	add	r3,r2,r3
    660c:	18800017 	ldw	r2,0(r3)
    6610:	10001126 	beq	r2,zero,6658 <_Balloc+0x7c>
    6614:	11000017 	ldw	r4,0(r2)
    6618:	19000015 	stw	r4,0(r3)
    661c:	10000415 	stw	zero,16(r2)
    6620:	10000315 	stw	zero,12(r2)
    6624:	dfc00317 	ldw	ra,12(sp)
    6628:	dc800217 	ldw	r18,8(sp)
    662c:	dc400117 	ldw	r17,4(sp)
    6630:	dc000017 	ldw	r16,0(sp)
    6634:	dec00404 	addi	sp,sp,16
    6638:	f800283a 	ret
    663c:	01800844 	movi	r6,33
    6640:	01400104 	movi	r5,4
    6644:	00099440 	call	9944 <_calloc_r>
    6648:	88801315 	stw	r2,76(r17)
    664c:	103fec1e 	bne	r2,zero,6600 <__alt_data_end+0xfffbd220>
    6650:	0005883a 	mov	r2,zero
    6654:	003ff306 	br	6624 <__alt_data_end+0xfffbd244>
    6658:	01400044 	movi	r5,1
    665c:	2c24983a 	sll	r18,r5,r16
    6660:	8809883a 	mov	r4,r17
    6664:	91800144 	addi	r6,r18,5
    6668:	318d883a 	add	r6,r6,r6
    666c:	318d883a 	add	r6,r6,r6
    6670:	00099440 	call	9944 <_calloc_r>
    6674:	103ff626 	beq	r2,zero,6650 <__alt_data_end+0xfffbd270>
    6678:	14000115 	stw	r16,4(r2)
    667c:	14800215 	stw	r18,8(r2)
    6680:	003fe606 	br	661c <__alt_data_end+0xfffbd23c>

00006684 <_Bfree>:
    6684:	28000826 	beq	r5,zero,66a8 <_Bfree+0x24>
    6688:	28c00117 	ldw	r3,4(r5)
    668c:	20801317 	ldw	r2,76(r4)
    6690:	18c7883a 	add	r3,r3,r3
    6694:	18c7883a 	add	r3,r3,r3
    6698:	10c5883a 	add	r2,r2,r3
    669c:	10c00017 	ldw	r3,0(r2)
    66a0:	28c00015 	stw	r3,0(r5)
    66a4:	11400015 	stw	r5,0(r2)
    66a8:	f800283a 	ret

000066ac <__multadd>:
    66ac:	defff704 	addi	sp,sp,-36
    66b0:	dc800215 	stw	r18,8(sp)
    66b4:	2c800417 	ldw	r18,16(r5)
    66b8:	dd800615 	stw	r22,24(sp)
    66bc:	dd400515 	stw	r21,20(sp)
    66c0:	dd000415 	stw	r20,16(sp)
    66c4:	dcc00315 	stw	r19,12(sp)
    66c8:	dc400115 	stw	r17,4(sp)
    66cc:	dc000015 	stw	r16,0(sp)
    66d0:	dfc00815 	stw	ra,32(sp)
    66d4:	ddc00715 	stw	r23,28(sp)
    66d8:	2827883a 	mov	r19,r5
    66dc:	2029883a 	mov	r20,r4
    66e0:	3023883a 	mov	r17,r6
    66e4:	3821883a 	mov	r16,r7
    66e8:	2d400504 	addi	r21,r5,20
    66ec:	002d883a 	mov	r22,zero
    66f0:	adc00017 	ldw	r23,0(r21)
    66f4:	880b883a 	mov	r5,r17
    66f8:	ad400104 	addi	r21,r21,4
    66fc:	b93fffcc 	andi	r4,r23,65535
    6700:	000adf80 	call	adf8 <__mulsi3>
    6704:	b808d43a 	srli	r4,r23,16
    6708:	880b883a 	mov	r5,r17
    670c:	1421883a 	add	r16,r2,r16
    6710:	000adf80 	call	adf8 <__mulsi3>
    6714:	800ed43a 	srli	r7,r16,16
    6718:	80ffffcc 	andi	r3,r16,65535
    671c:	b5800044 	addi	r22,r22,1
    6720:	11c5883a 	add	r2,r2,r7
    6724:	100e943a 	slli	r7,r2,16
    6728:	1020d43a 	srli	r16,r2,16
    672c:	38c7883a 	add	r3,r7,r3
    6730:	a8ffff15 	stw	r3,-4(r21)
    6734:	b4bfee16 	blt	r22,r18,66f0 <__alt_data_end+0xfffbd310>
    6738:	80000926 	beq	r16,zero,6760 <__multadd+0xb4>
    673c:	98800217 	ldw	r2,8(r19)
    6740:	9080130e 	bge	r18,r2,6790 <__multadd+0xe4>
    6744:	90800144 	addi	r2,r18,5
    6748:	1085883a 	add	r2,r2,r2
    674c:	1085883a 	add	r2,r2,r2
    6750:	9885883a 	add	r2,r19,r2
    6754:	14000015 	stw	r16,0(r2)
    6758:	94800044 	addi	r18,r18,1
    675c:	9c800415 	stw	r18,16(r19)
    6760:	9805883a 	mov	r2,r19
    6764:	dfc00817 	ldw	ra,32(sp)
    6768:	ddc00717 	ldw	r23,28(sp)
    676c:	dd800617 	ldw	r22,24(sp)
    6770:	dd400517 	ldw	r21,20(sp)
    6774:	dd000417 	ldw	r20,16(sp)
    6778:	dcc00317 	ldw	r19,12(sp)
    677c:	dc800217 	ldw	r18,8(sp)
    6780:	dc400117 	ldw	r17,4(sp)
    6784:	dc000017 	ldw	r16,0(sp)
    6788:	dec00904 	addi	sp,sp,36
    678c:	f800283a 	ret
    6790:	99400117 	ldw	r5,4(r19)
    6794:	a009883a 	mov	r4,r20
    6798:	29400044 	addi	r5,r5,1
    679c:	00065dc0 	call	65dc <_Balloc>
    67a0:	99800417 	ldw	r6,16(r19)
    67a4:	99400304 	addi	r5,r19,12
    67a8:	11000304 	addi	r4,r2,12
    67ac:	31800084 	addi	r6,r6,2
    67b0:	318d883a 	add	r6,r6,r6
    67b4:	318d883a 	add	r6,r6,r6
    67b8:	1023883a 	mov	r17,r2
    67bc:	00062100 	call	6210 <memcpy>
    67c0:	98000a26 	beq	r19,zero,67ec <__multadd+0x140>
    67c4:	98c00117 	ldw	r3,4(r19)
    67c8:	a0801317 	ldw	r2,76(r20)
    67cc:	18c7883a 	add	r3,r3,r3
    67d0:	18c7883a 	add	r3,r3,r3
    67d4:	10c5883a 	add	r2,r2,r3
    67d8:	10c00017 	ldw	r3,0(r2)
    67dc:	98c00015 	stw	r3,0(r19)
    67e0:	14c00015 	stw	r19,0(r2)
    67e4:	8827883a 	mov	r19,r17
    67e8:	003fd606 	br	6744 <__alt_data_end+0xfffbd364>
    67ec:	8827883a 	mov	r19,r17
    67f0:	003fd406 	br	6744 <__alt_data_end+0xfffbd364>

000067f4 <__s2b>:
    67f4:	defff904 	addi	sp,sp,-28
    67f8:	dc400115 	stw	r17,4(sp)
    67fc:	dc000015 	stw	r16,0(sp)
    6800:	2023883a 	mov	r17,r4
    6804:	2821883a 	mov	r16,r5
    6808:	39000204 	addi	r4,r7,8
    680c:	01400244 	movi	r5,9
    6810:	dcc00315 	stw	r19,12(sp)
    6814:	dc800215 	stw	r18,8(sp)
    6818:	dfc00615 	stw	ra,24(sp)
    681c:	dd400515 	stw	r21,20(sp)
    6820:	dd000415 	stw	r20,16(sp)
    6824:	3825883a 	mov	r18,r7
    6828:	3027883a 	mov	r19,r6
    682c:	000ac440 	call	ac44 <__divsi3>
    6830:	00c00044 	movi	r3,1
    6834:	000b883a 	mov	r5,zero
    6838:	1880030e 	bge	r3,r2,6848 <__s2b+0x54>
    683c:	18c7883a 	add	r3,r3,r3
    6840:	29400044 	addi	r5,r5,1
    6844:	18bffd16 	blt	r3,r2,683c <__alt_data_end+0xfffbd45c>
    6848:	8809883a 	mov	r4,r17
    684c:	00065dc0 	call	65dc <_Balloc>
    6850:	d8c00717 	ldw	r3,28(sp)
    6854:	10c00515 	stw	r3,20(r2)
    6858:	00c00044 	movi	r3,1
    685c:	10c00415 	stw	r3,16(r2)
    6860:	00c00244 	movi	r3,9
    6864:	1cc0210e 	bge	r3,r19,68ec <__s2b+0xf8>
    6868:	80eb883a 	add	r21,r16,r3
    686c:	a829883a 	mov	r20,r21
    6870:	84e1883a 	add	r16,r16,r19
    6874:	a1c00007 	ldb	r7,0(r20)
    6878:	01800284 	movi	r6,10
    687c:	a5000044 	addi	r20,r20,1
    6880:	100b883a 	mov	r5,r2
    6884:	39fff404 	addi	r7,r7,-48
    6888:	8809883a 	mov	r4,r17
    688c:	00066ac0 	call	66ac <__multadd>
    6890:	a43ff81e 	bne	r20,r16,6874 <__alt_data_end+0xfffbd494>
    6894:	ace1883a 	add	r16,r21,r19
    6898:	843ffe04 	addi	r16,r16,-8
    689c:	9c800a0e 	bge	r19,r18,68c8 <__s2b+0xd4>
    68a0:	94e5c83a 	sub	r18,r18,r19
    68a4:	84a5883a 	add	r18,r16,r18
    68a8:	81c00007 	ldb	r7,0(r16)
    68ac:	01800284 	movi	r6,10
    68b0:	84000044 	addi	r16,r16,1
    68b4:	100b883a 	mov	r5,r2
    68b8:	39fff404 	addi	r7,r7,-48
    68bc:	8809883a 	mov	r4,r17
    68c0:	00066ac0 	call	66ac <__multadd>
    68c4:	84bff81e 	bne	r16,r18,68a8 <__alt_data_end+0xfffbd4c8>
    68c8:	dfc00617 	ldw	ra,24(sp)
    68cc:	dd400517 	ldw	r21,20(sp)
    68d0:	dd000417 	ldw	r20,16(sp)
    68d4:	dcc00317 	ldw	r19,12(sp)
    68d8:	dc800217 	ldw	r18,8(sp)
    68dc:	dc400117 	ldw	r17,4(sp)
    68e0:	dc000017 	ldw	r16,0(sp)
    68e4:	dec00704 	addi	sp,sp,28
    68e8:	f800283a 	ret
    68ec:	84000284 	addi	r16,r16,10
    68f0:	1827883a 	mov	r19,r3
    68f4:	003fe906 	br	689c <__alt_data_end+0xfffbd4bc>

000068f8 <__hi0bits>:
    68f8:	20bfffec 	andhi	r2,r4,65535
    68fc:	1000141e 	bne	r2,zero,6950 <__hi0bits+0x58>
    6900:	2008943a 	slli	r4,r4,16
    6904:	00800404 	movi	r2,16
    6908:	20ffc02c 	andhi	r3,r4,65280
    690c:	1800021e 	bne	r3,zero,6918 <__hi0bits+0x20>
    6910:	2008923a 	slli	r4,r4,8
    6914:	10800204 	addi	r2,r2,8
    6918:	20fc002c 	andhi	r3,r4,61440
    691c:	1800021e 	bne	r3,zero,6928 <__hi0bits+0x30>
    6920:	2008913a 	slli	r4,r4,4
    6924:	10800104 	addi	r2,r2,4
    6928:	20f0002c 	andhi	r3,r4,49152
    692c:	1800031e 	bne	r3,zero,693c <__hi0bits+0x44>
    6930:	2109883a 	add	r4,r4,r4
    6934:	10800084 	addi	r2,r2,2
    6938:	2109883a 	add	r4,r4,r4
    693c:	20000316 	blt	r4,zero,694c <__hi0bits+0x54>
    6940:	2110002c 	andhi	r4,r4,16384
    6944:	2000041e 	bne	r4,zero,6958 <__hi0bits+0x60>
    6948:	00800804 	movi	r2,32
    694c:	f800283a 	ret
    6950:	0005883a 	mov	r2,zero
    6954:	003fec06 	br	6908 <__alt_data_end+0xfffbd528>
    6958:	10800044 	addi	r2,r2,1
    695c:	f800283a 	ret

00006960 <__lo0bits>:
    6960:	20c00017 	ldw	r3,0(r4)
    6964:	188001cc 	andi	r2,r3,7
    6968:	10000826 	beq	r2,zero,698c <__lo0bits+0x2c>
    696c:	1880004c 	andi	r2,r3,1
    6970:	1000211e 	bne	r2,zero,69f8 <__lo0bits+0x98>
    6974:	1880008c 	andi	r2,r3,2
    6978:	1000211e 	bne	r2,zero,6a00 <__lo0bits+0xa0>
    697c:	1806d0ba 	srli	r3,r3,2
    6980:	00800084 	movi	r2,2
    6984:	20c00015 	stw	r3,0(r4)
    6988:	f800283a 	ret
    698c:	18bfffcc 	andi	r2,r3,65535
    6990:	10001326 	beq	r2,zero,69e0 <__lo0bits+0x80>
    6994:	0005883a 	mov	r2,zero
    6998:	19403fcc 	andi	r5,r3,255
    699c:	2800021e 	bne	r5,zero,69a8 <__lo0bits+0x48>
    69a0:	1806d23a 	srli	r3,r3,8
    69a4:	10800204 	addi	r2,r2,8
    69a8:	194003cc 	andi	r5,r3,15
    69ac:	2800021e 	bne	r5,zero,69b8 <__lo0bits+0x58>
    69b0:	1806d13a 	srli	r3,r3,4
    69b4:	10800104 	addi	r2,r2,4
    69b8:	194000cc 	andi	r5,r3,3
    69bc:	2800021e 	bne	r5,zero,69c8 <__lo0bits+0x68>
    69c0:	1806d0ba 	srli	r3,r3,2
    69c4:	10800084 	addi	r2,r2,2
    69c8:	1940004c 	andi	r5,r3,1
    69cc:	2800081e 	bne	r5,zero,69f0 <__lo0bits+0x90>
    69d0:	1806d07a 	srli	r3,r3,1
    69d4:	1800051e 	bne	r3,zero,69ec <__lo0bits+0x8c>
    69d8:	00800804 	movi	r2,32
    69dc:	f800283a 	ret
    69e0:	1806d43a 	srli	r3,r3,16
    69e4:	00800404 	movi	r2,16
    69e8:	003feb06 	br	6998 <__alt_data_end+0xfffbd5b8>
    69ec:	10800044 	addi	r2,r2,1
    69f0:	20c00015 	stw	r3,0(r4)
    69f4:	f800283a 	ret
    69f8:	0005883a 	mov	r2,zero
    69fc:	f800283a 	ret
    6a00:	1806d07a 	srli	r3,r3,1
    6a04:	00800044 	movi	r2,1
    6a08:	20c00015 	stw	r3,0(r4)
    6a0c:	f800283a 	ret

00006a10 <__i2b>:
    6a10:	defffd04 	addi	sp,sp,-12
    6a14:	dc000015 	stw	r16,0(sp)
    6a18:	04000044 	movi	r16,1
    6a1c:	dc400115 	stw	r17,4(sp)
    6a20:	2823883a 	mov	r17,r5
    6a24:	800b883a 	mov	r5,r16
    6a28:	dfc00215 	stw	ra,8(sp)
    6a2c:	00065dc0 	call	65dc <_Balloc>
    6a30:	14400515 	stw	r17,20(r2)
    6a34:	14000415 	stw	r16,16(r2)
    6a38:	dfc00217 	ldw	ra,8(sp)
    6a3c:	dc400117 	ldw	r17,4(sp)
    6a40:	dc000017 	ldw	r16,0(sp)
    6a44:	dec00304 	addi	sp,sp,12
    6a48:	f800283a 	ret

00006a4c <__multiply>:
    6a4c:	deffef04 	addi	sp,sp,-68
    6a50:	dc400815 	stw	r17,32(sp)
    6a54:	dc000715 	stw	r16,28(sp)
    6a58:	34400417 	ldw	r17,16(r6)
    6a5c:	2c000417 	ldw	r16,16(r5)
    6a60:	dd800d15 	stw	r22,52(sp)
    6a64:	dc800915 	stw	r18,36(sp)
    6a68:	dfc01015 	stw	ra,64(sp)
    6a6c:	df000f15 	stw	fp,60(sp)
    6a70:	ddc00e15 	stw	r23,56(sp)
    6a74:	dd400c15 	stw	r21,48(sp)
    6a78:	dd000b15 	stw	r20,44(sp)
    6a7c:	dcc00a15 	stw	r19,40(sp)
    6a80:	2825883a 	mov	r18,r5
    6a84:	302d883a 	mov	r22,r6
    6a88:	8440050e 	bge	r16,r17,6aa0 <__multiply+0x54>
    6a8c:	8007883a 	mov	r3,r16
    6a90:	3025883a 	mov	r18,r6
    6a94:	8821883a 	mov	r16,r17
    6a98:	282d883a 	mov	r22,r5
    6a9c:	1823883a 	mov	r17,r3
    6aa0:	90800217 	ldw	r2,8(r18)
    6aa4:	8447883a 	add	r3,r16,r17
    6aa8:	d8c00215 	stw	r3,8(sp)
    6aac:	91400117 	ldw	r5,4(r18)
    6ab0:	10c0010e 	bge	r2,r3,6ab8 <__multiply+0x6c>
    6ab4:	29400044 	addi	r5,r5,1
    6ab8:	00065dc0 	call	65dc <_Balloc>
    6abc:	d8c00217 	ldw	r3,8(sp)
    6ac0:	d8800615 	stw	r2,24(sp)
    6ac4:	18eb883a 	add	r21,r3,r3
    6ac8:	ad6b883a 	add	r21,r21,r21
    6acc:	10c00504 	addi	r3,r2,20
    6ad0:	1d6b883a 	add	r21,r3,r21
    6ad4:	d8c00115 	stw	r3,4(sp)
    6ad8:	dd400315 	stw	r21,12(sp)
    6adc:	1805883a 	mov	r2,r3
    6ae0:	1d40042e 	bgeu	r3,r21,6af4 <__multiply+0xa8>
    6ae4:	d8c00317 	ldw	r3,12(sp)
    6ae8:	10000015 	stw	zero,0(r2)
    6aec:	10800104 	addi	r2,r2,4
    6af0:	10fffc36 	bltu	r2,r3,6ae4 <__alt_data_end+0xfffbd704>
    6af4:	8c63883a 	add	r17,r17,r17
    6af8:	b5800504 	addi	r22,r22,20
    6afc:	8c63883a 	add	r17,r17,r17
    6b00:	94800504 	addi	r18,r18,20
    6b04:	8421883a 	add	r16,r16,r16
    6b08:	b463883a 	add	r17,r22,r17
    6b0c:	8421883a 	add	r16,r16,r16
    6b10:	dd800015 	stw	r22,0(sp)
    6b14:	dc800415 	stw	r18,16(sp)
    6b18:	dc400515 	stw	r17,20(sp)
    6b1c:	9429883a 	add	r20,r18,r16
    6b20:	b4404f2e 	bgeu	r22,r17,6c60 <__multiply+0x214>
    6b24:	d8c00017 	ldw	r3,0(sp)
    6b28:	1c800017 	ldw	r18,0(r3)
    6b2c:	947fffcc 	andi	r17,r18,65535
    6b30:	88001e26 	beq	r17,zero,6bac <__multiply+0x160>
    6b34:	dd800117 	ldw	r22,4(sp)
    6b38:	dd400417 	ldw	r21,16(sp)
    6b3c:	0027883a 	mov	r19,zero
    6b40:	ac800017 	ldw	r18,0(r21)
    6b44:	b4000017 	ldw	r16,0(r22)
    6b48:	880b883a 	mov	r5,r17
    6b4c:	913fffcc 	andi	r4,r18,65535
    6b50:	000adf80 	call	adf8 <__mulsi3>
    6b54:	9008d43a 	srli	r4,r18,16
    6b58:	84bfffcc 	andi	r18,r16,65535
    6b5c:	1485883a 	add	r2,r2,r18
    6b60:	14e5883a 	add	r18,r2,r19
    6b64:	8020d43a 	srli	r16,r16,16
    6b68:	9026d43a 	srli	r19,r18,16
    6b6c:	880b883a 	mov	r5,r17
    6b70:	000adf80 	call	adf8 <__mulsi3>
    6b74:	1405883a 	add	r2,r2,r16
    6b78:	14e1883a 	add	r16,r2,r19
    6b7c:	90ffffcc 	andi	r3,r18,65535
    6b80:	8024943a 	slli	r18,r16,16
    6b84:	ad400104 	addi	r21,r21,4
    6b88:	b005883a 	mov	r2,r22
    6b8c:	90c6b03a 	or	r3,r18,r3
    6b90:	b0c00015 	stw	r3,0(r22)
    6b94:	8026d43a 	srli	r19,r16,16
    6b98:	b5800104 	addi	r22,r22,4
    6b9c:	ad3fe836 	bltu	r21,r20,6b40 <__alt_data_end+0xfffbd760>
    6ba0:	d8c00017 	ldw	r3,0(sp)
    6ba4:	14c00115 	stw	r19,4(r2)
    6ba8:	1c800017 	ldw	r18,0(r3)
    6bac:	9024d43a 	srli	r18,r18,16
    6bb0:	90002226 	beq	r18,zero,6c3c <__multiply+0x1f0>
    6bb4:	d8c00117 	ldw	r3,4(sp)
    6bb8:	dd800417 	ldw	r22,16(sp)
    6bbc:	002f883a 	mov	r23,zero
    6bc0:	1f000017 	ldw	fp,0(r3)
    6bc4:	1823883a 	mov	r17,r3
    6bc8:	182b883a 	mov	r21,r3
    6bcc:	e021883a 	mov	r16,fp
    6bd0:	00000106 	br	6bd8 <__multiply+0x18c>
    6bd4:	982b883a 	mov	r21,r19
    6bd8:	b100000b 	ldhu	r4,0(r22)
    6bdc:	8020d43a 	srli	r16,r16,16
    6be0:	900b883a 	mov	r5,r18
    6be4:	000adf80 	call	adf8 <__mulsi3>
    6be8:	1405883a 	add	r2,r2,r16
    6bec:	15ef883a 	add	r23,r2,r23
    6bf0:	b804943a 	slli	r2,r23,16
    6bf4:	e0ffffcc 	andi	r3,fp,65535
    6bf8:	8c400104 	addi	r17,r17,4
    6bfc:	10c6b03a 	or	r3,r2,r3
    6c00:	88ffff15 	stw	r3,-4(r17)
    6c04:	b5800104 	addi	r22,r22,4
    6c08:	b13fff17 	ldw	r4,-4(r22)
    6c0c:	acc00104 	addi	r19,r21,4
    6c10:	900b883a 	mov	r5,r18
    6c14:	2008d43a 	srli	r4,r4,16
    6c18:	9c000017 	ldw	r16,0(r19)
    6c1c:	000adf80 	call	adf8 <__mulsi3>
    6c20:	b806d43a 	srli	r3,r23,16
    6c24:	813fffcc 	andi	r4,r16,65535
    6c28:	1105883a 	add	r2,r2,r4
    6c2c:	10f9883a 	add	fp,r2,r3
    6c30:	e02ed43a 	srli	r23,fp,16
    6c34:	b53fe736 	bltu	r22,r20,6bd4 <__alt_data_end+0xfffbd7f4>
    6c38:	af000115 	stw	fp,4(r21)
    6c3c:	d8c00017 	ldw	r3,0(sp)
    6c40:	d9000517 	ldw	r4,20(sp)
    6c44:	18c00104 	addi	r3,r3,4
    6c48:	d8c00015 	stw	r3,0(sp)
    6c4c:	d8c00117 	ldw	r3,4(sp)
    6c50:	18c00104 	addi	r3,r3,4
    6c54:	d8c00115 	stw	r3,4(sp)
    6c58:	d8c00017 	ldw	r3,0(sp)
    6c5c:	193fb136 	bltu	r3,r4,6b24 <__alt_data_end+0xfffbd744>
    6c60:	d8c00217 	ldw	r3,8(sp)
    6c64:	00c00c0e 	bge	zero,r3,6c98 <__multiply+0x24c>
    6c68:	d8c00317 	ldw	r3,12(sp)
    6c6c:	18bfff17 	ldw	r2,-4(r3)
    6c70:	1d7fff04 	addi	r21,r3,-4
    6c74:	10000326 	beq	r2,zero,6c84 <__multiply+0x238>
    6c78:	00000706 	br	6c98 <__multiply+0x24c>
    6c7c:	a8800017 	ldw	r2,0(r21)
    6c80:	1000051e 	bne	r2,zero,6c98 <__multiply+0x24c>
    6c84:	d8c00217 	ldw	r3,8(sp)
    6c88:	ad7fff04 	addi	r21,r21,-4
    6c8c:	18ffffc4 	addi	r3,r3,-1
    6c90:	d8c00215 	stw	r3,8(sp)
    6c94:	183ff91e 	bne	r3,zero,6c7c <__alt_data_end+0xfffbd89c>
    6c98:	d8c00617 	ldw	r3,24(sp)
    6c9c:	d9000217 	ldw	r4,8(sp)
    6ca0:	1805883a 	mov	r2,r3
    6ca4:	19000415 	stw	r4,16(r3)
    6ca8:	dfc01017 	ldw	ra,64(sp)
    6cac:	df000f17 	ldw	fp,60(sp)
    6cb0:	ddc00e17 	ldw	r23,56(sp)
    6cb4:	dd800d17 	ldw	r22,52(sp)
    6cb8:	dd400c17 	ldw	r21,48(sp)
    6cbc:	dd000b17 	ldw	r20,44(sp)
    6cc0:	dcc00a17 	ldw	r19,40(sp)
    6cc4:	dc800917 	ldw	r18,36(sp)
    6cc8:	dc400817 	ldw	r17,32(sp)
    6ccc:	dc000717 	ldw	r16,28(sp)
    6cd0:	dec01104 	addi	sp,sp,68
    6cd4:	f800283a 	ret

00006cd8 <__pow5mult>:
    6cd8:	defffa04 	addi	sp,sp,-24
    6cdc:	dcc00315 	stw	r19,12(sp)
    6ce0:	dc000015 	stw	r16,0(sp)
    6ce4:	dfc00515 	stw	ra,20(sp)
    6ce8:	dd000415 	stw	r20,16(sp)
    6cec:	dc800215 	stw	r18,8(sp)
    6cf0:	dc400115 	stw	r17,4(sp)
    6cf4:	308000cc 	andi	r2,r6,3
    6cf8:	3021883a 	mov	r16,r6
    6cfc:	2027883a 	mov	r19,r4
    6d00:	10002f1e 	bne	r2,zero,6dc0 <__pow5mult+0xe8>
    6d04:	2825883a 	mov	r18,r5
    6d08:	8021d0ba 	srai	r16,r16,2
    6d0c:	80001a26 	beq	r16,zero,6d78 <__pow5mult+0xa0>
    6d10:	9c401217 	ldw	r17,72(r19)
    6d14:	8800061e 	bne	r17,zero,6d30 <__pow5mult+0x58>
    6d18:	00003406 	br	6dec <__pow5mult+0x114>
    6d1c:	8021d07a 	srai	r16,r16,1
    6d20:	80001526 	beq	r16,zero,6d78 <__pow5mult+0xa0>
    6d24:	88800017 	ldw	r2,0(r17)
    6d28:	10001c26 	beq	r2,zero,6d9c <__pow5mult+0xc4>
    6d2c:	1023883a 	mov	r17,r2
    6d30:	8080004c 	andi	r2,r16,1
    6d34:	103ff926 	beq	r2,zero,6d1c <__alt_data_end+0xfffbd93c>
    6d38:	880d883a 	mov	r6,r17
    6d3c:	900b883a 	mov	r5,r18
    6d40:	9809883a 	mov	r4,r19
    6d44:	0006a4c0 	call	6a4c <__multiply>
    6d48:	90001b26 	beq	r18,zero,6db8 <__pow5mult+0xe0>
    6d4c:	91000117 	ldw	r4,4(r18)
    6d50:	98c01317 	ldw	r3,76(r19)
    6d54:	8021d07a 	srai	r16,r16,1
    6d58:	2109883a 	add	r4,r4,r4
    6d5c:	2109883a 	add	r4,r4,r4
    6d60:	1907883a 	add	r3,r3,r4
    6d64:	19000017 	ldw	r4,0(r3)
    6d68:	91000015 	stw	r4,0(r18)
    6d6c:	1c800015 	stw	r18,0(r3)
    6d70:	1025883a 	mov	r18,r2
    6d74:	803feb1e 	bne	r16,zero,6d24 <__alt_data_end+0xfffbd944>
    6d78:	9005883a 	mov	r2,r18
    6d7c:	dfc00517 	ldw	ra,20(sp)
    6d80:	dd000417 	ldw	r20,16(sp)
    6d84:	dcc00317 	ldw	r19,12(sp)
    6d88:	dc800217 	ldw	r18,8(sp)
    6d8c:	dc400117 	ldw	r17,4(sp)
    6d90:	dc000017 	ldw	r16,0(sp)
    6d94:	dec00604 	addi	sp,sp,24
    6d98:	f800283a 	ret
    6d9c:	880d883a 	mov	r6,r17
    6da0:	880b883a 	mov	r5,r17
    6da4:	9809883a 	mov	r4,r19
    6da8:	0006a4c0 	call	6a4c <__multiply>
    6dac:	88800015 	stw	r2,0(r17)
    6db0:	10000015 	stw	zero,0(r2)
    6db4:	003fdd06 	br	6d2c <__alt_data_end+0xfffbd94c>
    6db8:	1025883a 	mov	r18,r2
    6dbc:	003fd706 	br	6d1c <__alt_data_end+0xfffbd93c>
    6dc0:	10bfffc4 	addi	r2,r2,-1
    6dc4:	1085883a 	add	r2,r2,r2
    6dc8:	00c00074 	movhi	r3,1
    6dcc:	18c1b204 	addi	r3,r3,1736
    6dd0:	1085883a 	add	r2,r2,r2
    6dd4:	1885883a 	add	r2,r3,r2
    6dd8:	11800017 	ldw	r6,0(r2)
    6ddc:	000f883a 	mov	r7,zero
    6de0:	00066ac0 	call	66ac <__multadd>
    6de4:	1025883a 	mov	r18,r2
    6de8:	003fc706 	br	6d08 <__alt_data_end+0xfffbd928>
    6dec:	05000044 	movi	r20,1
    6df0:	a00b883a 	mov	r5,r20
    6df4:	9809883a 	mov	r4,r19
    6df8:	00065dc0 	call	65dc <_Balloc>
    6dfc:	1023883a 	mov	r17,r2
    6e00:	00809c44 	movi	r2,625
    6e04:	88800515 	stw	r2,20(r17)
    6e08:	8d000415 	stw	r20,16(r17)
    6e0c:	9c401215 	stw	r17,72(r19)
    6e10:	88000015 	stw	zero,0(r17)
    6e14:	003fc606 	br	6d30 <__alt_data_end+0xfffbd950>

00006e18 <__lshift>:
    6e18:	defff904 	addi	sp,sp,-28
    6e1c:	dd400515 	stw	r21,20(sp)
    6e20:	dcc00315 	stw	r19,12(sp)
    6e24:	302bd17a 	srai	r21,r6,5
    6e28:	2cc00417 	ldw	r19,16(r5)
    6e2c:	28800217 	ldw	r2,8(r5)
    6e30:	dd000415 	stw	r20,16(sp)
    6e34:	ace7883a 	add	r19,r21,r19
    6e38:	dc800215 	stw	r18,8(sp)
    6e3c:	dc400115 	stw	r17,4(sp)
    6e40:	dc000015 	stw	r16,0(sp)
    6e44:	dfc00615 	stw	ra,24(sp)
    6e48:	9c000044 	addi	r16,r19,1
    6e4c:	2823883a 	mov	r17,r5
    6e50:	3029883a 	mov	r20,r6
    6e54:	2025883a 	mov	r18,r4
    6e58:	29400117 	ldw	r5,4(r5)
    6e5c:	1400030e 	bge	r2,r16,6e6c <__lshift+0x54>
    6e60:	1085883a 	add	r2,r2,r2
    6e64:	29400044 	addi	r5,r5,1
    6e68:	143ffd16 	blt	r2,r16,6e60 <__alt_data_end+0xfffbda80>
    6e6c:	9009883a 	mov	r4,r18
    6e70:	00065dc0 	call	65dc <_Balloc>
    6e74:	10c00504 	addi	r3,r2,20
    6e78:	0540070e 	bge	zero,r21,6e98 <__lshift+0x80>
    6e7c:	ad6b883a 	add	r21,r21,r21
    6e80:	ad6b883a 	add	r21,r21,r21
    6e84:	1809883a 	mov	r4,r3
    6e88:	1d47883a 	add	r3,r3,r21
    6e8c:	20000015 	stw	zero,0(r4)
    6e90:	21000104 	addi	r4,r4,4
    6e94:	193ffd1e 	bne	r3,r4,6e8c <__alt_data_end+0xfffbdaac>
    6e98:	8a000417 	ldw	r8,16(r17)
    6e9c:	89000504 	addi	r4,r17,20
    6ea0:	a18007cc 	andi	r6,r20,31
    6ea4:	4211883a 	add	r8,r8,r8
    6ea8:	4211883a 	add	r8,r8,r8
    6eac:	2211883a 	add	r8,r4,r8
    6eb0:	30002326 	beq	r6,zero,6f40 <__lshift+0x128>
    6eb4:	02400804 	movi	r9,32
    6eb8:	4993c83a 	sub	r9,r9,r6
    6ebc:	000b883a 	mov	r5,zero
    6ec0:	21c00017 	ldw	r7,0(r4)
    6ec4:	1815883a 	mov	r10,r3
    6ec8:	18c00104 	addi	r3,r3,4
    6ecc:	398e983a 	sll	r7,r7,r6
    6ed0:	21000104 	addi	r4,r4,4
    6ed4:	394ab03a 	or	r5,r7,r5
    6ed8:	197fff15 	stw	r5,-4(r3)
    6edc:	217fff17 	ldw	r5,-4(r4)
    6ee0:	2a4ad83a 	srl	r5,r5,r9
    6ee4:	223ff636 	bltu	r4,r8,6ec0 <__alt_data_end+0xfffbdae0>
    6ee8:	51400115 	stw	r5,4(r10)
    6eec:	28001a1e 	bne	r5,zero,6f58 <__lshift+0x140>
    6ef0:	843fffc4 	addi	r16,r16,-1
    6ef4:	14000415 	stw	r16,16(r2)
    6ef8:	88000826 	beq	r17,zero,6f1c <__lshift+0x104>
    6efc:	89000117 	ldw	r4,4(r17)
    6f00:	90c01317 	ldw	r3,76(r18)
    6f04:	2109883a 	add	r4,r4,r4
    6f08:	2109883a 	add	r4,r4,r4
    6f0c:	1907883a 	add	r3,r3,r4
    6f10:	19000017 	ldw	r4,0(r3)
    6f14:	89000015 	stw	r4,0(r17)
    6f18:	1c400015 	stw	r17,0(r3)
    6f1c:	dfc00617 	ldw	ra,24(sp)
    6f20:	dd400517 	ldw	r21,20(sp)
    6f24:	dd000417 	ldw	r20,16(sp)
    6f28:	dcc00317 	ldw	r19,12(sp)
    6f2c:	dc800217 	ldw	r18,8(sp)
    6f30:	dc400117 	ldw	r17,4(sp)
    6f34:	dc000017 	ldw	r16,0(sp)
    6f38:	dec00704 	addi	sp,sp,28
    6f3c:	f800283a 	ret
    6f40:	21400017 	ldw	r5,0(r4)
    6f44:	18c00104 	addi	r3,r3,4
    6f48:	21000104 	addi	r4,r4,4
    6f4c:	197fff15 	stw	r5,-4(r3)
    6f50:	223ffb36 	bltu	r4,r8,6f40 <__alt_data_end+0xfffbdb60>
    6f54:	003fe606 	br	6ef0 <__alt_data_end+0xfffbdb10>
    6f58:	9c000084 	addi	r16,r19,2
    6f5c:	003fe406 	br	6ef0 <__alt_data_end+0xfffbdb10>

00006f60 <__mcmp>:
    6f60:	20800417 	ldw	r2,16(r4)
    6f64:	28c00417 	ldw	r3,16(r5)
    6f68:	10c5c83a 	sub	r2,r2,r3
    6f6c:	1000111e 	bne	r2,zero,6fb4 <__mcmp+0x54>
    6f70:	18c7883a 	add	r3,r3,r3
    6f74:	18c7883a 	add	r3,r3,r3
    6f78:	21000504 	addi	r4,r4,20
    6f7c:	29400504 	addi	r5,r5,20
    6f80:	20c5883a 	add	r2,r4,r3
    6f84:	28cb883a 	add	r5,r5,r3
    6f88:	00000106 	br	6f90 <__mcmp+0x30>
    6f8c:	20800a2e 	bgeu	r4,r2,6fb8 <__mcmp+0x58>
    6f90:	10bfff04 	addi	r2,r2,-4
    6f94:	297fff04 	addi	r5,r5,-4
    6f98:	11800017 	ldw	r6,0(r2)
    6f9c:	28c00017 	ldw	r3,0(r5)
    6fa0:	30fffa26 	beq	r6,r3,6f8c <__alt_data_end+0xfffbdbac>
    6fa4:	30c00236 	bltu	r6,r3,6fb0 <__mcmp+0x50>
    6fa8:	00800044 	movi	r2,1
    6fac:	f800283a 	ret
    6fb0:	00bfffc4 	movi	r2,-1
    6fb4:	f800283a 	ret
    6fb8:	0005883a 	mov	r2,zero
    6fbc:	f800283a 	ret

00006fc0 <__mdiff>:
    6fc0:	28c00417 	ldw	r3,16(r5)
    6fc4:	30800417 	ldw	r2,16(r6)
    6fc8:	defffa04 	addi	sp,sp,-24
    6fcc:	dcc00315 	stw	r19,12(sp)
    6fd0:	dc800215 	stw	r18,8(sp)
    6fd4:	dfc00515 	stw	ra,20(sp)
    6fd8:	dd000415 	stw	r20,16(sp)
    6fdc:	dc400115 	stw	r17,4(sp)
    6fe0:	dc000015 	stw	r16,0(sp)
    6fe4:	1887c83a 	sub	r3,r3,r2
    6fe8:	2825883a 	mov	r18,r5
    6fec:	3027883a 	mov	r19,r6
    6ff0:	1800141e 	bne	r3,zero,7044 <__mdiff+0x84>
    6ff4:	1085883a 	add	r2,r2,r2
    6ff8:	1085883a 	add	r2,r2,r2
    6ffc:	2a000504 	addi	r8,r5,20
    7000:	34000504 	addi	r16,r6,20
    7004:	4087883a 	add	r3,r8,r2
    7008:	8085883a 	add	r2,r16,r2
    700c:	00000106 	br	7014 <__mdiff+0x54>
    7010:	40c0592e 	bgeu	r8,r3,7178 <__mdiff+0x1b8>
    7014:	18ffff04 	addi	r3,r3,-4
    7018:	10bfff04 	addi	r2,r2,-4
    701c:	19c00017 	ldw	r7,0(r3)
    7020:	11400017 	ldw	r5,0(r2)
    7024:	397ffa26 	beq	r7,r5,7010 <__alt_data_end+0xfffbdc30>
    7028:	3940592e 	bgeu	r7,r5,7190 <__mdiff+0x1d0>
    702c:	9005883a 	mov	r2,r18
    7030:	4023883a 	mov	r17,r8
    7034:	9825883a 	mov	r18,r19
    7038:	05000044 	movi	r20,1
    703c:	1027883a 	mov	r19,r2
    7040:	00000406 	br	7054 <__mdiff+0x94>
    7044:	18005616 	blt	r3,zero,71a0 <__mdiff+0x1e0>
    7048:	34400504 	addi	r17,r6,20
    704c:	2c000504 	addi	r16,r5,20
    7050:	0029883a 	mov	r20,zero
    7054:	91400117 	ldw	r5,4(r18)
    7058:	00065dc0 	call	65dc <_Balloc>
    705c:	92400417 	ldw	r9,16(r18)
    7060:	9b000417 	ldw	r12,16(r19)
    7064:	12c00504 	addi	r11,r2,20
    7068:	4a51883a 	add	r8,r9,r9
    706c:	6319883a 	add	r12,r12,r12
    7070:	4211883a 	add	r8,r8,r8
    7074:	6319883a 	add	r12,r12,r12
    7078:	15000315 	stw	r20,12(r2)
    707c:	8211883a 	add	r8,r16,r8
    7080:	8b19883a 	add	r12,r17,r12
    7084:	0007883a 	mov	r3,zero
    7088:	81400017 	ldw	r5,0(r16)
    708c:	89c00017 	ldw	r7,0(r17)
    7090:	59800104 	addi	r6,r11,4
    7094:	293fffcc 	andi	r4,r5,65535
    7098:	20c7883a 	add	r3,r4,r3
    709c:	393fffcc 	andi	r4,r7,65535
    70a0:	1909c83a 	sub	r4,r3,r4
    70a4:	280ad43a 	srli	r5,r5,16
    70a8:	380ed43a 	srli	r7,r7,16
    70ac:	2007d43a 	srai	r3,r4,16
    70b0:	213fffcc 	andi	r4,r4,65535
    70b4:	29cbc83a 	sub	r5,r5,r7
    70b8:	28c7883a 	add	r3,r5,r3
    70bc:	180a943a 	slli	r5,r3,16
    70c0:	8c400104 	addi	r17,r17,4
    70c4:	84000104 	addi	r16,r16,4
    70c8:	2908b03a 	or	r4,r5,r4
    70cc:	59000015 	stw	r4,0(r11)
    70d0:	1807d43a 	srai	r3,r3,16
    70d4:	3015883a 	mov	r10,r6
    70d8:	3017883a 	mov	r11,r6
    70dc:	8b3fea36 	bltu	r17,r12,7088 <__alt_data_end+0xfffbdca8>
    70e0:	8200162e 	bgeu	r16,r8,713c <__mdiff+0x17c>
    70e4:	8017883a 	mov	r11,r16
    70e8:	59400017 	ldw	r5,0(r11)
    70ec:	31800104 	addi	r6,r6,4
    70f0:	5ac00104 	addi	r11,r11,4
    70f4:	293fffcc 	andi	r4,r5,65535
    70f8:	20c7883a 	add	r3,r4,r3
    70fc:	280ed43a 	srli	r7,r5,16
    7100:	180bd43a 	srai	r5,r3,16
    7104:	193fffcc 	andi	r4,r3,65535
    7108:	3947883a 	add	r3,r7,r5
    710c:	180a943a 	slli	r5,r3,16
    7110:	1807d43a 	srai	r3,r3,16
    7114:	2908b03a 	or	r4,r5,r4
    7118:	313fff15 	stw	r4,-4(r6)
    711c:	5a3ff236 	bltu	r11,r8,70e8 <__alt_data_end+0xfffbdd08>
    7120:	0406303a 	nor	r3,zero,r16
    7124:	1a07883a 	add	r3,r3,r8
    7128:	1806d0ba 	srli	r3,r3,2
    712c:	18c00044 	addi	r3,r3,1
    7130:	18c7883a 	add	r3,r3,r3
    7134:	18c7883a 	add	r3,r3,r3
    7138:	50d5883a 	add	r10,r10,r3
    713c:	50ffff04 	addi	r3,r10,-4
    7140:	2000041e 	bne	r4,zero,7154 <__mdiff+0x194>
    7144:	18ffff04 	addi	r3,r3,-4
    7148:	19000017 	ldw	r4,0(r3)
    714c:	4a7fffc4 	addi	r9,r9,-1
    7150:	203ffc26 	beq	r4,zero,7144 <__alt_data_end+0xfffbdd64>
    7154:	12400415 	stw	r9,16(r2)
    7158:	dfc00517 	ldw	ra,20(sp)
    715c:	dd000417 	ldw	r20,16(sp)
    7160:	dcc00317 	ldw	r19,12(sp)
    7164:	dc800217 	ldw	r18,8(sp)
    7168:	dc400117 	ldw	r17,4(sp)
    716c:	dc000017 	ldw	r16,0(sp)
    7170:	dec00604 	addi	sp,sp,24
    7174:	f800283a 	ret
    7178:	000b883a 	mov	r5,zero
    717c:	00065dc0 	call	65dc <_Balloc>
    7180:	00c00044 	movi	r3,1
    7184:	10c00415 	stw	r3,16(r2)
    7188:	10000515 	stw	zero,20(r2)
    718c:	003ff206 	br	7158 <__alt_data_end+0xfffbdd78>
    7190:	8023883a 	mov	r17,r16
    7194:	0029883a 	mov	r20,zero
    7198:	4021883a 	mov	r16,r8
    719c:	003fad06 	br	7054 <__alt_data_end+0xfffbdc74>
    71a0:	9005883a 	mov	r2,r18
    71a4:	94400504 	addi	r17,r18,20
    71a8:	9c000504 	addi	r16,r19,20
    71ac:	9825883a 	mov	r18,r19
    71b0:	05000044 	movi	r20,1
    71b4:	1027883a 	mov	r19,r2
    71b8:	003fa606 	br	7054 <__alt_data_end+0xfffbdc74>

000071bc <__ulp>:
    71bc:	295ffc2c 	andhi	r5,r5,32752
    71c0:	00bf3034 	movhi	r2,64704
    71c4:	2887883a 	add	r3,r5,r2
    71c8:	00c0020e 	bge	zero,r3,71d4 <__ulp+0x18>
    71cc:	0005883a 	mov	r2,zero
    71d0:	f800283a 	ret
    71d4:	00c7c83a 	sub	r3,zero,r3
    71d8:	1807d53a 	srai	r3,r3,20
    71dc:	008004c4 	movi	r2,19
    71e0:	10c00b0e 	bge	r2,r3,7210 <__ulp+0x54>
    71e4:	18bffb04 	addi	r2,r3,-20
    71e8:	01000784 	movi	r4,30
    71ec:	0007883a 	mov	r3,zero
    71f0:	20800516 	blt	r4,r2,7208 <__ulp+0x4c>
    71f4:	010007c4 	movi	r4,31
    71f8:	2089c83a 	sub	r4,r4,r2
    71fc:	00800044 	movi	r2,1
    7200:	1104983a 	sll	r2,r2,r4
    7204:	f800283a 	ret
    7208:	00800044 	movi	r2,1
    720c:	f800283a 	ret
    7210:	01400234 	movhi	r5,8
    7214:	28c7d83a 	sra	r3,r5,r3
    7218:	0005883a 	mov	r2,zero
    721c:	f800283a 	ret

00007220 <__b2d>:
    7220:	defffa04 	addi	sp,sp,-24
    7224:	dc000015 	stw	r16,0(sp)
    7228:	24000417 	ldw	r16,16(r4)
    722c:	dc400115 	stw	r17,4(sp)
    7230:	24400504 	addi	r17,r4,20
    7234:	8421883a 	add	r16,r16,r16
    7238:	8421883a 	add	r16,r16,r16
    723c:	8c21883a 	add	r16,r17,r16
    7240:	dc800215 	stw	r18,8(sp)
    7244:	84bfff17 	ldw	r18,-4(r16)
    7248:	dd000415 	stw	r20,16(sp)
    724c:	dcc00315 	stw	r19,12(sp)
    7250:	9009883a 	mov	r4,r18
    7254:	2829883a 	mov	r20,r5
    7258:	dfc00515 	stw	ra,20(sp)
    725c:	00068f80 	call	68f8 <__hi0bits>
    7260:	00c00804 	movi	r3,32
    7264:	1889c83a 	sub	r4,r3,r2
    7268:	a1000015 	stw	r4,0(r20)
    726c:	01000284 	movi	r4,10
    7270:	84ffff04 	addi	r19,r16,-4
    7274:	20801216 	blt	r4,r2,72c0 <__b2d+0xa0>
    7278:	018002c4 	movi	r6,11
    727c:	308dc83a 	sub	r6,r6,r2
    7280:	9186d83a 	srl	r3,r18,r6
    7284:	18cffc34 	orhi	r3,r3,16368
    7288:	8cc0212e 	bgeu	r17,r19,7310 <__b2d+0xf0>
    728c:	813ffe17 	ldw	r4,-8(r16)
    7290:	218cd83a 	srl	r6,r4,r6
    7294:	10800544 	addi	r2,r2,21
    7298:	9084983a 	sll	r2,r18,r2
    729c:	1184b03a 	or	r2,r2,r6
    72a0:	dfc00517 	ldw	ra,20(sp)
    72a4:	dd000417 	ldw	r20,16(sp)
    72a8:	dcc00317 	ldw	r19,12(sp)
    72ac:	dc800217 	ldw	r18,8(sp)
    72b0:	dc400117 	ldw	r17,4(sp)
    72b4:	dc000017 	ldw	r16,0(sp)
    72b8:	dec00604 	addi	sp,sp,24
    72bc:	f800283a 	ret
    72c0:	8cc00f2e 	bgeu	r17,r19,7300 <__b2d+0xe0>
    72c4:	117ffd44 	addi	r5,r2,-11
    72c8:	80bffe17 	ldw	r2,-8(r16)
    72cc:	28000e26 	beq	r5,zero,7308 <__b2d+0xe8>
    72d0:	1949c83a 	sub	r4,r3,r5
    72d4:	9164983a 	sll	r18,r18,r5
    72d8:	1106d83a 	srl	r3,r2,r4
    72dc:	81bffe04 	addi	r6,r16,-8
    72e0:	948ffc34 	orhi	r18,r18,16368
    72e4:	90c6b03a 	or	r3,r18,r3
    72e8:	89800e2e 	bgeu	r17,r6,7324 <__b2d+0x104>
    72ec:	81bffd17 	ldw	r6,-12(r16)
    72f0:	1144983a 	sll	r2,r2,r5
    72f4:	310ad83a 	srl	r5,r6,r4
    72f8:	2884b03a 	or	r2,r5,r2
    72fc:	003fe806 	br	72a0 <__alt_data_end+0xfffbdec0>
    7300:	10bffd44 	addi	r2,r2,-11
    7304:	1000041e 	bne	r2,zero,7318 <__b2d+0xf8>
    7308:	90cffc34 	orhi	r3,r18,16368
    730c:	003fe406 	br	72a0 <__alt_data_end+0xfffbdec0>
    7310:	000d883a 	mov	r6,zero
    7314:	003fdf06 	br	7294 <__alt_data_end+0xfffbdeb4>
    7318:	90a4983a 	sll	r18,r18,r2
    731c:	0005883a 	mov	r2,zero
    7320:	003ff906 	br	7308 <__alt_data_end+0xfffbdf28>
    7324:	1144983a 	sll	r2,r2,r5
    7328:	003fdd06 	br	72a0 <__alt_data_end+0xfffbdec0>

0000732c <__d2b>:
    732c:	defff804 	addi	sp,sp,-32
    7330:	dc000215 	stw	r16,8(sp)
    7334:	3021883a 	mov	r16,r6
    7338:	dc400315 	stw	r17,12(sp)
    733c:	8022907a 	slli	r17,r16,1
    7340:	dd000615 	stw	r20,24(sp)
    7344:	2829883a 	mov	r20,r5
    7348:	01400044 	movi	r5,1
    734c:	dcc00515 	stw	r19,20(sp)
    7350:	dc800415 	stw	r18,16(sp)
    7354:	dfc00715 	stw	ra,28(sp)
    7358:	3825883a 	mov	r18,r7
    735c:	8822d57a 	srli	r17,r17,21
    7360:	00065dc0 	call	65dc <_Balloc>
    7364:	1027883a 	mov	r19,r2
    7368:	00800434 	movhi	r2,16
    736c:	10bfffc4 	addi	r2,r2,-1
    7370:	808c703a 	and	r6,r16,r2
    7374:	88000126 	beq	r17,zero,737c <__d2b+0x50>
    7378:	31800434 	orhi	r6,r6,16
    737c:	d9800015 	stw	r6,0(sp)
    7380:	a0002426 	beq	r20,zero,7414 <__d2b+0xe8>
    7384:	d9000104 	addi	r4,sp,4
    7388:	dd000115 	stw	r20,4(sp)
    738c:	00069600 	call	6960 <__lo0bits>
    7390:	d8c00017 	ldw	r3,0(sp)
    7394:	10002f1e 	bne	r2,zero,7454 <__d2b+0x128>
    7398:	d9000117 	ldw	r4,4(sp)
    739c:	99000515 	stw	r4,20(r19)
    73a0:	1821003a 	cmpeq	r16,r3,zero
    73a4:	01000084 	movi	r4,2
    73a8:	2421c83a 	sub	r16,r4,r16
    73ac:	98c00615 	stw	r3,24(r19)
    73b0:	9c000415 	stw	r16,16(r19)
    73b4:	88001f1e 	bne	r17,zero,7434 <__d2b+0x108>
    73b8:	10bef384 	addi	r2,r2,-1074
    73bc:	90800015 	stw	r2,0(r18)
    73c0:	00900034 	movhi	r2,16384
    73c4:	10bfffc4 	addi	r2,r2,-1
    73c8:	8085883a 	add	r2,r16,r2
    73cc:	1085883a 	add	r2,r2,r2
    73d0:	1085883a 	add	r2,r2,r2
    73d4:	9885883a 	add	r2,r19,r2
    73d8:	11000517 	ldw	r4,20(r2)
    73dc:	8020917a 	slli	r16,r16,5
    73e0:	00068f80 	call	68f8 <__hi0bits>
    73e4:	d8c00817 	ldw	r3,32(sp)
    73e8:	8085c83a 	sub	r2,r16,r2
    73ec:	18800015 	stw	r2,0(r3)
    73f0:	9805883a 	mov	r2,r19
    73f4:	dfc00717 	ldw	ra,28(sp)
    73f8:	dd000617 	ldw	r20,24(sp)
    73fc:	dcc00517 	ldw	r19,20(sp)
    7400:	dc800417 	ldw	r18,16(sp)
    7404:	dc400317 	ldw	r17,12(sp)
    7408:	dc000217 	ldw	r16,8(sp)
    740c:	dec00804 	addi	sp,sp,32
    7410:	f800283a 	ret
    7414:	d809883a 	mov	r4,sp
    7418:	00069600 	call	6960 <__lo0bits>
    741c:	d8c00017 	ldw	r3,0(sp)
    7420:	04000044 	movi	r16,1
    7424:	9c000415 	stw	r16,16(r19)
    7428:	98c00515 	stw	r3,20(r19)
    742c:	10800804 	addi	r2,r2,32
    7430:	883fe126 	beq	r17,zero,73b8 <__alt_data_end+0xfffbdfd8>
    7434:	00c00d44 	movi	r3,53
    7438:	8c7ef344 	addi	r17,r17,-1075
    743c:	88a3883a 	add	r17,r17,r2
    7440:	1885c83a 	sub	r2,r3,r2
    7444:	d8c00817 	ldw	r3,32(sp)
    7448:	94400015 	stw	r17,0(r18)
    744c:	18800015 	stw	r2,0(r3)
    7450:	003fe706 	br	73f0 <__alt_data_end+0xfffbe010>
    7454:	01000804 	movi	r4,32
    7458:	2089c83a 	sub	r4,r4,r2
    745c:	1908983a 	sll	r4,r3,r4
    7460:	d9400117 	ldw	r5,4(sp)
    7464:	1886d83a 	srl	r3,r3,r2
    7468:	2148b03a 	or	r4,r4,r5
    746c:	99000515 	stw	r4,20(r19)
    7470:	d8c00015 	stw	r3,0(sp)
    7474:	003fca06 	br	73a0 <__alt_data_end+0xfffbdfc0>

00007478 <__ratio>:
    7478:	defff904 	addi	sp,sp,-28
    747c:	dc400315 	stw	r17,12(sp)
    7480:	2823883a 	mov	r17,r5
    7484:	d9400104 	addi	r5,sp,4
    7488:	dfc00615 	stw	ra,24(sp)
    748c:	dcc00515 	stw	r19,20(sp)
    7490:	dc800415 	stw	r18,16(sp)
    7494:	2027883a 	mov	r19,r4
    7498:	dc000215 	stw	r16,8(sp)
    749c:	00072200 	call	7220 <__b2d>
    74a0:	d80b883a 	mov	r5,sp
    74a4:	8809883a 	mov	r4,r17
    74a8:	1025883a 	mov	r18,r2
    74ac:	1821883a 	mov	r16,r3
    74b0:	00072200 	call	7220 <__b2d>
    74b4:	8a000417 	ldw	r8,16(r17)
    74b8:	99000417 	ldw	r4,16(r19)
    74bc:	d9400117 	ldw	r5,4(sp)
    74c0:	2209c83a 	sub	r4,r4,r8
    74c4:	2010917a 	slli	r8,r4,5
    74c8:	d9000017 	ldw	r4,0(sp)
    74cc:	2909c83a 	sub	r4,r5,r4
    74d0:	4109883a 	add	r4,r8,r4
    74d4:	01000e0e 	bge	zero,r4,7510 <__ratio+0x98>
    74d8:	2008953a 	slli	r4,r4,20
    74dc:	2421883a 	add	r16,r4,r16
    74e0:	100d883a 	mov	r6,r2
    74e4:	180f883a 	mov	r7,r3
    74e8:	9009883a 	mov	r4,r18
    74ec:	800b883a 	mov	r5,r16
    74f0:	000b6cc0 	call	b6cc <__divdf3>
    74f4:	dfc00617 	ldw	ra,24(sp)
    74f8:	dcc00517 	ldw	r19,20(sp)
    74fc:	dc800417 	ldw	r18,16(sp)
    7500:	dc400317 	ldw	r17,12(sp)
    7504:	dc000217 	ldw	r16,8(sp)
    7508:	dec00704 	addi	sp,sp,28
    750c:	f800283a 	ret
    7510:	2008953a 	slli	r4,r4,20
    7514:	1907c83a 	sub	r3,r3,r4
    7518:	003ff106 	br	74e0 <__alt_data_end+0xfffbe100>

0000751c <_mprec_log10>:
    751c:	defffe04 	addi	sp,sp,-8
    7520:	dc000015 	stw	r16,0(sp)
    7524:	dfc00115 	stw	ra,4(sp)
    7528:	008005c4 	movi	r2,23
    752c:	2021883a 	mov	r16,r4
    7530:	11000d0e 	bge	r2,r4,7568 <_mprec_log10+0x4c>
    7534:	0005883a 	mov	r2,zero
    7538:	00cffc34 	movhi	r3,16368
    753c:	843fffc4 	addi	r16,r16,-1
    7540:	000d883a 	mov	r6,zero
    7544:	01d00934 	movhi	r7,16420
    7548:	1009883a 	mov	r4,r2
    754c:	180b883a 	mov	r5,r3
    7550:	000c2f40 	call	c2f4 <__muldf3>
    7554:	803ff91e 	bne	r16,zero,753c <__alt_data_end+0xfffbe15c>
    7558:	dfc00117 	ldw	ra,4(sp)
    755c:	dc000017 	ldw	r16,0(sp)
    7560:	dec00204 	addi	sp,sp,8
    7564:	f800283a 	ret
    7568:	202090fa 	slli	r16,r4,3
    756c:	00800074 	movhi	r2,1
    7570:	1081c904 	addi	r2,r2,1828
    7574:	1421883a 	add	r16,r2,r16
    7578:	80800017 	ldw	r2,0(r16)
    757c:	80c00117 	ldw	r3,4(r16)
    7580:	dfc00117 	ldw	ra,4(sp)
    7584:	dc000017 	ldw	r16,0(sp)
    7588:	dec00204 	addi	sp,sp,8
    758c:	f800283a 	ret

00007590 <__copybits>:
    7590:	297fffc4 	addi	r5,r5,-1
    7594:	280fd17a 	srai	r7,r5,5
    7598:	30c00417 	ldw	r3,16(r6)
    759c:	30800504 	addi	r2,r6,20
    75a0:	39c00044 	addi	r7,r7,1
    75a4:	18c7883a 	add	r3,r3,r3
    75a8:	39cf883a 	add	r7,r7,r7
    75ac:	18c7883a 	add	r3,r3,r3
    75b0:	39cf883a 	add	r7,r7,r7
    75b4:	10c7883a 	add	r3,r2,r3
    75b8:	21cf883a 	add	r7,r4,r7
    75bc:	10c00d2e 	bgeu	r2,r3,75f4 <__copybits+0x64>
    75c0:	200b883a 	mov	r5,r4
    75c4:	12000017 	ldw	r8,0(r2)
    75c8:	29400104 	addi	r5,r5,4
    75cc:	10800104 	addi	r2,r2,4
    75d0:	2a3fff15 	stw	r8,-4(r5)
    75d4:	10fffb36 	bltu	r2,r3,75c4 <__alt_data_end+0xfffbe1e4>
    75d8:	1985c83a 	sub	r2,r3,r6
    75dc:	10bffac4 	addi	r2,r2,-21
    75e0:	1004d0ba 	srli	r2,r2,2
    75e4:	10800044 	addi	r2,r2,1
    75e8:	1085883a 	add	r2,r2,r2
    75ec:	1085883a 	add	r2,r2,r2
    75f0:	2089883a 	add	r4,r4,r2
    75f4:	21c0032e 	bgeu	r4,r7,7604 <__copybits+0x74>
    75f8:	20000015 	stw	zero,0(r4)
    75fc:	21000104 	addi	r4,r4,4
    7600:	21fffd36 	bltu	r4,r7,75f8 <__alt_data_end+0xfffbe218>
    7604:	f800283a 	ret

00007608 <__any_on>:
    7608:	20c00417 	ldw	r3,16(r4)
    760c:	2805d17a 	srai	r2,r5,5
    7610:	21000504 	addi	r4,r4,20
    7614:	18800d0e 	bge	r3,r2,764c <__any_on+0x44>
    7618:	18c7883a 	add	r3,r3,r3
    761c:	18c7883a 	add	r3,r3,r3
    7620:	20c7883a 	add	r3,r4,r3
    7624:	20c0192e 	bgeu	r4,r3,768c <__any_on+0x84>
    7628:	18bfff17 	ldw	r2,-4(r3)
    762c:	18ffff04 	addi	r3,r3,-4
    7630:	1000041e 	bne	r2,zero,7644 <__any_on+0x3c>
    7634:	20c0142e 	bgeu	r4,r3,7688 <__any_on+0x80>
    7638:	18ffff04 	addi	r3,r3,-4
    763c:	19400017 	ldw	r5,0(r3)
    7640:	283ffc26 	beq	r5,zero,7634 <__alt_data_end+0xfffbe254>
    7644:	00800044 	movi	r2,1
    7648:	f800283a 	ret
    764c:	10c00a0e 	bge	r2,r3,7678 <__any_on+0x70>
    7650:	1085883a 	add	r2,r2,r2
    7654:	1085883a 	add	r2,r2,r2
    7658:	294007cc 	andi	r5,r5,31
    765c:	2087883a 	add	r3,r4,r2
    7660:	283ff026 	beq	r5,zero,7624 <__alt_data_end+0xfffbe244>
    7664:	19800017 	ldw	r6,0(r3)
    7668:	3144d83a 	srl	r2,r6,r5
    766c:	114a983a 	sll	r5,r2,r5
    7670:	317ff41e 	bne	r6,r5,7644 <__alt_data_end+0xfffbe264>
    7674:	003feb06 	br	7624 <__alt_data_end+0xfffbe244>
    7678:	1085883a 	add	r2,r2,r2
    767c:	1085883a 	add	r2,r2,r2
    7680:	2087883a 	add	r3,r4,r2
    7684:	003fe706 	br	7624 <__alt_data_end+0xfffbe244>
    7688:	f800283a 	ret
    768c:	0005883a 	mov	r2,zero
    7690:	f800283a 	ret

00007694 <_putc_r>:
    7694:	defffc04 	addi	sp,sp,-16
    7698:	dc000215 	stw	r16,8(sp)
    769c:	dfc00315 	stw	ra,12(sp)
    76a0:	2021883a 	mov	r16,r4
    76a4:	20000226 	beq	r4,zero,76b0 <_putc_r+0x1c>
    76a8:	20800e17 	ldw	r2,56(r4)
    76ac:	10001b26 	beq	r2,zero,771c <_putc_r+0x88>
    76b0:	30800217 	ldw	r2,8(r6)
    76b4:	10bfffc4 	addi	r2,r2,-1
    76b8:	30800215 	stw	r2,8(r6)
    76bc:	10000a16 	blt	r2,zero,76e8 <_putc_r+0x54>
    76c0:	30800017 	ldw	r2,0(r6)
    76c4:	11400005 	stb	r5,0(r2)
    76c8:	30800017 	ldw	r2,0(r6)
    76cc:	10c00044 	addi	r3,r2,1
    76d0:	30c00015 	stw	r3,0(r6)
    76d4:	10800003 	ldbu	r2,0(r2)
    76d8:	dfc00317 	ldw	ra,12(sp)
    76dc:	dc000217 	ldw	r16,8(sp)
    76e0:	dec00404 	addi	sp,sp,16
    76e4:	f800283a 	ret
    76e8:	30c00617 	ldw	r3,24(r6)
    76ec:	10c00616 	blt	r2,r3,7708 <_putc_r+0x74>
    76f0:	30800017 	ldw	r2,0(r6)
    76f4:	00c00284 	movi	r3,10
    76f8:	11400005 	stb	r5,0(r2)
    76fc:	30800017 	ldw	r2,0(r6)
    7700:	11400003 	ldbu	r5,0(r2)
    7704:	28fff11e 	bne	r5,r3,76cc <__alt_data_end+0xfffbe2ec>
    7708:	8009883a 	mov	r4,r16
    770c:	dfc00317 	ldw	ra,12(sp)
    7710:	dc000217 	ldw	r16,8(sp)
    7714:	dec00404 	addi	sp,sp,16
    7718:	00097381 	jmpi	9738 <__swbuf_r>
    771c:	d9400015 	stw	r5,0(sp)
    7720:	d9800115 	stw	r6,4(sp)
    7724:	0004bb40 	call	4bb4 <__sinit>
    7728:	d9800117 	ldw	r6,4(sp)
    772c:	d9400017 	ldw	r5,0(sp)
    7730:	003fdf06 	br	76b0 <__alt_data_end+0xfffbe2d0>

00007734 <putc>:
    7734:	00800074 	movhi	r2,1
    7738:	defffc04 	addi	sp,sp,-16
    773c:	1088fc04 	addi	r2,r2,9200
    7740:	dc000115 	stw	r16,4(sp)
    7744:	14000017 	ldw	r16,0(r2)
    7748:	dc400215 	stw	r17,8(sp)
    774c:	dfc00315 	stw	ra,12(sp)
    7750:	2023883a 	mov	r17,r4
    7754:	80000226 	beq	r16,zero,7760 <putc+0x2c>
    7758:	80800e17 	ldw	r2,56(r16)
    775c:	10001a26 	beq	r2,zero,77c8 <putc+0x94>
    7760:	28800217 	ldw	r2,8(r5)
    7764:	10bfffc4 	addi	r2,r2,-1
    7768:	28800215 	stw	r2,8(r5)
    776c:	10000b16 	blt	r2,zero,779c <putc+0x68>
    7770:	28800017 	ldw	r2,0(r5)
    7774:	14400005 	stb	r17,0(r2)
    7778:	28800017 	ldw	r2,0(r5)
    777c:	10c00044 	addi	r3,r2,1
    7780:	28c00015 	stw	r3,0(r5)
    7784:	10800003 	ldbu	r2,0(r2)
    7788:	dfc00317 	ldw	ra,12(sp)
    778c:	dc400217 	ldw	r17,8(sp)
    7790:	dc000117 	ldw	r16,4(sp)
    7794:	dec00404 	addi	sp,sp,16
    7798:	f800283a 	ret
    779c:	28c00617 	ldw	r3,24(r5)
    77a0:	10c00e16 	blt	r2,r3,77dc <putc+0xa8>
    77a4:	28800017 	ldw	r2,0(r5)
    77a8:	01000284 	movi	r4,10
    77ac:	14400005 	stb	r17,0(r2)
    77b0:	28800017 	ldw	r2,0(r5)
    77b4:	10c00003 	ldbu	r3,0(r2)
    77b8:	193ff01e 	bne	r3,r4,777c <__alt_data_end+0xfffbe39c>
    77bc:	280d883a 	mov	r6,r5
    77c0:	180b883a 	mov	r5,r3
    77c4:	00000706 	br	77e4 <putc+0xb0>
    77c8:	8009883a 	mov	r4,r16
    77cc:	d9400015 	stw	r5,0(sp)
    77d0:	0004bb40 	call	4bb4 <__sinit>
    77d4:	d9400017 	ldw	r5,0(sp)
    77d8:	003fe106 	br	7760 <__alt_data_end+0xfffbe380>
    77dc:	280d883a 	mov	r6,r5
    77e0:	880b883a 	mov	r5,r17
    77e4:	8009883a 	mov	r4,r16
    77e8:	dfc00317 	ldw	ra,12(sp)
    77ec:	dc400217 	ldw	r17,8(sp)
    77f0:	dc000117 	ldw	r16,4(sp)
    77f4:	dec00404 	addi	sp,sp,16
    77f8:	00097381 	jmpi	9738 <__swbuf_r>

000077fc <_realloc_r>:
    77fc:	defff604 	addi	sp,sp,-40
    7800:	dc800215 	stw	r18,8(sp)
    7804:	dfc00915 	stw	ra,36(sp)
    7808:	df000815 	stw	fp,32(sp)
    780c:	ddc00715 	stw	r23,28(sp)
    7810:	dd800615 	stw	r22,24(sp)
    7814:	dd400515 	stw	r21,20(sp)
    7818:	dd000415 	stw	r20,16(sp)
    781c:	dcc00315 	stw	r19,12(sp)
    7820:	dc400115 	stw	r17,4(sp)
    7824:	dc000015 	stw	r16,0(sp)
    7828:	3025883a 	mov	r18,r6
    782c:	2800b726 	beq	r5,zero,7b0c <_realloc_r+0x310>
    7830:	282b883a 	mov	r21,r5
    7834:	2029883a 	mov	r20,r4
    7838:	000dcb00 	call	dcb0 <__malloc_lock>
    783c:	a8bfff17 	ldw	r2,-4(r21)
    7840:	043fff04 	movi	r16,-4
    7844:	90c002c4 	addi	r3,r18,11
    7848:	01000584 	movi	r4,22
    784c:	acfffe04 	addi	r19,r21,-8
    7850:	1420703a 	and	r16,r2,r16
    7854:	20c0332e 	bgeu	r4,r3,7924 <_realloc_r+0x128>
    7858:	047ffe04 	movi	r17,-8
    785c:	1c62703a 	and	r17,r3,r17
    7860:	8807883a 	mov	r3,r17
    7864:	88005816 	blt	r17,zero,79c8 <_realloc_r+0x1cc>
    7868:	8c805736 	bltu	r17,r18,79c8 <_realloc_r+0x1cc>
    786c:	80c0300e 	bge	r16,r3,7930 <_realloc_r+0x134>
    7870:	07000074 	movhi	fp,1
    7874:	e7037704 	addi	fp,fp,3548
    7878:	e1c00217 	ldw	r7,8(fp)
    787c:	9c09883a 	add	r4,r19,r16
    7880:	22000117 	ldw	r8,4(r4)
    7884:	21c06326 	beq	r4,r7,7a14 <_realloc_r+0x218>
    7888:	017fff84 	movi	r5,-2
    788c:	414a703a 	and	r5,r8,r5
    7890:	214b883a 	add	r5,r4,r5
    7894:	29800117 	ldw	r6,4(r5)
    7898:	3180004c 	andi	r6,r6,1
    789c:	30003f26 	beq	r6,zero,799c <_realloc_r+0x1a0>
    78a0:	1080004c 	andi	r2,r2,1
    78a4:	10008326 	beq	r2,zero,7ab4 <_realloc_r+0x2b8>
    78a8:	900b883a 	mov	r5,r18
    78ac:	a009883a 	mov	r4,r20
    78b0:	00059200 	call	5920 <_malloc_r>
    78b4:	1025883a 	mov	r18,r2
    78b8:	10011e26 	beq	r2,zero,7d34 <_realloc_r+0x538>
    78bc:	a93fff17 	ldw	r4,-4(r21)
    78c0:	10fffe04 	addi	r3,r2,-8
    78c4:	00bfff84 	movi	r2,-2
    78c8:	2084703a 	and	r2,r4,r2
    78cc:	9885883a 	add	r2,r19,r2
    78d0:	1880ee26 	beq	r3,r2,7c8c <_realloc_r+0x490>
    78d4:	81bfff04 	addi	r6,r16,-4
    78d8:	00800904 	movi	r2,36
    78dc:	1180b836 	bltu	r2,r6,7bc0 <_realloc_r+0x3c4>
    78e0:	00c004c4 	movi	r3,19
    78e4:	19809636 	bltu	r3,r6,7b40 <_realloc_r+0x344>
    78e8:	9005883a 	mov	r2,r18
    78ec:	a807883a 	mov	r3,r21
    78f0:	19000017 	ldw	r4,0(r3)
    78f4:	11000015 	stw	r4,0(r2)
    78f8:	19000117 	ldw	r4,4(r3)
    78fc:	11000115 	stw	r4,4(r2)
    7900:	18c00217 	ldw	r3,8(r3)
    7904:	10c00215 	stw	r3,8(r2)
    7908:	a80b883a 	mov	r5,r21
    790c:	a009883a 	mov	r4,r20
    7910:	0004d280 	call	4d28 <_free_r>
    7914:	a009883a 	mov	r4,r20
    7918:	000dcd40 	call	dcd4 <__malloc_unlock>
    791c:	9005883a 	mov	r2,r18
    7920:	00001206 	br	796c <_realloc_r+0x170>
    7924:	00c00404 	movi	r3,16
    7928:	1823883a 	mov	r17,r3
    792c:	003fce06 	br	7868 <__alt_data_end+0xfffbe488>
    7930:	a825883a 	mov	r18,r21
    7934:	8445c83a 	sub	r2,r16,r17
    7938:	00c003c4 	movi	r3,15
    793c:	18802636 	bltu	r3,r2,79d8 <_realloc_r+0x1dc>
    7940:	99800117 	ldw	r6,4(r19)
    7944:	9c07883a 	add	r3,r19,r16
    7948:	3180004c 	andi	r6,r6,1
    794c:	3420b03a 	or	r16,r6,r16
    7950:	9c000115 	stw	r16,4(r19)
    7954:	18800117 	ldw	r2,4(r3)
    7958:	10800054 	ori	r2,r2,1
    795c:	18800115 	stw	r2,4(r3)
    7960:	a009883a 	mov	r4,r20
    7964:	000dcd40 	call	dcd4 <__malloc_unlock>
    7968:	9005883a 	mov	r2,r18
    796c:	dfc00917 	ldw	ra,36(sp)
    7970:	df000817 	ldw	fp,32(sp)
    7974:	ddc00717 	ldw	r23,28(sp)
    7978:	dd800617 	ldw	r22,24(sp)
    797c:	dd400517 	ldw	r21,20(sp)
    7980:	dd000417 	ldw	r20,16(sp)
    7984:	dcc00317 	ldw	r19,12(sp)
    7988:	dc800217 	ldw	r18,8(sp)
    798c:	dc400117 	ldw	r17,4(sp)
    7990:	dc000017 	ldw	r16,0(sp)
    7994:	dec00a04 	addi	sp,sp,40
    7998:	f800283a 	ret
    799c:	017fff04 	movi	r5,-4
    79a0:	414a703a 	and	r5,r8,r5
    79a4:	814d883a 	add	r6,r16,r5
    79a8:	30c01f16 	blt	r6,r3,7a28 <_realloc_r+0x22c>
    79ac:	20800317 	ldw	r2,12(r4)
    79b0:	20c00217 	ldw	r3,8(r4)
    79b4:	a825883a 	mov	r18,r21
    79b8:	3021883a 	mov	r16,r6
    79bc:	18800315 	stw	r2,12(r3)
    79c0:	10c00215 	stw	r3,8(r2)
    79c4:	003fdb06 	br	7934 <__alt_data_end+0xfffbe554>
    79c8:	00800304 	movi	r2,12
    79cc:	a0800015 	stw	r2,0(r20)
    79d0:	0005883a 	mov	r2,zero
    79d4:	003fe506 	br	796c <__alt_data_end+0xfffbe58c>
    79d8:	98c00117 	ldw	r3,4(r19)
    79dc:	9c4b883a 	add	r5,r19,r17
    79e0:	11000054 	ori	r4,r2,1
    79e4:	18c0004c 	andi	r3,r3,1
    79e8:	1c62b03a 	or	r17,r3,r17
    79ec:	9c400115 	stw	r17,4(r19)
    79f0:	29000115 	stw	r4,4(r5)
    79f4:	2885883a 	add	r2,r5,r2
    79f8:	10c00117 	ldw	r3,4(r2)
    79fc:	29400204 	addi	r5,r5,8
    7a00:	a009883a 	mov	r4,r20
    7a04:	18c00054 	ori	r3,r3,1
    7a08:	10c00115 	stw	r3,4(r2)
    7a0c:	0004d280 	call	4d28 <_free_r>
    7a10:	003fd306 	br	7960 <__alt_data_end+0xfffbe580>
    7a14:	017fff04 	movi	r5,-4
    7a18:	414a703a 	and	r5,r8,r5
    7a1c:	89800404 	addi	r6,r17,16
    7a20:	8151883a 	add	r8,r16,r5
    7a24:	4180590e 	bge	r8,r6,7b8c <_realloc_r+0x390>
    7a28:	1080004c 	andi	r2,r2,1
    7a2c:	103f9e1e 	bne	r2,zero,78a8 <__alt_data_end+0xfffbe4c8>
    7a30:	adbffe17 	ldw	r22,-8(r21)
    7a34:	00bfff04 	movi	r2,-4
    7a38:	9dadc83a 	sub	r22,r19,r22
    7a3c:	b1800117 	ldw	r6,4(r22)
    7a40:	3084703a 	and	r2,r6,r2
    7a44:	20002026 	beq	r4,zero,7ac8 <_realloc_r+0x2cc>
    7a48:	80af883a 	add	r23,r16,r2
    7a4c:	b96f883a 	add	r23,r23,r5
    7a50:	21c05f26 	beq	r4,r7,7bd0 <_realloc_r+0x3d4>
    7a54:	b8c01c16 	blt	r23,r3,7ac8 <_realloc_r+0x2cc>
    7a58:	20800317 	ldw	r2,12(r4)
    7a5c:	20c00217 	ldw	r3,8(r4)
    7a60:	81bfff04 	addi	r6,r16,-4
    7a64:	01000904 	movi	r4,36
    7a68:	18800315 	stw	r2,12(r3)
    7a6c:	10c00215 	stw	r3,8(r2)
    7a70:	b0c00217 	ldw	r3,8(r22)
    7a74:	b0800317 	ldw	r2,12(r22)
    7a78:	b4800204 	addi	r18,r22,8
    7a7c:	18800315 	stw	r2,12(r3)
    7a80:	10c00215 	stw	r3,8(r2)
    7a84:	21801b36 	bltu	r4,r6,7af4 <_realloc_r+0x2f8>
    7a88:	008004c4 	movi	r2,19
    7a8c:	1180352e 	bgeu	r2,r6,7b64 <_realloc_r+0x368>
    7a90:	a8800017 	ldw	r2,0(r21)
    7a94:	b0800215 	stw	r2,8(r22)
    7a98:	a8800117 	ldw	r2,4(r21)
    7a9c:	b0800315 	stw	r2,12(r22)
    7aa0:	008006c4 	movi	r2,27
    7aa4:	11807f36 	bltu	r2,r6,7ca4 <_realloc_r+0x4a8>
    7aa8:	b0800404 	addi	r2,r22,16
    7aac:	ad400204 	addi	r21,r21,8
    7ab0:	00002d06 	br	7b68 <_realloc_r+0x36c>
    7ab4:	adbffe17 	ldw	r22,-8(r21)
    7ab8:	00bfff04 	movi	r2,-4
    7abc:	9dadc83a 	sub	r22,r19,r22
    7ac0:	b1000117 	ldw	r4,4(r22)
    7ac4:	2084703a 	and	r2,r4,r2
    7ac8:	b03f7726 	beq	r22,zero,78a8 <__alt_data_end+0xfffbe4c8>
    7acc:	80af883a 	add	r23,r16,r2
    7ad0:	b8ff7516 	blt	r23,r3,78a8 <__alt_data_end+0xfffbe4c8>
    7ad4:	b0800317 	ldw	r2,12(r22)
    7ad8:	b0c00217 	ldw	r3,8(r22)
    7adc:	81bfff04 	addi	r6,r16,-4
    7ae0:	01000904 	movi	r4,36
    7ae4:	18800315 	stw	r2,12(r3)
    7ae8:	10c00215 	stw	r3,8(r2)
    7aec:	b4800204 	addi	r18,r22,8
    7af0:	21bfe52e 	bgeu	r4,r6,7a88 <__alt_data_end+0xfffbe6a8>
    7af4:	a80b883a 	mov	r5,r21
    7af8:	9009883a 	mov	r4,r18
    7afc:	00063580 	call	6358 <memmove>
    7b00:	b821883a 	mov	r16,r23
    7b04:	b027883a 	mov	r19,r22
    7b08:	003f8a06 	br	7934 <__alt_data_end+0xfffbe554>
    7b0c:	300b883a 	mov	r5,r6
    7b10:	dfc00917 	ldw	ra,36(sp)
    7b14:	df000817 	ldw	fp,32(sp)
    7b18:	ddc00717 	ldw	r23,28(sp)
    7b1c:	dd800617 	ldw	r22,24(sp)
    7b20:	dd400517 	ldw	r21,20(sp)
    7b24:	dd000417 	ldw	r20,16(sp)
    7b28:	dcc00317 	ldw	r19,12(sp)
    7b2c:	dc800217 	ldw	r18,8(sp)
    7b30:	dc400117 	ldw	r17,4(sp)
    7b34:	dc000017 	ldw	r16,0(sp)
    7b38:	dec00a04 	addi	sp,sp,40
    7b3c:	00059201 	jmpi	5920 <_malloc_r>
    7b40:	a8c00017 	ldw	r3,0(r21)
    7b44:	90c00015 	stw	r3,0(r18)
    7b48:	a8c00117 	ldw	r3,4(r21)
    7b4c:	90c00115 	stw	r3,4(r18)
    7b50:	00c006c4 	movi	r3,27
    7b54:	19804536 	bltu	r3,r6,7c6c <_realloc_r+0x470>
    7b58:	90800204 	addi	r2,r18,8
    7b5c:	a8c00204 	addi	r3,r21,8
    7b60:	003f6306 	br	78f0 <__alt_data_end+0xfffbe510>
    7b64:	9005883a 	mov	r2,r18
    7b68:	a8c00017 	ldw	r3,0(r21)
    7b6c:	b821883a 	mov	r16,r23
    7b70:	b027883a 	mov	r19,r22
    7b74:	10c00015 	stw	r3,0(r2)
    7b78:	a8c00117 	ldw	r3,4(r21)
    7b7c:	10c00115 	stw	r3,4(r2)
    7b80:	a8c00217 	ldw	r3,8(r21)
    7b84:	10c00215 	stw	r3,8(r2)
    7b88:	003f6a06 	br	7934 <__alt_data_end+0xfffbe554>
    7b8c:	9c67883a 	add	r19,r19,r17
    7b90:	4445c83a 	sub	r2,r8,r17
    7b94:	e4c00215 	stw	r19,8(fp)
    7b98:	10800054 	ori	r2,r2,1
    7b9c:	98800115 	stw	r2,4(r19)
    7ba0:	a8bfff17 	ldw	r2,-4(r21)
    7ba4:	a009883a 	mov	r4,r20
    7ba8:	1080004c 	andi	r2,r2,1
    7bac:	1462b03a 	or	r17,r2,r17
    7bb0:	ac7fff15 	stw	r17,-4(r21)
    7bb4:	000dcd40 	call	dcd4 <__malloc_unlock>
    7bb8:	a805883a 	mov	r2,r21
    7bbc:	003f6b06 	br	796c <__alt_data_end+0xfffbe58c>
    7bc0:	a80b883a 	mov	r5,r21
    7bc4:	9009883a 	mov	r4,r18
    7bc8:	00063580 	call	6358 <memmove>
    7bcc:	003f4e06 	br	7908 <__alt_data_end+0xfffbe528>
    7bd0:	89000404 	addi	r4,r17,16
    7bd4:	b93fbc16 	blt	r23,r4,7ac8 <__alt_data_end+0xfffbe6e8>
    7bd8:	b0800317 	ldw	r2,12(r22)
    7bdc:	b0c00217 	ldw	r3,8(r22)
    7be0:	81bfff04 	addi	r6,r16,-4
    7be4:	01000904 	movi	r4,36
    7be8:	18800315 	stw	r2,12(r3)
    7bec:	10c00215 	stw	r3,8(r2)
    7bf0:	b4800204 	addi	r18,r22,8
    7bf4:	21804336 	bltu	r4,r6,7d04 <_realloc_r+0x508>
    7bf8:	008004c4 	movi	r2,19
    7bfc:	11803f2e 	bgeu	r2,r6,7cfc <_realloc_r+0x500>
    7c00:	a8800017 	ldw	r2,0(r21)
    7c04:	b0800215 	stw	r2,8(r22)
    7c08:	a8800117 	ldw	r2,4(r21)
    7c0c:	b0800315 	stw	r2,12(r22)
    7c10:	008006c4 	movi	r2,27
    7c14:	11803f36 	bltu	r2,r6,7d14 <_realloc_r+0x518>
    7c18:	b0800404 	addi	r2,r22,16
    7c1c:	ad400204 	addi	r21,r21,8
    7c20:	a8c00017 	ldw	r3,0(r21)
    7c24:	10c00015 	stw	r3,0(r2)
    7c28:	a8c00117 	ldw	r3,4(r21)
    7c2c:	10c00115 	stw	r3,4(r2)
    7c30:	a8c00217 	ldw	r3,8(r21)
    7c34:	10c00215 	stw	r3,8(r2)
    7c38:	b447883a 	add	r3,r22,r17
    7c3c:	bc45c83a 	sub	r2,r23,r17
    7c40:	e0c00215 	stw	r3,8(fp)
    7c44:	10800054 	ori	r2,r2,1
    7c48:	18800115 	stw	r2,4(r3)
    7c4c:	b0800117 	ldw	r2,4(r22)
    7c50:	a009883a 	mov	r4,r20
    7c54:	1080004c 	andi	r2,r2,1
    7c58:	1462b03a 	or	r17,r2,r17
    7c5c:	b4400115 	stw	r17,4(r22)
    7c60:	000dcd40 	call	dcd4 <__malloc_unlock>
    7c64:	9005883a 	mov	r2,r18
    7c68:	003f4006 	br	796c <__alt_data_end+0xfffbe58c>
    7c6c:	a8c00217 	ldw	r3,8(r21)
    7c70:	90c00215 	stw	r3,8(r18)
    7c74:	a8c00317 	ldw	r3,12(r21)
    7c78:	90c00315 	stw	r3,12(r18)
    7c7c:	30801126 	beq	r6,r2,7cc4 <_realloc_r+0x4c8>
    7c80:	90800404 	addi	r2,r18,16
    7c84:	a8c00404 	addi	r3,r21,16
    7c88:	003f1906 	br	78f0 <__alt_data_end+0xfffbe510>
    7c8c:	90ffff17 	ldw	r3,-4(r18)
    7c90:	00bfff04 	movi	r2,-4
    7c94:	a825883a 	mov	r18,r21
    7c98:	1884703a 	and	r2,r3,r2
    7c9c:	80a1883a 	add	r16,r16,r2
    7ca0:	003f2406 	br	7934 <__alt_data_end+0xfffbe554>
    7ca4:	a8800217 	ldw	r2,8(r21)
    7ca8:	b0800415 	stw	r2,16(r22)
    7cac:	a8800317 	ldw	r2,12(r21)
    7cb0:	b0800515 	stw	r2,20(r22)
    7cb4:	31000a26 	beq	r6,r4,7ce0 <_realloc_r+0x4e4>
    7cb8:	b0800604 	addi	r2,r22,24
    7cbc:	ad400404 	addi	r21,r21,16
    7cc0:	003fa906 	br	7b68 <__alt_data_end+0xfffbe788>
    7cc4:	a9000417 	ldw	r4,16(r21)
    7cc8:	90800604 	addi	r2,r18,24
    7ccc:	a8c00604 	addi	r3,r21,24
    7cd0:	91000415 	stw	r4,16(r18)
    7cd4:	a9000517 	ldw	r4,20(r21)
    7cd8:	91000515 	stw	r4,20(r18)
    7cdc:	003f0406 	br	78f0 <__alt_data_end+0xfffbe510>
    7ce0:	a8c00417 	ldw	r3,16(r21)
    7ce4:	ad400604 	addi	r21,r21,24
    7ce8:	b0800804 	addi	r2,r22,32
    7cec:	b0c00615 	stw	r3,24(r22)
    7cf0:	a8ffff17 	ldw	r3,-4(r21)
    7cf4:	b0c00715 	stw	r3,28(r22)
    7cf8:	003f9b06 	br	7b68 <__alt_data_end+0xfffbe788>
    7cfc:	9005883a 	mov	r2,r18
    7d00:	003fc706 	br	7c20 <__alt_data_end+0xfffbe840>
    7d04:	a80b883a 	mov	r5,r21
    7d08:	9009883a 	mov	r4,r18
    7d0c:	00063580 	call	6358 <memmove>
    7d10:	003fc906 	br	7c38 <__alt_data_end+0xfffbe858>
    7d14:	a8800217 	ldw	r2,8(r21)
    7d18:	b0800415 	stw	r2,16(r22)
    7d1c:	a8800317 	ldw	r2,12(r21)
    7d20:	b0800515 	stw	r2,20(r22)
    7d24:	31000726 	beq	r6,r4,7d44 <_realloc_r+0x548>
    7d28:	b0800604 	addi	r2,r22,24
    7d2c:	ad400404 	addi	r21,r21,16
    7d30:	003fbb06 	br	7c20 <__alt_data_end+0xfffbe840>
    7d34:	a009883a 	mov	r4,r20
    7d38:	000dcd40 	call	dcd4 <__malloc_unlock>
    7d3c:	0005883a 	mov	r2,zero
    7d40:	003f0a06 	br	796c <__alt_data_end+0xfffbe58c>
    7d44:	a8c00417 	ldw	r3,16(r21)
    7d48:	ad400604 	addi	r21,r21,24
    7d4c:	b0800804 	addi	r2,r22,32
    7d50:	b0c00615 	stw	r3,24(r22)
    7d54:	a8ffff17 	ldw	r3,-4(r21)
    7d58:	b0c00715 	stw	r3,28(r22)
    7d5c:	003fb006 	br	7c20 <__alt_data_end+0xfffbe840>

00007d60 <__fpclassifyd>:
    7d60:	00a00034 	movhi	r2,32768
    7d64:	10bfffc4 	addi	r2,r2,-1
    7d68:	2884703a 	and	r2,r5,r2
    7d6c:	10000726 	beq	r2,zero,7d8c <__fpclassifyd+0x2c>
    7d70:	00fffc34 	movhi	r3,65520
    7d74:	019ff834 	movhi	r6,32736
    7d78:	28c7883a 	add	r3,r5,r3
    7d7c:	31bfffc4 	addi	r6,r6,-1
    7d80:	30c00536 	bltu	r6,r3,7d98 <__fpclassifyd+0x38>
    7d84:	00800104 	movi	r2,4
    7d88:	f800283a 	ret
    7d8c:	2000021e 	bne	r4,zero,7d98 <__fpclassifyd+0x38>
    7d90:	00800084 	movi	r2,2
    7d94:	f800283a 	ret
    7d98:	00dffc34 	movhi	r3,32752
    7d9c:	019ff834 	movhi	r6,32736
    7da0:	28cb883a 	add	r5,r5,r3
    7da4:	31bfffc4 	addi	r6,r6,-1
    7da8:	317ff62e 	bgeu	r6,r5,7d84 <__alt_data_end+0xfffbe9a4>
    7dac:	01400434 	movhi	r5,16
    7db0:	297fffc4 	addi	r5,r5,-1
    7db4:	28800236 	bltu	r5,r2,7dc0 <__fpclassifyd+0x60>
    7db8:	008000c4 	movi	r2,3
    7dbc:	f800283a 	ret
    7dc0:	10c00226 	beq	r2,r3,7dcc <__fpclassifyd+0x6c>
    7dc4:	0005883a 	mov	r2,zero
    7dc8:	f800283a 	ret
    7dcc:	2005003a 	cmpeq	r2,r4,zero
    7dd0:	f800283a 	ret

00007dd4 <_sbrk_r>:
    7dd4:	defffd04 	addi	sp,sp,-12
    7dd8:	dc000015 	stw	r16,0(sp)
    7ddc:	04000074 	movhi	r16,1
    7de0:	dc400115 	stw	r17,4(sp)
    7de4:	840fcc04 	addi	r16,r16,16176
    7de8:	2023883a 	mov	r17,r4
    7dec:	2809883a 	mov	r4,r5
    7df0:	dfc00215 	stw	ra,8(sp)
    7df4:	80000015 	stw	zero,0(r16)
    7df8:	000ded00 	call	ded0 <sbrk>
    7dfc:	00ffffc4 	movi	r3,-1
    7e00:	10c00526 	beq	r2,r3,7e18 <_sbrk_r+0x44>
    7e04:	dfc00217 	ldw	ra,8(sp)
    7e08:	dc400117 	ldw	r17,4(sp)
    7e0c:	dc000017 	ldw	r16,0(sp)
    7e10:	dec00304 	addi	sp,sp,12
    7e14:	f800283a 	ret
    7e18:	80c00017 	ldw	r3,0(r16)
    7e1c:	183ff926 	beq	r3,zero,7e04 <__alt_data_end+0xfffbea24>
    7e20:	88c00015 	stw	r3,0(r17)
    7e24:	003ff706 	br	7e04 <__alt_data_end+0xfffbea24>

00007e28 <__sread>:
    7e28:	defffe04 	addi	sp,sp,-8
    7e2c:	dc000015 	stw	r16,0(sp)
    7e30:	2821883a 	mov	r16,r5
    7e34:	2940038f 	ldh	r5,14(r5)
    7e38:	dfc00115 	stw	ra,4(sp)
    7e3c:	0009e3c0 	call	9e3c <_read_r>
    7e40:	10000716 	blt	r2,zero,7e60 <__sread+0x38>
    7e44:	80c01417 	ldw	r3,80(r16)
    7e48:	1887883a 	add	r3,r3,r2
    7e4c:	80c01415 	stw	r3,80(r16)
    7e50:	dfc00117 	ldw	ra,4(sp)
    7e54:	dc000017 	ldw	r16,0(sp)
    7e58:	dec00204 	addi	sp,sp,8
    7e5c:	f800283a 	ret
    7e60:	80c0030b 	ldhu	r3,12(r16)
    7e64:	18fbffcc 	andi	r3,r3,61439
    7e68:	80c0030d 	sth	r3,12(r16)
    7e6c:	dfc00117 	ldw	ra,4(sp)
    7e70:	dc000017 	ldw	r16,0(sp)
    7e74:	dec00204 	addi	sp,sp,8
    7e78:	f800283a 	ret

00007e7c <__seofread>:
    7e7c:	0005883a 	mov	r2,zero
    7e80:	f800283a 	ret

00007e84 <__swrite>:
    7e84:	2880030b 	ldhu	r2,12(r5)
    7e88:	defffb04 	addi	sp,sp,-20
    7e8c:	dcc00315 	stw	r19,12(sp)
    7e90:	dc800215 	stw	r18,8(sp)
    7e94:	dc400115 	stw	r17,4(sp)
    7e98:	dc000015 	stw	r16,0(sp)
    7e9c:	dfc00415 	stw	ra,16(sp)
    7ea0:	10c0400c 	andi	r3,r2,256
    7ea4:	2821883a 	mov	r16,r5
    7ea8:	2023883a 	mov	r17,r4
    7eac:	3025883a 	mov	r18,r6
    7eb0:	3827883a 	mov	r19,r7
    7eb4:	18000526 	beq	r3,zero,7ecc <__swrite+0x48>
    7eb8:	2940038f 	ldh	r5,14(r5)
    7ebc:	01c00084 	movi	r7,2
    7ec0:	000d883a 	mov	r6,zero
    7ec4:	0009ddc0 	call	9ddc <_lseek_r>
    7ec8:	8080030b 	ldhu	r2,12(r16)
    7ecc:	8140038f 	ldh	r5,14(r16)
    7ed0:	10bbffcc 	andi	r2,r2,61439
    7ed4:	980f883a 	mov	r7,r19
    7ed8:	900d883a 	mov	r6,r18
    7edc:	8809883a 	mov	r4,r17
    7ee0:	8080030d 	sth	r2,12(r16)
    7ee4:	dfc00417 	ldw	ra,16(sp)
    7ee8:	dcc00317 	ldw	r19,12(sp)
    7eec:	dc800217 	ldw	r18,8(sp)
    7ef0:	dc400117 	ldw	r17,4(sp)
    7ef4:	dc000017 	ldw	r16,0(sp)
    7ef8:	dec00504 	addi	sp,sp,20
    7efc:	00098901 	jmpi	9890 <_write_r>

00007f00 <__sseek>:
    7f00:	defffe04 	addi	sp,sp,-8
    7f04:	dc000015 	stw	r16,0(sp)
    7f08:	2821883a 	mov	r16,r5
    7f0c:	2940038f 	ldh	r5,14(r5)
    7f10:	dfc00115 	stw	ra,4(sp)
    7f14:	0009ddc0 	call	9ddc <_lseek_r>
    7f18:	00ffffc4 	movi	r3,-1
    7f1c:	10c00826 	beq	r2,r3,7f40 <__sseek+0x40>
    7f20:	80c0030b 	ldhu	r3,12(r16)
    7f24:	80801415 	stw	r2,80(r16)
    7f28:	18c40014 	ori	r3,r3,4096
    7f2c:	80c0030d 	sth	r3,12(r16)
    7f30:	dfc00117 	ldw	ra,4(sp)
    7f34:	dc000017 	ldw	r16,0(sp)
    7f38:	dec00204 	addi	sp,sp,8
    7f3c:	f800283a 	ret
    7f40:	80c0030b 	ldhu	r3,12(r16)
    7f44:	18fbffcc 	andi	r3,r3,61439
    7f48:	80c0030d 	sth	r3,12(r16)
    7f4c:	dfc00117 	ldw	ra,4(sp)
    7f50:	dc000017 	ldw	r16,0(sp)
    7f54:	dec00204 	addi	sp,sp,8
    7f58:	f800283a 	ret

00007f5c <__sclose>:
    7f5c:	2940038f 	ldh	r5,14(r5)
    7f60:	00098f01 	jmpi	98f0 <_close_r>

00007f64 <strcmp>:
    7f64:	2144b03a 	or	r2,r4,r5
    7f68:	108000cc 	andi	r2,r2,3
    7f6c:	1000171e 	bne	r2,zero,7fcc <strcmp+0x68>
    7f70:	20800017 	ldw	r2,0(r4)
    7f74:	28c00017 	ldw	r3,0(r5)
    7f78:	10c0141e 	bne	r2,r3,7fcc <strcmp+0x68>
    7f7c:	027fbff4 	movhi	r9,65279
    7f80:	4a7fbfc4 	addi	r9,r9,-257
    7f84:	0086303a 	nor	r3,zero,r2
    7f88:	02202074 	movhi	r8,32897
    7f8c:	1245883a 	add	r2,r2,r9
    7f90:	42202004 	addi	r8,r8,-32640
    7f94:	10c4703a 	and	r2,r2,r3
    7f98:	1204703a 	and	r2,r2,r8
    7f9c:	10000226 	beq	r2,zero,7fa8 <strcmp+0x44>
    7fa0:	00002306 	br	8030 <strcmp+0xcc>
    7fa4:	1000221e 	bne	r2,zero,8030 <strcmp+0xcc>
    7fa8:	21000104 	addi	r4,r4,4
    7fac:	20c00017 	ldw	r3,0(r4)
    7fb0:	29400104 	addi	r5,r5,4
    7fb4:	29800017 	ldw	r6,0(r5)
    7fb8:	1a4f883a 	add	r7,r3,r9
    7fbc:	00c4303a 	nor	r2,zero,r3
    7fc0:	3884703a 	and	r2,r7,r2
    7fc4:	1204703a 	and	r2,r2,r8
    7fc8:	19bff626 	beq	r3,r6,7fa4 <__alt_data_end+0xfffbebc4>
    7fcc:	20800003 	ldbu	r2,0(r4)
    7fd0:	10c03fcc 	andi	r3,r2,255
    7fd4:	18c0201c 	xori	r3,r3,128
    7fd8:	18ffe004 	addi	r3,r3,-128
    7fdc:	18000c26 	beq	r3,zero,8010 <strcmp+0xac>
    7fe0:	29800007 	ldb	r6,0(r5)
    7fe4:	19800326 	beq	r3,r6,7ff4 <strcmp+0x90>
    7fe8:	00001306 	br	8038 <strcmp+0xd4>
    7fec:	29800007 	ldb	r6,0(r5)
    7ff0:	11800b1e 	bne	r2,r6,8020 <strcmp+0xbc>
    7ff4:	21000044 	addi	r4,r4,1
    7ff8:	20c00003 	ldbu	r3,0(r4)
    7ffc:	29400044 	addi	r5,r5,1
    8000:	18803fcc 	andi	r2,r3,255
    8004:	1080201c 	xori	r2,r2,128
    8008:	10bfe004 	addi	r2,r2,-128
    800c:	103ff71e 	bne	r2,zero,7fec <__alt_data_end+0xfffbec0c>
    8010:	0007883a 	mov	r3,zero
    8014:	28800003 	ldbu	r2,0(r5)
    8018:	1885c83a 	sub	r2,r3,r2
    801c:	f800283a 	ret
    8020:	28800003 	ldbu	r2,0(r5)
    8024:	18c03fcc 	andi	r3,r3,255
    8028:	1885c83a 	sub	r2,r3,r2
    802c:	f800283a 	ret
    8030:	0005883a 	mov	r2,zero
    8034:	f800283a 	ret
    8038:	10c03fcc 	andi	r3,r2,255
    803c:	003ff506 	br	8014 <__alt_data_end+0xfffbec34>

00008040 <__sprint_r.part.0>:
    8040:	28801917 	ldw	r2,100(r5)
    8044:	defff604 	addi	sp,sp,-40
    8048:	dd400515 	stw	r21,20(sp)
    804c:	dfc00915 	stw	ra,36(sp)
    8050:	df000815 	stw	fp,32(sp)
    8054:	ddc00715 	stw	r23,28(sp)
    8058:	dd800615 	stw	r22,24(sp)
    805c:	dd000415 	stw	r20,16(sp)
    8060:	dcc00315 	stw	r19,12(sp)
    8064:	dc800215 	stw	r18,8(sp)
    8068:	dc400115 	stw	r17,4(sp)
    806c:	dc000015 	stw	r16,0(sp)
    8070:	1088000c 	andi	r2,r2,8192
    8074:	302b883a 	mov	r21,r6
    8078:	10002e26 	beq	r2,zero,8134 <__sprint_r.part.0+0xf4>
    807c:	30800217 	ldw	r2,8(r6)
    8080:	35800017 	ldw	r22,0(r6)
    8084:	10002926 	beq	r2,zero,812c <__sprint_r.part.0+0xec>
    8088:	2827883a 	mov	r19,r5
    808c:	2029883a 	mov	r20,r4
    8090:	b5c00104 	addi	r23,r22,4
    8094:	04bfffc4 	movi	r18,-1
    8098:	bc400017 	ldw	r17,0(r23)
    809c:	b4000017 	ldw	r16,0(r22)
    80a0:	0039883a 	mov	fp,zero
    80a4:	8822d0ba 	srli	r17,r17,2
    80a8:	8800031e 	bne	r17,zero,80b8 <__sprint_r.part.0+0x78>
    80ac:	00001806 	br	8110 <__sprint_r.part.0+0xd0>
    80b0:	84000104 	addi	r16,r16,4
    80b4:	8f001526 	beq	r17,fp,810c <__sprint_r.part.0+0xcc>
    80b8:	81400017 	ldw	r5,0(r16)
    80bc:	980d883a 	mov	r6,r19
    80c0:	a009883a 	mov	r4,r20
    80c4:	0009c880 	call	9c88 <_fputwc_r>
    80c8:	e7000044 	addi	fp,fp,1
    80cc:	14bff81e 	bne	r2,r18,80b0 <__alt_data_end+0xfffbecd0>
    80d0:	9005883a 	mov	r2,r18
    80d4:	a8000215 	stw	zero,8(r21)
    80d8:	a8000115 	stw	zero,4(r21)
    80dc:	dfc00917 	ldw	ra,36(sp)
    80e0:	df000817 	ldw	fp,32(sp)
    80e4:	ddc00717 	ldw	r23,28(sp)
    80e8:	dd800617 	ldw	r22,24(sp)
    80ec:	dd400517 	ldw	r21,20(sp)
    80f0:	dd000417 	ldw	r20,16(sp)
    80f4:	dcc00317 	ldw	r19,12(sp)
    80f8:	dc800217 	ldw	r18,8(sp)
    80fc:	dc400117 	ldw	r17,4(sp)
    8100:	dc000017 	ldw	r16,0(sp)
    8104:	dec00a04 	addi	sp,sp,40
    8108:	f800283a 	ret
    810c:	a8800217 	ldw	r2,8(r21)
    8110:	8c63883a 	add	r17,r17,r17
    8114:	8c63883a 	add	r17,r17,r17
    8118:	1445c83a 	sub	r2,r2,r17
    811c:	a8800215 	stw	r2,8(r21)
    8120:	b5800204 	addi	r22,r22,8
    8124:	bdc00204 	addi	r23,r23,8
    8128:	103fdb1e 	bne	r2,zero,8098 <__alt_data_end+0xfffbecb8>
    812c:	0005883a 	mov	r2,zero
    8130:	003fe806 	br	80d4 <__alt_data_end+0xfffbecf4>
    8134:	00050380 	call	5038 <__sfvwrite_r>
    8138:	003fe606 	br	80d4 <__alt_data_end+0xfffbecf4>

0000813c <__sprint_r>:
    813c:	30c00217 	ldw	r3,8(r6)
    8140:	18000126 	beq	r3,zero,8148 <__sprint_r+0xc>
    8144:	00080401 	jmpi	8040 <__sprint_r.part.0>
    8148:	30000115 	stw	zero,4(r6)
    814c:	0005883a 	mov	r2,zero
    8150:	f800283a 	ret

00008154 <___vfiprintf_internal_r>:
    8154:	deffca04 	addi	sp,sp,-216
    8158:	dd403115 	stw	r21,196(sp)
    815c:	dfc03515 	stw	ra,212(sp)
    8160:	df003415 	stw	fp,208(sp)
    8164:	ddc03315 	stw	r23,204(sp)
    8168:	dd803215 	stw	r22,200(sp)
    816c:	dd003015 	stw	r20,192(sp)
    8170:	dcc02f15 	stw	r19,188(sp)
    8174:	dc802e15 	stw	r18,184(sp)
    8178:	dc402d15 	stw	r17,180(sp)
    817c:	dc002c15 	stw	r16,176(sp)
    8180:	d9002115 	stw	r4,132(sp)
    8184:	d9402015 	stw	r5,128(sp)
    8188:	d9c02215 	stw	r7,136(sp)
    818c:	302b883a 	mov	r21,r6
    8190:	20000226 	beq	r4,zero,819c <___vfiprintf_internal_r+0x48>
    8194:	20800e17 	ldw	r2,56(r4)
    8198:	1000cf26 	beq	r2,zero,84d8 <___vfiprintf_internal_r+0x384>
    819c:	d8c02017 	ldw	r3,128(sp)
    81a0:	1880030b 	ldhu	r2,12(r3)
    81a4:	10c8000c 	andi	r3,r2,8192
    81a8:	1800071e 	bne	r3,zero,81c8 <___vfiprintf_internal_r+0x74>
    81ac:	d9402017 	ldw	r5,128(sp)
    81b0:	00f7ffc4 	movi	r3,-8193
    81b4:	10880014 	ori	r2,r2,8192
    81b8:	29001917 	ldw	r4,100(r5)
    81bc:	2880030d 	sth	r2,12(r5)
    81c0:	20c6703a 	and	r3,r4,r3
    81c4:	28c01915 	stw	r3,100(r5)
    81c8:	10c0020c 	andi	r3,r2,8
    81cc:	1800a526 	beq	r3,zero,8464 <___vfiprintf_internal_r+0x310>
    81d0:	d9002017 	ldw	r4,128(sp)
    81d4:	20c00417 	ldw	r3,16(r4)
    81d8:	1800a226 	beq	r3,zero,8464 <___vfiprintf_internal_r+0x310>
    81dc:	1080068c 	andi	r2,r2,26
    81e0:	00c00284 	movi	r3,10
    81e4:	10c0a826 	beq	r2,r3,8488 <___vfiprintf_internal_r+0x334>
    81e8:	d9001a04 	addi	r4,sp,104
    81ec:	d94019c4 	addi	r5,sp,103
    81f0:	04800074 	movhi	r18,1
    81f4:	2145c83a 	sub	r2,r4,r5
    81f8:	9481fb04 	addi	r18,r18,2028
    81fc:	d9001e15 	stw	r4,120(sp)
    8200:	d9401f15 	stw	r5,124(sp)
    8204:	dec01a15 	stw	sp,104(sp)
    8208:	d8001c15 	stw	zero,112(sp)
    820c:	d8001b15 	stw	zero,108(sp)
    8210:	d811883a 	mov	r8,sp
    8214:	d8002615 	stw	zero,152(sp)
    8218:	d8002415 	stw	zero,144(sp)
    821c:	d8802815 	stw	r2,160(sp)
    8220:	a82d883a 	mov	r22,r21
    8224:	b0800007 	ldb	r2,0(r22)
    8228:	10040d26 	beq	r2,zero,9260 <___vfiprintf_internal_r+0x110c>
    822c:	00c00944 	movi	r3,37
    8230:	b029883a 	mov	r20,r22
    8234:	10c0021e 	bne	r2,r3,8240 <___vfiprintf_internal_r+0xec>
    8238:	00001606 	br	8294 <___vfiprintf_internal_r+0x140>
    823c:	10c00326 	beq	r2,r3,824c <___vfiprintf_internal_r+0xf8>
    8240:	a5000044 	addi	r20,r20,1
    8244:	a0800007 	ldb	r2,0(r20)
    8248:	103ffc1e 	bne	r2,zero,823c <__alt_data_end+0xfffbee5c>
    824c:	a5a1c83a 	sub	r16,r20,r22
    8250:	80001026 	beq	r16,zero,8294 <___vfiprintf_internal_r+0x140>
    8254:	d8c01c17 	ldw	r3,112(sp)
    8258:	d8801b17 	ldw	r2,108(sp)
    825c:	45800015 	stw	r22,0(r8)
    8260:	80c7883a 	add	r3,r16,r3
    8264:	10800044 	addi	r2,r2,1
    8268:	44000115 	stw	r16,4(r8)
    826c:	d8c01c15 	stw	r3,112(sp)
    8270:	d8801b15 	stw	r2,108(sp)
    8274:	010001c4 	movi	r4,7
    8278:	2080750e 	bge	r4,r2,8450 <___vfiprintf_internal_r+0x2fc>
    827c:	1803951e 	bne	r3,zero,90d4 <___vfiprintf_internal_r+0xf80>
    8280:	d8c02417 	ldw	r3,144(sp)
    8284:	d8001b15 	stw	zero,108(sp)
    8288:	d811883a 	mov	r8,sp
    828c:	1c07883a 	add	r3,r3,r16
    8290:	d8c02415 	stw	r3,144(sp)
    8294:	a0800007 	ldb	r2,0(r20)
    8298:	1002e026 	beq	r2,zero,8e1c <___vfiprintf_internal_r+0xcc8>
    829c:	a5800044 	addi	r22,r20,1
    82a0:	a0c00047 	ldb	r3,1(r20)
    82a4:	d8001d85 	stb	zero,118(sp)
    82a8:	0027883a 	mov	r19,zero
    82ac:	d8002305 	stb	zero,140(sp)
    82b0:	043fffc4 	movi	r16,-1
    82b4:	d8002515 	stw	zero,148(sp)
    82b8:	0023883a 	mov	r17,zero
    82bc:	05001604 	movi	r20,88
    82c0:	05400244 	movi	r21,9
    82c4:	402f883a 	mov	r23,r8
    82c8:	b5800044 	addi	r22,r22,1
    82cc:	18bff804 	addi	r2,r3,-32
    82d0:	a0827736 	bltu	r20,r2,8cb0 <___vfiprintf_internal_r+0xb5c>
    82d4:	100490ba 	slli	r2,r2,2
    82d8:	01000074 	movhi	r4,1
    82dc:	2120bb04 	addi	r4,r4,-32020
    82e0:	1105883a 	add	r2,r2,r4
    82e4:	10800017 	ldw	r2,0(r2)
    82e8:	1000683a 	jmp	r2
    82ec:	000089b0 	cmpltui	zero,zero,550
    82f0:	00008cb0 	cmpltui	zero,zero,562
    82f4:	00008cb0 	cmpltui	zero,zero,562
    82f8:	000089cc 	andi	zero,zero,551
    82fc:	00008cb0 	cmpltui	zero,zero,562
    8300:	00008cb0 	cmpltui	zero,zero,562
    8304:	00008cb0 	cmpltui	zero,zero,562
    8308:	00008cb0 	cmpltui	zero,zero,562
    830c:	00008cb0 	cmpltui	zero,zero,562
    8310:	00008cb0 	cmpltui	zero,zero,562
    8314:	00008bd4 	movui	zero,559
    8318:	00008bf8 	rdprs	zero,zero,559
    831c:	00008cb0 	cmpltui	zero,zero,562
    8320:	000084f0 	cmpltui	zero,zero,531
    8324:	00008c0c 	andi	zero,zero,560
    8328:	00008cb0 	cmpltui	zero,zero,562
    832c:	000089d8 	cmpnei	zero,zero,551
    8330:	000089e4 	muli	zero,zero,551
    8334:	000089e4 	muli	zero,zero,551
    8338:	000089e4 	muli	zero,zero,551
    833c:	000089e4 	muli	zero,zero,551
    8340:	000089e4 	muli	zero,zero,551
    8344:	000089e4 	muli	zero,zero,551
    8348:	000089e4 	muli	zero,zero,551
    834c:	000089e4 	muli	zero,zero,551
    8350:	000089e4 	muli	zero,zero,551
    8354:	00008cb0 	cmpltui	zero,zero,562
    8358:	00008cb0 	cmpltui	zero,zero,562
    835c:	00008cb0 	cmpltui	zero,zero,562
    8360:	00008cb0 	cmpltui	zero,zero,562
    8364:	00008cb0 	cmpltui	zero,zero,562
    8368:	00008cb0 	cmpltui	zero,zero,562
    836c:	00008cb0 	cmpltui	zero,zero,562
    8370:	00008cb0 	cmpltui	zero,zero,562
    8374:	00008cb0 	cmpltui	zero,zero,562
    8378:	00008cb0 	cmpltui	zero,zero,562
    837c:	00008a24 	muli	zero,zero,552
    8380:	00008cb0 	cmpltui	zero,zero,562
    8384:	00008cb0 	cmpltui	zero,zero,562
    8388:	00008cb0 	cmpltui	zero,zero,562
    838c:	00008cb0 	cmpltui	zero,zero,562
    8390:	00008cb0 	cmpltui	zero,zero,562
    8394:	00008cb0 	cmpltui	zero,zero,562
    8398:	00008cb0 	cmpltui	zero,zero,562
    839c:	00008cb0 	cmpltui	zero,zero,562
    83a0:	00008cb0 	cmpltui	zero,zero,562
    83a4:	00008cb0 	cmpltui	zero,zero,562
    83a8:	00008a60 	cmpeqi	zero,zero,553
    83ac:	00008cb0 	cmpltui	zero,zero,562
    83b0:	00008cb0 	cmpltui	zero,zero,562
    83b4:	00008cb0 	cmpltui	zero,zero,562
    83b8:	00008cb0 	cmpltui	zero,zero,562
    83bc:	00008cb0 	cmpltui	zero,zero,562
    83c0:	00008abc 	xorhi	zero,zero,554
    83c4:	00008cb0 	cmpltui	zero,zero,562
    83c8:	00008cb0 	cmpltui	zero,zero,562
    83cc:	00008b30 	cmpltui	zero,zero,556
    83d0:	00008cb0 	cmpltui	zero,zero,562
    83d4:	00008cb0 	cmpltui	zero,zero,562
    83d8:	00008cb0 	cmpltui	zero,zero,562
    83dc:	00008cb0 	cmpltui	zero,zero,562
    83e0:	00008cb0 	cmpltui	zero,zero,562
    83e4:	00008cb0 	cmpltui	zero,zero,562
    83e8:	00008cb0 	cmpltui	zero,zero,562
    83ec:	00008cb0 	cmpltui	zero,zero,562
    83f0:	00008cb0 	cmpltui	zero,zero,562
    83f4:	00008cb0 	cmpltui	zero,zero,562
    83f8:	000088d8 	cmpnei	zero,zero,547
    83fc:	00008908 	cmpgei	zero,zero,548
    8400:	00008cb0 	cmpltui	zero,zero,562
    8404:	00008cb0 	cmpltui	zero,zero,562
    8408:	00008cb0 	cmpltui	zero,zero,562
    840c:	00008c58 	cmpnei	zero,zero,561
    8410:	00008908 	cmpgei	zero,zero,548
    8414:	00008cb0 	cmpltui	zero,zero,562
    8418:	00008cb0 	cmpltui	zero,zero,562
    841c:	000087b0 	cmpltui	zero,zero,542
    8420:	00008cb0 	cmpltui	zero,zero,562
    8424:	000087c4 	movi	zero,543
    8428:	000087fc 	xorhi	zero,zero,543
    842c:	000084fc 	xorhi	zero,zero,531
    8430:	000087a4 	muli	zero,zero,542
    8434:	00008cb0 	cmpltui	zero,zero,562
    8438:	00008b70 	cmpltui	zero,zero,557
    843c:	00008cb0 	cmpltui	zero,zero,562
    8440:	00008bbc 	xorhi	zero,zero,558
    8444:	00008cb0 	cmpltui	zero,zero,562
    8448:	00008cb0 	cmpltui	zero,zero,562
    844c:	00008880 	call	888 <___vfprintf_internal_r+0x94>
    8450:	42000204 	addi	r8,r8,8
    8454:	d8c02417 	ldw	r3,144(sp)
    8458:	1c07883a 	add	r3,r3,r16
    845c:	d8c02415 	stw	r3,144(sp)
    8460:	003f8c06 	br	8294 <__alt_data_end+0xfffbeeb4>
    8464:	d9402017 	ldw	r5,128(sp)
    8468:	d9002117 	ldw	r4,132(sp)
    846c:	0002ba80 	call	2ba8 <__swsetup_r>
    8470:	1003c11e 	bne	r2,zero,9378 <___vfiprintf_internal_r+0x1224>
    8474:	d9402017 	ldw	r5,128(sp)
    8478:	00c00284 	movi	r3,10
    847c:	2880030b 	ldhu	r2,12(r5)
    8480:	1080068c 	andi	r2,r2,26
    8484:	10ff581e 	bne	r2,r3,81e8 <__alt_data_end+0xfffbee08>
    8488:	d8c02017 	ldw	r3,128(sp)
    848c:	1880038f 	ldh	r2,14(r3)
    8490:	103f5516 	blt	r2,zero,81e8 <__alt_data_end+0xfffbee08>
    8494:	d9c02217 	ldw	r7,136(sp)
    8498:	d9002117 	ldw	r4,132(sp)
    849c:	a80d883a 	mov	r6,r21
    84a0:	180b883a 	mov	r5,r3
    84a4:	000967c0 	call	967c <__sbprintf>
    84a8:	dfc03517 	ldw	ra,212(sp)
    84ac:	df003417 	ldw	fp,208(sp)
    84b0:	ddc03317 	ldw	r23,204(sp)
    84b4:	dd803217 	ldw	r22,200(sp)
    84b8:	dd403117 	ldw	r21,196(sp)
    84bc:	dd003017 	ldw	r20,192(sp)
    84c0:	dcc02f17 	ldw	r19,188(sp)
    84c4:	dc802e17 	ldw	r18,184(sp)
    84c8:	dc402d17 	ldw	r17,180(sp)
    84cc:	dc002c17 	ldw	r16,176(sp)
    84d0:	dec03604 	addi	sp,sp,216
    84d4:	f800283a 	ret
    84d8:	0004bb40 	call	4bb4 <__sinit>
    84dc:	003f2f06 	br	819c <__alt_data_end+0xfffbedbc>
    84e0:	d8c02517 	ldw	r3,148(sp)
    84e4:	d8802215 	stw	r2,136(sp)
    84e8:	00c7c83a 	sub	r3,zero,r3
    84ec:	d8c02515 	stw	r3,148(sp)
    84f0:	8c400114 	ori	r17,r17,4
    84f4:	b0c00007 	ldb	r3,0(r22)
    84f8:	003f7306 	br	82c8 <__alt_data_end+0xfffbeee8>
    84fc:	00800c04 	movi	r2,48
    8500:	d9402217 	ldw	r5,136(sp)
    8504:	d8801d05 	stb	r2,116(sp)
    8508:	00801e04 	movi	r2,120
    850c:	d8801d45 	stb	r2,117(sp)
    8510:	d8001d85 	stb	zero,118(sp)
    8514:	b811883a 	mov	r8,r23
    8518:	28c00104 	addi	r3,r5,4
    851c:	2cc00017 	ldw	r19,0(r5)
    8520:	0029883a 	mov	r20,zero
    8524:	88800094 	ori	r2,r17,2
    8528:	80032516 	blt	r16,zero,91c0 <___vfiprintf_internal_r+0x106c>
    852c:	00bfdfc4 	movi	r2,-129
    8530:	88a2703a 	and	r17,r17,r2
    8534:	d8c02215 	stw	r3,136(sp)
    8538:	8c400094 	ori	r17,r17,2
    853c:	98032a1e 	bne	r19,zero,91e8 <___vfiprintf_internal_r+0x1094>
    8540:	00800074 	movhi	r2,1
    8544:	10819a04 	addi	r2,r2,1640
    8548:	d8802615 	stw	r2,152(sp)
    854c:	002b883a 	mov	r21,zero
    8550:	8001741e 	bne	r16,zero,8b24 <___vfiprintf_internal_r+0x9d0>
    8554:	0021883a 	mov	r16,zero
    8558:	0029883a 	mov	r20,zero
    855c:	ddc01a04 	addi	r23,sp,104
    8560:	8027883a 	mov	r19,r16
    8564:	8500010e 	bge	r16,r20,856c <___vfiprintf_internal_r+0x418>
    8568:	a027883a 	mov	r19,r20
    856c:	ad403fcc 	andi	r21,r21,255
    8570:	ad40201c 	xori	r21,r21,128
    8574:	ad7fe004 	addi	r21,r21,-128
    8578:	a8000126 	beq	r21,zero,8580 <___vfiprintf_internal_r+0x42c>
    857c:	9cc00044 	addi	r19,r19,1
    8580:	89c0008c 	andi	r7,r17,2
    8584:	38000126 	beq	r7,zero,858c <___vfiprintf_internal_r+0x438>
    8588:	9cc00084 	addi	r19,r19,2
    858c:	88c0210c 	andi	r3,r17,132
    8590:	1801dd1e 	bne	r3,zero,8d08 <___vfiprintf_internal_r+0xbb4>
    8594:	d9402517 	ldw	r5,148(sp)
    8598:	2cebc83a 	sub	r21,r5,r19
    859c:	0541da0e 	bge	zero,r21,8d08 <___vfiprintf_internal_r+0xbb4>
    85a0:	07000404 	movi	fp,16
    85a4:	d8801c17 	ldw	r2,112(sp)
    85a8:	e543be0e 	bge	fp,r21,94a4 <___vfiprintf_internal_r+0x1350>
    85ac:	01400074 	movhi	r5,1
    85b0:	2941ff04 	addi	r5,r5,2044
    85b4:	dc002715 	stw	r16,156(sp)
    85b8:	d9801b17 	ldw	r6,108(sp)
    85bc:	a821883a 	mov	r16,r21
    85c0:	d9402315 	stw	r5,140(sp)
    85c4:	028001c4 	movi	r10,7
    85c8:	d9c02915 	stw	r7,164(sp)
    85cc:	182b883a 	mov	r21,r3
    85d0:	00000506 	br	85e8 <___vfiprintf_internal_r+0x494>
    85d4:	31000084 	addi	r4,r6,2
    85d8:	42000204 	addi	r8,r8,8
    85dc:	180d883a 	mov	r6,r3
    85e0:	843ffc04 	addi	r16,r16,-16
    85e4:	e4000f0e 	bge	fp,r16,8624 <___vfiprintf_internal_r+0x4d0>
    85e8:	01000074 	movhi	r4,1
    85ec:	10800404 	addi	r2,r2,16
    85f0:	30c00044 	addi	r3,r6,1
    85f4:	2101ff04 	addi	r4,r4,2044
    85f8:	41000015 	stw	r4,0(r8)
    85fc:	47000115 	stw	fp,4(r8)
    8600:	d8801c15 	stw	r2,112(sp)
    8604:	d8c01b15 	stw	r3,108(sp)
    8608:	50fff20e 	bge	r10,r3,85d4 <__alt_data_end+0xfffbf1f4>
    860c:	1001b21e 	bne	r2,zero,8cd8 <___vfiprintf_internal_r+0xb84>
    8610:	843ffc04 	addi	r16,r16,-16
    8614:	000d883a 	mov	r6,zero
    8618:	01000044 	movi	r4,1
    861c:	d811883a 	mov	r8,sp
    8620:	e43ff116 	blt	fp,r16,85e8 <__alt_data_end+0xfffbf208>
    8624:	a807883a 	mov	r3,r21
    8628:	d9c02917 	ldw	r7,164(sp)
    862c:	802b883a 	mov	r21,r16
    8630:	dc002717 	ldw	r16,156(sp)
    8634:	d9402317 	ldw	r5,140(sp)
    8638:	a885883a 	add	r2,r21,r2
    863c:	45400115 	stw	r21,4(r8)
    8640:	41400015 	stw	r5,0(r8)
    8644:	d8801c15 	stw	r2,112(sp)
    8648:	d9001b15 	stw	r4,108(sp)
    864c:	014001c4 	movi	r5,7
    8650:	29026216 	blt	r5,r4,8fdc <___vfiprintf_internal_r+0xe88>
    8654:	d9801d87 	ldb	r6,118(sp)
    8658:	42000204 	addi	r8,r8,8
    865c:	21400044 	addi	r5,r4,1
    8660:	3001ae1e 	bne	r6,zero,8d1c <___vfiprintf_internal_r+0xbc8>
    8664:	3801bb26 	beq	r7,zero,8d54 <___vfiprintf_internal_r+0xc00>
    8668:	d9001d04 	addi	r4,sp,116
    866c:	10800084 	addi	r2,r2,2
    8670:	41000015 	stw	r4,0(r8)
    8674:	01000084 	movi	r4,2
    8678:	41000115 	stw	r4,4(r8)
    867c:	d8801c15 	stw	r2,112(sp)
    8680:	d9401b15 	stw	r5,108(sp)
    8684:	010001c4 	movi	r4,7
    8688:	2142680e 	bge	r4,r5,902c <___vfiprintf_internal_r+0xed8>
    868c:	1002b11e 	bne	r2,zero,9154 <___vfiprintf_internal_r+0x1000>
    8690:	01802004 	movi	r6,128
    8694:	01400044 	movi	r5,1
    8698:	0009883a 	mov	r4,zero
    869c:	d811883a 	mov	r8,sp
    86a0:	1981ae1e 	bne	r3,r6,8d5c <___vfiprintf_internal_r+0xc08>
    86a4:	d8c02517 	ldw	r3,148(sp)
    86a8:	1cf9c83a 	sub	fp,r3,r19
    86ac:	0701ab0e 	bge	zero,fp,8d5c <___vfiprintf_internal_r+0xc08>
    86b0:	05400404 	movi	r21,16
    86b4:	af03a90e 	bge	r21,fp,955c <___vfiprintf_internal_r+0x1408>
    86b8:	01400074 	movhi	r5,1
    86bc:	2941fb04 	addi	r5,r5,2028
    86c0:	d9402315 	stw	r5,140(sp)
    86c4:	01c001c4 	movi	r7,7
    86c8:	00000506 	br	86e0 <___vfiprintf_internal_r+0x58c>
    86cc:	21800084 	addi	r6,r4,2
    86d0:	42000204 	addi	r8,r8,8
    86d4:	1809883a 	mov	r4,r3
    86d8:	e73ffc04 	addi	fp,fp,-16
    86dc:	af000d0e 	bge	r21,fp,8714 <___vfiprintf_internal_r+0x5c0>
    86e0:	10800404 	addi	r2,r2,16
    86e4:	20c00044 	addi	r3,r4,1
    86e8:	44800015 	stw	r18,0(r8)
    86ec:	45400115 	stw	r21,4(r8)
    86f0:	d8801c15 	stw	r2,112(sp)
    86f4:	d8c01b15 	stw	r3,108(sp)
    86f8:	38fff40e 	bge	r7,r3,86cc <__alt_data_end+0xfffbf2ec>
    86fc:	10022b1e 	bne	r2,zero,8fac <___vfiprintf_internal_r+0xe58>
    8700:	e73ffc04 	addi	fp,fp,-16
    8704:	01800044 	movi	r6,1
    8708:	0009883a 	mov	r4,zero
    870c:	d811883a 	mov	r8,sp
    8710:	af3ff316 	blt	r21,fp,86e0 <__alt_data_end+0xfffbf300>
    8714:	d8c02317 	ldw	r3,140(sp)
    8718:	1705883a 	add	r2,r2,fp
    871c:	47000115 	stw	fp,4(r8)
    8720:	40c00015 	stw	r3,0(r8)
    8724:	d8801c15 	stw	r2,112(sp)
    8728:	d9801b15 	stw	r6,108(sp)
    872c:	00c001c4 	movi	r3,7
    8730:	19829416 	blt	r3,r6,9184 <___vfiprintf_internal_r+0x1030>
    8734:	8521c83a 	sub	r16,r16,r20
    8738:	42000204 	addi	r8,r8,8
    873c:	31400044 	addi	r5,r6,1
    8740:	3009883a 	mov	r4,r6
    8744:	04018716 	blt	zero,r16,8d64 <___vfiprintf_internal_r+0xc10>
    8748:	a085883a 	add	r2,r20,r2
    874c:	45c00015 	stw	r23,0(r8)
    8750:	45000115 	stw	r20,4(r8)
    8754:	d8801c15 	stw	r2,112(sp)
    8758:	d9401b15 	stw	r5,108(sp)
    875c:	00c001c4 	movi	r3,7
    8760:	1941c20e 	bge	r3,r5,8e6c <___vfiprintf_internal_r+0xd18>
    8764:	1002531e 	bne	r2,zero,90b4 <___vfiprintf_internal_r+0xf60>
    8768:	d8001b15 	stw	zero,108(sp)
    876c:	8c40010c 	andi	r17,r17,4
    8770:	88023226 	beq	r17,zero,903c <___vfiprintf_internal_r+0xee8>
    8774:	d9002517 	ldw	r4,148(sp)
    8778:	24e3c83a 	sub	r17,r4,r19
    877c:	04432916 	blt	zero,r17,9424 <___vfiprintf_internal_r+0x12d0>
    8780:	d8802517 	ldw	r2,148(sp)
    8784:	14c0010e 	bge	r2,r19,878c <___vfiprintf_internal_r+0x638>
    8788:	9805883a 	mov	r2,r19
    878c:	d8c02417 	ldw	r3,144(sp)
    8790:	1887883a 	add	r3,r3,r2
    8794:	d8c02415 	stw	r3,144(sp)
    8798:	d8001b15 	stw	zero,108(sp)
    879c:	d811883a 	mov	r8,sp
    87a0:	003ea006 	br	8224 <__alt_data_end+0xfffbee44>
    87a4:	8c400814 	ori	r17,r17,32
    87a8:	b0c00007 	ldb	r3,0(r22)
    87ac:	003ec606 	br	82c8 <__alt_data_end+0xfffbeee8>
    87b0:	b0c00007 	ldb	r3,0(r22)
    87b4:	00801b04 	movi	r2,108
    87b8:	18832026 	beq	r3,r2,943c <___vfiprintf_internal_r+0x12e8>
    87bc:	8c400414 	ori	r17,r17,16
    87c0:	003ec106 	br	82c8 <__alt_data_end+0xfffbeee8>
    87c4:	9cc03fcc 	andi	r19,r19,255
    87c8:	b811883a 	mov	r8,r23
    87cc:	9803981e 	bne	r19,zero,9630 <___vfiprintf_internal_r+0x14dc>
    87d0:	8880080c 	andi	r2,r17,32
    87d4:	1002be26 	beq	r2,zero,92d0 <___vfiprintf_internal_r+0x117c>
    87d8:	d9002217 	ldw	r4,136(sp)
    87dc:	d9402417 	ldw	r5,144(sp)
    87e0:	20800017 	ldw	r2,0(r4)
    87e4:	2807d7fa 	srai	r3,r5,31
    87e8:	21000104 	addi	r4,r4,4
    87ec:	d9002215 	stw	r4,136(sp)
    87f0:	11400015 	stw	r5,0(r2)
    87f4:	10c00115 	stw	r3,4(r2)
    87f8:	003e8a06 	br	8224 <__alt_data_end+0xfffbee44>
    87fc:	9cc03fcc 	andi	r19,r19,255
    8800:	b811883a 	mov	r8,r23
    8804:	9803871e 	bne	r19,zero,9624 <___vfiprintf_internal_r+0x14d0>
    8808:	8880080c 	andi	r2,r17,32
    880c:	10009a26 	beq	r2,zero,8a78 <___vfiprintf_internal_r+0x924>
    8810:	d9002217 	ldw	r4,136(sp)
    8814:	d8001d85 	stb	zero,118(sp)
    8818:	20800204 	addi	r2,r4,8
    881c:	24c00017 	ldw	r19,0(r4)
    8820:	25000117 	ldw	r20,4(r4)
    8824:	8002a416 	blt	r16,zero,92b8 <___vfiprintf_internal_r+0x1164>
    8828:	013fdfc4 	movi	r4,-129
    882c:	9d06b03a 	or	r3,r19,r20
    8830:	d8802215 	stw	r2,136(sp)
    8834:	8922703a 	and	r17,r17,r4
    8838:	18009b26 	beq	r3,zero,8aa8 <___vfiprintf_internal_r+0x954>
    883c:	002b883a 	mov	r21,zero
    8840:	ddc01a04 	addi	r23,sp,104
    8844:	9806d0fa 	srli	r3,r19,3
    8848:	a008977a 	slli	r4,r20,29
    884c:	a028d0fa 	srli	r20,r20,3
    8850:	9cc001cc 	andi	r19,r19,7
    8854:	98800c04 	addi	r2,r19,48
    8858:	bdffffc4 	addi	r23,r23,-1
    885c:	20e6b03a 	or	r19,r4,r3
    8860:	b8800005 	stb	r2,0(r23)
    8864:	9d06b03a 	or	r3,r19,r20
    8868:	183ff61e 	bne	r3,zero,8844 <__alt_data_end+0xfffbf464>
    886c:	88c0004c 	andi	r3,r17,1
    8870:	18021f1e 	bne	r3,zero,90f0 <___vfiprintf_internal_r+0xf9c>
    8874:	d9401e17 	ldw	r5,120(sp)
    8878:	2de9c83a 	sub	r20,r5,r23
    887c:	003f3806 	br	8560 <__alt_data_end+0xfffbf180>
    8880:	9cc03fcc 	andi	r19,r19,255
    8884:	b811883a 	mov	r8,r23
    8888:	98034f1e 	bne	r19,zero,95c8 <___vfiprintf_internal_r+0x1474>
    888c:	00800074 	movhi	r2,1
    8890:	10819a04 	addi	r2,r2,1640
    8894:	d8802615 	stw	r2,152(sp)
    8898:	8880080c 	andi	r2,r17,32
    889c:	1000ac26 	beq	r2,zero,8b50 <___vfiprintf_internal_r+0x9fc>
    88a0:	d9002217 	ldw	r4,136(sp)
    88a4:	24c00017 	ldw	r19,0(r4)
    88a8:	25000117 	ldw	r20,4(r4)
    88ac:	21000204 	addi	r4,r4,8
    88b0:	d9002215 	stw	r4,136(sp)
    88b4:	8880004c 	andi	r2,r17,1
    88b8:	1001e726 	beq	r2,zero,9058 <___vfiprintf_internal_r+0xf04>
    88bc:	9d04b03a 	or	r2,r19,r20
    88c0:	10025c1e 	bne	r2,zero,9234 <___vfiprintf_internal_r+0x10e0>
    88c4:	d8001d85 	stb	zero,118(sp)
    88c8:	80024416 	blt	r16,zero,91dc <___vfiprintf_internal_r+0x1088>
    88cc:	00bfdfc4 	movi	r2,-129
    88d0:	88a2703a 	and	r17,r17,r2
    88d4:	003f1d06 	br	854c <__alt_data_end+0xfffbf16c>
    88d8:	d8c02217 	ldw	r3,136(sp)
    88dc:	04c00044 	movi	r19,1
    88e0:	b811883a 	mov	r8,r23
    88e4:	18800017 	ldw	r2,0(r3)
    88e8:	18c00104 	addi	r3,r3,4
    88ec:	d8001d85 	stb	zero,118(sp)
    88f0:	d8801005 	stb	r2,64(sp)
    88f4:	d8c02215 	stw	r3,136(sp)
    88f8:	9829883a 	mov	r20,r19
    88fc:	ddc01004 	addi	r23,sp,64
    8900:	0021883a 	mov	r16,zero
    8904:	003f1e06 	br	8580 <__alt_data_end+0xfffbf1a0>
    8908:	9cc03fcc 	andi	r19,r19,255
    890c:	b811883a 	mov	r8,r23
    8910:	9803331e 	bne	r19,zero,95e0 <___vfiprintf_internal_r+0x148c>
    8914:	8880080c 	andi	r2,r17,32
    8918:	10004826 	beq	r2,zero,8a3c <___vfiprintf_internal_r+0x8e8>
    891c:	d9002217 	ldw	r4,136(sp)
    8920:	20800117 	ldw	r2,4(r4)
    8924:	24c00017 	ldw	r19,0(r4)
    8928:	21000204 	addi	r4,r4,8
    892c:	d9002215 	stw	r4,136(sp)
    8930:	1029883a 	mov	r20,r2
    8934:	10024c16 	blt	r2,zero,9268 <___vfiprintf_internal_r+0x1114>
    8938:	dd401d83 	ldbu	r21,118(sp)
    893c:	80007116 	blt	r16,zero,8b04 <___vfiprintf_internal_r+0x9b0>
    8940:	00ffdfc4 	movi	r3,-129
    8944:	9d04b03a 	or	r2,r19,r20
    8948:	88e2703a 	and	r17,r17,r3
    894c:	1000d126 	beq	r2,zero,8c94 <___vfiprintf_internal_r+0xb40>
    8950:	a0023526 	beq	r20,zero,9228 <___vfiprintf_internal_r+0x10d4>
    8954:	ddc01a04 	addi	r23,sp,104
    8958:	4039883a 	mov	fp,r8
    895c:	9809883a 	mov	r4,r19
    8960:	a00b883a 	mov	r5,r20
    8964:	01800284 	movi	r6,10
    8968:	000f883a 	mov	r7,zero
    896c:	000a6800 	call	a680 <__umoddi3>
    8970:	10800c04 	addi	r2,r2,48
    8974:	bdffffc4 	addi	r23,r23,-1
    8978:	9809883a 	mov	r4,r19
    897c:	a00b883a 	mov	r5,r20
    8980:	b8800005 	stb	r2,0(r23)
    8984:	01800284 	movi	r6,10
    8988:	000f883a 	mov	r7,zero
    898c:	000a0840 	call	a084 <__udivdi3>
    8990:	1027883a 	mov	r19,r2
    8994:	10c4b03a 	or	r2,r2,r3
    8998:	1829883a 	mov	r20,r3
    899c:	103fef1e 	bne	r2,zero,895c <__alt_data_end+0xfffbf57c>
    89a0:	d9001e17 	ldw	r4,120(sp)
    89a4:	e011883a 	mov	r8,fp
    89a8:	25e9c83a 	sub	r20,r4,r23
    89ac:	003eec06 	br	8560 <__alt_data_end+0xfffbf180>
    89b0:	d8802307 	ldb	r2,140(sp)
    89b4:	1002361e 	bne	r2,zero,9290 <___vfiprintf_internal_r+0x113c>
    89b8:	00c00804 	movi	r3,32
    89bc:	d8c02305 	stb	r3,140(sp)
    89c0:	04c00044 	movi	r19,1
    89c4:	b0c00007 	ldb	r3,0(r22)
    89c8:	003e3f06 	br	82c8 <__alt_data_end+0xfffbeee8>
    89cc:	8c400054 	ori	r17,r17,1
    89d0:	b0c00007 	ldb	r3,0(r22)
    89d4:	003e3c06 	br	82c8 <__alt_data_end+0xfffbeee8>
    89d8:	8c402014 	ori	r17,r17,128
    89dc:	b0c00007 	ldb	r3,0(r22)
    89e0:	003e3906 	br	82c8 <__alt_data_end+0xfffbeee8>
    89e4:	dc002715 	stw	r16,156(sp)
    89e8:	d8002515 	stw	zero,148(sp)
    89ec:	1f3ff404 	addi	fp,r3,-48
    89f0:	0009883a 	mov	r4,zero
    89f4:	b021883a 	mov	r16,r22
    89f8:	01400284 	movi	r5,10
    89fc:	000adf80 	call	adf8 <__mulsi3>
    8a00:	80c00007 	ldb	r3,0(r16)
    8a04:	e089883a 	add	r4,fp,r2
    8a08:	b5800044 	addi	r22,r22,1
    8a0c:	1f3ff404 	addi	fp,r3,-48
    8a10:	b021883a 	mov	r16,r22
    8a14:	af3ff82e 	bgeu	r21,fp,89f8 <__alt_data_end+0xfffbf618>
    8a18:	d9002515 	stw	r4,148(sp)
    8a1c:	dc002717 	ldw	r16,156(sp)
    8a20:	003e2a06 	br	82cc <__alt_data_end+0xfffbeeec>
    8a24:	9cc03fcc 	andi	r19,r19,255
    8a28:	b811883a 	mov	r8,r23
    8a2c:	9802e91e 	bne	r19,zero,95d4 <___vfiprintf_internal_r+0x1480>
    8a30:	8c400414 	ori	r17,r17,16
    8a34:	8880080c 	andi	r2,r17,32
    8a38:	103fb81e 	bne	r2,zero,891c <__alt_data_end+0xfffbf53c>
    8a3c:	8880040c 	andi	r2,r17,16
    8a40:	10022e26 	beq	r2,zero,92fc <___vfiprintf_internal_r+0x11a8>
    8a44:	d9402217 	ldw	r5,136(sp)
    8a48:	2cc00017 	ldw	r19,0(r5)
    8a4c:	29400104 	addi	r5,r5,4
    8a50:	d9402215 	stw	r5,136(sp)
    8a54:	9829d7fa 	srai	r20,r19,31
    8a58:	a005883a 	mov	r2,r20
    8a5c:	003fb506 	br	8934 <__alt_data_end+0xfffbf554>
    8a60:	9cc03fcc 	andi	r19,r19,255
    8a64:	b811883a 	mov	r8,r23
    8a68:	9802fa1e 	bne	r19,zero,9654 <___vfiprintf_internal_r+0x1500>
    8a6c:	8c400414 	ori	r17,r17,16
    8a70:	8880080c 	andi	r2,r17,32
    8a74:	103f661e 	bne	r2,zero,8810 <__alt_data_end+0xfffbf430>
    8a78:	8880040c 	andi	r2,r17,16
    8a7c:	10020626 	beq	r2,zero,9298 <___vfiprintf_internal_r+0x1144>
    8a80:	d9402217 	ldw	r5,136(sp)
    8a84:	d8001d85 	stb	zero,118(sp)
    8a88:	0029883a 	mov	r20,zero
    8a8c:	28800104 	addi	r2,r5,4
    8a90:	2cc00017 	ldw	r19,0(r5)
    8a94:	80020816 	blt	r16,zero,92b8 <___vfiprintf_internal_r+0x1164>
    8a98:	00ffdfc4 	movi	r3,-129
    8a9c:	d8802215 	stw	r2,136(sp)
    8aa0:	88e2703a 	and	r17,r17,r3
    8aa4:	983f651e 	bne	r19,zero,883c <__alt_data_end+0xfffbf45c>
    8aa8:	002b883a 	mov	r21,zero
    8aac:	8002cf26 	beq	r16,zero,95ec <___vfiprintf_internal_r+0x1498>
    8ab0:	0027883a 	mov	r19,zero
    8ab4:	0029883a 	mov	r20,zero
    8ab8:	003f6106 	br	8840 <__alt_data_end+0xfffbf460>
    8abc:	9cc03fcc 	andi	r19,r19,255
    8ac0:	b811883a 	mov	r8,r23
    8ac4:	9802e01e 	bne	r19,zero,9648 <___vfiprintf_internal_r+0x14f4>
    8ac8:	8c400414 	ori	r17,r17,16
    8acc:	8880080c 	andi	r2,r17,32
    8ad0:	1000641e 	bne	r2,zero,8c64 <___vfiprintf_internal_r+0xb10>
    8ad4:	8880040c 	andi	r2,r17,16
    8ad8:	1001c81e 	bne	r2,zero,91fc <___vfiprintf_internal_r+0x10a8>
    8adc:	8880100c 	andi	r2,r17,64
    8ae0:	d8001d85 	stb	zero,118(sp)
    8ae4:	1002281e 	bne	r2,zero,9388 <___vfiprintf_internal_r+0x1234>
    8ae8:	d9002217 	ldw	r4,136(sp)
    8aec:	0029883a 	mov	r20,zero
    8af0:	20800104 	addi	r2,r4,4
    8af4:	24c00017 	ldw	r19,0(r4)
    8af8:	8001c60e 	bge	r16,zero,9214 <___vfiprintf_internal_r+0x10c0>
    8afc:	d8802215 	stw	r2,136(sp)
    8b00:	002b883a 	mov	r21,zero
    8b04:	9d04b03a 	or	r2,r19,r20
    8b08:	103f911e 	bne	r2,zero,8950 <__alt_data_end+0xfffbf570>
    8b0c:	00800044 	movi	r2,1
    8b10:	10803fcc 	andi	r2,r2,255
    8b14:	00c00044 	movi	r3,1
    8b18:	10c05f26 	beq	r2,r3,8c98 <___vfiprintf_internal_r+0xb44>
    8b1c:	00c00084 	movi	r3,2
    8b20:	10ffe31e 	bne	r2,r3,8ab0 <__alt_data_end+0xfffbf6d0>
    8b24:	0027883a 	mov	r19,zero
    8b28:	0029883a 	mov	r20,zero
    8b2c:	00015106 	br	9074 <___vfiprintf_internal_r+0xf20>
    8b30:	9cc03fcc 	andi	r19,r19,255
    8b34:	b811883a 	mov	r8,r23
    8b38:	9802c01e 	bne	r19,zero,963c <___vfiprintf_internal_r+0x14e8>
    8b3c:	01400074 	movhi	r5,1
    8b40:	29419504 	addi	r5,r5,1620
    8b44:	d9402615 	stw	r5,152(sp)
    8b48:	8880080c 	andi	r2,r17,32
    8b4c:	103f541e 	bne	r2,zero,88a0 <__alt_data_end+0xfffbf4c0>
    8b50:	8880040c 	andi	r2,r17,16
    8b54:	1001f226 	beq	r2,zero,9320 <___vfiprintf_internal_r+0x11cc>
    8b58:	d9402217 	ldw	r5,136(sp)
    8b5c:	0029883a 	mov	r20,zero
    8b60:	2cc00017 	ldw	r19,0(r5)
    8b64:	29400104 	addi	r5,r5,4
    8b68:	d9402215 	stw	r5,136(sp)
    8b6c:	003f5106 	br	88b4 <__alt_data_end+0xfffbf4d4>
    8b70:	d8c02217 	ldw	r3,136(sp)
    8b74:	b811883a 	mov	r8,r23
    8b78:	d8001d85 	stb	zero,118(sp)
    8b7c:	1dc00017 	ldw	r23,0(r3)
    8b80:	1f000104 	addi	fp,r3,4
    8b84:	b8025926 	beq	r23,zero,94ec <___vfiprintf_internal_r+0x1398>
    8b88:	80023316 	blt	r16,zero,9458 <___vfiprintf_internal_r+0x1304>
    8b8c:	800d883a 	mov	r6,r16
    8b90:	000b883a 	mov	r5,zero
    8b94:	b809883a 	mov	r4,r23
    8b98:	da002a15 	stw	r8,168(sp)
    8b9c:	000612c0 	call	612c <memchr>
    8ba0:	da002a17 	ldw	r8,168(sp)
    8ba4:	10026826 	beq	r2,zero,9548 <___vfiprintf_internal_r+0x13f4>
    8ba8:	15e9c83a 	sub	r20,r2,r23
    8bac:	dd401d83 	ldbu	r21,118(sp)
    8bb0:	df002215 	stw	fp,136(sp)
    8bb4:	0021883a 	mov	r16,zero
    8bb8:	003e6906 	br	8560 <__alt_data_end+0xfffbf180>
    8bbc:	9cc03fcc 	andi	r19,r19,255
    8bc0:	b811883a 	mov	r8,r23
    8bc4:	983fc126 	beq	r19,zero,8acc <__alt_data_end+0xfffbf6ec>
    8bc8:	d8c02303 	ldbu	r3,140(sp)
    8bcc:	d8c01d85 	stb	r3,118(sp)
    8bd0:	003fbe06 	br	8acc <__alt_data_end+0xfffbf6ec>
    8bd4:	d9002217 	ldw	r4,136(sp)
    8bd8:	d9402217 	ldw	r5,136(sp)
    8bdc:	21000017 	ldw	r4,0(r4)
    8be0:	28800104 	addi	r2,r5,4
    8be4:	d9002515 	stw	r4,148(sp)
    8be8:	203e3d16 	blt	r4,zero,84e0 <__alt_data_end+0xfffbf100>
    8bec:	d8802215 	stw	r2,136(sp)
    8bf0:	b0c00007 	ldb	r3,0(r22)
    8bf4:	003db406 	br	82c8 <__alt_data_end+0xfffbeee8>
    8bf8:	00c00ac4 	movi	r3,43
    8bfc:	d8c02305 	stb	r3,140(sp)
    8c00:	04c00044 	movi	r19,1
    8c04:	b0c00007 	ldb	r3,0(r22)
    8c08:	003daf06 	br	82c8 <__alt_data_end+0xfffbeee8>
    8c0c:	b0c00007 	ldb	r3,0(r22)
    8c10:	01000a84 	movi	r4,42
    8c14:	b4000044 	addi	r16,r22,1
    8c18:	19025e26 	beq	r3,r4,9594 <___vfiprintf_internal_r+0x1440>
    8c1c:	1f3ff404 	addi	fp,r3,-48
    8c20:	0009883a 	mov	r4,zero
    8c24:	af025236 	bltu	r21,fp,9570 <___vfiprintf_internal_r+0x141c>
    8c28:	01400284 	movi	r5,10
    8c2c:	000adf80 	call	adf8 <__mulsi3>
    8c30:	80c00007 	ldb	r3,0(r16)
    8c34:	1709883a 	add	r4,r2,fp
    8c38:	85800044 	addi	r22,r16,1
    8c3c:	1f3ff404 	addi	fp,r3,-48
    8c40:	b021883a 	mov	r16,r22
    8c44:	af3ff82e 	bgeu	r21,fp,8c28 <__alt_data_end+0xfffbf848>
    8c48:	2021883a 	mov	r16,r4
    8c4c:	203d9f0e 	bge	r4,zero,82cc <__alt_data_end+0xfffbeeec>
    8c50:	043fffc4 	movi	r16,-1
    8c54:	003d9d06 	br	82cc <__alt_data_end+0xfffbeeec>
    8c58:	8c401014 	ori	r17,r17,64
    8c5c:	b0c00007 	ldb	r3,0(r22)
    8c60:	003d9906 	br	82c8 <__alt_data_end+0xfffbeee8>
    8c64:	d9002217 	ldw	r4,136(sp)
    8c68:	d8001d85 	stb	zero,118(sp)
    8c6c:	20c00204 	addi	r3,r4,8
    8c70:	24c00017 	ldw	r19,0(r4)
    8c74:	25000117 	ldw	r20,4(r4)
    8c78:	8001e716 	blt	r16,zero,9418 <___vfiprintf_internal_r+0x12c4>
    8c7c:	013fdfc4 	movi	r4,-129
    8c80:	9d04b03a 	or	r2,r19,r20
    8c84:	d8c02215 	stw	r3,136(sp)
    8c88:	8922703a 	and	r17,r17,r4
    8c8c:	002b883a 	mov	r21,zero
    8c90:	103f2f1e 	bne	r2,zero,8950 <__alt_data_end+0xfffbf570>
    8c94:	803e2f26 	beq	r16,zero,8554 <__alt_data_end+0xfffbf174>
    8c98:	0027883a 	mov	r19,zero
    8c9c:	9cc00c04 	addi	r19,r19,48
    8ca0:	dcc019c5 	stb	r19,103(sp)
    8ca4:	dd002817 	ldw	r20,160(sp)
    8ca8:	ddc019c4 	addi	r23,sp,103
    8cac:	003e2c06 	br	8560 <__alt_data_end+0xfffbf180>
    8cb0:	9cc03fcc 	andi	r19,r19,255
    8cb4:	b811883a 	mov	r8,r23
    8cb8:	9802571e 	bne	r19,zero,9618 <___vfiprintf_internal_r+0x14c4>
    8cbc:	18005726 	beq	r3,zero,8e1c <___vfiprintf_internal_r+0xcc8>
    8cc0:	04c00044 	movi	r19,1
    8cc4:	d8c01005 	stb	r3,64(sp)
    8cc8:	d8001d85 	stb	zero,118(sp)
    8ccc:	9829883a 	mov	r20,r19
    8cd0:	ddc01004 	addi	r23,sp,64
    8cd4:	003f0a06 	br	8900 <__alt_data_end+0xfffbf520>
    8cd8:	d9402017 	ldw	r5,128(sp)
    8cdc:	d9002117 	ldw	r4,132(sp)
    8ce0:	d9801a04 	addi	r6,sp,104
    8ce4:	da802a15 	stw	r10,168(sp)
    8ce8:	00080400 	call	8040 <__sprint_r.part.0>
    8cec:	da802a17 	ldw	r10,168(sp)
    8cf0:	1000501e 	bne	r2,zero,8e34 <___vfiprintf_internal_r+0xce0>
    8cf4:	d9801b17 	ldw	r6,108(sp)
    8cf8:	d8801c17 	ldw	r2,112(sp)
    8cfc:	d811883a 	mov	r8,sp
    8d00:	31000044 	addi	r4,r6,1
    8d04:	003e3606 	br	85e0 <__alt_data_end+0xfffbf200>
    8d08:	d9001b17 	ldw	r4,108(sp)
    8d0c:	d8801c17 	ldw	r2,112(sp)
    8d10:	21400044 	addi	r5,r4,1
    8d14:	d9801d87 	ldb	r6,118(sp)
    8d18:	303e5226 	beq	r6,zero,8664 <__alt_data_end+0xfffbf284>
    8d1c:	01800044 	movi	r6,1
    8d20:	d9001d84 	addi	r4,sp,118
    8d24:	1185883a 	add	r2,r2,r6
    8d28:	41000015 	stw	r4,0(r8)
    8d2c:	41800115 	stw	r6,4(r8)
    8d30:	d8801c15 	stw	r2,112(sp)
    8d34:	d9401b15 	stw	r5,108(sp)
    8d38:	010001c4 	movi	r4,7
    8d3c:	2140b00e 	bge	r4,r5,9000 <___vfiprintf_internal_r+0xeac>
    8d40:	1000f61e 	bne	r2,zero,911c <___vfiprintf_internal_r+0xfc8>
    8d44:	3800b31e 	bne	r7,zero,9014 <___vfiprintf_internal_r+0xec0>
    8d48:	0009883a 	mov	r4,zero
    8d4c:	300b883a 	mov	r5,r6
    8d50:	d811883a 	mov	r8,sp
    8d54:	01802004 	movi	r6,128
    8d58:	19be5226 	beq	r3,r6,86a4 <__alt_data_end+0xfffbf2c4>
    8d5c:	8521c83a 	sub	r16,r16,r20
    8d60:	043e790e 	bge	zero,r16,8748 <__alt_data_end+0xfffbf368>
    8d64:	05400404 	movi	r21,16
    8d68:	ac01b00e 	bge	r21,r16,942c <___vfiprintf_internal_r+0x12d8>
    8d6c:	01400074 	movhi	r5,1
    8d70:	2941fb04 	addi	r5,r5,2028
    8d74:	d9402315 	stw	r5,140(sp)
    8d78:	070001c4 	movi	fp,7
    8d7c:	00000506 	br	8d94 <___vfiprintf_internal_r+0xc40>
    8d80:	21400084 	addi	r5,r4,2
    8d84:	42000204 	addi	r8,r8,8
    8d88:	1809883a 	mov	r4,r3
    8d8c:	843ffc04 	addi	r16,r16,-16
    8d90:	ac000d0e 	bge	r21,r16,8dc8 <___vfiprintf_internal_r+0xc74>
    8d94:	10800404 	addi	r2,r2,16
    8d98:	20c00044 	addi	r3,r4,1
    8d9c:	44800015 	stw	r18,0(r8)
    8da0:	45400115 	stw	r21,4(r8)
    8da4:	d8801c15 	stw	r2,112(sp)
    8da8:	d8c01b15 	stw	r3,108(sp)
    8dac:	e0fff40e 	bge	fp,r3,8d80 <__alt_data_end+0xfffbf9a0>
    8db0:	1000101e 	bne	r2,zero,8df4 <___vfiprintf_internal_r+0xca0>
    8db4:	843ffc04 	addi	r16,r16,-16
    8db8:	01400044 	movi	r5,1
    8dbc:	0009883a 	mov	r4,zero
    8dc0:	d811883a 	mov	r8,sp
    8dc4:	ac3ff316 	blt	r21,r16,8d94 <__alt_data_end+0xfffbf9b4>
    8dc8:	d8c02317 	ldw	r3,140(sp)
    8dcc:	1405883a 	add	r2,r2,r16
    8dd0:	44000115 	stw	r16,4(r8)
    8dd4:	40c00015 	stw	r3,0(r8)
    8dd8:	d8801c15 	stw	r2,112(sp)
    8ddc:	d9401b15 	stw	r5,108(sp)
    8de0:	00c001c4 	movi	r3,7
    8de4:	19401916 	blt	r3,r5,8e4c <___vfiprintf_internal_r+0xcf8>
    8de8:	42000204 	addi	r8,r8,8
    8dec:	29400044 	addi	r5,r5,1
    8df0:	003e5506 	br	8748 <__alt_data_end+0xfffbf368>
    8df4:	d9402017 	ldw	r5,128(sp)
    8df8:	d9002117 	ldw	r4,132(sp)
    8dfc:	d9801a04 	addi	r6,sp,104
    8e00:	00080400 	call	8040 <__sprint_r.part.0>
    8e04:	10000b1e 	bne	r2,zero,8e34 <___vfiprintf_internal_r+0xce0>
    8e08:	d9001b17 	ldw	r4,108(sp)
    8e0c:	d8801c17 	ldw	r2,112(sp)
    8e10:	d811883a 	mov	r8,sp
    8e14:	21400044 	addi	r5,r4,1
    8e18:	003fdc06 	br	8d8c <__alt_data_end+0xfffbf9ac>
    8e1c:	d8801c17 	ldw	r2,112(sp)
    8e20:	10000426 	beq	r2,zero,8e34 <___vfiprintf_internal_r+0xce0>
    8e24:	d9402017 	ldw	r5,128(sp)
    8e28:	d9002117 	ldw	r4,132(sp)
    8e2c:	d9801a04 	addi	r6,sp,104
    8e30:	00080400 	call	8040 <__sprint_r.part.0>
    8e34:	d9402017 	ldw	r5,128(sp)
    8e38:	2880030b 	ldhu	r2,12(r5)
    8e3c:	1080100c 	andi	r2,r2,64
    8e40:	10014d1e 	bne	r2,zero,9378 <___vfiprintf_internal_r+0x1224>
    8e44:	d8802417 	ldw	r2,144(sp)
    8e48:	003d9706 	br	84a8 <__alt_data_end+0xfffbf0c8>
    8e4c:	1000d21e 	bne	r2,zero,9198 <___vfiprintf_internal_r+0x1044>
    8e50:	00c00044 	movi	r3,1
    8e54:	a005883a 	mov	r2,r20
    8e58:	ddc00015 	stw	r23,0(sp)
    8e5c:	dd000115 	stw	r20,4(sp)
    8e60:	dd001c15 	stw	r20,112(sp)
    8e64:	d8c01b15 	stw	r3,108(sp)
    8e68:	d811883a 	mov	r8,sp
    8e6c:	42000204 	addi	r8,r8,8
    8e70:	8c40010c 	andi	r17,r17,4
    8e74:	88004026 	beq	r17,zero,8f78 <___vfiprintf_internal_r+0xe24>
    8e78:	d9002517 	ldw	r4,148(sp)
    8e7c:	24e3c83a 	sub	r17,r4,r19
    8e80:	04403d0e 	bge	zero,r17,8f78 <___vfiprintf_internal_r+0xe24>
    8e84:	04000404 	movi	r16,16
    8e88:	8441a90e 	bge	r16,r17,9530 <___vfiprintf_internal_r+0x13dc>
    8e8c:	00c00074 	movhi	r3,1
    8e90:	18c1ff04 	addi	r3,r3,2044
    8e94:	d9001b17 	ldw	r4,108(sp)
    8e98:	d8c02315 	stw	r3,140(sp)
    8e9c:	050001c4 	movi	r20,7
    8ea0:	dd402117 	ldw	r21,132(sp)
    8ea4:	ddc02017 	ldw	r23,128(sp)
    8ea8:	00000506 	br	8ec0 <___vfiprintf_internal_r+0xd6c>
    8eac:	21400084 	addi	r5,r4,2
    8eb0:	42000204 	addi	r8,r8,8
    8eb4:	1809883a 	mov	r4,r3
    8eb8:	8c7ffc04 	addi	r17,r17,-16
    8ebc:	84400f0e 	bge	r16,r17,8efc <___vfiprintf_internal_r+0xda8>
    8ec0:	01400074 	movhi	r5,1
    8ec4:	10800404 	addi	r2,r2,16
    8ec8:	20c00044 	addi	r3,r4,1
    8ecc:	2941ff04 	addi	r5,r5,2044
    8ed0:	41400015 	stw	r5,0(r8)
    8ed4:	44000115 	stw	r16,4(r8)
    8ed8:	d8801c15 	stw	r2,112(sp)
    8edc:	d8c01b15 	stw	r3,108(sp)
    8ee0:	a0fff20e 	bge	r20,r3,8eac <__alt_data_end+0xfffbfacc>
    8ee4:	1000141e 	bne	r2,zero,8f38 <___vfiprintf_internal_r+0xde4>
    8ee8:	8c7ffc04 	addi	r17,r17,-16
    8eec:	01400044 	movi	r5,1
    8ef0:	0009883a 	mov	r4,zero
    8ef4:	d811883a 	mov	r8,sp
    8ef8:	847ff116 	blt	r16,r17,8ec0 <__alt_data_end+0xfffbfae0>
    8efc:	d8c02317 	ldw	r3,140(sp)
    8f00:	1445883a 	add	r2,r2,r17
    8f04:	44400115 	stw	r17,4(r8)
    8f08:	40c00015 	stw	r3,0(r8)
    8f0c:	d8801c15 	stw	r2,112(sp)
    8f10:	d9401b15 	stw	r5,108(sp)
    8f14:	00c001c4 	movi	r3,7
    8f18:	1940170e 	bge	r3,r5,8f78 <___vfiprintf_internal_r+0xe24>
    8f1c:	1000101e 	bne	r2,zero,8f60 <___vfiprintf_internal_r+0xe0c>
    8f20:	d8802517 	ldw	r2,148(sp)
    8f24:	14c11616 	blt	r2,r19,9380 <___vfiprintf_internal_r+0x122c>
    8f28:	d9002417 	ldw	r4,144(sp)
    8f2c:	2089883a 	add	r4,r4,r2
    8f30:	d9002415 	stw	r4,144(sp)
    8f34:	003e1806 	br	8798 <__alt_data_end+0xfffbf3b8>
    8f38:	d9801a04 	addi	r6,sp,104
    8f3c:	b80b883a 	mov	r5,r23
    8f40:	a809883a 	mov	r4,r21
    8f44:	00080400 	call	8040 <__sprint_r.part.0>
    8f48:	103fba1e 	bne	r2,zero,8e34 <__alt_data_end+0xfffbfa54>
    8f4c:	d9001b17 	ldw	r4,108(sp)
    8f50:	d8801c17 	ldw	r2,112(sp)
    8f54:	d811883a 	mov	r8,sp
    8f58:	21400044 	addi	r5,r4,1
    8f5c:	003fd606 	br	8eb8 <__alt_data_end+0xfffbfad8>
    8f60:	d9402017 	ldw	r5,128(sp)
    8f64:	d9002117 	ldw	r4,132(sp)
    8f68:	d9801a04 	addi	r6,sp,104
    8f6c:	00080400 	call	8040 <__sprint_r.part.0>
    8f70:	103fb01e 	bne	r2,zero,8e34 <__alt_data_end+0xfffbfa54>
    8f74:	d8801c17 	ldw	r2,112(sp)
    8f78:	d8c02517 	ldw	r3,148(sp)
    8f7c:	1cc0010e 	bge	r3,r19,8f84 <___vfiprintf_internal_r+0xe30>
    8f80:	9807883a 	mov	r3,r19
    8f84:	d9002417 	ldw	r4,144(sp)
    8f88:	20c9883a 	add	r4,r4,r3
    8f8c:	d9002415 	stw	r4,144(sp)
    8f90:	103e0126 	beq	r2,zero,8798 <__alt_data_end+0xfffbf3b8>
    8f94:	d9402017 	ldw	r5,128(sp)
    8f98:	d9002117 	ldw	r4,132(sp)
    8f9c:	d9801a04 	addi	r6,sp,104
    8fa0:	00080400 	call	8040 <__sprint_r.part.0>
    8fa4:	103dfc26 	beq	r2,zero,8798 <__alt_data_end+0xfffbf3b8>
    8fa8:	003fa206 	br	8e34 <__alt_data_end+0xfffbfa54>
    8fac:	d9402017 	ldw	r5,128(sp)
    8fb0:	d9002117 	ldw	r4,132(sp)
    8fb4:	d9801a04 	addi	r6,sp,104
    8fb8:	d9c02b15 	stw	r7,172(sp)
    8fbc:	00080400 	call	8040 <__sprint_r.part.0>
    8fc0:	d9c02b17 	ldw	r7,172(sp)
    8fc4:	103f9b1e 	bne	r2,zero,8e34 <__alt_data_end+0xfffbfa54>
    8fc8:	d9001b17 	ldw	r4,108(sp)
    8fcc:	d8801c17 	ldw	r2,112(sp)
    8fd0:	d811883a 	mov	r8,sp
    8fd4:	21800044 	addi	r6,r4,1
    8fd8:	003dbf06 	br	86d8 <__alt_data_end+0xfffbf2f8>
    8fdc:	1000d81e 	bne	r2,zero,9340 <___vfiprintf_internal_r+0x11ec>
    8fe0:	d9001d87 	ldb	r4,118(sp)
    8fe4:	20000a26 	beq	r4,zero,9010 <___vfiprintf_internal_r+0xebc>
    8fe8:	00800044 	movi	r2,1
    8fec:	d9001d84 	addi	r4,sp,118
    8ff0:	100b883a 	mov	r5,r2
    8ff4:	d9000015 	stw	r4,0(sp)
    8ff8:	d8800115 	stw	r2,4(sp)
    8ffc:	d811883a 	mov	r8,sp
    9000:	2809883a 	mov	r4,r5
    9004:	42000204 	addi	r8,r8,8
    9008:	29400044 	addi	r5,r5,1
    900c:	003d9506 	br	8664 <__alt_data_end+0xfffbf284>
    9010:	3800fd26 	beq	r7,zero,9408 <___vfiprintf_internal_r+0x12b4>
    9014:	00800084 	movi	r2,2
    9018:	d9001d04 	addi	r4,sp,116
    901c:	d9000015 	stw	r4,0(sp)
    9020:	d8800115 	stw	r2,4(sp)
    9024:	01400044 	movi	r5,1
    9028:	d811883a 	mov	r8,sp
    902c:	2809883a 	mov	r4,r5
    9030:	42000204 	addi	r8,r8,8
    9034:	29400044 	addi	r5,r5,1
    9038:	003f4606 	br	8d54 <__alt_data_end+0xfffbf974>
    903c:	d8802517 	ldw	r2,148(sp)
    9040:	14c0010e 	bge	r2,r19,9048 <___vfiprintf_internal_r+0xef4>
    9044:	9805883a 	mov	r2,r19
    9048:	d9402417 	ldw	r5,144(sp)
    904c:	288b883a 	add	r5,r5,r2
    9050:	d9402415 	stw	r5,144(sp)
    9054:	003dd006 	br	8798 <__alt_data_end+0xfffbf3b8>
    9058:	d8001d85 	stb	zero,118(sp)
    905c:	80005d16 	blt	r16,zero,91d4 <___vfiprintf_internal_r+0x1080>
    9060:	00ffdfc4 	movi	r3,-129
    9064:	9d04b03a 	or	r2,r19,r20
    9068:	88e2703a 	and	r17,r17,r3
    906c:	103d3726 	beq	r2,zero,854c <__alt_data_end+0xfffbf16c>
    9070:	002b883a 	mov	r21,zero
    9074:	d9002617 	ldw	r4,152(sp)
    9078:	ddc01a04 	addi	r23,sp,104
    907c:	988003cc 	andi	r2,r19,15
    9080:	a006973a 	slli	r3,r20,28
    9084:	2085883a 	add	r2,r4,r2
    9088:	9826d13a 	srli	r19,r19,4
    908c:	10800003 	ldbu	r2,0(r2)
    9090:	a028d13a 	srli	r20,r20,4
    9094:	bdffffc4 	addi	r23,r23,-1
    9098:	1ce6b03a 	or	r19,r3,r19
    909c:	b8800005 	stb	r2,0(r23)
    90a0:	9d04b03a 	or	r2,r19,r20
    90a4:	103ff51e 	bne	r2,zero,907c <__alt_data_end+0xfffbfc9c>
    90a8:	d8801e17 	ldw	r2,120(sp)
    90ac:	15e9c83a 	sub	r20,r2,r23
    90b0:	003d2b06 	br	8560 <__alt_data_end+0xfffbf180>
    90b4:	d9402017 	ldw	r5,128(sp)
    90b8:	d9002117 	ldw	r4,132(sp)
    90bc:	d9801a04 	addi	r6,sp,104
    90c0:	00080400 	call	8040 <__sprint_r.part.0>
    90c4:	103f5b1e 	bne	r2,zero,8e34 <__alt_data_end+0xfffbfa54>
    90c8:	d8801c17 	ldw	r2,112(sp)
    90cc:	d811883a 	mov	r8,sp
    90d0:	003f6706 	br	8e70 <__alt_data_end+0xfffbfa90>
    90d4:	d9402017 	ldw	r5,128(sp)
    90d8:	d9002117 	ldw	r4,132(sp)
    90dc:	d9801a04 	addi	r6,sp,104
    90e0:	00080400 	call	8040 <__sprint_r.part.0>
    90e4:	103f531e 	bne	r2,zero,8e34 <__alt_data_end+0xfffbfa54>
    90e8:	d811883a 	mov	r8,sp
    90ec:	003cd906 	br	8454 <__alt_data_end+0xfffbf074>
    90f0:	10803fcc 	andi	r2,r2,255
    90f4:	1080201c 	xori	r2,r2,128
    90f8:	10bfe004 	addi	r2,r2,-128
    90fc:	00c00c04 	movi	r3,48
    9100:	10ffe926 	beq	r2,r3,90a8 <__alt_data_end+0xfffbfcc8>
    9104:	b8ffffc5 	stb	r3,-1(r23)
    9108:	d8c01e17 	ldw	r3,120(sp)
    910c:	b8bfffc4 	addi	r2,r23,-1
    9110:	102f883a 	mov	r23,r2
    9114:	18a9c83a 	sub	r20,r3,r2
    9118:	003d1106 	br	8560 <__alt_data_end+0xfffbf180>
    911c:	d9402017 	ldw	r5,128(sp)
    9120:	d9002117 	ldw	r4,132(sp)
    9124:	d9801a04 	addi	r6,sp,104
    9128:	d8c02a15 	stw	r3,168(sp)
    912c:	d9c02b15 	stw	r7,172(sp)
    9130:	00080400 	call	8040 <__sprint_r.part.0>
    9134:	d8c02a17 	ldw	r3,168(sp)
    9138:	d9c02b17 	ldw	r7,172(sp)
    913c:	103f3d1e 	bne	r2,zero,8e34 <__alt_data_end+0xfffbfa54>
    9140:	d9001b17 	ldw	r4,108(sp)
    9144:	d8801c17 	ldw	r2,112(sp)
    9148:	d811883a 	mov	r8,sp
    914c:	21400044 	addi	r5,r4,1
    9150:	003d4406 	br	8664 <__alt_data_end+0xfffbf284>
    9154:	d9402017 	ldw	r5,128(sp)
    9158:	d9002117 	ldw	r4,132(sp)
    915c:	d9801a04 	addi	r6,sp,104
    9160:	d8c02a15 	stw	r3,168(sp)
    9164:	00080400 	call	8040 <__sprint_r.part.0>
    9168:	d8c02a17 	ldw	r3,168(sp)
    916c:	103f311e 	bne	r2,zero,8e34 <__alt_data_end+0xfffbfa54>
    9170:	d9001b17 	ldw	r4,108(sp)
    9174:	d8801c17 	ldw	r2,112(sp)
    9178:	d811883a 	mov	r8,sp
    917c:	21400044 	addi	r5,r4,1
    9180:	003ef406 	br	8d54 <__alt_data_end+0xfffbf974>
    9184:	1000bd1e 	bne	r2,zero,947c <___vfiprintf_internal_r+0x1328>
    9188:	01400044 	movi	r5,1
    918c:	0009883a 	mov	r4,zero
    9190:	d811883a 	mov	r8,sp
    9194:	003ef106 	br	8d5c <__alt_data_end+0xfffbf97c>
    9198:	d9402017 	ldw	r5,128(sp)
    919c:	d9002117 	ldw	r4,132(sp)
    91a0:	d9801a04 	addi	r6,sp,104
    91a4:	00080400 	call	8040 <__sprint_r.part.0>
    91a8:	103f221e 	bne	r2,zero,8e34 <__alt_data_end+0xfffbfa54>
    91ac:	d9401b17 	ldw	r5,108(sp)
    91b0:	d8801c17 	ldw	r2,112(sp)
    91b4:	d811883a 	mov	r8,sp
    91b8:	29400044 	addi	r5,r5,1
    91bc:	003d6206 	br	8748 <__alt_data_end+0xfffbf368>
    91c0:	01400074 	movhi	r5,1
    91c4:	29419a04 	addi	r5,r5,1640
    91c8:	d9402615 	stw	r5,152(sp)
    91cc:	d8c02215 	stw	r3,136(sp)
    91d0:	1023883a 	mov	r17,r2
    91d4:	9d04b03a 	or	r2,r19,r20
    91d8:	103fa51e 	bne	r2,zero,9070 <__alt_data_end+0xfffbfc90>
    91dc:	002b883a 	mov	r21,zero
    91e0:	00800084 	movi	r2,2
    91e4:	003e4a06 	br	8b10 <__alt_data_end+0xfffbf730>
    91e8:	01400074 	movhi	r5,1
    91ec:	29419a04 	addi	r5,r5,1640
    91f0:	002b883a 	mov	r21,zero
    91f4:	d9402615 	stw	r5,152(sp)
    91f8:	003f9e06 	br	9074 <__alt_data_end+0xfffbfc94>
    91fc:	d9402217 	ldw	r5,136(sp)
    9200:	d8001d85 	stb	zero,118(sp)
    9204:	0029883a 	mov	r20,zero
    9208:	28800104 	addi	r2,r5,4
    920c:	2cc00017 	ldw	r19,0(r5)
    9210:	803e3a16 	blt	r16,zero,8afc <__alt_data_end+0xfffbf71c>
    9214:	00ffdfc4 	movi	r3,-129
    9218:	d8802215 	stw	r2,136(sp)
    921c:	88e2703a 	and	r17,r17,r3
    9220:	002b883a 	mov	r21,zero
    9224:	983e9b26 	beq	r19,zero,8c94 <__alt_data_end+0xfffbf8b4>
    9228:	00800244 	movi	r2,9
    922c:	14fdc936 	bltu	r2,r19,8954 <__alt_data_end+0xfffbf574>
    9230:	003e9a06 	br	8c9c <__alt_data_end+0xfffbf8bc>
    9234:	00800c04 	movi	r2,48
    9238:	d8c01d45 	stb	r3,117(sp)
    923c:	d8801d05 	stb	r2,116(sp)
    9240:	d8001d85 	stb	zero,118(sp)
    9244:	88c00094 	ori	r3,r17,2
    9248:	80009c16 	blt	r16,zero,94bc <___vfiprintf_internal_r+0x1368>
    924c:	00bfdfc4 	movi	r2,-129
    9250:	88a2703a 	and	r17,r17,r2
    9254:	8c400094 	ori	r17,r17,2
    9258:	002b883a 	mov	r21,zero
    925c:	003f8506 	br	9074 <__alt_data_end+0xfffbfc94>
    9260:	b029883a 	mov	r20,r22
    9264:	003c0b06 	br	8294 <__alt_data_end+0xfffbeeb4>
    9268:	04e7c83a 	sub	r19,zero,r19
    926c:	05400b44 	movi	r21,45
    9270:	9804c03a 	cmpne	r2,r19,zero
    9274:	0529c83a 	sub	r20,zero,r20
    9278:	dd401d85 	stb	r21,118(sp)
    927c:	a0a9c83a 	sub	r20,r20,r2
    9280:	80009716 	blt	r16,zero,94e0 <___vfiprintf_internal_r+0x138c>
    9284:	00bfdfc4 	movi	r2,-129
    9288:	88a2703a 	and	r17,r17,r2
    928c:	003db006 	br	8950 <__alt_data_end+0xfffbf570>
    9290:	b0c00007 	ldb	r3,0(r22)
    9294:	003c0c06 	br	82c8 <__alt_data_end+0xfffbeee8>
    9298:	8880100c 	andi	r2,r17,64
    929c:	d8001d85 	stb	zero,118(sp)
    92a0:	1000461e 	bne	r2,zero,93bc <___vfiprintf_internal_r+0x1268>
    92a4:	d9002217 	ldw	r4,136(sp)
    92a8:	0029883a 	mov	r20,zero
    92ac:	20800104 	addi	r2,r4,4
    92b0:	24c00017 	ldw	r19,0(r4)
    92b4:	803df80e 	bge	r16,zero,8a98 <__alt_data_end+0xfffbf6b8>
    92b8:	9d06b03a 	or	r3,r19,r20
    92bc:	d8802215 	stw	r2,136(sp)
    92c0:	183d5e1e 	bne	r3,zero,883c <__alt_data_end+0xfffbf45c>
    92c4:	002b883a 	mov	r21,zero
    92c8:	0005883a 	mov	r2,zero
    92cc:	003e1006 	br	8b10 <__alt_data_end+0xfffbf730>
    92d0:	8880040c 	andi	r2,r17,16
    92d4:	1000321e 	bne	r2,zero,93a0 <___vfiprintf_internal_r+0x124c>
    92d8:	8c40100c 	andi	r17,r17,64
    92dc:	88008d26 	beq	r17,zero,9514 <___vfiprintf_internal_r+0x13c0>
    92e0:	d9402217 	ldw	r5,136(sp)
    92e4:	d8c02417 	ldw	r3,144(sp)
    92e8:	28800017 	ldw	r2,0(r5)
    92ec:	29400104 	addi	r5,r5,4
    92f0:	d9402215 	stw	r5,136(sp)
    92f4:	10c0000d 	sth	r3,0(r2)
    92f8:	003bca06 	br	8224 <__alt_data_end+0xfffbee44>
    92fc:	8880100c 	andi	r2,r17,64
    9300:	10003a26 	beq	r2,zero,93ec <___vfiprintf_internal_r+0x1298>
    9304:	d8802217 	ldw	r2,136(sp)
    9308:	14c0000f 	ldh	r19,0(r2)
    930c:	10800104 	addi	r2,r2,4
    9310:	d8802215 	stw	r2,136(sp)
    9314:	9829d7fa 	srai	r20,r19,31
    9318:	a005883a 	mov	r2,r20
    931c:	003d8506 	br	8934 <__alt_data_end+0xfffbf554>
    9320:	8880100c 	andi	r2,r17,64
    9324:	10002b26 	beq	r2,zero,93d4 <___vfiprintf_internal_r+0x1280>
    9328:	d8802217 	ldw	r2,136(sp)
    932c:	0029883a 	mov	r20,zero
    9330:	14c0000b 	ldhu	r19,0(r2)
    9334:	10800104 	addi	r2,r2,4
    9338:	d8802215 	stw	r2,136(sp)
    933c:	003d5d06 	br	88b4 <__alt_data_end+0xfffbf4d4>
    9340:	d9402017 	ldw	r5,128(sp)
    9344:	d9002117 	ldw	r4,132(sp)
    9348:	d9801a04 	addi	r6,sp,104
    934c:	d8c02a15 	stw	r3,168(sp)
    9350:	d9c02b15 	stw	r7,172(sp)
    9354:	00080400 	call	8040 <__sprint_r.part.0>
    9358:	d8c02a17 	ldw	r3,168(sp)
    935c:	d9c02b17 	ldw	r7,172(sp)
    9360:	103eb41e 	bne	r2,zero,8e34 <__alt_data_end+0xfffbfa54>
    9364:	d9001b17 	ldw	r4,108(sp)
    9368:	d8801c17 	ldw	r2,112(sp)
    936c:	d811883a 	mov	r8,sp
    9370:	21400044 	addi	r5,r4,1
    9374:	003e6706 	br	8d14 <__alt_data_end+0xfffbf934>
    9378:	00bfffc4 	movi	r2,-1
    937c:	003c4a06 	br	84a8 <__alt_data_end+0xfffbf0c8>
    9380:	9805883a 	mov	r2,r19
    9384:	003ee806 	br	8f28 <__alt_data_end+0xfffbfb48>
    9388:	d8c02217 	ldw	r3,136(sp)
    938c:	0029883a 	mov	r20,zero
    9390:	18800104 	addi	r2,r3,4
    9394:	1cc0000b 	ldhu	r19,0(r3)
    9398:	803f9e0e 	bge	r16,zero,9214 <__alt_data_end+0xfffbfe34>
    939c:	003dd706 	br	8afc <__alt_data_end+0xfffbf71c>
    93a0:	d8c02217 	ldw	r3,136(sp)
    93a4:	d9002417 	ldw	r4,144(sp)
    93a8:	18800017 	ldw	r2,0(r3)
    93ac:	18c00104 	addi	r3,r3,4
    93b0:	d8c02215 	stw	r3,136(sp)
    93b4:	11000015 	stw	r4,0(r2)
    93b8:	003b9a06 	br	8224 <__alt_data_end+0xfffbee44>
    93bc:	d8c02217 	ldw	r3,136(sp)
    93c0:	0029883a 	mov	r20,zero
    93c4:	18800104 	addi	r2,r3,4
    93c8:	1cc0000b 	ldhu	r19,0(r3)
    93cc:	803db20e 	bge	r16,zero,8a98 <__alt_data_end+0xfffbf6b8>
    93d0:	003fb906 	br	92b8 <__alt_data_end+0xfffbfed8>
    93d4:	d9002217 	ldw	r4,136(sp)
    93d8:	0029883a 	mov	r20,zero
    93dc:	24c00017 	ldw	r19,0(r4)
    93e0:	21000104 	addi	r4,r4,4
    93e4:	d9002215 	stw	r4,136(sp)
    93e8:	003d3206 	br	88b4 <__alt_data_end+0xfffbf4d4>
    93ec:	d8c02217 	ldw	r3,136(sp)
    93f0:	1cc00017 	ldw	r19,0(r3)
    93f4:	18c00104 	addi	r3,r3,4
    93f8:	d8c02215 	stw	r3,136(sp)
    93fc:	9829d7fa 	srai	r20,r19,31
    9400:	a005883a 	mov	r2,r20
    9404:	003d4b06 	br	8934 <__alt_data_end+0xfffbf554>
    9408:	0009883a 	mov	r4,zero
    940c:	01400044 	movi	r5,1
    9410:	d811883a 	mov	r8,sp
    9414:	003e4f06 	br	8d54 <__alt_data_end+0xfffbf974>
    9418:	d8c02215 	stw	r3,136(sp)
    941c:	002b883a 	mov	r21,zero
    9420:	003db806 	br	8b04 <__alt_data_end+0xfffbf724>
    9424:	d811883a 	mov	r8,sp
    9428:	003e9606 	br	8e84 <__alt_data_end+0xfffbfaa4>
    942c:	01000074 	movhi	r4,1
    9430:	2101fb04 	addi	r4,r4,2028
    9434:	d9002315 	stw	r4,140(sp)
    9438:	003e6306 	br	8dc8 <__alt_data_end+0xfffbf9e8>
    943c:	b0c00043 	ldbu	r3,1(r22)
    9440:	8c400814 	ori	r17,r17,32
    9444:	b5800044 	addi	r22,r22,1
    9448:	18c03fcc 	andi	r3,r3,255
    944c:	18c0201c 	xori	r3,r3,128
    9450:	18ffe004 	addi	r3,r3,-128
    9454:	003b9c06 	br	82c8 <__alt_data_end+0xfffbeee8>
    9458:	b809883a 	mov	r4,r23
    945c:	da002a15 	stw	r8,168(sp)
    9460:	000075c0 	call	75c <strlen>
    9464:	1029883a 	mov	r20,r2
    9468:	dd401d83 	ldbu	r21,118(sp)
    946c:	df002215 	stw	fp,136(sp)
    9470:	0021883a 	mov	r16,zero
    9474:	da002a17 	ldw	r8,168(sp)
    9478:	003c3906 	br	8560 <__alt_data_end+0xfffbf180>
    947c:	d9402017 	ldw	r5,128(sp)
    9480:	d9002117 	ldw	r4,132(sp)
    9484:	d9801a04 	addi	r6,sp,104
    9488:	00080400 	call	8040 <__sprint_r.part.0>
    948c:	103e691e 	bne	r2,zero,8e34 <__alt_data_end+0xfffbfa54>
    9490:	d9001b17 	ldw	r4,108(sp)
    9494:	d8801c17 	ldw	r2,112(sp)
    9498:	d811883a 	mov	r8,sp
    949c:	21400044 	addi	r5,r4,1
    94a0:	003e2e06 	br	8d5c <__alt_data_end+0xfffbf97c>
    94a4:	01000074 	movhi	r4,1
    94a8:	2101ff04 	addi	r4,r4,2044
    94ac:	d9002315 	stw	r4,140(sp)
    94b0:	d9001b17 	ldw	r4,108(sp)
    94b4:	21000044 	addi	r4,r4,1
    94b8:	003c5e06 	br	8634 <__alt_data_end+0xfffbf254>
    94bc:	002b883a 	mov	r21,zero
    94c0:	00800084 	movi	r2,2
    94c4:	10803fcc 	andi	r2,r2,255
    94c8:	01000044 	movi	r4,1
    94cc:	11002b26 	beq	r2,r4,957c <___vfiprintf_internal_r+0x1428>
    94d0:	01000084 	movi	r4,2
    94d4:	11002b1e 	bne	r2,r4,9584 <___vfiprintf_internal_r+0x1430>
    94d8:	1823883a 	mov	r17,r3
    94dc:	003ee506 	br	9074 <__alt_data_end+0xfffbfc94>
    94e0:	8807883a 	mov	r3,r17
    94e4:	00800044 	movi	r2,1
    94e8:	003ff606 	br	94c4 <__alt_data_end+0xfffc00e4>
    94ec:	00800184 	movi	r2,6
    94f0:	1400012e 	bgeu	r2,r16,94f8 <___vfiprintf_internal_r+0x13a4>
    94f4:	1021883a 	mov	r16,r2
    94f8:	8029883a 	mov	r20,r16
    94fc:	8027883a 	mov	r19,r16
    9500:	80002216 	blt	r16,zero,958c <___vfiprintf_internal_r+0x1438>
    9504:	05c00074 	movhi	r23,1
    9508:	df002215 	stw	fp,136(sp)
    950c:	bdc19f04 	addi	r23,r23,1660
    9510:	003cfb06 	br	8900 <__alt_data_end+0xfffbf520>
    9514:	d9002217 	ldw	r4,136(sp)
    9518:	d9402417 	ldw	r5,144(sp)
    951c:	20800017 	ldw	r2,0(r4)
    9520:	21000104 	addi	r4,r4,4
    9524:	d9002215 	stw	r4,136(sp)
    9528:	11400015 	stw	r5,0(r2)
    952c:	003b3d06 	br	8224 <__alt_data_end+0xfffbee44>
    9530:	01400074 	movhi	r5,1
    9534:	2941ff04 	addi	r5,r5,2044
    9538:	d9402315 	stw	r5,140(sp)
    953c:	d9401b17 	ldw	r5,108(sp)
    9540:	29400044 	addi	r5,r5,1
    9544:	003e6d06 	br	8efc <__alt_data_end+0xfffbfb1c>
    9548:	8029883a 	mov	r20,r16
    954c:	dd401d83 	ldbu	r21,118(sp)
    9550:	df002215 	stw	fp,136(sp)
    9554:	0021883a 	mov	r16,zero
    9558:	003c0106 	br	8560 <__alt_data_end+0xfffbf180>
    955c:	00c00074 	movhi	r3,1
    9560:	18c1fb04 	addi	r3,r3,2028
    9564:	d8c02315 	stw	r3,140(sp)
    9568:	280d883a 	mov	r6,r5
    956c:	003c6906 	br	8714 <__alt_data_end+0xfffbf334>
    9570:	802d883a 	mov	r22,r16
    9574:	0021883a 	mov	r16,zero
    9578:	003b5406 	br	82cc <__alt_data_end+0xfffbeeec>
    957c:	1823883a 	mov	r17,r3
    9580:	003cf306 	br	8950 <__alt_data_end+0xfffbf570>
    9584:	1823883a 	mov	r17,r3
    9588:	003cad06 	br	8840 <__alt_data_end+0xfffbf460>
    958c:	0027883a 	mov	r19,zero
    9590:	003fdc06 	br	9504 <__alt_data_end+0xfffc0124>
    9594:	d9402217 	ldw	r5,136(sp)
    9598:	8005883a 	mov	r2,r16
    959c:	b0c00043 	ldbu	r3,1(r22)
    95a0:	2c000017 	ldw	r16,0(r5)
    95a4:	29000104 	addi	r4,r5,4
    95a8:	d9002215 	stw	r4,136(sp)
    95ac:	102d883a 	mov	r22,r2
    95b0:	803fa50e 	bge	r16,zero,9448 <__alt_data_end+0xfffc0068>
    95b4:	18c03fcc 	andi	r3,r3,255
    95b8:	18c0201c 	xori	r3,r3,128
    95bc:	043fffc4 	movi	r16,-1
    95c0:	18ffe004 	addi	r3,r3,-128
    95c4:	003b4006 	br	82c8 <__alt_data_end+0xfffbeee8>
    95c8:	d9402303 	ldbu	r5,140(sp)
    95cc:	d9401d85 	stb	r5,118(sp)
    95d0:	003cae06 	br	888c <__alt_data_end+0xfffbf4ac>
    95d4:	d8c02303 	ldbu	r3,140(sp)
    95d8:	d8c01d85 	stb	r3,118(sp)
    95dc:	003d1406 	br	8a30 <__alt_data_end+0xfffbf650>
    95e0:	d8c02303 	ldbu	r3,140(sp)
    95e4:	d8c01d85 	stb	r3,118(sp)
    95e8:	003cca06 	br	8914 <__alt_data_end+0xfffbf534>
    95ec:	8880004c 	andi	r2,r17,1
    95f0:	002b883a 	mov	r21,zero
    95f4:	10000526 	beq	r2,zero,960c <___vfiprintf_internal_r+0x14b8>
    95f8:	00800c04 	movi	r2,48
    95fc:	d88019c5 	stb	r2,103(sp)
    9600:	dd002817 	ldw	r20,160(sp)
    9604:	ddc019c4 	addi	r23,sp,103
    9608:	003bd506 	br	8560 <__alt_data_end+0xfffbf180>
    960c:	0029883a 	mov	r20,zero
    9610:	ddc01a04 	addi	r23,sp,104
    9614:	003bd206 	br	8560 <__alt_data_end+0xfffbf180>
    9618:	d9002303 	ldbu	r4,140(sp)
    961c:	d9001d85 	stb	r4,118(sp)
    9620:	003da606 	br	8cbc <__alt_data_end+0xfffbf8dc>
    9624:	d8c02303 	ldbu	r3,140(sp)
    9628:	d8c01d85 	stb	r3,118(sp)
    962c:	003c7606 	br	8808 <__alt_data_end+0xfffbf428>
    9630:	d8c02303 	ldbu	r3,140(sp)
    9634:	d8c01d85 	stb	r3,118(sp)
    9638:	003c6506 	br	87d0 <__alt_data_end+0xfffbf3f0>
    963c:	d9002303 	ldbu	r4,140(sp)
    9640:	d9001d85 	stb	r4,118(sp)
    9644:	003d3d06 	br	8b3c <__alt_data_end+0xfffbf75c>
    9648:	d8c02303 	ldbu	r3,140(sp)
    964c:	d8c01d85 	stb	r3,118(sp)
    9650:	003d1d06 	br	8ac8 <__alt_data_end+0xfffbf6e8>
    9654:	d8c02303 	ldbu	r3,140(sp)
    9658:	d8c01d85 	stb	r3,118(sp)
    965c:	003d0306 	br	8a6c <__alt_data_end+0xfffbf68c>

00009660 <__vfiprintf_internal>:
    9660:	00800074 	movhi	r2,1
    9664:	1088fc04 	addi	r2,r2,9200
    9668:	300f883a 	mov	r7,r6
    966c:	280d883a 	mov	r6,r5
    9670:	200b883a 	mov	r5,r4
    9674:	11000017 	ldw	r4,0(r2)
    9678:	00081541 	jmpi	8154 <___vfiprintf_internal_r>

0000967c <__sbprintf>:
    967c:	2880030b 	ldhu	r2,12(r5)
    9680:	2ac01917 	ldw	r11,100(r5)
    9684:	2a80038b 	ldhu	r10,14(r5)
    9688:	2a400717 	ldw	r9,28(r5)
    968c:	2a000917 	ldw	r8,36(r5)
    9690:	defee204 	addi	sp,sp,-1144
    9694:	00c10004 	movi	r3,1024
    9698:	dc011a15 	stw	r16,1128(sp)
    969c:	10bfff4c 	andi	r2,r2,65533
    96a0:	2821883a 	mov	r16,r5
    96a4:	d8cb883a 	add	r5,sp,r3
    96a8:	dc811c15 	stw	r18,1136(sp)
    96ac:	dc411b15 	stw	r17,1132(sp)
    96b0:	dfc11d15 	stw	ra,1140(sp)
    96b4:	2025883a 	mov	r18,r4
    96b8:	d881030d 	sth	r2,1036(sp)
    96bc:	dac11915 	stw	r11,1124(sp)
    96c0:	da81038d 	sth	r10,1038(sp)
    96c4:	da410715 	stw	r9,1052(sp)
    96c8:	da010915 	stw	r8,1060(sp)
    96cc:	dec10015 	stw	sp,1024(sp)
    96d0:	dec10415 	stw	sp,1040(sp)
    96d4:	d8c10215 	stw	r3,1032(sp)
    96d8:	d8c10515 	stw	r3,1044(sp)
    96dc:	d8010615 	stw	zero,1048(sp)
    96e0:	00081540 	call	8154 <___vfiprintf_internal_r>
    96e4:	1023883a 	mov	r17,r2
    96e8:	10000416 	blt	r2,zero,96fc <__sbprintf+0x80>
    96ec:	d9410004 	addi	r5,sp,1024
    96f0:	9009883a 	mov	r4,r18
    96f4:	00047c80 	call	47c8 <_fflush_r>
    96f8:	10000d1e 	bne	r2,zero,9730 <__sbprintf+0xb4>
    96fc:	d881030b 	ldhu	r2,1036(sp)
    9700:	1080100c 	andi	r2,r2,64
    9704:	10000326 	beq	r2,zero,9714 <__sbprintf+0x98>
    9708:	8080030b 	ldhu	r2,12(r16)
    970c:	10801014 	ori	r2,r2,64
    9710:	8080030d 	sth	r2,12(r16)
    9714:	8805883a 	mov	r2,r17
    9718:	dfc11d17 	ldw	ra,1140(sp)
    971c:	dc811c17 	ldw	r18,1136(sp)
    9720:	dc411b17 	ldw	r17,1132(sp)
    9724:	dc011a17 	ldw	r16,1128(sp)
    9728:	dec11e04 	addi	sp,sp,1144
    972c:	f800283a 	ret
    9730:	047fffc4 	movi	r17,-1
    9734:	003ff106 	br	96fc <__alt_data_end+0xfffc031c>

00009738 <__swbuf_r>:
    9738:	defffb04 	addi	sp,sp,-20
    973c:	dcc00315 	stw	r19,12(sp)
    9740:	dc800215 	stw	r18,8(sp)
    9744:	dc000015 	stw	r16,0(sp)
    9748:	dfc00415 	stw	ra,16(sp)
    974c:	dc400115 	stw	r17,4(sp)
    9750:	2025883a 	mov	r18,r4
    9754:	2827883a 	mov	r19,r5
    9758:	3021883a 	mov	r16,r6
    975c:	20000226 	beq	r4,zero,9768 <__swbuf_r+0x30>
    9760:	20800e17 	ldw	r2,56(r4)
    9764:	10004226 	beq	r2,zero,9870 <__swbuf_r+0x138>
    9768:	80800617 	ldw	r2,24(r16)
    976c:	8100030b 	ldhu	r4,12(r16)
    9770:	80800215 	stw	r2,8(r16)
    9774:	2080020c 	andi	r2,r4,8
    9778:	10003626 	beq	r2,zero,9854 <__swbuf_r+0x11c>
    977c:	80c00417 	ldw	r3,16(r16)
    9780:	18003426 	beq	r3,zero,9854 <__swbuf_r+0x11c>
    9784:	2088000c 	andi	r2,r4,8192
    9788:	9c403fcc 	andi	r17,r19,255
    978c:	10001a26 	beq	r2,zero,97f8 <__swbuf_r+0xc0>
    9790:	80800017 	ldw	r2,0(r16)
    9794:	81000517 	ldw	r4,20(r16)
    9798:	10c7c83a 	sub	r3,r2,r3
    979c:	1900200e 	bge	r3,r4,9820 <__swbuf_r+0xe8>
    97a0:	18c00044 	addi	r3,r3,1
    97a4:	81000217 	ldw	r4,8(r16)
    97a8:	11400044 	addi	r5,r2,1
    97ac:	81400015 	stw	r5,0(r16)
    97b0:	213fffc4 	addi	r4,r4,-1
    97b4:	81000215 	stw	r4,8(r16)
    97b8:	14c00005 	stb	r19,0(r2)
    97bc:	80800517 	ldw	r2,20(r16)
    97c0:	10c01e26 	beq	r2,r3,983c <__swbuf_r+0x104>
    97c4:	8080030b 	ldhu	r2,12(r16)
    97c8:	1080004c 	andi	r2,r2,1
    97cc:	10000226 	beq	r2,zero,97d8 <__swbuf_r+0xa0>
    97d0:	00800284 	movi	r2,10
    97d4:	88801926 	beq	r17,r2,983c <__swbuf_r+0x104>
    97d8:	8805883a 	mov	r2,r17
    97dc:	dfc00417 	ldw	ra,16(sp)
    97e0:	dcc00317 	ldw	r19,12(sp)
    97e4:	dc800217 	ldw	r18,8(sp)
    97e8:	dc400117 	ldw	r17,4(sp)
    97ec:	dc000017 	ldw	r16,0(sp)
    97f0:	dec00504 	addi	sp,sp,20
    97f4:	f800283a 	ret
    97f8:	81401917 	ldw	r5,100(r16)
    97fc:	00b7ffc4 	movi	r2,-8193
    9800:	21080014 	ori	r4,r4,8192
    9804:	2884703a 	and	r2,r5,r2
    9808:	80801915 	stw	r2,100(r16)
    980c:	80800017 	ldw	r2,0(r16)
    9810:	8100030d 	sth	r4,12(r16)
    9814:	81000517 	ldw	r4,20(r16)
    9818:	10c7c83a 	sub	r3,r2,r3
    981c:	193fe016 	blt	r3,r4,97a0 <__alt_data_end+0xfffc03c0>
    9820:	800b883a 	mov	r5,r16
    9824:	9009883a 	mov	r4,r18
    9828:	00047c80 	call	47c8 <_fflush_r>
    982c:	1000071e 	bne	r2,zero,984c <__swbuf_r+0x114>
    9830:	80800017 	ldw	r2,0(r16)
    9834:	00c00044 	movi	r3,1
    9838:	003fda06 	br	97a4 <__alt_data_end+0xfffc03c4>
    983c:	800b883a 	mov	r5,r16
    9840:	9009883a 	mov	r4,r18
    9844:	00047c80 	call	47c8 <_fflush_r>
    9848:	103fe326 	beq	r2,zero,97d8 <__alt_data_end+0xfffc03f8>
    984c:	00bfffc4 	movi	r2,-1
    9850:	003fe206 	br	97dc <__alt_data_end+0xfffc03fc>
    9854:	800b883a 	mov	r5,r16
    9858:	9009883a 	mov	r4,r18
    985c:	0002ba80 	call	2ba8 <__swsetup_r>
    9860:	103ffa1e 	bne	r2,zero,984c <__alt_data_end+0xfffc046c>
    9864:	8100030b 	ldhu	r4,12(r16)
    9868:	80c00417 	ldw	r3,16(r16)
    986c:	003fc506 	br	9784 <__alt_data_end+0xfffc03a4>
    9870:	0004bb40 	call	4bb4 <__sinit>
    9874:	003fbc06 	br	9768 <__alt_data_end+0xfffc0388>

00009878 <__swbuf>:
    9878:	00800074 	movhi	r2,1
    987c:	1088fc04 	addi	r2,r2,9200
    9880:	280d883a 	mov	r6,r5
    9884:	200b883a 	mov	r5,r4
    9888:	11000017 	ldw	r4,0(r2)
    988c:	00097381 	jmpi	9738 <__swbuf_r>

00009890 <_write_r>:
    9890:	defffd04 	addi	sp,sp,-12
    9894:	2805883a 	mov	r2,r5
    9898:	dc000015 	stw	r16,0(sp)
    989c:	04000074 	movhi	r16,1
    98a0:	dc400115 	stw	r17,4(sp)
    98a4:	300b883a 	mov	r5,r6
    98a8:	840fcc04 	addi	r16,r16,16176
    98ac:	2023883a 	mov	r17,r4
    98b0:	380d883a 	mov	r6,r7
    98b4:	1009883a 	mov	r4,r2
    98b8:	dfc00215 	stw	ra,8(sp)
    98bc:	80000015 	stw	zero,0(r16)
    98c0:	000e0000 	call	e000 <write>
    98c4:	00ffffc4 	movi	r3,-1
    98c8:	10c00526 	beq	r2,r3,98e0 <_write_r+0x50>
    98cc:	dfc00217 	ldw	ra,8(sp)
    98d0:	dc400117 	ldw	r17,4(sp)
    98d4:	dc000017 	ldw	r16,0(sp)
    98d8:	dec00304 	addi	sp,sp,12
    98dc:	f800283a 	ret
    98e0:	80c00017 	ldw	r3,0(r16)
    98e4:	183ff926 	beq	r3,zero,98cc <__alt_data_end+0xfffc04ec>
    98e8:	88c00015 	stw	r3,0(r17)
    98ec:	003ff706 	br	98cc <__alt_data_end+0xfffc04ec>

000098f0 <_close_r>:
    98f0:	defffd04 	addi	sp,sp,-12
    98f4:	dc000015 	stw	r16,0(sp)
    98f8:	04000074 	movhi	r16,1
    98fc:	dc400115 	stw	r17,4(sp)
    9900:	840fcc04 	addi	r16,r16,16176
    9904:	2023883a 	mov	r17,r4
    9908:	2809883a 	mov	r4,r5
    990c:	dfc00215 	stw	ra,8(sp)
    9910:	80000015 	stw	zero,0(r16)
    9914:	000d7140 	call	d714 <close>
    9918:	00ffffc4 	movi	r3,-1
    991c:	10c00526 	beq	r2,r3,9934 <_close_r+0x44>
    9920:	dfc00217 	ldw	ra,8(sp)
    9924:	dc400117 	ldw	r17,4(sp)
    9928:	dc000017 	ldw	r16,0(sp)
    992c:	dec00304 	addi	sp,sp,12
    9930:	f800283a 	ret
    9934:	80c00017 	ldw	r3,0(r16)
    9938:	183ff926 	beq	r3,zero,9920 <__alt_data_end+0xfffc0540>
    993c:	88c00015 	stw	r3,0(r17)
    9940:	003ff706 	br	9920 <__alt_data_end+0xfffc0540>

00009944 <_calloc_r>:
    9944:	defffe04 	addi	sp,sp,-8
    9948:	2805883a 	mov	r2,r5
    994c:	dc000015 	stw	r16,0(sp)
    9950:	300b883a 	mov	r5,r6
    9954:	2021883a 	mov	r16,r4
    9958:	1009883a 	mov	r4,r2
    995c:	dfc00115 	stw	ra,4(sp)
    9960:	000adf80 	call	adf8 <__mulsi3>
    9964:	100b883a 	mov	r5,r2
    9968:	8009883a 	mov	r4,r16
    996c:	00059200 	call	5920 <_malloc_r>
    9970:	10002926 	beq	r2,zero,9a18 <_calloc_r+0xd4>
    9974:	11bfff17 	ldw	r6,-4(r2)
    9978:	1021883a 	mov	r16,r2
    997c:	00bfff04 	movi	r2,-4
    9980:	308c703a 	and	r6,r6,r2
    9984:	00c00904 	movi	r3,36
    9988:	308d883a 	add	r6,r6,r2
    998c:	19801636 	bltu	r3,r6,99e8 <_calloc_r+0xa4>
    9990:	008004c4 	movi	r2,19
    9994:	11800b2e 	bgeu	r2,r6,99c4 <_calloc_r+0x80>
    9998:	80000015 	stw	zero,0(r16)
    999c:	80000115 	stw	zero,4(r16)
    99a0:	008006c4 	movi	r2,27
    99a4:	11801a2e 	bgeu	r2,r6,9a10 <_calloc_r+0xcc>
    99a8:	80000215 	stw	zero,8(r16)
    99ac:	80000315 	stw	zero,12(r16)
    99b0:	30c0151e 	bne	r6,r3,9a08 <_calloc_r+0xc4>
    99b4:	80000415 	stw	zero,16(r16)
    99b8:	80800604 	addi	r2,r16,24
    99bc:	80000515 	stw	zero,20(r16)
    99c0:	00000106 	br	99c8 <_calloc_r+0x84>
    99c4:	8005883a 	mov	r2,r16
    99c8:	10000015 	stw	zero,0(r2)
    99cc:	10000115 	stw	zero,4(r2)
    99d0:	10000215 	stw	zero,8(r2)
    99d4:	8005883a 	mov	r2,r16
    99d8:	dfc00117 	ldw	ra,4(sp)
    99dc:	dc000017 	ldw	r16,0(sp)
    99e0:	dec00204 	addi	sp,sp,8
    99e4:	f800283a 	ret
    99e8:	000b883a 	mov	r5,zero
    99ec:	8009883a 	mov	r4,r16
    99f0:	00064b40 	call	64b4 <memset>
    99f4:	8005883a 	mov	r2,r16
    99f8:	dfc00117 	ldw	ra,4(sp)
    99fc:	dc000017 	ldw	r16,0(sp)
    9a00:	dec00204 	addi	sp,sp,8
    9a04:	f800283a 	ret
    9a08:	80800404 	addi	r2,r16,16
    9a0c:	003fee06 	br	99c8 <__alt_data_end+0xfffc05e8>
    9a10:	80800204 	addi	r2,r16,8
    9a14:	003fec06 	br	99c8 <__alt_data_end+0xfffc05e8>
    9a18:	0005883a 	mov	r2,zero
    9a1c:	003fee06 	br	99d8 <__alt_data_end+0xfffc05f8>

00009a20 <_fclose_r>:
    9a20:	28003926 	beq	r5,zero,9b08 <_fclose_r+0xe8>
    9a24:	defffc04 	addi	sp,sp,-16
    9a28:	dc400115 	stw	r17,4(sp)
    9a2c:	dc000015 	stw	r16,0(sp)
    9a30:	dfc00315 	stw	ra,12(sp)
    9a34:	dc800215 	stw	r18,8(sp)
    9a38:	2023883a 	mov	r17,r4
    9a3c:	2821883a 	mov	r16,r5
    9a40:	20000226 	beq	r4,zero,9a4c <_fclose_r+0x2c>
    9a44:	20800e17 	ldw	r2,56(r4)
    9a48:	10002726 	beq	r2,zero,9ae8 <_fclose_r+0xc8>
    9a4c:	8080030f 	ldh	r2,12(r16)
    9a50:	1000071e 	bne	r2,zero,9a70 <_fclose_r+0x50>
    9a54:	0005883a 	mov	r2,zero
    9a58:	dfc00317 	ldw	ra,12(sp)
    9a5c:	dc800217 	ldw	r18,8(sp)
    9a60:	dc400117 	ldw	r17,4(sp)
    9a64:	dc000017 	ldw	r16,0(sp)
    9a68:	dec00404 	addi	sp,sp,16
    9a6c:	f800283a 	ret
    9a70:	800b883a 	mov	r5,r16
    9a74:	8809883a 	mov	r4,r17
    9a78:	00045ac0 	call	45ac <__sflush_r>
    9a7c:	1025883a 	mov	r18,r2
    9a80:	80800b17 	ldw	r2,44(r16)
    9a84:	10000426 	beq	r2,zero,9a98 <_fclose_r+0x78>
    9a88:	81400717 	ldw	r5,28(r16)
    9a8c:	8809883a 	mov	r4,r17
    9a90:	103ee83a 	callr	r2
    9a94:	10001616 	blt	r2,zero,9af0 <_fclose_r+0xd0>
    9a98:	8080030b 	ldhu	r2,12(r16)
    9a9c:	1080200c 	andi	r2,r2,128
    9aa0:	1000151e 	bne	r2,zero,9af8 <_fclose_r+0xd8>
    9aa4:	81400c17 	ldw	r5,48(r16)
    9aa8:	28000526 	beq	r5,zero,9ac0 <_fclose_r+0xa0>
    9aac:	80801004 	addi	r2,r16,64
    9ab0:	28800226 	beq	r5,r2,9abc <_fclose_r+0x9c>
    9ab4:	8809883a 	mov	r4,r17
    9ab8:	0004d280 	call	4d28 <_free_r>
    9abc:	80000c15 	stw	zero,48(r16)
    9ac0:	81401117 	ldw	r5,68(r16)
    9ac4:	28000326 	beq	r5,zero,9ad4 <_fclose_r+0xb4>
    9ac8:	8809883a 	mov	r4,r17
    9acc:	0004d280 	call	4d28 <_free_r>
    9ad0:	80001115 	stw	zero,68(r16)
    9ad4:	0004bc40 	call	4bc4 <__sfp_lock_acquire>
    9ad8:	8000030d 	sth	zero,12(r16)
    9adc:	0004bc80 	call	4bc8 <__sfp_lock_release>
    9ae0:	9005883a 	mov	r2,r18
    9ae4:	003fdc06 	br	9a58 <__alt_data_end+0xfffc0678>
    9ae8:	0004bb40 	call	4bb4 <__sinit>
    9aec:	003fd706 	br	9a4c <__alt_data_end+0xfffc066c>
    9af0:	04bfffc4 	movi	r18,-1
    9af4:	003fe806 	br	9a98 <__alt_data_end+0xfffc06b8>
    9af8:	81400417 	ldw	r5,16(r16)
    9afc:	8809883a 	mov	r4,r17
    9b00:	0004d280 	call	4d28 <_free_r>
    9b04:	003fe706 	br	9aa4 <__alt_data_end+0xfffc06c4>
    9b08:	0005883a 	mov	r2,zero
    9b0c:	f800283a 	ret

00009b10 <fclose>:
    9b10:	00800074 	movhi	r2,1
    9b14:	1088fc04 	addi	r2,r2,9200
    9b18:	200b883a 	mov	r5,r4
    9b1c:	11000017 	ldw	r4,0(r2)
    9b20:	0009a201 	jmpi	9a20 <_fclose_r>

00009b24 <__fputwc>:
    9b24:	defff804 	addi	sp,sp,-32
    9b28:	dcc00415 	stw	r19,16(sp)
    9b2c:	dc800315 	stw	r18,12(sp)
    9b30:	dc000115 	stw	r16,4(sp)
    9b34:	dfc00715 	stw	ra,28(sp)
    9b38:	dd400615 	stw	r21,24(sp)
    9b3c:	dd000515 	stw	r20,20(sp)
    9b40:	dc400215 	stw	r17,8(sp)
    9b44:	2027883a 	mov	r19,r4
    9b48:	2825883a 	mov	r18,r5
    9b4c:	3021883a 	mov	r16,r6
    9b50:	00057100 	call	5710 <__locale_mb_cur_max>
    9b54:	00c00044 	movi	r3,1
    9b58:	10c03e26 	beq	r2,r3,9c54 <__fputwc+0x130>
    9b5c:	81c01704 	addi	r7,r16,92
    9b60:	900d883a 	mov	r6,r18
    9b64:	d80b883a 	mov	r5,sp
    9b68:	9809883a 	mov	r4,r19
    9b6c:	0009e9c0 	call	9e9c <_wcrtomb_r>
    9b70:	1029883a 	mov	r20,r2
    9b74:	00bfffc4 	movi	r2,-1
    9b78:	a0802026 	beq	r20,r2,9bfc <__fputwc+0xd8>
    9b7c:	d9400003 	ldbu	r5,0(sp)
    9b80:	a0001c26 	beq	r20,zero,9bf4 <__fputwc+0xd0>
    9b84:	0023883a 	mov	r17,zero
    9b88:	05400284 	movi	r21,10
    9b8c:	00000906 	br	9bb4 <__fputwc+0x90>
    9b90:	80800017 	ldw	r2,0(r16)
    9b94:	11400005 	stb	r5,0(r2)
    9b98:	80c00017 	ldw	r3,0(r16)
    9b9c:	18c00044 	addi	r3,r3,1
    9ba0:	80c00015 	stw	r3,0(r16)
    9ba4:	8c400044 	addi	r17,r17,1
    9ba8:	dc45883a 	add	r2,sp,r17
    9bac:	8d00112e 	bgeu	r17,r20,9bf4 <__fputwc+0xd0>
    9bb0:	11400003 	ldbu	r5,0(r2)
    9bb4:	80c00217 	ldw	r3,8(r16)
    9bb8:	18ffffc4 	addi	r3,r3,-1
    9bbc:	80c00215 	stw	r3,8(r16)
    9bc0:	183ff30e 	bge	r3,zero,9b90 <__alt_data_end+0xfffc07b0>
    9bc4:	80800617 	ldw	r2,24(r16)
    9bc8:	18801916 	blt	r3,r2,9c30 <__fputwc+0x10c>
    9bcc:	80800017 	ldw	r2,0(r16)
    9bd0:	11400005 	stb	r5,0(r2)
    9bd4:	80800017 	ldw	r2,0(r16)
    9bd8:	10c00003 	ldbu	r3,0(r2)
    9bdc:	10800044 	addi	r2,r2,1
    9be0:	1d402326 	beq	r3,r21,9c70 <__fputwc+0x14c>
    9be4:	80800015 	stw	r2,0(r16)
    9be8:	8c400044 	addi	r17,r17,1
    9bec:	dc45883a 	add	r2,sp,r17
    9bf0:	8d3fef36 	bltu	r17,r20,9bb0 <__alt_data_end+0xfffc07d0>
    9bf4:	9005883a 	mov	r2,r18
    9bf8:	00000406 	br	9c0c <__fputwc+0xe8>
    9bfc:	80c0030b 	ldhu	r3,12(r16)
    9c00:	a005883a 	mov	r2,r20
    9c04:	18c01014 	ori	r3,r3,64
    9c08:	80c0030d 	sth	r3,12(r16)
    9c0c:	dfc00717 	ldw	ra,28(sp)
    9c10:	dd400617 	ldw	r21,24(sp)
    9c14:	dd000517 	ldw	r20,20(sp)
    9c18:	dcc00417 	ldw	r19,16(sp)
    9c1c:	dc800317 	ldw	r18,12(sp)
    9c20:	dc400217 	ldw	r17,8(sp)
    9c24:	dc000117 	ldw	r16,4(sp)
    9c28:	dec00804 	addi	sp,sp,32
    9c2c:	f800283a 	ret
    9c30:	800d883a 	mov	r6,r16
    9c34:	29403fcc 	andi	r5,r5,255
    9c38:	9809883a 	mov	r4,r19
    9c3c:	00097380 	call	9738 <__swbuf_r>
    9c40:	10bfffe0 	cmpeqi	r2,r2,-1
    9c44:	10803fcc 	andi	r2,r2,255
    9c48:	103fd626 	beq	r2,zero,9ba4 <__alt_data_end+0xfffc07c4>
    9c4c:	00bfffc4 	movi	r2,-1
    9c50:	003fee06 	br	9c0c <__alt_data_end+0xfffc082c>
    9c54:	90ffffc4 	addi	r3,r18,-1
    9c58:	01003f84 	movi	r4,254
    9c5c:	20ffbf36 	bltu	r4,r3,9b5c <__alt_data_end+0xfffc077c>
    9c60:	900b883a 	mov	r5,r18
    9c64:	dc800005 	stb	r18,0(sp)
    9c68:	1029883a 	mov	r20,r2
    9c6c:	003fc506 	br	9b84 <__alt_data_end+0xfffc07a4>
    9c70:	800d883a 	mov	r6,r16
    9c74:	a80b883a 	mov	r5,r21
    9c78:	9809883a 	mov	r4,r19
    9c7c:	00097380 	call	9738 <__swbuf_r>
    9c80:	10bfffe0 	cmpeqi	r2,r2,-1
    9c84:	003fef06 	br	9c44 <__alt_data_end+0xfffc0864>

00009c88 <_fputwc_r>:
    9c88:	3080030b 	ldhu	r2,12(r6)
    9c8c:	10c8000c 	andi	r3,r2,8192
    9c90:	1800051e 	bne	r3,zero,9ca8 <_fputwc_r+0x20>
    9c94:	30c01917 	ldw	r3,100(r6)
    9c98:	10880014 	ori	r2,r2,8192
    9c9c:	3080030d 	sth	r2,12(r6)
    9ca0:	18880014 	ori	r2,r3,8192
    9ca4:	30801915 	stw	r2,100(r6)
    9ca8:	0009b241 	jmpi	9b24 <__fputwc>

00009cac <fputwc>:
    9cac:	00800074 	movhi	r2,1
    9cb0:	defffc04 	addi	sp,sp,-16
    9cb4:	1088fc04 	addi	r2,r2,9200
    9cb8:	dc000115 	stw	r16,4(sp)
    9cbc:	14000017 	ldw	r16,0(r2)
    9cc0:	dc400215 	stw	r17,8(sp)
    9cc4:	dfc00315 	stw	ra,12(sp)
    9cc8:	2023883a 	mov	r17,r4
    9ccc:	80000226 	beq	r16,zero,9cd8 <fputwc+0x2c>
    9cd0:	80800e17 	ldw	r2,56(r16)
    9cd4:	10001026 	beq	r2,zero,9d18 <fputwc+0x6c>
    9cd8:	2880030b 	ldhu	r2,12(r5)
    9cdc:	10c8000c 	andi	r3,r2,8192
    9ce0:	1800051e 	bne	r3,zero,9cf8 <fputwc+0x4c>
    9ce4:	28c01917 	ldw	r3,100(r5)
    9ce8:	10880014 	ori	r2,r2,8192
    9cec:	2880030d 	sth	r2,12(r5)
    9cf0:	18880014 	ori	r2,r3,8192
    9cf4:	28801915 	stw	r2,100(r5)
    9cf8:	280d883a 	mov	r6,r5
    9cfc:	8009883a 	mov	r4,r16
    9d00:	880b883a 	mov	r5,r17
    9d04:	dfc00317 	ldw	ra,12(sp)
    9d08:	dc400217 	ldw	r17,8(sp)
    9d0c:	dc000117 	ldw	r16,4(sp)
    9d10:	dec00404 	addi	sp,sp,16
    9d14:	0009b241 	jmpi	9b24 <__fputwc>
    9d18:	8009883a 	mov	r4,r16
    9d1c:	d9400015 	stw	r5,0(sp)
    9d20:	0004bb40 	call	4bb4 <__sinit>
    9d24:	d9400017 	ldw	r5,0(sp)
    9d28:	003feb06 	br	9cd8 <__alt_data_end+0xfffc08f8>

00009d2c <_fstat_r>:
    9d2c:	defffd04 	addi	sp,sp,-12
    9d30:	2805883a 	mov	r2,r5
    9d34:	dc000015 	stw	r16,0(sp)
    9d38:	04000074 	movhi	r16,1
    9d3c:	dc400115 	stw	r17,4(sp)
    9d40:	840fcc04 	addi	r16,r16,16176
    9d44:	2023883a 	mov	r17,r4
    9d48:	300b883a 	mov	r5,r6
    9d4c:	1009883a 	mov	r4,r2
    9d50:	dfc00215 	stw	ra,8(sp)
    9d54:	80000015 	stw	zero,0(r16)
    9d58:	000d8680 	call	d868 <fstat>
    9d5c:	00ffffc4 	movi	r3,-1
    9d60:	10c00526 	beq	r2,r3,9d78 <_fstat_r+0x4c>
    9d64:	dfc00217 	ldw	ra,8(sp)
    9d68:	dc400117 	ldw	r17,4(sp)
    9d6c:	dc000017 	ldw	r16,0(sp)
    9d70:	dec00304 	addi	sp,sp,12
    9d74:	f800283a 	ret
    9d78:	80c00017 	ldw	r3,0(r16)
    9d7c:	183ff926 	beq	r3,zero,9d64 <__alt_data_end+0xfffc0984>
    9d80:	88c00015 	stw	r3,0(r17)
    9d84:	003ff706 	br	9d64 <__alt_data_end+0xfffc0984>

00009d88 <_isatty_r>:
    9d88:	defffd04 	addi	sp,sp,-12
    9d8c:	dc000015 	stw	r16,0(sp)
    9d90:	04000074 	movhi	r16,1
    9d94:	dc400115 	stw	r17,4(sp)
    9d98:	840fcc04 	addi	r16,r16,16176
    9d9c:	2023883a 	mov	r17,r4
    9da0:	2809883a 	mov	r4,r5
    9da4:	dfc00215 	stw	ra,8(sp)
    9da8:	80000015 	stw	zero,0(r16)
    9dac:	000d9700 	call	d970 <isatty>
    9db0:	00ffffc4 	movi	r3,-1
    9db4:	10c00526 	beq	r2,r3,9dcc <_isatty_r+0x44>
    9db8:	dfc00217 	ldw	ra,8(sp)
    9dbc:	dc400117 	ldw	r17,4(sp)
    9dc0:	dc000017 	ldw	r16,0(sp)
    9dc4:	dec00304 	addi	sp,sp,12
    9dc8:	f800283a 	ret
    9dcc:	80c00017 	ldw	r3,0(r16)
    9dd0:	183ff926 	beq	r3,zero,9db8 <__alt_data_end+0xfffc09d8>
    9dd4:	88c00015 	stw	r3,0(r17)
    9dd8:	003ff706 	br	9db8 <__alt_data_end+0xfffc09d8>

00009ddc <_lseek_r>:
    9ddc:	defffd04 	addi	sp,sp,-12
    9de0:	2805883a 	mov	r2,r5
    9de4:	dc000015 	stw	r16,0(sp)
    9de8:	04000074 	movhi	r16,1
    9dec:	dc400115 	stw	r17,4(sp)
    9df0:	300b883a 	mov	r5,r6
    9df4:	840fcc04 	addi	r16,r16,16176
    9df8:	2023883a 	mov	r17,r4
    9dfc:	380d883a 	mov	r6,r7
    9e00:	1009883a 	mov	r4,r2
    9e04:	dfc00215 	stw	ra,8(sp)
    9e08:	80000015 	stw	zero,0(r16)
    9e0c:	000db580 	call	db58 <lseek>
    9e10:	00ffffc4 	movi	r3,-1
    9e14:	10c00526 	beq	r2,r3,9e2c <_lseek_r+0x50>
    9e18:	dfc00217 	ldw	ra,8(sp)
    9e1c:	dc400117 	ldw	r17,4(sp)
    9e20:	dc000017 	ldw	r16,0(sp)
    9e24:	dec00304 	addi	sp,sp,12
    9e28:	f800283a 	ret
    9e2c:	80c00017 	ldw	r3,0(r16)
    9e30:	183ff926 	beq	r3,zero,9e18 <__alt_data_end+0xfffc0a38>
    9e34:	88c00015 	stw	r3,0(r17)
    9e38:	003ff706 	br	9e18 <__alt_data_end+0xfffc0a38>

00009e3c <_read_r>:
    9e3c:	defffd04 	addi	sp,sp,-12
    9e40:	2805883a 	mov	r2,r5
    9e44:	dc000015 	stw	r16,0(sp)
    9e48:	04000074 	movhi	r16,1
    9e4c:	dc400115 	stw	r17,4(sp)
    9e50:	300b883a 	mov	r5,r6
    9e54:	840fcc04 	addi	r16,r16,16176
    9e58:	2023883a 	mov	r17,r4
    9e5c:	380d883a 	mov	r6,r7
    9e60:	1009883a 	mov	r4,r2
    9e64:	dfc00215 	stw	ra,8(sp)
    9e68:	80000015 	stw	zero,0(r16)
    9e6c:	000dd480 	call	dd48 <read>
    9e70:	00ffffc4 	movi	r3,-1
    9e74:	10c00526 	beq	r2,r3,9e8c <_read_r+0x50>
    9e78:	dfc00217 	ldw	ra,8(sp)
    9e7c:	dc400117 	ldw	r17,4(sp)
    9e80:	dc000017 	ldw	r16,0(sp)
    9e84:	dec00304 	addi	sp,sp,12
    9e88:	f800283a 	ret
    9e8c:	80c00017 	ldw	r3,0(r16)
    9e90:	183ff926 	beq	r3,zero,9e78 <__alt_data_end+0xfffc0a98>
    9e94:	88c00015 	stw	r3,0(r17)
    9e98:	003ff706 	br	9e78 <__alt_data_end+0xfffc0a98>

00009e9c <_wcrtomb_r>:
    9e9c:	defff604 	addi	sp,sp,-40
    9ea0:	00800074 	movhi	r2,1
    9ea4:	dc800815 	stw	r18,32(sp)
    9ea8:	dc400715 	stw	r17,28(sp)
    9eac:	dc000615 	stw	r16,24(sp)
    9eb0:	10890004 	addi	r2,r2,9216
    9eb4:	dfc00915 	stw	ra,36(sp)
    9eb8:	2021883a 	mov	r16,r4
    9ebc:	3823883a 	mov	r17,r7
    9ec0:	14800017 	ldw	r18,0(r2)
    9ec4:	28001426 	beq	r5,zero,9f18 <_wcrtomb_r+0x7c>
    9ec8:	d9400415 	stw	r5,16(sp)
    9ecc:	d9800515 	stw	r6,20(sp)
    9ed0:	00057040 	call	5704 <__locale_charset>
    9ed4:	d9800517 	ldw	r6,20(sp)
    9ed8:	d9400417 	ldw	r5,16(sp)
    9edc:	100f883a 	mov	r7,r2
    9ee0:	dc400015 	stw	r17,0(sp)
    9ee4:	8009883a 	mov	r4,r16
    9ee8:	903ee83a 	callr	r18
    9eec:	00ffffc4 	movi	r3,-1
    9ef0:	10c0031e 	bne	r2,r3,9f00 <_wcrtomb_r+0x64>
    9ef4:	88000015 	stw	zero,0(r17)
    9ef8:	00c02284 	movi	r3,138
    9efc:	80c00015 	stw	r3,0(r16)
    9f00:	dfc00917 	ldw	ra,36(sp)
    9f04:	dc800817 	ldw	r18,32(sp)
    9f08:	dc400717 	ldw	r17,28(sp)
    9f0c:	dc000617 	ldw	r16,24(sp)
    9f10:	dec00a04 	addi	sp,sp,40
    9f14:	f800283a 	ret
    9f18:	00057040 	call	5704 <__locale_charset>
    9f1c:	100f883a 	mov	r7,r2
    9f20:	dc400015 	stw	r17,0(sp)
    9f24:	000d883a 	mov	r6,zero
    9f28:	d9400104 	addi	r5,sp,4
    9f2c:	8009883a 	mov	r4,r16
    9f30:	903ee83a 	callr	r18
    9f34:	003fed06 	br	9eec <__alt_data_end+0xfffc0b0c>

00009f38 <wcrtomb>:
    9f38:	defff604 	addi	sp,sp,-40
    9f3c:	00800074 	movhi	r2,1
    9f40:	dc800615 	stw	r18,24(sp)
    9f44:	dc400515 	stw	r17,20(sp)
    9f48:	1088fc04 	addi	r2,r2,9200
    9f4c:	dfc00915 	stw	ra,36(sp)
    9f50:	dd000815 	stw	r20,32(sp)
    9f54:	dcc00715 	stw	r19,28(sp)
    9f58:	dc000415 	stw	r16,16(sp)
    9f5c:	3025883a 	mov	r18,r6
    9f60:	14400017 	ldw	r17,0(r2)
    9f64:	20001926 	beq	r4,zero,9fcc <wcrtomb+0x94>
    9f68:	00800074 	movhi	r2,1
    9f6c:	10890004 	addi	r2,r2,9216
    9f70:	15000017 	ldw	r20,0(r2)
    9f74:	2021883a 	mov	r16,r4
    9f78:	2827883a 	mov	r19,r5
    9f7c:	00057040 	call	5704 <__locale_charset>
    9f80:	100f883a 	mov	r7,r2
    9f84:	dc800015 	stw	r18,0(sp)
    9f88:	980d883a 	mov	r6,r19
    9f8c:	800b883a 	mov	r5,r16
    9f90:	8809883a 	mov	r4,r17
    9f94:	a03ee83a 	callr	r20
    9f98:	00ffffc4 	movi	r3,-1
    9f9c:	10c0031e 	bne	r2,r3,9fac <wcrtomb+0x74>
    9fa0:	90000015 	stw	zero,0(r18)
    9fa4:	00c02284 	movi	r3,138
    9fa8:	88c00015 	stw	r3,0(r17)
    9fac:	dfc00917 	ldw	ra,36(sp)
    9fb0:	dd000817 	ldw	r20,32(sp)
    9fb4:	dcc00717 	ldw	r19,28(sp)
    9fb8:	dc800617 	ldw	r18,24(sp)
    9fbc:	dc400517 	ldw	r17,20(sp)
    9fc0:	dc000417 	ldw	r16,16(sp)
    9fc4:	dec00a04 	addi	sp,sp,40
    9fc8:	f800283a 	ret
    9fcc:	00800074 	movhi	r2,1
    9fd0:	10890004 	addi	r2,r2,9216
    9fd4:	14000017 	ldw	r16,0(r2)
    9fd8:	00057040 	call	5704 <__locale_charset>
    9fdc:	100f883a 	mov	r7,r2
    9fe0:	dc800015 	stw	r18,0(sp)
    9fe4:	000d883a 	mov	r6,zero
    9fe8:	d9400104 	addi	r5,sp,4
    9fec:	8809883a 	mov	r4,r17
    9ff0:	803ee83a 	callr	r16
    9ff4:	003fe806 	br	9f98 <__alt_data_end+0xfffc0bb8>

00009ff8 <__ascii_wctomb>:
    9ff8:	28000526 	beq	r5,zero,a010 <__ascii_wctomb+0x18>
    9ffc:	00803fc4 	movi	r2,255
    a000:	11800536 	bltu	r2,r6,a018 <__ascii_wctomb+0x20>
    a004:	29800005 	stb	r6,0(r5)
    a008:	00800044 	movi	r2,1
    a00c:	f800283a 	ret
    a010:	0005883a 	mov	r2,zero
    a014:	f800283a 	ret
    a018:	00802284 	movi	r2,138
    a01c:	20800015 	stw	r2,0(r4)
    a020:	00bfffc4 	movi	r2,-1
    a024:	f800283a 	ret

0000a028 <_wctomb_r>:
    a028:	00800074 	movhi	r2,1
    a02c:	defff904 	addi	sp,sp,-28
    a030:	10890004 	addi	r2,r2,9216
    a034:	dfc00615 	stw	ra,24(sp)
    a038:	dc400515 	stw	r17,20(sp)
    a03c:	dc000415 	stw	r16,16(sp)
    a040:	3823883a 	mov	r17,r7
    a044:	14000017 	ldw	r16,0(r2)
    a048:	d9000115 	stw	r4,4(sp)
    a04c:	d9400215 	stw	r5,8(sp)
    a050:	d9800315 	stw	r6,12(sp)
    a054:	00057040 	call	5704 <__locale_charset>
    a058:	d9800317 	ldw	r6,12(sp)
    a05c:	d9400217 	ldw	r5,8(sp)
    a060:	d9000117 	ldw	r4,4(sp)
    a064:	100f883a 	mov	r7,r2
    a068:	dc400015 	stw	r17,0(sp)
    a06c:	803ee83a 	callr	r16
    a070:	dfc00617 	ldw	ra,24(sp)
    a074:	dc400517 	ldw	r17,20(sp)
    a078:	dc000417 	ldw	r16,16(sp)
    a07c:	dec00704 	addi	sp,sp,28
    a080:	f800283a 	ret

0000a084 <__udivdi3>:
    a084:	defff404 	addi	sp,sp,-48
    a088:	dcc00515 	stw	r19,20(sp)
    a08c:	dc000215 	stw	r16,8(sp)
    a090:	dfc00b15 	stw	ra,44(sp)
    a094:	df000a15 	stw	fp,40(sp)
    a098:	ddc00915 	stw	r23,36(sp)
    a09c:	dd800815 	stw	r22,32(sp)
    a0a0:	dd400715 	stw	r21,28(sp)
    a0a4:	dd000615 	stw	r20,24(sp)
    a0a8:	dc800415 	stw	r18,16(sp)
    a0ac:	dc400315 	stw	r17,12(sp)
    a0b0:	2027883a 	mov	r19,r4
    a0b4:	2821883a 	mov	r16,r5
    a0b8:	3800461e 	bne	r7,zero,a1d4 <__udivdi3+0x150>
    a0bc:	3023883a 	mov	r17,r6
    a0c0:	2025883a 	mov	r18,r4
    a0c4:	2980572e 	bgeu	r5,r6,a224 <__udivdi3+0x1a0>
    a0c8:	00bfffd4 	movui	r2,65535
    a0cc:	282d883a 	mov	r22,r5
    a0d0:	1180b236 	bltu	r2,r6,a39c <__udivdi3+0x318>
    a0d4:	00803fc4 	movi	r2,255
    a0d8:	1185803a 	cmpltu	r2,r2,r6
    a0dc:	100490fa 	slli	r2,r2,3
    a0e0:	3086d83a 	srl	r3,r6,r2
    a0e4:	01000074 	movhi	r4,1
    a0e8:	21020304 	addi	r4,r4,2060
    a0ec:	20c7883a 	add	r3,r4,r3
    a0f0:	18c00003 	ldbu	r3,0(r3)
    a0f4:	1885883a 	add	r2,r3,r2
    a0f8:	00c00804 	movi	r3,32
    a0fc:	1887c83a 	sub	r3,r3,r2
    a100:	18000526 	beq	r3,zero,a118 <__udivdi3+0x94>
    a104:	80e0983a 	sll	r16,r16,r3
    a108:	9884d83a 	srl	r2,r19,r2
    a10c:	30e2983a 	sll	r17,r6,r3
    a110:	98e4983a 	sll	r18,r19,r3
    a114:	142cb03a 	or	r22,r2,r16
    a118:	882ad43a 	srli	r21,r17,16
    a11c:	b009883a 	mov	r4,r22
    a120:	8d3fffcc 	andi	r20,r17,65535
    a124:	a80b883a 	mov	r5,r21
    a128:	000ada00 	call	ada0 <__umodsi3>
    a12c:	b009883a 	mov	r4,r22
    a130:	a80b883a 	mov	r5,r21
    a134:	1027883a 	mov	r19,r2
    a138:	000ad3c0 	call	ad3c <__udivsi3>
    a13c:	100b883a 	mov	r5,r2
    a140:	a009883a 	mov	r4,r20
    a144:	102d883a 	mov	r22,r2
    a148:	000adf80 	call	adf8 <__mulsi3>
    a14c:	9826943a 	slli	r19,r19,16
    a150:	9006d43a 	srli	r3,r18,16
    a154:	1cc6b03a 	or	r3,r3,r19
    a158:	1880052e 	bgeu	r3,r2,a170 <__udivdi3+0xec>
    a15c:	1c47883a 	add	r3,r3,r17
    a160:	b13fffc4 	addi	r4,r22,-1
    a164:	1c400136 	bltu	r3,r17,a16c <__udivdi3+0xe8>
    a168:	18814236 	bltu	r3,r2,a674 <__udivdi3+0x5f0>
    a16c:	202d883a 	mov	r22,r4
    a170:	18a1c83a 	sub	r16,r3,r2
    a174:	8009883a 	mov	r4,r16
    a178:	a80b883a 	mov	r5,r21
    a17c:	000ada00 	call	ada0 <__umodsi3>
    a180:	1027883a 	mov	r19,r2
    a184:	8009883a 	mov	r4,r16
    a188:	a80b883a 	mov	r5,r21
    a18c:	9826943a 	slli	r19,r19,16
    a190:	000ad3c0 	call	ad3c <__udivsi3>
    a194:	100b883a 	mov	r5,r2
    a198:	a009883a 	mov	r4,r20
    a19c:	94bfffcc 	andi	r18,r18,65535
    a1a0:	1021883a 	mov	r16,r2
    a1a4:	94e4b03a 	or	r18,r18,r19
    a1a8:	000adf80 	call	adf8 <__mulsi3>
    a1ac:	9080052e 	bgeu	r18,r2,a1c4 <__udivdi3+0x140>
    a1b0:	8ca5883a 	add	r18,r17,r18
    a1b4:	80ffffc4 	addi	r3,r16,-1
    a1b8:	94410c36 	bltu	r18,r17,a5ec <__udivdi3+0x568>
    a1bc:	90810b2e 	bgeu	r18,r2,a5ec <__udivdi3+0x568>
    a1c0:	843fff84 	addi	r16,r16,-2
    a1c4:	b004943a 	slli	r2,r22,16
    a1c8:	0007883a 	mov	r3,zero
    a1cc:	1404b03a 	or	r2,r2,r16
    a1d0:	00005e06 	br	a34c <__udivdi3+0x2c8>
    a1d4:	29c05b36 	bltu	r5,r7,a344 <__udivdi3+0x2c0>
    a1d8:	00bfffd4 	movui	r2,65535
    a1dc:	11c0672e 	bgeu	r2,r7,a37c <__udivdi3+0x2f8>
    a1e0:	00804034 	movhi	r2,256
    a1e4:	10bfffc4 	addi	r2,r2,-1
    a1e8:	11c10a36 	bltu	r2,r7,a614 <__udivdi3+0x590>
    a1ec:	00800404 	movi	r2,16
    a1f0:	3886d83a 	srl	r3,r7,r2
    a1f4:	01000074 	movhi	r4,1
    a1f8:	21020304 	addi	r4,r4,2060
    a1fc:	20c7883a 	add	r3,r4,r3
    a200:	18c00003 	ldbu	r3,0(r3)
    a204:	05c00804 	movi	r23,32
    a208:	1885883a 	add	r2,r3,r2
    a20c:	b8afc83a 	sub	r23,r23,r2
    a210:	b800671e 	bne	r23,zero,a3b0 <__udivdi3+0x32c>
    a214:	3c010536 	bltu	r7,r16,a62c <__udivdi3+0x5a8>
    a218:	9985403a 	cmpgeu	r2,r19,r6
    a21c:	0007883a 	mov	r3,zero
    a220:	00004a06 	br	a34c <__udivdi3+0x2c8>
    a224:	3000041e 	bne	r6,zero,a238 <__udivdi3+0x1b4>
    a228:	000b883a 	mov	r5,zero
    a22c:	01000044 	movi	r4,1
    a230:	000ad3c0 	call	ad3c <__udivsi3>
    a234:	1023883a 	mov	r17,r2
    a238:	00bfffd4 	movui	r2,65535
    a23c:	1440532e 	bgeu	r2,r17,a38c <__udivdi3+0x308>
    a240:	00804034 	movhi	r2,256
    a244:	10bfffc4 	addi	r2,r2,-1
    a248:	1440f436 	bltu	r2,r17,a61c <__udivdi3+0x598>
    a24c:	00800404 	movi	r2,16
    a250:	8886d83a 	srl	r3,r17,r2
    a254:	01000074 	movhi	r4,1
    a258:	21020304 	addi	r4,r4,2060
    a25c:	20c7883a 	add	r3,r4,r3
    a260:	18c00003 	ldbu	r3,0(r3)
    a264:	1885883a 	add	r2,r3,r2
    a268:	00c00804 	movi	r3,32
    a26c:	1887c83a 	sub	r3,r3,r2
    a270:	1800a51e 	bne	r3,zero,a508 <__udivdi3+0x484>
    a274:	882ad43a 	srli	r21,r17,16
    a278:	8461c83a 	sub	r16,r16,r17
    a27c:	8d3fffcc 	andi	r20,r17,65535
    a280:	00c00044 	movi	r3,1
    a284:	a80b883a 	mov	r5,r21
    a288:	8009883a 	mov	r4,r16
    a28c:	d8c00115 	stw	r3,4(sp)
    a290:	000ada00 	call	ada0 <__umodsi3>
    a294:	a80b883a 	mov	r5,r21
    a298:	8009883a 	mov	r4,r16
    a29c:	1027883a 	mov	r19,r2
    a2a0:	000ad3c0 	call	ad3c <__udivsi3>
    a2a4:	a00b883a 	mov	r5,r20
    a2a8:	1009883a 	mov	r4,r2
    a2ac:	102d883a 	mov	r22,r2
    a2b0:	000adf80 	call	adf8 <__mulsi3>
    a2b4:	9826943a 	slli	r19,r19,16
    a2b8:	900ed43a 	srli	r7,r18,16
    a2bc:	d8c00117 	ldw	r3,4(sp)
    a2c0:	3cceb03a 	or	r7,r7,r19
    a2c4:	3880052e 	bgeu	r7,r2,a2dc <__udivdi3+0x258>
    a2c8:	3c4f883a 	add	r7,r7,r17
    a2cc:	b13fffc4 	addi	r4,r22,-1
    a2d0:	3c400136 	bltu	r7,r17,a2d8 <__udivdi3+0x254>
    a2d4:	3880e436 	bltu	r7,r2,a668 <__udivdi3+0x5e4>
    a2d8:	202d883a 	mov	r22,r4
    a2dc:	38a1c83a 	sub	r16,r7,r2
    a2e0:	8009883a 	mov	r4,r16
    a2e4:	a80b883a 	mov	r5,r21
    a2e8:	d8c00115 	stw	r3,4(sp)
    a2ec:	000ada00 	call	ada0 <__umodsi3>
    a2f0:	1027883a 	mov	r19,r2
    a2f4:	8009883a 	mov	r4,r16
    a2f8:	a80b883a 	mov	r5,r21
    a2fc:	9826943a 	slli	r19,r19,16
    a300:	000ad3c0 	call	ad3c <__udivsi3>
    a304:	a00b883a 	mov	r5,r20
    a308:	1009883a 	mov	r4,r2
    a30c:	94bfffcc 	andi	r18,r18,65535
    a310:	1021883a 	mov	r16,r2
    a314:	94e4b03a 	or	r18,r18,r19
    a318:	000adf80 	call	adf8 <__mulsi3>
    a31c:	d8c00117 	ldw	r3,4(sp)
    a320:	9080052e 	bgeu	r18,r2,a338 <__udivdi3+0x2b4>
    a324:	8ca5883a 	add	r18,r17,r18
    a328:	813fffc4 	addi	r4,r16,-1
    a32c:	9440ad36 	bltu	r18,r17,a5e4 <__udivdi3+0x560>
    a330:	9080ac2e 	bgeu	r18,r2,a5e4 <__udivdi3+0x560>
    a334:	843fff84 	addi	r16,r16,-2
    a338:	b004943a 	slli	r2,r22,16
    a33c:	1404b03a 	or	r2,r2,r16
    a340:	00000206 	br	a34c <__udivdi3+0x2c8>
    a344:	0007883a 	mov	r3,zero
    a348:	0005883a 	mov	r2,zero
    a34c:	dfc00b17 	ldw	ra,44(sp)
    a350:	df000a17 	ldw	fp,40(sp)
    a354:	ddc00917 	ldw	r23,36(sp)
    a358:	dd800817 	ldw	r22,32(sp)
    a35c:	dd400717 	ldw	r21,28(sp)
    a360:	dd000617 	ldw	r20,24(sp)
    a364:	dcc00517 	ldw	r19,20(sp)
    a368:	dc800417 	ldw	r18,16(sp)
    a36c:	dc400317 	ldw	r17,12(sp)
    a370:	dc000217 	ldw	r16,8(sp)
    a374:	dec00c04 	addi	sp,sp,48
    a378:	f800283a 	ret
    a37c:	00803fc4 	movi	r2,255
    a380:	11c5803a 	cmpltu	r2,r2,r7
    a384:	100490fa 	slli	r2,r2,3
    a388:	003f9906 	br	a1f0 <__alt_data_end+0xfffc0e10>
    a38c:	00803fc4 	movi	r2,255
    a390:	1445803a 	cmpltu	r2,r2,r17
    a394:	100490fa 	slli	r2,r2,3
    a398:	003fad06 	br	a250 <__alt_data_end+0xfffc0e70>
    a39c:	00804034 	movhi	r2,256
    a3a0:	10bfffc4 	addi	r2,r2,-1
    a3a4:	11809f36 	bltu	r2,r6,a624 <__udivdi3+0x5a0>
    a3a8:	00800404 	movi	r2,16
    a3ac:	003f4c06 	br	a0e0 <__alt_data_end+0xfffc0d00>
    a3b0:	3dce983a 	sll	r7,r7,r23
    a3b4:	30b8d83a 	srl	fp,r6,r2
    a3b8:	80a2d83a 	srl	r17,r16,r2
    a3bc:	35cc983a 	sll	r6,r6,r23
    a3c0:	3f38b03a 	or	fp,r7,fp
    a3c4:	e024d43a 	srli	r18,fp,16
    a3c8:	9884d83a 	srl	r2,r19,r2
    a3cc:	85e0983a 	sll	r16,r16,r23
    a3d0:	8809883a 	mov	r4,r17
    a3d4:	900b883a 	mov	r5,r18
    a3d8:	d9800015 	stw	r6,0(sp)
    a3dc:	1420b03a 	or	r16,r2,r16
    a3e0:	000ada00 	call	ada0 <__umodsi3>
    a3e4:	900b883a 	mov	r5,r18
    a3e8:	8809883a 	mov	r4,r17
    a3ec:	1029883a 	mov	r20,r2
    a3f0:	e5bfffcc 	andi	r22,fp,65535
    a3f4:	000ad3c0 	call	ad3c <__udivsi3>
    a3f8:	100b883a 	mov	r5,r2
    a3fc:	b009883a 	mov	r4,r22
    a400:	102b883a 	mov	r21,r2
    a404:	000adf80 	call	adf8 <__mulsi3>
    a408:	a028943a 	slli	r20,r20,16
    a40c:	8006d43a 	srli	r3,r16,16
    a410:	1d06b03a 	or	r3,r3,r20
    a414:	1880042e 	bgeu	r3,r2,a428 <__udivdi3+0x3a4>
    a418:	1f07883a 	add	r3,r3,fp
    a41c:	a93fffc4 	addi	r4,r21,-1
    a420:	1f00892e 	bgeu	r3,fp,a648 <__udivdi3+0x5c4>
    a424:	202b883a 	mov	r21,r4
    a428:	18a3c83a 	sub	r17,r3,r2
    a42c:	8809883a 	mov	r4,r17
    a430:	900b883a 	mov	r5,r18
    a434:	000ada00 	call	ada0 <__umodsi3>
    a438:	1029883a 	mov	r20,r2
    a43c:	8809883a 	mov	r4,r17
    a440:	900b883a 	mov	r5,r18
    a444:	a028943a 	slli	r20,r20,16
    a448:	000ad3c0 	call	ad3c <__udivsi3>
    a44c:	100b883a 	mov	r5,r2
    a450:	b009883a 	mov	r4,r22
    a454:	843fffcc 	andi	r16,r16,65535
    a458:	1023883a 	mov	r17,r2
    a45c:	8520b03a 	or	r16,r16,r20
    a460:	000adf80 	call	adf8 <__mulsi3>
    a464:	8080042e 	bgeu	r16,r2,a478 <__udivdi3+0x3f4>
    a468:	8721883a 	add	r16,r16,fp
    a46c:	88ffffc4 	addi	r3,r17,-1
    a470:	8700712e 	bgeu	r16,fp,a638 <__udivdi3+0x5b4>
    a474:	1823883a 	mov	r17,r3
    a478:	a80e943a 	slli	r7,r21,16
    a47c:	d8c00017 	ldw	r3,0(sp)
    a480:	80a1c83a 	sub	r16,r16,r2
    a484:	3c64b03a 	or	r18,r7,r17
    a488:	1d3fffcc 	andi	r20,r3,65535
    a48c:	9022d43a 	srli	r17,r18,16
    a490:	95bfffcc 	andi	r22,r18,65535
    a494:	a00b883a 	mov	r5,r20
    a498:	b009883a 	mov	r4,r22
    a49c:	182ad43a 	srli	r21,r3,16
    a4a0:	000adf80 	call	adf8 <__mulsi3>
    a4a4:	a00b883a 	mov	r5,r20
    a4a8:	8809883a 	mov	r4,r17
    a4ac:	1039883a 	mov	fp,r2
    a4b0:	000adf80 	call	adf8 <__mulsi3>
    a4b4:	8809883a 	mov	r4,r17
    a4b8:	a80b883a 	mov	r5,r21
    a4bc:	1029883a 	mov	r20,r2
    a4c0:	000adf80 	call	adf8 <__mulsi3>
    a4c4:	a80b883a 	mov	r5,r21
    a4c8:	b009883a 	mov	r4,r22
    a4cc:	1023883a 	mov	r17,r2
    a4d0:	000adf80 	call	adf8 <__mulsi3>
    a4d4:	e006d43a 	srli	r3,fp,16
    a4d8:	1505883a 	add	r2,r2,r20
    a4dc:	1887883a 	add	r3,r3,r2
    a4e0:	1d00022e 	bgeu	r3,r20,a4ec <__udivdi3+0x468>
    a4e4:	00800074 	movhi	r2,1
    a4e8:	88a3883a 	add	r17,r17,r2
    a4ec:	1804d43a 	srli	r2,r3,16
    a4f0:	1463883a 	add	r17,r2,r17
    a4f4:	84404436 	bltu	r16,r17,a608 <__udivdi3+0x584>
    a4f8:	84403e26 	beq	r16,r17,a5f4 <__udivdi3+0x570>
    a4fc:	9005883a 	mov	r2,r18
    a500:	0007883a 	mov	r3,zero
    a504:	003f9106 	br	a34c <__alt_data_end+0xfffc0f6c>
    a508:	88e2983a 	sll	r17,r17,r3
    a50c:	80aed83a 	srl	r23,r16,r2
    a510:	80e0983a 	sll	r16,r16,r3
    a514:	882ad43a 	srli	r21,r17,16
    a518:	9884d83a 	srl	r2,r19,r2
    a51c:	b809883a 	mov	r4,r23
    a520:	a80b883a 	mov	r5,r21
    a524:	98e4983a 	sll	r18,r19,r3
    a528:	142cb03a 	or	r22,r2,r16
    a52c:	000ada00 	call	ada0 <__umodsi3>
    a530:	b809883a 	mov	r4,r23
    a534:	a80b883a 	mov	r5,r21
    a538:	1027883a 	mov	r19,r2
    a53c:	8d3fffcc 	andi	r20,r17,65535
    a540:	000ad3c0 	call	ad3c <__udivsi3>
    a544:	a009883a 	mov	r4,r20
    a548:	100b883a 	mov	r5,r2
    a54c:	102f883a 	mov	r23,r2
    a550:	000adf80 	call	adf8 <__mulsi3>
    a554:	9826943a 	slli	r19,r19,16
    a558:	b008d43a 	srli	r4,r22,16
    a55c:	24c8b03a 	or	r4,r4,r19
    a560:	2080062e 	bgeu	r4,r2,a57c <__udivdi3+0x4f8>
    a564:	2449883a 	add	r4,r4,r17
    a568:	b8ffffc4 	addi	r3,r23,-1
    a56c:	24403c36 	bltu	r4,r17,a660 <__udivdi3+0x5dc>
    a570:	20803b2e 	bgeu	r4,r2,a660 <__udivdi3+0x5dc>
    a574:	bdffff84 	addi	r23,r23,-2
    a578:	2449883a 	add	r4,r4,r17
    a57c:	20a1c83a 	sub	r16,r4,r2
    a580:	a80b883a 	mov	r5,r21
    a584:	8009883a 	mov	r4,r16
    a588:	000ada00 	call	ada0 <__umodsi3>
    a58c:	a80b883a 	mov	r5,r21
    a590:	8009883a 	mov	r4,r16
    a594:	1027883a 	mov	r19,r2
    a598:	000ad3c0 	call	ad3c <__udivsi3>
    a59c:	a009883a 	mov	r4,r20
    a5a0:	100b883a 	mov	r5,r2
    a5a4:	9826943a 	slli	r19,r19,16
    a5a8:	1039883a 	mov	fp,r2
    a5ac:	000adf80 	call	adf8 <__mulsi3>
    a5b0:	b13fffcc 	andi	r4,r22,65535
    a5b4:	24c8b03a 	or	r4,r4,r19
    a5b8:	2080062e 	bgeu	r4,r2,a5d4 <__udivdi3+0x550>
    a5bc:	2449883a 	add	r4,r4,r17
    a5c0:	e0ffffc4 	addi	r3,fp,-1
    a5c4:	24402436 	bltu	r4,r17,a658 <__udivdi3+0x5d4>
    a5c8:	2080232e 	bgeu	r4,r2,a658 <__udivdi3+0x5d4>
    a5cc:	e73fff84 	addi	fp,fp,-2
    a5d0:	2449883a 	add	r4,r4,r17
    a5d4:	b82e943a 	slli	r23,r23,16
    a5d8:	20a1c83a 	sub	r16,r4,r2
    a5dc:	bf06b03a 	or	r3,r23,fp
    a5e0:	003f2806 	br	a284 <__alt_data_end+0xfffc0ea4>
    a5e4:	2021883a 	mov	r16,r4
    a5e8:	003f5306 	br	a338 <__alt_data_end+0xfffc0f58>
    a5ec:	1821883a 	mov	r16,r3
    a5f0:	003ef406 	br	a1c4 <__alt_data_end+0xfffc0de4>
    a5f4:	1806943a 	slli	r3,r3,16
    a5f8:	9de6983a 	sll	r19,r19,r23
    a5fc:	e73fffcc 	andi	fp,fp,65535
    a600:	1f07883a 	add	r3,r3,fp
    a604:	98ffbd2e 	bgeu	r19,r3,a4fc <__alt_data_end+0xfffc111c>
    a608:	90bfffc4 	addi	r2,r18,-1
    a60c:	0007883a 	mov	r3,zero
    a610:	003f4e06 	br	a34c <__alt_data_end+0xfffc0f6c>
    a614:	00800604 	movi	r2,24
    a618:	003ef506 	br	a1f0 <__alt_data_end+0xfffc0e10>
    a61c:	00800604 	movi	r2,24
    a620:	003f0b06 	br	a250 <__alt_data_end+0xfffc0e70>
    a624:	00800604 	movi	r2,24
    a628:	003ead06 	br	a0e0 <__alt_data_end+0xfffc0d00>
    a62c:	0007883a 	mov	r3,zero
    a630:	00800044 	movi	r2,1
    a634:	003f4506 	br	a34c <__alt_data_end+0xfffc0f6c>
    a638:	80bf8e2e 	bgeu	r16,r2,a474 <__alt_data_end+0xfffc1094>
    a63c:	8c7fff84 	addi	r17,r17,-2
    a640:	8721883a 	add	r16,r16,fp
    a644:	003f8c06 	br	a478 <__alt_data_end+0xfffc1098>
    a648:	18bf762e 	bgeu	r3,r2,a424 <__alt_data_end+0xfffc1044>
    a64c:	ad7fff84 	addi	r21,r21,-2
    a650:	1f07883a 	add	r3,r3,fp
    a654:	003f7406 	br	a428 <__alt_data_end+0xfffc1048>
    a658:	1839883a 	mov	fp,r3
    a65c:	003fdd06 	br	a5d4 <__alt_data_end+0xfffc11f4>
    a660:	182f883a 	mov	r23,r3
    a664:	003fc506 	br	a57c <__alt_data_end+0xfffc119c>
    a668:	b5bfff84 	addi	r22,r22,-2
    a66c:	3c4f883a 	add	r7,r7,r17
    a670:	003f1a06 	br	a2dc <__alt_data_end+0xfffc0efc>
    a674:	b5bfff84 	addi	r22,r22,-2
    a678:	1c47883a 	add	r3,r3,r17
    a67c:	003ebc06 	br	a170 <__alt_data_end+0xfffc0d90>

0000a680 <__umoddi3>:
    a680:	defff304 	addi	sp,sp,-52
    a684:	df000b15 	stw	fp,44(sp)
    a688:	dc400415 	stw	r17,16(sp)
    a68c:	dc000315 	stw	r16,12(sp)
    a690:	dfc00c15 	stw	ra,48(sp)
    a694:	ddc00a15 	stw	r23,40(sp)
    a698:	dd800915 	stw	r22,36(sp)
    a69c:	dd400815 	stw	r21,32(sp)
    a6a0:	dd000715 	stw	r20,28(sp)
    a6a4:	dcc00615 	stw	r19,24(sp)
    a6a8:	dc800515 	stw	r18,20(sp)
    a6ac:	2021883a 	mov	r16,r4
    a6b0:	2823883a 	mov	r17,r5
    a6b4:	2839883a 	mov	fp,r5
    a6b8:	3800401e 	bne	r7,zero,a7bc <__umoddi3+0x13c>
    a6bc:	3027883a 	mov	r19,r6
    a6c0:	2029883a 	mov	r20,r4
    a6c4:	2980552e 	bgeu	r5,r6,a81c <__umoddi3+0x19c>
    a6c8:	00bfffd4 	movui	r2,65535
    a6cc:	1180a236 	bltu	r2,r6,a958 <__umoddi3+0x2d8>
    a6d0:	01003fc4 	movi	r4,255
    a6d4:	2189803a 	cmpltu	r4,r4,r6
    a6d8:	200890fa 	slli	r4,r4,3
    a6dc:	3104d83a 	srl	r2,r6,r4
    a6e0:	00c00074 	movhi	r3,1
    a6e4:	18c20304 	addi	r3,r3,2060
    a6e8:	1885883a 	add	r2,r3,r2
    a6ec:	10c00003 	ldbu	r3,0(r2)
    a6f0:	00800804 	movi	r2,32
    a6f4:	1909883a 	add	r4,r3,r4
    a6f8:	1125c83a 	sub	r18,r2,r4
    a6fc:	90000526 	beq	r18,zero,a714 <__umoddi3+0x94>
    a700:	8ca2983a 	sll	r17,r17,r18
    a704:	8108d83a 	srl	r4,r16,r4
    a708:	34a6983a 	sll	r19,r6,r18
    a70c:	84a8983a 	sll	r20,r16,r18
    a710:	2478b03a 	or	fp,r4,r17
    a714:	982cd43a 	srli	r22,r19,16
    a718:	e009883a 	mov	r4,fp
    a71c:	9dffffcc 	andi	r23,r19,65535
    a720:	b00b883a 	mov	r5,r22
    a724:	000ada00 	call	ada0 <__umodsi3>
    a728:	b00b883a 	mov	r5,r22
    a72c:	e009883a 	mov	r4,fp
    a730:	102b883a 	mov	r21,r2
    a734:	000ad3c0 	call	ad3c <__udivsi3>
    a738:	100b883a 	mov	r5,r2
    a73c:	b809883a 	mov	r4,r23
    a740:	000adf80 	call	adf8 <__mulsi3>
    a744:	a82a943a 	slli	r21,r21,16
    a748:	a006d43a 	srli	r3,r20,16
    a74c:	1d46b03a 	or	r3,r3,r21
    a750:	1880032e 	bgeu	r3,r2,a760 <__umoddi3+0xe0>
    a754:	1cc7883a 	add	r3,r3,r19
    a758:	1cc00136 	bltu	r3,r19,a760 <__umoddi3+0xe0>
    a75c:	18813136 	bltu	r3,r2,ac24 <__umoddi3+0x5a4>
    a760:	18a1c83a 	sub	r16,r3,r2
    a764:	b00b883a 	mov	r5,r22
    a768:	8009883a 	mov	r4,r16
    a76c:	000ada00 	call	ada0 <__umodsi3>
    a770:	b00b883a 	mov	r5,r22
    a774:	8009883a 	mov	r4,r16
    a778:	1023883a 	mov	r17,r2
    a77c:	000ad3c0 	call	ad3c <__udivsi3>
    a780:	100b883a 	mov	r5,r2
    a784:	b809883a 	mov	r4,r23
    a788:	8822943a 	slli	r17,r17,16
    a78c:	000adf80 	call	adf8 <__mulsi3>
    a790:	a0ffffcc 	andi	r3,r20,65535
    a794:	1c46b03a 	or	r3,r3,r17
    a798:	1880042e 	bgeu	r3,r2,a7ac <__umoddi3+0x12c>
    a79c:	1cc7883a 	add	r3,r3,r19
    a7a0:	1cc00236 	bltu	r3,r19,a7ac <__umoddi3+0x12c>
    a7a4:	1880012e 	bgeu	r3,r2,a7ac <__umoddi3+0x12c>
    a7a8:	1cc7883a 	add	r3,r3,r19
    a7ac:	1885c83a 	sub	r2,r3,r2
    a7b0:	1484d83a 	srl	r2,r2,r18
    a7b4:	0007883a 	mov	r3,zero
    a7b8:	00005306 	br	a908 <__umoddi3+0x288>
    a7bc:	29c05036 	bltu	r5,r7,a900 <__umoddi3+0x280>
    a7c0:	00bfffd4 	movui	r2,65535
    a7c4:	11c05c2e 	bgeu	r2,r7,a938 <__umoddi3+0x2b8>
    a7c8:	00804034 	movhi	r2,256
    a7cc:	10bfffc4 	addi	r2,r2,-1
    a7d0:	11c10636 	bltu	r2,r7,abec <__umoddi3+0x56c>
    a7d4:	01000404 	movi	r4,16
    a7d8:	3904d83a 	srl	r2,r7,r4
    a7dc:	00c00074 	movhi	r3,1
    a7e0:	18c20304 	addi	r3,r3,2060
    a7e4:	1885883a 	add	r2,r3,r2
    a7e8:	14c00003 	ldbu	r19,0(r2)
    a7ec:	00c00804 	movi	r3,32
    a7f0:	9927883a 	add	r19,r19,r4
    a7f4:	1ce9c83a 	sub	r20,r3,r19
    a7f8:	a0005c1e 	bne	r20,zero,a96c <__umoddi3+0x2ec>
    a7fc:	3c400136 	bltu	r7,r17,a804 <__umoddi3+0x184>
    a800:	81810a36 	bltu	r16,r6,ac2c <__umoddi3+0x5ac>
    a804:	8185c83a 	sub	r2,r16,r6
    a808:	89e3c83a 	sub	r17,r17,r7
    a80c:	8089803a 	cmpltu	r4,r16,r2
    a810:	8939c83a 	sub	fp,r17,r4
    a814:	e007883a 	mov	r3,fp
    a818:	00003b06 	br	a908 <__umoddi3+0x288>
    a81c:	3000041e 	bne	r6,zero,a830 <__umoddi3+0x1b0>
    a820:	000b883a 	mov	r5,zero
    a824:	01000044 	movi	r4,1
    a828:	000ad3c0 	call	ad3c <__udivsi3>
    a82c:	1027883a 	mov	r19,r2
    a830:	00bfffd4 	movui	r2,65535
    a834:	14c0442e 	bgeu	r2,r19,a948 <__umoddi3+0x2c8>
    a838:	00804034 	movhi	r2,256
    a83c:	10bfffc4 	addi	r2,r2,-1
    a840:	14c0ec36 	bltu	r2,r19,abf4 <__umoddi3+0x574>
    a844:	00800404 	movi	r2,16
    a848:	9886d83a 	srl	r3,r19,r2
    a84c:	01000074 	movhi	r4,1
    a850:	21020304 	addi	r4,r4,2060
    a854:	20c7883a 	add	r3,r4,r3
    a858:	18c00003 	ldbu	r3,0(r3)
    a85c:	1887883a 	add	r3,r3,r2
    a860:	00800804 	movi	r2,32
    a864:	10e5c83a 	sub	r18,r2,r3
    a868:	9000ab1e 	bne	r18,zero,ab18 <__umoddi3+0x498>
    a86c:	982cd43a 	srli	r22,r19,16
    a870:	8ce3c83a 	sub	r17,r17,r19
    a874:	9dffffcc 	andi	r23,r19,65535
    a878:	b00b883a 	mov	r5,r22
    a87c:	8809883a 	mov	r4,r17
    a880:	000ada00 	call	ada0 <__umodsi3>
    a884:	b00b883a 	mov	r5,r22
    a888:	8809883a 	mov	r4,r17
    a88c:	102b883a 	mov	r21,r2
    a890:	000ad3c0 	call	ad3c <__udivsi3>
    a894:	b80b883a 	mov	r5,r23
    a898:	1009883a 	mov	r4,r2
    a89c:	000adf80 	call	adf8 <__mulsi3>
    a8a0:	a82a943a 	slli	r21,r21,16
    a8a4:	a006d43a 	srli	r3,r20,16
    a8a8:	1d46b03a 	or	r3,r3,r21
    a8ac:	1880042e 	bgeu	r3,r2,a8c0 <__umoddi3+0x240>
    a8b0:	1cc7883a 	add	r3,r3,r19
    a8b4:	1cc00236 	bltu	r3,r19,a8c0 <__umoddi3+0x240>
    a8b8:	1880012e 	bgeu	r3,r2,a8c0 <__umoddi3+0x240>
    a8bc:	1cc7883a 	add	r3,r3,r19
    a8c0:	18a1c83a 	sub	r16,r3,r2
    a8c4:	b00b883a 	mov	r5,r22
    a8c8:	8009883a 	mov	r4,r16
    a8cc:	000ada00 	call	ada0 <__umodsi3>
    a8d0:	1023883a 	mov	r17,r2
    a8d4:	b00b883a 	mov	r5,r22
    a8d8:	8009883a 	mov	r4,r16
    a8dc:	000ad3c0 	call	ad3c <__udivsi3>
    a8e0:	8822943a 	slli	r17,r17,16
    a8e4:	b80b883a 	mov	r5,r23
    a8e8:	1009883a 	mov	r4,r2
    a8ec:	000adf80 	call	adf8 <__mulsi3>
    a8f0:	a53fffcc 	andi	r20,r20,65535
    a8f4:	a446b03a 	or	r3,r20,r17
    a8f8:	18bfac2e 	bgeu	r3,r2,a7ac <__alt_data_end+0xfffc13cc>
    a8fc:	003fa706 	br	a79c <__alt_data_end+0xfffc13bc>
    a900:	2005883a 	mov	r2,r4
    a904:	2807883a 	mov	r3,r5
    a908:	dfc00c17 	ldw	ra,48(sp)
    a90c:	df000b17 	ldw	fp,44(sp)
    a910:	ddc00a17 	ldw	r23,40(sp)
    a914:	dd800917 	ldw	r22,36(sp)
    a918:	dd400817 	ldw	r21,32(sp)
    a91c:	dd000717 	ldw	r20,28(sp)
    a920:	dcc00617 	ldw	r19,24(sp)
    a924:	dc800517 	ldw	r18,20(sp)
    a928:	dc400417 	ldw	r17,16(sp)
    a92c:	dc000317 	ldw	r16,12(sp)
    a930:	dec00d04 	addi	sp,sp,52
    a934:	f800283a 	ret
    a938:	04c03fc4 	movi	r19,255
    a93c:	99c9803a 	cmpltu	r4,r19,r7
    a940:	200890fa 	slli	r4,r4,3
    a944:	003fa406 	br	a7d8 <__alt_data_end+0xfffc13f8>
    a948:	00803fc4 	movi	r2,255
    a94c:	14c5803a 	cmpltu	r2,r2,r19
    a950:	100490fa 	slli	r2,r2,3
    a954:	003fbc06 	br	a848 <__alt_data_end+0xfffc1468>
    a958:	00804034 	movhi	r2,256
    a95c:	10bfffc4 	addi	r2,r2,-1
    a960:	1180a636 	bltu	r2,r6,abfc <__umoddi3+0x57c>
    a964:	01000404 	movi	r4,16
    a968:	003f5c06 	br	a6dc <__alt_data_end+0xfffc12fc>
    a96c:	3d0e983a 	sll	r7,r7,r20
    a970:	34ead83a 	srl	r21,r6,r19
    a974:	8cc6d83a 	srl	r3,r17,r19
    a978:	8d10983a 	sll	r8,r17,r20
    a97c:	3d6ab03a 	or	r21,r7,r21
    a980:	a82cd43a 	srli	r22,r21,16
    a984:	84e2d83a 	srl	r17,r16,r19
    a988:	1809883a 	mov	r4,r3
    a98c:	b00b883a 	mov	r5,r22
    a990:	8a22b03a 	or	r17,r17,r8
    a994:	3524983a 	sll	r18,r6,r20
    a998:	dc400015 	stw	r17,0(sp)
    a99c:	d8c00115 	stw	r3,4(sp)
    a9a0:	000ada00 	call	ada0 <__umodsi3>
    a9a4:	d8c00117 	ldw	r3,4(sp)
    a9a8:	b00b883a 	mov	r5,r22
    a9ac:	1039883a 	mov	fp,r2
    a9b0:	1809883a 	mov	r4,r3
    a9b4:	000ad3c0 	call	ad3c <__udivsi3>
    a9b8:	adffffcc 	andi	r23,r21,65535
    a9bc:	100b883a 	mov	r5,r2
    a9c0:	b809883a 	mov	r4,r23
    a9c4:	1023883a 	mov	r17,r2
    a9c8:	000adf80 	call	adf8 <__mulsi3>
    a9cc:	d9400017 	ldw	r5,0(sp)
    a9d0:	e008943a 	slli	r4,fp,16
    a9d4:	8520983a 	sll	r16,r16,r20
    a9d8:	2806d43a 	srli	r3,r5,16
    a9dc:	1906b03a 	or	r3,r3,r4
    a9e0:	1880042e 	bgeu	r3,r2,a9f4 <__umoddi3+0x374>
    a9e4:	1d47883a 	add	r3,r3,r21
    a9e8:	893fffc4 	addi	r4,r17,-1
    a9ec:	1d40892e 	bgeu	r3,r21,ac14 <__umoddi3+0x594>
    a9f0:	2023883a 	mov	r17,r4
    a9f4:	18b9c83a 	sub	fp,r3,r2
    a9f8:	b00b883a 	mov	r5,r22
    a9fc:	e009883a 	mov	r4,fp
    aa00:	000ada00 	call	ada0 <__umodsi3>
    aa04:	b00b883a 	mov	r5,r22
    aa08:	e009883a 	mov	r4,fp
    aa0c:	d8800215 	stw	r2,8(sp)
    aa10:	000ad3c0 	call	ad3c <__udivsi3>
    aa14:	100b883a 	mov	r5,r2
    aa18:	b809883a 	mov	r4,r23
    aa1c:	102d883a 	mov	r22,r2
    aa20:	000adf80 	call	adf8 <__mulsi3>
    aa24:	d9800217 	ldw	r6,8(sp)
    aa28:	d8c00017 	ldw	r3,0(sp)
    aa2c:	300c943a 	slli	r6,r6,16
    aa30:	1a3fffcc 	andi	r8,r3,65535
    aa34:	4190b03a 	or	r8,r8,r6
    aa38:	4080042e 	bgeu	r8,r2,aa4c <__umoddi3+0x3cc>
    aa3c:	4551883a 	add	r8,r8,r21
    aa40:	b0ffffc4 	addi	r3,r22,-1
    aa44:	45406f2e 	bgeu	r8,r21,ac04 <__umoddi3+0x584>
    aa48:	182d883a 	mov	r22,r3
    aa4c:	880e943a 	slli	r7,r17,16
    aa50:	9006d43a 	srli	r3,r18,16
    aa54:	91bfffcc 	andi	r6,r18,65535
    aa58:	3dacb03a 	or	r22,r7,r22
    aa5c:	b02ed43a 	srli	r23,r22,16
    aa60:	b5bfffcc 	andi	r22,r22,65535
    aa64:	300b883a 	mov	r5,r6
    aa68:	b009883a 	mov	r4,r22
    aa6c:	40a3c83a 	sub	r17,r8,r2
    aa70:	d8c00115 	stw	r3,4(sp)
    aa74:	d9800215 	stw	r6,8(sp)
    aa78:	000adf80 	call	adf8 <__mulsi3>
    aa7c:	d9800217 	ldw	r6,8(sp)
    aa80:	b809883a 	mov	r4,r23
    aa84:	1039883a 	mov	fp,r2
    aa88:	300b883a 	mov	r5,r6
    aa8c:	000adf80 	call	adf8 <__mulsi3>
    aa90:	d8c00117 	ldw	r3,4(sp)
    aa94:	b809883a 	mov	r4,r23
    aa98:	d8800215 	stw	r2,8(sp)
    aa9c:	180b883a 	mov	r5,r3
    aaa0:	000adf80 	call	adf8 <__mulsi3>
    aaa4:	d8c00117 	ldw	r3,4(sp)
    aaa8:	b009883a 	mov	r4,r22
    aaac:	102f883a 	mov	r23,r2
    aab0:	180b883a 	mov	r5,r3
    aab4:	000adf80 	call	adf8 <__mulsi3>
    aab8:	d9800217 	ldw	r6,8(sp)
    aabc:	e006d43a 	srli	r3,fp,16
    aac0:	1185883a 	add	r2,r2,r6
    aac4:	1885883a 	add	r2,r3,r2
    aac8:	1180022e 	bgeu	r2,r6,aad4 <__umoddi3+0x454>
    aacc:	00c00074 	movhi	r3,1
    aad0:	b8ef883a 	add	r23,r23,r3
    aad4:	1006d43a 	srli	r3,r2,16
    aad8:	1004943a 	slli	r2,r2,16
    aadc:	e73fffcc 	andi	fp,fp,65535
    aae0:	1dc7883a 	add	r3,r3,r23
    aae4:	1739883a 	add	fp,r2,fp
    aae8:	88c03a36 	bltu	r17,r3,abd4 <__umoddi3+0x554>
    aaec:	88c05126 	beq	r17,r3,ac34 <__umoddi3+0x5b4>
    aaf0:	88c9c83a 	sub	r4,r17,r3
    aaf4:	e00f883a 	mov	r7,fp
    aaf8:	81cfc83a 	sub	r7,r16,r7
    aafc:	81c7803a 	cmpltu	r3,r16,r7
    ab00:	20c7c83a 	sub	r3,r4,r3
    ab04:	1cc4983a 	sll	r2,r3,r19
    ab08:	3d0ed83a 	srl	r7,r7,r20
    ab0c:	1d06d83a 	srl	r3,r3,r20
    ab10:	11c4b03a 	or	r2,r2,r7
    ab14:	003f7c06 	br	a908 <__alt_data_end+0xfffc1528>
    ab18:	9ca6983a 	sll	r19,r19,r18
    ab1c:	88f8d83a 	srl	fp,r17,r3
    ab20:	80c4d83a 	srl	r2,r16,r3
    ab24:	982cd43a 	srli	r22,r19,16
    ab28:	8ca2983a 	sll	r17,r17,r18
    ab2c:	e009883a 	mov	r4,fp
    ab30:	b00b883a 	mov	r5,r22
    ab34:	146ab03a 	or	r21,r2,r17
    ab38:	000ada00 	call	ada0 <__umodsi3>
    ab3c:	b00b883a 	mov	r5,r22
    ab40:	e009883a 	mov	r4,fp
    ab44:	1029883a 	mov	r20,r2
    ab48:	9dffffcc 	andi	r23,r19,65535
    ab4c:	000ad3c0 	call	ad3c <__udivsi3>
    ab50:	b809883a 	mov	r4,r23
    ab54:	100b883a 	mov	r5,r2
    ab58:	000adf80 	call	adf8 <__mulsi3>
    ab5c:	a008943a 	slli	r4,r20,16
    ab60:	a806d43a 	srli	r3,r21,16
    ab64:	84a8983a 	sll	r20,r16,r18
    ab68:	1906b03a 	or	r3,r3,r4
    ab6c:	1880042e 	bgeu	r3,r2,ab80 <__umoddi3+0x500>
    ab70:	1cc7883a 	add	r3,r3,r19
    ab74:	1cc00236 	bltu	r3,r19,ab80 <__umoddi3+0x500>
    ab78:	1880012e 	bgeu	r3,r2,ab80 <__umoddi3+0x500>
    ab7c:	1cc7883a 	add	r3,r3,r19
    ab80:	18a3c83a 	sub	r17,r3,r2
    ab84:	b00b883a 	mov	r5,r22
    ab88:	8809883a 	mov	r4,r17
    ab8c:	000ada00 	call	ada0 <__umodsi3>
    ab90:	b00b883a 	mov	r5,r22
    ab94:	8809883a 	mov	r4,r17
    ab98:	1021883a 	mov	r16,r2
    ab9c:	000ad3c0 	call	ad3c <__udivsi3>
    aba0:	100b883a 	mov	r5,r2
    aba4:	b809883a 	mov	r4,r23
    aba8:	8020943a 	slli	r16,r16,16
    abac:	000adf80 	call	adf8 <__mulsi3>
    abb0:	a8ffffcc 	andi	r3,r21,65535
    abb4:	1c06b03a 	or	r3,r3,r16
    abb8:	1880042e 	bgeu	r3,r2,abcc <__umoddi3+0x54c>
    abbc:	1cc7883a 	add	r3,r3,r19
    abc0:	1cc00236 	bltu	r3,r19,abcc <__umoddi3+0x54c>
    abc4:	1880012e 	bgeu	r3,r2,abcc <__umoddi3+0x54c>
    abc8:	1cc7883a 	add	r3,r3,r19
    abcc:	18a3c83a 	sub	r17,r3,r2
    abd0:	003f2906 	br	a878 <__alt_data_end+0xfffc1498>
    abd4:	e48fc83a 	sub	r7,fp,r18
    abd8:	1d49c83a 	sub	r4,r3,r21
    abdc:	e1f9803a 	cmpltu	fp,fp,r7
    abe0:	2739c83a 	sub	fp,r4,fp
    abe4:	8f09c83a 	sub	r4,r17,fp
    abe8:	003fc306 	br	aaf8 <__alt_data_end+0xfffc1718>
    abec:	01000604 	movi	r4,24
    abf0:	003ef906 	br	a7d8 <__alt_data_end+0xfffc13f8>
    abf4:	00800604 	movi	r2,24
    abf8:	003f1306 	br	a848 <__alt_data_end+0xfffc1468>
    abfc:	01000604 	movi	r4,24
    ac00:	003eb606 	br	a6dc <__alt_data_end+0xfffc12fc>
    ac04:	40bf902e 	bgeu	r8,r2,aa48 <__alt_data_end+0xfffc1668>
    ac08:	b5bfff84 	addi	r22,r22,-2
    ac0c:	4551883a 	add	r8,r8,r21
    ac10:	003f8e06 	br	aa4c <__alt_data_end+0xfffc166c>
    ac14:	18bf762e 	bgeu	r3,r2,a9f0 <__alt_data_end+0xfffc1610>
    ac18:	8c7fff84 	addi	r17,r17,-2
    ac1c:	1d47883a 	add	r3,r3,r21
    ac20:	003f7406 	br	a9f4 <__alt_data_end+0xfffc1614>
    ac24:	1cc7883a 	add	r3,r3,r19
    ac28:	003ecd06 	br	a760 <__alt_data_end+0xfffc1380>
    ac2c:	8005883a 	mov	r2,r16
    ac30:	003ef806 	br	a814 <__alt_data_end+0xfffc1434>
    ac34:	873fe736 	bltu	r16,fp,abd4 <__alt_data_end+0xfffc17f4>
    ac38:	e00f883a 	mov	r7,fp
    ac3c:	0009883a 	mov	r4,zero
    ac40:	003fad06 	br	aaf8 <__alt_data_end+0xfffc1718>

0000ac44 <__divsi3>:
    ac44:	20001b16 	blt	r4,zero,acb4 <__divsi3+0x70>
    ac48:	000f883a 	mov	r7,zero
    ac4c:	28001616 	blt	r5,zero,aca8 <__divsi3+0x64>
    ac50:	200d883a 	mov	r6,r4
    ac54:	29001a2e 	bgeu	r5,r4,acc0 <__divsi3+0x7c>
    ac58:	00800804 	movi	r2,32
    ac5c:	00c00044 	movi	r3,1
    ac60:	00000106 	br	ac68 <__divsi3+0x24>
    ac64:	10000d26 	beq	r2,zero,ac9c <__divsi3+0x58>
    ac68:	294b883a 	add	r5,r5,r5
    ac6c:	10bfffc4 	addi	r2,r2,-1
    ac70:	18c7883a 	add	r3,r3,r3
    ac74:	293ffb36 	bltu	r5,r4,ac64 <__alt_data_end+0xfffc1884>
    ac78:	0005883a 	mov	r2,zero
    ac7c:	18000726 	beq	r3,zero,ac9c <__divsi3+0x58>
    ac80:	0005883a 	mov	r2,zero
    ac84:	31400236 	bltu	r6,r5,ac90 <__divsi3+0x4c>
    ac88:	314dc83a 	sub	r6,r6,r5
    ac8c:	10c4b03a 	or	r2,r2,r3
    ac90:	1806d07a 	srli	r3,r3,1
    ac94:	280ad07a 	srli	r5,r5,1
    ac98:	183ffa1e 	bne	r3,zero,ac84 <__alt_data_end+0xfffc18a4>
    ac9c:	38000126 	beq	r7,zero,aca4 <__divsi3+0x60>
    aca0:	0085c83a 	sub	r2,zero,r2
    aca4:	f800283a 	ret
    aca8:	014bc83a 	sub	r5,zero,r5
    acac:	39c0005c 	xori	r7,r7,1
    acb0:	003fe706 	br	ac50 <__alt_data_end+0xfffc1870>
    acb4:	0109c83a 	sub	r4,zero,r4
    acb8:	01c00044 	movi	r7,1
    acbc:	003fe306 	br	ac4c <__alt_data_end+0xfffc186c>
    acc0:	00c00044 	movi	r3,1
    acc4:	003fee06 	br	ac80 <__alt_data_end+0xfffc18a0>

0000acc8 <__modsi3>:
    acc8:	20001716 	blt	r4,zero,ad28 <__modsi3+0x60>
    accc:	000f883a 	mov	r7,zero
    acd0:	2005883a 	mov	r2,r4
    acd4:	28001216 	blt	r5,zero,ad20 <__modsi3+0x58>
    acd8:	2900162e 	bgeu	r5,r4,ad34 <__modsi3+0x6c>
    acdc:	01800804 	movi	r6,32
    ace0:	00c00044 	movi	r3,1
    ace4:	00000106 	br	acec <__modsi3+0x24>
    ace8:	30000a26 	beq	r6,zero,ad14 <__modsi3+0x4c>
    acec:	294b883a 	add	r5,r5,r5
    acf0:	31bfffc4 	addi	r6,r6,-1
    acf4:	18c7883a 	add	r3,r3,r3
    acf8:	293ffb36 	bltu	r5,r4,ace8 <__alt_data_end+0xfffc1908>
    acfc:	18000526 	beq	r3,zero,ad14 <__modsi3+0x4c>
    ad00:	1806d07a 	srli	r3,r3,1
    ad04:	11400136 	bltu	r2,r5,ad0c <__modsi3+0x44>
    ad08:	1145c83a 	sub	r2,r2,r5
    ad0c:	280ad07a 	srli	r5,r5,1
    ad10:	183ffb1e 	bne	r3,zero,ad00 <__alt_data_end+0xfffc1920>
    ad14:	38000126 	beq	r7,zero,ad1c <__modsi3+0x54>
    ad18:	0085c83a 	sub	r2,zero,r2
    ad1c:	f800283a 	ret
    ad20:	014bc83a 	sub	r5,zero,r5
    ad24:	003fec06 	br	acd8 <__alt_data_end+0xfffc18f8>
    ad28:	0109c83a 	sub	r4,zero,r4
    ad2c:	01c00044 	movi	r7,1
    ad30:	003fe706 	br	acd0 <__alt_data_end+0xfffc18f0>
    ad34:	00c00044 	movi	r3,1
    ad38:	003ff106 	br	ad00 <__alt_data_end+0xfffc1920>

0000ad3c <__udivsi3>:
    ad3c:	200d883a 	mov	r6,r4
    ad40:	2900152e 	bgeu	r5,r4,ad98 <__udivsi3+0x5c>
    ad44:	28001416 	blt	r5,zero,ad98 <__udivsi3+0x5c>
    ad48:	00800804 	movi	r2,32
    ad4c:	00c00044 	movi	r3,1
    ad50:	00000206 	br	ad5c <__udivsi3+0x20>
    ad54:	10000e26 	beq	r2,zero,ad90 <__udivsi3+0x54>
    ad58:	28000516 	blt	r5,zero,ad70 <__udivsi3+0x34>
    ad5c:	294b883a 	add	r5,r5,r5
    ad60:	10bfffc4 	addi	r2,r2,-1
    ad64:	18c7883a 	add	r3,r3,r3
    ad68:	293ffa36 	bltu	r5,r4,ad54 <__alt_data_end+0xfffc1974>
    ad6c:	18000826 	beq	r3,zero,ad90 <__udivsi3+0x54>
    ad70:	0005883a 	mov	r2,zero
    ad74:	31400236 	bltu	r6,r5,ad80 <__udivsi3+0x44>
    ad78:	314dc83a 	sub	r6,r6,r5
    ad7c:	10c4b03a 	or	r2,r2,r3
    ad80:	1806d07a 	srli	r3,r3,1
    ad84:	280ad07a 	srli	r5,r5,1
    ad88:	183ffa1e 	bne	r3,zero,ad74 <__alt_data_end+0xfffc1994>
    ad8c:	f800283a 	ret
    ad90:	0005883a 	mov	r2,zero
    ad94:	f800283a 	ret
    ad98:	00c00044 	movi	r3,1
    ad9c:	003ff406 	br	ad70 <__alt_data_end+0xfffc1990>

0000ada0 <__umodsi3>:
    ada0:	2005883a 	mov	r2,r4
    ada4:	2900122e 	bgeu	r5,r4,adf0 <__umodsi3+0x50>
    ada8:	28001116 	blt	r5,zero,adf0 <__umodsi3+0x50>
    adac:	01800804 	movi	r6,32
    adb0:	00c00044 	movi	r3,1
    adb4:	00000206 	br	adc0 <__umodsi3+0x20>
    adb8:	30000c26 	beq	r6,zero,adec <__umodsi3+0x4c>
    adbc:	28000516 	blt	r5,zero,add4 <__umodsi3+0x34>
    adc0:	294b883a 	add	r5,r5,r5
    adc4:	31bfffc4 	addi	r6,r6,-1
    adc8:	18c7883a 	add	r3,r3,r3
    adcc:	293ffa36 	bltu	r5,r4,adb8 <__alt_data_end+0xfffc19d8>
    add0:	18000626 	beq	r3,zero,adec <__umodsi3+0x4c>
    add4:	1806d07a 	srli	r3,r3,1
    add8:	11400136 	bltu	r2,r5,ade0 <__umodsi3+0x40>
    addc:	1145c83a 	sub	r2,r2,r5
    ade0:	280ad07a 	srli	r5,r5,1
    ade4:	183ffb1e 	bne	r3,zero,add4 <__alt_data_end+0xfffc19f4>
    ade8:	f800283a 	ret
    adec:	f800283a 	ret
    adf0:	00c00044 	movi	r3,1
    adf4:	003ff706 	br	add4 <__alt_data_end+0xfffc19f4>

0000adf8 <__mulsi3>:
    adf8:	0005883a 	mov	r2,zero
    adfc:	20000726 	beq	r4,zero,ae1c <__mulsi3+0x24>
    ae00:	20c0004c 	andi	r3,r4,1
    ae04:	2008d07a 	srli	r4,r4,1
    ae08:	18000126 	beq	r3,zero,ae10 <__mulsi3+0x18>
    ae0c:	1145883a 	add	r2,r2,r5
    ae10:	294b883a 	add	r5,r5,r5
    ae14:	203ffa1e 	bne	r4,zero,ae00 <__alt_data_end+0xfffc1a20>
    ae18:	f800283a 	ret
    ae1c:	f800283a 	ret

0000ae20 <__adddf3>:
    ae20:	02c00434 	movhi	r11,16
    ae24:	5affffc4 	addi	r11,r11,-1
    ae28:	2806d7fa 	srli	r3,r5,31
    ae2c:	2ad4703a 	and	r10,r5,r11
    ae30:	3ad2703a 	and	r9,r7,r11
    ae34:	3804d53a 	srli	r2,r7,20
    ae38:	3018d77a 	srli	r12,r6,29
    ae3c:	280ad53a 	srli	r5,r5,20
    ae40:	501490fa 	slli	r10,r10,3
    ae44:	2010d77a 	srli	r8,r4,29
    ae48:	481290fa 	slli	r9,r9,3
    ae4c:	380ed7fa 	srli	r7,r7,31
    ae50:	defffb04 	addi	sp,sp,-20
    ae54:	dc800215 	stw	r18,8(sp)
    ae58:	dc400115 	stw	r17,4(sp)
    ae5c:	dc000015 	stw	r16,0(sp)
    ae60:	dfc00415 	stw	ra,16(sp)
    ae64:	dcc00315 	stw	r19,12(sp)
    ae68:	1c803fcc 	andi	r18,r3,255
    ae6c:	2c01ffcc 	andi	r16,r5,2047
    ae70:	5210b03a 	or	r8,r10,r8
    ae74:	202290fa 	slli	r17,r4,3
    ae78:	1081ffcc 	andi	r2,r2,2047
    ae7c:	4b12b03a 	or	r9,r9,r12
    ae80:	300c90fa 	slli	r6,r6,3
    ae84:	91c07526 	beq	r18,r7,b05c <__adddf3+0x23c>
    ae88:	8087c83a 	sub	r3,r16,r2
    ae8c:	00c0ab0e 	bge	zero,r3,b13c <__adddf3+0x31c>
    ae90:	10002a1e 	bne	r2,zero,af3c <__adddf3+0x11c>
    ae94:	4984b03a 	or	r2,r9,r6
    ae98:	1000961e 	bne	r2,zero,b0f4 <__adddf3+0x2d4>
    ae9c:	888001cc 	andi	r2,r17,7
    aea0:	10000726 	beq	r2,zero,aec0 <__adddf3+0xa0>
    aea4:	888003cc 	andi	r2,r17,15
    aea8:	00c00104 	movi	r3,4
    aeac:	10c00426 	beq	r2,r3,aec0 <__adddf3+0xa0>
    aeb0:	88c7883a 	add	r3,r17,r3
    aeb4:	1c63803a 	cmpltu	r17,r3,r17
    aeb8:	4451883a 	add	r8,r8,r17
    aebc:	1823883a 	mov	r17,r3
    aec0:	4080202c 	andhi	r2,r8,128
    aec4:	10005926 	beq	r2,zero,b02c <__adddf3+0x20c>
    aec8:	84000044 	addi	r16,r16,1
    aecc:	0081ffc4 	movi	r2,2047
    aed0:	8080ba26 	beq	r16,r2,b1bc <__adddf3+0x39c>
    aed4:	00bfe034 	movhi	r2,65408
    aed8:	10bfffc4 	addi	r2,r2,-1
    aedc:	4090703a 	and	r8,r8,r2
    aee0:	4004977a 	slli	r2,r8,29
    aee4:	4010927a 	slli	r8,r8,9
    aee8:	8822d0fa 	srli	r17,r17,3
    aeec:	8401ffcc 	andi	r16,r16,2047
    aef0:	4010d33a 	srli	r8,r8,12
    aef4:	9007883a 	mov	r3,r18
    aef8:	1444b03a 	or	r2,r2,r17
    aefc:	8401ffcc 	andi	r16,r16,2047
    af00:	8020953a 	slli	r16,r16,20
    af04:	18c03fcc 	andi	r3,r3,255
    af08:	01000434 	movhi	r4,16
    af0c:	213fffc4 	addi	r4,r4,-1
    af10:	180697fa 	slli	r3,r3,31
    af14:	4110703a 	and	r8,r8,r4
    af18:	4410b03a 	or	r8,r8,r16
    af1c:	40c6b03a 	or	r3,r8,r3
    af20:	dfc00417 	ldw	ra,16(sp)
    af24:	dcc00317 	ldw	r19,12(sp)
    af28:	dc800217 	ldw	r18,8(sp)
    af2c:	dc400117 	ldw	r17,4(sp)
    af30:	dc000017 	ldw	r16,0(sp)
    af34:	dec00504 	addi	sp,sp,20
    af38:	f800283a 	ret
    af3c:	0081ffc4 	movi	r2,2047
    af40:	80bfd626 	beq	r16,r2,ae9c <__alt_data_end+0xfffc1abc>
    af44:	4a402034 	orhi	r9,r9,128
    af48:	00800e04 	movi	r2,56
    af4c:	10c09f16 	blt	r2,r3,b1cc <__adddf3+0x3ac>
    af50:	008007c4 	movi	r2,31
    af54:	10c0c216 	blt	r2,r3,b260 <__adddf3+0x440>
    af58:	00800804 	movi	r2,32
    af5c:	10c5c83a 	sub	r2,r2,r3
    af60:	488a983a 	sll	r5,r9,r2
    af64:	30c8d83a 	srl	r4,r6,r3
    af68:	3084983a 	sll	r2,r6,r2
    af6c:	48c6d83a 	srl	r3,r9,r3
    af70:	290cb03a 	or	r6,r5,r4
    af74:	1004c03a 	cmpne	r2,r2,zero
    af78:	308cb03a 	or	r6,r6,r2
    af7c:	898dc83a 	sub	r6,r17,r6
    af80:	89a3803a 	cmpltu	r17,r17,r6
    af84:	40d1c83a 	sub	r8,r8,r3
    af88:	4451c83a 	sub	r8,r8,r17
    af8c:	3023883a 	mov	r17,r6
    af90:	4080202c 	andhi	r2,r8,128
    af94:	10002326 	beq	r2,zero,b024 <__adddf3+0x204>
    af98:	04c02034 	movhi	r19,128
    af9c:	9cffffc4 	addi	r19,r19,-1
    afa0:	44e6703a 	and	r19,r8,r19
    afa4:	98007626 	beq	r19,zero,b180 <__adddf3+0x360>
    afa8:	9809883a 	mov	r4,r19
    afac:	000d6600 	call	d660 <__clzsi2>
    afb0:	10fffe04 	addi	r3,r2,-8
    afb4:	010007c4 	movi	r4,31
    afb8:	20c07716 	blt	r4,r3,b198 <__adddf3+0x378>
    afbc:	00800804 	movi	r2,32
    afc0:	10c5c83a 	sub	r2,r2,r3
    afc4:	8884d83a 	srl	r2,r17,r2
    afc8:	98d0983a 	sll	r8,r19,r3
    afcc:	88e2983a 	sll	r17,r17,r3
    afd0:	1204b03a 	or	r2,r2,r8
    afd4:	1c007416 	blt	r3,r16,b1a8 <__adddf3+0x388>
    afd8:	1c21c83a 	sub	r16,r3,r16
    afdc:	82000044 	addi	r8,r16,1
    afe0:	00c007c4 	movi	r3,31
    afe4:	1a009116 	blt	r3,r8,b22c <__adddf3+0x40c>
    afe8:	00c00804 	movi	r3,32
    afec:	1a07c83a 	sub	r3,r3,r8
    aff0:	8a08d83a 	srl	r4,r17,r8
    aff4:	88e2983a 	sll	r17,r17,r3
    aff8:	10c6983a 	sll	r3,r2,r3
    affc:	1210d83a 	srl	r8,r2,r8
    b000:	8804c03a 	cmpne	r2,r17,zero
    b004:	1906b03a 	or	r3,r3,r4
    b008:	18a2b03a 	or	r17,r3,r2
    b00c:	0021883a 	mov	r16,zero
    b010:	003fa206 	br	ae9c <__alt_data_end+0xfffc1abc>
    b014:	1890b03a 	or	r8,r3,r2
    b018:	40017d26 	beq	r8,zero,b610 <__adddf3+0x7f0>
    b01c:	1011883a 	mov	r8,r2
    b020:	1823883a 	mov	r17,r3
    b024:	888001cc 	andi	r2,r17,7
    b028:	103f9e1e 	bne	r2,zero,aea4 <__alt_data_end+0xfffc1ac4>
    b02c:	4004977a 	slli	r2,r8,29
    b030:	8822d0fa 	srli	r17,r17,3
    b034:	4010d0fa 	srli	r8,r8,3
    b038:	9007883a 	mov	r3,r18
    b03c:	1444b03a 	or	r2,r2,r17
    b040:	0101ffc4 	movi	r4,2047
    b044:	81002426 	beq	r16,r4,b0d8 <__adddf3+0x2b8>
    b048:	8120703a 	and	r16,r16,r4
    b04c:	01000434 	movhi	r4,16
    b050:	213fffc4 	addi	r4,r4,-1
    b054:	4110703a 	and	r8,r8,r4
    b058:	003fa806 	br	aefc <__alt_data_end+0xfffc1b1c>
    b05c:	8089c83a 	sub	r4,r16,r2
    b060:	01005e0e 	bge	zero,r4,b1dc <__adddf3+0x3bc>
    b064:	10002b26 	beq	r2,zero,b114 <__adddf3+0x2f4>
    b068:	0081ffc4 	movi	r2,2047
    b06c:	80bf8b26 	beq	r16,r2,ae9c <__alt_data_end+0xfffc1abc>
    b070:	4a402034 	orhi	r9,r9,128
    b074:	00800e04 	movi	r2,56
    b078:	1100a40e 	bge	r2,r4,b30c <__adddf3+0x4ec>
    b07c:	498cb03a 	or	r6,r9,r6
    b080:	300ac03a 	cmpne	r5,r6,zero
    b084:	0013883a 	mov	r9,zero
    b088:	2c4b883a 	add	r5,r5,r17
    b08c:	2c63803a 	cmpltu	r17,r5,r17
    b090:	4a11883a 	add	r8,r9,r8
    b094:	8a11883a 	add	r8,r17,r8
    b098:	2823883a 	mov	r17,r5
    b09c:	4080202c 	andhi	r2,r8,128
    b0a0:	103fe026 	beq	r2,zero,b024 <__alt_data_end+0xfffc1c44>
    b0a4:	84000044 	addi	r16,r16,1
    b0a8:	0081ffc4 	movi	r2,2047
    b0ac:	8080d226 	beq	r16,r2,b3f8 <__adddf3+0x5d8>
    b0b0:	00bfe034 	movhi	r2,65408
    b0b4:	10bfffc4 	addi	r2,r2,-1
    b0b8:	4090703a 	and	r8,r8,r2
    b0bc:	880ad07a 	srli	r5,r17,1
    b0c0:	400897fa 	slli	r4,r8,31
    b0c4:	88c0004c 	andi	r3,r17,1
    b0c8:	28e2b03a 	or	r17,r5,r3
    b0cc:	4010d07a 	srli	r8,r8,1
    b0d0:	2462b03a 	or	r17,r4,r17
    b0d4:	003f7106 	br	ae9c <__alt_data_end+0xfffc1abc>
    b0d8:	4088b03a 	or	r4,r8,r2
    b0dc:	20014526 	beq	r4,zero,b5f4 <__adddf3+0x7d4>
    b0e0:	01000434 	movhi	r4,16
    b0e4:	42000234 	orhi	r8,r8,8
    b0e8:	213fffc4 	addi	r4,r4,-1
    b0ec:	4110703a 	and	r8,r8,r4
    b0f0:	003f8206 	br	aefc <__alt_data_end+0xfffc1b1c>
    b0f4:	18ffffc4 	addi	r3,r3,-1
    b0f8:	1800491e 	bne	r3,zero,b220 <__adddf3+0x400>
    b0fc:	898bc83a 	sub	r5,r17,r6
    b100:	8963803a 	cmpltu	r17,r17,r5
    b104:	4251c83a 	sub	r8,r8,r9
    b108:	4451c83a 	sub	r8,r8,r17
    b10c:	2823883a 	mov	r17,r5
    b110:	003f9f06 	br	af90 <__alt_data_end+0xfffc1bb0>
    b114:	4984b03a 	or	r2,r9,r6
    b118:	103f6026 	beq	r2,zero,ae9c <__alt_data_end+0xfffc1abc>
    b11c:	213fffc4 	addi	r4,r4,-1
    b120:	2000931e 	bne	r4,zero,b370 <__adddf3+0x550>
    b124:	898d883a 	add	r6,r17,r6
    b128:	3463803a 	cmpltu	r17,r6,r17
    b12c:	4251883a 	add	r8,r8,r9
    b130:	8a11883a 	add	r8,r17,r8
    b134:	3023883a 	mov	r17,r6
    b138:	003fd806 	br	b09c <__alt_data_end+0xfffc1cbc>
    b13c:	1800541e 	bne	r3,zero,b290 <__adddf3+0x470>
    b140:	80800044 	addi	r2,r16,1
    b144:	1081ffcc 	andi	r2,r2,2047
    b148:	00c00044 	movi	r3,1
    b14c:	1880a00e 	bge	r3,r2,b3d0 <__adddf3+0x5b0>
    b150:	8989c83a 	sub	r4,r17,r6
    b154:	8905803a 	cmpltu	r2,r17,r4
    b158:	4267c83a 	sub	r19,r8,r9
    b15c:	98a7c83a 	sub	r19,r19,r2
    b160:	9880202c 	andhi	r2,r19,128
    b164:	10006326 	beq	r2,zero,b2f4 <__adddf3+0x4d4>
    b168:	3463c83a 	sub	r17,r6,r17
    b16c:	4a07c83a 	sub	r3,r9,r8
    b170:	344d803a 	cmpltu	r6,r6,r17
    b174:	19a7c83a 	sub	r19,r3,r6
    b178:	3825883a 	mov	r18,r7
    b17c:	983f8a1e 	bne	r19,zero,afa8 <__alt_data_end+0xfffc1bc8>
    b180:	8809883a 	mov	r4,r17
    b184:	000d6600 	call	d660 <__clzsi2>
    b188:	10800804 	addi	r2,r2,32
    b18c:	10fffe04 	addi	r3,r2,-8
    b190:	010007c4 	movi	r4,31
    b194:	20ff890e 	bge	r4,r3,afbc <__alt_data_end+0xfffc1bdc>
    b198:	10bff604 	addi	r2,r2,-40
    b19c:	8884983a 	sll	r2,r17,r2
    b1a0:	0023883a 	mov	r17,zero
    b1a4:	1c3f8c0e 	bge	r3,r16,afd8 <__alt_data_end+0xfffc1bf8>
    b1a8:	023fe034 	movhi	r8,65408
    b1ac:	423fffc4 	addi	r8,r8,-1
    b1b0:	80e1c83a 	sub	r16,r16,r3
    b1b4:	1210703a 	and	r8,r2,r8
    b1b8:	003f3806 	br	ae9c <__alt_data_end+0xfffc1abc>
    b1bc:	9007883a 	mov	r3,r18
    b1c0:	0011883a 	mov	r8,zero
    b1c4:	0005883a 	mov	r2,zero
    b1c8:	003f4c06 	br	aefc <__alt_data_end+0xfffc1b1c>
    b1cc:	498cb03a 	or	r6,r9,r6
    b1d0:	300cc03a 	cmpne	r6,r6,zero
    b1d4:	0007883a 	mov	r3,zero
    b1d8:	003f6806 	br	af7c <__alt_data_end+0xfffc1b9c>
    b1dc:	20009c1e 	bne	r4,zero,b450 <__adddf3+0x630>
    b1e0:	80800044 	addi	r2,r16,1
    b1e4:	1141ffcc 	andi	r5,r2,2047
    b1e8:	01000044 	movi	r4,1
    b1ec:	2140670e 	bge	r4,r5,b38c <__adddf3+0x56c>
    b1f0:	0101ffc4 	movi	r4,2047
    b1f4:	11007f26 	beq	r2,r4,b3f4 <__adddf3+0x5d4>
    b1f8:	898d883a 	add	r6,r17,r6
    b1fc:	4247883a 	add	r3,r8,r9
    b200:	3451803a 	cmpltu	r8,r6,r17
    b204:	40d1883a 	add	r8,r8,r3
    b208:	402297fa 	slli	r17,r8,31
    b20c:	300cd07a 	srli	r6,r6,1
    b210:	4010d07a 	srli	r8,r8,1
    b214:	1021883a 	mov	r16,r2
    b218:	89a2b03a 	or	r17,r17,r6
    b21c:	003f1f06 	br	ae9c <__alt_data_end+0xfffc1abc>
    b220:	0081ffc4 	movi	r2,2047
    b224:	80bf481e 	bne	r16,r2,af48 <__alt_data_end+0xfffc1b68>
    b228:	003f1c06 	br	ae9c <__alt_data_end+0xfffc1abc>
    b22c:	843ff844 	addi	r16,r16,-31
    b230:	01000804 	movi	r4,32
    b234:	1406d83a 	srl	r3,r2,r16
    b238:	41005026 	beq	r8,r4,b37c <__adddf3+0x55c>
    b23c:	01001004 	movi	r4,64
    b240:	2211c83a 	sub	r8,r4,r8
    b244:	1204983a 	sll	r2,r2,r8
    b248:	88a2b03a 	or	r17,r17,r2
    b24c:	8822c03a 	cmpne	r17,r17,zero
    b250:	1c62b03a 	or	r17,r3,r17
    b254:	0011883a 	mov	r8,zero
    b258:	0021883a 	mov	r16,zero
    b25c:	003f7106 	br	b024 <__alt_data_end+0xfffc1c44>
    b260:	193ff804 	addi	r4,r3,-32
    b264:	00800804 	movi	r2,32
    b268:	4908d83a 	srl	r4,r9,r4
    b26c:	18804526 	beq	r3,r2,b384 <__adddf3+0x564>
    b270:	00801004 	movi	r2,64
    b274:	10c5c83a 	sub	r2,r2,r3
    b278:	4886983a 	sll	r3,r9,r2
    b27c:	198cb03a 	or	r6,r3,r6
    b280:	300cc03a 	cmpne	r6,r6,zero
    b284:	218cb03a 	or	r6,r4,r6
    b288:	0007883a 	mov	r3,zero
    b28c:	003f3b06 	br	af7c <__alt_data_end+0xfffc1b9c>
    b290:	80002a26 	beq	r16,zero,b33c <__adddf3+0x51c>
    b294:	0101ffc4 	movi	r4,2047
    b298:	11006826 	beq	r2,r4,b43c <__adddf3+0x61c>
    b29c:	00c7c83a 	sub	r3,zero,r3
    b2a0:	42002034 	orhi	r8,r8,128
    b2a4:	01000e04 	movi	r4,56
    b2a8:	20c07c16 	blt	r4,r3,b49c <__adddf3+0x67c>
    b2ac:	010007c4 	movi	r4,31
    b2b0:	20c0da16 	blt	r4,r3,b61c <__adddf3+0x7fc>
    b2b4:	01000804 	movi	r4,32
    b2b8:	20c9c83a 	sub	r4,r4,r3
    b2bc:	4114983a 	sll	r10,r8,r4
    b2c0:	88cad83a 	srl	r5,r17,r3
    b2c4:	8908983a 	sll	r4,r17,r4
    b2c8:	40c6d83a 	srl	r3,r8,r3
    b2cc:	5162b03a 	or	r17,r10,r5
    b2d0:	2008c03a 	cmpne	r4,r4,zero
    b2d4:	8922b03a 	or	r17,r17,r4
    b2d8:	3463c83a 	sub	r17,r6,r17
    b2dc:	48c7c83a 	sub	r3,r9,r3
    b2e0:	344d803a 	cmpltu	r6,r6,r17
    b2e4:	1991c83a 	sub	r8,r3,r6
    b2e8:	1021883a 	mov	r16,r2
    b2ec:	3825883a 	mov	r18,r7
    b2f0:	003f2706 	br	af90 <__alt_data_end+0xfffc1bb0>
    b2f4:	24d0b03a 	or	r8,r4,r19
    b2f8:	40001b1e 	bne	r8,zero,b368 <__adddf3+0x548>
    b2fc:	0005883a 	mov	r2,zero
    b300:	0007883a 	mov	r3,zero
    b304:	0021883a 	mov	r16,zero
    b308:	003f4d06 	br	b040 <__alt_data_end+0xfffc1c60>
    b30c:	008007c4 	movi	r2,31
    b310:	11003c16 	blt	r2,r4,b404 <__adddf3+0x5e4>
    b314:	00800804 	movi	r2,32
    b318:	1105c83a 	sub	r2,r2,r4
    b31c:	488e983a 	sll	r7,r9,r2
    b320:	310ad83a 	srl	r5,r6,r4
    b324:	3084983a 	sll	r2,r6,r2
    b328:	4912d83a 	srl	r9,r9,r4
    b32c:	394ab03a 	or	r5,r7,r5
    b330:	1004c03a 	cmpne	r2,r2,zero
    b334:	288ab03a 	or	r5,r5,r2
    b338:	003f5306 	br	b088 <__alt_data_end+0xfffc1ca8>
    b33c:	4448b03a 	or	r4,r8,r17
    b340:	20003e26 	beq	r4,zero,b43c <__adddf3+0x61c>
    b344:	00c6303a 	nor	r3,zero,r3
    b348:	18003a1e 	bne	r3,zero,b434 <__adddf3+0x614>
    b34c:	3463c83a 	sub	r17,r6,r17
    b350:	4a07c83a 	sub	r3,r9,r8
    b354:	344d803a 	cmpltu	r6,r6,r17
    b358:	1991c83a 	sub	r8,r3,r6
    b35c:	1021883a 	mov	r16,r2
    b360:	3825883a 	mov	r18,r7
    b364:	003f0a06 	br	af90 <__alt_data_end+0xfffc1bb0>
    b368:	2023883a 	mov	r17,r4
    b36c:	003f0d06 	br	afa4 <__alt_data_end+0xfffc1bc4>
    b370:	0081ffc4 	movi	r2,2047
    b374:	80bf3f1e 	bne	r16,r2,b074 <__alt_data_end+0xfffc1c94>
    b378:	003ec806 	br	ae9c <__alt_data_end+0xfffc1abc>
    b37c:	0005883a 	mov	r2,zero
    b380:	003fb106 	br	b248 <__alt_data_end+0xfffc1e68>
    b384:	0007883a 	mov	r3,zero
    b388:	003fbc06 	br	b27c <__alt_data_end+0xfffc1e9c>
    b38c:	4444b03a 	or	r2,r8,r17
    b390:	8000871e 	bne	r16,zero,b5b0 <__adddf3+0x790>
    b394:	1000ba26 	beq	r2,zero,b680 <__adddf3+0x860>
    b398:	4984b03a 	or	r2,r9,r6
    b39c:	103ebf26 	beq	r2,zero,ae9c <__alt_data_end+0xfffc1abc>
    b3a0:	8985883a 	add	r2,r17,r6
    b3a4:	4247883a 	add	r3,r8,r9
    b3a8:	1451803a 	cmpltu	r8,r2,r17
    b3ac:	40d1883a 	add	r8,r8,r3
    b3b0:	40c0202c 	andhi	r3,r8,128
    b3b4:	1023883a 	mov	r17,r2
    b3b8:	183f1a26 	beq	r3,zero,b024 <__alt_data_end+0xfffc1c44>
    b3bc:	00bfe034 	movhi	r2,65408
    b3c0:	10bfffc4 	addi	r2,r2,-1
    b3c4:	2021883a 	mov	r16,r4
    b3c8:	4090703a 	and	r8,r8,r2
    b3cc:	003eb306 	br	ae9c <__alt_data_end+0xfffc1abc>
    b3d0:	4444b03a 	or	r2,r8,r17
    b3d4:	8000291e 	bne	r16,zero,b47c <__adddf3+0x65c>
    b3d8:	10004b1e 	bne	r2,zero,b508 <__adddf3+0x6e8>
    b3dc:	4990b03a 	or	r8,r9,r6
    b3e0:	40008b26 	beq	r8,zero,b610 <__adddf3+0x7f0>
    b3e4:	4811883a 	mov	r8,r9
    b3e8:	3023883a 	mov	r17,r6
    b3ec:	3825883a 	mov	r18,r7
    b3f0:	003eaa06 	br	ae9c <__alt_data_end+0xfffc1abc>
    b3f4:	1021883a 	mov	r16,r2
    b3f8:	0011883a 	mov	r8,zero
    b3fc:	0005883a 	mov	r2,zero
    b400:	003f0f06 	br	b040 <__alt_data_end+0xfffc1c60>
    b404:	217ff804 	addi	r5,r4,-32
    b408:	00800804 	movi	r2,32
    b40c:	494ad83a 	srl	r5,r9,r5
    b410:	20807d26 	beq	r4,r2,b608 <__adddf3+0x7e8>
    b414:	00801004 	movi	r2,64
    b418:	1109c83a 	sub	r4,r2,r4
    b41c:	4912983a 	sll	r9,r9,r4
    b420:	498cb03a 	or	r6,r9,r6
    b424:	300cc03a 	cmpne	r6,r6,zero
    b428:	298ab03a 	or	r5,r5,r6
    b42c:	0013883a 	mov	r9,zero
    b430:	003f1506 	br	b088 <__alt_data_end+0xfffc1ca8>
    b434:	0101ffc4 	movi	r4,2047
    b438:	113f9a1e 	bne	r2,r4,b2a4 <__alt_data_end+0xfffc1ec4>
    b43c:	4811883a 	mov	r8,r9
    b440:	3023883a 	mov	r17,r6
    b444:	1021883a 	mov	r16,r2
    b448:	3825883a 	mov	r18,r7
    b44c:	003e9306 	br	ae9c <__alt_data_end+0xfffc1abc>
    b450:	8000161e 	bne	r16,zero,b4ac <__adddf3+0x68c>
    b454:	444ab03a 	or	r5,r8,r17
    b458:	28005126 	beq	r5,zero,b5a0 <__adddf3+0x780>
    b45c:	0108303a 	nor	r4,zero,r4
    b460:	20004d1e 	bne	r4,zero,b598 <__adddf3+0x778>
    b464:	89a3883a 	add	r17,r17,r6
    b468:	4253883a 	add	r9,r8,r9
    b46c:	898d803a 	cmpltu	r6,r17,r6
    b470:	3251883a 	add	r8,r6,r9
    b474:	1021883a 	mov	r16,r2
    b478:	003f0806 	br	b09c <__alt_data_end+0xfffc1cbc>
    b47c:	1000301e 	bne	r2,zero,b540 <__adddf3+0x720>
    b480:	4984b03a 	or	r2,r9,r6
    b484:	10007126 	beq	r2,zero,b64c <__adddf3+0x82c>
    b488:	4811883a 	mov	r8,r9
    b48c:	3023883a 	mov	r17,r6
    b490:	3825883a 	mov	r18,r7
    b494:	0401ffc4 	movi	r16,2047
    b498:	003e8006 	br	ae9c <__alt_data_end+0xfffc1abc>
    b49c:	4462b03a 	or	r17,r8,r17
    b4a0:	8822c03a 	cmpne	r17,r17,zero
    b4a4:	0007883a 	mov	r3,zero
    b4a8:	003f8b06 	br	b2d8 <__alt_data_end+0xfffc1ef8>
    b4ac:	0141ffc4 	movi	r5,2047
    b4b0:	11403b26 	beq	r2,r5,b5a0 <__adddf3+0x780>
    b4b4:	0109c83a 	sub	r4,zero,r4
    b4b8:	42002034 	orhi	r8,r8,128
    b4bc:	01400e04 	movi	r5,56
    b4c0:	29006716 	blt	r5,r4,b660 <__adddf3+0x840>
    b4c4:	014007c4 	movi	r5,31
    b4c8:	29007016 	blt	r5,r4,b68c <__adddf3+0x86c>
    b4cc:	01400804 	movi	r5,32
    b4d0:	290bc83a 	sub	r5,r5,r4
    b4d4:	4154983a 	sll	r10,r8,r5
    b4d8:	890ed83a 	srl	r7,r17,r4
    b4dc:	894a983a 	sll	r5,r17,r5
    b4e0:	4108d83a 	srl	r4,r8,r4
    b4e4:	51e2b03a 	or	r17,r10,r7
    b4e8:	280ac03a 	cmpne	r5,r5,zero
    b4ec:	8962b03a 	or	r17,r17,r5
    b4f0:	89a3883a 	add	r17,r17,r6
    b4f4:	2253883a 	add	r9,r4,r9
    b4f8:	898d803a 	cmpltu	r6,r17,r6
    b4fc:	3251883a 	add	r8,r6,r9
    b500:	1021883a 	mov	r16,r2
    b504:	003ee506 	br	b09c <__alt_data_end+0xfffc1cbc>
    b508:	4984b03a 	or	r2,r9,r6
    b50c:	103e6326 	beq	r2,zero,ae9c <__alt_data_end+0xfffc1abc>
    b510:	8987c83a 	sub	r3,r17,r6
    b514:	88c9803a 	cmpltu	r4,r17,r3
    b518:	4245c83a 	sub	r2,r8,r9
    b51c:	1105c83a 	sub	r2,r2,r4
    b520:	1100202c 	andhi	r4,r2,128
    b524:	203ebb26 	beq	r4,zero,b014 <__alt_data_end+0xfffc1c34>
    b528:	3463c83a 	sub	r17,r6,r17
    b52c:	4a07c83a 	sub	r3,r9,r8
    b530:	344d803a 	cmpltu	r6,r6,r17
    b534:	1991c83a 	sub	r8,r3,r6
    b538:	3825883a 	mov	r18,r7
    b53c:	003e5706 	br	ae9c <__alt_data_end+0xfffc1abc>
    b540:	4984b03a 	or	r2,r9,r6
    b544:	10002e26 	beq	r2,zero,b600 <__adddf3+0x7e0>
    b548:	4004d0fa 	srli	r2,r8,3
    b54c:	8822d0fa 	srli	r17,r17,3
    b550:	4010977a 	slli	r8,r8,29
    b554:	10c0022c 	andhi	r3,r2,8
    b558:	4462b03a 	or	r17,r8,r17
    b55c:	18000826 	beq	r3,zero,b580 <__adddf3+0x760>
    b560:	4808d0fa 	srli	r4,r9,3
    b564:	20c0022c 	andhi	r3,r4,8
    b568:	1800051e 	bne	r3,zero,b580 <__adddf3+0x760>
    b56c:	300cd0fa 	srli	r6,r6,3
    b570:	4806977a 	slli	r3,r9,29
    b574:	2005883a 	mov	r2,r4
    b578:	3825883a 	mov	r18,r7
    b57c:	19a2b03a 	or	r17,r3,r6
    b580:	8810d77a 	srli	r8,r17,29
    b584:	100490fa 	slli	r2,r2,3
    b588:	882290fa 	slli	r17,r17,3
    b58c:	0401ffc4 	movi	r16,2047
    b590:	4090b03a 	or	r8,r8,r2
    b594:	003e4106 	br	ae9c <__alt_data_end+0xfffc1abc>
    b598:	0141ffc4 	movi	r5,2047
    b59c:	117fc71e 	bne	r2,r5,b4bc <__alt_data_end+0xfffc20dc>
    b5a0:	4811883a 	mov	r8,r9
    b5a4:	3023883a 	mov	r17,r6
    b5a8:	1021883a 	mov	r16,r2
    b5ac:	003e3b06 	br	ae9c <__alt_data_end+0xfffc1abc>
    b5b0:	10002f26 	beq	r2,zero,b670 <__adddf3+0x850>
    b5b4:	4984b03a 	or	r2,r9,r6
    b5b8:	10001126 	beq	r2,zero,b600 <__adddf3+0x7e0>
    b5bc:	4004d0fa 	srli	r2,r8,3
    b5c0:	8822d0fa 	srli	r17,r17,3
    b5c4:	4010977a 	slli	r8,r8,29
    b5c8:	10c0022c 	andhi	r3,r2,8
    b5cc:	4462b03a 	or	r17,r8,r17
    b5d0:	183feb26 	beq	r3,zero,b580 <__alt_data_end+0xfffc21a0>
    b5d4:	4808d0fa 	srli	r4,r9,3
    b5d8:	20c0022c 	andhi	r3,r4,8
    b5dc:	183fe81e 	bne	r3,zero,b580 <__alt_data_end+0xfffc21a0>
    b5e0:	300cd0fa 	srli	r6,r6,3
    b5e4:	4806977a 	slli	r3,r9,29
    b5e8:	2005883a 	mov	r2,r4
    b5ec:	19a2b03a 	or	r17,r3,r6
    b5f0:	003fe306 	br	b580 <__alt_data_end+0xfffc21a0>
    b5f4:	0011883a 	mov	r8,zero
    b5f8:	0005883a 	mov	r2,zero
    b5fc:	003e3f06 	br	aefc <__alt_data_end+0xfffc1b1c>
    b600:	0401ffc4 	movi	r16,2047
    b604:	003e2506 	br	ae9c <__alt_data_end+0xfffc1abc>
    b608:	0013883a 	mov	r9,zero
    b60c:	003f8406 	br	b420 <__alt_data_end+0xfffc2040>
    b610:	0005883a 	mov	r2,zero
    b614:	0007883a 	mov	r3,zero
    b618:	003e8906 	br	b040 <__alt_data_end+0xfffc1c60>
    b61c:	197ff804 	addi	r5,r3,-32
    b620:	01000804 	movi	r4,32
    b624:	414ad83a 	srl	r5,r8,r5
    b628:	19002426 	beq	r3,r4,b6bc <__adddf3+0x89c>
    b62c:	01001004 	movi	r4,64
    b630:	20c7c83a 	sub	r3,r4,r3
    b634:	40c6983a 	sll	r3,r8,r3
    b638:	1c46b03a 	or	r3,r3,r17
    b63c:	1806c03a 	cmpne	r3,r3,zero
    b640:	28e2b03a 	or	r17,r5,r3
    b644:	0007883a 	mov	r3,zero
    b648:	003f2306 	br	b2d8 <__alt_data_end+0xfffc1ef8>
    b64c:	0007883a 	mov	r3,zero
    b650:	5811883a 	mov	r8,r11
    b654:	00bfffc4 	movi	r2,-1
    b658:	0401ffc4 	movi	r16,2047
    b65c:	003e7806 	br	b040 <__alt_data_end+0xfffc1c60>
    b660:	4462b03a 	or	r17,r8,r17
    b664:	8822c03a 	cmpne	r17,r17,zero
    b668:	0009883a 	mov	r4,zero
    b66c:	003fa006 	br	b4f0 <__alt_data_end+0xfffc2110>
    b670:	4811883a 	mov	r8,r9
    b674:	3023883a 	mov	r17,r6
    b678:	0401ffc4 	movi	r16,2047
    b67c:	003e0706 	br	ae9c <__alt_data_end+0xfffc1abc>
    b680:	4811883a 	mov	r8,r9
    b684:	3023883a 	mov	r17,r6
    b688:	003e0406 	br	ae9c <__alt_data_end+0xfffc1abc>
    b68c:	21fff804 	addi	r7,r4,-32
    b690:	01400804 	movi	r5,32
    b694:	41ced83a 	srl	r7,r8,r7
    b698:	21400a26 	beq	r4,r5,b6c4 <__adddf3+0x8a4>
    b69c:	01401004 	movi	r5,64
    b6a0:	2909c83a 	sub	r4,r5,r4
    b6a4:	4108983a 	sll	r4,r8,r4
    b6a8:	2448b03a 	or	r4,r4,r17
    b6ac:	2008c03a 	cmpne	r4,r4,zero
    b6b0:	3922b03a 	or	r17,r7,r4
    b6b4:	0009883a 	mov	r4,zero
    b6b8:	003f8d06 	br	b4f0 <__alt_data_end+0xfffc2110>
    b6bc:	0007883a 	mov	r3,zero
    b6c0:	003fdd06 	br	b638 <__alt_data_end+0xfffc2258>
    b6c4:	0009883a 	mov	r4,zero
    b6c8:	003ff706 	br	b6a8 <__alt_data_end+0xfffc22c8>

0000b6cc <__divdf3>:
    b6cc:	defff004 	addi	sp,sp,-64
    b6d0:	dc800815 	stw	r18,32(sp)
    b6d4:	2824d53a 	srli	r18,r5,20
    b6d8:	dd800c15 	stw	r22,48(sp)
    b6dc:	282cd7fa 	srli	r22,r5,31
    b6e0:	dc000615 	stw	r16,24(sp)
    b6e4:	04000434 	movhi	r16,16
    b6e8:	843fffc4 	addi	r16,r16,-1
    b6ec:	dfc00f15 	stw	ra,60(sp)
    b6f0:	df000e15 	stw	fp,56(sp)
    b6f4:	ddc00d15 	stw	r23,52(sp)
    b6f8:	dd400b15 	stw	r21,44(sp)
    b6fc:	dd000a15 	stw	r20,40(sp)
    b700:	dcc00915 	stw	r19,36(sp)
    b704:	dc400715 	stw	r17,28(sp)
    b708:	9481ffcc 	andi	r18,r18,2047
    b70c:	2c20703a 	and	r16,r5,r16
    b710:	b2003fcc 	andi	r8,r22,255
    b714:	90006126 	beq	r18,zero,b89c <__divdf3+0x1d0>
    b718:	0081ffc4 	movi	r2,2047
    b71c:	202b883a 	mov	r21,r4
    b720:	90803726 	beq	r18,r2,b800 <__divdf3+0x134>
    b724:	80800434 	orhi	r2,r16,16
    b728:	100490fa 	slli	r2,r2,3
    b72c:	2020d77a 	srli	r16,r4,29
    b730:	202a90fa 	slli	r21,r4,3
    b734:	94bf0044 	addi	r18,r18,-1023
    b738:	80a0b03a 	or	r16,r16,r2
    b73c:	0013883a 	mov	r9,zero
    b740:	000b883a 	mov	r5,zero
    b744:	3806d53a 	srli	r3,r7,20
    b748:	382ed7fa 	srli	r23,r7,31
    b74c:	04400434 	movhi	r17,16
    b750:	8c7fffc4 	addi	r17,r17,-1
    b754:	18c1ffcc 	andi	r3,r3,2047
    b758:	3029883a 	mov	r20,r6
    b75c:	3c62703a 	and	r17,r7,r17
    b760:	bf003fcc 	andi	fp,r23,255
    b764:	18006e26 	beq	r3,zero,b920 <__divdf3+0x254>
    b768:	0081ffc4 	movi	r2,2047
    b76c:	18806626 	beq	r3,r2,b908 <__divdf3+0x23c>
    b770:	88800434 	orhi	r2,r17,16
    b774:	100490fa 	slli	r2,r2,3
    b778:	3022d77a 	srli	r17,r6,29
    b77c:	302890fa 	slli	r20,r6,3
    b780:	18ff0044 	addi	r3,r3,-1023
    b784:	88a2b03a 	or	r17,r17,r2
    b788:	000f883a 	mov	r7,zero
    b78c:	b5e6f03a 	xor	r19,r22,r23
    b790:	3a4cb03a 	or	r6,r7,r9
    b794:	008003c4 	movi	r2,15
    b798:	9809883a 	mov	r4,r19
    b79c:	90c7c83a 	sub	r3,r18,r3
    b7a0:	9cc03fcc 	andi	r19,r19,255
    b7a4:	11809636 	bltu	r2,r6,ba00 <__divdf3+0x334>
    b7a8:	300c90ba 	slli	r6,r6,2
    b7ac:	00800074 	movhi	r2,1
    b7b0:	10adf004 	addi	r2,r2,-18496
    b7b4:	308d883a 	add	r6,r6,r2
    b7b8:	30800017 	ldw	r2,0(r6)
    b7bc:	1000683a 	jmp	r2
    b7c0:	0000ba00 	call	ba0 <___vfprintf_internal_r+0x3ac>
    b7c4:	0000b838 	rdprs	zero,zero,736
    b7c8:	0000b9f0 	cmpltui	zero,zero,743
    b7cc:	0000b82c 	andhi	zero,zero,736
    b7d0:	0000b9f0 	cmpltui	zero,zero,743
    b7d4:	0000b9c4 	movi	zero,743
    b7d8:	0000b9f0 	cmpltui	zero,zero,743
    b7dc:	0000b82c 	andhi	zero,zero,736
    b7e0:	0000b838 	rdprs	zero,zero,736
    b7e4:	0000b838 	rdprs	zero,zero,736
    b7e8:	0000b9c4 	movi	zero,743
    b7ec:	0000b82c 	andhi	zero,zero,736
    b7f0:	0000b81c 	xori	zero,zero,736
    b7f4:	0000b81c 	xori	zero,zero,736
    b7f8:	0000b81c 	xori	zero,zero,736
    b7fc:	0000bd88 	cmpgei	zero,zero,758
    b800:	2404b03a 	or	r2,r4,r16
    b804:	10006c1e 	bne	r2,zero,b9b8 <__divdf3+0x2ec>
    b808:	02400204 	movi	r9,8
    b80c:	0021883a 	mov	r16,zero
    b810:	002b883a 	mov	r21,zero
    b814:	01400084 	movi	r5,2
    b818:	003fca06 	br	b744 <__alt_data_end+0xfffc2364>
    b81c:	8023883a 	mov	r17,r16
    b820:	a829883a 	mov	r20,r21
    b824:	4039883a 	mov	fp,r8
    b828:	280f883a 	mov	r7,r5
    b82c:	00800084 	movi	r2,2
    b830:	3881601e 	bne	r7,r2,bdb4 <__divdf3+0x6e8>
    b834:	e027883a 	mov	r19,fp
    b838:	9900004c 	andi	r4,r19,1
    b83c:	0081ffc4 	movi	r2,2047
    b840:	0021883a 	mov	r16,zero
    b844:	002b883a 	mov	r21,zero
    b848:	1004953a 	slli	r2,r2,20
    b84c:	20c03fcc 	andi	r3,r4,255
    b850:	01400434 	movhi	r5,16
    b854:	297fffc4 	addi	r5,r5,-1
    b858:	180697fa 	slli	r3,r3,31
    b85c:	8160703a 	and	r16,r16,r5
    b860:	80a0b03a 	or	r16,r16,r2
    b864:	80c6b03a 	or	r3,r16,r3
    b868:	a805883a 	mov	r2,r21
    b86c:	dfc00f17 	ldw	ra,60(sp)
    b870:	df000e17 	ldw	fp,56(sp)
    b874:	ddc00d17 	ldw	r23,52(sp)
    b878:	dd800c17 	ldw	r22,48(sp)
    b87c:	dd400b17 	ldw	r21,44(sp)
    b880:	dd000a17 	ldw	r20,40(sp)
    b884:	dcc00917 	ldw	r19,36(sp)
    b888:	dc800817 	ldw	r18,32(sp)
    b88c:	dc400717 	ldw	r17,28(sp)
    b890:	dc000617 	ldw	r16,24(sp)
    b894:	dec01004 	addi	sp,sp,64
    b898:	f800283a 	ret
    b89c:	2404b03a 	or	r2,r4,r16
    b8a0:	2023883a 	mov	r17,r4
    b8a4:	10003f26 	beq	r2,zero,b9a4 <__divdf3+0x2d8>
    b8a8:	80015e26 	beq	r16,zero,be24 <__divdf3+0x758>
    b8ac:	8009883a 	mov	r4,r16
    b8b0:	d9800215 	stw	r6,8(sp)
    b8b4:	d9c00515 	stw	r7,20(sp)
    b8b8:	da000415 	stw	r8,16(sp)
    b8bc:	000d6600 	call	d660 <__clzsi2>
    b8c0:	d9800217 	ldw	r6,8(sp)
    b8c4:	d9c00517 	ldw	r7,20(sp)
    b8c8:	da000417 	ldw	r8,16(sp)
    b8cc:	113ffd44 	addi	r4,r2,-11
    b8d0:	00c00704 	movi	r3,28
    b8d4:	19014f16 	blt	r3,r4,be14 <__divdf3+0x748>
    b8d8:	00c00744 	movi	r3,29
    b8dc:	157ffe04 	addi	r21,r2,-8
    b8e0:	1907c83a 	sub	r3,r3,r4
    b8e4:	8560983a 	sll	r16,r16,r21
    b8e8:	88c6d83a 	srl	r3,r17,r3
    b8ec:	8d6a983a 	sll	r21,r17,r21
    b8f0:	1c20b03a 	or	r16,r3,r16
    b8f4:	1080fcc4 	addi	r2,r2,1011
    b8f8:	00a5c83a 	sub	r18,zero,r2
    b8fc:	0013883a 	mov	r9,zero
    b900:	000b883a 	mov	r5,zero
    b904:	003f8f06 	br	b744 <__alt_data_end+0xfffc2364>
    b908:	3444b03a 	or	r2,r6,r17
    b90c:	1000231e 	bne	r2,zero,b99c <__divdf3+0x2d0>
    b910:	0023883a 	mov	r17,zero
    b914:	0029883a 	mov	r20,zero
    b918:	01c00084 	movi	r7,2
    b91c:	003f9b06 	br	b78c <__alt_data_end+0xfffc23ac>
    b920:	3444b03a 	or	r2,r6,r17
    b924:	10001926 	beq	r2,zero,b98c <__divdf3+0x2c0>
    b928:	88014b26 	beq	r17,zero,be58 <__divdf3+0x78c>
    b92c:	8809883a 	mov	r4,r17
    b930:	d9400115 	stw	r5,4(sp)
    b934:	d9800215 	stw	r6,8(sp)
    b938:	da000415 	stw	r8,16(sp)
    b93c:	da400315 	stw	r9,12(sp)
    b940:	000d6600 	call	d660 <__clzsi2>
    b944:	d9400117 	ldw	r5,4(sp)
    b948:	d9800217 	ldw	r6,8(sp)
    b94c:	da000417 	ldw	r8,16(sp)
    b950:	da400317 	ldw	r9,12(sp)
    b954:	113ffd44 	addi	r4,r2,-11
    b958:	00c00704 	movi	r3,28
    b95c:	19013a16 	blt	r3,r4,be48 <__divdf3+0x77c>
    b960:	00c00744 	movi	r3,29
    b964:	153ffe04 	addi	r20,r2,-8
    b968:	1907c83a 	sub	r3,r3,r4
    b96c:	8d22983a 	sll	r17,r17,r20
    b970:	30c6d83a 	srl	r3,r6,r3
    b974:	3528983a 	sll	r20,r6,r20
    b978:	1c62b03a 	or	r17,r3,r17
    b97c:	1080fcc4 	addi	r2,r2,1011
    b980:	0087c83a 	sub	r3,zero,r2
    b984:	000f883a 	mov	r7,zero
    b988:	003f8006 	br	b78c <__alt_data_end+0xfffc23ac>
    b98c:	0023883a 	mov	r17,zero
    b990:	0029883a 	mov	r20,zero
    b994:	01c00044 	movi	r7,1
    b998:	003f7c06 	br	b78c <__alt_data_end+0xfffc23ac>
    b99c:	01c000c4 	movi	r7,3
    b9a0:	003f7a06 	br	b78c <__alt_data_end+0xfffc23ac>
    b9a4:	02400104 	movi	r9,4
    b9a8:	0021883a 	mov	r16,zero
    b9ac:	002b883a 	mov	r21,zero
    b9b0:	01400044 	movi	r5,1
    b9b4:	003f6306 	br	b744 <__alt_data_end+0xfffc2364>
    b9b8:	02400304 	movi	r9,12
    b9bc:	014000c4 	movi	r5,3
    b9c0:	003f6006 	br	b744 <__alt_data_end+0xfffc2364>
    b9c4:	04000434 	movhi	r16,16
    b9c8:	0009883a 	mov	r4,zero
    b9cc:	843fffc4 	addi	r16,r16,-1
    b9d0:	057fffc4 	movi	r21,-1
    b9d4:	0081ffc4 	movi	r2,2047
    b9d8:	003f9b06 	br	b848 <__alt_data_end+0xfffc2468>
    b9dc:	00c00044 	movi	r3,1
    b9e0:	1887c83a 	sub	r3,r3,r2
    b9e4:	01000e04 	movi	r4,56
    b9e8:	20c1530e 	bge	r4,r3,bf38 <__divdf3+0x86c>
    b9ec:	9900004c 	andi	r4,r19,1
    b9f0:	0005883a 	mov	r2,zero
    b9f4:	0021883a 	mov	r16,zero
    b9f8:	002b883a 	mov	r21,zero
    b9fc:	003f9206 	br	b848 <__alt_data_end+0xfffc2468>
    ba00:	8c012e36 	bltu	r17,r16,bebc <__divdf3+0x7f0>
    ba04:	84412c26 	beq	r16,r17,beb8 <__divdf3+0x7ec>
    ba08:	a82f883a 	mov	r23,r21
    ba0c:	18ffffc4 	addi	r3,r3,-1
    ba10:	002b883a 	mov	r21,zero
    ba14:	a004d63a 	srli	r2,r20,24
    ba18:	8822923a 	slli	r17,r17,8
    ba1c:	a028923a 	slli	r20,r20,8
    ba20:	8009883a 	mov	r4,r16
    ba24:	88acb03a 	or	r22,r17,r2
    ba28:	dd000015 	stw	r20,0(sp)
    ba2c:	b028d43a 	srli	r20,r22,16
    ba30:	d8c00215 	stw	r3,8(sp)
    ba34:	b4bfffcc 	andi	r18,r22,65535
    ba38:	a00b883a 	mov	r5,r20
    ba3c:	000ad3c0 	call	ad3c <__udivsi3>
    ba40:	100b883a 	mov	r5,r2
    ba44:	9009883a 	mov	r4,r18
    ba48:	1023883a 	mov	r17,r2
    ba4c:	000adf80 	call	adf8 <__mulsi3>
    ba50:	8009883a 	mov	r4,r16
    ba54:	a00b883a 	mov	r5,r20
    ba58:	1039883a 	mov	fp,r2
    ba5c:	000ada00 	call	ada0 <__umodsi3>
    ba60:	1004943a 	slli	r2,r2,16
    ba64:	b808d43a 	srli	r4,r23,16
    ba68:	d8c00217 	ldw	r3,8(sp)
    ba6c:	2084b03a 	or	r2,r4,r2
    ba70:	1700062e 	bgeu	r2,fp,ba8c <__divdf3+0x3c0>
    ba74:	1585883a 	add	r2,r2,r22
    ba78:	893fffc4 	addi	r4,r17,-1
    ba7c:	15811d36 	bltu	r2,r22,bef4 <__divdf3+0x828>
    ba80:	17011c2e 	bgeu	r2,fp,bef4 <__divdf3+0x828>
    ba84:	8c7fff84 	addi	r17,r17,-2
    ba88:	1585883a 	add	r2,r2,r22
    ba8c:	1739c83a 	sub	fp,r2,fp
    ba90:	a00b883a 	mov	r5,r20
    ba94:	e009883a 	mov	r4,fp
    ba98:	d8c00215 	stw	r3,8(sp)
    ba9c:	000ad3c0 	call	ad3c <__udivsi3>
    baa0:	100b883a 	mov	r5,r2
    baa4:	9009883a 	mov	r4,r18
    baa8:	1021883a 	mov	r16,r2
    baac:	000adf80 	call	adf8 <__mulsi3>
    bab0:	a00b883a 	mov	r5,r20
    bab4:	e009883a 	mov	r4,fp
    bab8:	d8800415 	stw	r2,16(sp)
    babc:	000ada00 	call	ada0 <__umodsi3>
    bac0:	1004943a 	slli	r2,r2,16
    bac4:	da000417 	ldw	r8,16(sp)
    bac8:	bdffffcc 	andi	r23,r23,65535
    bacc:	b884b03a 	or	r2,r23,r2
    bad0:	d8c00217 	ldw	r3,8(sp)
    bad4:	1200062e 	bgeu	r2,r8,baf0 <__divdf3+0x424>
    bad8:	1585883a 	add	r2,r2,r22
    badc:	813fffc4 	addi	r4,r16,-1
    bae0:	15810236 	bltu	r2,r22,beec <__divdf3+0x820>
    bae4:	1201012e 	bgeu	r2,r8,beec <__divdf3+0x820>
    bae8:	843fff84 	addi	r16,r16,-2
    baec:	1585883a 	add	r2,r2,r22
    baf0:	8822943a 	slli	r17,r17,16
    baf4:	d9800017 	ldw	r6,0(sp)
    baf8:	1211c83a 	sub	r8,r2,r8
    bafc:	8c22b03a 	or	r17,r17,r16
    bb00:	373fffcc 	andi	fp,r6,65535
    bb04:	8abfffcc 	andi	r10,r17,65535
    bb08:	8820d43a 	srli	r16,r17,16
    bb0c:	5009883a 	mov	r4,r10
    bb10:	e00b883a 	mov	r5,fp
    bb14:	302ed43a 	srli	r23,r6,16
    bb18:	d8c00215 	stw	r3,8(sp)
    bb1c:	da000415 	stw	r8,16(sp)
    bb20:	da800115 	stw	r10,4(sp)
    bb24:	000adf80 	call	adf8 <__mulsi3>
    bb28:	800b883a 	mov	r5,r16
    bb2c:	e009883a 	mov	r4,fp
    bb30:	d8800515 	stw	r2,20(sp)
    bb34:	000adf80 	call	adf8 <__mulsi3>
    bb38:	8009883a 	mov	r4,r16
    bb3c:	b80b883a 	mov	r5,r23
    bb40:	d8800315 	stw	r2,12(sp)
    bb44:	000adf80 	call	adf8 <__mulsi3>
    bb48:	da800117 	ldw	r10,4(sp)
    bb4c:	b80b883a 	mov	r5,r23
    bb50:	1021883a 	mov	r16,r2
    bb54:	5009883a 	mov	r4,r10
    bb58:	000adf80 	call	adf8 <__mulsi3>
    bb5c:	d9c00517 	ldw	r7,20(sp)
    bb60:	da400317 	ldw	r9,12(sp)
    bb64:	d8c00217 	ldw	r3,8(sp)
    bb68:	3808d43a 	srli	r4,r7,16
    bb6c:	1245883a 	add	r2,r2,r9
    bb70:	da000417 	ldw	r8,16(sp)
    bb74:	2085883a 	add	r2,r4,r2
    bb78:	1240022e 	bgeu	r2,r9,bb84 <__divdf3+0x4b8>
    bb7c:	01000074 	movhi	r4,1
    bb80:	8121883a 	add	r16,r16,r4
    bb84:	1008d43a 	srli	r4,r2,16
    bb88:	1004943a 	slli	r2,r2,16
    bb8c:	39ffffcc 	andi	r7,r7,65535
    bb90:	2409883a 	add	r4,r4,r16
    bb94:	11c5883a 	add	r2,r2,r7
    bb98:	4100bb36 	bltu	r8,r4,be88 <__divdf3+0x7bc>
    bb9c:	4100d726 	beq	r8,r4,befc <__divdf3+0x830>
    bba0:	4109c83a 	sub	r4,r8,r4
    bba4:	a8a1c83a 	sub	r16,r21,r2
    bba8:	ac2b803a 	cmpltu	r21,r21,r16
    bbac:	256bc83a 	sub	r21,r4,r21
    bbb0:	b540d926 	beq	r22,r21,bf18 <__divdf3+0x84c>
    bbb4:	a00b883a 	mov	r5,r20
    bbb8:	a809883a 	mov	r4,r21
    bbbc:	d8c00215 	stw	r3,8(sp)
    bbc0:	000ad3c0 	call	ad3c <__udivsi3>
    bbc4:	100b883a 	mov	r5,r2
    bbc8:	9009883a 	mov	r4,r18
    bbcc:	d8800515 	stw	r2,20(sp)
    bbd0:	000adf80 	call	adf8 <__mulsi3>
    bbd4:	a809883a 	mov	r4,r21
    bbd8:	a00b883a 	mov	r5,r20
    bbdc:	d8800415 	stw	r2,16(sp)
    bbe0:	000ada00 	call	ada0 <__umodsi3>
    bbe4:	1004943a 	slli	r2,r2,16
    bbe8:	8008d43a 	srli	r4,r16,16
    bbec:	da000417 	ldw	r8,16(sp)
    bbf0:	d8c00217 	ldw	r3,8(sp)
    bbf4:	2084b03a 	or	r2,r4,r2
    bbf8:	d9c00517 	ldw	r7,20(sp)
    bbfc:	1200062e 	bgeu	r2,r8,bc18 <__divdf3+0x54c>
    bc00:	1585883a 	add	r2,r2,r22
    bc04:	393fffc4 	addi	r4,r7,-1
    bc08:	1580c536 	bltu	r2,r22,bf20 <__divdf3+0x854>
    bc0c:	1200c42e 	bgeu	r2,r8,bf20 <__divdf3+0x854>
    bc10:	39ffff84 	addi	r7,r7,-2
    bc14:	1585883a 	add	r2,r2,r22
    bc18:	122bc83a 	sub	r21,r2,r8
    bc1c:	a00b883a 	mov	r5,r20
    bc20:	a809883a 	mov	r4,r21
    bc24:	d8c00215 	stw	r3,8(sp)
    bc28:	d9c00515 	stw	r7,20(sp)
    bc2c:	000ad3c0 	call	ad3c <__udivsi3>
    bc30:	9009883a 	mov	r4,r18
    bc34:	100b883a 	mov	r5,r2
    bc38:	d8800415 	stw	r2,16(sp)
    bc3c:	000adf80 	call	adf8 <__mulsi3>
    bc40:	a809883a 	mov	r4,r21
    bc44:	a00b883a 	mov	r5,r20
    bc48:	1025883a 	mov	r18,r2
    bc4c:	000ada00 	call	ada0 <__umodsi3>
    bc50:	1004943a 	slli	r2,r2,16
    bc54:	813fffcc 	andi	r4,r16,65535
    bc58:	d8c00217 	ldw	r3,8(sp)
    bc5c:	20a0b03a 	or	r16,r4,r2
    bc60:	d9c00517 	ldw	r7,20(sp)
    bc64:	da000417 	ldw	r8,16(sp)
    bc68:	8480062e 	bgeu	r16,r18,bc84 <__divdf3+0x5b8>
    bc6c:	85a1883a 	add	r16,r16,r22
    bc70:	40bfffc4 	addi	r2,r8,-1
    bc74:	8580ac36 	bltu	r16,r22,bf28 <__divdf3+0x85c>
    bc78:	8480ab2e 	bgeu	r16,r18,bf28 <__divdf3+0x85c>
    bc7c:	423fff84 	addi	r8,r8,-2
    bc80:	85a1883a 	add	r16,r16,r22
    bc84:	3804943a 	slli	r2,r7,16
    bc88:	84a1c83a 	sub	r16,r16,r18
    bc8c:	e009883a 	mov	r4,fp
    bc90:	1228b03a 	or	r20,r2,r8
    bc94:	a1ffffcc 	andi	r7,r20,65535
    bc98:	a024d43a 	srli	r18,r20,16
    bc9c:	380b883a 	mov	r5,r7
    bca0:	d8c00215 	stw	r3,8(sp)
    bca4:	d9c00515 	stw	r7,20(sp)
    bca8:	000adf80 	call	adf8 <__mulsi3>
    bcac:	900b883a 	mov	r5,r18
    bcb0:	e009883a 	mov	r4,fp
    bcb4:	102b883a 	mov	r21,r2
    bcb8:	000adf80 	call	adf8 <__mulsi3>
    bcbc:	900b883a 	mov	r5,r18
    bcc0:	b809883a 	mov	r4,r23
    bcc4:	1039883a 	mov	fp,r2
    bcc8:	000adf80 	call	adf8 <__mulsi3>
    bccc:	d9c00517 	ldw	r7,20(sp)
    bcd0:	b80b883a 	mov	r5,r23
    bcd4:	1025883a 	mov	r18,r2
    bcd8:	3809883a 	mov	r4,r7
    bcdc:	000adf80 	call	adf8 <__mulsi3>
    bce0:	a808d43a 	srli	r4,r21,16
    bce4:	1705883a 	add	r2,r2,fp
    bce8:	d8c00217 	ldw	r3,8(sp)
    bcec:	2085883a 	add	r2,r4,r2
    bcf0:	1700022e 	bgeu	r2,fp,bcfc <__divdf3+0x630>
    bcf4:	01000074 	movhi	r4,1
    bcf8:	9125883a 	add	r18,r18,r4
    bcfc:	1008d43a 	srli	r4,r2,16
    bd00:	1004943a 	slli	r2,r2,16
    bd04:	ad7fffcc 	andi	r21,r21,65535
    bd08:	2489883a 	add	r4,r4,r18
    bd0c:	1545883a 	add	r2,r2,r21
    bd10:	81003836 	bltu	r16,r4,bdf4 <__divdf3+0x728>
    bd14:	81003626 	beq	r16,r4,bdf0 <__divdf3+0x724>
    bd18:	a5000054 	ori	r20,r20,1
    bd1c:	1880ffc4 	addi	r2,r3,1023
    bd20:	00bf2e0e 	bge	zero,r2,b9dc <__alt_data_end+0xfffc25fc>
    bd24:	a10001cc 	andi	r4,r20,7
    bd28:	20000726 	beq	r4,zero,bd48 <__divdf3+0x67c>
    bd2c:	a10003cc 	andi	r4,r20,15
    bd30:	01400104 	movi	r5,4
    bd34:	21400426 	beq	r4,r5,bd48 <__divdf3+0x67c>
    bd38:	a149883a 	add	r4,r20,r5
    bd3c:	2529803a 	cmpltu	r20,r4,r20
    bd40:	8d23883a 	add	r17,r17,r20
    bd44:	2029883a 	mov	r20,r4
    bd48:	8900402c 	andhi	r4,r17,256
    bd4c:	20000426 	beq	r4,zero,bd60 <__divdf3+0x694>
    bd50:	18810004 	addi	r2,r3,1024
    bd54:	00ffc034 	movhi	r3,65280
    bd58:	18ffffc4 	addi	r3,r3,-1
    bd5c:	88e2703a 	and	r17,r17,r3
    bd60:	00c1ff84 	movi	r3,2046
    bd64:	18beb416 	blt	r3,r2,b838 <__alt_data_end+0xfffc2458>
    bd68:	a028d0fa 	srli	r20,r20,3
    bd6c:	882a977a 	slli	r21,r17,29
    bd70:	8820927a 	slli	r16,r17,9
    bd74:	1081ffcc 	andi	r2,r2,2047
    bd78:	ad2ab03a 	or	r21,r21,r20
    bd7c:	8020d33a 	srli	r16,r16,12
    bd80:	9900004c 	andi	r4,r19,1
    bd84:	003eb006 	br	b848 <__alt_data_end+0xfffc2468>
    bd88:	8080022c 	andhi	r2,r16,8
    bd8c:	10001226 	beq	r2,zero,bdd8 <__divdf3+0x70c>
    bd90:	8880022c 	andhi	r2,r17,8
    bd94:	1000101e 	bne	r2,zero,bdd8 <__divdf3+0x70c>
    bd98:	00800434 	movhi	r2,16
    bd9c:	8c000234 	orhi	r16,r17,8
    bda0:	10bfffc4 	addi	r2,r2,-1
    bda4:	b809883a 	mov	r4,r23
    bda8:	80a0703a 	and	r16,r16,r2
    bdac:	a02b883a 	mov	r21,r20
    bdb0:	003f0806 	br	b9d4 <__alt_data_end+0xfffc25f4>
    bdb4:	008000c4 	movi	r2,3
    bdb8:	3880b126 	beq	r7,r2,c080 <__divdf3+0x9b4>
    bdbc:	00800044 	movi	r2,1
    bdc0:	38805b1e 	bne	r7,r2,bf30 <__divdf3+0x864>
    bdc4:	e009883a 	mov	r4,fp
    bdc8:	0005883a 	mov	r2,zero
    bdcc:	0021883a 	mov	r16,zero
    bdd0:	002b883a 	mov	r21,zero
    bdd4:	003e9c06 	br	b848 <__alt_data_end+0xfffc2468>
    bdd8:	00800434 	movhi	r2,16
    bddc:	84000234 	orhi	r16,r16,8
    bde0:	10bfffc4 	addi	r2,r2,-1
    bde4:	b009883a 	mov	r4,r22
    bde8:	80a0703a 	and	r16,r16,r2
    bdec:	003ef906 	br	b9d4 <__alt_data_end+0xfffc25f4>
    bdf0:	103fca26 	beq	r2,zero,bd1c <__alt_data_end+0xfffc293c>
    bdf4:	b421883a 	add	r16,r22,r16
    bdf8:	a17fffc4 	addi	r5,r20,-1
    bdfc:	8580422e 	bgeu	r16,r22,bf08 <__divdf3+0x83c>
    be00:	2829883a 	mov	r20,r5
    be04:	813fc41e 	bne	r16,r4,bd18 <__alt_data_end+0xfffc2938>
    be08:	d9800017 	ldw	r6,0(sp)
    be0c:	30bfc21e 	bne	r6,r2,bd18 <__alt_data_end+0xfffc2938>
    be10:	003fc206 	br	bd1c <__alt_data_end+0xfffc293c>
    be14:	143ff604 	addi	r16,r2,-40
    be18:	8c20983a 	sll	r16,r17,r16
    be1c:	002b883a 	mov	r21,zero
    be20:	003eb406 	br	b8f4 <__alt_data_end+0xfffc2514>
    be24:	d9800215 	stw	r6,8(sp)
    be28:	d9c00515 	stw	r7,20(sp)
    be2c:	da000415 	stw	r8,16(sp)
    be30:	000d6600 	call	d660 <__clzsi2>
    be34:	10800804 	addi	r2,r2,32
    be38:	da000417 	ldw	r8,16(sp)
    be3c:	d9c00517 	ldw	r7,20(sp)
    be40:	d9800217 	ldw	r6,8(sp)
    be44:	003ea106 	br	b8cc <__alt_data_end+0xfffc24ec>
    be48:	147ff604 	addi	r17,r2,-40
    be4c:	3462983a 	sll	r17,r6,r17
    be50:	0029883a 	mov	r20,zero
    be54:	003ec906 	br	b97c <__alt_data_end+0xfffc259c>
    be58:	3009883a 	mov	r4,r6
    be5c:	d9400115 	stw	r5,4(sp)
    be60:	d9800215 	stw	r6,8(sp)
    be64:	da000415 	stw	r8,16(sp)
    be68:	da400315 	stw	r9,12(sp)
    be6c:	000d6600 	call	d660 <__clzsi2>
    be70:	10800804 	addi	r2,r2,32
    be74:	da400317 	ldw	r9,12(sp)
    be78:	da000417 	ldw	r8,16(sp)
    be7c:	d9800217 	ldw	r6,8(sp)
    be80:	d9400117 	ldw	r5,4(sp)
    be84:	003eb306 	br	b954 <__alt_data_end+0xfffc2574>
    be88:	d9800017 	ldw	r6,0(sp)
    be8c:	a9ab883a 	add	r21,r21,r6
    be90:	a98b803a 	cmpltu	r5,r21,r6
    be94:	2d8b883a 	add	r5,r5,r22
    be98:	2a11883a 	add	r8,r5,r8
    be9c:	897fffc4 	addi	r5,r17,-1
    bea0:	b2000c2e 	bgeu	r22,r8,bed4 <__divdf3+0x808>
    bea4:	41003f36 	bltu	r8,r4,bfa4 <__divdf3+0x8d8>
    bea8:	22006c26 	beq	r4,r8,c05c <__divdf3+0x990>
    beac:	4109c83a 	sub	r4,r8,r4
    beb0:	2823883a 	mov	r17,r5
    beb4:	003f3b06 	br	bba4 <__alt_data_end+0xfffc27c4>
    beb8:	ad3ed336 	bltu	r21,r20,ba08 <__alt_data_end+0xfffc2628>
    bebc:	a804d07a 	srli	r2,r21,1
    bec0:	802e97fa 	slli	r23,r16,31
    bec4:	a82a97fa 	slli	r21,r21,31
    bec8:	8020d07a 	srli	r16,r16,1
    becc:	b8aeb03a 	or	r23,r23,r2
    bed0:	003ed006 	br	ba14 <__alt_data_end+0xfffc2634>
    bed4:	b23ff51e 	bne	r22,r8,beac <__alt_data_end+0xfffc2acc>
    bed8:	d9800017 	ldw	r6,0(sp)
    bedc:	a9bff12e 	bgeu	r21,r6,bea4 <__alt_data_end+0xfffc2ac4>
    bee0:	b109c83a 	sub	r4,r22,r4
    bee4:	2823883a 	mov	r17,r5
    bee8:	003f2e06 	br	bba4 <__alt_data_end+0xfffc27c4>
    beec:	2021883a 	mov	r16,r4
    bef0:	003eff06 	br	baf0 <__alt_data_end+0xfffc2710>
    bef4:	2023883a 	mov	r17,r4
    bef8:	003ee406 	br	ba8c <__alt_data_end+0xfffc26ac>
    befc:	a8bfe236 	bltu	r21,r2,be88 <__alt_data_end+0xfffc2aa8>
    bf00:	0009883a 	mov	r4,zero
    bf04:	003f2706 	br	bba4 <__alt_data_end+0xfffc27c4>
    bf08:	81002d36 	bltu	r16,r4,bfc0 <__divdf3+0x8f4>
    bf0c:	24005626 	beq	r4,r16,c068 <__divdf3+0x99c>
    bf10:	2829883a 	mov	r20,r5
    bf14:	003f8006 	br	bd18 <__alt_data_end+0xfffc2938>
    bf18:	053fffc4 	movi	r20,-1
    bf1c:	003f7f06 	br	bd1c <__alt_data_end+0xfffc293c>
    bf20:	200f883a 	mov	r7,r4
    bf24:	003f3c06 	br	bc18 <__alt_data_end+0xfffc2838>
    bf28:	1011883a 	mov	r8,r2
    bf2c:	003f5506 	br	bc84 <__alt_data_end+0xfffc28a4>
    bf30:	e027883a 	mov	r19,fp
    bf34:	003f7906 	br	bd1c <__alt_data_end+0xfffc293c>
    bf38:	010007c4 	movi	r4,31
    bf3c:	20c02816 	blt	r4,r3,bfe0 <__divdf3+0x914>
    bf40:	00800804 	movi	r2,32
    bf44:	10c5c83a 	sub	r2,r2,r3
    bf48:	888a983a 	sll	r5,r17,r2
    bf4c:	a0c8d83a 	srl	r4,r20,r3
    bf50:	a084983a 	sll	r2,r20,r2
    bf54:	88e2d83a 	srl	r17,r17,r3
    bf58:	2906b03a 	or	r3,r5,r4
    bf5c:	1004c03a 	cmpne	r2,r2,zero
    bf60:	1886b03a 	or	r3,r3,r2
    bf64:	188001cc 	andi	r2,r3,7
    bf68:	10000726 	beq	r2,zero,bf88 <__divdf3+0x8bc>
    bf6c:	188003cc 	andi	r2,r3,15
    bf70:	01000104 	movi	r4,4
    bf74:	11000426 	beq	r2,r4,bf88 <__divdf3+0x8bc>
    bf78:	1805883a 	mov	r2,r3
    bf7c:	10c00104 	addi	r3,r2,4
    bf80:	1885803a 	cmpltu	r2,r3,r2
    bf84:	88a3883a 	add	r17,r17,r2
    bf88:	8880202c 	andhi	r2,r17,128
    bf8c:	10002926 	beq	r2,zero,c034 <__divdf3+0x968>
    bf90:	9900004c 	andi	r4,r19,1
    bf94:	00800044 	movi	r2,1
    bf98:	0021883a 	mov	r16,zero
    bf9c:	002b883a 	mov	r21,zero
    bfa0:	003e2906 	br	b848 <__alt_data_end+0xfffc2468>
    bfa4:	d9800017 	ldw	r6,0(sp)
    bfa8:	8c7fff84 	addi	r17,r17,-2
    bfac:	a9ab883a 	add	r21,r21,r6
    bfb0:	a98b803a 	cmpltu	r5,r21,r6
    bfb4:	2d8b883a 	add	r5,r5,r22
    bfb8:	2a11883a 	add	r8,r5,r8
    bfbc:	003ef806 	br	bba0 <__alt_data_end+0xfffc27c0>
    bfc0:	d9800017 	ldw	r6,0(sp)
    bfc4:	318f883a 	add	r7,r6,r6
    bfc8:	398b803a 	cmpltu	r5,r7,r6
    bfcc:	2d8d883a 	add	r6,r5,r22
    bfd0:	81a1883a 	add	r16,r16,r6
    bfd4:	a17fff84 	addi	r5,r20,-2
    bfd8:	d9c00015 	stw	r7,0(sp)
    bfdc:	003f8806 	br	be00 <__alt_data_end+0xfffc2a20>
    bfe0:	013ff844 	movi	r4,-31
    bfe4:	2085c83a 	sub	r2,r4,r2
    bfe8:	8888d83a 	srl	r4,r17,r2
    bfec:	00800804 	movi	r2,32
    bff0:	18802126 	beq	r3,r2,c078 <__divdf3+0x9ac>
    bff4:	04001004 	movi	r16,64
    bff8:	80c7c83a 	sub	r3,r16,r3
    bffc:	88e0983a 	sll	r16,r17,r3
    c000:	8504b03a 	or	r2,r16,r20
    c004:	1004c03a 	cmpne	r2,r2,zero
    c008:	2084b03a 	or	r2,r4,r2
    c00c:	144001cc 	andi	r17,r2,7
    c010:	88000d1e 	bne	r17,zero,c048 <__divdf3+0x97c>
    c014:	0021883a 	mov	r16,zero
    c018:	102ad0fa 	srli	r21,r2,3
    c01c:	9900004c 	andi	r4,r19,1
    c020:	0005883a 	mov	r2,zero
    c024:	ac6ab03a 	or	r21,r21,r17
    c028:	003e0706 	br	b848 <__alt_data_end+0xfffc2468>
    c02c:	1007883a 	mov	r3,r2
    c030:	0023883a 	mov	r17,zero
    c034:	8820927a 	slli	r16,r17,9
    c038:	1805883a 	mov	r2,r3
    c03c:	8822977a 	slli	r17,r17,29
    c040:	8020d33a 	srli	r16,r16,12
    c044:	003ff406 	br	c018 <__alt_data_end+0xfffc2c38>
    c048:	10c003cc 	andi	r3,r2,15
    c04c:	01000104 	movi	r4,4
    c050:	193ff626 	beq	r3,r4,c02c <__alt_data_end+0xfffc2c4c>
    c054:	0023883a 	mov	r17,zero
    c058:	003fc806 	br	bf7c <__alt_data_end+0xfffc2b9c>
    c05c:	a8bfd136 	bltu	r21,r2,bfa4 <__alt_data_end+0xfffc2bc4>
    c060:	2823883a 	mov	r17,r5
    c064:	003fa606 	br	bf00 <__alt_data_end+0xfffc2b20>
    c068:	d9800017 	ldw	r6,0(sp)
    c06c:	30bfd436 	bltu	r6,r2,bfc0 <__alt_data_end+0xfffc2be0>
    c070:	2829883a 	mov	r20,r5
    c074:	003f6406 	br	be08 <__alt_data_end+0xfffc2a28>
    c078:	0021883a 	mov	r16,zero
    c07c:	003fe006 	br	c000 <__alt_data_end+0xfffc2c20>
    c080:	00800434 	movhi	r2,16
    c084:	8c000234 	orhi	r16,r17,8
    c088:	10bfffc4 	addi	r2,r2,-1
    c08c:	e009883a 	mov	r4,fp
    c090:	80a0703a 	and	r16,r16,r2
    c094:	a02b883a 	mov	r21,r20
    c098:	003e4e06 	br	b9d4 <__alt_data_end+0xfffc25f4>

0000c09c <__eqdf2>:
    c09c:	2804d53a 	srli	r2,r5,20
    c0a0:	3806d53a 	srli	r3,r7,20
    c0a4:	02000434 	movhi	r8,16
    c0a8:	423fffc4 	addi	r8,r8,-1
    c0ac:	1081ffcc 	andi	r2,r2,2047
    c0b0:	0281ffc4 	movi	r10,2047
    c0b4:	2a12703a 	and	r9,r5,r8
    c0b8:	18c1ffcc 	andi	r3,r3,2047
    c0bc:	3a10703a 	and	r8,r7,r8
    c0c0:	280ad7fa 	srli	r5,r5,31
    c0c4:	380ed7fa 	srli	r7,r7,31
    c0c8:	12801026 	beq	r2,r10,c10c <__eqdf2+0x70>
    c0cc:	0281ffc4 	movi	r10,2047
    c0d0:	1a800a26 	beq	r3,r10,c0fc <__eqdf2+0x60>
    c0d4:	10c00226 	beq	r2,r3,c0e0 <__eqdf2+0x44>
    c0d8:	00800044 	movi	r2,1
    c0dc:	f800283a 	ret
    c0e0:	4a3ffd1e 	bne	r9,r8,c0d8 <__alt_data_end+0xfffc2cf8>
    c0e4:	21bffc1e 	bne	r4,r6,c0d8 <__alt_data_end+0xfffc2cf8>
    c0e8:	29c00c26 	beq	r5,r7,c11c <__eqdf2+0x80>
    c0ec:	103ffa1e 	bne	r2,zero,c0d8 <__alt_data_end+0xfffc2cf8>
    c0f0:	2244b03a 	or	r2,r4,r9
    c0f4:	1004c03a 	cmpne	r2,r2,zero
    c0f8:	f800283a 	ret
    c0fc:	3214b03a 	or	r10,r6,r8
    c100:	503ff426 	beq	r10,zero,c0d4 <__alt_data_end+0xfffc2cf4>
    c104:	00800044 	movi	r2,1
    c108:	f800283a 	ret
    c10c:	2254b03a 	or	r10,r4,r9
    c110:	503fee26 	beq	r10,zero,c0cc <__alt_data_end+0xfffc2cec>
    c114:	00800044 	movi	r2,1
    c118:	f800283a 	ret
    c11c:	0005883a 	mov	r2,zero
    c120:	f800283a 	ret

0000c124 <__gedf2>:
    c124:	2804d53a 	srli	r2,r5,20
    c128:	3806d53a 	srli	r3,r7,20
    c12c:	02000434 	movhi	r8,16
    c130:	423fffc4 	addi	r8,r8,-1
    c134:	1081ffcc 	andi	r2,r2,2047
    c138:	0241ffc4 	movi	r9,2047
    c13c:	2a14703a 	and	r10,r5,r8
    c140:	18c1ffcc 	andi	r3,r3,2047
    c144:	3a10703a 	and	r8,r7,r8
    c148:	280ad7fa 	srli	r5,r5,31
    c14c:	380ed7fa 	srli	r7,r7,31
    c150:	12401d26 	beq	r2,r9,c1c8 <__gedf2+0xa4>
    c154:	0241ffc4 	movi	r9,2047
    c158:	1a401226 	beq	r3,r9,c1a4 <__gedf2+0x80>
    c15c:	1000081e 	bne	r2,zero,c180 <__gedf2+0x5c>
    c160:	2296b03a 	or	r11,r4,r10
    c164:	5813003a 	cmpeq	r9,r11,zero
    c168:	1800091e 	bne	r3,zero,c190 <__gedf2+0x6c>
    c16c:	3218b03a 	or	r12,r6,r8
    c170:	6000071e 	bne	r12,zero,c190 <__gedf2+0x6c>
    c174:	0005883a 	mov	r2,zero
    c178:	5800101e 	bne	r11,zero,c1bc <__gedf2+0x98>
    c17c:	f800283a 	ret
    c180:	18000c1e 	bne	r3,zero,c1b4 <__gedf2+0x90>
    c184:	3212b03a 	or	r9,r6,r8
    c188:	48000c26 	beq	r9,zero,c1bc <__gedf2+0x98>
    c18c:	0013883a 	mov	r9,zero
    c190:	39c03fcc 	andi	r7,r7,255
    c194:	48000826 	beq	r9,zero,c1b8 <__gedf2+0x94>
    c198:	38000926 	beq	r7,zero,c1c0 <__gedf2+0x9c>
    c19c:	00800044 	movi	r2,1
    c1a0:	f800283a 	ret
    c1a4:	3212b03a 	or	r9,r6,r8
    c1a8:	483fec26 	beq	r9,zero,c15c <__alt_data_end+0xfffc2d7c>
    c1ac:	00bfff84 	movi	r2,-2
    c1b0:	f800283a 	ret
    c1b4:	39c03fcc 	andi	r7,r7,255
    c1b8:	29c00626 	beq	r5,r7,c1d4 <__gedf2+0xb0>
    c1bc:	283ff726 	beq	r5,zero,c19c <__alt_data_end+0xfffc2dbc>
    c1c0:	00bfffc4 	movi	r2,-1
    c1c4:	f800283a 	ret
    c1c8:	2292b03a 	or	r9,r4,r10
    c1cc:	483fe126 	beq	r9,zero,c154 <__alt_data_end+0xfffc2d74>
    c1d0:	003ff606 	br	c1ac <__alt_data_end+0xfffc2dcc>
    c1d4:	18bff916 	blt	r3,r2,c1bc <__alt_data_end+0xfffc2ddc>
    c1d8:	10c00316 	blt	r2,r3,c1e8 <__gedf2+0xc4>
    c1dc:	42bff736 	bltu	r8,r10,c1bc <__alt_data_end+0xfffc2ddc>
    c1e0:	52000326 	beq	r10,r8,c1f0 <__gedf2+0xcc>
    c1e4:	5200042e 	bgeu	r10,r8,c1f8 <__gedf2+0xd4>
    c1e8:	283fec1e 	bne	r5,zero,c19c <__alt_data_end+0xfffc2dbc>
    c1ec:	003ff406 	br	c1c0 <__alt_data_end+0xfffc2de0>
    c1f0:	313ff236 	bltu	r6,r4,c1bc <__alt_data_end+0xfffc2ddc>
    c1f4:	21bffc36 	bltu	r4,r6,c1e8 <__alt_data_end+0xfffc2e08>
    c1f8:	0005883a 	mov	r2,zero
    c1fc:	f800283a 	ret

0000c200 <__ledf2>:
    c200:	2804d53a 	srli	r2,r5,20
    c204:	3810d53a 	srli	r8,r7,20
    c208:	00c00434 	movhi	r3,16
    c20c:	18ffffc4 	addi	r3,r3,-1
    c210:	1081ffcc 	andi	r2,r2,2047
    c214:	0241ffc4 	movi	r9,2047
    c218:	28d4703a 	and	r10,r5,r3
    c21c:	4201ffcc 	andi	r8,r8,2047
    c220:	38c6703a 	and	r3,r7,r3
    c224:	280ad7fa 	srli	r5,r5,31
    c228:	380ed7fa 	srli	r7,r7,31
    c22c:	12401f26 	beq	r2,r9,c2ac <__ledf2+0xac>
    c230:	0241ffc4 	movi	r9,2047
    c234:	42401426 	beq	r8,r9,c288 <__ledf2+0x88>
    c238:	1000091e 	bne	r2,zero,c260 <__ledf2+0x60>
    c23c:	2296b03a 	or	r11,r4,r10
    c240:	5813003a 	cmpeq	r9,r11,zero
    c244:	29403fcc 	andi	r5,r5,255
    c248:	40000a1e 	bne	r8,zero,c274 <__ledf2+0x74>
    c24c:	30d8b03a 	or	r12,r6,r3
    c250:	6000081e 	bne	r12,zero,c274 <__ledf2+0x74>
    c254:	0005883a 	mov	r2,zero
    c258:	5800111e 	bne	r11,zero,c2a0 <__ledf2+0xa0>
    c25c:	f800283a 	ret
    c260:	29403fcc 	andi	r5,r5,255
    c264:	40000c1e 	bne	r8,zero,c298 <__ledf2+0x98>
    c268:	30d2b03a 	or	r9,r6,r3
    c26c:	48000c26 	beq	r9,zero,c2a0 <__ledf2+0xa0>
    c270:	0013883a 	mov	r9,zero
    c274:	39c03fcc 	andi	r7,r7,255
    c278:	48000826 	beq	r9,zero,c29c <__ledf2+0x9c>
    c27c:	38001126 	beq	r7,zero,c2c4 <__ledf2+0xc4>
    c280:	00800044 	movi	r2,1
    c284:	f800283a 	ret
    c288:	30d2b03a 	or	r9,r6,r3
    c28c:	483fea26 	beq	r9,zero,c238 <__alt_data_end+0xfffc2e58>
    c290:	00800084 	movi	r2,2
    c294:	f800283a 	ret
    c298:	39c03fcc 	andi	r7,r7,255
    c29c:	39400726 	beq	r7,r5,c2bc <__ledf2+0xbc>
    c2a0:	2800081e 	bne	r5,zero,c2c4 <__ledf2+0xc4>
    c2a4:	00800044 	movi	r2,1
    c2a8:	f800283a 	ret
    c2ac:	2292b03a 	or	r9,r4,r10
    c2b0:	483fdf26 	beq	r9,zero,c230 <__alt_data_end+0xfffc2e50>
    c2b4:	00800084 	movi	r2,2
    c2b8:	f800283a 	ret
    c2bc:	4080030e 	bge	r8,r2,c2cc <__ledf2+0xcc>
    c2c0:	383fef26 	beq	r7,zero,c280 <__alt_data_end+0xfffc2ea0>
    c2c4:	00bfffc4 	movi	r2,-1
    c2c8:	f800283a 	ret
    c2cc:	123feb16 	blt	r2,r8,c27c <__alt_data_end+0xfffc2e9c>
    c2d0:	1abff336 	bltu	r3,r10,c2a0 <__alt_data_end+0xfffc2ec0>
    c2d4:	50c00326 	beq	r10,r3,c2e4 <__ledf2+0xe4>
    c2d8:	50c0042e 	bgeu	r10,r3,c2ec <__ledf2+0xec>
    c2dc:	283fe81e 	bne	r5,zero,c280 <__alt_data_end+0xfffc2ea0>
    c2e0:	003ff806 	br	c2c4 <__alt_data_end+0xfffc2ee4>
    c2e4:	313fee36 	bltu	r6,r4,c2a0 <__alt_data_end+0xfffc2ec0>
    c2e8:	21bffc36 	bltu	r4,r6,c2dc <__alt_data_end+0xfffc2efc>
    c2ec:	0005883a 	mov	r2,zero
    c2f0:	f800283a 	ret

0000c2f4 <__muldf3>:
    c2f4:	deffee04 	addi	sp,sp,-72
    c2f8:	dd000c15 	stw	r20,48(sp)
    c2fc:	2828d53a 	srli	r20,r5,20
    c300:	ddc00f15 	stw	r23,60(sp)
    c304:	282ed7fa 	srli	r23,r5,31
    c308:	dc000815 	stw	r16,32(sp)
    c30c:	04000434 	movhi	r16,16
    c310:	dcc00b15 	stw	r19,44(sp)
    c314:	843fffc4 	addi	r16,r16,-1
    c318:	dfc01115 	stw	ra,68(sp)
    c31c:	df001015 	stw	fp,64(sp)
    c320:	dd800e15 	stw	r22,56(sp)
    c324:	dd400d15 	stw	r21,52(sp)
    c328:	dc800a15 	stw	r18,40(sp)
    c32c:	dc400915 	stw	r17,36(sp)
    c330:	a501ffcc 	andi	r20,r20,2047
    c334:	2c20703a 	and	r16,r5,r16
    c338:	b827883a 	mov	r19,r23
    c33c:	ba403fcc 	andi	r9,r23,255
    c340:	a0006026 	beq	r20,zero,c4c4 <__muldf3+0x1d0>
    c344:	0081ffc4 	movi	r2,2047
    c348:	202d883a 	mov	r22,r4
    c34c:	a0803626 	beq	r20,r2,c428 <__muldf3+0x134>
    c350:	84000434 	orhi	r16,r16,16
    c354:	200ad77a 	srli	r5,r4,29
    c358:	800490fa 	slli	r2,r16,3
    c35c:	202c90fa 	slli	r22,r4,3
    c360:	a53f0044 	addi	r20,r20,-1023
    c364:	28a0b03a 	or	r16,r5,r2
    c368:	002b883a 	mov	r21,zero
    c36c:	000b883a 	mov	r5,zero
    c370:	3804d53a 	srli	r2,r7,20
    c374:	3838d7fa 	srli	fp,r7,31
    c378:	04400434 	movhi	r17,16
    c37c:	8c7fffc4 	addi	r17,r17,-1
    c380:	1081ffcc 	andi	r2,r2,2047
    c384:	3025883a 	mov	r18,r6
    c388:	3c62703a 	and	r17,r7,r17
    c38c:	e2803fcc 	andi	r10,fp,255
    c390:	10006d26 	beq	r2,zero,c548 <__muldf3+0x254>
    c394:	00c1ffc4 	movi	r3,2047
    c398:	10c06526 	beq	r2,r3,c530 <__muldf3+0x23c>
    c39c:	8c400434 	orhi	r17,r17,16
    c3a0:	300ed77a 	srli	r7,r6,29
    c3a4:	880690fa 	slli	r3,r17,3
    c3a8:	302490fa 	slli	r18,r6,3
    c3ac:	10bf0044 	addi	r2,r2,-1023
    c3b0:	38e2b03a 	or	r17,r7,r3
    c3b4:	000f883a 	mov	r7,zero
    c3b8:	a087883a 	add	r3,r20,r2
    c3bc:	010003c4 	movi	r4,15
    c3c0:	3d44b03a 	or	r2,r7,r21
    c3c4:	e5ccf03a 	xor	r6,fp,r23
    c3c8:	1a000044 	addi	r8,r3,1
    c3cc:	20809b36 	bltu	r4,r2,c63c <__muldf3+0x348>
    c3d0:	100490ba 	slli	r2,r2,2
    c3d4:	01000074 	movhi	r4,1
    c3d8:	2130fa04 	addi	r4,r4,-15384
    c3dc:	1105883a 	add	r2,r2,r4
    c3e0:	10800017 	ldw	r2,0(r2)
    c3e4:	1000683a 	jmp	r2
    c3e8:	0000c63c 	xorhi	zero,zero,792
    c3ec:	0000c448 	cmpgei	zero,zero,785
    c3f0:	0000c448 	cmpgei	zero,zero,785
    c3f4:	0000c444 	movi	zero,785
    c3f8:	0000c618 	cmpnei	zero,zero,792
    c3fc:	0000c618 	cmpnei	zero,zero,792
    c400:	0000c600 	call	c60 <___vfprintf_internal_r+0x46c>
    c404:	0000c444 	movi	zero,785
    c408:	0000c618 	cmpnei	zero,zero,792
    c40c:	0000c600 	call	c60 <___vfprintf_internal_r+0x46c>
    c410:	0000c618 	cmpnei	zero,zero,792
    c414:	0000c444 	movi	zero,785
    c418:	0000c628 	cmpgeui	zero,zero,792
    c41c:	0000c628 	cmpgeui	zero,zero,792
    c420:	0000c628 	cmpgeui	zero,zero,792
    c424:	0000c988 	cmpgei	zero,zero,806
    c428:	2404b03a 	or	r2,r4,r16
    c42c:	1000711e 	bne	r2,zero,c5f4 <__muldf3+0x300>
    c430:	05400204 	movi	r21,8
    c434:	0021883a 	mov	r16,zero
    c438:	002d883a 	mov	r22,zero
    c43c:	01400084 	movi	r5,2
    c440:	003fcb06 	br	c370 <__alt_data_end+0xfffc2f90>
    c444:	500d883a 	mov	r6,r10
    c448:	00800084 	movi	r2,2
    c44c:	38805926 	beq	r7,r2,c5b4 <__muldf3+0x2c0>
    c450:	008000c4 	movi	r2,3
    c454:	3881bb26 	beq	r7,r2,cb44 <__muldf3+0x850>
    c458:	00800044 	movi	r2,1
    c45c:	3881961e 	bne	r7,r2,cab8 <__muldf3+0x7c4>
    c460:	3027883a 	mov	r19,r6
    c464:	0005883a 	mov	r2,zero
    c468:	0021883a 	mov	r16,zero
    c46c:	002d883a 	mov	r22,zero
    c470:	1004953a 	slli	r2,r2,20
    c474:	98c03fcc 	andi	r3,r19,255
    c478:	04400434 	movhi	r17,16
    c47c:	8c7fffc4 	addi	r17,r17,-1
    c480:	180697fa 	slli	r3,r3,31
    c484:	8460703a 	and	r16,r16,r17
    c488:	80a0b03a 	or	r16,r16,r2
    c48c:	80c6b03a 	or	r3,r16,r3
    c490:	b005883a 	mov	r2,r22
    c494:	dfc01117 	ldw	ra,68(sp)
    c498:	df001017 	ldw	fp,64(sp)
    c49c:	ddc00f17 	ldw	r23,60(sp)
    c4a0:	dd800e17 	ldw	r22,56(sp)
    c4a4:	dd400d17 	ldw	r21,52(sp)
    c4a8:	dd000c17 	ldw	r20,48(sp)
    c4ac:	dcc00b17 	ldw	r19,44(sp)
    c4b0:	dc800a17 	ldw	r18,40(sp)
    c4b4:	dc400917 	ldw	r17,36(sp)
    c4b8:	dc000817 	ldw	r16,32(sp)
    c4bc:	dec01204 	addi	sp,sp,72
    c4c0:	f800283a 	ret
    c4c4:	2404b03a 	or	r2,r4,r16
    c4c8:	202b883a 	mov	r21,r4
    c4cc:	10004426 	beq	r2,zero,c5e0 <__muldf3+0x2ec>
    c4d0:	80015126 	beq	r16,zero,ca18 <__muldf3+0x724>
    c4d4:	8009883a 	mov	r4,r16
    c4d8:	d9800715 	stw	r6,28(sp)
    c4dc:	d9c00215 	stw	r7,8(sp)
    c4e0:	da400415 	stw	r9,16(sp)
    c4e4:	000d6600 	call	d660 <__clzsi2>
    c4e8:	d9800717 	ldw	r6,28(sp)
    c4ec:	d9c00217 	ldw	r7,8(sp)
    c4f0:	da400417 	ldw	r9,16(sp)
    c4f4:	113ffd44 	addi	r4,r2,-11
    c4f8:	00c00704 	movi	r3,28
    c4fc:	19014216 	blt	r3,r4,ca08 <__muldf3+0x714>
    c500:	00c00744 	movi	r3,29
    c504:	15bffe04 	addi	r22,r2,-8
    c508:	1907c83a 	sub	r3,r3,r4
    c50c:	85a0983a 	sll	r16,r16,r22
    c510:	a8c6d83a 	srl	r3,r21,r3
    c514:	adac983a 	sll	r22,r21,r22
    c518:	1c20b03a 	or	r16,r3,r16
    c51c:	1080fcc4 	addi	r2,r2,1011
    c520:	00a9c83a 	sub	r20,zero,r2
    c524:	002b883a 	mov	r21,zero
    c528:	000b883a 	mov	r5,zero
    c52c:	003f9006 	br	c370 <__alt_data_end+0xfffc2f90>
    c530:	3446b03a 	or	r3,r6,r17
    c534:	1800281e 	bne	r3,zero,c5d8 <__muldf3+0x2e4>
    c538:	0023883a 	mov	r17,zero
    c53c:	0025883a 	mov	r18,zero
    c540:	01c00084 	movi	r7,2
    c544:	003f9c06 	br	c3b8 <__alt_data_end+0xfffc2fd8>
    c548:	3446b03a 	or	r3,r6,r17
    c54c:	18001e26 	beq	r3,zero,c5c8 <__muldf3+0x2d4>
    c550:	88012126 	beq	r17,zero,c9d8 <__muldf3+0x6e4>
    c554:	8809883a 	mov	r4,r17
    c558:	d9400215 	stw	r5,8(sp)
    c55c:	d9800715 	stw	r6,28(sp)
    c560:	da400415 	stw	r9,16(sp)
    c564:	da800315 	stw	r10,12(sp)
    c568:	000d6600 	call	d660 <__clzsi2>
    c56c:	d9400217 	ldw	r5,8(sp)
    c570:	d9800717 	ldw	r6,28(sp)
    c574:	da400417 	ldw	r9,16(sp)
    c578:	da800317 	ldw	r10,12(sp)
    c57c:	113ffd44 	addi	r4,r2,-11
    c580:	00c00704 	movi	r3,28
    c584:	19011016 	blt	r3,r4,c9c8 <__muldf3+0x6d4>
    c588:	00c00744 	movi	r3,29
    c58c:	14bffe04 	addi	r18,r2,-8
    c590:	1907c83a 	sub	r3,r3,r4
    c594:	8ca2983a 	sll	r17,r17,r18
    c598:	30c6d83a 	srl	r3,r6,r3
    c59c:	34a4983a 	sll	r18,r6,r18
    c5a0:	1c62b03a 	or	r17,r3,r17
    c5a4:	1080fcc4 	addi	r2,r2,1011
    c5a8:	0085c83a 	sub	r2,zero,r2
    c5ac:	000f883a 	mov	r7,zero
    c5b0:	003f8106 	br	c3b8 <__alt_data_end+0xfffc2fd8>
    c5b4:	3027883a 	mov	r19,r6
    c5b8:	0081ffc4 	movi	r2,2047
    c5bc:	0021883a 	mov	r16,zero
    c5c0:	002d883a 	mov	r22,zero
    c5c4:	003faa06 	br	c470 <__alt_data_end+0xfffc3090>
    c5c8:	0023883a 	mov	r17,zero
    c5cc:	0025883a 	mov	r18,zero
    c5d0:	01c00044 	movi	r7,1
    c5d4:	003f7806 	br	c3b8 <__alt_data_end+0xfffc2fd8>
    c5d8:	01c000c4 	movi	r7,3
    c5dc:	003f7606 	br	c3b8 <__alt_data_end+0xfffc2fd8>
    c5e0:	05400104 	movi	r21,4
    c5e4:	0021883a 	mov	r16,zero
    c5e8:	002d883a 	mov	r22,zero
    c5ec:	01400044 	movi	r5,1
    c5f0:	003f5f06 	br	c370 <__alt_data_end+0xfffc2f90>
    c5f4:	05400304 	movi	r21,12
    c5f8:	014000c4 	movi	r5,3
    c5fc:	003f5c06 	br	c370 <__alt_data_end+0xfffc2f90>
    c600:	04000434 	movhi	r16,16
    c604:	0027883a 	mov	r19,zero
    c608:	843fffc4 	addi	r16,r16,-1
    c60c:	05bfffc4 	movi	r22,-1
    c610:	0081ffc4 	movi	r2,2047
    c614:	003f9606 	br	c470 <__alt_data_end+0xfffc3090>
    c618:	8023883a 	mov	r17,r16
    c61c:	b025883a 	mov	r18,r22
    c620:	280f883a 	mov	r7,r5
    c624:	003f8806 	br	c448 <__alt_data_end+0xfffc3068>
    c628:	8023883a 	mov	r17,r16
    c62c:	b025883a 	mov	r18,r22
    c630:	480d883a 	mov	r6,r9
    c634:	280f883a 	mov	r7,r5
    c638:	003f8306 	br	c448 <__alt_data_end+0xfffc3068>
    c63c:	b026d43a 	srli	r19,r22,16
    c640:	902ed43a 	srli	r23,r18,16
    c644:	b5bfffcc 	andi	r22,r22,65535
    c648:	94bfffcc 	andi	r18,r18,65535
    c64c:	b00b883a 	mov	r5,r22
    c650:	9009883a 	mov	r4,r18
    c654:	d8c00515 	stw	r3,20(sp)
    c658:	d9800715 	stw	r6,28(sp)
    c65c:	da000615 	stw	r8,24(sp)
    c660:	000adf80 	call	adf8 <__mulsi3>
    c664:	980b883a 	mov	r5,r19
    c668:	9009883a 	mov	r4,r18
    c66c:	1029883a 	mov	r20,r2
    c670:	000adf80 	call	adf8 <__mulsi3>
    c674:	b80b883a 	mov	r5,r23
    c678:	9809883a 	mov	r4,r19
    c67c:	102b883a 	mov	r21,r2
    c680:	000adf80 	call	adf8 <__mulsi3>
    c684:	b809883a 	mov	r4,r23
    c688:	b00b883a 	mov	r5,r22
    c68c:	1039883a 	mov	fp,r2
    c690:	000adf80 	call	adf8 <__mulsi3>
    c694:	a008d43a 	srli	r4,r20,16
    c698:	1545883a 	add	r2,r2,r21
    c69c:	d8c00517 	ldw	r3,20(sp)
    c6a0:	2085883a 	add	r2,r4,r2
    c6a4:	d9800717 	ldw	r6,28(sp)
    c6a8:	da000617 	ldw	r8,24(sp)
    c6ac:	1540022e 	bgeu	r2,r21,c6b8 <__muldf3+0x3c4>
    c6b0:	01000074 	movhi	r4,1
    c6b4:	e139883a 	add	fp,fp,r4
    c6b8:	100e943a 	slli	r7,r2,16
    c6bc:	1004d43a 	srli	r2,r2,16
    c6c0:	882ad43a 	srli	r21,r17,16
    c6c4:	a53fffcc 	andi	r20,r20,65535
    c6c8:	8c7fffcc 	andi	r17,r17,65535
    c6cc:	3d29883a 	add	r20,r7,r20
    c6d0:	b00b883a 	mov	r5,r22
    c6d4:	8809883a 	mov	r4,r17
    c6d8:	d8c00515 	stw	r3,20(sp)
    c6dc:	d9800715 	stw	r6,28(sp)
    c6e0:	da000615 	stw	r8,24(sp)
    c6e4:	dd000115 	stw	r20,4(sp)
    c6e8:	d8800015 	stw	r2,0(sp)
    c6ec:	000adf80 	call	adf8 <__mulsi3>
    c6f0:	980b883a 	mov	r5,r19
    c6f4:	8809883a 	mov	r4,r17
    c6f8:	d8800215 	stw	r2,8(sp)
    c6fc:	000adf80 	call	adf8 <__mulsi3>
    c700:	9809883a 	mov	r4,r19
    c704:	a80b883a 	mov	r5,r21
    c708:	1029883a 	mov	r20,r2
    c70c:	000adf80 	call	adf8 <__mulsi3>
    c710:	b00b883a 	mov	r5,r22
    c714:	a809883a 	mov	r4,r21
    c718:	d8800415 	stw	r2,16(sp)
    c71c:	000adf80 	call	adf8 <__mulsi3>
    c720:	d9c00217 	ldw	r7,8(sp)
    c724:	1505883a 	add	r2,r2,r20
    c728:	d8c00517 	ldw	r3,20(sp)
    c72c:	3826d43a 	srli	r19,r7,16
    c730:	d9800717 	ldw	r6,28(sp)
    c734:	da000617 	ldw	r8,24(sp)
    c738:	9885883a 	add	r2,r19,r2
    c73c:	da400417 	ldw	r9,16(sp)
    c740:	1500022e 	bgeu	r2,r20,c74c <__muldf3+0x458>
    c744:	01000074 	movhi	r4,1
    c748:	4913883a 	add	r9,r9,r4
    c74c:	1028d43a 	srli	r20,r2,16
    c750:	1004943a 	slli	r2,r2,16
    c754:	802cd43a 	srli	r22,r16,16
    c758:	843fffcc 	andi	r16,r16,65535
    c75c:	3cffffcc 	andi	r19,r7,65535
    c760:	9009883a 	mov	r4,r18
    c764:	800b883a 	mov	r5,r16
    c768:	a269883a 	add	r20,r20,r9
    c76c:	d8c00515 	stw	r3,20(sp)
    c770:	d9800715 	stw	r6,28(sp)
    c774:	da000615 	stw	r8,24(sp)
    c778:	14e7883a 	add	r19,r2,r19
    c77c:	000adf80 	call	adf8 <__mulsi3>
    c780:	9009883a 	mov	r4,r18
    c784:	b00b883a 	mov	r5,r22
    c788:	d8800315 	stw	r2,12(sp)
    c78c:	000adf80 	call	adf8 <__mulsi3>
    c790:	b809883a 	mov	r4,r23
    c794:	b00b883a 	mov	r5,r22
    c798:	d8800215 	stw	r2,8(sp)
    c79c:	000adf80 	call	adf8 <__mulsi3>
    c7a0:	b80b883a 	mov	r5,r23
    c7a4:	8009883a 	mov	r4,r16
    c7a8:	d8800415 	stw	r2,16(sp)
    c7ac:	000adf80 	call	adf8 <__mulsi3>
    c7b0:	da800317 	ldw	r10,12(sp)
    c7b4:	d9c00217 	ldw	r7,8(sp)
    c7b8:	d9000017 	ldw	r4,0(sp)
    c7bc:	502ed43a 	srli	r23,r10,16
    c7c0:	11c5883a 	add	r2,r2,r7
    c7c4:	24e5883a 	add	r18,r4,r19
    c7c8:	b885883a 	add	r2,r23,r2
    c7cc:	d8c00517 	ldw	r3,20(sp)
    c7d0:	d9800717 	ldw	r6,28(sp)
    c7d4:	da000617 	ldw	r8,24(sp)
    c7d8:	da400417 	ldw	r9,16(sp)
    c7dc:	11c0022e 	bgeu	r2,r7,c7e8 <__muldf3+0x4f4>
    c7e0:	01000074 	movhi	r4,1
    c7e4:	4913883a 	add	r9,r9,r4
    c7e8:	100ed43a 	srli	r7,r2,16
    c7ec:	1004943a 	slli	r2,r2,16
    c7f0:	55ffffcc 	andi	r23,r10,65535
    c7f4:	3a53883a 	add	r9,r7,r9
    c7f8:	8809883a 	mov	r4,r17
    c7fc:	800b883a 	mov	r5,r16
    c800:	d8c00515 	stw	r3,20(sp)
    c804:	d9800715 	stw	r6,28(sp)
    c808:	da000615 	stw	r8,24(sp)
    c80c:	da400415 	stw	r9,16(sp)
    c810:	15ef883a 	add	r23,r2,r23
    c814:	000adf80 	call	adf8 <__mulsi3>
    c818:	8809883a 	mov	r4,r17
    c81c:	b00b883a 	mov	r5,r22
    c820:	d8800215 	stw	r2,8(sp)
    c824:	000adf80 	call	adf8 <__mulsi3>
    c828:	b00b883a 	mov	r5,r22
    c82c:	a809883a 	mov	r4,r21
    c830:	d8800315 	stw	r2,12(sp)
    c834:	000adf80 	call	adf8 <__mulsi3>
    c838:	8009883a 	mov	r4,r16
    c83c:	a80b883a 	mov	r5,r21
    c840:	1023883a 	mov	r17,r2
    c844:	000adf80 	call	adf8 <__mulsi3>
    c848:	d9c00217 	ldw	r7,8(sp)
    c84c:	da800317 	ldw	r10,12(sp)
    c850:	d8c00517 	ldw	r3,20(sp)
    c854:	3808d43a 	srli	r4,r7,16
    c858:	1285883a 	add	r2,r2,r10
    c85c:	d9800717 	ldw	r6,28(sp)
    c860:	2085883a 	add	r2,r4,r2
    c864:	da000617 	ldw	r8,24(sp)
    c868:	da400417 	ldw	r9,16(sp)
    c86c:	1280022e 	bgeu	r2,r10,c878 <__muldf3+0x584>
    c870:	01000074 	movhi	r4,1
    c874:	8923883a 	add	r17,r17,r4
    c878:	1008943a 	slli	r4,r2,16
    c87c:	39ffffcc 	andi	r7,r7,65535
    c880:	e4b9883a 	add	fp,fp,r18
    c884:	21cf883a 	add	r7,r4,r7
    c888:	e4e7803a 	cmpltu	r19,fp,r19
    c88c:	3d0f883a 	add	r7,r7,r20
    c890:	bf39883a 	add	fp,r23,fp
    c894:	99c9883a 	add	r4,r19,r7
    c898:	e5ef803a 	cmpltu	r23,fp,r23
    c89c:	490b883a 	add	r5,r9,r4
    c8a0:	1004d43a 	srli	r2,r2,16
    c8a4:	b965883a 	add	r18,r23,r5
    c8a8:	24c9803a 	cmpltu	r4,r4,r19
    c8ac:	3d29803a 	cmpltu	r20,r7,r20
    c8b0:	a128b03a 	or	r20,r20,r4
    c8b4:	95ef803a 	cmpltu	r23,r18,r23
    c8b8:	2a53803a 	cmpltu	r9,r5,r9
    c8bc:	a0a9883a 	add	r20,r20,r2
    c8c0:	4deeb03a 	or	r23,r9,r23
    c8c4:	a5ef883a 	add	r23,r20,r23
    c8c8:	bc63883a 	add	r17,r23,r17
    c8cc:	e004927a 	slli	r2,fp,9
    c8d0:	d9000117 	ldw	r4,4(sp)
    c8d4:	882e927a 	slli	r23,r17,9
    c8d8:	9022d5fa 	srli	r17,r18,23
    c8dc:	e038d5fa 	srli	fp,fp,23
    c8e0:	1104b03a 	or	r2,r2,r4
    c8e4:	9024927a 	slli	r18,r18,9
    c8e8:	1004c03a 	cmpne	r2,r2,zero
    c8ec:	bc62b03a 	or	r17,r23,r17
    c8f0:	1738b03a 	or	fp,r2,fp
    c8f4:	8880402c 	andhi	r2,r17,256
    c8f8:	e4a4b03a 	or	r18,fp,r18
    c8fc:	10000726 	beq	r2,zero,c91c <__muldf3+0x628>
    c900:	9006d07a 	srli	r3,r18,1
    c904:	880497fa 	slli	r2,r17,31
    c908:	9480004c 	andi	r18,r18,1
    c90c:	8822d07a 	srli	r17,r17,1
    c910:	1ca4b03a 	or	r18,r3,r18
    c914:	14a4b03a 	or	r18,r2,r18
    c918:	4007883a 	mov	r3,r8
    c91c:	1880ffc4 	addi	r2,r3,1023
    c920:	0080460e 	bge	zero,r2,ca3c <__muldf3+0x748>
    c924:	910001cc 	andi	r4,r18,7
    c928:	20000726 	beq	r4,zero,c948 <__muldf3+0x654>
    c92c:	910003cc 	andi	r4,r18,15
    c930:	01400104 	movi	r5,4
    c934:	21400426 	beq	r4,r5,c948 <__muldf3+0x654>
    c938:	9149883a 	add	r4,r18,r5
    c93c:	24a5803a 	cmpltu	r18,r4,r18
    c940:	8ca3883a 	add	r17,r17,r18
    c944:	2025883a 	mov	r18,r4
    c948:	8900402c 	andhi	r4,r17,256
    c94c:	20000426 	beq	r4,zero,c960 <__muldf3+0x66c>
    c950:	18810004 	addi	r2,r3,1024
    c954:	00ffc034 	movhi	r3,65280
    c958:	18ffffc4 	addi	r3,r3,-1
    c95c:	88e2703a 	and	r17,r17,r3
    c960:	00c1ff84 	movi	r3,2046
    c964:	18bf1316 	blt	r3,r2,c5b4 <__alt_data_end+0xfffc31d4>
    c968:	882c977a 	slli	r22,r17,29
    c96c:	9024d0fa 	srli	r18,r18,3
    c970:	8822927a 	slli	r17,r17,9
    c974:	1081ffcc 	andi	r2,r2,2047
    c978:	b4acb03a 	or	r22,r22,r18
    c97c:	8820d33a 	srli	r16,r17,12
    c980:	3027883a 	mov	r19,r6
    c984:	003eba06 	br	c470 <__alt_data_end+0xfffc3090>
    c988:	8080022c 	andhi	r2,r16,8
    c98c:	10000926 	beq	r2,zero,c9b4 <__muldf3+0x6c0>
    c990:	8880022c 	andhi	r2,r17,8
    c994:	1000071e 	bne	r2,zero,c9b4 <__muldf3+0x6c0>
    c998:	00800434 	movhi	r2,16
    c99c:	8c000234 	orhi	r16,r17,8
    c9a0:	10bfffc4 	addi	r2,r2,-1
    c9a4:	e027883a 	mov	r19,fp
    c9a8:	80a0703a 	and	r16,r16,r2
    c9ac:	902d883a 	mov	r22,r18
    c9b0:	003f1706 	br	c610 <__alt_data_end+0xfffc3230>
    c9b4:	00800434 	movhi	r2,16
    c9b8:	84000234 	orhi	r16,r16,8
    c9bc:	10bfffc4 	addi	r2,r2,-1
    c9c0:	80a0703a 	and	r16,r16,r2
    c9c4:	003f1206 	br	c610 <__alt_data_end+0xfffc3230>
    c9c8:	147ff604 	addi	r17,r2,-40
    c9cc:	3462983a 	sll	r17,r6,r17
    c9d0:	0025883a 	mov	r18,zero
    c9d4:	003ef306 	br	c5a4 <__alt_data_end+0xfffc31c4>
    c9d8:	3009883a 	mov	r4,r6
    c9dc:	d9400215 	stw	r5,8(sp)
    c9e0:	d9800715 	stw	r6,28(sp)
    c9e4:	da400415 	stw	r9,16(sp)
    c9e8:	da800315 	stw	r10,12(sp)
    c9ec:	000d6600 	call	d660 <__clzsi2>
    c9f0:	10800804 	addi	r2,r2,32
    c9f4:	da800317 	ldw	r10,12(sp)
    c9f8:	da400417 	ldw	r9,16(sp)
    c9fc:	d9800717 	ldw	r6,28(sp)
    ca00:	d9400217 	ldw	r5,8(sp)
    ca04:	003edd06 	br	c57c <__alt_data_end+0xfffc319c>
    ca08:	143ff604 	addi	r16,r2,-40
    ca0c:	ac20983a 	sll	r16,r21,r16
    ca10:	002d883a 	mov	r22,zero
    ca14:	003ec106 	br	c51c <__alt_data_end+0xfffc313c>
    ca18:	d9800715 	stw	r6,28(sp)
    ca1c:	d9c00215 	stw	r7,8(sp)
    ca20:	da400415 	stw	r9,16(sp)
    ca24:	000d6600 	call	d660 <__clzsi2>
    ca28:	10800804 	addi	r2,r2,32
    ca2c:	da400417 	ldw	r9,16(sp)
    ca30:	d9c00217 	ldw	r7,8(sp)
    ca34:	d9800717 	ldw	r6,28(sp)
    ca38:	003eae06 	br	c4f4 <__alt_data_end+0xfffc3114>
    ca3c:	00c00044 	movi	r3,1
    ca40:	1887c83a 	sub	r3,r3,r2
    ca44:	01000e04 	movi	r4,56
    ca48:	20fe8516 	blt	r4,r3,c460 <__alt_data_end+0xfffc3080>
    ca4c:	010007c4 	movi	r4,31
    ca50:	20c01b16 	blt	r4,r3,cac0 <__muldf3+0x7cc>
    ca54:	00800804 	movi	r2,32
    ca58:	10c5c83a 	sub	r2,r2,r3
    ca5c:	888a983a 	sll	r5,r17,r2
    ca60:	90c8d83a 	srl	r4,r18,r3
    ca64:	9084983a 	sll	r2,r18,r2
    ca68:	88e2d83a 	srl	r17,r17,r3
    ca6c:	2906b03a 	or	r3,r5,r4
    ca70:	1004c03a 	cmpne	r2,r2,zero
    ca74:	1886b03a 	or	r3,r3,r2
    ca78:	188001cc 	andi	r2,r3,7
    ca7c:	10000726 	beq	r2,zero,ca9c <__muldf3+0x7a8>
    ca80:	188003cc 	andi	r2,r3,15
    ca84:	01000104 	movi	r4,4
    ca88:	11000426 	beq	r2,r4,ca9c <__muldf3+0x7a8>
    ca8c:	1805883a 	mov	r2,r3
    ca90:	10c00104 	addi	r3,r2,4
    ca94:	1885803a 	cmpltu	r2,r3,r2
    ca98:	88a3883a 	add	r17,r17,r2
    ca9c:	8880202c 	andhi	r2,r17,128
    caa0:	10001c26 	beq	r2,zero,cb14 <__muldf3+0x820>
    caa4:	3027883a 	mov	r19,r6
    caa8:	00800044 	movi	r2,1
    caac:	0021883a 	mov	r16,zero
    cab0:	002d883a 	mov	r22,zero
    cab4:	003e6e06 	br	c470 <__alt_data_end+0xfffc3090>
    cab8:	4007883a 	mov	r3,r8
    cabc:	003f9706 	br	c91c <__alt_data_end+0xfffc353c>
    cac0:	017ff844 	movi	r5,-31
    cac4:	2885c83a 	sub	r2,r5,r2
    cac8:	888ad83a 	srl	r5,r17,r2
    cacc:	00800804 	movi	r2,32
    cad0:	18801a26 	beq	r3,r2,cb3c <__muldf3+0x848>
    cad4:	01001004 	movi	r4,64
    cad8:	20c7c83a 	sub	r3,r4,r3
    cadc:	88e2983a 	sll	r17,r17,r3
    cae0:	8ca4b03a 	or	r18,r17,r18
    cae4:	9004c03a 	cmpne	r2,r18,zero
    cae8:	2884b03a 	or	r2,r5,r2
    caec:	144001cc 	andi	r17,r2,7
    caf0:	88000d1e 	bne	r17,zero,cb28 <__muldf3+0x834>
    caf4:	0021883a 	mov	r16,zero
    caf8:	102cd0fa 	srli	r22,r2,3
    cafc:	3027883a 	mov	r19,r6
    cb00:	0005883a 	mov	r2,zero
    cb04:	b46cb03a 	or	r22,r22,r17
    cb08:	003e5906 	br	c470 <__alt_data_end+0xfffc3090>
    cb0c:	1007883a 	mov	r3,r2
    cb10:	0023883a 	mov	r17,zero
    cb14:	8820927a 	slli	r16,r17,9
    cb18:	1805883a 	mov	r2,r3
    cb1c:	8822977a 	slli	r17,r17,29
    cb20:	8020d33a 	srli	r16,r16,12
    cb24:	003ff406 	br	caf8 <__alt_data_end+0xfffc3718>
    cb28:	10c003cc 	andi	r3,r2,15
    cb2c:	01000104 	movi	r4,4
    cb30:	193ff626 	beq	r3,r4,cb0c <__alt_data_end+0xfffc372c>
    cb34:	0023883a 	mov	r17,zero
    cb38:	003fd506 	br	ca90 <__alt_data_end+0xfffc36b0>
    cb3c:	0023883a 	mov	r17,zero
    cb40:	003fe706 	br	cae0 <__alt_data_end+0xfffc3700>
    cb44:	00800434 	movhi	r2,16
    cb48:	8c000234 	orhi	r16,r17,8
    cb4c:	10bfffc4 	addi	r2,r2,-1
    cb50:	3027883a 	mov	r19,r6
    cb54:	80a0703a 	and	r16,r16,r2
    cb58:	902d883a 	mov	r22,r18
    cb5c:	003eac06 	br	c610 <__alt_data_end+0xfffc3230>

0000cb60 <__subdf3>:
    cb60:	02000434 	movhi	r8,16
    cb64:	423fffc4 	addi	r8,r8,-1
    cb68:	defffb04 	addi	sp,sp,-20
    cb6c:	2a14703a 	and	r10,r5,r8
    cb70:	3812d53a 	srli	r9,r7,20
    cb74:	3a10703a 	and	r8,r7,r8
    cb78:	2006d77a 	srli	r3,r4,29
    cb7c:	3004d77a 	srli	r2,r6,29
    cb80:	dc000015 	stw	r16,0(sp)
    cb84:	501490fa 	slli	r10,r10,3
    cb88:	2820d53a 	srli	r16,r5,20
    cb8c:	401090fa 	slli	r8,r8,3
    cb90:	dc800215 	stw	r18,8(sp)
    cb94:	dc400115 	stw	r17,4(sp)
    cb98:	dfc00415 	stw	ra,16(sp)
    cb9c:	202290fa 	slli	r17,r4,3
    cba0:	dcc00315 	stw	r19,12(sp)
    cba4:	4a41ffcc 	andi	r9,r9,2047
    cba8:	0101ffc4 	movi	r4,2047
    cbac:	2824d7fa 	srli	r18,r5,31
    cbb0:	8401ffcc 	andi	r16,r16,2047
    cbb4:	50c6b03a 	or	r3,r10,r3
    cbb8:	380ed7fa 	srli	r7,r7,31
    cbbc:	408ab03a 	or	r5,r8,r2
    cbc0:	300c90fa 	slli	r6,r6,3
    cbc4:	49009626 	beq	r9,r4,ce20 <__subdf3+0x2c0>
    cbc8:	39c0005c 	xori	r7,r7,1
    cbcc:	8245c83a 	sub	r2,r16,r9
    cbd0:	3c807426 	beq	r7,r18,cda4 <__subdf3+0x244>
    cbd4:	0080af0e 	bge	zero,r2,ce94 <__subdf3+0x334>
    cbd8:	48002a1e 	bne	r9,zero,cc84 <__subdf3+0x124>
    cbdc:	2988b03a 	or	r4,r5,r6
    cbe0:	20009a1e 	bne	r4,zero,ce4c <__subdf3+0x2ec>
    cbe4:	888001cc 	andi	r2,r17,7
    cbe8:	10000726 	beq	r2,zero,cc08 <__subdf3+0xa8>
    cbec:	888003cc 	andi	r2,r17,15
    cbf0:	01000104 	movi	r4,4
    cbf4:	11000426 	beq	r2,r4,cc08 <__subdf3+0xa8>
    cbf8:	890b883a 	add	r5,r17,r4
    cbfc:	2c63803a 	cmpltu	r17,r5,r17
    cc00:	1c47883a 	add	r3,r3,r17
    cc04:	2823883a 	mov	r17,r5
    cc08:	1880202c 	andhi	r2,r3,128
    cc0c:	10005926 	beq	r2,zero,cd74 <__subdf3+0x214>
    cc10:	84000044 	addi	r16,r16,1
    cc14:	0081ffc4 	movi	r2,2047
    cc18:	8080be26 	beq	r16,r2,cf14 <__subdf3+0x3b4>
    cc1c:	017fe034 	movhi	r5,65408
    cc20:	297fffc4 	addi	r5,r5,-1
    cc24:	1946703a 	and	r3,r3,r5
    cc28:	1804977a 	slli	r2,r3,29
    cc2c:	1806927a 	slli	r3,r3,9
    cc30:	8822d0fa 	srli	r17,r17,3
    cc34:	8401ffcc 	andi	r16,r16,2047
    cc38:	180ad33a 	srli	r5,r3,12
    cc3c:	9100004c 	andi	r4,r18,1
    cc40:	1444b03a 	or	r2,r2,r17
    cc44:	80c1ffcc 	andi	r3,r16,2047
    cc48:	1820953a 	slli	r16,r3,20
    cc4c:	20c03fcc 	andi	r3,r4,255
    cc50:	180897fa 	slli	r4,r3,31
    cc54:	00c00434 	movhi	r3,16
    cc58:	18ffffc4 	addi	r3,r3,-1
    cc5c:	28c6703a 	and	r3,r5,r3
    cc60:	1c06b03a 	or	r3,r3,r16
    cc64:	1906b03a 	or	r3,r3,r4
    cc68:	dfc00417 	ldw	ra,16(sp)
    cc6c:	dcc00317 	ldw	r19,12(sp)
    cc70:	dc800217 	ldw	r18,8(sp)
    cc74:	dc400117 	ldw	r17,4(sp)
    cc78:	dc000017 	ldw	r16,0(sp)
    cc7c:	dec00504 	addi	sp,sp,20
    cc80:	f800283a 	ret
    cc84:	0101ffc4 	movi	r4,2047
    cc88:	813fd626 	beq	r16,r4,cbe4 <__alt_data_end+0xfffc3804>
    cc8c:	29402034 	orhi	r5,r5,128
    cc90:	01000e04 	movi	r4,56
    cc94:	2080a316 	blt	r4,r2,cf24 <__subdf3+0x3c4>
    cc98:	010007c4 	movi	r4,31
    cc9c:	2080c616 	blt	r4,r2,cfb8 <__subdf3+0x458>
    cca0:	01000804 	movi	r4,32
    cca4:	2089c83a 	sub	r4,r4,r2
    cca8:	2910983a 	sll	r8,r5,r4
    ccac:	308ed83a 	srl	r7,r6,r2
    ccb0:	3108983a 	sll	r4,r6,r4
    ccb4:	2884d83a 	srl	r2,r5,r2
    ccb8:	41ccb03a 	or	r6,r8,r7
    ccbc:	2008c03a 	cmpne	r4,r4,zero
    ccc0:	310cb03a 	or	r6,r6,r4
    ccc4:	898dc83a 	sub	r6,r17,r6
    ccc8:	89a3803a 	cmpltu	r17,r17,r6
    cccc:	1887c83a 	sub	r3,r3,r2
    ccd0:	1c47c83a 	sub	r3,r3,r17
    ccd4:	3023883a 	mov	r17,r6
    ccd8:	1880202c 	andhi	r2,r3,128
    ccdc:	10002326 	beq	r2,zero,cd6c <__subdf3+0x20c>
    cce0:	04c02034 	movhi	r19,128
    cce4:	9cffffc4 	addi	r19,r19,-1
    cce8:	1ce6703a 	and	r19,r3,r19
    ccec:	98007a26 	beq	r19,zero,ced8 <__subdf3+0x378>
    ccf0:	9809883a 	mov	r4,r19
    ccf4:	000d6600 	call	d660 <__clzsi2>
    ccf8:	113ffe04 	addi	r4,r2,-8
    ccfc:	00c007c4 	movi	r3,31
    cd00:	19007b16 	blt	r3,r4,cef0 <__subdf3+0x390>
    cd04:	00800804 	movi	r2,32
    cd08:	1105c83a 	sub	r2,r2,r4
    cd0c:	8884d83a 	srl	r2,r17,r2
    cd10:	9906983a 	sll	r3,r19,r4
    cd14:	8922983a 	sll	r17,r17,r4
    cd18:	10c4b03a 	or	r2,r2,r3
    cd1c:	24007816 	blt	r4,r16,cf00 <__subdf3+0x3a0>
    cd20:	2421c83a 	sub	r16,r4,r16
    cd24:	80c00044 	addi	r3,r16,1
    cd28:	010007c4 	movi	r4,31
    cd2c:	20c09516 	blt	r4,r3,cf84 <__subdf3+0x424>
    cd30:	01400804 	movi	r5,32
    cd34:	28cbc83a 	sub	r5,r5,r3
    cd38:	88c8d83a 	srl	r4,r17,r3
    cd3c:	8962983a 	sll	r17,r17,r5
    cd40:	114a983a 	sll	r5,r2,r5
    cd44:	10c6d83a 	srl	r3,r2,r3
    cd48:	8804c03a 	cmpne	r2,r17,zero
    cd4c:	290ab03a 	or	r5,r5,r4
    cd50:	28a2b03a 	or	r17,r5,r2
    cd54:	0021883a 	mov	r16,zero
    cd58:	003fa206 	br	cbe4 <__alt_data_end+0xfffc3804>
    cd5c:	2090b03a 	or	r8,r4,r2
    cd60:	40018e26 	beq	r8,zero,d39c <__subdf3+0x83c>
    cd64:	1007883a 	mov	r3,r2
    cd68:	2023883a 	mov	r17,r4
    cd6c:	888001cc 	andi	r2,r17,7
    cd70:	103f9e1e 	bne	r2,zero,cbec <__alt_data_end+0xfffc380c>
    cd74:	1804977a 	slli	r2,r3,29
    cd78:	8822d0fa 	srli	r17,r17,3
    cd7c:	1810d0fa 	srli	r8,r3,3
    cd80:	9100004c 	andi	r4,r18,1
    cd84:	1444b03a 	or	r2,r2,r17
    cd88:	00c1ffc4 	movi	r3,2047
    cd8c:	80c02826 	beq	r16,r3,ce30 <__subdf3+0x2d0>
    cd90:	01400434 	movhi	r5,16
    cd94:	297fffc4 	addi	r5,r5,-1
    cd98:	80e0703a 	and	r16,r16,r3
    cd9c:	414a703a 	and	r5,r8,r5
    cda0:	003fa806 	br	cc44 <__alt_data_end+0xfffc3864>
    cda4:	0080630e 	bge	zero,r2,cf34 <__subdf3+0x3d4>
    cda8:	48003026 	beq	r9,zero,ce6c <__subdf3+0x30c>
    cdac:	0101ffc4 	movi	r4,2047
    cdb0:	813f8c26 	beq	r16,r4,cbe4 <__alt_data_end+0xfffc3804>
    cdb4:	29402034 	orhi	r5,r5,128
    cdb8:	01000e04 	movi	r4,56
    cdbc:	2080a90e 	bge	r4,r2,d064 <__subdf3+0x504>
    cdc0:	298cb03a 	or	r6,r5,r6
    cdc4:	3012c03a 	cmpne	r9,r6,zero
    cdc8:	0005883a 	mov	r2,zero
    cdcc:	4c53883a 	add	r9,r9,r17
    cdd0:	4c63803a 	cmpltu	r17,r9,r17
    cdd4:	10c7883a 	add	r3,r2,r3
    cdd8:	88c7883a 	add	r3,r17,r3
    cddc:	4823883a 	mov	r17,r9
    cde0:	1880202c 	andhi	r2,r3,128
    cde4:	1000d026 	beq	r2,zero,d128 <__subdf3+0x5c8>
    cde8:	84000044 	addi	r16,r16,1
    cdec:	0081ffc4 	movi	r2,2047
    cdf0:	8080fe26 	beq	r16,r2,d1ec <__subdf3+0x68c>
    cdf4:	00bfe034 	movhi	r2,65408
    cdf8:	10bfffc4 	addi	r2,r2,-1
    cdfc:	1886703a 	and	r3,r3,r2
    ce00:	880ad07a 	srli	r5,r17,1
    ce04:	180497fa 	slli	r2,r3,31
    ce08:	8900004c 	andi	r4,r17,1
    ce0c:	2922b03a 	or	r17,r5,r4
    ce10:	1806d07a 	srli	r3,r3,1
    ce14:	1462b03a 	or	r17,r2,r17
    ce18:	3825883a 	mov	r18,r7
    ce1c:	003f7106 	br	cbe4 <__alt_data_end+0xfffc3804>
    ce20:	2984b03a 	or	r2,r5,r6
    ce24:	103f6826 	beq	r2,zero,cbc8 <__alt_data_end+0xfffc37e8>
    ce28:	39c03fcc 	andi	r7,r7,255
    ce2c:	003f6706 	br	cbcc <__alt_data_end+0xfffc37ec>
    ce30:	4086b03a 	or	r3,r8,r2
    ce34:	18015226 	beq	r3,zero,d380 <__subdf3+0x820>
    ce38:	00c00434 	movhi	r3,16
    ce3c:	41400234 	orhi	r5,r8,8
    ce40:	18ffffc4 	addi	r3,r3,-1
    ce44:	28ca703a 	and	r5,r5,r3
    ce48:	003f7e06 	br	cc44 <__alt_data_end+0xfffc3864>
    ce4c:	10bfffc4 	addi	r2,r2,-1
    ce50:	1000491e 	bne	r2,zero,cf78 <__subdf3+0x418>
    ce54:	898fc83a 	sub	r7,r17,r6
    ce58:	89e3803a 	cmpltu	r17,r17,r7
    ce5c:	1947c83a 	sub	r3,r3,r5
    ce60:	1c47c83a 	sub	r3,r3,r17
    ce64:	3823883a 	mov	r17,r7
    ce68:	003f9b06 	br	ccd8 <__alt_data_end+0xfffc38f8>
    ce6c:	2988b03a 	or	r4,r5,r6
    ce70:	203f5c26 	beq	r4,zero,cbe4 <__alt_data_end+0xfffc3804>
    ce74:	10bfffc4 	addi	r2,r2,-1
    ce78:	1000931e 	bne	r2,zero,d0c8 <__subdf3+0x568>
    ce7c:	898d883a 	add	r6,r17,r6
    ce80:	3463803a 	cmpltu	r17,r6,r17
    ce84:	1947883a 	add	r3,r3,r5
    ce88:	88c7883a 	add	r3,r17,r3
    ce8c:	3023883a 	mov	r17,r6
    ce90:	003fd306 	br	cde0 <__alt_data_end+0xfffc3a00>
    ce94:	1000541e 	bne	r2,zero,cfe8 <__subdf3+0x488>
    ce98:	80800044 	addi	r2,r16,1
    ce9c:	1081ffcc 	andi	r2,r2,2047
    cea0:	01000044 	movi	r4,1
    cea4:	2080a20e 	bge	r4,r2,d130 <__subdf3+0x5d0>
    cea8:	8989c83a 	sub	r4,r17,r6
    ceac:	8905803a 	cmpltu	r2,r17,r4
    ceb0:	1967c83a 	sub	r19,r3,r5
    ceb4:	98a7c83a 	sub	r19,r19,r2
    ceb8:	9880202c 	andhi	r2,r19,128
    cebc:	10006326 	beq	r2,zero,d04c <__subdf3+0x4ec>
    cec0:	3463c83a 	sub	r17,r6,r17
    cec4:	28c7c83a 	sub	r3,r5,r3
    cec8:	344d803a 	cmpltu	r6,r6,r17
    cecc:	19a7c83a 	sub	r19,r3,r6
    ced0:	3825883a 	mov	r18,r7
    ced4:	983f861e 	bne	r19,zero,ccf0 <__alt_data_end+0xfffc3910>
    ced8:	8809883a 	mov	r4,r17
    cedc:	000d6600 	call	d660 <__clzsi2>
    cee0:	10800804 	addi	r2,r2,32
    cee4:	113ffe04 	addi	r4,r2,-8
    cee8:	00c007c4 	movi	r3,31
    ceec:	193f850e 	bge	r3,r4,cd04 <__alt_data_end+0xfffc3924>
    cef0:	10bff604 	addi	r2,r2,-40
    cef4:	8884983a 	sll	r2,r17,r2
    cef8:	0023883a 	mov	r17,zero
    cefc:	243f880e 	bge	r4,r16,cd20 <__alt_data_end+0xfffc3940>
    cf00:	00ffe034 	movhi	r3,65408
    cf04:	18ffffc4 	addi	r3,r3,-1
    cf08:	8121c83a 	sub	r16,r16,r4
    cf0c:	10c6703a 	and	r3,r2,r3
    cf10:	003f3406 	br	cbe4 <__alt_data_end+0xfffc3804>
    cf14:	9100004c 	andi	r4,r18,1
    cf18:	000b883a 	mov	r5,zero
    cf1c:	0005883a 	mov	r2,zero
    cf20:	003f4806 	br	cc44 <__alt_data_end+0xfffc3864>
    cf24:	298cb03a 	or	r6,r5,r6
    cf28:	300cc03a 	cmpne	r6,r6,zero
    cf2c:	0005883a 	mov	r2,zero
    cf30:	003f6406 	br	ccc4 <__alt_data_end+0xfffc38e4>
    cf34:	10009a1e 	bne	r2,zero,d1a0 <__subdf3+0x640>
    cf38:	82400044 	addi	r9,r16,1
    cf3c:	4881ffcc 	andi	r2,r9,2047
    cf40:	02800044 	movi	r10,1
    cf44:	5080670e 	bge	r10,r2,d0e4 <__subdf3+0x584>
    cf48:	0081ffc4 	movi	r2,2047
    cf4c:	4880af26 	beq	r9,r2,d20c <__subdf3+0x6ac>
    cf50:	898d883a 	add	r6,r17,r6
    cf54:	1945883a 	add	r2,r3,r5
    cf58:	3447803a 	cmpltu	r3,r6,r17
    cf5c:	1887883a 	add	r3,r3,r2
    cf60:	182297fa 	slli	r17,r3,31
    cf64:	300cd07a 	srli	r6,r6,1
    cf68:	1806d07a 	srli	r3,r3,1
    cf6c:	4821883a 	mov	r16,r9
    cf70:	89a2b03a 	or	r17,r17,r6
    cf74:	003f1b06 	br	cbe4 <__alt_data_end+0xfffc3804>
    cf78:	0101ffc4 	movi	r4,2047
    cf7c:	813f441e 	bne	r16,r4,cc90 <__alt_data_end+0xfffc38b0>
    cf80:	003f1806 	br	cbe4 <__alt_data_end+0xfffc3804>
    cf84:	843ff844 	addi	r16,r16,-31
    cf88:	01400804 	movi	r5,32
    cf8c:	1408d83a 	srl	r4,r2,r16
    cf90:	19405026 	beq	r3,r5,d0d4 <__subdf3+0x574>
    cf94:	01401004 	movi	r5,64
    cf98:	28c7c83a 	sub	r3,r5,r3
    cf9c:	10c4983a 	sll	r2,r2,r3
    cfa0:	88a2b03a 	or	r17,r17,r2
    cfa4:	8822c03a 	cmpne	r17,r17,zero
    cfa8:	2462b03a 	or	r17,r4,r17
    cfac:	0007883a 	mov	r3,zero
    cfb0:	0021883a 	mov	r16,zero
    cfb4:	003f6d06 	br	cd6c <__alt_data_end+0xfffc398c>
    cfb8:	11fff804 	addi	r7,r2,-32
    cfbc:	01000804 	movi	r4,32
    cfc0:	29ced83a 	srl	r7,r5,r7
    cfc4:	11004526 	beq	r2,r4,d0dc <__subdf3+0x57c>
    cfc8:	01001004 	movi	r4,64
    cfcc:	2089c83a 	sub	r4,r4,r2
    cfd0:	2904983a 	sll	r2,r5,r4
    cfd4:	118cb03a 	or	r6,r2,r6
    cfd8:	300cc03a 	cmpne	r6,r6,zero
    cfdc:	398cb03a 	or	r6,r7,r6
    cfe0:	0005883a 	mov	r2,zero
    cfe4:	003f3706 	br	ccc4 <__alt_data_end+0xfffc38e4>
    cfe8:	80002a26 	beq	r16,zero,d094 <__subdf3+0x534>
    cfec:	0101ffc4 	movi	r4,2047
    cff0:	49006626 	beq	r9,r4,d18c <__subdf3+0x62c>
    cff4:	0085c83a 	sub	r2,zero,r2
    cff8:	18c02034 	orhi	r3,r3,128
    cffc:	01000e04 	movi	r4,56
    d000:	20807e16 	blt	r4,r2,d1fc <__subdf3+0x69c>
    d004:	010007c4 	movi	r4,31
    d008:	2080e716 	blt	r4,r2,d3a8 <__subdf3+0x848>
    d00c:	01000804 	movi	r4,32
    d010:	2089c83a 	sub	r4,r4,r2
    d014:	1914983a 	sll	r10,r3,r4
    d018:	8890d83a 	srl	r8,r17,r2
    d01c:	8908983a 	sll	r4,r17,r4
    d020:	1884d83a 	srl	r2,r3,r2
    d024:	5222b03a 	or	r17,r10,r8
    d028:	2006c03a 	cmpne	r3,r4,zero
    d02c:	88e2b03a 	or	r17,r17,r3
    d030:	3463c83a 	sub	r17,r6,r17
    d034:	2885c83a 	sub	r2,r5,r2
    d038:	344d803a 	cmpltu	r6,r6,r17
    d03c:	1187c83a 	sub	r3,r2,r6
    d040:	4821883a 	mov	r16,r9
    d044:	3825883a 	mov	r18,r7
    d048:	003f2306 	br	ccd8 <__alt_data_end+0xfffc38f8>
    d04c:	24d0b03a 	or	r8,r4,r19
    d050:	40001b1e 	bne	r8,zero,d0c0 <__subdf3+0x560>
    d054:	0005883a 	mov	r2,zero
    d058:	0009883a 	mov	r4,zero
    d05c:	0021883a 	mov	r16,zero
    d060:	003f4906 	br	cd88 <__alt_data_end+0xfffc39a8>
    d064:	010007c4 	movi	r4,31
    d068:	20803a16 	blt	r4,r2,d154 <__subdf3+0x5f4>
    d06c:	01000804 	movi	r4,32
    d070:	2089c83a 	sub	r4,r4,r2
    d074:	2912983a 	sll	r9,r5,r4
    d078:	3090d83a 	srl	r8,r6,r2
    d07c:	3108983a 	sll	r4,r6,r4
    d080:	2884d83a 	srl	r2,r5,r2
    d084:	4a12b03a 	or	r9,r9,r8
    d088:	2008c03a 	cmpne	r4,r4,zero
    d08c:	4912b03a 	or	r9,r9,r4
    d090:	003f4e06 	br	cdcc <__alt_data_end+0xfffc39ec>
    d094:	1c48b03a 	or	r4,r3,r17
    d098:	20003c26 	beq	r4,zero,d18c <__subdf3+0x62c>
    d09c:	0084303a 	nor	r2,zero,r2
    d0a0:	1000381e 	bne	r2,zero,d184 <__subdf3+0x624>
    d0a4:	3463c83a 	sub	r17,r6,r17
    d0a8:	28c5c83a 	sub	r2,r5,r3
    d0ac:	344d803a 	cmpltu	r6,r6,r17
    d0b0:	1187c83a 	sub	r3,r2,r6
    d0b4:	4821883a 	mov	r16,r9
    d0b8:	3825883a 	mov	r18,r7
    d0bc:	003f0606 	br	ccd8 <__alt_data_end+0xfffc38f8>
    d0c0:	2023883a 	mov	r17,r4
    d0c4:	003f0906 	br	ccec <__alt_data_end+0xfffc390c>
    d0c8:	0101ffc4 	movi	r4,2047
    d0cc:	813f3a1e 	bne	r16,r4,cdb8 <__alt_data_end+0xfffc39d8>
    d0d0:	003ec406 	br	cbe4 <__alt_data_end+0xfffc3804>
    d0d4:	0005883a 	mov	r2,zero
    d0d8:	003fb106 	br	cfa0 <__alt_data_end+0xfffc3bc0>
    d0dc:	0005883a 	mov	r2,zero
    d0e0:	003fbc06 	br	cfd4 <__alt_data_end+0xfffc3bf4>
    d0e4:	1c44b03a 	or	r2,r3,r17
    d0e8:	80008e1e 	bne	r16,zero,d324 <__subdf3+0x7c4>
    d0ec:	1000c826 	beq	r2,zero,d410 <__subdf3+0x8b0>
    d0f0:	2984b03a 	or	r2,r5,r6
    d0f4:	103ebb26 	beq	r2,zero,cbe4 <__alt_data_end+0xfffc3804>
    d0f8:	8989883a 	add	r4,r17,r6
    d0fc:	1945883a 	add	r2,r3,r5
    d100:	2447803a 	cmpltu	r3,r4,r17
    d104:	1887883a 	add	r3,r3,r2
    d108:	1880202c 	andhi	r2,r3,128
    d10c:	2023883a 	mov	r17,r4
    d110:	103f1626 	beq	r2,zero,cd6c <__alt_data_end+0xfffc398c>
    d114:	00bfe034 	movhi	r2,65408
    d118:	10bfffc4 	addi	r2,r2,-1
    d11c:	5021883a 	mov	r16,r10
    d120:	1886703a 	and	r3,r3,r2
    d124:	003eaf06 	br	cbe4 <__alt_data_end+0xfffc3804>
    d128:	3825883a 	mov	r18,r7
    d12c:	003f0f06 	br	cd6c <__alt_data_end+0xfffc398c>
    d130:	1c44b03a 	or	r2,r3,r17
    d134:	8000251e 	bne	r16,zero,d1cc <__subdf3+0x66c>
    d138:	1000661e 	bne	r2,zero,d2d4 <__subdf3+0x774>
    d13c:	2990b03a 	or	r8,r5,r6
    d140:	40009626 	beq	r8,zero,d39c <__subdf3+0x83c>
    d144:	2807883a 	mov	r3,r5
    d148:	3023883a 	mov	r17,r6
    d14c:	3825883a 	mov	r18,r7
    d150:	003ea406 	br	cbe4 <__alt_data_end+0xfffc3804>
    d154:	127ff804 	addi	r9,r2,-32
    d158:	01000804 	movi	r4,32
    d15c:	2a52d83a 	srl	r9,r5,r9
    d160:	11008c26 	beq	r2,r4,d394 <__subdf3+0x834>
    d164:	01001004 	movi	r4,64
    d168:	2085c83a 	sub	r2,r4,r2
    d16c:	2884983a 	sll	r2,r5,r2
    d170:	118cb03a 	or	r6,r2,r6
    d174:	300cc03a 	cmpne	r6,r6,zero
    d178:	4992b03a 	or	r9,r9,r6
    d17c:	0005883a 	mov	r2,zero
    d180:	003f1206 	br	cdcc <__alt_data_end+0xfffc39ec>
    d184:	0101ffc4 	movi	r4,2047
    d188:	493f9c1e 	bne	r9,r4,cffc <__alt_data_end+0xfffc3c1c>
    d18c:	2807883a 	mov	r3,r5
    d190:	3023883a 	mov	r17,r6
    d194:	4821883a 	mov	r16,r9
    d198:	3825883a 	mov	r18,r7
    d19c:	003e9106 	br	cbe4 <__alt_data_end+0xfffc3804>
    d1a0:	80001f1e 	bne	r16,zero,d220 <__subdf3+0x6c0>
    d1a4:	1c48b03a 	or	r4,r3,r17
    d1a8:	20005a26 	beq	r4,zero,d314 <__subdf3+0x7b4>
    d1ac:	0084303a 	nor	r2,zero,r2
    d1b0:	1000561e 	bne	r2,zero,d30c <__subdf3+0x7ac>
    d1b4:	89a3883a 	add	r17,r17,r6
    d1b8:	1945883a 	add	r2,r3,r5
    d1bc:	898d803a 	cmpltu	r6,r17,r6
    d1c0:	3087883a 	add	r3,r6,r2
    d1c4:	4821883a 	mov	r16,r9
    d1c8:	003f0506 	br	cde0 <__alt_data_end+0xfffc3a00>
    d1cc:	10002b1e 	bne	r2,zero,d27c <__subdf3+0x71c>
    d1d0:	2984b03a 	or	r2,r5,r6
    d1d4:	10008026 	beq	r2,zero,d3d8 <__subdf3+0x878>
    d1d8:	2807883a 	mov	r3,r5
    d1dc:	3023883a 	mov	r17,r6
    d1e0:	3825883a 	mov	r18,r7
    d1e4:	0401ffc4 	movi	r16,2047
    d1e8:	003e7e06 	br	cbe4 <__alt_data_end+0xfffc3804>
    d1ec:	3809883a 	mov	r4,r7
    d1f0:	0011883a 	mov	r8,zero
    d1f4:	0005883a 	mov	r2,zero
    d1f8:	003ee306 	br	cd88 <__alt_data_end+0xfffc39a8>
    d1fc:	1c62b03a 	or	r17,r3,r17
    d200:	8822c03a 	cmpne	r17,r17,zero
    d204:	0005883a 	mov	r2,zero
    d208:	003f8906 	br	d030 <__alt_data_end+0xfffc3c50>
    d20c:	3809883a 	mov	r4,r7
    d210:	4821883a 	mov	r16,r9
    d214:	0011883a 	mov	r8,zero
    d218:	0005883a 	mov	r2,zero
    d21c:	003eda06 	br	cd88 <__alt_data_end+0xfffc39a8>
    d220:	0101ffc4 	movi	r4,2047
    d224:	49003b26 	beq	r9,r4,d314 <__subdf3+0x7b4>
    d228:	0085c83a 	sub	r2,zero,r2
    d22c:	18c02034 	orhi	r3,r3,128
    d230:	01000e04 	movi	r4,56
    d234:	20806e16 	blt	r4,r2,d3f0 <__subdf3+0x890>
    d238:	010007c4 	movi	r4,31
    d23c:	20807716 	blt	r4,r2,d41c <__subdf3+0x8bc>
    d240:	01000804 	movi	r4,32
    d244:	2089c83a 	sub	r4,r4,r2
    d248:	1914983a 	sll	r10,r3,r4
    d24c:	8890d83a 	srl	r8,r17,r2
    d250:	8908983a 	sll	r4,r17,r4
    d254:	1884d83a 	srl	r2,r3,r2
    d258:	5222b03a 	or	r17,r10,r8
    d25c:	2006c03a 	cmpne	r3,r4,zero
    d260:	88e2b03a 	or	r17,r17,r3
    d264:	89a3883a 	add	r17,r17,r6
    d268:	1145883a 	add	r2,r2,r5
    d26c:	898d803a 	cmpltu	r6,r17,r6
    d270:	3087883a 	add	r3,r6,r2
    d274:	4821883a 	mov	r16,r9
    d278:	003ed906 	br	cde0 <__alt_data_end+0xfffc3a00>
    d27c:	2984b03a 	or	r2,r5,r6
    d280:	10004226 	beq	r2,zero,d38c <__subdf3+0x82c>
    d284:	1808d0fa 	srli	r4,r3,3
    d288:	8822d0fa 	srli	r17,r17,3
    d28c:	1806977a 	slli	r3,r3,29
    d290:	2080022c 	andhi	r2,r4,8
    d294:	1c62b03a 	or	r17,r3,r17
    d298:	10000826 	beq	r2,zero,d2bc <__subdf3+0x75c>
    d29c:	2812d0fa 	srli	r9,r5,3
    d2a0:	4880022c 	andhi	r2,r9,8
    d2a4:	1000051e 	bne	r2,zero,d2bc <__subdf3+0x75c>
    d2a8:	300cd0fa 	srli	r6,r6,3
    d2ac:	2804977a 	slli	r2,r5,29
    d2b0:	4809883a 	mov	r4,r9
    d2b4:	3825883a 	mov	r18,r7
    d2b8:	11a2b03a 	or	r17,r2,r6
    d2bc:	8806d77a 	srli	r3,r17,29
    d2c0:	200890fa 	slli	r4,r4,3
    d2c4:	882290fa 	slli	r17,r17,3
    d2c8:	0401ffc4 	movi	r16,2047
    d2cc:	1906b03a 	or	r3,r3,r4
    d2d0:	003e4406 	br	cbe4 <__alt_data_end+0xfffc3804>
    d2d4:	2984b03a 	or	r2,r5,r6
    d2d8:	103e4226 	beq	r2,zero,cbe4 <__alt_data_end+0xfffc3804>
    d2dc:	8989c83a 	sub	r4,r17,r6
    d2e0:	8911803a 	cmpltu	r8,r17,r4
    d2e4:	1945c83a 	sub	r2,r3,r5
    d2e8:	1205c83a 	sub	r2,r2,r8
    d2ec:	1200202c 	andhi	r8,r2,128
    d2f0:	403e9a26 	beq	r8,zero,cd5c <__alt_data_end+0xfffc397c>
    d2f4:	3463c83a 	sub	r17,r6,r17
    d2f8:	28c5c83a 	sub	r2,r5,r3
    d2fc:	344d803a 	cmpltu	r6,r6,r17
    d300:	1187c83a 	sub	r3,r2,r6
    d304:	3825883a 	mov	r18,r7
    d308:	003e3606 	br	cbe4 <__alt_data_end+0xfffc3804>
    d30c:	0101ffc4 	movi	r4,2047
    d310:	493fc71e 	bne	r9,r4,d230 <__alt_data_end+0xfffc3e50>
    d314:	2807883a 	mov	r3,r5
    d318:	3023883a 	mov	r17,r6
    d31c:	4821883a 	mov	r16,r9
    d320:	003e3006 	br	cbe4 <__alt_data_end+0xfffc3804>
    d324:	10003626 	beq	r2,zero,d400 <__subdf3+0x8a0>
    d328:	2984b03a 	or	r2,r5,r6
    d32c:	10001726 	beq	r2,zero,d38c <__subdf3+0x82c>
    d330:	1808d0fa 	srli	r4,r3,3
    d334:	8822d0fa 	srli	r17,r17,3
    d338:	1806977a 	slli	r3,r3,29
    d33c:	2080022c 	andhi	r2,r4,8
    d340:	1c62b03a 	or	r17,r3,r17
    d344:	10000726 	beq	r2,zero,d364 <__subdf3+0x804>
    d348:	2812d0fa 	srli	r9,r5,3
    d34c:	4880022c 	andhi	r2,r9,8
    d350:	1000041e 	bne	r2,zero,d364 <__subdf3+0x804>
    d354:	300cd0fa 	srli	r6,r6,3
    d358:	2804977a 	slli	r2,r5,29
    d35c:	4809883a 	mov	r4,r9
    d360:	11a2b03a 	or	r17,r2,r6
    d364:	8806d77a 	srli	r3,r17,29
    d368:	200890fa 	slli	r4,r4,3
    d36c:	882290fa 	slli	r17,r17,3
    d370:	3825883a 	mov	r18,r7
    d374:	1906b03a 	or	r3,r3,r4
    d378:	0401ffc4 	movi	r16,2047
    d37c:	003e1906 	br	cbe4 <__alt_data_end+0xfffc3804>
    d380:	000b883a 	mov	r5,zero
    d384:	0005883a 	mov	r2,zero
    d388:	003e2e06 	br	cc44 <__alt_data_end+0xfffc3864>
    d38c:	0401ffc4 	movi	r16,2047
    d390:	003e1406 	br	cbe4 <__alt_data_end+0xfffc3804>
    d394:	0005883a 	mov	r2,zero
    d398:	003f7506 	br	d170 <__alt_data_end+0xfffc3d90>
    d39c:	0005883a 	mov	r2,zero
    d3a0:	0009883a 	mov	r4,zero
    d3a4:	003e7806 	br	cd88 <__alt_data_end+0xfffc39a8>
    d3a8:	123ff804 	addi	r8,r2,-32
    d3ac:	01000804 	movi	r4,32
    d3b0:	1a10d83a 	srl	r8,r3,r8
    d3b4:	11002526 	beq	r2,r4,d44c <__subdf3+0x8ec>
    d3b8:	01001004 	movi	r4,64
    d3bc:	2085c83a 	sub	r2,r4,r2
    d3c0:	1884983a 	sll	r2,r3,r2
    d3c4:	1444b03a 	or	r2,r2,r17
    d3c8:	1004c03a 	cmpne	r2,r2,zero
    d3cc:	40a2b03a 	or	r17,r8,r2
    d3d0:	0005883a 	mov	r2,zero
    d3d4:	003f1606 	br	d030 <__alt_data_end+0xfffc3c50>
    d3d8:	02000434 	movhi	r8,16
    d3dc:	0009883a 	mov	r4,zero
    d3e0:	423fffc4 	addi	r8,r8,-1
    d3e4:	00bfffc4 	movi	r2,-1
    d3e8:	0401ffc4 	movi	r16,2047
    d3ec:	003e6606 	br	cd88 <__alt_data_end+0xfffc39a8>
    d3f0:	1c62b03a 	or	r17,r3,r17
    d3f4:	8822c03a 	cmpne	r17,r17,zero
    d3f8:	0005883a 	mov	r2,zero
    d3fc:	003f9906 	br	d264 <__alt_data_end+0xfffc3e84>
    d400:	2807883a 	mov	r3,r5
    d404:	3023883a 	mov	r17,r6
    d408:	0401ffc4 	movi	r16,2047
    d40c:	003df506 	br	cbe4 <__alt_data_end+0xfffc3804>
    d410:	2807883a 	mov	r3,r5
    d414:	3023883a 	mov	r17,r6
    d418:	003df206 	br	cbe4 <__alt_data_end+0xfffc3804>
    d41c:	123ff804 	addi	r8,r2,-32
    d420:	01000804 	movi	r4,32
    d424:	1a10d83a 	srl	r8,r3,r8
    d428:	11000a26 	beq	r2,r4,d454 <__subdf3+0x8f4>
    d42c:	01001004 	movi	r4,64
    d430:	2085c83a 	sub	r2,r4,r2
    d434:	1884983a 	sll	r2,r3,r2
    d438:	1444b03a 	or	r2,r2,r17
    d43c:	1004c03a 	cmpne	r2,r2,zero
    d440:	40a2b03a 	or	r17,r8,r2
    d444:	0005883a 	mov	r2,zero
    d448:	003f8606 	br	d264 <__alt_data_end+0xfffc3e84>
    d44c:	0005883a 	mov	r2,zero
    d450:	003fdc06 	br	d3c4 <__alt_data_end+0xfffc3fe4>
    d454:	0005883a 	mov	r2,zero
    d458:	003ff706 	br	d438 <__alt_data_end+0xfffc4058>

0000d45c <__fixdfsi>:
    d45c:	280cd53a 	srli	r6,r5,20
    d460:	00c00434 	movhi	r3,16
    d464:	18ffffc4 	addi	r3,r3,-1
    d468:	3181ffcc 	andi	r6,r6,2047
    d46c:	01c0ff84 	movi	r7,1022
    d470:	28c6703a 	and	r3,r5,r3
    d474:	280ad7fa 	srli	r5,r5,31
    d478:	3980120e 	bge	r7,r6,d4c4 <__fixdfsi+0x68>
    d47c:	00810744 	movi	r2,1053
    d480:	11800c16 	blt	r2,r6,d4b4 <__fixdfsi+0x58>
    d484:	00810cc4 	movi	r2,1075
    d488:	1185c83a 	sub	r2,r2,r6
    d48c:	01c007c4 	movi	r7,31
    d490:	18c00434 	orhi	r3,r3,16
    d494:	38800d16 	blt	r7,r2,d4cc <__fixdfsi+0x70>
    d498:	31befb44 	addi	r6,r6,-1043
    d49c:	2084d83a 	srl	r2,r4,r2
    d4a0:	1986983a 	sll	r3,r3,r6
    d4a4:	1884b03a 	or	r2,r3,r2
    d4a8:	28000726 	beq	r5,zero,d4c8 <__fixdfsi+0x6c>
    d4ac:	0085c83a 	sub	r2,zero,r2
    d4b0:	f800283a 	ret
    d4b4:	00a00034 	movhi	r2,32768
    d4b8:	10bfffc4 	addi	r2,r2,-1
    d4bc:	2885883a 	add	r2,r5,r2
    d4c0:	f800283a 	ret
    d4c4:	0005883a 	mov	r2,zero
    d4c8:	f800283a 	ret
    d4cc:	008104c4 	movi	r2,1043
    d4d0:	1185c83a 	sub	r2,r2,r6
    d4d4:	1884d83a 	srl	r2,r3,r2
    d4d8:	003ff306 	br	d4a8 <__alt_data_end+0xfffc40c8>

0000d4dc <__floatsidf>:
    d4dc:	defffd04 	addi	sp,sp,-12
    d4e0:	dfc00215 	stw	ra,8(sp)
    d4e4:	dc400115 	stw	r17,4(sp)
    d4e8:	dc000015 	stw	r16,0(sp)
    d4ec:	20002b26 	beq	r4,zero,d59c <__floatsidf+0xc0>
    d4f0:	2023883a 	mov	r17,r4
    d4f4:	2020d7fa 	srli	r16,r4,31
    d4f8:	20002d16 	blt	r4,zero,d5b0 <__floatsidf+0xd4>
    d4fc:	8809883a 	mov	r4,r17
    d500:	000d6600 	call	d660 <__clzsi2>
    d504:	01410784 	movi	r5,1054
    d508:	288bc83a 	sub	r5,r5,r2
    d50c:	01010cc4 	movi	r4,1075
    d510:	2149c83a 	sub	r4,r4,r5
    d514:	00c007c4 	movi	r3,31
    d518:	1900160e 	bge	r3,r4,d574 <__floatsidf+0x98>
    d51c:	00c104c4 	movi	r3,1043
    d520:	1947c83a 	sub	r3,r3,r5
    d524:	88c6983a 	sll	r3,r17,r3
    d528:	00800434 	movhi	r2,16
    d52c:	10bfffc4 	addi	r2,r2,-1
    d530:	1886703a 	and	r3,r3,r2
    d534:	2941ffcc 	andi	r5,r5,2047
    d538:	800d883a 	mov	r6,r16
    d53c:	0005883a 	mov	r2,zero
    d540:	280a953a 	slli	r5,r5,20
    d544:	31803fcc 	andi	r6,r6,255
    d548:	01000434 	movhi	r4,16
    d54c:	300c97fa 	slli	r6,r6,31
    d550:	213fffc4 	addi	r4,r4,-1
    d554:	1906703a 	and	r3,r3,r4
    d558:	1946b03a 	or	r3,r3,r5
    d55c:	1986b03a 	or	r3,r3,r6
    d560:	dfc00217 	ldw	ra,8(sp)
    d564:	dc400117 	ldw	r17,4(sp)
    d568:	dc000017 	ldw	r16,0(sp)
    d56c:	dec00304 	addi	sp,sp,12
    d570:	f800283a 	ret
    d574:	00c002c4 	movi	r3,11
    d578:	1887c83a 	sub	r3,r3,r2
    d57c:	88c6d83a 	srl	r3,r17,r3
    d580:	8904983a 	sll	r2,r17,r4
    d584:	01000434 	movhi	r4,16
    d588:	213fffc4 	addi	r4,r4,-1
    d58c:	2941ffcc 	andi	r5,r5,2047
    d590:	1906703a 	and	r3,r3,r4
    d594:	800d883a 	mov	r6,r16
    d598:	003fe906 	br	d540 <__alt_data_end+0xfffc4160>
    d59c:	000d883a 	mov	r6,zero
    d5a0:	000b883a 	mov	r5,zero
    d5a4:	0007883a 	mov	r3,zero
    d5a8:	0005883a 	mov	r2,zero
    d5ac:	003fe406 	br	d540 <__alt_data_end+0xfffc4160>
    d5b0:	0123c83a 	sub	r17,zero,r4
    d5b4:	003fd106 	br	d4fc <__alt_data_end+0xfffc411c>

0000d5b8 <__floatunsidf>:
    d5b8:	defffe04 	addi	sp,sp,-8
    d5bc:	dc000015 	stw	r16,0(sp)
    d5c0:	dfc00115 	stw	ra,4(sp)
    d5c4:	2021883a 	mov	r16,r4
    d5c8:	20002226 	beq	r4,zero,d654 <__floatunsidf+0x9c>
    d5cc:	000d6600 	call	d660 <__clzsi2>
    d5d0:	01010784 	movi	r4,1054
    d5d4:	2089c83a 	sub	r4,r4,r2
    d5d8:	01810cc4 	movi	r6,1075
    d5dc:	310dc83a 	sub	r6,r6,r4
    d5e0:	00c007c4 	movi	r3,31
    d5e4:	1980120e 	bge	r3,r6,d630 <__floatunsidf+0x78>
    d5e8:	00c104c4 	movi	r3,1043
    d5ec:	1907c83a 	sub	r3,r3,r4
    d5f0:	80ca983a 	sll	r5,r16,r3
    d5f4:	00800434 	movhi	r2,16
    d5f8:	10bfffc4 	addi	r2,r2,-1
    d5fc:	2101ffcc 	andi	r4,r4,2047
    d600:	0021883a 	mov	r16,zero
    d604:	288a703a 	and	r5,r5,r2
    d608:	2008953a 	slli	r4,r4,20
    d60c:	00c00434 	movhi	r3,16
    d610:	18ffffc4 	addi	r3,r3,-1
    d614:	28c6703a 	and	r3,r5,r3
    d618:	8005883a 	mov	r2,r16
    d61c:	1906b03a 	or	r3,r3,r4
    d620:	dfc00117 	ldw	ra,4(sp)
    d624:	dc000017 	ldw	r16,0(sp)
    d628:	dec00204 	addi	sp,sp,8
    d62c:	f800283a 	ret
    d630:	00c002c4 	movi	r3,11
    d634:	188bc83a 	sub	r5,r3,r2
    d638:	814ad83a 	srl	r5,r16,r5
    d63c:	00c00434 	movhi	r3,16
    d640:	18ffffc4 	addi	r3,r3,-1
    d644:	81a0983a 	sll	r16,r16,r6
    d648:	2101ffcc 	andi	r4,r4,2047
    d64c:	28ca703a 	and	r5,r5,r3
    d650:	003fed06 	br	d608 <__alt_data_end+0xfffc4228>
    d654:	0009883a 	mov	r4,zero
    d658:	000b883a 	mov	r5,zero
    d65c:	003fea06 	br	d608 <__alt_data_end+0xfffc4228>

0000d660 <__clzsi2>:
    d660:	00bfffd4 	movui	r2,65535
    d664:	11000536 	bltu	r2,r4,d67c <__clzsi2+0x1c>
    d668:	00803fc4 	movi	r2,255
    d66c:	11000f36 	bltu	r2,r4,d6ac <__clzsi2+0x4c>
    d670:	00800804 	movi	r2,32
    d674:	0007883a 	mov	r3,zero
    d678:	00000506 	br	d690 <__clzsi2+0x30>
    d67c:	00804034 	movhi	r2,256
    d680:	10bfffc4 	addi	r2,r2,-1
    d684:	11000c2e 	bgeu	r2,r4,d6b8 <__clzsi2+0x58>
    d688:	00800204 	movi	r2,8
    d68c:	00c00604 	movi	r3,24
    d690:	20c8d83a 	srl	r4,r4,r3
    d694:	00c00074 	movhi	r3,1
    d698:	18c20304 	addi	r3,r3,2060
    d69c:	1909883a 	add	r4,r3,r4
    d6a0:	20c00003 	ldbu	r3,0(r4)
    d6a4:	10c5c83a 	sub	r2,r2,r3
    d6a8:	f800283a 	ret
    d6ac:	00800604 	movi	r2,24
    d6b0:	00c00204 	movi	r3,8
    d6b4:	003ff606 	br	d690 <__alt_data_end+0xfffc42b0>
    d6b8:	00800404 	movi	r2,16
    d6bc:	1007883a 	mov	r3,r2
    d6c0:	003ff306 	br	d690 <__alt_data_end+0xfffc42b0>

0000d6c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d6c4:	defffe04 	addi	sp,sp,-8
    d6c8:	dfc00115 	stw	ra,4(sp)
    d6cc:	df000015 	stw	fp,0(sp)
    d6d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d6d4:	00800074 	movhi	r2,1
    d6d8:	10890604 	addi	r2,r2,9240
    d6dc:	10800017 	ldw	r2,0(r2)
    d6e0:	10000526 	beq	r2,zero,d6f8 <alt_get_errno+0x34>
    d6e4:	00800074 	movhi	r2,1
    d6e8:	10890604 	addi	r2,r2,9240
    d6ec:	10800017 	ldw	r2,0(r2)
    d6f0:	103ee83a 	callr	r2
    d6f4:	00000206 	br	d700 <alt_get_errno+0x3c>
    d6f8:	00800074 	movhi	r2,1
    d6fc:	108fcc04 	addi	r2,r2,16176
}
    d700:	e037883a 	mov	sp,fp
    d704:	dfc00117 	ldw	ra,4(sp)
    d708:	df000017 	ldw	fp,0(sp)
    d70c:	dec00204 	addi	sp,sp,8
    d710:	f800283a 	ret

0000d714 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d714:	defffb04 	addi	sp,sp,-20
    d718:	dfc00415 	stw	ra,16(sp)
    d71c:	df000315 	stw	fp,12(sp)
    d720:	df000304 	addi	fp,sp,12
    d724:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d728:	e0bfff17 	ldw	r2,-4(fp)
    d72c:	10000816 	blt	r2,zero,d750 <close+0x3c>
    d730:	01400304 	movi	r5,12
    d734:	e13fff17 	ldw	r4,-4(fp)
    d738:	000adf80 	call	adf8 <__mulsi3>
    d73c:	1007883a 	mov	r3,r2
    d740:	00800074 	movhi	r2,1
    d744:	10848304 	addi	r2,r2,4620
    d748:	1885883a 	add	r2,r3,r2
    d74c:	00000106 	br	d754 <close+0x40>
    d750:	0005883a 	mov	r2,zero
    d754:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d758:	e0bffd17 	ldw	r2,-12(fp)
    d75c:	10001926 	beq	r2,zero,d7c4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d760:	e0bffd17 	ldw	r2,-12(fp)
    d764:	10800017 	ldw	r2,0(r2)
    d768:	10800417 	ldw	r2,16(r2)
    d76c:	10000626 	beq	r2,zero,d788 <close+0x74>
    d770:	e0bffd17 	ldw	r2,-12(fp)
    d774:	10800017 	ldw	r2,0(r2)
    d778:	10800417 	ldw	r2,16(r2)
    d77c:	e13ffd17 	ldw	r4,-12(fp)
    d780:	103ee83a 	callr	r2
    d784:	00000106 	br	d78c <close+0x78>
    d788:	0005883a 	mov	r2,zero
    d78c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d790:	e13fff17 	ldw	r4,-4(fp)
    d794:	000de4c0 	call	de4c <alt_release_fd>
    if (rval < 0)
    d798:	e0bffe17 	ldw	r2,-8(fp)
    d79c:	1000070e 	bge	r2,zero,d7bc <close+0xa8>
    {
      ALT_ERRNO = -rval;
    d7a0:	000d6c40 	call	d6c4 <alt_get_errno>
    d7a4:	1007883a 	mov	r3,r2
    d7a8:	e0bffe17 	ldw	r2,-8(fp)
    d7ac:	0085c83a 	sub	r2,zero,r2
    d7b0:	18800015 	stw	r2,0(r3)
      return -1;
    d7b4:	00bfffc4 	movi	r2,-1
    d7b8:	00000706 	br	d7d8 <close+0xc4>
    }
    return 0;
    d7bc:	0005883a 	mov	r2,zero
    d7c0:	00000506 	br	d7d8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d7c4:	000d6c40 	call	d6c4 <alt_get_errno>
    d7c8:	1007883a 	mov	r3,r2
    d7cc:	00801444 	movi	r2,81
    d7d0:	18800015 	stw	r2,0(r3)
    return -1;
    d7d4:	00bfffc4 	movi	r2,-1
  }
}
    d7d8:	e037883a 	mov	sp,fp
    d7dc:	dfc00117 	ldw	ra,4(sp)
    d7e0:	df000017 	ldw	fp,0(sp)
    d7e4:	dec00204 	addi	sp,sp,8
    d7e8:	f800283a 	ret

0000d7ec <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d7ec:	defffc04 	addi	sp,sp,-16
    d7f0:	df000315 	stw	fp,12(sp)
    d7f4:	df000304 	addi	fp,sp,12
    d7f8:	e13ffd15 	stw	r4,-12(fp)
    d7fc:	e17ffe15 	stw	r5,-8(fp)
    d800:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d804:	e0bfff17 	ldw	r2,-4(fp)
}
    d808:	e037883a 	mov	sp,fp
    d80c:	df000017 	ldw	fp,0(sp)
    d810:	dec00104 	addi	sp,sp,4
    d814:	f800283a 	ret

0000d818 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d818:	defffe04 	addi	sp,sp,-8
    d81c:	dfc00115 	stw	ra,4(sp)
    d820:	df000015 	stw	fp,0(sp)
    d824:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d828:	00800074 	movhi	r2,1
    d82c:	10890604 	addi	r2,r2,9240
    d830:	10800017 	ldw	r2,0(r2)
    d834:	10000526 	beq	r2,zero,d84c <alt_get_errno+0x34>
    d838:	00800074 	movhi	r2,1
    d83c:	10890604 	addi	r2,r2,9240
    d840:	10800017 	ldw	r2,0(r2)
    d844:	103ee83a 	callr	r2
    d848:	00000206 	br	d854 <alt_get_errno+0x3c>
    d84c:	00800074 	movhi	r2,1
    d850:	108fcc04 	addi	r2,r2,16176
}
    d854:	e037883a 	mov	sp,fp
    d858:	dfc00117 	ldw	ra,4(sp)
    d85c:	df000017 	ldw	fp,0(sp)
    d860:	dec00204 	addi	sp,sp,8
    d864:	f800283a 	ret

0000d868 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d868:	defffb04 	addi	sp,sp,-20
    d86c:	dfc00415 	stw	ra,16(sp)
    d870:	df000315 	stw	fp,12(sp)
    d874:	df000304 	addi	fp,sp,12
    d878:	e13ffe15 	stw	r4,-8(fp)
    d87c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d880:	e0bffe17 	ldw	r2,-8(fp)
    d884:	10000816 	blt	r2,zero,d8a8 <fstat+0x40>
    d888:	01400304 	movi	r5,12
    d88c:	e13ffe17 	ldw	r4,-8(fp)
    d890:	000adf80 	call	adf8 <__mulsi3>
    d894:	1007883a 	mov	r3,r2
    d898:	00800074 	movhi	r2,1
    d89c:	10848304 	addi	r2,r2,4620
    d8a0:	1885883a 	add	r2,r3,r2
    d8a4:	00000106 	br	d8ac <fstat+0x44>
    d8a8:	0005883a 	mov	r2,zero
    d8ac:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d8b0:	e0bffd17 	ldw	r2,-12(fp)
    d8b4:	10001026 	beq	r2,zero,d8f8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d8b8:	e0bffd17 	ldw	r2,-12(fp)
    d8bc:	10800017 	ldw	r2,0(r2)
    d8c0:	10800817 	ldw	r2,32(r2)
    d8c4:	10000726 	beq	r2,zero,d8e4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    d8c8:	e0bffd17 	ldw	r2,-12(fp)
    d8cc:	10800017 	ldw	r2,0(r2)
    d8d0:	10800817 	ldw	r2,32(r2)
    d8d4:	e17fff17 	ldw	r5,-4(fp)
    d8d8:	e13ffd17 	ldw	r4,-12(fp)
    d8dc:	103ee83a 	callr	r2
    d8e0:	00000a06 	br	d90c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d8e4:	e0bfff17 	ldw	r2,-4(fp)
    d8e8:	00c80004 	movi	r3,8192
    d8ec:	10c00115 	stw	r3,4(r2)
      return 0;
    d8f0:	0005883a 	mov	r2,zero
    d8f4:	00000506 	br	d90c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d8f8:	000d8180 	call	d818 <alt_get_errno>
    d8fc:	1007883a 	mov	r3,r2
    d900:	00801444 	movi	r2,81
    d904:	18800015 	stw	r2,0(r3)
    return -1;
    d908:	00bfffc4 	movi	r2,-1
  }
}
    d90c:	e037883a 	mov	sp,fp
    d910:	dfc00117 	ldw	ra,4(sp)
    d914:	df000017 	ldw	fp,0(sp)
    d918:	dec00204 	addi	sp,sp,8
    d91c:	f800283a 	ret

0000d920 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d920:	defffe04 	addi	sp,sp,-8
    d924:	dfc00115 	stw	ra,4(sp)
    d928:	df000015 	stw	fp,0(sp)
    d92c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d930:	00800074 	movhi	r2,1
    d934:	10890604 	addi	r2,r2,9240
    d938:	10800017 	ldw	r2,0(r2)
    d93c:	10000526 	beq	r2,zero,d954 <alt_get_errno+0x34>
    d940:	00800074 	movhi	r2,1
    d944:	10890604 	addi	r2,r2,9240
    d948:	10800017 	ldw	r2,0(r2)
    d94c:	103ee83a 	callr	r2
    d950:	00000206 	br	d95c <alt_get_errno+0x3c>
    d954:	00800074 	movhi	r2,1
    d958:	108fcc04 	addi	r2,r2,16176
}
    d95c:	e037883a 	mov	sp,fp
    d960:	dfc00117 	ldw	ra,4(sp)
    d964:	df000017 	ldw	fp,0(sp)
    d968:	dec00204 	addi	sp,sp,8
    d96c:	f800283a 	ret

0000d970 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d970:	deffed04 	addi	sp,sp,-76
    d974:	dfc01215 	stw	ra,72(sp)
    d978:	df001115 	stw	fp,68(sp)
    d97c:	df001104 	addi	fp,sp,68
    d980:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d984:	e0bfff17 	ldw	r2,-4(fp)
    d988:	10000816 	blt	r2,zero,d9ac <isatty+0x3c>
    d98c:	01400304 	movi	r5,12
    d990:	e13fff17 	ldw	r4,-4(fp)
    d994:	000adf80 	call	adf8 <__mulsi3>
    d998:	1007883a 	mov	r3,r2
    d99c:	00800074 	movhi	r2,1
    d9a0:	10848304 	addi	r2,r2,4620
    d9a4:	1885883a 	add	r2,r3,r2
    d9a8:	00000106 	br	d9b0 <isatty+0x40>
    d9ac:	0005883a 	mov	r2,zero
    d9b0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d9b4:	e0bfef17 	ldw	r2,-68(fp)
    d9b8:	10000e26 	beq	r2,zero,d9f4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d9bc:	e0bfef17 	ldw	r2,-68(fp)
    d9c0:	10800017 	ldw	r2,0(r2)
    d9c4:	10800817 	ldw	r2,32(r2)
    d9c8:	1000021e 	bne	r2,zero,d9d4 <isatty+0x64>
    {
      return 1;
    d9cc:	00800044 	movi	r2,1
    d9d0:	00000d06 	br	da08 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d9d4:	e0bff004 	addi	r2,fp,-64
    d9d8:	100b883a 	mov	r5,r2
    d9dc:	e13fff17 	ldw	r4,-4(fp)
    d9e0:	000d8680 	call	d868 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d9e4:	e0bff117 	ldw	r2,-60(fp)
    d9e8:	10880020 	cmpeqi	r2,r2,8192
    d9ec:	10803fcc 	andi	r2,r2,255
    d9f0:	00000506 	br	da08 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d9f4:	000d9200 	call	d920 <alt_get_errno>
    d9f8:	1007883a 	mov	r3,r2
    d9fc:	00801444 	movi	r2,81
    da00:	18800015 	stw	r2,0(r3)
    return 0;
    da04:	0005883a 	mov	r2,zero
  }
}
    da08:	e037883a 	mov	sp,fp
    da0c:	dfc00117 	ldw	ra,4(sp)
    da10:	df000017 	ldw	fp,0(sp)
    da14:	dec00204 	addi	sp,sp,8
    da18:	f800283a 	ret

0000da1c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    da1c:	defffc04 	addi	sp,sp,-16
    da20:	df000315 	stw	fp,12(sp)
    da24:	df000304 	addi	fp,sp,12
    da28:	e13ffd15 	stw	r4,-12(fp)
    da2c:	e17ffe15 	stw	r5,-8(fp)
    da30:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    da34:	e0fffe17 	ldw	r3,-8(fp)
    da38:	e0bffd17 	ldw	r2,-12(fp)
    da3c:	18800c26 	beq	r3,r2,da70 <alt_load_section+0x54>
  {
    while( to != end )
    da40:	00000806 	br	da64 <alt_load_section+0x48>
    {
      *to++ = *from++;
    da44:	e0bffe17 	ldw	r2,-8(fp)
    da48:	10c00104 	addi	r3,r2,4
    da4c:	e0fffe15 	stw	r3,-8(fp)
    da50:	e0fffd17 	ldw	r3,-12(fp)
    da54:	19000104 	addi	r4,r3,4
    da58:	e13ffd15 	stw	r4,-12(fp)
    da5c:	18c00017 	ldw	r3,0(r3)
    da60:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    da64:	e0fffe17 	ldw	r3,-8(fp)
    da68:	e0bfff17 	ldw	r2,-4(fp)
    da6c:	18bff51e 	bne	r3,r2,da44 <__alt_data_end+0xfffc4664>
    {
      *to++ = *from++;
    }
  }
}
    da70:	0001883a 	nop
    da74:	e037883a 	mov	sp,fp
    da78:	df000017 	ldw	fp,0(sp)
    da7c:	dec00104 	addi	sp,sp,4
    da80:	f800283a 	ret

0000da84 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    da84:	defffe04 	addi	sp,sp,-8
    da88:	dfc00115 	stw	ra,4(sp)
    da8c:	df000015 	stw	fp,0(sp)
    da90:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    da94:	01800074 	movhi	r6,1
    da98:	31890b04 	addi	r6,r6,9260
    da9c:	01400074 	movhi	r5,1
    daa0:	29425004 	addi	r5,r5,2368
    daa4:	01000074 	movhi	r4,1
    daa8:	21090b04 	addi	r4,r4,9260
    daac:	000da1c0 	call	da1c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    dab0:	01800034 	movhi	r6,0
    dab4:	31808c04 	addi	r6,r6,560
    dab8:	01400034 	movhi	r5,0
    dabc:	29400804 	addi	r5,r5,32
    dac0:	01000034 	movhi	r4,0
    dac4:	21000804 	addi	r4,r4,32
    dac8:	000da1c0 	call	da1c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    dacc:	01800074 	movhi	r6,1
    dad0:	31825004 	addi	r6,r6,2368
    dad4:	01400074 	movhi	r5,1
    dad8:	29414304 	addi	r5,r5,1292
    dadc:	01000074 	movhi	r4,1
    dae0:	21014304 	addi	r4,r4,1292
    dae4:	000da1c0 	call	da1c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    dae8:	000f3d40 	call	f3d4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    daec:	000f5a80 	call	f5a8 <alt_icache_flush_all>
}
    daf0:	0001883a 	nop
    daf4:	e037883a 	mov	sp,fp
    daf8:	dfc00117 	ldw	ra,4(sp)
    dafc:	df000017 	ldw	fp,0(sp)
    db00:	dec00204 	addi	sp,sp,8
    db04:	f800283a 	ret

0000db08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    db08:	defffe04 	addi	sp,sp,-8
    db0c:	dfc00115 	stw	ra,4(sp)
    db10:	df000015 	stw	fp,0(sp)
    db14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    db18:	00800074 	movhi	r2,1
    db1c:	10890604 	addi	r2,r2,9240
    db20:	10800017 	ldw	r2,0(r2)
    db24:	10000526 	beq	r2,zero,db3c <alt_get_errno+0x34>
    db28:	00800074 	movhi	r2,1
    db2c:	10890604 	addi	r2,r2,9240
    db30:	10800017 	ldw	r2,0(r2)
    db34:	103ee83a 	callr	r2
    db38:	00000206 	br	db44 <alt_get_errno+0x3c>
    db3c:	00800074 	movhi	r2,1
    db40:	108fcc04 	addi	r2,r2,16176
}
    db44:	e037883a 	mov	sp,fp
    db48:	dfc00117 	ldw	ra,4(sp)
    db4c:	df000017 	ldw	fp,0(sp)
    db50:	dec00204 	addi	sp,sp,8
    db54:	f800283a 	ret

0000db58 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    db58:	defff904 	addi	sp,sp,-28
    db5c:	dfc00615 	stw	ra,24(sp)
    db60:	df000515 	stw	fp,20(sp)
    db64:	df000504 	addi	fp,sp,20
    db68:	e13ffd15 	stw	r4,-12(fp)
    db6c:	e17ffe15 	stw	r5,-8(fp)
    db70:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    db74:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    db78:	e0bffd17 	ldw	r2,-12(fp)
    db7c:	10000816 	blt	r2,zero,dba0 <lseek+0x48>
    db80:	01400304 	movi	r5,12
    db84:	e13ffd17 	ldw	r4,-12(fp)
    db88:	000adf80 	call	adf8 <__mulsi3>
    db8c:	1007883a 	mov	r3,r2
    db90:	00800074 	movhi	r2,1
    db94:	10848304 	addi	r2,r2,4620
    db98:	1885883a 	add	r2,r3,r2
    db9c:	00000106 	br	dba4 <lseek+0x4c>
    dba0:	0005883a 	mov	r2,zero
    dba4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    dba8:	e0bffc17 	ldw	r2,-16(fp)
    dbac:	10001026 	beq	r2,zero,dbf0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    dbb0:	e0bffc17 	ldw	r2,-16(fp)
    dbb4:	10800017 	ldw	r2,0(r2)
    dbb8:	10800717 	ldw	r2,28(r2)
    dbbc:	10000926 	beq	r2,zero,dbe4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    dbc0:	e0bffc17 	ldw	r2,-16(fp)
    dbc4:	10800017 	ldw	r2,0(r2)
    dbc8:	10800717 	ldw	r2,28(r2)
    dbcc:	e1bfff17 	ldw	r6,-4(fp)
    dbd0:	e17ffe17 	ldw	r5,-8(fp)
    dbd4:	e13ffc17 	ldw	r4,-16(fp)
    dbd8:	103ee83a 	callr	r2
    dbdc:	e0bffb15 	stw	r2,-20(fp)
    dbe0:	00000506 	br	dbf8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    dbe4:	00bfde84 	movi	r2,-134
    dbe8:	e0bffb15 	stw	r2,-20(fp)
    dbec:	00000206 	br	dbf8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    dbf0:	00bfebc4 	movi	r2,-81
    dbf4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    dbf8:	e0bffb17 	ldw	r2,-20(fp)
    dbfc:	1000070e 	bge	r2,zero,dc1c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    dc00:	000db080 	call	db08 <alt_get_errno>
    dc04:	1007883a 	mov	r3,r2
    dc08:	e0bffb17 	ldw	r2,-20(fp)
    dc0c:	0085c83a 	sub	r2,zero,r2
    dc10:	18800015 	stw	r2,0(r3)
    rc = -1;
    dc14:	00bfffc4 	movi	r2,-1
    dc18:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    dc1c:	e0bffb17 	ldw	r2,-20(fp)
}
    dc20:	e037883a 	mov	sp,fp
    dc24:	dfc00117 	ldw	ra,4(sp)
    dc28:	df000017 	ldw	fp,0(sp)
    dc2c:	dec00204 	addi	sp,sp,8
    dc30:	f800283a 	ret

0000dc34 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    dc34:	defffd04 	addi	sp,sp,-12
    dc38:	dfc00215 	stw	ra,8(sp)
    dc3c:	df000115 	stw	fp,4(sp)
    dc40:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    dc44:	0009883a 	mov	r4,zero
    dc48:	000e1380 	call	e138 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    dc4c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    dc50:	000e1700 	call	e170 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    dc54:	01800074 	movhi	r6,1
    dc58:	31824604 	addi	r6,r6,2328
    dc5c:	01400074 	movhi	r5,1
    dc60:	29424604 	addi	r5,r5,2328
    dc64:	01000074 	movhi	r4,1
    dc68:	21024604 	addi	r4,r4,2328
    dc6c:	000f97c0 	call	f97c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    dc70:	000f4e80 	call	f4e8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    dc74:	01000074 	movhi	r4,1
    dc78:	213d5204 	addi	r4,r4,-2744
    dc7c:	00101780 	call	10178 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    dc80:	d0a6d217 	ldw	r2,-25784(gp)
    dc84:	d0e6d317 	ldw	r3,-25780(gp)
    dc88:	d126d417 	ldw	r4,-25776(gp)
    dc8c:	200d883a 	mov	r6,r4
    dc90:	180b883a 	mov	r5,r3
    dc94:	1009883a 	mov	r4,r2
    dc98:	000026c0 	call	26c <main>
    dc9c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    dca0:	01000044 	movi	r4,1
    dca4:	000d7140 	call	d714 <close>
  exit (result);
    dca8:	e13fff17 	ldw	r4,-4(fp)
    dcac:	001018c0 	call	1018c <exit>

0000dcb0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    dcb0:	defffe04 	addi	sp,sp,-8
    dcb4:	df000115 	stw	fp,4(sp)
    dcb8:	df000104 	addi	fp,sp,4
    dcbc:	e13fff15 	stw	r4,-4(fp)
}
    dcc0:	0001883a 	nop
    dcc4:	e037883a 	mov	sp,fp
    dcc8:	df000017 	ldw	fp,0(sp)
    dccc:	dec00104 	addi	sp,sp,4
    dcd0:	f800283a 	ret

0000dcd4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    dcd4:	defffe04 	addi	sp,sp,-8
    dcd8:	df000115 	stw	fp,4(sp)
    dcdc:	df000104 	addi	fp,sp,4
    dce0:	e13fff15 	stw	r4,-4(fp)
}
    dce4:	0001883a 	nop
    dce8:	e037883a 	mov	sp,fp
    dcec:	df000017 	ldw	fp,0(sp)
    dcf0:	dec00104 	addi	sp,sp,4
    dcf4:	f800283a 	ret

0000dcf8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dcf8:	defffe04 	addi	sp,sp,-8
    dcfc:	dfc00115 	stw	ra,4(sp)
    dd00:	df000015 	stw	fp,0(sp)
    dd04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dd08:	00800074 	movhi	r2,1
    dd0c:	10890604 	addi	r2,r2,9240
    dd10:	10800017 	ldw	r2,0(r2)
    dd14:	10000526 	beq	r2,zero,dd2c <alt_get_errno+0x34>
    dd18:	00800074 	movhi	r2,1
    dd1c:	10890604 	addi	r2,r2,9240
    dd20:	10800017 	ldw	r2,0(r2)
    dd24:	103ee83a 	callr	r2
    dd28:	00000206 	br	dd34 <alt_get_errno+0x3c>
    dd2c:	00800074 	movhi	r2,1
    dd30:	108fcc04 	addi	r2,r2,16176
}
    dd34:	e037883a 	mov	sp,fp
    dd38:	dfc00117 	ldw	ra,4(sp)
    dd3c:	df000017 	ldw	fp,0(sp)
    dd40:	dec00204 	addi	sp,sp,8
    dd44:	f800283a 	ret

0000dd48 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    dd48:	defff904 	addi	sp,sp,-28
    dd4c:	dfc00615 	stw	ra,24(sp)
    dd50:	df000515 	stw	fp,20(sp)
    dd54:	df000504 	addi	fp,sp,20
    dd58:	e13ffd15 	stw	r4,-12(fp)
    dd5c:	e17ffe15 	stw	r5,-8(fp)
    dd60:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dd64:	e0bffd17 	ldw	r2,-12(fp)
    dd68:	10000816 	blt	r2,zero,dd8c <read+0x44>
    dd6c:	01400304 	movi	r5,12
    dd70:	e13ffd17 	ldw	r4,-12(fp)
    dd74:	000adf80 	call	adf8 <__mulsi3>
    dd78:	1007883a 	mov	r3,r2
    dd7c:	00800074 	movhi	r2,1
    dd80:	10848304 	addi	r2,r2,4620
    dd84:	1885883a 	add	r2,r3,r2
    dd88:	00000106 	br	dd90 <read+0x48>
    dd8c:	0005883a 	mov	r2,zero
    dd90:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    dd94:	e0bffb17 	ldw	r2,-20(fp)
    dd98:	10002226 	beq	r2,zero,de24 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    dd9c:	e0bffb17 	ldw	r2,-20(fp)
    dda0:	10800217 	ldw	r2,8(r2)
    dda4:	108000cc 	andi	r2,r2,3
    dda8:	10800060 	cmpeqi	r2,r2,1
    ddac:	1000181e 	bne	r2,zero,de10 <read+0xc8>
        (fd->dev->read))
    ddb0:	e0bffb17 	ldw	r2,-20(fp)
    ddb4:	10800017 	ldw	r2,0(r2)
    ddb8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ddbc:	10001426 	beq	r2,zero,de10 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    ddc0:	e0bffb17 	ldw	r2,-20(fp)
    ddc4:	10800017 	ldw	r2,0(r2)
    ddc8:	10800517 	ldw	r2,20(r2)
    ddcc:	e0ffff17 	ldw	r3,-4(fp)
    ddd0:	180d883a 	mov	r6,r3
    ddd4:	e17ffe17 	ldw	r5,-8(fp)
    ddd8:	e13ffb17 	ldw	r4,-20(fp)
    dddc:	103ee83a 	callr	r2
    dde0:	e0bffc15 	stw	r2,-16(fp)
    dde4:	e0bffc17 	ldw	r2,-16(fp)
    dde8:	1000070e 	bge	r2,zero,de08 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    ddec:	000dcf80 	call	dcf8 <alt_get_errno>
    ddf0:	1007883a 	mov	r3,r2
    ddf4:	e0bffc17 	ldw	r2,-16(fp)
    ddf8:	0085c83a 	sub	r2,zero,r2
    ddfc:	18800015 	stw	r2,0(r3)
          return -1;
    de00:	00bfffc4 	movi	r2,-1
    de04:	00000c06 	br	de38 <read+0xf0>
        }
        return rval;
    de08:	e0bffc17 	ldw	r2,-16(fp)
    de0c:	00000a06 	br	de38 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    de10:	000dcf80 	call	dcf8 <alt_get_errno>
    de14:	1007883a 	mov	r3,r2
    de18:	00800344 	movi	r2,13
    de1c:	18800015 	stw	r2,0(r3)
    de20:	00000406 	br	de34 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    de24:	000dcf80 	call	dcf8 <alt_get_errno>
    de28:	1007883a 	mov	r3,r2
    de2c:	00801444 	movi	r2,81
    de30:	18800015 	stw	r2,0(r3)
  }
  return -1;
    de34:	00bfffc4 	movi	r2,-1
}
    de38:	e037883a 	mov	sp,fp
    de3c:	dfc00117 	ldw	ra,4(sp)
    de40:	df000017 	ldw	fp,0(sp)
    de44:	dec00204 	addi	sp,sp,8
    de48:	f800283a 	ret

0000de4c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    de4c:	defffc04 	addi	sp,sp,-16
    de50:	dfc00315 	stw	ra,12(sp)
    de54:	df000215 	stw	fp,8(sp)
    de58:	dc000115 	stw	r16,4(sp)
    de5c:	df000204 	addi	fp,sp,8
    de60:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    de64:	e0bffe17 	ldw	r2,-8(fp)
    de68:	108000d0 	cmplti	r2,r2,3
    de6c:	1000111e 	bne	r2,zero,deb4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    de70:	04000074 	movhi	r16,1
    de74:	84048304 	addi	r16,r16,4620
    de78:	e0bffe17 	ldw	r2,-8(fp)
    de7c:	01400304 	movi	r5,12
    de80:	1009883a 	mov	r4,r2
    de84:	000adf80 	call	adf8 <__mulsi3>
    de88:	8085883a 	add	r2,r16,r2
    de8c:	10800204 	addi	r2,r2,8
    de90:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    de94:	04000074 	movhi	r16,1
    de98:	84048304 	addi	r16,r16,4620
    de9c:	e0bffe17 	ldw	r2,-8(fp)
    dea0:	01400304 	movi	r5,12
    dea4:	1009883a 	mov	r4,r2
    dea8:	000adf80 	call	adf8 <__mulsi3>
    deac:	8085883a 	add	r2,r16,r2
    deb0:	10000015 	stw	zero,0(r2)
  }
}
    deb4:	0001883a 	nop
    deb8:	e6ffff04 	addi	sp,fp,-4
    debc:	dfc00217 	ldw	ra,8(sp)
    dec0:	df000117 	ldw	fp,4(sp)
    dec4:	dc000017 	ldw	r16,0(sp)
    dec8:	dec00304 	addi	sp,sp,12
    decc:	f800283a 	ret

0000ded0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    ded0:	defff904 	addi	sp,sp,-28
    ded4:	df000615 	stw	fp,24(sp)
    ded8:	df000604 	addi	fp,sp,24
    dedc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dee0:	0005303a 	rdctl	r2,status
    dee4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dee8:	e0fffe17 	ldw	r3,-8(fp)
    deec:	00bfff84 	movi	r2,-2
    def0:	1884703a 	and	r2,r3,r2
    def4:	1001703a 	wrctl	status,r2
  
  return context;
    def8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    defc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    df00:	d0a00c17 	ldw	r2,-32720(gp)
    df04:	10c000c4 	addi	r3,r2,3
    df08:	00bfff04 	movi	r2,-4
    df0c:	1884703a 	and	r2,r3,r2
    df10:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    df14:	d0e00c17 	ldw	r3,-32720(gp)
    df18:	e0bfff17 	ldw	r2,-4(fp)
    df1c:	1887883a 	add	r3,r3,r2
    df20:	00800174 	movhi	r2,5
    df24:	10a4f804 	addi	r2,r2,-27680
    df28:	10c0062e 	bgeu	r2,r3,df44 <sbrk+0x74>
    df2c:	e0bffb17 	ldw	r2,-20(fp)
    df30:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    df34:	e0bffa17 	ldw	r2,-24(fp)
    df38:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    df3c:	00bfffc4 	movi	r2,-1
    df40:	00000b06 	br	df70 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    df44:	d0a00c17 	ldw	r2,-32720(gp)
    df48:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    df4c:	d0e00c17 	ldw	r3,-32720(gp)
    df50:	e0bfff17 	ldw	r2,-4(fp)
    df54:	1885883a 	add	r2,r3,r2
    df58:	d0a00c15 	stw	r2,-32720(gp)
    df5c:	e0bffb17 	ldw	r2,-20(fp)
    df60:	e0bffc15 	stw	r2,-16(fp)
    df64:	e0bffc17 	ldw	r2,-16(fp)
    df68:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    df6c:	e0bffd17 	ldw	r2,-12(fp)
} 
    df70:	e037883a 	mov	sp,fp
    df74:	df000017 	ldw	fp,0(sp)
    df78:	dec00104 	addi	sp,sp,4
    df7c:	f800283a 	ret

0000df80 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    df80:	defffd04 	addi	sp,sp,-12
    df84:	dfc00215 	stw	ra,8(sp)
    df88:	df000115 	stw	fp,4(sp)
    df8c:	df000104 	addi	fp,sp,4
    df90:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    df94:	e13fff17 	ldw	r4,-4(fp)
    df98:	000f27c0 	call	f27c <alt_busy_sleep>
}
    df9c:	e037883a 	mov	sp,fp
    dfa0:	dfc00117 	ldw	ra,4(sp)
    dfa4:	df000017 	ldw	fp,0(sp)
    dfa8:	dec00204 	addi	sp,sp,8
    dfac:	f800283a 	ret

0000dfb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dfb0:	defffe04 	addi	sp,sp,-8
    dfb4:	dfc00115 	stw	ra,4(sp)
    dfb8:	df000015 	stw	fp,0(sp)
    dfbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dfc0:	00800074 	movhi	r2,1
    dfc4:	10890604 	addi	r2,r2,9240
    dfc8:	10800017 	ldw	r2,0(r2)
    dfcc:	10000526 	beq	r2,zero,dfe4 <alt_get_errno+0x34>
    dfd0:	00800074 	movhi	r2,1
    dfd4:	10890604 	addi	r2,r2,9240
    dfd8:	10800017 	ldw	r2,0(r2)
    dfdc:	103ee83a 	callr	r2
    dfe0:	00000206 	br	dfec <alt_get_errno+0x3c>
    dfe4:	00800074 	movhi	r2,1
    dfe8:	108fcc04 	addi	r2,r2,16176
}
    dfec:	e037883a 	mov	sp,fp
    dff0:	dfc00117 	ldw	ra,4(sp)
    dff4:	df000017 	ldw	fp,0(sp)
    dff8:	dec00204 	addi	sp,sp,8
    dffc:	f800283a 	ret

0000e000 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    e000:	defff904 	addi	sp,sp,-28
    e004:	dfc00615 	stw	ra,24(sp)
    e008:	df000515 	stw	fp,20(sp)
    e00c:	df000504 	addi	fp,sp,20
    e010:	e13ffd15 	stw	r4,-12(fp)
    e014:	e17ffe15 	stw	r5,-8(fp)
    e018:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e01c:	e0bffd17 	ldw	r2,-12(fp)
    e020:	10000816 	blt	r2,zero,e044 <write+0x44>
    e024:	01400304 	movi	r5,12
    e028:	e13ffd17 	ldw	r4,-12(fp)
    e02c:	000adf80 	call	adf8 <__mulsi3>
    e030:	1007883a 	mov	r3,r2
    e034:	00800074 	movhi	r2,1
    e038:	10848304 	addi	r2,r2,4620
    e03c:	1885883a 	add	r2,r3,r2
    e040:	00000106 	br	e048 <write+0x48>
    e044:	0005883a 	mov	r2,zero
    e048:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e04c:	e0bffb17 	ldw	r2,-20(fp)
    e050:	10002126 	beq	r2,zero,e0d8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    e054:	e0bffb17 	ldw	r2,-20(fp)
    e058:	10800217 	ldw	r2,8(r2)
    e05c:	108000cc 	andi	r2,r2,3
    e060:	10001826 	beq	r2,zero,e0c4 <write+0xc4>
    e064:	e0bffb17 	ldw	r2,-20(fp)
    e068:	10800017 	ldw	r2,0(r2)
    e06c:	10800617 	ldw	r2,24(r2)
    e070:	10001426 	beq	r2,zero,e0c4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    e074:	e0bffb17 	ldw	r2,-20(fp)
    e078:	10800017 	ldw	r2,0(r2)
    e07c:	10800617 	ldw	r2,24(r2)
    e080:	e0ffff17 	ldw	r3,-4(fp)
    e084:	180d883a 	mov	r6,r3
    e088:	e17ffe17 	ldw	r5,-8(fp)
    e08c:	e13ffb17 	ldw	r4,-20(fp)
    e090:	103ee83a 	callr	r2
    e094:	e0bffc15 	stw	r2,-16(fp)
    e098:	e0bffc17 	ldw	r2,-16(fp)
    e09c:	1000070e 	bge	r2,zero,e0bc <write+0xbc>
      {
        ALT_ERRNO = -rval;
    e0a0:	000dfb00 	call	dfb0 <alt_get_errno>
    e0a4:	1007883a 	mov	r3,r2
    e0a8:	e0bffc17 	ldw	r2,-16(fp)
    e0ac:	0085c83a 	sub	r2,zero,r2
    e0b0:	18800015 	stw	r2,0(r3)
        return -1;
    e0b4:	00bfffc4 	movi	r2,-1
    e0b8:	00000c06 	br	e0ec <write+0xec>
      }
      return rval;
    e0bc:	e0bffc17 	ldw	r2,-16(fp)
    e0c0:	00000a06 	br	e0ec <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    e0c4:	000dfb00 	call	dfb0 <alt_get_errno>
    e0c8:	1007883a 	mov	r3,r2
    e0cc:	00800344 	movi	r2,13
    e0d0:	18800015 	stw	r2,0(r3)
    e0d4:	00000406 	br	e0e8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    e0d8:	000dfb00 	call	dfb0 <alt_get_errno>
    e0dc:	1007883a 	mov	r3,r2
    e0e0:	00801444 	movi	r2,81
    e0e4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e0e8:	00bfffc4 	movi	r2,-1
}
    e0ec:	e037883a 	mov	sp,fp
    e0f0:	dfc00117 	ldw	ra,4(sp)
    e0f4:	df000017 	ldw	fp,0(sp)
    e0f8:	dec00204 	addi	sp,sp,8
    e0fc:	f800283a 	ret

0000e100 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    e100:	defffd04 	addi	sp,sp,-12
    e104:	dfc00215 	stw	ra,8(sp)
    e108:	df000115 	stw	fp,4(sp)
    e10c:	df000104 	addi	fp,sp,4
    e110:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    e114:	01400074 	movhi	r5,1
    e118:	29490304 	addi	r5,r5,9228
    e11c:	e13fff17 	ldw	r4,-4(fp)
    e120:	000f4440 	call	f444 <alt_dev_llist_insert>
}
    e124:	e037883a 	mov	sp,fp
    e128:	dfc00117 	ldw	ra,4(sp)
    e12c:	df000017 	ldw	fp,0(sp)
    e130:	dec00204 	addi	sp,sp,8
    e134:	f800283a 	ret

0000e138 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    e138:	defffd04 	addi	sp,sp,-12
    e13c:	dfc00215 	stw	ra,8(sp)
    e140:	df000115 	stw	fp,4(sp)
    e144:	df000104 	addi	fp,sp,4
    e148:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    e14c:	000fe400 	call	fe40 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    e150:	00800044 	movi	r2,1
    e154:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    e158:	0001883a 	nop
    e15c:	e037883a 	mov	sp,fp
    e160:	dfc00117 	ldw	ra,4(sp)
    e164:	df000017 	ldw	fp,0(sp)
    e168:	dec00204 	addi	sp,sp,8
    e16c:	f800283a 	ret

0000e170 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    e170:	defffe04 	addi	sp,sp,-8
    e174:	dfc00115 	stw	ra,4(sp)
    e178:	df000015 	stw	fp,0(sp)
    e17c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_FIFO_INIT ( FIFO_0, fifo_0);
    e180:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_1, fifo_1);
    e184:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    e188:	000d883a 	mov	r6,zero
    e18c:	000b883a 	mov	r5,zero
    e190:	01000074 	movhi	r4,1
    e194:	2104ed04 	addi	r4,r4,5044
    e198:	000e8280 	call	e828 <altera_avalon_jtag_uart_init>
    e19c:	01000074 	movhi	r4,1
    e1a0:	2104e304 	addi	r4,r4,5004
    e1a4:	000e1000 	call	e100 <alt_dev_reg>
}
    e1a8:	0001883a 	nop
    e1ac:	e037883a 	mov	sp,fp
    e1b0:	dfc00117 	ldw	ra,4(sp)
    e1b4:	df000017 	ldw	fp,0(sp)
    e1b8:	dec00204 	addi	sp,sp,8
    e1bc:	f800283a 	ret

0000e1c0 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
    e1c0:	defffa04 	addi	sp,sp,-24
    e1c4:	dfc00515 	stw	ra,20(sp)
    e1c8:	df000415 	stw	fp,16(sp)
    e1cc:	df000404 	addi	fp,sp,16
    e1d0:	e13ffc15 	stw	r4,-16(fp)
    e1d4:	e17ffd15 	stw	r5,-12(fp)
    e1d8:	e1bffe15 	stw	r6,-8(fp)
    e1dc:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
    e1e0:	01400fc4 	movi	r5,63
    e1e4:	e13ffc17 	ldw	r4,-16(fp)
    e1e8:	000e38c0 	call	e38c <altera_avalon_fifo_clear_event>
    e1ec:	10000226 	beq	r2,zero,e1f8 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    e1f0:	00bfffc4 	movi	r2,-1
    e1f4:	00001306 	br	e244 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
    e1f8:	e17ffd17 	ldw	r5,-12(fp)
    e1fc:	e13ffc17 	ldw	r4,-16(fp)
    e200:	000e3ec0 	call	e3ec <altera_avalon_fifo_write_ienable>
    e204:	10000226 	beq	r2,zero,e210 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    e208:	00bfff84 	movi	r2,-2
    e20c:	00000d06 	br	e244 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
    e210:	e17fff17 	ldw	r5,-4(fp)
    e214:	e13ffc17 	ldw	r4,-16(fp)
    e218:	000e4480 	call	e448 <altera_avalon_fifo_write_almostfull>
    e21c:	10000226 	beq	r2,zero,e228 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    e220:	00bfff44 	movi	r2,-3
    e224:	00000706 	br	e244 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
    e228:	e17ffe17 	ldw	r5,-8(fp)
    e22c:	e13ffc17 	ldw	r4,-16(fp)
    e230:	000e4a40 	call	e4a4 <altera_avalon_fifo_write_almostempty>
    e234:	10000226 	beq	r2,zero,e240 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    e238:	00bfff44 	movi	r2,-3
    e23c:	00000106 	br	e244 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
    e240:	0005883a 	mov	r2,zero
}
    e244:	e037883a 	mov	sp,fp
    e248:	dfc00117 	ldw	ra,4(sp)
    e24c:	df000017 	ldw	fp,0(sp)
    e250:	dec00204 	addi	sp,sp,8
    e254:	f800283a 	ret

0000e258 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    e258:	defffd04 	addi	sp,sp,-12
    e25c:	df000215 	stw	fp,8(sp)
    e260:	df000204 	addi	fp,sp,8
    e264:	e13ffe15 	stw	r4,-8(fp)
    e268:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
    e26c:	e0bffe17 	ldw	r2,-8(fp)
    e270:	10800104 	addi	r2,r2,4
    e274:	10800037 	ldwio	r2,0(r2)
    e278:	1007883a 	mov	r3,r2
    e27c:	e0bfff17 	ldw	r2,-4(fp)
    e280:	1884703a 	and	r2,r3,r2
}
    e284:	e037883a 	mov	sp,fp
    e288:	df000017 	ldw	fp,0(sp)
    e28c:	dec00104 	addi	sp,sp,4
    e290:	f800283a 	ret

0000e294 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
    e294:	defffd04 	addi	sp,sp,-12
    e298:	df000215 	stw	fp,8(sp)
    e29c:	df000204 	addi	fp,sp,8
    e2a0:	e13ffe15 	stw	r4,-8(fp)
    e2a4:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
    e2a8:	e0bffe17 	ldw	r2,-8(fp)
    e2ac:	10800304 	addi	r2,r2,12
    e2b0:	10800037 	ldwio	r2,0(r2)
    e2b4:	1007883a 	mov	r3,r2
    e2b8:	e0bfff17 	ldw	r2,-4(fp)
    e2bc:	1884703a 	and	r2,r3,r2
}
    e2c0:	e037883a 	mov	sp,fp
    e2c4:	df000017 	ldw	fp,0(sp)
    e2c8:	dec00104 	addi	sp,sp,4
    e2cc:	f800283a 	ret

0000e2d0 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
    e2d0:	defffe04 	addi	sp,sp,-8
    e2d4:	df000115 	stw	fp,4(sp)
    e2d8:	df000104 	addi	fp,sp,4
    e2dc:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
    e2e0:	e0bfff17 	ldw	r2,-4(fp)
    e2e4:	10800404 	addi	r2,r2,16
    e2e8:	10800037 	ldwio	r2,0(r2)
}
    e2ec:	e037883a 	mov	sp,fp
    e2f0:	df000017 	ldw	fp,0(sp)
    e2f4:	dec00104 	addi	sp,sp,4
    e2f8:	f800283a 	ret

0000e2fc <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
    e2fc:	defffe04 	addi	sp,sp,-8
    e300:	df000115 	stw	fp,4(sp)
    e304:	df000104 	addi	fp,sp,4
    e308:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
    e30c:	e0bfff17 	ldw	r2,-4(fp)
    e310:	10800504 	addi	r2,r2,20
    e314:	10800037 	ldwio	r2,0(r2)
}
    e318:	e037883a 	mov	sp,fp
    e31c:	df000017 	ldw	fp,0(sp)
    e320:	dec00104 	addi	sp,sp,4
    e324:	f800283a 	ret

0000e328 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
    e328:	defffd04 	addi	sp,sp,-12
    e32c:	df000215 	stw	fp,8(sp)
    e330:	df000204 	addi	fp,sp,8
    e334:	e13ffe15 	stw	r4,-8(fp)
    e338:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
    e33c:	e0bffe17 	ldw	r2,-8(fp)
    e340:	10800204 	addi	r2,r2,8
    e344:	10800037 	ldwio	r2,0(r2)
    e348:	1007883a 	mov	r3,r2
    e34c:	e0bfff17 	ldw	r2,-4(fp)
    e350:	1884703a 	and	r2,r3,r2
}
    e354:	e037883a 	mov	sp,fp
    e358:	df000017 	ldw	fp,0(sp)
    e35c:	dec00104 	addi	sp,sp,4
    e360:	f800283a 	ret

0000e364 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
    e364:	defffe04 	addi	sp,sp,-8
    e368:	df000115 	stw	fp,4(sp)
    e36c:	df000104 	addi	fp,sp,4
    e370:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
    e374:	e0bfff17 	ldw	r2,-4(fp)
    e378:	10800037 	ldwio	r2,0(r2)
}
    e37c:	e037883a 	mov	sp,fp
    e380:	df000017 	ldw	fp,0(sp)
    e384:	dec00104 	addi	sp,sp,4
    e388:	f800283a 	ret

0000e38c <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
    e38c:	defffd04 	addi	sp,sp,-12
    e390:	df000215 	stw	fp,8(sp)
    e394:	df000204 	addi	fp,sp,8
    e398:	e13ffe15 	stw	r4,-8(fp)
    e39c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
    e3a0:	e0bffe17 	ldw	r2,-8(fp)
    e3a4:	10800204 	addi	r2,r2,8
    e3a8:	1007883a 	mov	r3,r2
    e3ac:	e0bfff17 	ldw	r2,-4(fp)
    e3b0:	18800035 	stwio	r2,0(r3)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
    e3b4:	e0bffe17 	ldw	r2,-8(fp)
    e3b8:	10800204 	addi	r2,r2,8
    e3bc:	10800037 	ldwio	r2,0(r2)
    e3c0:	1007883a 	mov	r3,r2
    e3c4:	e0bfff17 	ldw	r2,-4(fp)
    e3c8:	1884703a 	and	r2,r3,r2
    e3cc:	1000021e 	bne	r2,zero,e3d8 <altera_avalon_fifo_clear_event+0x4c>
        return ALTERA_AVALON_FIFO_OK;
    e3d0:	0005883a 	mov	r2,zero
    e3d4:	00000106 	br	e3dc <altera_avalon_fifo_clear_event+0x50>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    e3d8:	00bfffc4 	movi	r2,-1
}
    e3dc:	e037883a 	mov	sp,fp
    e3e0:	df000017 	ldw	fp,0(sp)
    e3e4:	dec00104 	addi	sp,sp,4
    e3e8:	f800283a 	ret

0000e3ec <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    e3ec:	defffd04 	addi	sp,sp,-12
    e3f0:	df000215 	stw	fp,8(sp)
    e3f4:	df000204 	addi	fp,sp,8
    e3f8:	e13ffe15 	stw	r4,-8(fp)
    e3fc:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
    e400:	e0bffe17 	ldw	r2,-8(fp)
    e404:	10800304 	addi	r2,r2,12
    e408:	1007883a 	mov	r3,r2
    e40c:	e0bfff17 	ldw	r2,-4(fp)
    e410:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
    e414:	e0bffe17 	ldw	r2,-8(fp)
    e418:	10800304 	addi	r2,r2,12
    e41c:	10800037 	ldwio	r2,0(r2)
    e420:	1007883a 	mov	r3,r2
    e424:	e0bfff17 	ldw	r2,-4(fp)
    e428:	1880021e 	bne	r3,r2,e434 <altera_avalon_fifo_write_ienable+0x48>
        return ALTERA_AVALON_FIFO_OK;
    e42c:	0005883a 	mov	r2,zero
    e430:	00000106 	br	e438 <altera_avalon_fifo_write_ienable+0x4c>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    e434:	00bfff84 	movi	r2,-2
}
    e438:	e037883a 	mov	sp,fp
    e43c:	df000017 	ldw	fp,0(sp)
    e440:	dec00104 	addi	sp,sp,4
    e444:	f800283a 	ret

0000e448 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    e448:	defffd04 	addi	sp,sp,-12
    e44c:	df000215 	stw	fp,8(sp)
    e450:	df000204 	addi	fp,sp,8
    e454:	e13ffe15 	stw	r4,-8(fp)
    e458:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
    e45c:	e0bffe17 	ldw	r2,-8(fp)
    e460:	10800404 	addi	r2,r2,16
    e464:	1007883a 	mov	r3,r2
    e468:	e0bfff17 	ldw	r2,-4(fp)
    e46c:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
    e470:	e0bffe17 	ldw	r2,-8(fp)
    e474:	10800404 	addi	r2,r2,16
    e478:	10800037 	ldwio	r2,0(r2)
    e47c:	1007883a 	mov	r3,r2
    e480:	e0bfff17 	ldw	r2,-4(fp)
    e484:	1880021e 	bne	r3,r2,e490 <altera_avalon_fifo_write_almostfull+0x48>
        return ALTERA_AVALON_FIFO_OK;
    e488:	0005883a 	mov	r2,zero
    e48c:	00000106 	br	e494 <altera_avalon_fifo_write_almostfull+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    e490:	00bfff44 	movi	r2,-3
}
    e494:	e037883a 	mov	sp,fp
    e498:	df000017 	ldw	fp,0(sp)
    e49c:	dec00104 	addi	sp,sp,4
    e4a0:	f800283a 	ret

0000e4a4 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    e4a4:	defffd04 	addi	sp,sp,-12
    e4a8:	df000215 	stw	fp,8(sp)
    e4ac:	df000204 	addi	fp,sp,8
    e4b0:	e13ffe15 	stw	r4,-8(fp)
    e4b4:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
    e4b8:	e0bffe17 	ldw	r2,-8(fp)
    e4bc:	10800504 	addi	r2,r2,20
    e4c0:	1007883a 	mov	r3,r2
    e4c4:	e0bfff17 	ldw	r2,-4(fp)
    e4c8:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
    e4cc:	e0bffe17 	ldw	r2,-8(fp)
    e4d0:	10800504 	addi	r2,r2,20
    e4d4:	10800037 	ldwio	r2,0(r2)
    e4d8:	1007883a 	mov	r3,r2
    e4dc:	e0bfff17 	ldw	r2,-4(fp)
    e4e0:	1880021e 	bne	r3,r2,e4ec <altera_avalon_fifo_write_almostempty+0x48>
        return ALTERA_AVALON_FIFO_OK;
    e4e4:	0005883a 	mov	r2,zero
    e4e8:	00000106 	br	e4f0 <altera_avalon_fifo_write_almostempty+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    e4ec:	00bfff44 	movi	r2,-3
}
    e4f0:	e037883a 	mov	sp,fp
    e4f4:	df000017 	ldw	fp,0(sp)
    e4f8:	dec00104 	addi	sp,sp,4
    e4fc:	f800283a 	ret

0000e500 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
    e500:	defffb04 	addi	sp,sp,-20
    e504:	dfc00415 	stw	ra,16(sp)
    e508:	df000315 	stw	fp,12(sp)
    e50c:	df000304 	addi	fp,sp,12
    e510:	e13ffd15 	stw	r4,-12(fp)
    e514:	e17ffe15 	stw	r5,-8(fp)
    e518:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
    e51c:	01400044 	movi	r5,1
    e520:	e13ffe17 	ldw	r4,-8(fp)
    e524:	000e2580 	call	e258 <altera_avalon_fifo_read_status>
    e528:	1000051e 	bne	r2,zero,e540 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
    e52c:	e0bffd17 	ldw	r2,-12(fp)
    e530:	e0ffff17 	ldw	r3,-4(fp)
    e534:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
    e538:	0005883a 	mov	r2,zero
    e53c:	00000106 	br	e544 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
    e540:	00bfff04 	movi	r2,-4
    }
}
    e544:	e037883a 	mov	sp,fp
    e548:	dfc00117 	ldw	ra,4(sp)
    e54c:	df000017 	ldw	fp,0(sp)
    e550:	dec00204 	addi	sp,sp,8
    e554:	f800283a 	ret

0000e558 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    e558:	defffa04 	addi	sp,sp,-24
    e55c:	dfc00515 	stw	ra,20(sp)
    e560:	df000415 	stw	fp,16(sp)
    e564:	df000404 	addi	fp,sp,16
    e568:	e13ffd15 	stw	r4,-12(fp)
    e56c:	e17ffe15 	stw	r5,-8(fp)
    e570:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
    e574:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
    e578:	e0bfff17 	ldw	r2,-4(fp)
    e57c:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    e580:	01400084 	movi	r5,2
    e584:	e13ffe17 	ldw	r4,-8(fp)
    e588:	000e2580 	call	e258 <altera_avalon_fifo_read_status>
    e58c:	1000071e 	bne	r2,zero,e5ac <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
    e590:	e13ffe17 	ldw	r4,-8(fp)
    e594:	000e3640 	call	e364 <altera_avalon_fifo_read_level>
    e598:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    e59c:	e0bffd17 	ldw	r2,-12(fp)
    e5a0:	10c00037 	ldwio	r3,0(r2)
    e5a4:	e0bfff17 	ldw	r2,-4(fp)
    e5a8:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
    e5ac:	e0bffc17 	ldw	r2,-16(fp)
}
    e5b0:	e037883a 	mov	sp,fp
    e5b4:	dfc00117 	ldw	ra,4(sp)
    e5b8:	df000017 	ldw	fp,0(sp)
    e5bc:	dec00204 	addi	sp,sp,8
    e5c0:	f800283a 	ret

0000e5c4 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
    e5c4:	defffc04 	addi	sp,sp,-16
    e5c8:	dfc00315 	stw	ra,12(sp)
    e5cc:	df000215 	stw	fp,8(sp)
    e5d0:	df000204 	addi	fp,sp,8
    e5d4:	e13ffe15 	stw	r4,-8(fp)
    e5d8:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    e5dc:	01400084 	movi	r5,2
    e5e0:	e13fff17 	ldw	r4,-4(fp)
    e5e4:	000e2580 	call	e258 <altera_avalon_fifo_read_status>
    e5e8:	1000031e 	bne	r2,zero,e5f8 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    e5ec:	e0bffe17 	ldw	r2,-8(fp)
    e5f0:	10800037 	ldwio	r2,0(r2)
    e5f4:	00000106 	br	e5fc <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
    e5f8:	0005883a 	mov	r2,zero
}
    e5fc:	e037883a 	mov	sp,fp
    e600:	dfc00117 	ldw	ra,4(sp)
    e604:	df000017 	ldw	fp,0(sp)
    e608:	dec00204 	addi	sp,sp,8
    e60c:	f800283a 	ret

0000e610 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
    e610:	defffb04 	addi	sp,sp,-20
    e614:	dfc00415 	stw	ra,16(sp)
    e618:	df000315 	stw	fp,12(sp)
    e61c:	df000304 	addi	fp,sp,12
    e620:	e13ffd15 	stw	r4,-12(fp)
    e624:	e17ffe15 	stw	r5,-8(fp)
    e628:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
    e62c:	01400044 	movi	r5,1
    e630:	e13ffe17 	ldw	r4,-8(fp)
    e634:	000e2580 	call	e258 <altera_avalon_fifo_read_status>
    e638:	1000071e 	bne	r2,zero,e658 <altera_avalon_fifo_write_other_info+0x48>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
    e63c:	e0bffd17 	ldw	r2,-12(fp)
    e640:	10800104 	addi	r2,r2,4
    e644:	1007883a 	mov	r3,r2
    e648:	e0bfff17 	ldw	r2,-4(fp)
    e64c:	18800035 	stwio	r2,0(r3)
	return ALTERA_AVALON_FIFO_OK;
    e650:	0005883a 	mov	r2,zero
    e654:	00000106 	br	e65c <altera_avalon_fifo_write_other_info+0x4c>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
    e658:	00bfff04 	movi	r2,-4
    }
}
    e65c:	e037883a 	mov	sp,fp
    e660:	dfc00117 	ldw	ra,4(sp)
    e664:	df000017 	ldw	fp,0(sp)
    e668:	dec00204 	addi	sp,sp,8
    e66c:	f800283a 	ret

0000e670 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
    e670:	defffe04 	addi	sp,sp,-8
    e674:	df000115 	stw	fp,4(sp)
    e678:	df000104 	addi	fp,sp,4
    e67c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
    e680:	e0bfff17 	ldw	r2,-4(fp)
    e684:	10800104 	addi	r2,r2,4
    e688:	10800037 	ldwio	r2,0(r2)
}
    e68c:	e037883a 	mov	sp,fp
    e690:	df000017 	ldw	fp,0(sp)
    e694:	dec00104 	addi	sp,sp,4
    e698:	f800283a 	ret

0000e69c <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
    e69c:	defffe04 	addi	sp,sp,-8
    e6a0:	df000115 	stw	fp,4(sp)
    e6a4:	df000104 	addi	fp,sp,4
    e6a8:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
    e6ac:	e0bfff17 	ldw	r2,-4(fp)
    e6b0:	10800037 	ldwio	r2,0(r2)
}
    e6b4:	e037883a 	mov	sp,fp
    e6b8:	df000017 	ldw	fp,0(sp)
    e6bc:	dec00104 	addi	sp,sp,4
    e6c0:	f800283a 	ret

0000e6c4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    e6c4:	defffa04 	addi	sp,sp,-24
    e6c8:	dfc00515 	stw	ra,20(sp)
    e6cc:	df000415 	stw	fp,16(sp)
    e6d0:	df000404 	addi	fp,sp,16
    e6d4:	e13ffd15 	stw	r4,-12(fp)
    e6d8:	e17ffe15 	stw	r5,-8(fp)
    e6dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e6e0:	e0bffd17 	ldw	r2,-12(fp)
    e6e4:	10800017 	ldw	r2,0(r2)
    e6e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    e6ec:	e0bffc17 	ldw	r2,-16(fp)
    e6f0:	10c00a04 	addi	r3,r2,40
    e6f4:	e0bffd17 	ldw	r2,-12(fp)
    e6f8:	10800217 	ldw	r2,8(r2)
    e6fc:	100f883a 	mov	r7,r2
    e700:	e1bfff17 	ldw	r6,-4(fp)
    e704:	e17ffe17 	ldw	r5,-8(fp)
    e708:	1809883a 	mov	r4,r3
    e70c:	000ecfc0 	call	ecfc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    e710:	e037883a 	mov	sp,fp
    e714:	dfc00117 	ldw	ra,4(sp)
    e718:	df000017 	ldw	fp,0(sp)
    e71c:	dec00204 	addi	sp,sp,8
    e720:	f800283a 	ret

0000e724 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    e724:	defffa04 	addi	sp,sp,-24
    e728:	dfc00515 	stw	ra,20(sp)
    e72c:	df000415 	stw	fp,16(sp)
    e730:	df000404 	addi	fp,sp,16
    e734:	e13ffd15 	stw	r4,-12(fp)
    e738:	e17ffe15 	stw	r5,-8(fp)
    e73c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e740:	e0bffd17 	ldw	r2,-12(fp)
    e744:	10800017 	ldw	r2,0(r2)
    e748:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    e74c:	e0bffc17 	ldw	r2,-16(fp)
    e750:	10c00a04 	addi	r3,r2,40
    e754:	e0bffd17 	ldw	r2,-12(fp)
    e758:	10800217 	ldw	r2,8(r2)
    e75c:	100f883a 	mov	r7,r2
    e760:	e1bfff17 	ldw	r6,-4(fp)
    e764:	e17ffe17 	ldw	r5,-8(fp)
    e768:	1809883a 	mov	r4,r3
    e76c:	000ef180 	call	ef18 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    e770:	e037883a 	mov	sp,fp
    e774:	dfc00117 	ldw	ra,4(sp)
    e778:	df000017 	ldw	fp,0(sp)
    e77c:	dec00204 	addi	sp,sp,8
    e780:	f800283a 	ret

0000e784 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    e784:	defffc04 	addi	sp,sp,-16
    e788:	dfc00315 	stw	ra,12(sp)
    e78c:	df000215 	stw	fp,8(sp)
    e790:	df000204 	addi	fp,sp,8
    e794:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e798:	e0bfff17 	ldw	r2,-4(fp)
    e79c:	10800017 	ldw	r2,0(r2)
    e7a0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    e7a4:	e0bffe17 	ldw	r2,-8(fp)
    e7a8:	10c00a04 	addi	r3,r2,40
    e7ac:	e0bfff17 	ldw	r2,-4(fp)
    e7b0:	10800217 	ldw	r2,8(r2)
    e7b4:	100b883a 	mov	r5,r2
    e7b8:	1809883a 	mov	r4,r3
    e7bc:	000eba40 	call	eba4 <altera_avalon_jtag_uart_close>
}
    e7c0:	e037883a 	mov	sp,fp
    e7c4:	dfc00117 	ldw	ra,4(sp)
    e7c8:	df000017 	ldw	fp,0(sp)
    e7cc:	dec00204 	addi	sp,sp,8
    e7d0:	f800283a 	ret

0000e7d4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    e7d4:	defffa04 	addi	sp,sp,-24
    e7d8:	dfc00515 	stw	ra,20(sp)
    e7dc:	df000415 	stw	fp,16(sp)
    e7e0:	df000404 	addi	fp,sp,16
    e7e4:	e13ffd15 	stw	r4,-12(fp)
    e7e8:	e17ffe15 	stw	r5,-8(fp)
    e7ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    e7f0:	e0bffd17 	ldw	r2,-12(fp)
    e7f4:	10800017 	ldw	r2,0(r2)
    e7f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    e7fc:	e0bffc17 	ldw	r2,-16(fp)
    e800:	10800a04 	addi	r2,r2,40
    e804:	e1bfff17 	ldw	r6,-4(fp)
    e808:	e17ffe17 	ldw	r5,-8(fp)
    e80c:	1009883a 	mov	r4,r2
    e810:	000ec0c0 	call	ec0c <altera_avalon_jtag_uart_ioctl>
}
    e814:	e037883a 	mov	sp,fp
    e818:	dfc00117 	ldw	ra,4(sp)
    e81c:	df000017 	ldw	fp,0(sp)
    e820:	dec00204 	addi	sp,sp,8
    e824:	f800283a 	ret

0000e828 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    e828:	defffa04 	addi	sp,sp,-24
    e82c:	dfc00515 	stw	ra,20(sp)
    e830:	df000415 	stw	fp,16(sp)
    e834:	df000404 	addi	fp,sp,16
    e838:	e13ffd15 	stw	r4,-12(fp)
    e83c:	e17ffe15 	stw	r5,-8(fp)
    e840:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e844:	e0bffd17 	ldw	r2,-12(fp)
    e848:	00c00044 	movi	r3,1
    e84c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    e850:	e0bffd17 	ldw	r2,-12(fp)
    e854:	10800017 	ldw	r2,0(r2)
    e858:	10800104 	addi	r2,r2,4
    e85c:	1007883a 	mov	r3,r2
    e860:	e0bffd17 	ldw	r2,-12(fp)
    e864:	10800817 	ldw	r2,32(r2)
    e868:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    e86c:	e0bffe17 	ldw	r2,-8(fp)
    e870:	e0ffff17 	ldw	r3,-4(fp)
    e874:	d8000015 	stw	zero,0(sp)
    e878:	e1fffd17 	ldw	r7,-12(fp)
    e87c:	01800074 	movhi	r6,1
    e880:	31ba3c04 	addi	r6,r6,-5904
    e884:	180b883a 	mov	r5,r3
    e888:	1009883a 	mov	r4,r2
    e88c:	000f5c80 	call	f5c8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    e890:	e0bffd17 	ldw	r2,-12(fp)
    e894:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    e898:	e0bffd17 	ldw	r2,-12(fp)
    e89c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e8a0:	00800074 	movhi	r2,1
    e8a4:	108fd104 	addi	r2,r2,16196
    e8a8:	10800017 	ldw	r2,0(r2)
    e8ac:	e1fffd17 	ldw	r7,-12(fp)
    e8b0:	01800074 	movhi	r6,1
    e8b4:	31babf04 	addi	r6,r6,-5380
    e8b8:	100b883a 	mov	r5,r2
    e8bc:	1809883a 	mov	r4,r3
    e8c0:	000f13c0 	call	f13c <alt_alarm_start>
    e8c4:	1000040e 	bge	r2,zero,e8d8 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    e8c8:	e0fffd17 	ldw	r3,-12(fp)
    e8cc:	00a00034 	movhi	r2,32768
    e8d0:	10bfffc4 	addi	r2,r2,-1
    e8d4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    e8d8:	0001883a 	nop
    e8dc:	e037883a 	mov	sp,fp
    e8e0:	dfc00117 	ldw	ra,4(sp)
    e8e4:	df000017 	ldw	fp,0(sp)
    e8e8:	dec00204 	addi	sp,sp,8
    e8ec:	f800283a 	ret

0000e8f0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    e8f0:	defff804 	addi	sp,sp,-32
    e8f4:	df000715 	stw	fp,28(sp)
    e8f8:	df000704 	addi	fp,sp,28
    e8fc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    e900:	e0bfff17 	ldw	r2,-4(fp)
    e904:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    e908:	e0bffb17 	ldw	r2,-20(fp)
    e90c:	10800017 	ldw	r2,0(r2)
    e910:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e914:	e0bffc17 	ldw	r2,-16(fp)
    e918:	10800104 	addi	r2,r2,4
    e91c:	10800037 	ldwio	r2,0(r2)
    e920:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    e924:	e0bffd17 	ldw	r2,-12(fp)
    e928:	1080c00c 	andi	r2,r2,768
    e92c:	10006d26 	beq	r2,zero,eae4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    e930:	e0bffd17 	ldw	r2,-12(fp)
    e934:	1080400c 	andi	r2,r2,256
    e938:	10003526 	beq	r2,zero,ea10 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    e93c:	00800074 	movhi	r2,1
    e940:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e944:	e0bffb17 	ldw	r2,-20(fp)
    e948:	10800a17 	ldw	r2,40(r2)
    e94c:	10800044 	addi	r2,r2,1
    e950:	1081ffcc 	andi	r2,r2,2047
    e954:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    e958:	e0bffb17 	ldw	r2,-20(fp)
    e95c:	10c00b17 	ldw	r3,44(r2)
    e960:	e0bffe17 	ldw	r2,-8(fp)
    e964:	18801526 	beq	r3,r2,e9bc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    e968:	e0bffc17 	ldw	r2,-16(fp)
    e96c:	10800037 	ldwio	r2,0(r2)
    e970:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    e974:	e0bff917 	ldw	r2,-28(fp)
    e978:	10a0000c 	andi	r2,r2,32768
    e97c:	10001126 	beq	r2,zero,e9c4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    e980:	e0bffb17 	ldw	r2,-20(fp)
    e984:	10800a17 	ldw	r2,40(r2)
    e988:	e0fff917 	ldw	r3,-28(fp)
    e98c:	1809883a 	mov	r4,r3
    e990:	e0fffb17 	ldw	r3,-20(fp)
    e994:	1885883a 	add	r2,r3,r2
    e998:	10800e04 	addi	r2,r2,56
    e99c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e9a0:	e0bffb17 	ldw	r2,-20(fp)
    e9a4:	10800a17 	ldw	r2,40(r2)
    e9a8:	10800044 	addi	r2,r2,1
    e9ac:	10c1ffcc 	andi	r3,r2,2047
    e9b0:	e0bffb17 	ldw	r2,-20(fp)
    e9b4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    e9b8:	003fe206 	br	e944 <__alt_data_end+0xfffc5564>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    e9bc:	0001883a 	nop
    e9c0:	00000106 	br	e9c8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    e9c4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    e9c8:	e0bff917 	ldw	r2,-28(fp)
    e9cc:	10bfffec 	andhi	r2,r2,65535
    e9d0:	10000f26 	beq	r2,zero,ea10 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e9d4:	e0bffb17 	ldw	r2,-20(fp)
    e9d8:	10c00817 	ldw	r3,32(r2)
    e9dc:	00bfff84 	movi	r2,-2
    e9e0:	1886703a 	and	r3,r3,r2
    e9e4:	e0bffb17 	ldw	r2,-20(fp)
    e9e8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    e9ec:	e0bffc17 	ldw	r2,-16(fp)
    e9f0:	10800104 	addi	r2,r2,4
    e9f4:	1007883a 	mov	r3,r2
    e9f8:	e0bffb17 	ldw	r2,-20(fp)
    e9fc:	10800817 	ldw	r2,32(r2)
    ea00:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ea04:	e0bffc17 	ldw	r2,-16(fp)
    ea08:	10800104 	addi	r2,r2,4
    ea0c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    ea10:	e0bffd17 	ldw	r2,-12(fp)
    ea14:	1080800c 	andi	r2,r2,512
    ea18:	103fbe26 	beq	r2,zero,e914 <__alt_data_end+0xfffc5534>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ea1c:	e0bffd17 	ldw	r2,-12(fp)
    ea20:	1004d43a 	srli	r2,r2,16
    ea24:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    ea28:	00001406 	br	ea7c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    ea2c:	e0bffc17 	ldw	r2,-16(fp)
    ea30:	e0fffb17 	ldw	r3,-20(fp)
    ea34:	18c00d17 	ldw	r3,52(r3)
    ea38:	e13ffb17 	ldw	r4,-20(fp)
    ea3c:	20c7883a 	add	r3,r4,r3
    ea40:	18c20e04 	addi	r3,r3,2104
    ea44:	18c00003 	ldbu	r3,0(r3)
    ea48:	18c03fcc 	andi	r3,r3,255
    ea4c:	18c0201c 	xori	r3,r3,128
    ea50:	18ffe004 	addi	r3,r3,-128
    ea54:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ea58:	e0bffb17 	ldw	r2,-20(fp)
    ea5c:	10800d17 	ldw	r2,52(r2)
    ea60:	10800044 	addi	r2,r2,1
    ea64:	10c1ffcc 	andi	r3,r2,2047
    ea68:	e0bffb17 	ldw	r2,-20(fp)
    ea6c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    ea70:	e0bffa17 	ldw	r2,-24(fp)
    ea74:	10bfffc4 	addi	r2,r2,-1
    ea78:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    ea7c:	e0bffa17 	ldw	r2,-24(fp)
    ea80:	10000526 	beq	r2,zero,ea98 <altera_avalon_jtag_uart_irq+0x1a8>
    ea84:	e0bffb17 	ldw	r2,-20(fp)
    ea88:	10c00d17 	ldw	r3,52(r2)
    ea8c:	e0bffb17 	ldw	r2,-20(fp)
    ea90:	10800c17 	ldw	r2,48(r2)
    ea94:	18bfe51e 	bne	r3,r2,ea2c <__alt_data_end+0xfffc564c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    ea98:	e0bffa17 	ldw	r2,-24(fp)
    ea9c:	103f9d26 	beq	r2,zero,e914 <__alt_data_end+0xfffc5534>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    eaa0:	e0bffb17 	ldw	r2,-20(fp)
    eaa4:	10c00817 	ldw	r3,32(r2)
    eaa8:	00bfff44 	movi	r2,-3
    eaac:	1886703a 	and	r3,r3,r2
    eab0:	e0bffb17 	ldw	r2,-20(fp)
    eab4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    eab8:	e0bffb17 	ldw	r2,-20(fp)
    eabc:	10800017 	ldw	r2,0(r2)
    eac0:	10800104 	addi	r2,r2,4
    eac4:	1007883a 	mov	r3,r2
    eac8:	e0bffb17 	ldw	r2,-20(fp)
    eacc:	10800817 	ldw	r2,32(r2)
    ead0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ead4:	e0bffc17 	ldw	r2,-16(fp)
    ead8:	10800104 	addi	r2,r2,4
    eadc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    eae0:	003f8c06 	br	e914 <__alt_data_end+0xfffc5534>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    eae4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    eae8:	0001883a 	nop
    eaec:	e037883a 	mov	sp,fp
    eaf0:	df000017 	ldw	fp,0(sp)
    eaf4:	dec00104 	addi	sp,sp,4
    eaf8:	f800283a 	ret

0000eafc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    eafc:	defff804 	addi	sp,sp,-32
    eb00:	df000715 	stw	fp,28(sp)
    eb04:	df000704 	addi	fp,sp,28
    eb08:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    eb0c:	e0bffb17 	ldw	r2,-20(fp)
    eb10:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    eb14:	e0bff917 	ldw	r2,-28(fp)
    eb18:	10800017 	ldw	r2,0(r2)
    eb1c:	10800104 	addi	r2,r2,4
    eb20:	10800037 	ldwio	r2,0(r2)
    eb24:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    eb28:	e0bffa17 	ldw	r2,-24(fp)
    eb2c:	1081000c 	andi	r2,r2,1024
    eb30:	10000b26 	beq	r2,zero,eb60 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    eb34:	e0bff917 	ldw	r2,-28(fp)
    eb38:	10800017 	ldw	r2,0(r2)
    eb3c:	10800104 	addi	r2,r2,4
    eb40:	1007883a 	mov	r3,r2
    eb44:	e0bff917 	ldw	r2,-28(fp)
    eb48:	10800817 	ldw	r2,32(r2)
    eb4c:	10810014 	ori	r2,r2,1024
    eb50:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    eb54:	e0bff917 	ldw	r2,-28(fp)
    eb58:	10000915 	stw	zero,36(r2)
    eb5c:	00000a06 	br	eb88 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    eb60:	e0bff917 	ldw	r2,-28(fp)
    eb64:	10c00917 	ldw	r3,36(r2)
    eb68:	00a00034 	movhi	r2,32768
    eb6c:	10bfff04 	addi	r2,r2,-4
    eb70:	10c00536 	bltu	r2,r3,eb88 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    eb74:	e0bff917 	ldw	r2,-28(fp)
    eb78:	10800917 	ldw	r2,36(r2)
    eb7c:	10c00044 	addi	r3,r2,1
    eb80:	e0bff917 	ldw	r2,-28(fp)
    eb84:	10c00915 	stw	r3,36(r2)
    eb88:	00800074 	movhi	r2,1
    eb8c:	108fd104 	addi	r2,r2,16196
    eb90:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    eb94:	e037883a 	mov	sp,fp
    eb98:	df000017 	ldw	fp,0(sp)
    eb9c:	dec00104 	addi	sp,sp,4
    eba0:	f800283a 	ret

0000eba4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    eba4:	defffd04 	addi	sp,sp,-12
    eba8:	df000215 	stw	fp,8(sp)
    ebac:	df000204 	addi	fp,sp,8
    ebb0:	e13ffe15 	stw	r4,-8(fp)
    ebb4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ebb8:	00000506 	br	ebd0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    ebbc:	e0bfff17 	ldw	r2,-4(fp)
    ebc0:	1090000c 	andi	r2,r2,16384
    ebc4:	10000226 	beq	r2,zero,ebd0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    ebc8:	00bffd44 	movi	r2,-11
    ebcc:	00000b06 	br	ebfc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ebd0:	e0bffe17 	ldw	r2,-8(fp)
    ebd4:	10c00d17 	ldw	r3,52(r2)
    ebd8:	e0bffe17 	ldw	r2,-8(fp)
    ebdc:	10800c17 	ldw	r2,48(r2)
    ebe0:	18800526 	beq	r3,r2,ebf8 <altera_avalon_jtag_uart_close+0x54>
    ebe4:	e0bffe17 	ldw	r2,-8(fp)
    ebe8:	10c00917 	ldw	r3,36(r2)
    ebec:	e0bffe17 	ldw	r2,-8(fp)
    ebf0:	10800117 	ldw	r2,4(r2)
    ebf4:	18bff136 	bltu	r3,r2,ebbc <__alt_data_end+0xfffc57dc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    ebf8:	0005883a 	mov	r2,zero
}
    ebfc:	e037883a 	mov	sp,fp
    ec00:	df000017 	ldw	fp,0(sp)
    ec04:	dec00104 	addi	sp,sp,4
    ec08:	f800283a 	ret

0000ec0c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    ec0c:	defffa04 	addi	sp,sp,-24
    ec10:	df000515 	stw	fp,20(sp)
    ec14:	df000504 	addi	fp,sp,20
    ec18:	e13ffd15 	stw	r4,-12(fp)
    ec1c:	e17ffe15 	stw	r5,-8(fp)
    ec20:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    ec24:	00bff9c4 	movi	r2,-25
    ec28:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    ec2c:	e0bffe17 	ldw	r2,-8(fp)
    ec30:	10da8060 	cmpeqi	r3,r2,27137
    ec34:	1800031e 	bne	r3,zero,ec44 <altera_avalon_jtag_uart_ioctl+0x38>
    ec38:	109a80a0 	cmpeqi	r2,r2,27138
    ec3c:	1000181e 	bne	r2,zero,eca0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    ec40:	00002906 	br	ece8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    ec44:	e0bffd17 	ldw	r2,-12(fp)
    ec48:	10c00117 	ldw	r3,4(r2)
    ec4c:	00a00034 	movhi	r2,32768
    ec50:	10bfffc4 	addi	r2,r2,-1
    ec54:	18802126 	beq	r3,r2,ecdc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    ec58:	e0bfff17 	ldw	r2,-4(fp)
    ec5c:	10800017 	ldw	r2,0(r2)
    ec60:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    ec64:	e0bffc17 	ldw	r2,-16(fp)
    ec68:	10800090 	cmplti	r2,r2,2
    ec6c:	1000061e 	bne	r2,zero,ec88 <altera_avalon_jtag_uart_ioctl+0x7c>
    ec70:	e0fffc17 	ldw	r3,-16(fp)
    ec74:	00a00034 	movhi	r2,32768
    ec78:	10bfffc4 	addi	r2,r2,-1
    ec7c:	18800226 	beq	r3,r2,ec88 <altera_avalon_jtag_uart_ioctl+0x7c>
    ec80:	e0bffc17 	ldw	r2,-16(fp)
    ec84:	00000206 	br	ec90 <altera_avalon_jtag_uart_ioctl+0x84>
    ec88:	00a00034 	movhi	r2,32768
    ec8c:	10bfff84 	addi	r2,r2,-2
    ec90:	e0fffd17 	ldw	r3,-12(fp)
    ec94:	18800115 	stw	r2,4(r3)
      rc = 0;
    ec98:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    ec9c:	00000f06 	br	ecdc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    eca0:	e0bffd17 	ldw	r2,-12(fp)
    eca4:	10c00117 	ldw	r3,4(r2)
    eca8:	00a00034 	movhi	r2,32768
    ecac:	10bfffc4 	addi	r2,r2,-1
    ecb0:	18800c26 	beq	r3,r2,ece4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    ecb4:	e0bffd17 	ldw	r2,-12(fp)
    ecb8:	10c00917 	ldw	r3,36(r2)
    ecbc:	e0bffd17 	ldw	r2,-12(fp)
    ecc0:	10800117 	ldw	r2,4(r2)
    ecc4:	1885803a 	cmpltu	r2,r3,r2
    ecc8:	10c03fcc 	andi	r3,r2,255
    eccc:	e0bfff17 	ldw	r2,-4(fp)
    ecd0:	10c00015 	stw	r3,0(r2)
      rc = 0;
    ecd4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    ecd8:	00000206 	br	ece4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    ecdc:	0001883a 	nop
    ece0:	00000106 	br	ece8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    ece4:	0001883a 	nop

  default:
    break;
  }

  return rc;
    ece8:	e0bffb17 	ldw	r2,-20(fp)
}
    ecec:	e037883a 	mov	sp,fp
    ecf0:	df000017 	ldw	fp,0(sp)
    ecf4:	dec00104 	addi	sp,sp,4
    ecf8:	f800283a 	ret

0000ecfc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    ecfc:	defff304 	addi	sp,sp,-52
    ed00:	dfc00c15 	stw	ra,48(sp)
    ed04:	df000b15 	stw	fp,44(sp)
    ed08:	df000b04 	addi	fp,sp,44
    ed0c:	e13ffc15 	stw	r4,-16(fp)
    ed10:	e17ffd15 	stw	r5,-12(fp)
    ed14:	e1bffe15 	stw	r6,-8(fp)
    ed18:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    ed1c:	e0bffd17 	ldw	r2,-12(fp)
    ed20:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ed24:	00004706 	br	ee44 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    ed28:	e0bffc17 	ldw	r2,-16(fp)
    ed2c:	10800a17 	ldw	r2,40(r2)
    ed30:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    ed34:	e0bffc17 	ldw	r2,-16(fp)
    ed38:	10800b17 	ldw	r2,44(r2)
    ed3c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    ed40:	e0fff717 	ldw	r3,-36(fp)
    ed44:	e0bff817 	ldw	r2,-32(fp)
    ed48:	18800536 	bltu	r3,r2,ed60 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    ed4c:	e0fff717 	ldw	r3,-36(fp)
    ed50:	e0bff817 	ldw	r2,-32(fp)
    ed54:	1885c83a 	sub	r2,r3,r2
    ed58:	e0bff615 	stw	r2,-40(fp)
    ed5c:	00000406 	br	ed70 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    ed60:	00c20004 	movi	r3,2048
    ed64:	e0bff817 	ldw	r2,-32(fp)
    ed68:	1885c83a 	sub	r2,r3,r2
    ed6c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    ed70:	e0bff617 	ldw	r2,-40(fp)
    ed74:	10001e26 	beq	r2,zero,edf0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    ed78:	e0fffe17 	ldw	r3,-8(fp)
    ed7c:	e0bff617 	ldw	r2,-40(fp)
    ed80:	1880022e 	bgeu	r3,r2,ed8c <altera_avalon_jtag_uart_read+0x90>
        n = space;
    ed84:	e0bffe17 	ldw	r2,-8(fp)
    ed88:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    ed8c:	e0bffc17 	ldw	r2,-16(fp)
    ed90:	10c00e04 	addi	r3,r2,56
    ed94:	e0bff817 	ldw	r2,-32(fp)
    ed98:	1885883a 	add	r2,r3,r2
    ed9c:	e1bff617 	ldw	r6,-40(fp)
    eda0:	100b883a 	mov	r5,r2
    eda4:	e13ff517 	ldw	r4,-44(fp)
    eda8:	00062100 	call	6210 <memcpy>
      ptr   += n;
    edac:	e0fff517 	ldw	r3,-44(fp)
    edb0:	e0bff617 	ldw	r2,-40(fp)
    edb4:	1885883a 	add	r2,r3,r2
    edb8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    edbc:	e0fffe17 	ldw	r3,-8(fp)
    edc0:	e0bff617 	ldw	r2,-40(fp)
    edc4:	1885c83a 	sub	r2,r3,r2
    edc8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    edcc:	e0fff817 	ldw	r3,-32(fp)
    edd0:	e0bff617 	ldw	r2,-40(fp)
    edd4:	1885883a 	add	r2,r3,r2
    edd8:	10c1ffcc 	andi	r3,r2,2047
    eddc:	e0bffc17 	ldw	r2,-16(fp)
    ede0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    ede4:	e0bffe17 	ldw	r2,-8(fp)
    ede8:	00bfcf16 	blt	zero,r2,ed28 <__alt_data_end+0xfffc5948>
    edec:	00000106 	br	edf4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    edf0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    edf4:	e0fff517 	ldw	r3,-44(fp)
    edf8:	e0bffd17 	ldw	r2,-12(fp)
    edfc:	1880141e 	bne	r3,r2,ee50 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    ee00:	e0bfff17 	ldw	r2,-4(fp)
    ee04:	1090000c 	andi	r2,r2,16384
    ee08:	1000131e 	bne	r2,zero,ee58 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    ee0c:	0001883a 	nop
    ee10:	e0bffc17 	ldw	r2,-16(fp)
    ee14:	10c00a17 	ldw	r3,40(r2)
    ee18:	e0bff717 	ldw	r2,-36(fp)
    ee1c:	1880051e 	bne	r3,r2,ee34 <altera_avalon_jtag_uart_read+0x138>
    ee20:	e0bffc17 	ldw	r2,-16(fp)
    ee24:	10c00917 	ldw	r3,36(r2)
    ee28:	e0bffc17 	ldw	r2,-16(fp)
    ee2c:	10800117 	ldw	r2,4(r2)
    ee30:	18bff736 	bltu	r3,r2,ee10 <__alt_data_end+0xfffc5a30>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    ee34:	e0bffc17 	ldw	r2,-16(fp)
    ee38:	10c00a17 	ldw	r3,40(r2)
    ee3c:	e0bff717 	ldw	r2,-36(fp)
    ee40:	18800726 	beq	r3,r2,ee60 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ee44:	e0bffe17 	ldw	r2,-8(fp)
    ee48:	00bfb716 	blt	zero,r2,ed28 <__alt_data_end+0xfffc5948>
    ee4c:	00000506 	br	ee64 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    ee50:	0001883a 	nop
    ee54:	00000306 	br	ee64 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    ee58:	0001883a 	nop
    ee5c:	00000106 	br	ee64 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    ee60:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    ee64:	e0fff517 	ldw	r3,-44(fp)
    ee68:	e0bffd17 	ldw	r2,-12(fp)
    ee6c:	18801826 	beq	r3,r2,eed0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ee70:	0005303a 	rdctl	r2,status
    ee74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ee78:	e0fffb17 	ldw	r3,-20(fp)
    ee7c:	00bfff84 	movi	r2,-2
    ee80:	1884703a 	and	r2,r3,r2
    ee84:	1001703a 	wrctl	status,r2
  
  return context;
    ee88:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    ee8c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ee90:	e0bffc17 	ldw	r2,-16(fp)
    ee94:	10800817 	ldw	r2,32(r2)
    ee98:	10c00054 	ori	r3,r2,1
    ee9c:	e0bffc17 	ldw	r2,-16(fp)
    eea0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    eea4:	e0bffc17 	ldw	r2,-16(fp)
    eea8:	10800017 	ldw	r2,0(r2)
    eeac:	10800104 	addi	r2,r2,4
    eeb0:	1007883a 	mov	r3,r2
    eeb4:	e0bffc17 	ldw	r2,-16(fp)
    eeb8:	10800817 	ldw	r2,32(r2)
    eebc:	18800035 	stwio	r2,0(r3)
    eec0:	e0bffa17 	ldw	r2,-24(fp)
    eec4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eec8:	e0bff917 	ldw	r2,-28(fp)
    eecc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    eed0:	e0fff517 	ldw	r3,-44(fp)
    eed4:	e0bffd17 	ldw	r2,-12(fp)
    eed8:	18800426 	beq	r3,r2,eeec <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    eedc:	e0fff517 	ldw	r3,-44(fp)
    eee0:	e0bffd17 	ldw	r2,-12(fp)
    eee4:	1885c83a 	sub	r2,r3,r2
    eee8:	00000606 	br	ef04 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    eeec:	e0bfff17 	ldw	r2,-4(fp)
    eef0:	1090000c 	andi	r2,r2,16384
    eef4:	10000226 	beq	r2,zero,ef00 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    eef8:	00bffd44 	movi	r2,-11
    eefc:	00000106 	br	ef04 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    ef00:	00bffec4 	movi	r2,-5
}
    ef04:	e037883a 	mov	sp,fp
    ef08:	dfc00117 	ldw	ra,4(sp)
    ef0c:	df000017 	ldw	fp,0(sp)
    ef10:	dec00204 	addi	sp,sp,8
    ef14:	f800283a 	ret

0000ef18 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    ef18:	defff304 	addi	sp,sp,-52
    ef1c:	dfc00c15 	stw	ra,48(sp)
    ef20:	df000b15 	stw	fp,44(sp)
    ef24:	df000b04 	addi	fp,sp,44
    ef28:	e13ffc15 	stw	r4,-16(fp)
    ef2c:	e17ffd15 	stw	r5,-12(fp)
    ef30:	e1bffe15 	stw	r6,-8(fp)
    ef34:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    ef38:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    ef3c:	e0bffd17 	ldw	r2,-12(fp)
    ef40:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    ef44:	00003706 	br	f024 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    ef48:	e0bffc17 	ldw	r2,-16(fp)
    ef4c:	10800c17 	ldw	r2,48(r2)
    ef50:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    ef54:	e0bffc17 	ldw	r2,-16(fp)
    ef58:	10800d17 	ldw	r2,52(r2)
    ef5c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    ef60:	e0fff917 	ldw	r3,-28(fp)
    ef64:	e0bff517 	ldw	r2,-44(fp)
    ef68:	1880062e 	bgeu	r3,r2,ef84 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    ef6c:	e0fff517 	ldw	r3,-44(fp)
    ef70:	e0bff917 	ldw	r2,-28(fp)
    ef74:	1885c83a 	sub	r2,r3,r2
    ef78:	10bfffc4 	addi	r2,r2,-1
    ef7c:	e0bff615 	stw	r2,-40(fp)
    ef80:	00000b06 	br	efb0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    ef84:	e0bff517 	ldw	r2,-44(fp)
    ef88:	10000526 	beq	r2,zero,efa0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    ef8c:	00c20004 	movi	r3,2048
    ef90:	e0bff917 	ldw	r2,-28(fp)
    ef94:	1885c83a 	sub	r2,r3,r2
    ef98:	e0bff615 	stw	r2,-40(fp)
    ef9c:	00000406 	br	efb0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    efa0:	00c1ffc4 	movi	r3,2047
    efa4:	e0bff917 	ldw	r2,-28(fp)
    efa8:	1885c83a 	sub	r2,r3,r2
    efac:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    efb0:	e0bff617 	ldw	r2,-40(fp)
    efb4:	10001e26 	beq	r2,zero,f030 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    efb8:	e0fffe17 	ldw	r3,-8(fp)
    efbc:	e0bff617 	ldw	r2,-40(fp)
    efc0:	1880022e 	bgeu	r3,r2,efcc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    efc4:	e0bffe17 	ldw	r2,-8(fp)
    efc8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    efcc:	e0bffc17 	ldw	r2,-16(fp)
    efd0:	10c20e04 	addi	r3,r2,2104
    efd4:	e0bff917 	ldw	r2,-28(fp)
    efd8:	1885883a 	add	r2,r3,r2
    efdc:	e1bff617 	ldw	r6,-40(fp)
    efe0:	e17ffd17 	ldw	r5,-12(fp)
    efe4:	1009883a 	mov	r4,r2
    efe8:	00062100 	call	6210 <memcpy>
      ptr   += n;
    efec:	e0fffd17 	ldw	r3,-12(fp)
    eff0:	e0bff617 	ldw	r2,-40(fp)
    eff4:	1885883a 	add	r2,r3,r2
    eff8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    effc:	e0fffe17 	ldw	r3,-8(fp)
    f000:	e0bff617 	ldw	r2,-40(fp)
    f004:	1885c83a 	sub	r2,r3,r2
    f008:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f00c:	e0fff917 	ldw	r3,-28(fp)
    f010:	e0bff617 	ldw	r2,-40(fp)
    f014:	1885883a 	add	r2,r3,r2
    f018:	10c1ffcc 	andi	r3,r2,2047
    f01c:	e0bffc17 	ldw	r2,-16(fp)
    f020:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f024:	e0bffe17 	ldw	r2,-8(fp)
    f028:	00bfc716 	blt	zero,r2,ef48 <__alt_data_end+0xfffc5b68>
    f02c:	00000106 	br	f034 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    f030:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f034:	0005303a 	rdctl	r2,status
    f038:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f03c:	e0fffb17 	ldw	r3,-20(fp)
    f040:	00bfff84 	movi	r2,-2
    f044:	1884703a 	and	r2,r3,r2
    f048:	1001703a 	wrctl	status,r2
  
  return context;
    f04c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    f050:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f054:	e0bffc17 	ldw	r2,-16(fp)
    f058:	10800817 	ldw	r2,32(r2)
    f05c:	10c00094 	ori	r3,r2,2
    f060:	e0bffc17 	ldw	r2,-16(fp)
    f064:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f068:	e0bffc17 	ldw	r2,-16(fp)
    f06c:	10800017 	ldw	r2,0(r2)
    f070:	10800104 	addi	r2,r2,4
    f074:	1007883a 	mov	r3,r2
    f078:	e0bffc17 	ldw	r2,-16(fp)
    f07c:	10800817 	ldw	r2,32(r2)
    f080:	18800035 	stwio	r2,0(r3)
    f084:	e0bffa17 	ldw	r2,-24(fp)
    f088:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f08c:	e0bff817 	ldw	r2,-32(fp)
    f090:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    f094:	e0bffe17 	ldw	r2,-8(fp)
    f098:	0080100e 	bge	zero,r2,f0dc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    f09c:	e0bfff17 	ldw	r2,-4(fp)
    f0a0:	1090000c 	andi	r2,r2,16384
    f0a4:	1000101e 	bne	r2,zero,f0e8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f0a8:	0001883a 	nop
    f0ac:	e0bffc17 	ldw	r2,-16(fp)
    f0b0:	10c00d17 	ldw	r3,52(r2)
    f0b4:	e0bff517 	ldw	r2,-44(fp)
    f0b8:	1880051e 	bne	r3,r2,f0d0 <altera_avalon_jtag_uart_write+0x1b8>
    f0bc:	e0bffc17 	ldw	r2,-16(fp)
    f0c0:	10c00917 	ldw	r3,36(r2)
    f0c4:	e0bffc17 	ldw	r2,-16(fp)
    f0c8:	10800117 	ldw	r2,4(r2)
    f0cc:	18bff736 	bltu	r3,r2,f0ac <__alt_data_end+0xfffc5ccc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    f0d0:	e0bffc17 	ldw	r2,-16(fp)
    f0d4:	10800917 	ldw	r2,36(r2)
    f0d8:	1000051e 	bne	r2,zero,f0f0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    f0dc:	e0bffe17 	ldw	r2,-8(fp)
    f0e0:	00bfd016 	blt	zero,r2,f024 <__alt_data_end+0xfffc5c44>
    f0e4:	00000306 	br	f0f4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    f0e8:	0001883a 	nop
    f0ec:	00000106 	br	f0f4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    f0f0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f0f4:	e0fffd17 	ldw	r3,-12(fp)
    f0f8:	e0bff717 	ldw	r2,-36(fp)
    f0fc:	18800426 	beq	r3,r2,f110 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    f100:	e0fffd17 	ldw	r3,-12(fp)
    f104:	e0bff717 	ldw	r2,-36(fp)
    f108:	1885c83a 	sub	r2,r3,r2
    f10c:	00000606 	br	f128 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    f110:	e0bfff17 	ldw	r2,-4(fp)
    f114:	1090000c 	andi	r2,r2,16384
    f118:	10000226 	beq	r2,zero,f124 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    f11c:	00bffd44 	movi	r2,-11
    f120:	00000106 	br	f128 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    f124:	00bffec4 	movi	r2,-5
}
    f128:	e037883a 	mov	sp,fp
    f12c:	dfc00117 	ldw	ra,4(sp)
    f130:	df000017 	ldw	fp,0(sp)
    f134:	dec00204 	addi	sp,sp,8
    f138:	f800283a 	ret

0000f13c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    f13c:	defff504 	addi	sp,sp,-44
    f140:	df000a15 	stw	fp,40(sp)
    f144:	df000a04 	addi	fp,sp,40
    f148:	e13ffc15 	stw	r4,-16(fp)
    f14c:	e17ffd15 	stw	r5,-12(fp)
    f150:	e1bffe15 	stw	r6,-8(fp)
    f154:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    f158:	e03ff615 	stw	zero,-40(fp)
    f15c:	00800074 	movhi	r2,1
    f160:	108fd104 	addi	r2,r2,16196
    f164:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    f168:	10003f26 	beq	r2,zero,f268 <alt_alarm_start+0x12c>
  {
    if (alarm)
    f16c:	e0bffc17 	ldw	r2,-16(fp)
    f170:	10003b26 	beq	r2,zero,f260 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    f174:	e0bffc17 	ldw	r2,-16(fp)
    f178:	e0fffe17 	ldw	r3,-8(fp)
    f17c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    f180:	e0bffc17 	ldw	r2,-16(fp)
    f184:	e0ffff17 	ldw	r3,-4(fp)
    f188:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f18c:	0005303a 	rdctl	r2,status
    f190:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f194:	e0fff917 	ldw	r3,-28(fp)
    f198:	00bfff84 	movi	r2,-2
    f19c:	1884703a 	and	r2,r3,r2
    f1a0:	1001703a 	wrctl	status,r2
  
  return context;
    f1a4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    f1a8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    f1ac:	00800074 	movhi	r2,1
    f1b0:	108fd204 	addi	r2,r2,16200
    f1b4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    f1b8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    f1bc:	e0fffd17 	ldw	r3,-12(fp)
    f1c0:	e0bff617 	ldw	r2,-40(fp)
    f1c4:	1885883a 	add	r2,r3,r2
    f1c8:	10c00044 	addi	r3,r2,1
    f1cc:	e0bffc17 	ldw	r2,-16(fp)
    f1d0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    f1d4:	e0bffc17 	ldw	r2,-16(fp)
    f1d8:	10c00217 	ldw	r3,8(r2)
    f1dc:	e0bff617 	ldw	r2,-40(fp)
    f1e0:	1880042e 	bgeu	r3,r2,f1f4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    f1e4:	e0bffc17 	ldw	r2,-16(fp)
    f1e8:	00c00044 	movi	r3,1
    f1ec:	10c00405 	stb	r3,16(r2)
    f1f0:	00000206 	br	f1fc <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    f1f4:	e0bffc17 	ldw	r2,-16(fp)
    f1f8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    f1fc:	e0fffc17 	ldw	r3,-16(fp)
    f200:	00800074 	movhi	r2,1
    f204:	10890904 	addi	r2,r2,9252
    f208:	e0bffa15 	stw	r2,-24(fp)
    f20c:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f210:	e0bffb17 	ldw	r2,-20(fp)
    f214:	e0fffa17 	ldw	r3,-24(fp)
    f218:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    f21c:	e0bffa17 	ldw	r2,-24(fp)
    f220:	10c00017 	ldw	r3,0(r2)
    f224:	e0bffb17 	ldw	r2,-20(fp)
    f228:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    f22c:	e0bffa17 	ldw	r2,-24(fp)
    f230:	10800017 	ldw	r2,0(r2)
    f234:	e0fffb17 	ldw	r3,-20(fp)
    f238:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    f23c:	e0bffa17 	ldw	r2,-24(fp)
    f240:	e0fffb17 	ldw	r3,-20(fp)
    f244:	10c00015 	stw	r3,0(r2)
    f248:	e0bff817 	ldw	r2,-32(fp)
    f24c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f250:	e0bff717 	ldw	r2,-36(fp)
    f254:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    f258:	0005883a 	mov	r2,zero
    f25c:	00000306 	br	f26c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    f260:	00bffa84 	movi	r2,-22
    f264:	00000106 	br	f26c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    f268:	00bfde84 	movi	r2,-134
  }
}
    f26c:	e037883a 	mov	sp,fp
    f270:	df000017 	ldw	fp,0(sp)
    f274:	dec00104 	addi	sp,sp,4
    f278:	f800283a 	ret

0000f27c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    f27c:	defffa04 	addi	sp,sp,-24
    f280:	dfc00515 	stw	ra,20(sp)
    f284:	df000415 	stw	fp,16(sp)
    f288:	df000404 	addi	fp,sp,16
    f28c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    f290:	00800244 	movi	r2,9
    f294:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    f298:	014003f4 	movhi	r5,15
    f29c:	29509004 	addi	r5,r5,16960
    f2a0:	e13ffd17 	ldw	r4,-12(fp)
    f2a4:	000adf80 	call	adf8 <__mulsi3>
    f2a8:	100b883a 	mov	r5,r2
    f2ac:	01017db4 	movhi	r4,1526
    f2b0:	21384004 	addi	r4,r4,-7936
    f2b4:	000ad3c0 	call	ad3c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f2b8:	100b883a 	mov	r5,r2
    f2bc:	01200034 	movhi	r4,32768
    f2c0:	213fffc4 	addi	r4,r4,-1
    f2c4:	000ad3c0 	call	ad3c <__udivsi3>
    f2c8:	100b883a 	mov	r5,r2
    f2cc:	e13fff17 	ldw	r4,-4(fp)
    f2d0:	000ad3c0 	call	ad3c <__udivsi3>
    f2d4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    f2d8:	e0bffe17 	ldw	r2,-8(fp)
    f2dc:	10002a26 	beq	r2,zero,f388 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    f2e0:	e03ffc15 	stw	zero,-16(fp)
    f2e4:	00001706 	br	f344 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f2e8:	00a00034 	movhi	r2,32768
    f2ec:	10bfffc4 	addi	r2,r2,-1
    f2f0:	10bfffc4 	addi	r2,r2,-1
    f2f4:	103ffe1e 	bne	r2,zero,f2f0 <__alt_data_end+0xfffc5f10>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    f2f8:	014003f4 	movhi	r5,15
    f2fc:	29509004 	addi	r5,r5,16960
    f300:	e13ffd17 	ldw	r4,-12(fp)
    f304:	000adf80 	call	adf8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f308:	100b883a 	mov	r5,r2
    f30c:	01017db4 	movhi	r4,1526
    f310:	21384004 	addi	r4,r4,-7936
    f314:	000ad3c0 	call	ad3c <__udivsi3>
    f318:	100b883a 	mov	r5,r2
    f31c:	01200034 	movhi	r4,32768
    f320:	213fffc4 	addi	r4,r4,-1
    f324:	000ad3c0 	call	ad3c <__udivsi3>
    f328:	1007883a 	mov	r3,r2
    f32c:	e0bfff17 	ldw	r2,-4(fp)
    f330:	10c5c83a 	sub	r2,r2,r3
    f334:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    f338:	e0bffc17 	ldw	r2,-16(fp)
    f33c:	10800044 	addi	r2,r2,1
    f340:	e0bffc15 	stw	r2,-16(fp)
    f344:	e0fffc17 	ldw	r3,-16(fp)
    f348:	e0bffe17 	ldw	r2,-8(fp)
    f34c:	18bfe616 	blt	r3,r2,f2e8 <__alt_data_end+0xfffc5f08>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    f350:	014003f4 	movhi	r5,15
    f354:	29509004 	addi	r5,r5,16960
    f358:	e13ffd17 	ldw	r4,-12(fp)
    f35c:	000adf80 	call	adf8 <__mulsi3>
    f360:	100b883a 	mov	r5,r2
    f364:	01017db4 	movhi	r4,1526
    f368:	21384004 	addi	r4,r4,-7936
    f36c:	000ad3c0 	call	ad3c <__udivsi3>
    f370:	e17fff17 	ldw	r5,-4(fp)
    f374:	1009883a 	mov	r4,r2
    f378:	000adf80 	call	adf8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f37c:	10bfffc4 	addi	r2,r2,-1
    f380:	103ffe1e 	bne	r2,zero,f37c <__alt_data_end+0xfffc5f9c>
    f384:	00000d06 	br	f3bc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    f388:	014003f4 	movhi	r5,15
    f38c:	29509004 	addi	r5,r5,16960
    f390:	e13ffd17 	ldw	r4,-12(fp)
    f394:	000adf80 	call	adf8 <__mulsi3>
    f398:	100b883a 	mov	r5,r2
    f39c:	01017db4 	movhi	r4,1526
    f3a0:	21384004 	addi	r4,r4,-7936
    f3a4:	000ad3c0 	call	ad3c <__udivsi3>
    f3a8:	e17fff17 	ldw	r5,-4(fp)
    f3ac:	1009883a 	mov	r4,r2
    f3b0:	000adf80 	call	adf8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f3b4:	10bfffc4 	addi	r2,r2,-1
    f3b8:	00bffe16 	blt	zero,r2,f3b4 <__alt_data_end+0xfffc5fd4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    f3bc:	0005883a 	mov	r2,zero
}
    f3c0:	e037883a 	mov	sp,fp
    f3c4:	dfc00117 	ldw	ra,4(sp)
    f3c8:	df000017 	ldw	fp,0(sp)
    f3cc:	dec00204 	addi	sp,sp,8
    f3d0:	f800283a 	ret

0000f3d4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    f3d4:	deffff04 	addi	sp,sp,-4
    f3d8:	df000015 	stw	fp,0(sp)
    f3dc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    f3e0:	0001883a 	nop
    f3e4:	e037883a 	mov	sp,fp
    f3e8:	df000017 	ldw	fp,0(sp)
    f3ec:	dec00104 	addi	sp,sp,4
    f3f0:	f800283a 	ret

0000f3f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f3f4:	defffe04 	addi	sp,sp,-8
    f3f8:	dfc00115 	stw	ra,4(sp)
    f3fc:	df000015 	stw	fp,0(sp)
    f400:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f404:	00800074 	movhi	r2,1
    f408:	10890604 	addi	r2,r2,9240
    f40c:	10800017 	ldw	r2,0(r2)
    f410:	10000526 	beq	r2,zero,f428 <alt_get_errno+0x34>
    f414:	00800074 	movhi	r2,1
    f418:	10890604 	addi	r2,r2,9240
    f41c:	10800017 	ldw	r2,0(r2)
    f420:	103ee83a 	callr	r2
    f424:	00000206 	br	f430 <alt_get_errno+0x3c>
    f428:	00800074 	movhi	r2,1
    f42c:	108fcc04 	addi	r2,r2,16176
}
    f430:	e037883a 	mov	sp,fp
    f434:	dfc00117 	ldw	ra,4(sp)
    f438:	df000017 	ldw	fp,0(sp)
    f43c:	dec00204 	addi	sp,sp,8
    f440:	f800283a 	ret

0000f444 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    f444:	defffa04 	addi	sp,sp,-24
    f448:	dfc00515 	stw	ra,20(sp)
    f44c:	df000415 	stw	fp,16(sp)
    f450:	df000404 	addi	fp,sp,16
    f454:	e13ffe15 	stw	r4,-8(fp)
    f458:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    f45c:	e0bffe17 	ldw	r2,-8(fp)
    f460:	10000326 	beq	r2,zero,f470 <alt_dev_llist_insert+0x2c>
    f464:	e0bffe17 	ldw	r2,-8(fp)
    f468:	10800217 	ldw	r2,8(r2)
    f46c:	1000061e 	bne	r2,zero,f488 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    f470:	000f3f40 	call	f3f4 <alt_get_errno>
    f474:	1007883a 	mov	r3,r2
    f478:	00800584 	movi	r2,22
    f47c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    f480:	00bffa84 	movi	r2,-22
    f484:	00001306 	br	f4d4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    f488:	e0bffe17 	ldw	r2,-8(fp)
    f48c:	e0ffff17 	ldw	r3,-4(fp)
    f490:	e0fffc15 	stw	r3,-16(fp)
    f494:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f498:	e0bffd17 	ldw	r2,-12(fp)
    f49c:	e0fffc17 	ldw	r3,-16(fp)
    f4a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    f4a4:	e0bffc17 	ldw	r2,-16(fp)
    f4a8:	10c00017 	ldw	r3,0(r2)
    f4ac:	e0bffd17 	ldw	r2,-12(fp)
    f4b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    f4b4:	e0bffc17 	ldw	r2,-16(fp)
    f4b8:	10800017 	ldw	r2,0(r2)
    f4bc:	e0fffd17 	ldw	r3,-12(fp)
    f4c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    f4c4:	e0bffc17 	ldw	r2,-16(fp)
    f4c8:	e0fffd17 	ldw	r3,-12(fp)
    f4cc:	10c00015 	stw	r3,0(r2)

  return 0;  
    f4d0:	0005883a 	mov	r2,zero
}
    f4d4:	e037883a 	mov	sp,fp
    f4d8:	dfc00117 	ldw	ra,4(sp)
    f4dc:	df000017 	ldw	fp,0(sp)
    f4e0:	dec00204 	addi	sp,sp,8
    f4e4:	f800283a 	ret

0000f4e8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f4e8:	defffd04 	addi	sp,sp,-12
    f4ec:	dfc00215 	stw	ra,8(sp)
    f4f0:	df000115 	stw	fp,4(sp)
    f4f4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f4f8:	00800074 	movhi	r2,1
    f4fc:	10814204 	addi	r2,r2,1288
    f500:	e0bfff15 	stw	r2,-4(fp)
    f504:	00000606 	br	f520 <_do_ctors+0x38>
        (*ctor) (); 
    f508:	e0bfff17 	ldw	r2,-4(fp)
    f50c:	10800017 	ldw	r2,0(r2)
    f510:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f514:	e0bfff17 	ldw	r2,-4(fp)
    f518:	10bfff04 	addi	r2,r2,-4
    f51c:	e0bfff15 	stw	r2,-4(fp)
    f520:	e0ffff17 	ldw	r3,-4(fp)
    f524:	00800074 	movhi	r2,1
    f528:	10814304 	addi	r2,r2,1292
    f52c:	18bff62e 	bgeu	r3,r2,f508 <__alt_data_end+0xfffc6128>
        (*ctor) (); 
}
    f530:	0001883a 	nop
    f534:	e037883a 	mov	sp,fp
    f538:	dfc00117 	ldw	ra,4(sp)
    f53c:	df000017 	ldw	fp,0(sp)
    f540:	dec00204 	addi	sp,sp,8
    f544:	f800283a 	ret

0000f548 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f548:	defffd04 	addi	sp,sp,-12
    f54c:	dfc00215 	stw	ra,8(sp)
    f550:	df000115 	stw	fp,4(sp)
    f554:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f558:	00800074 	movhi	r2,1
    f55c:	10814204 	addi	r2,r2,1288
    f560:	e0bfff15 	stw	r2,-4(fp)
    f564:	00000606 	br	f580 <_do_dtors+0x38>
        (*dtor) (); 
    f568:	e0bfff17 	ldw	r2,-4(fp)
    f56c:	10800017 	ldw	r2,0(r2)
    f570:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f574:	e0bfff17 	ldw	r2,-4(fp)
    f578:	10bfff04 	addi	r2,r2,-4
    f57c:	e0bfff15 	stw	r2,-4(fp)
    f580:	e0ffff17 	ldw	r3,-4(fp)
    f584:	00800074 	movhi	r2,1
    f588:	10814304 	addi	r2,r2,1292
    f58c:	18bff62e 	bgeu	r3,r2,f568 <__alt_data_end+0xfffc6188>
        (*dtor) (); 
}
    f590:	0001883a 	nop
    f594:	e037883a 	mov	sp,fp
    f598:	dfc00117 	ldw	ra,4(sp)
    f59c:	df000017 	ldw	fp,0(sp)
    f5a0:	dec00204 	addi	sp,sp,8
    f5a4:	f800283a 	ret

0000f5a8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    f5a8:	deffff04 	addi	sp,sp,-4
    f5ac:	df000015 	stw	fp,0(sp)
    f5b0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    f5b4:	0001883a 	nop
    f5b8:	e037883a 	mov	sp,fp
    f5bc:	df000017 	ldw	fp,0(sp)
    f5c0:	dec00104 	addi	sp,sp,4
    f5c4:	f800283a 	ret

0000f5c8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    f5c8:	defff904 	addi	sp,sp,-28
    f5cc:	dfc00615 	stw	ra,24(sp)
    f5d0:	df000515 	stw	fp,20(sp)
    f5d4:	df000504 	addi	fp,sp,20
    f5d8:	e13ffc15 	stw	r4,-16(fp)
    f5dc:	e17ffd15 	stw	r5,-12(fp)
    f5e0:	e1bffe15 	stw	r6,-8(fp)
    f5e4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    f5e8:	e0800217 	ldw	r2,8(fp)
    f5ec:	d8800015 	stw	r2,0(sp)
    f5f0:	e1ffff17 	ldw	r7,-4(fp)
    f5f4:	e1bffe17 	ldw	r6,-8(fp)
    f5f8:	e17ffd17 	ldw	r5,-12(fp)
    f5fc:	e13ffc17 	ldw	r4,-16(fp)
    f600:	000f7a80 	call	f7a8 <alt_iic_isr_register>
}  
    f604:	e037883a 	mov	sp,fp
    f608:	dfc00117 	ldw	ra,4(sp)
    f60c:	df000017 	ldw	fp,0(sp)
    f610:	dec00204 	addi	sp,sp,8
    f614:	f800283a 	ret

0000f618 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    f618:	defff904 	addi	sp,sp,-28
    f61c:	df000615 	stw	fp,24(sp)
    f620:	df000604 	addi	fp,sp,24
    f624:	e13ffe15 	stw	r4,-8(fp)
    f628:	e17fff15 	stw	r5,-4(fp)
    f62c:	e0bfff17 	ldw	r2,-4(fp)
    f630:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f634:	0005303a 	rdctl	r2,status
    f638:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f63c:	e0fffb17 	ldw	r3,-20(fp)
    f640:	00bfff84 	movi	r2,-2
    f644:	1884703a 	and	r2,r3,r2
    f648:	1001703a 	wrctl	status,r2
  
  return context;
    f64c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    f650:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    f654:	00c00044 	movi	r3,1
    f658:	e0bffa17 	ldw	r2,-24(fp)
    f65c:	1884983a 	sll	r2,r3,r2
    f660:	1007883a 	mov	r3,r2
    f664:	00800074 	movhi	r2,1
    f668:	108fd004 	addi	r2,r2,16192
    f66c:	10800017 	ldw	r2,0(r2)
    f670:	1886b03a 	or	r3,r3,r2
    f674:	00800074 	movhi	r2,1
    f678:	108fd004 	addi	r2,r2,16192
    f67c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f680:	00800074 	movhi	r2,1
    f684:	108fd004 	addi	r2,r2,16192
    f688:	10800017 	ldw	r2,0(r2)
    f68c:	100170fa 	wrctl	ienable,r2
    f690:	e0bffc17 	ldw	r2,-16(fp)
    f694:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f698:	e0bffd17 	ldw	r2,-12(fp)
    f69c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    f6a0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    f6a4:	0001883a 	nop
}
    f6a8:	e037883a 	mov	sp,fp
    f6ac:	df000017 	ldw	fp,0(sp)
    f6b0:	dec00104 	addi	sp,sp,4
    f6b4:	f800283a 	ret

0000f6b8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    f6b8:	defff904 	addi	sp,sp,-28
    f6bc:	df000615 	stw	fp,24(sp)
    f6c0:	df000604 	addi	fp,sp,24
    f6c4:	e13ffe15 	stw	r4,-8(fp)
    f6c8:	e17fff15 	stw	r5,-4(fp)
    f6cc:	e0bfff17 	ldw	r2,-4(fp)
    f6d0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f6d4:	0005303a 	rdctl	r2,status
    f6d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f6dc:	e0fffb17 	ldw	r3,-20(fp)
    f6e0:	00bfff84 	movi	r2,-2
    f6e4:	1884703a 	and	r2,r3,r2
    f6e8:	1001703a 	wrctl	status,r2
  
  return context;
    f6ec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    f6f0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    f6f4:	00c00044 	movi	r3,1
    f6f8:	e0bffa17 	ldw	r2,-24(fp)
    f6fc:	1884983a 	sll	r2,r3,r2
    f700:	0084303a 	nor	r2,zero,r2
    f704:	1007883a 	mov	r3,r2
    f708:	00800074 	movhi	r2,1
    f70c:	108fd004 	addi	r2,r2,16192
    f710:	10800017 	ldw	r2,0(r2)
    f714:	1886703a 	and	r3,r3,r2
    f718:	00800074 	movhi	r2,1
    f71c:	108fd004 	addi	r2,r2,16192
    f720:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f724:	00800074 	movhi	r2,1
    f728:	108fd004 	addi	r2,r2,16192
    f72c:	10800017 	ldw	r2,0(r2)
    f730:	100170fa 	wrctl	ienable,r2
    f734:	e0bffc17 	ldw	r2,-16(fp)
    f738:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f73c:	e0bffd17 	ldw	r2,-12(fp)
    f740:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    f744:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    f748:	0001883a 	nop
}
    f74c:	e037883a 	mov	sp,fp
    f750:	df000017 	ldw	fp,0(sp)
    f754:	dec00104 	addi	sp,sp,4
    f758:	f800283a 	ret

0000f75c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    f75c:	defffc04 	addi	sp,sp,-16
    f760:	df000315 	stw	fp,12(sp)
    f764:	df000304 	addi	fp,sp,12
    f768:	e13ffe15 	stw	r4,-8(fp)
    f76c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    f770:	000530fa 	rdctl	r2,ienable
    f774:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    f778:	00c00044 	movi	r3,1
    f77c:	e0bfff17 	ldw	r2,-4(fp)
    f780:	1884983a 	sll	r2,r3,r2
    f784:	1007883a 	mov	r3,r2
    f788:	e0bffd17 	ldw	r2,-12(fp)
    f78c:	1884703a 	and	r2,r3,r2
    f790:	1004c03a 	cmpne	r2,r2,zero
    f794:	10803fcc 	andi	r2,r2,255
}
    f798:	e037883a 	mov	sp,fp
    f79c:	df000017 	ldw	fp,0(sp)
    f7a0:	dec00104 	addi	sp,sp,4
    f7a4:	f800283a 	ret

0000f7a8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    f7a8:	defff504 	addi	sp,sp,-44
    f7ac:	dfc00a15 	stw	ra,40(sp)
    f7b0:	df000915 	stw	fp,36(sp)
    f7b4:	df000904 	addi	fp,sp,36
    f7b8:	e13ffc15 	stw	r4,-16(fp)
    f7bc:	e17ffd15 	stw	r5,-12(fp)
    f7c0:	e1bffe15 	stw	r6,-8(fp)
    f7c4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    f7c8:	00bffa84 	movi	r2,-22
    f7cc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    f7d0:	e0bffd17 	ldw	r2,-12(fp)
    f7d4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    f7d8:	e0bff817 	ldw	r2,-32(fp)
    f7dc:	10800808 	cmpgei	r2,r2,32
    f7e0:	1000271e 	bne	r2,zero,f880 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f7e4:	0005303a 	rdctl	r2,status
    f7e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f7ec:	e0fffb17 	ldw	r3,-20(fp)
    f7f0:	00bfff84 	movi	r2,-2
    f7f4:	1884703a 	and	r2,r3,r2
    f7f8:	1001703a 	wrctl	status,r2
  
  return context;
    f7fc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    f800:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    f804:	00800074 	movhi	r2,1
    f808:	108fde04 	addi	r2,r2,16248
    f80c:	e0fff817 	ldw	r3,-32(fp)
    f810:	180690fa 	slli	r3,r3,3
    f814:	10c5883a 	add	r2,r2,r3
    f818:	e0fffe17 	ldw	r3,-8(fp)
    f81c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    f820:	00800074 	movhi	r2,1
    f824:	108fde04 	addi	r2,r2,16248
    f828:	e0fff817 	ldw	r3,-32(fp)
    f82c:	180690fa 	slli	r3,r3,3
    f830:	10c5883a 	add	r2,r2,r3
    f834:	10800104 	addi	r2,r2,4
    f838:	e0ffff17 	ldw	r3,-4(fp)
    f83c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    f840:	e0bffe17 	ldw	r2,-8(fp)
    f844:	10000526 	beq	r2,zero,f85c <alt_iic_isr_register+0xb4>
    f848:	e0bff817 	ldw	r2,-32(fp)
    f84c:	100b883a 	mov	r5,r2
    f850:	e13ffc17 	ldw	r4,-16(fp)
    f854:	000f6180 	call	f618 <alt_ic_irq_enable>
    f858:	00000406 	br	f86c <alt_iic_isr_register+0xc4>
    f85c:	e0bff817 	ldw	r2,-32(fp)
    f860:	100b883a 	mov	r5,r2
    f864:	e13ffc17 	ldw	r4,-16(fp)
    f868:	000f6b80 	call	f6b8 <alt_ic_irq_disable>
    f86c:	e0bff715 	stw	r2,-36(fp)
    f870:	e0bffa17 	ldw	r2,-24(fp)
    f874:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f878:	e0bff917 	ldw	r2,-28(fp)
    f87c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    f880:	e0bff717 	ldw	r2,-36(fp)
}
    f884:	e037883a 	mov	sp,fp
    f888:	dfc00117 	ldw	ra,4(sp)
    f88c:	df000017 	ldw	fp,0(sp)
    f890:	dec00204 	addi	sp,sp,8
    f894:	f800283a 	ret

0000f898 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    f898:	defff804 	addi	sp,sp,-32
    f89c:	dfc00715 	stw	ra,28(sp)
    f8a0:	df000615 	stw	fp,24(sp)
    f8a4:	dc000515 	stw	r16,20(sp)
    f8a8:	df000604 	addi	fp,sp,24
    f8ac:	e13ffb15 	stw	r4,-20(fp)
    f8b0:	e17ffc15 	stw	r5,-16(fp)
    f8b4:	e1bffd15 	stw	r6,-12(fp)
    f8b8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    f8bc:	e1bffe17 	ldw	r6,-8(fp)
    f8c0:	e17ffd17 	ldw	r5,-12(fp)
    f8c4:	e13ffc17 	ldw	r4,-16(fp)
    f8c8:	000fb3c0 	call	fb3c <open>
    f8cc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    f8d0:	e0bffa17 	ldw	r2,-24(fp)
    f8d4:	10002216 	blt	r2,zero,f960 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    f8d8:	04000074 	movhi	r16,1
    f8dc:	84048304 	addi	r16,r16,4620
    f8e0:	e0bffa17 	ldw	r2,-24(fp)
    f8e4:	01400304 	movi	r5,12
    f8e8:	1009883a 	mov	r4,r2
    f8ec:	000adf80 	call	adf8 <__mulsi3>
    f8f0:	8085883a 	add	r2,r16,r2
    f8f4:	10c00017 	ldw	r3,0(r2)
    f8f8:	e0bffb17 	ldw	r2,-20(fp)
    f8fc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    f900:	04000074 	movhi	r16,1
    f904:	84048304 	addi	r16,r16,4620
    f908:	e0bffa17 	ldw	r2,-24(fp)
    f90c:	01400304 	movi	r5,12
    f910:	1009883a 	mov	r4,r2
    f914:	000adf80 	call	adf8 <__mulsi3>
    f918:	8085883a 	add	r2,r16,r2
    f91c:	10800104 	addi	r2,r2,4
    f920:	10c00017 	ldw	r3,0(r2)
    f924:	e0bffb17 	ldw	r2,-20(fp)
    f928:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f92c:	04000074 	movhi	r16,1
    f930:	84048304 	addi	r16,r16,4620
    f934:	e0bffa17 	ldw	r2,-24(fp)
    f938:	01400304 	movi	r5,12
    f93c:	1009883a 	mov	r4,r2
    f940:	000adf80 	call	adf8 <__mulsi3>
    f944:	8085883a 	add	r2,r16,r2
    f948:	10800204 	addi	r2,r2,8
    f94c:	10c00017 	ldw	r3,0(r2)
    f950:	e0bffb17 	ldw	r2,-20(fp)
    f954:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    f958:	e13ffa17 	ldw	r4,-24(fp)
    f95c:	000de4c0 	call	de4c <alt_release_fd>
  }
} 
    f960:	0001883a 	nop
    f964:	e6ffff04 	addi	sp,fp,-4
    f968:	dfc00217 	ldw	ra,8(sp)
    f96c:	df000117 	ldw	fp,4(sp)
    f970:	dc000017 	ldw	r16,0(sp)
    f974:	dec00304 	addi	sp,sp,12
    f978:	f800283a 	ret

0000f97c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f97c:	defffb04 	addi	sp,sp,-20
    f980:	dfc00415 	stw	ra,16(sp)
    f984:	df000315 	stw	fp,12(sp)
    f988:	df000304 	addi	fp,sp,12
    f98c:	e13ffd15 	stw	r4,-12(fp)
    f990:	e17ffe15 	stw	r5,-8(fp)
    f994:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    f998:	01c07fc4 	movi	r7,511
    f99c:	01800044 	movi	r6,1
    f9a0:	e17ffd17 	ldw	r5,-12(fp)
    f9a4:	01000074 	movhi	r4,1
    f9a8:	21048604 	addi	r4,r4,4632
    f9ac:	000f8980 	call	f898 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    f9b0:	01c07fc4 	movi	r7,511
    f9b4:	000d883a 	mov	r6,zero
    f9b8:	e17ffe17 	ldw	r5,-8(fp)
    f9bc:	01000074 	movhi	r4,1
    f9c0:	21048304 	addi	r4,r4,4620
    f9c4:	000f8980 	call	f898 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    f9c8:	01c07fc4 	movi	r7,511
    f9cc:	01800044 	movi	r6,1
    f9d0:	e17fff17 	ldw	r5,-4(fp)
    f9d4:	01000074 	movhi	r4,1
    f9d8:	21048904 	addi	r4,r4,4644
    f9dc:	000f8980 	call	f898 <alt_open_fd>
}  
    f9e0:	0001883a 	nop
    f9e4:	e037883a 	mov	sp,fp
    f9e8:	dfc00117 	ldw	ra,4(sp)
    f9ec:	df000017 	ldw	fp,0(sp)
    f9f0:	dec00204 	addi	sp,sp,8
    f9f4:	f800283a 	ret

0000f9f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f9f8:	defffe04 	addi	sp,sp,-8
    f9fc:	dfc00115 	stw	ra,4(sp)
    fa00:	df000015 	stw	fp,0(sp)
    fa04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fa08:	00800074 	movhi	r2,1
    fa0c:	10890604 	addi	r2,r2,9240
    fa10:	10800017 	ldw	r2,0(r2)
    fa14:	10000526 	beq	r2,zero,fa2c <alt_get_errno+0x34>
    fa18:	00800074 	movhi	r2,1
    fa1c:	10890604 	addi	r2,r2,9240
    fa20:	10800017 	ldw	r2,0(r2)
    fa24:	103ee83a 	callr	r2
    fa28:	00000206 	br	fa34 <alt_get_errno+0x3c>
    fa2c:	00800074 	movhi	r2,1
    fa30:	108fcc04 	addi	r2,r2,16176
}
    fa34:	e037883a 	mov	sp,fp
    fa38:	dfc00117 	ldw	ra,4(sp)
    fa3c:	df000017 	ldw	fp,0(sp)
    fa40:	dec00204 	addi	sp,sp,8
    fa44:	f800283a 	ret

0000fa48 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    fa48:	defffb04 	addi	sp,sp,-20
    fa4c:	dfc00415 	stw	ra,16(sp)
    fa50:	df000315 	stw	fp,12(sp)
    fa54:	dc000215 	stw	r16,8(sp)
    fa58:	df000304 	addi	fp,sp,12
    fa5c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    fa60:	e0bffe17 	ldw	r2,-8(fp)
    fa64:	10800217 	ldw	r2,8(r2)
    fa68:	10d00034 	orhi	r3,r2,16384
    fa6c:	e0bffe17 	ldw	r2,-8(fp)
    fa70:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    fa74:	e03ffd15 	stw	zero,-12(fp)
    fa78:	00002306 	br	fb08 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    fa7c:	04000074 	movhi	r16,1
    fa80:	84048304 	addi	r16,r16,4620
    fa84:	e0bffd17 	ldw	r2,-12(fp)
    fa88:	01400304 	movi	r5,12
    fa8c:	1009883a 	mov	r4,r2
    fa90:	000adf80 	call	adf8 <__mulsi3>
    fa94:	8085883a 	add	r2,r16,r2
    fa98:	10c00017 	ldw	r3,0(r2)
    fa9c:	e0bffe17 	ldw	r2,-8(fp)
    faa0:	10800017 	ldw	r2,0(r2)
    faa4:	1880151e 	bne	r3,r2,fafc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    faa8:	04000074 	movhi	r16,1
    faac:	84048304 	addi	r16,r16,4620
    fab0:	e0bffd17 	ldw	r2,-12(fp)
    fab4:	01400304 	movi	r5,12
    fab8:	1009883a 	mov	r4,r2
    fabc:	000adf80 	call	adf8 <__mulsi3>
    fac0:	8085883a 	add	r2,r16,r2
    fac4:	10800204 	addi	r2,r2,8
    fac8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    facc:	10000b0e 	bge	r2,zero,fafc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    fad0:	01400304 	movi	r5,12
    fad4:	e13ffd17 	ldw	r4,-12(fp)
    fad8:	000adf80 	call	adf8 <__mulsi3>
    fadc:	1007883a 	mov	r3,r2
    fae0:	00800074 	movhi	r2,1
    fae4:	10848304 	addi	r2,r2,4620
    fae8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    faec:	e0bffe17 	ldw	r2,-8(fp)
    faf0:	18800226 	beq	r3,r2,fafc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    faf4:	00bffcc4 	movi	r2,-13
    faf8:	00000a06 	br	fb24 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    fafc:	e0bffd17 	ldw	r2,-12(fp)
    fb00:	10800044 	addi	r2,r2,1
    fb04:	e0bffd15 	stw	r2,-12(fp)
    fb08:	00800074 	movhi	r2,1
    fb0c:	10890504 	addi	r2,r2,9236
    fb10:	10800017 	ldw	r2,0(r2)
    fb14:	1007883a 	mov	r3,r2
    fb18:	e0bffd17 	ldw	r2,-12(fp)
    fb1c:	18bfd72e 	bgeu	r3,r2,fa7c <__alt_data_end+0xfffc669c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    fb20:	0005883a 	mov	r2,zero
}
    fb24:	e6ffff04 	addi	sp,fp,-4
    fb28:	dfc00217 	ldw	ra,8(sp)
    fb2c:	df000117 	ldw	fp,4(sp)
    fb30:	dc000017 	ldw	r16,0(sp)
    fb34:	dec00304 	addi	sp,sp,12
    fb38:	f800283a 	ret

0000fb3c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    fb3c:	defff604 	addi	sp,sp,-40
    fb40:	dfc00915 	stw	ra,36(sp)
    fb44:	df000815 	stw	fp,32(sp)
    fb48:	df000804 	addi	fp,sp,32
    fb4c:	e13ffd15 	stw	r4,-12(fp)
    fb50:	e17ffe15 	stw	r5,-8(fp)
    fb54:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    fb58:	00bfffc4 	movi	r2,-1
    fb5c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    fb60:	00bffb44 	movi	r2,-19
    fb64:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    fb68:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    fb6c:	01400074 	movhi	r5,1
    fb70:	29490304 	addi	r5,r5,9228
    fb74:	e13ffd17 	ldw	r4,-12(fp)
    fb78:	000fe640 	call	fe64 <alt_find_dev>
    fb7c:	e0bff815 	stw	r2,-32(fp)
    fb80:	e0bff817 	ldw	r2,-32(fp)
    fb84:	1000051e 	bne	r2,zero,fb9c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    fb88:	e13ffd17 	ldw	r4,-12(fp)
    fb8c:	000fef40 	call	fef4 <alt_find_file>
    fb90:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    fb94:	00800044 	movi	r2,1
    fb98:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    fb9c:	e0bff817 	ldw	r2,-32(fp)
    fba0:	10002b26 	beq	r2,zero,fc50 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    fba4:	e13ff817 	ldw	r4,-32(fp)
    fba8:	00100080 	call	10008 <alt_get_fd>
    fbac:	e0bff915 	stw	r2,-28(fp)
    fbb0:	e0bff917 	ldw	r2,-28(fp)
    fbb4:	1000030e 	bge	r2,zero,fbc4 <open+0x88>
    {
      status = index;
    fbb8:	e0bff917 	ldw	r2,-28(fp)
    fbbc:	e0bffa15 	stw	r2,-24(fp)
    fbc0:	00002506 	br	fc58 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    fbc4:	01400304 	movi	r5,12
    fbc8:	e13ff917 	ldw	r4,-28(fp)
    fbcc:	000adf80 	call	adf8 <__mulsi3>
    fbd0:	1007883a 	mov	r3,r2
    fbd4:	00800074 	movhi	r2,1
    fbd8:	10848304 	addi	r2,r2,4620
    fbdc:	1885883a 	add	r2,r3,r2
    fbe0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    fbe4:	e0fffe17 	ldw	r3,-8(fp)
    fbe8:	00900034 	movhi	r2,16384
    fbec:	10bfffc4 	addi	r2,r2,-1
    fbf0:	1886703a 	and	r3,r3,r2
    fbf4:	e0bffc17 	ldw	r2,-16(fp)
    fbf8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    fbfc:	e0bffb17 	ldw	r2,-20(fp)
    fc00:	1000051e 	bne	r2,zero,fc18 <open+0xdc>
    fc04:	e13ffc17 	ldw	r4,-16(fp)
    fc08:	000fa480 	call	fa48 <alt_file_locked>
    fc0c:	e0bffa15 	stw	r2,-24(fp)
    fc10:	e0bffa17 	ldw	r2,-24(fp)
    fc14:	10001016 	blt	r2,zero,fc58 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    fc18:	e0bff817 	ldw	r2,-32(fp)
    fc1c:	10800317 	ldw	r2,12(r2)
    fc20:	10000826 	beq	r2,zero,fc44 <open+0x108>
    fc24:	e0bff817 	ldw	r2,-32(fp)
    fc28:	10800317 	ldw	r2,12(r2)
    fc2c:	e1ffff17 	ldw	r7,-4(fp)
    fc30:	e1bffe17 	ldw	r6,-8(fp)
    fc34:	e17ffd17 	ldw	r5,-12(fp)
    fc38:	e13ffc17 	ldw	r4,-16(fp)
    fc3c:	103ee83a 	callr	r2
    fc40:	00000106 	br	fc48 <open+0x10c>
    fc44:	0005883a 	mov	r2,zero
    fc48:	e0bffa15 	stw	r2,-24(fp)
    fc4c:	00000206 	br	fc58 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    fc50:	00bffb44 	movi	r2,-19
    fc54:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    fc58:	e0bffa17 	ldw	r2,-24(fp)
    fc5c:	1000090e 	bge	r2,zero,fc84 <open+0x148>
  {
    alt_release_fd (index);  
    fc60:	e13ff917 	ldw	r4,-28(fp)
    fc64:	000de4c0 	call	de4c <alt_release_fd>
    ALT_ERRNO = -status;
    fc68:	000f9f80 	call	f9f8 <alt_get_errno>
    fc6c:	1007883a 	mov	r3,r2
    fc70:	e0bffa17 	ldw	r2,-24(fp)
    fc74:	0085c83a 	sub	r2,zero,r2
    fc78:	18800015 	stw	r2,0(r3)
    return -1;
    fc7c:	00bfffc4 	movi	r2,-1
    fc80:	00000106 	br	fc88 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    fc84:	e0bff917 	ldw	r2,-28(fp)
}
    fc88:	e037883a 	mov	sp,fp
    fc8c:	dfc00117 	ldw	ra,4(sp)
    fc90:	df000017 	ldw	fp,0(sp)
    fc94:	dec00204 	addi	sp,sp,8
    fc98:	f800283a 	ret

0000fc9c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    fc9c:	defffa04 	addi	sp,sp,-24
    fca0:	df000515 	stw	fp,20(sp)
    fca4:	df000504 	addi	fp,sp,20
    fca8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fcac:	0005303a 	rdctl	r2,status
    fcb0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fcb4:	e0fffc17 	ldw	r3,-16(fp)
    fcb8:	00bfff84 	movi	r2,-2
    fcbc:	1884703a 	and	r2,r3,r2
    fcc0:	1001703a 	wrctl	status,r2
  
  return context;
    fcc4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    fcc8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    fccc:	e0bfff17 	ldw	r2,-4(fp)
    fcd0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    fcd4:	e0bffd17 	ldw	r2,-12(fp)
    fcd8:	10800017 	ldw	r2,0(r2)
    fcdc:	e0fffd17 	ldw	r3,-12(fp)
    fce0:	18c00117 	ldw	r3,4(r3)
    fce4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    fce8:	e0bffd17 	ldw	r2,-12(fp)
    fcec:	10800117 	ldw	r2,4(r2)
    fcf0:	e0fffd17 	ldw	r3,-12(fp)
    fcf4:	18c00017 	ldw	r3,0(r3)
    fcf8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    fcfc:	e0bffd17 	ldw	r2,-12(fp)
    fd00:	e0fffd17 	ldw	r3,-12(fp)
    fd04:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    fd08:	e0bffd17 	ldw	r2,-12(fp)
    fd0c:	e0fffd17 	ldw	r3,-12(fp)
    fd10:	10c00015 	stw	r3,0(r2)
    fd14:	e0bffb17 	ldw	r2,-20(fp)
    fd18:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fd1c:	e0bffe17 	ldw	r2,-8(fp)
    fd20:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    fd24:	0001883a 	nop
    fd28:	e037883a 	mov	sp,fp
    fd2c:	df000017 	ldw	fp,0(sp)
    fd30:	dec00104 	addi	sp,sp,4
    fd34:	f800283a 	ret

0000fd38 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    fd38:	defffb04 	addi	sp,sp,-20
    fd3c:	dfc00415 	stw	ra,16(sp)
    fd40:	df000315 	stw	fp,12(sp)
    fd44:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    fd48:	d0a00e17 	ldw	r2,-32712(gp)
    fd4c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    fd50:	d0a6d717 	ldw	r2,-25764(gp)
    fd54:	10800044 	addi	r2,r2,1
    fd58:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    fd5c:	00002e06 	br	fe18 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    fd60:	e0bffd17 	ldw	r2,-12(fp)
    fd64:	10800017 	ldw	r2,0(r2)
    fd68:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    fd6c:	e0bffd17 	ldw	r2,-12(fp)
    fd70:	10800403 	ldbu	r2,16(r2)
    fd74:	10803fcc 	andi	r2,r2,255
    fd78:	10000426 	beq	r2,zero,fd8c <alt_tick+0x54>
    fd7c:	d0a6d717 	ldw	r2,-25764(gp)
    fd80:	1000021e 	bne	r2,zero,fd8c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    fd84:	e0bffd17 	ldw	r2,-12(fp)
    fd88:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    fd8c:	e0bffd17 	ldw	r2,-12(fp)
    fd90:	10800217 	ldw	r2,8(r2)
    fd94:	d0e6d717 	ldw	r3,-25764(gp)
    fd98:	18801d36 	bltu	r3,r2,fe10 <alt_tick+0xd8>
    fd9c:	e0bffd17 	ldw	r2,-12(fp)
    fda0:	10800403 	ldbu	r2,16(r2)
    fda4:	10803fcc 	andi	r2,r2,255
    fda8:	1000191e 	bne	r2,zero,fe10 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    fdac:	e0bffd17 	ldw	r2,-12(fp)
    fdb0:	10800317 	ldw	r2,12(r2)
    fdb4:	e0fffd17 	ldw	r3,-12(fp)
    fdb8:	18c00517 	ldw	r3,20(r3)
    fdbc:	1809883a 	mov	r4,r3
    fdc0:	103ee83a 	callr	r2
    fdc4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    fdc8:	e0bfff17 	ldw	r2,-4(fp)
    fdcc:	1000031e 	bne	r2,zero,fddc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    fdd0:	e13ffd17 	ldw	r4,-12(fp)
    fdd4:	000fc9c0 	call	fc9c <alt_alarm_stop>
    fdd8:	00000d06 	br	fe10 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    fddc:	e0bffd17 	ldw	r2,-12(fp)
    fde0:	10c00217 	ldw	r3,8(r2)
    fde4:	e0bfff17 	ldw	r2,-4(fp)
    fde8:	1887883a 	add	r3,r3,r2
    fdec:	e0bffd17 	ldw	r2,-12(fp)
    fdf0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    fdf4:	e0bffd17 	ldw	r2,-12(fp)
    fdf8:	10c00217 	ldw	r3,8(r2)
    fdfc:	d0a6d717 	ldw	r2,-25764(gp)
    fe00:	1880032e 	bgeu	r3,r2,fe10 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    fe04:	e0bffd17 	ldw	r2,-12(fp)
    fe08:	00c00044 	movi	r3,1
    fe0c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    fe10:	e0bffe17 	ldw	r2,-8(fp)
    fe14:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    fe18:	e0fffd17 	ldw	r3,-12(fp)
    fe1c:	d0a00e04 	addi	r2,gp,-32712
    fe20:	18bfcf1e 	bne	r3,r2,fd60 <__alt_data_end+0xfffc6980>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    fe24:	0001883a 	nop
}
    fe28:	0001883a 	nop
    fe2c:	e037883a 	mov	sp,fp
    fe30:	dfc00117 	ldw	ra,4(sp)
    fe34:	df000017 	ldw	fp,0(sp)
    fe38:	dec00204 	addi	sp,sp,8
    fe3c:	f800283a 	ret

0000fe40 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    fe40:	deffff04 	addi	sp,sp,-4
    fe44:	df000015 	stw	fp,0(sp)
    fe48:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    fe4c:	000170fa 	wrctl	ienable,zero
}
    fe50:	0001883a 	nop
    fe54:	e037883a 	mov	sp,fp
    fe58:	df000017 	ldw	fp,0(sp)
    fe5c:	dec00104 	addi	sp,sp,4
    fe60:	f800283a 	ret

0000fe64 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    fe64:	defffa04 	addi	sp,sp,-24
    fe68:	dfc00515 	stw	ra,20(sp)
    fe6c:	df000415 	stw	fp,16(sp)
    fe70:	df000404 	addi	fp,sp,16
    fe74:	e13ffe15 	stw	r4,-8(fp)
    fe78:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    fe7c:	e0bfff17 	ldw	r2,-4(fp)
    fe80:	10800017 	ldw	r2,0(r2)
    fe84:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    fe88:	e13ffe17 	ldw	r4,-8(fp)
    fe8c:	000075c0 	call	75c <strlen>
    fe90:	10800044 	addi	r2,r2,1
    fe94:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    fe98:	00000d06 	br	fed0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    fe9c:	e0bffc17 	ldw	r2,-16(fp)
    fea0:	10800217 	ldw	r2,8(r2)
    fea4:	e0fffd17 	ldw	r3,-12(fp)
    fea8:	180d883a 	mov	r6,r3
    feac:	e17ffe17 	ldw	r5,-8(fp)
    feb0:	1009883a 	mov	r4,r2
    feb4:	00101c40 	call	101c4 <memcmp>
    feb8:	1000021e 	bne	r2,zero,fec4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    febc:	e0bffc17 	ldw	r2,-16(fp)
    fec0:	00000706 	br	fee0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    fec4:	e0bffc17 	ldw	r2,-16(fp)
    fec8:	10800017 	ldw	r2,0(r2)
    fecc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    fed0:	e0fffc17 	ldw	r3,-16(fp)
    fed4:	e0bfff17 	ldw	r2,-4(fp)
    fed8:	18bff01e 	bne	r3,r2,fe9c <__alt_data_end+0xfffc6abc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    fedc:	0005883a 	mov	r2,zero
}
    fee0:	e037883a 	mov	sp,fp
    fee4:	dfc00117 	ldw	ra,4(sp)
    fee8:	df000017 	ldw	fp,0(sp)
    feec:	dec00204 	addi	sp,sp,8
    fef0:	f800283a 	ret

0000fef4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    fef4:	defffb04 	addi	sp,sp,-20
    fef8:	dfc00415 	stw	ra,16(sp)
    fefc:	df000315 	stw	fp,12(sp)
    ff00:	df000304 	addi	fp,sp,12
    ff04:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    ff08:	00800074 	movhi	r2,1
    ff0c:	10890104 	addi	r2,r2,9220
    ff10:	10800017 	ldw	r2,0(r2)
    ff14:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ff18:	00003106 	br	ffe0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    ff1c:	e0bffd17 	ldw	r2,-12(fp)
    ff20:	10800217 	ldw	r2,8(r2)
    ff24:	1009883a 	mov	r4,r2
    ff28:	000075c0 	call	75c <strlen>
    ff2c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    ff30:	e0bffd17 	ldw	r2,-12(fp)
    ff34:	10c00217 	ldw	r3,8(r2)
    ff38:	e0bffe17 	ldw	r2,-8(fp)
    ff3c:	10bfffc4 	addi	r2,r2,-1
    ff40:	1885883a 	add	r2,r3,r2
    ff44:	10800003 	ldbu	r2,0(r2)
    ff48:	10803fcc 	andi	r2,r2,255
    ff4c:	1080201c 	xori	r2,r2,128
    ff50:	10bfe004 	addi	r2,r2,-128
    ff54:	10800bd8 	cmpnei	r2,r2,47
    ff58:	1000031e 	bne	r2,zero,ff68 <alt_find_file+0x74>
    {
      len -= 1;
    ff5c:	e0bffe17 	ldw	r2,-8(fp)
    ff60:	10bfffc4 	addi	r2,r2,-1
    ff64:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ff68:	e0bffe17 	ldw	r2,-8(fp)
    ff6c:	e0ffff17 	ldw	r3,-4(fp)
    ff70:	1885883a 	add	r2,r3,r2
    ff74:	10800003 	ldbu	r2,0(r2)
    ff78:	10803fcc 	andi	r2,r2,255
    ff7c:	1080201c 	xori	r2,r2,128
    ff80:	10bfe004 	addi	r2,r2,-128
    ff84:	10800be0 	cmpeqi	r2,r2,47
    ff88:	1000081e 	bne	r2,zero,ffac <alt_find_file+0xb8>
    ff8c:	e0bffe17 	ldw	r2,-8(fp)
    ff90:	e0ffff17 	ldw	r3,-4(fp)
    ff94:	1885883a 	add	r2,r3,r2
    ff98:	10800003 	ldbu	r2,0(r2)
    ff9c:	10803fcc 	andi	r2,r2,255
    ffa0:	1080201c 	xori	r2,r2,128
    ffa4:	10bfe004 	addi	r2,r2,-128
    ffa8:	10000a1e 	bne	r2,zero,ffd4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    ffac:	e0bffd17 	ldw	r2,-12(fp)
    ffb0:	10800217 	ldw	r2,8(r2)
    ffb4:	e0fffe17 	ldw	r3,-8(fp)
    ffb8:	180d883a 	mov	r6,r3
    ffbc:	e17fff17 	ldw	r5,-4(fp)
    ffc0:	1009883a 	mov	r4,r2
    ffc4:	00101c40 	call	101c4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ffc8:	1000021e 	bne	r2,zero,ffd4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    ffcc:	e0bffd17 	ldw	r2,-12(fp)
    ffd0:	00000806 	br	fff4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    ffd4:	e0bffd17 	ldw	r2,-12(fp)
    ffd8:	10800017 	ldw	r2,0(r2)
    ffdc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ffe0:	e0fffd17 	ldw	r3,-12(fp)
    ffe4:	00800074 	movhi	r2,1
    ffe8:	10890104 	addi	r2,r2,9220
    ffec:	18bfcb1e 	bne	r3,r2,ff1c <__alt_data_end+0xfffc6b3c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    fff0:	0005883a 	mov	r2,zero
}
    fff4:	e037883a 	mov	sp,fp
    fff8:	dfc00117 	ldw	ra,4(sp)
    fffc:	df000017 	ldw	fp,0(sp)
   10000:	dec00204 	addi	sp,sp,8
   10004:	f800283a 	ret

00010008 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   10008:	defffa04 	addi	sp,sp,-24
   1000c:	dfc00515 	stw	ra,20(sp)
   10010:	df000415 	stw	fp,16(sp)
   10014:	dc000315 	stw	r16,12(sp)
   10018:	df000404 	addi	fp,sp,16
   1001c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   10020:	00bffa04 	movi	r2,-24
   10024:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10028:	e03ffc15 	stw	zero,-16(fp)
   1002c:	00002106 	br	100b4 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   10030:	04000074 	movhi	r16,1
   10034:	84048304 	addi	r16,r16,4620
   10038:	e0bffc17 	ldw	r2,-16(fp)
   1003c:	01400304 	movi	r5,12
   10040:	1009883a 	mov	r4,r2
   10044:	000adf80 	call	adf8 <__mulsi3>
   10048:	8085883a 	add	r2,r16,r2
   1004c:	10800017 	ldw	r2,0(r2)
   10050:	1000151e 	bne	r2,zero,100a8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   10054:	04000074 	movhi	r16,1
   10058:	84048304 	addi	r16,r16,4620
   1005c:	e0bffc17 	ldw	r2,-16(fp)
   10060:	01400304 	movi	r5,12
   10064:	1009883a 	mov	r4,r2
   10068:	000adf80 	call	adf8 <__mulsi3>
   1006c:	8085883a 	add	r2,r16,r2
   10070:	e0fffe17 	ldw	r3,-8(fp)
   10074:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   10078:	00800074 	movhi	r2,1
   1007c:	10890504 	addi	r2,r2,9236
   10080:	10c00017 	ldw	r3,0(r2)
   10084:	e0bffc17 	ldw	r2,-16(fp)
   10088:	1880040e 	bge	r3,r2,1009c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   1008c:	00800074 	movhi	r2,1
   10090:	10890504 	addi	r2,r2,9236
   10094:	e0fffc17 	ldw	r3,-16(fp)
   10098:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1009c:	e0bffc17 	ldw	r2,-16(fp)
   100a0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   100a4:	00000606 	br	100c0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   100a8:	e0bffc17 	ldw	r2,-16(fp)
   100ac:	10800044 	addi	r2,r2,1
   100b0:	e0bffc15 	stw	r2,-16(fp)
   100b4:	e0bffc17 	ldw	r2,-16(fp)
   100b8:	10800810 	cmplti	r2,r2,32
   100bc:	103fdc1e 	bne	r2,zero,10030 <__alt_data_end+0xfffc6c50>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   100c0:	e0bffd17 	ldw	r2,-12(fp)
}
   100c4:	e6ffff04 	addi	sp,fp,-4
   100c8:	dfc00217 	ldw	ra,8(sp)
   100cc:	df000117 	ldw	fp,4(sp)
   100d0:	dc000017 	ldw	r16,0(sp)
   100d4:	dec00304 	addi	sp,sp,12
   100d8:	f800283a 	ret

000100dc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   100dc:	defffe04 	addi	sp,sp,-8
   100e0:	df000115 	stw	fp,4(sp)
   100e4:	df000104 	addi	fp,sp,4
   100e8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   100ec:	e0bfff17 	ldw	r2,-4(fp)
   100f0:	10bffe84 	addi	r2,r2,-6
   100f4:	10c00428 	cmpgeui	r3,r2,16
   100f8:	18001a1e 	bne	r3,zero,10164 <alt_exception_cause_generated_bad_addr+0x88>
   100fc:	100690ba 	slli	r3,r2,2
   10100:	00800074 	movhi	r2,1
   10104:	10804504 	addi	r2,r2,276
   10108:	1885883a 	add	r2,r3,r2
   1010c:	10800017 	ldw	r2,0(r2)
   10110:	1000683a 	jmp	r2
   10114:	00010154 	movui	zero,1029
   10118:	00010154 	movui	zero,1029
   1011c:	00010164 	muli	zero,zero,1029
   10120:	00010164 	muli	zero,zero,1029
   10124:	00010164 	muli	zero,zero,1029
   10128:	00010154 	movui	zero,1029
   1012c:	0001015c 	xori	zero,zero,1029
   10130:	00010164 	muli	zero,zero,1029
   10134:	00010154 	movui	zero,1029
   10138:	00010154 	movui	zero,1029
   1013c:	00010164 	muli	zero,zero,1029
   10140:	00010154 	movui	zero,1029
   10144:	0001015c 	xori	zero,zero,1029
   10148:	00010164 	muli	zero,zero,1029
   1014c:	00010164 	muli	zero,zero,1029
   10150:	00010154 	movui	zero,1029
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10154:	00800044 	movi	r2,1
   10158:	00000306 	br	10168 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1015c:	0005883a 	mov	r2,zero
   10160:	00000106 	br	10168 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   10164:	0005883a 	mov	r2,zero
  }
}
   10168:	e037883a 	mov	sp,fp
   1016c:	df000017 	ldw	fp,0(sp)
   10170:	dec00104 	addi	sp,sp,4
   10174:	f800283a 	ret

00010178 <atexit>:
   10178:	200b883a 	mov	r5,r4
   1017c:	000f883a 	mov	r7,zero
   10180:	000d883a 	mov	r6,zero
   10184:	0009883a 	mov	r4,zero
   10188:	00102401 	jmpi	10240 <__register_exitproc>

0001018c <exit>:
   1018c:	defffe04 	addi	sp,sp,-8
   10190:	000b883a 	mov	r5,zero
   10194:	dc000015 	stw	r16,0(sp)
   10198:	dfc00115 	stw	ra,4(sp)
   1019c:	2021883a 	mov	r16,r4
   101a0:	00103580 	call	10358 <__call_exitprocs>
   101a4:	00800074 	movhi	r2,1
   101a8:	1088fb04 	addi	r2,r2,9196
   101ac:	11000017 	ldw	r4,0(r2)
   101b0:	20800f17 	ldw	r2,60(r4)
   101b4:	10000126 	beq	r2,zero,101bc <exit+0x30>
   101b8:	103ee83a 	callr	r2
   101bc:	8009883a 	mov	r4,r16
   101c0:	00104d80 	call	104d8 <_exit>

000101c4 <memcmp>:
   101c4:	01c000c4 	movi	r7,3
   101c8:	3980192e 	bgeu	r7,r6,10230 <memcmp+0x6c>
   101cc:	2144b03a 	or	r2,r4,r5
   101d0:	11c4703a 	and	r2,r2,r7
   101d4:	10000f26 	beq	r2,zero,10214 <memcmp+0x50>
   101d8:	20800003 	ldbu	r2,0(r4)
   101dc:	28c00003 	ldbu	r3,0(r5)
   101e0:	10c0151e 	bne	r2,r3,10238 <memcmp+0x74>
   101e4:	31bfff84 	addi	r6,r6,-2
   101e8:	01ffffc4 	movi	r7,-1
   101ec:	00000406 	br	10200 <memcmp+0x3c>
   101f0:	20800003 	ldbu	r2,0(r4)
   101f4:	28c00003 	ldbu	r3,0(r5)
   101f8:	31bfffc4 	addi	r6,r6,-1
   101fc:	10c00e1e 	bne	r2,r3,10238 <memcmp+0x74>
   10200:	21000044 	addi	r4,r4,1
   10204:	29400044 	addi	r5,r5,1
   10208:	31fff91e 	bne	r6,r7,101f0 <__alt_data_end+0xfffc6e10>
   1020c:	0005883a 	mov	r2,zero
   10210:	f800283a 	ret
   10214:	20c00017 	ldw	r3,0(r4)
   10218:	28800017 	ldw	r2,0(r5)
   1021c:	18bfee1e 	bne	r3,r2,101d8 <__alt_data_end+0xfffc6df8>
   10220:	31bfff04 	addi	r6,r6,-4
   10224:	21000104 	addi	r4,r4,4
   10228:	29400104 	addi	r5,r5,4
   1022c:	39bff936 	bltu	r7,r6,10214 <__alt_data_end+0xfffc6e34>
   10230:	303fe91e 	bne	r6,zero,101d8 <__alt_data_end+0xfffc6df8>
   10234:	003ff506 	br	1020c <__alt_data_end+0xfffc6e2c>
   10238:	10c5c83a 	sub	r2,r2,r3
   1023c:	f800283a 	ret

00010240 <__register_exitproc>:
   10240:	defffa04 	addi	sp,sp,-24
   10244:	dc000315 	stw	r16,12(sp)
   10248:	04000074 	movhi	r16,1
   1024c:	8408fb04 	addi	r16,r16,9196
   10250:	80c00017 	ldw	r3,0(r16)
   10254:	dc400415 	stw	r17,16(sp)
   10258:	dfc00515 	stw	ra,20(sp)
   1025c:	18805217 	ldw	r2,328(r3)
   10260:	2023883a 	mov	r17,r4
   10264:	10003726 	beq	r2,zero,10344 <__register_exitproc+0x104>
   10268:	10c00117 	ldw	r3,4(r2)
   1026c:	010007c4 	movi	r4,31
   10270:	20c00e16 	blt	r4,r3,102ac <__register_exitproc+0x6c>
   10274:	1a000044 	addi	r8,r3,1
   10278:	8800221e 	bne	r17,zero,10304 <__register_exitproc+0xc4>
   1027c:	18c00084 	addi	r3,r3,2
   10280:	18c7883a 	add	r3,r3,r3
   10284:	18c7883a 	add	r3,r3,r3
   10288:	12000115 	stw	r8,4(r2)
   1028c:	10c7883a 	add	r3,r2,r3
   10290:	19400015 	stw	r5,0(r3)
   10294:	0005883a 	mov	r2,zero
   10298:	dfc00517 	ldw	ra,20(sp)
   1029c:	dc400417 	ldw	r17,16(sp)
   102a0:	dc000317 	ldw	r16,12(sp)
   102a4:	dec00604 	addi	sp,sp,24
   102a8:	f800283a 	ret
   102ac:	00800034 	movhi	r2,0
   102b0:	10800004 	addi	r2,r2,0
   102b4:	10002626 	beq	r2,zero,10350 <__register_exitproc+0x110>
   102b8:	01006404 	movi	r4,400
   102bc:	d9400015 	stw	r5,0(sp)
   102c0:	d9800115 	stw	r6,4(sp)
   102c4:	d9c00215 	stw	r7,8(sp)
   102c8:	00000000 	call	0 <__reset>
   102cc:	d9400017 	ldw	r5,0(sp)
   102d0:	d9800117 	ldw	r6,4(sp)
   102d4:	d9c00217 	ldw	r7,8(sp)
   102d8:	10001d26 	beq	r2,zero,10350 <__register_exitproc+0x110>
   102dc:	81000017 	ldw	r4,0(r16)
   102e0:	10000115 	stw	zero,4(r2)
   102e4:	02000044 	movi	r8,1
   102e8:	22405217 	ldw	r9,328(r4)
   102ec:	0007883a 	mov	r3,zero
   102f0:	12400015 	stw	r9,0(r2)
   102f4:	20805215 	stw	r2,328(r4)
   102f8:	10006215 	stw	zero,392(r2)
   102fc:	10006315 	stw	zero,396(r2)
   10300:	883fde26 	beq	r17,zero,1027c <__alt_data_end+0xfffc6e9c>
   10304:	18c9883a 	add	r4,r3,r3
   10308:	2109883a 	add	r4,r4,r4
   1030c:	1109883a 	add	r4,r2,r4
   10310:	21802215 	stw	r6,136(r4)
   10314:	01800044 	movi	r6,1
   10318:	12406217 	ldw	r9,392(r2)
   1031c:	30cc983a 	sll	r6,r6,r3
   10320:	4992b03a 	or	r9,r9,r6
   10324:	12406215 	stw	r9,392(r2)
   10328:	21c04215 	stw	r7,264(r4)
   1032c:	01000084 	movi	r4,2
   10330:	893fd21e 	bne	r17,r4,1027c <__alt_data_end+0xfffc6e9c>
   10334:	11006317 	ldw	r4,396(r2)
   10338:	218cb03a 	or	r6,r4,r6
   1033c:	11806315 	stw	r6,396(r2)
   10340:	003fce06 	br	1027c <__alt_data_end+0xfffc6e9c>
   10344:	18805304 	addi	r2,r3,332
   10348:	18805215 	stw	r2,328(r3)
   1034c:	003fc606 	br	10268 <__alt_data_end+0xfffc6e88>
   10350:	00bfffc4 	movi	r2,-1
   10354:	003fd006 	br	10298 <__alt_data_end+0xfffc6eb8>

00010358 <__call_exitprocs>:
   10358:	defff504 	addi	sp,sp,-44
   1035c:	df000915 	stw	fp,36(sp)
   10360:	dd400615 	stw	r21,24(sp)
   10364:	dc800315 	stw	r18,12(sp)
   10368:	dfc00a15 	stw	ra,40(sp)
   1036c:	ddc00815 	stw	r23,32(sp)
   10370:	dd800715 	stw	r22,28(sp)
   10374:	dd000515 	stw	r20,20(sp)
   10378:	dcc00415 	stw	r19,16(sp)
   1037c:	dc400215 	stw	r17,8(sp)
   10380:	dc000115 	stw	r16,4(sp)
   10384:	d9000015 	stw	r4,0(sp)
   10388:	2839883a 	mov	fp,r5
   1038c:	04800044 	movi	r18,1
   10390:	057fffc4 	movi	r21,-1
   10394:	00800074 	movhi	r2,1
   10398:	1088fb04 	addi	r2,r2,9196
   1039c:	12000017 	ldw	r8,0(r2)
   103a0:	45005217 	ldw	r20,328(r8)
   103a4:	44c05204 	addi	r19,r8,328
   103a8:	a0001c26 	beq	r20,zero,1041c <__call_exitprocs+0xc4>
   103ac:	a0800117 	ldw	r2,4(r20)
   103b0:	15ffffc4 	addi	r23,r2,-1
   103b4:	b8000d16 	blt	r23,zero,103ec <__call_exitprocs+0x94>
   103b8:	14000044 	addi	r16,r2,1
   103bc:	8421883a 	add	r16,r16,r16
   103c0:	8421883a 	add	r16,r16,r16
   103c4:	84402004 	addi	r17,r16,128
   103c8:	a463883a 	add	r17,r20,r17
   103cc:	a421883a 	add	r16,r20,r16
   103d0:	e0001e26 	beq	fp,zero,1044c <__call_exitprocs+0xf4>
   103d4:	80804017 	ldw	r2,256(r16)
   103d8:	e0801c26 	beq	fp,r2,1044c <__call_exitprocs+0xf4>
   103dc:	bdffffc4 	addi	r23,r23,-1
   103e0:	843fff04 	addi	r16,r16,-4
   103e4:	8c7fff04 	addi	r17,r17,-4
   103e8:	bd7ff91e 	bne	r23,r21,103d0 <__alt_data_end+0xfffc6ff0>
   103ec:	00800034 	movhi	r2,0
   103f0:	10800004 	addi	r2,r2,0
   103f4:	10000926 	beq	r2,zero,1041c <__call_exitprocs+0xc4>
   103f8:	a0800117 	ldw	r2,4(r20)
   103fc:	1000301e 	bne	r2,zero,104c0 <__call_exitprocs+0x168>
   10400:	a0800017 	ldw	r2,0(r20)
   10404:	10003226 	beq	r2,zero,104d0 <__call_exitprocs+0x178>
   10408:	a009883a 	mov	r4,r20
   1040c:	98800015 	stw	r2,0(r19)
   10410:	00000000 	call	0 <__reset>
   10414:	9d000017 	ldw	r20,0(r19)
   10418:	a03fe41e 	bne	r20,zero,103ac <__alt_data_end+0xfffc6fcc>
   1041c:	dfc00a17 	ldw	ra,40(sp)
   10420:	df000917 	ldw	fp,36(sp)
   10424:	ddc00817 	ldw	r23,32(sp)
   10428:	dd800717 	ldw	r22,28(sp)
   1042c:	dd400617 	ldw	r21,24(sp)
   10430:	dd000517 	ldw	r20,20(sp)
   10434:	dcc00417 	ldw	r19,16(sp)
   10438:	dc800317 	ldw	r18,12(sp)
   1043c:	dc400217 	ldw	r17,8(sp)
   10440:	dc000117 	ldw	r16,4(sp)
   10444:	dec00b04 	addi	sp,sp,44
   10448:	f800283a 	ret
   1044c:	a0800117 	ldw	r2,4(r20)
   10450:	80c00017 	ldw	r3,0(r16)
   10454:	10bfffc4 	addi	r2,r2,-1
   10458:	15c01426 	beq	r2,r23,104ac <__call_exitprocs+0x154>
   1045c:	80000015 	stw	zero,0(r16)
   10460:	183fde26 	beq	r3,zero,103dc <__alt_data_end+0xfffc6ffc>
   10464:	95c8983a 	sll	r4,r18,r23
   10468:	a0806217 	ldw	r2,392(r20)
   1046c:	a5800117 	ldw	r22,4(r20)
   10470:	2084703a 	and	r2,r4,r2
   10474:	10000b26 	beq	r2,zero,104a4 <__call_exitprocs+0x14c>
   10478:	a0806317 	ldw	r2,396(r20)
   1047c:	2088703a 	and	r4,r4,r2
   10480:	20000c1e 	bne	r4,zero,104b4 <__call_exitprocs+0x15c>
   10484:	89400017 	ldw	r5,0(r17)
   10488:	d9000017 	ldw	r4,0(sp)
   1048c:	183ee83a 	callr	r3
   10490:	a0800117 	ldw	r2,4(r20)
   10494:	15bfbf1e 	bne	r2,r22,10394 <__alt_data_end+0xfffc6fb4>
   10498:	98800017 	ldw	r2,0(r19)
   1049c:	153fcf26 	beq	r2,r20,103dc <__alt_data_end+0xfffc6ffc>
   104a0:	003fbc06 	br	10394 <__alt_data_end+0xfffc6fb4>
   104a4:	183ee83a 	callr	r3
   104a8:	003ff906 	br	10490 <__alt_data_end+0xfffc70b0>
   104ac:	a5c00115 	stw	r23,4(r20)
   104b0:	003feb06 	br	10460 <__alt_data_end+0xfffc7080>
   104b4:	89000017 	ldw	r4,0(r17)
   104b8:	183ee83a 	callr	r3
   104bc:	003ff406 	br	10490 <__alt_data_end+0xfffc70b0>
   104c0:	a0800017 	ldw	r2,0(r20)
   104c4:	a027883a 	mov	r19,r20
   104c8:	1029883a 	mov	r20,r2
   104cc:	003fb606 	br	103a8 <__alt_data_end+0xfffc6fc8>
   104d0:	0005883a 	mov	r2,zero
   104d4:	003ffb06 	br	104c4 <__alt_data_end+0xfffc70e4>

000104d8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   104d8:	defffd04 	addi	sp,sp,-12
   104dc:	df000215 	stw	fp,8(sp)
   104e0:	df000204 	addi	fp,sp,8
   104e4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   104e8:	0001883a 	nop
   104ec:	e0bfff17 	ldw	r2,-4(fp)
   104f0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   104f4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   104f8:	10000226 	beq	r2,zero,10504 <_exit+0x2c>
    ALT_SIM_FAIL();
   104fc:	002af070 	cmpltui	zero,zero,43969
   10500:	00000106 	br	10508 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   10504:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   10508:	003fff06 	br	10508 <__alt_data_end+0xfffc7128>
