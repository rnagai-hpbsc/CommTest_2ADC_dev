
testreadout.elf:     file format elf32-littlenios2
testreadout.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000108e8 memsz 0x000108e8 flags r-x
    LOAD off    0x00011908 vaddr 0x00010908 paddr 0x000123f4 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00013ee0 vaddr 0x00013ee0 paddr 0x00013ee0 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010298  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000440  000104c8  000104c8  000114c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  00010908  000123f4  00011908  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00013ee0  00013ee0  00013ee0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00014040  00014040  000133f4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000133f4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f48  00000000  00000000  00013418  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024b53  00000000  00000000  00014360  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000941a  00000000  00000000  00038eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ba60  00000000  00000000  000422cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000023d4  00000000  00000000  0004dd30  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003c0f  00000000  00000000  00050104  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017b11  00000000  00000000  00053d13  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006b824  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001930  00000000  00000000  0006b868  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000705b6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000705b9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000705c5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000705c6  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000705c7  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000705d2  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000705dd  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  000705e8  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003c  00000000  00000000  000705ee  2**0
                  CONTENTS, READONLY
 26 .jdi          000051e6  00000000  00000000  0007062a  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006a30b  00000000  00000000  00075810  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
000104c8 l    d  .rodata	00000000 .rodata
00010908 l    d  .rwdata	00000000 .rwdata
00013ee0 l    d  .bss	00000000 .bss
00014040 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../testreadout_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 testreadout.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001064e l     O .rodata	00000010 zeroes.4404
00002aa8 l     F .text	000000bc __sbprintf
0001065e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002cb8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004810 l     F .text	00000008 __fp_unlock
00004824 l     F .text	0000019c __sinit.part.1
000049c0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010908 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00010d4c l     O .rwdata	00000020 lc_ctype_charset
00010d2c l     O .rwdata	00000020 lc_message_charset
00010d6c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00010690 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00007ffc l     F .text	000000fc __sprint_r.part.0
000107b4 l     O .rodata	00000010 zeroes.4349
00009638 l     F .text	000000bc __sbprintf
000107c4 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000d680 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000d7a8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d7d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d8dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d9d8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000dac4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000dcb4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000123e4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000df6c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000e0bc l     F .text	00000038 alt_dev_reg
00011354 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000e8ac l     F .text	0000020c altera_avalon_jtag_uart_irq
0000eab8 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000f3b0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000f854 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000f9b4 l     F .text	00000050 alt_get_errno
0000fa04 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00013f14 g     O .bss	00000004 alt_instruction_exception_handler
0000062c g     F .text	00000018 putchar
000074d8 g     F .text	00000074 _mprec_log10
000075c4 g     F .text	0000008c __any_on
00009d44 g     F .text	00000054 _isatty_r
0001069c g     O .rodata	00000028 __mprec_tinytens
0000dbf0 g     F .text	0000007c alt_main
00000644 g     F .text	000000c0 _puts_r
00013f40 g     O .bss	00000100 alt_irq
00009d98 g     F .text	00000060 _lseek_r
0000e404 g     F .text	0000005c altera_avalon_fifo_write_almostfull
000123f4 g       *ABS*	00000000 __flash_rwdata_start
0000c058 g     F .text	00000088 .hidden __eqdf2
00014040 g       *ABS*	00000000 __alt_heap_start
000005e8 g     F .text	0000003c printf
00009e58 g     F .text	0000009c _wcrtomb_r
00007ebc g     F .text	0000005c __sseek
00004b70 g     F .text	00000010 __sinit
000096f4 g     F .text	00000140 __swbuf_r
00005644 g     F .text	0000007c _setlocale_r
000049c8 g     F .text	00000078 __sfmoreglue
0000dc90 g     F .text	00000024 __malloc_unlock
00006314 g     F .text	0000015c memmove
0000e17c g     F .text	00000098 altera_avalon_fifo_init
00004b58 g     F .text	00000018 _cleanup
0000e4bc g     F .text	00000058 altera_avalon_fifo_write_fifo
00006598 g     F .text	000000a8 _Balloc
0000c0e0 g     F .text	000000dc .hidden __gtdf2
0000fdfc g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
0000e658 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00000020 g       *ABS*	00000000 __flash_exceptions_start
00009ce8 g     F .text	0000005c _fstat_r
00013ef8 g     O .bss	00000004 errno
00007e38 g     F .text	00000008 __seofread
00013f00 g     O .bss	00000004 alt_argv
0001a3b4 g       *ABS*	00000000 _gp
0000df3c g     F .text	00000030 usleep
0000e348 g     F .text	00000060 altera_avalon_fifo_clear_event
000111d4 g     O .rwdata	00000180 alt_fd_list
00000624 g     F .text	00000008 _putchar_r
0000fe20 g     F .text	00000090 alt_find_dev
000061cc g     F .text	00000148 memcpy
00004818 g     F .text	0000000c _cleanup_r
0000d498 g     F .text	000000dc .hidden __floatsidf
0000f938 g     F .text	0000007c alt_io_redirect
0000c1bc g     F .text	000000f4 .hidden __ltdf2
000104c8 g       *ABS*	00000000 __DTOR_END__
00000704 g     F .text	00000014 puts
00010098 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00007d1c g     F .text	00000074 __fpclassifyd
00007434 g     F .text	000000a4 __ratio
0000961c g     F .text	0000001c __vfiprintf_internal
0000ecb8 g     F .text	0000021c altera_avalon_jtag_uart_read
000005b8 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000acf8 g     F .text	00000064 .hidden __udivsi3
0000d92c g     F .text	000000ac isatty
000106ec g     O .rodata	000000c8 __mprec_tens
000056c0 g     F .text	0000000c __locale_charset
00013ef4 g     O .bss	00000004 __malloc_top_pad
000123bc g     O .rwdata	00000004 __mb_cur_max
000056f0 g     F .text	0000000c _localeconv_r
000069cc g     F .text	0000003c __i2b
00004ff4 g     F .text	000004c8 __sfvwrite_r
00007d90 g     F .text	00000054 _sbrk_r
00009df8 g     F .text	00000060 _read_r
000123dc g     O .rwdata	00000004 alt_max_fd
000099dc g     F .text	000000f0 _fclose_r
000047e0 g     F .text	00000030 fflush
00013ef0 g     O .bss	00000004 __malloc_max_sbrked_mem
0000addc g     F .text	000008ac .hidden __adddf3
000071dc g     F .text	0000010c __b2d
0000a63c g     F .text	000005c4 .hidden __umoddi3
0000db14 g     F .text	000000dc lseek
000123b4 g     O .rwdata	00000004 _global_impure_ptr
000077b8 g     F .text	00000564 _realloc_r
00014040 g       *ABS*	00000000 __bss_end
0000f764 g     F .text	000000f0 alt_iic_isr_register
0000fcf4 g     F .text	00000108 alt_tick
0000a040 g     F .text	000005fc .hidden __udivdi3
00009c44 g     F .text	00000024 _fputwc_r
000106c4 g     O .rodata	00000028 __mprec_bigtens
000067b0 g     F .text	00000104 __s2b
0000d574 g     F .text	000000a8 .hidden __floatunsidf
00006f1c g     F .text	00000060 __mcmp
00004b90 g     F .text	00000018 __fp_lock_all
0000f718 g     F .text	0000004c alt_ic_irq_enabled
0000fc58 g     F .text	0000009c alt_alarm_stop
00013f08 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
000111ac g     O .rwdata	00000028 alt_dev_null
0000f390 g     F .text	00000020 alt_dcache_flush_all
000068b4 g     F .text	00000068 __hi0bits
0000d418 g     F .text	00000080 .hidden __fixdfsi
0000e3a8 g     F .text	0000005c altera_avalon_fifo_write_ienable
000123f4 g       *ABS*	00000000 __ram_rwdata_end
0000e2b8 g     F .text	0000002c altera_avalon_fifo_read_almostempty
000123d4 g     O .rwdata	00000008 alt_dev_list
0000dfbc g     F .text	00000100 write
00007650 g     F .text	000000a0 _putc_r
00010908 g       *ABS*	00000000 __ram_rodata_end
0000d824 g     F .text	000000b8 fstat
0000c1bc g     F .text	000000f4 .hidden __ledf2
00006c94 g     F .text	00000140 __pow5mult
00008110 g     F .text	0000150c ___vfiprintf_internal_r
00013ee8 g     O .bss	00000004 __nlocale_changed
0000ad5c g     F .text	00000058 .hidden __umodsi3
00014040 g       *ABS*	00000000 end
0000e7e4 g     F .text	000000c8 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0000e2e4 g     F .text	0000003c altera_avalon_fifo_read_event
000104c8 g       *ABS*	00000000 __CTOR_LIST__
000493e0 g       *ABS*	00000000 __alt_stack_pointer
0000d61c g     F .text	00000064 .hidden __clzsi2
0000eed4 g     F .text	00000224 altera_avalon_jtag_uart_write
0000e580 g     F .text	0000004c altera_avalon_fifo_read_fifo
00004b80 g     F .text	00000004 __sfp_lock_acquire
000060e8 g     F .text	000000e4 memchr
000007b0 g     F .text	000022dc ___vfprintf_internal_r
00004ce4 g     F .text	00000310 _free_r
000056cc g     F .text	00000010 __locale_mb_cur_max
00010314 g     F .text	00000180 __call_exitprocs
00013ee4 g     O .bss	00000004 __mlocale_changed
000123c0 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00013f0c g     O .bss	00000004 _alt_tick_rate
00006dd4 g     F .text	00000148 __lshift
00013f10 g     O .bss	00000004 _alt_nticks
0000dd04 g     F .text	00000104 read
0000e12c g     F .text	00000050 alt_sys_init
000101fc g     F .text	00000118 __register_exitproc
00006a08 g     F .text	0000028c __multiply
0000eb60 g     F .text	00000068 altera_avalon_jtag_uart_close
0000adb4 g     F .text	00000028 .hidden __mulsi3
00010908 g       *ABS*	00000000 __ram_rwdata_start
000104c8 g       *ABS*	00000000 __ram_rodata_start
00013f18 g     O .bss	00000028 __malloc_current_mallinfo
000072e8 g     F .text	0000014c __d2b
0000e680 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000ffc4 g     F .text	000000d4 alt_get_fd
0000f238 g     F .text	00000158 alt_busy_sleep
000098ac g     F .text	00000054 _close_r
00010180 g     F .text	0000007c memcmp
0000e740 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00014040 g       *ABS*	00000000 __alt_stack_base
0000e790 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002b64 g     F .text	00000154 __swsetup_r
0000e214 g     F .text	0000003c altera_avalon_fifo_read_status
0000b688 g     F .text	000009d0 .hidden __divdf3
00004a40 g     F .text	00000118 __sfp
0000754c g     F .text	00000078 __copybits
00010da4 g     O .rwdata	00000408 __malloc_av_
00004b8c g     F .text	00000004 __sinit_lock_release
0000c2b0 g     F .text	0000086c .hidden __muldf3
00007de4 g     F .text	00000054 __sread
0000e62c g     F .text	0000002c altera_avalon_fifo_read_other_info
0000feb0 g     F .text	00000114 alt_find_file
0000f400 g     F .text	000000a4 alt_dev_llist_insert
0000dc6c g     F .text	00000024 __malloc_lock
0000de8c g     F .text	000000b0 sbrk
00004784 g     F .text	0000005c _fflush_r
00009900 g     F .text	000000dc _calloc_r
00013ee0 g       *ABS*	00000000 __bss_start
00006470 g     F .text	00000128 memset
0000026c g     F .text	0000034c main
00013f04 g     O .bss	00000004 alt_envp
00013eec g     O .bss	00000004 __malloc_max_total_mem
0000e6e0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000e320 g     F .text	00000028 altera_avalon_fifo_read_level
00009834 g     F .text	00000018 __swbuf
00007f18 g     F .text	00000008 __sclose
000493e0 g       *ABS*	00000000 __alt_heap_limit
00009acc g     F .text	00000014 fclose
00002ee0 g     F .text	00001688 _dtoa_r
000058dc g     F .text	0000080c _malloc_r
00009fb4 g     F .text	00000030 __ascii_wctomb
000123e0 g     O .rwdata	00000004 alt_errno
000054bc g     F .text	000000c4 _fwalk
000076f0 g     F .text	000000c8 putc
0000ac00 g     F .text	00000084 .hidden __divsi3
00004bc0 g     F .text	00000124 _malloc_trim_r
000104c8 g       *ABS*	00000000 __CTOR_END__
00007f20 g     F .text	000000dc strcmp
000104c8 g       *ABS*	00000000 __flash_rodata_start
000104c8 g       *ABS*	00000000 __DTOR_LIST__
0000c058 g     F .text	00000088 .hidden __nedf2
0000e0f4 g     F .text	00000038 alt_irq_init
0000de08 g     F .text	00000084 alt_release_fd
000107d4 g     O .rodata	00000100 .hidden __clz_tab
00013ee0 g     O .bss	00000004 _PathLocale
00010134 g     F .text	00000014 atexit
0000984c g     F .text	00000060 _write_r
000056fc g     F .text	00000018 setlocale
000123b8 g     O .rwdata	00000004 _impure_ptr
00013efc g     O .bss	00000004 alt_argc
00004568 g     F .text	0000021c __sflush_r
0000f504 g     F .text	00000060 _do_dtors
000056e8 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00007178 g     F .text	00000064 __ulp
00004ba8 g     F .text	00000018 __fp_unlock_all
000123cc g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005714 g     F .text	0000000c localeconv
0000e5cc g     F .text	00000060 altera_avalon_fifo_write_other_info
0000f584 g     F .text	00000050 alt_ic_isr_register
000123f4 g       *ABS*	00000000 _edata
00014040 g       *ABS*	00000000 _end
00009ae0 g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000ebc8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000f674 g     F .text	000000a4 alt_ic_irq_disable
00007e40 g     F .text	0000007c __swrite
000123c4 g     O .rwdata	00000004 __malloc_trim_threshold
000056dc g     F .text	0000000c __locale_msgcharset
00010148 g     F .text	00000038 exit
00005580 g     F .text	000000c4 _fwalk_reent
00006f7c g     F .text	000001fc __mdiff
0000ac84 g     F .text	00000074 .hidden __modsi3
0000e250 g     F .text	0000003c altera_avalon_fifo_read_ienable
000493e0 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004b84 g     F .text	00000004 __sfp_lock_release
00010494 g     F .text	00000034 _exit
0000f0f8 g     F .text	00000140 alt_alarm_start
0000e28c g     F .text	0000002c altera_avalon_fifo_read_almostfull
00005720 g     F .text	000001bc __smakebuf_r
00000718 g     F .text	00000098 strlen
0000faf8 g     F .text	00000160 open
0000e514 g     F .text	0000006c altera_avalon_read_fifo
0000c0e0 g     F .text	000000dc .hidden __gedf2
000123c8 g     O .rwdata	00000004 __wctomb
000080f8 g     F .text	00000018 __sprint_r
0000f564 g     F .text	00000020 alt_icache_flush_all
000123e8 g     O .rwdata	00000004 alt_priority_mask
0000f5d4 g     F .text	000000a0 alt_ic_irq_enable
00002a8c g     F .text	0000001c __vfprintf_internal
00009fe4 g     F .text	0000005c _wctomb_r
0000cb1c g     F .text	000008fc .hidden __subdf3
0000691c g     F .text	000000b0 __lo0bits
0000e460 g     F .text	0000005c altera_avalon_fifo_write_almostempty
000123ec g     O .rwdata	00000008 alt_alarm_list
0000f4a4 g     F .text	00000060 _do_ctors
00009ef4 g     F .text	000000c0 wcrtomb
0000d6d0 g     F .text	000000d8 close
0000da40 g     F .text	00000084 alt_load
00009c68 g     F .text	00000080 fputwc
00004b88 g     F .text	00000004 __sinit_lock_acquire
00006668 g     F .text	00000148 __multadd
00006640 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	108fd004 	addi	r2,r2,16192
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	108fd004 	addi	r2,r2,16192
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffb6d4c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffb6d40>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a6d817 	ldw	r2,-25760(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a6d817 	ldw	r2,-25760(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dee4f814 	ori	sp,sp,37856
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d6a8ed14 	ori	gp,gp,41908
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	108fb814 	ori	r2,r2,16096

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18d01014 	ori	r3,r3,16448

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfffb6e74>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	000da400 	call	da40 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	000dbf00 	call	dbf0 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfffb6e88>

0000026c <main>:
#include "altera_avalon_pio_regs.h"
#include "altera_avalon_fifo_regs.h"
#include "altera_avalon_fifo_util.h"

int main()
{
     26c:	defff304 	addi	sp,sp,-52
     270:	dfc00c15 	stw	ra,48(sp)
     274:	df000b15 	stw	fp,44(sp)
     278:	df000b04 	addi	fp,sp,44
	printf("Hello world!\n");
     27c:	01000074 	movhi	r4,1
     280:	21013204 	addi	r4,r4,1224
     284:	00007040 	call	704 <puts>

	int index = 0;
     288:	e03ff615 	stw	zero,-40(fp)
	int data, data2;

	int version = IORD_ALTERA_AVALON_JTAG_UART_DATA(VERSION_INFO_BASE);
     28c:	00844034 	movhi	r2,4352
     290:	10800037 	ldwio	r2,0(r2)
     294:	e0bff715 	stw	r2,-36(fp)
	printf ("\n ** Version: %x ** \n\n",version);
     298:	e17ff717 	ldw	r5,-36(fp)
     29c:	01000074 	movhi	r4,1
     2a0:	21013604 	addi	r4,r4,1240
     2a4:	00005e80 	call	5e8 <printf>

	printf("Resetting...\n");
     2a8:	01000074 	movhi	r4,1
     2ac:	21013c04 	addi	r4,r4,1264
     2b0:	00007040 	call	704 <puts>
	IOWR_ALTERA_AVALON_PIO_DATA(EXT_RST_BASE,1);
     2b4:	00c00044 	movi	r3,1
     2b8:	00848034 	movhi	r2,4608
     2bc:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
     2c0:	010003f4 	movhi	r4,15
     2c4:	21109004 	addi	r4,r4,16960
     2c8:	000df3c0 	call	df3c <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(EXT_RST_BASE,0);
     2cc:	0007883a 	mov	r3,zero
     2d0:	00848034 	movhi	r2,4608
     2d4:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
     2d8:	010003f4 	movhi	r4,15
     2dc:	21109004 	addi	r4,r4,16960
     2e0:	000df3c0 	call	df3c <usleep>
	printf("\n");
     2e4:	01000284 	movi	r4,10
     2e8:	000062c0 	call	62c <putchar>

	int initvalue =4293918720; // 0xFFF00000;
     2ec:	00bffc34 	movhi	r2,65520
     2f0:	e0bff815 	stw	r2,-32(fp)

	int addr, value, sendvalue, sentvalue, baseline_1;

	printf("Address : ");
     2f4:	01000074 	movhi	r4,1
     2f8:	21014004 	addi	r4,r4,1280
     2fc:	00005e80 	call	5e8 <printf>
	//scanf("%d",&addr);
	addr = 0;
     300:	e03ff915 	stw	zero,-28(fp)
	printf("%d\n",addr);
     304:	e17ff917 	ldw	r5,-28(fp)
     308:	01000074 	movhi	r4,1
     30c:	21014304 	addi	r4,r4,1292
     310:	00005e80 	call	5e8 <printf>
	printf("Input value : ");
     314:	01000074 	movhi	r4,1
     318:	21014404 	addi	r4,r4,1296
     31c:	00005e80 	call	5e8 <printf>
	//scanf("%d",&value);
	value = 32000;
     320:	009f4004 	movi	r2,32000
     324:	e0bffa15 	stw	r2,-24(fp)
	printf("%d\n",value);
     328:	e17ffa17 	ldw	r5,-24(fp)
     32c:	01000074 	movhi	r4,1
     330:	21014304 	addi	r4,r4,1292
     334:	00005e80 	call	5e8 <printf>
	sendvalue = initvalue + addr*256*256 + value;
     338:	e0bff917 	ldw	r2,-28(fp)
     33c:	1006943a 	slli	r3,r2,16
     340:	e0bff817 	ldw	r2,-32(fp)
     344:	1887883a 	add	r3,r3,r2
     348:	e0bffa17 	ldw	r2,-24(fp)
     34c:	1885883a 	add	r2,r3,r2
     350:	e0bffb15 	stw	r2,-20(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(DACCTRL_BASE,sendvalue);
     354:	00888034 	movhi	r2,8704
     358:	e0fffb17 	ldw	r3,-20(fp)
     35c:	10c00035 	stwio	r3,0(r2)
	printf("writing DACCTRL_BASE : %x\n",sendvalue);
     360:	e17ffb17 	ldw	r5,-20(fp)
     364:	01000074 	movhi	r4,1
     368:	21014804 	addi	r4,r4,1312
     36c:	00005e80 	call	5e8 <printf>
	printf("waiting...\n");
     370:	01000074 	movhi	r4,1
     374:	21014f04 	addi	r4,r4,1340
     378:	00007040 	call	704 <puts>
	usleep(1000000);
     37c:	010003f4 	movhi	r4,15
     380:	21109004 	addi	r4,r4,16960
     384:	000df3c0 	call	df3c <usleep>
	sentvalue = IORD_ALTERA_AVALON_PIO_DATA(DACCTRL_BASE);
     388:	00888034 	movhi	r2,8704
     38c:	10800037 	ldwio	r2,0(r2)
     390:	e0bffc15 	stw	r2,-16(fp)
	printf("Wrote value is %x\n",sentvalue);
     394:	e17ffc17 	ldw	r5,-16(fp)
     398:	01000074 	movhi	r4,1
     39c:	21015204 	addi	r4,r4,1352
     3a0:	00005e80 	call	5e8 <printf>
	usleep(1000000);
     3a4:	010003f4 	movhi	r4,15
     3a8:	21109004 	addi	r4,r4,16960
     3ac:	000df3c0 	call	df3c <usleep>
	baseline_1 = IORD_ALTERA_AVALON_PIO_DATA(BS_1_BASE);
     3b0:	0084c034 	movhi	r2,4864
     3b4:	10800037 	ldwio	r2,0(r2)
     3b8:	e0bffd15 	stw	r2,-12(fp)
	printf("Actual Baseline value is : %d.\n",baseline_1);
     3bc:	e17ffd17 	ldw	r5,-12(fp)
     3c0:	01000074 	movhi	r4,1
     3c4:	21015704 	addi	r4,r4,1372
     3c8:	00005e80 	call	5e8 <printf>

	printf("\nNext command...\n\n");
     3cc:	01000074 	movhi	r4,1
     3d0:	21015f04 	addi	r4,r4,1404
     3d4:	00007040 	call	704 <puts>
	printf("Address : ");
     3d8:	01000074 	movhi	r4,1
     3dc:	21014004 	addi	r4,r4,1280
     3e0:	00005e80 	call	5e8 <printf>
	//scanf("%d",&addr);
	addr = 0;
     3e4:	e03ff915 	stw	zero,-28(fp)
	printf("%d\n",addr);
     3e8:	e17ff917 	ldw	r5,-28(fp)
     3ec:	01000074 	movhi	r4,1
     3f0:	21014304 	addi	r4,r4,1292
     3f4:	00005e80 	call	5e8 <printf>
	printf("Input value : ");
     3f8:	01000074 	movhi	r4,1
     3fc:	21014404 	addi	r4,r4,1296
     400:	00005e80 	call	5e8 <printf>
	//scanf("%d",&value);
	value = 32000;
     404:	009f4004 	movi	r2,32000
     408:	e0bffa15 	stw	r2,-24(fp)
	printf("%d\n",value);
     40c:	e17ffa17 	ldw	r5,-24(fp)
     410:	01000074 	movhi	r4,1
     414:	21014304 	addi	r4,r4,1292
     418:	00005e80 	call	5e8 <printf>
	sendvalue = initvalue + addr*256*256 + value;
     41c:	e0bff917 	ldw	r2,-28(fp)
     420:	1006943a 	slli	r3,r2,16
     424:	e0bff817 	ldw	r2,-32(fp)
     428:	1887883a 	add	r3,r3,r2
     42c:	e0bffa17 	ldw	r2,-24(fp)
     430:	1885883a 	add	r2,r3,r2
     434:	e0bffb15 	stw	r2,-20(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(DACCTRL_BASE,sendvalue);
     438:	00888034 	movhi	r2,8704
     43c:	e0fffb17 	ldw	r3,-20(fp)
     440:	10c00035 	stwio	r3,0(r2)
	printf("writing DACCTRL_BASE : %x\n",sendvalue);
     444:	e17ffb17 	ldw	r5,-20(fp)
     448:	01000074 	movhi	r4,1
     44c:	21014804 	addi	r4,r4,1312
     450:	00005e80 	call	5e8 <printf>
	printf("waiting...\n");
     454:	01000074 	movhi	r4,1
     458:	21014f04 	addi	r4,r4,1340
     45c:	00007040 	call	704 <puts>
	usleep(1000000);
     460:	010003f4 	movhi	r4,15
     464:	21109004 	addi	r4,r4,16960
     468:	000df3c0 	call	df3c <usleep>
	sentvalue = IORD_ALTERA_AVALON_PIO_DATA(DACCTRL_BASE);
     46c:	00888034 	movhi	r2,8704
     470:	10800037 	ldwio	r2,0(r2)
     474:	e0bffc15 	stw	r2,-16(fp)
	printf("Wrote value is %x\n",sentvalue);
     478:	e17ffc17 	ldw	r5,-16(fp)
     47c:	01000074 	movhi	r4,1
     480:	21015204 	addi	r4,r4,1352
     484:	00005e80 	call	5e8 <printf>
	usleep(1000000);
     488:	010003f4 	movhi	r4,15
     48c:	21109004 	addi	r4,r4,16960
     490:	000df3c0 	call	df3c <usleep>
	baseline_1 = IORD_ALTERA_AVALON_PIO_DATA(BS_1_BASE);
     494:	0084c034 	movhi	r2,4864
     498:	10800037 	ldwio	r2,0(r2)
     49c:	e0bffd15 	stw	r2,-12(fp)
	printf("Actual Baseline value is : %d.\n",baseline_1);
     4a0:	e17ffd17 	ldw	r5,-12(fp)
     4a4:	01000074 	movhi	r4,1
     4a8:	21015704 	addi	r4,r4,1372
     4ac:	00005e80 	call	5e8 <printf>


	//getchar();
	printf("\nIf want to start data-taking, press enter...\n");
     4b0:	01000074 	movhi	r4,1
     4b4:	21016404 	addi	r4,r4,1424
     4b8:	00007040 	call	704 <puts>
	//getchar();

	printf("\n *** Start data-taking *** \n\n");
     4bc:	01000074 	movhi	r4,1
     4c0:	21017004 	addi	r4,r4,1472
     4c4:	00007040 	call	704 <puts>

	IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_PIO_BASE,1);
     4c8:	00c00044 	movi	r3,1
     4cc:	00880034 	movhi	r2,8192
     4d0:	10c00035 	stwio	r3,0(r2)

	while (1) {
		++index;
     4d4:	e0bff617 	ldw	r2,-40(fp)
     4d8:	10800044 	addi	r2,r2,1
     4dc:	e0bff615 	stw	r2,-40(fp)
		data = IORD_ALTERA_AVALON_FIFO_DATA(FIFO_0_OUT_BASE);
     4e0:	00840074 	movhi	r2,4097
     4e4:	10a04004 	addi	r2,r2,-32512
     4e8:	10800037 	ldwio	r2,0(r2)
     4ec:	e0bffe15 	stw	r2,-8(fp)
		data2 = IORD_ALTERA_AVALON_FIFO_DATA(FIFO_1_OUT_BASE);
     4f0:	00840074 	movhi	r2,4097
     4f4:	10a44004 	addi	r2,r2,-28416
     4f8:	10800037 	ldwio	r2,0(r2)
     4fc:	e0bfff15 	stw	r2,-4(fp)
		baseline_1 = IORD_ALTERA_AVALON_PIO_DATA(BS_1_BASE);
     500:	0084c034 	movhi	r2,4864
     504:	10800037 	ldwio	r2,0(r2)
     508:	e0bffd15 	stw	r2,-12(fp)
		printf("%d,%d,%d,%d",index,data,data2,baseline_1);
     50c:	e0bffd17 	ldw	r2,-12(fp)
     510:	d8800015 	stw	r2,0(sp)
     514:	e1ffff17 	ldw	r7,-4(fp)
     518:	e1bffe17 	ldw	r6,-8(fp)
     51c:	e17ff617 	ldw	r5,-40(fp)
     520:	01000074 	movhi	r4,1
     524:	21017804 	addi	r4,r4,1504
     528:	00005e80 	call	5e8 <printf>
		if (baseline_1+50<data) printf("*\n");
     52c:	e0bffd17 	ldw	r2,-12(fp)
     530:	10c00c84 	addi	r3,r2,50
     534:	e0bffe17 	ldw	r2,-8(fp)
     538:	1880040e 	bge	r3,r2,54c <main+0x2e0>
     53c:	01000074 	movhi	r4,1
     540:	21017b04 	addi	r4,r4,1516
     544:	00007040 	call	704 <puts>
     548:	00000206 	br	554 <main+0x2e8>
		else printf("\n");
     54c:	01000284 	movi	r4,10
     550:	000062c0 	call	62c <putchar>
		if (altera_avalon_fifo_read_level(FIFO_0_OUT_CSR_BASE)==0) break;
     554:	01040074 	movhi	r4,4097
     558:	21208004 	addi	r4,r4,-32256
     55c:	000e3200 	call	e320 <altera_avalon_fifo_read_level>
     560:	10000726 	beq	r2,zero,580 <main+0x314>
		if (index==1000) {
     564:	e0bff617 	ldw	r2,-40(fp)
     568:	1080fa18 	cmpnei	r2,r2,1000
     56c:	103fd91e 	bne	r2,zero,4d4 <__alt_data_end+0xfffb70f4>
			IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_PIO_BASE,0);
     570:	0007883a 	mov	r3,zero
     574:	00880034 	movhi	r2,8192
     578:	10c00035 	stwio	r3,0(r2)
		}
	}
     57c:	003fd506 	br	4d4 <__alt_data_end+0xfffb70f4>
		data2 = IORD_ALTERA_AVALON_FIFO_DATA(FIFO_1_OUT_BASE);
		baseline_1 = IORD_ALTERA_AVALON_PIO_DATA(BS_1_BASE);
		printf("%d,%d,%d,%d",index,data,data2,baseline_1);
		if (baseline_1+50<data) printf("*\n");
		else printf("\n");
		if (altera_avalon_fifo_read_level(FIFO_0_OUT_CSR_BASE)==0) break;
     580:	0001883a 	nop
		if (index==1000) {
			IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_PIO_BASE,0);
		}
	}
	IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_PIO_BASE,0);
     584:	0007883a 	mov	r3,zero
     588:	00880034 	movhi	r2,8192
     58c:	10c00035 	stwio	r3,0(r2)

	printf("End of the code. %c\n",0x04); // exit
     590:	01400104 	movi	r5,4
     594:	01000074 	movhi	r4,1
     598:	21017c04 	addi	r4,r4,1520
     59c:	00005e80 	call	5e8 <printf>
	return 0;
     5a0:	0005883a 	mov	r2,zero
}
     5a4:	e037883a 	mov	sp,fp
     5a8:	dfc00117 	ldw	ra,4(sp)
     5ac:	df000017 	ldw	fp,0(sp)
     5b0:	dec00204 	addi	sp,sp,8
     5b4:	f800283a 	ret

000005b8 <_printf_r>:
     5b8:	defffd04 	addi	sp,sp,-12
     5bc:	2805883a 	mov	r2,r5
     5c0:	dfc00015 	stw	ra,0(sp)
     5c4:	d9800115 	stw	r6,4(sp)
     5c8:	d9c00215 	stw	r7,8(sp)
     5cc:	21400217 	ldw	r5,8(r4)
     5d0:	d9c00104 	addi	r7,sp,4
     5d4:	100d883a 	mov	r6,r2
     5d8:	00007b00 	call	7b0 <___vfprintf_internal_r>
     5dc:	dfc00017 	ldw	ra,0(sp)
     5e0:	dec00304 	addi	sp,sp,12
     5e4:	f800283a 	ret

000005e8 <printf>:
     5e8:	defffc04 	addi	sp,sp,-16
     5ec:	dfc00015 	stw	ra,0(sp)
     5f0:	d9400115 	stw	r5,4(sp)
     5f4:	d9800215 	stw	r6,8(sp)
     5f8:	d9c00315 	stw	r7,12(sp)
     5fc:	00800074 	movhi	r2,1
     600:	1088ee04 	addi	r2,r2,9144
     604:	10800017 	ldw	r2,0(r2)
     608:	200b883a 	mov	r5,r4
     60c:	d9800104 	addi	r6,sp,4
     610:	11000217 	ldw	r4,8(r2)
     614:	0002a8c0 	call	2a8c <__vfprintf_internal>
     618:	dfc00017 	ldw	ra,0(sp)
     61c:	dec00404 	addi	sp,sp,16
     620:	f800283a 	ret

00000624 <_putchar_r>:
     624:	21800217 	ldw	r6,8(r4)
     628:	00076501 	jmpi	7650 <_putc_r>

0000062c <putchar>:
     62c:	00800074 	movhi	r2,1
     630:	1088ee04 	addi	r2,r2,9144
     634:	200b883a 	mov	r5,r4
     638:	11000017 	ldw	r4,0(r2)
     63c:	21800217 	ldw	r6,8(r4)
     640:	00076501 	jmpi	7650 <_putc_r>

00000644 <_puts_r>:
     644:	defff604 	addi	sp,sp,-40
     648:	dc000715 	stw	r16,28(sp)
     64c:	2021883a 	mov	r16,r4
     650:	2809883a 	mov	r4,r5
     654:	dc400815 	stw	r17,32(sp)
     658:	dfc00915 	stw	ra,36(sp)
     65c:	2823883a 	mov	r17,r5
     660:	00007180 	call	718 <strlen>
     664:	10c00044 	addi	r3,r2,1
     668:	d8800115 	stw	r2,4(sp)
     66c:	00800074 	movhi	r2,1
     670:	10818204 	addi	r2,r2,1544
     674:	d8800215 	stw	r2,8(sp)
     678:	00800044 	movi	r2,1
     67c:	d8800315 	stw	r2,12(sp)
     680:	00800084 	movi	r2,2
     684:	dc400015 	stw	r17,0(sp)
     688:	d8c00615 	stw	r3,24(sp)
     68c:	dec00415 	stw	sp,16(sp)
     690:	d8800515 	stw	r2,20(sp)
     694:	80000226 	beq	r16,zero,6a0 <_puts_r+0x5c>
     698:	80800e17 	ldw	r2,56(r16)
     69c:	10001426 	beq	r2,zero,6f0 <_puts_r+0xac>
     6a0:	81400217 	ldw	r5,8(r16)
     6a4:	2880030b 	ldhu	r2,12(r5)
     6a8:	10c8000c 	andi	r3,r2,8192
     6ac:	1800061e 	bne	r3,zero,6c8 <_puts_r+0x84>
     6b0:	29001917 	ldw	r4,100(r5)
     6b4:	00f7ffc4 	movi	r3,-8193
     6b8:	10880014 	ori	r2,r2,8192
     6bc:	20c6703a 	and	r3,r4,r3
     6c0:	2880030d 	sth	r2,12(r5)
     6c4:	28c01915 	stw	r3,100(r5)
     6c8:	d9800404 	addi	r6,sp,16
     6cc:	8009883a 	mov	r4,r16
     6d0:	0004ff40 	call	4ff4 <__sfvwrite_r>
     6d4:	1000091e 	bne	r2,zero,6fc <_puts_r+0xb8>
     6d8:	00800284 	movi	r2,10
     6dc:	dfc00917 	ldw	ra,36(sp)
     6e0:	dc400817 	ldw	r17,32(sp)
     6e4:	dc000717 	ldw	r16,28(sp)
     6e8:	dec00a04 	addi	sp,sp,40
     6ec:	f800283a 	ret
     6f0:	8009883a 	mov	r4,r16
     6f4:	0004b700 	call	4b70 <__sinit>
     6f8:	003fe906 	br	6a0 <__alt_data_end+0xfffb72c0>
     6fc:	00bfffc4 	movi	r2,-1
     700:	003ff606 	br	6dc <__alt_data_end+0xfffb72fc>

00000704 <puts>:
     704:	00800074 	movhi	r2,1
     708:	1088ee04 	addi	r2,r2,9144
     70c:	200b883a 	mov	r5,r4
     710:	11000017 	ldw	r4,0(r2)
     714:	00006441 	jmpi	644 <_puts_r>

00000718 <strlen>:
     718:	208000cc 	andi	r2,r4,3
     71c:	10002026 	beq	r2,zero,7a0 <strlen+0x88>
     720:	20800007 	ldb	r2,0(r4)
     724:	10002026 	beq	r2,zero,7a8 <strlen+0x90>
     728:	2005883a 	mov	r2,r4
     72c:	00000206 	br	738 <strlen+0x20>
     730:	10c00007 	ldb	r3,0(r2)
     734:	18001826 	beq	r3,zero,798 <strlen+0x80>
     738:	10800044 	addi	r2,r2,1
     73c:	10c000cc 	andi	r3,r2,3
     740:	183ffb1e 	bne	r3,zero,730 <__alt_data_end+0xfffb7350>
     744:	10c00017 	ldw	r3,0(r2)
     748:	01ffbff4 	movhi	r7,65279
     74c:	39ffbfc4 	addi	r7,r7,-257
     750:	00ca303a 	nor	r5,zero,r3
     754:	01a02074 	movhi	r6,32897
     758:	19c7883a 	add	r3,r3,r7
     75c:	31a02004 	addi	r6,r6,-32640
     760:	1946703a 	and	r3,r3,r5
     764:	1986703a 	and	r3,r3,r6
     768:	1800091e 	bne	r3,zero,790 <strlen+0x78>
     76c:	10800104 	addi	r2,r2,4
     770:	10c00017 	ldw	r3,0(r2)
     774:	19cb883a 	add	r5,r3,r7
     778:	00c6303a 	nor	r3,zero,r3
     77c:	28c6703a 	and	r3,r5,r3
     780:	1986703a 	and	r3,r3,r6
     784:	183ff926 	beq	r3,zero,76c <__alt_data_end+0xfffb738c>
     788:	00000106 	br	790 <strlen+0x78>
     78c:	10800044 	addi	r2,r2,1
     790:	10c00007 	ldb	r3,0(r2)
     794:	183ffd1e 	bne	r3,zero,78c <__alt_data_end+0xfffb73ac>
     798:	1105c83a 	sub	r2,r2,r4
     79c:	f800283a 	ret
     7a0:	2005883a 	mov	r2,r4
     7a4:	003fe706 	br	744 <__alt_data_end+0xfffb7364>
     7a8:	0005883a 	mov	r2,zero
     7ac:	f800283a 	ret

000007b0 <___vfprintf_internal_r>:
     7b0:	deffb804 	addi	sp,sp,-288
     7b4:	dfc04715 	stw	ra,284(sp)
     7b8:	ddc04515 	stw	r23,276(sp)
     7bc:	dd404315 	stw	r21,268(sp)
     7c0:	d9002d15 	stw	r4,180(sp)
     7c4:	282f883a 	mov	r23,r5
     7c8:	302b883a 	mov	r21,r6
     7cc:	d9c02e15 	stw	r7,184(sp)
     7d0:	df004615 	stw	fp,280(sp)
     7d4:	dd804415 	stw	r22,272(sp)
     7d8:	dd004215 	stw	r20,264(sp)
     7dc:	dcc04115 	stw	r19,260(sp)
     7e0:	dc804015 	stw	r18,256(sp)
     7e4:	dc403f15 	stw	r17,252(sp)
     7e8:	dc003e15 	stw	r16,248(sp)
     7ec:	00056f00 	call	56f0 <_localeconv_r>
     7f0:	10800017 	ldw	r2,0(r2)
     7f4:	1009883a 	mov	r4,r2
     7f8:	d8803415 	stw	r2,208(sp)
     7fc:	00007180 	call	718 <strlen>
     800:	d8803715 	stw	r2,220(sp)
     804:	d8802d17 	ldw	r2,180(sp)
     808:	10000226 	beq	r2,zero,814 <___vfprintf_internal_r+0x64>
     80c:	10800e17 	ldw	r2,56(r2)
     810:	1000fb26 	beq	r2,zero,c00 <___vfprintf_internal_r+0x450>
     814:	b880030b 	ldhu	r2,12(r23)
     818:	10c8000c 	andi	r3,r2,8192
     81c:	1800061e 	bne	r3,zero,838 <___vfprintf_internal_r+0x88>
     820:	b9001917 	ldw	r4,100(r23)
     824:	00f7ffc4 	movi	r3,-8193
     828:	10880014 	ori	r2,r2,8192
     82c:	20c6703a 	and	r3,r4,r3
     830:	b880030d 	sth	r2,12(r23)
     834:	b8c01915 	stw	r3,100(r23)
     838:	10c0020c 	andi	r3,r2,8
     83c:	1800c326 	beq	r3,zero,b4c <___vfprintf_internal_r+0x39c>
     840:	b8c00417 	ldw	r3,16(r23)
     844:	1800c126 	beq	r3,zero,b4c <___vfprintf_internal_r+0x39c>
     848:	1080068c 	andi	r2,r2,26
     84c:	00c00284 	movi	r3,10
     850:	10c0c626 	beq	r2,r3,b6c <___vfprintf_internal_r+0x3bc>
     854:	d8c00404 	addi	r3,sp,16
     858:	05000074 	movhi	r20,1
     85c:	d9001e04 	addi	r4,sp,120
     860:	a5019384 	addi	r20,r20,1614
     864:	d8c01e15 	stw	r3,120(sp)
     868:	d8002015 	stw	zero,128(sp)
     86c:	d8001f15 	stw	zero,124(sp)
     870:	d8003315 	stw	zero,204(sp)
     874:	d8003615 	stw	zero,216(sp)
     878:	d8003815 	stw	zero,224(sp)
     87c:	1811883a 	mov	r8,r3
     880:	d8003915 	stw	zero,228(sp)
     884:	d8003a15 	stw	zero,232(sp)
     888:	d8002f15 	stw	zero,188(sp)
     88c:	d9002815 	stw	r4,160(sp)
     890:	a8800007 	ldb	r2,0(r21)
     894:	10028b26 	beq	r2,zero,12c4 <___vfprintf_internal_r+0xb14>
     898:	00c00944 	movi	r3,37
     89c:	a823883a 	mov	r17,r21
     8a0:	10c0021e 	bne	r2,r3,8ac <___vfprintf_internal_r+0xfc>
     8a4:	00001406 	br	8f8 <___vfprintf_internal_r+0x148>
     8a8:	10c00326 	beq	r2,r3,8b8 <___vfprintf_internal_r+0x108>
     8ac:	8c400044 	addi	r17,r17,1
     8b0:	88800007 	ldb	r2,0(r17)
     8b4:	103ffc1e 	bne	r2,zero,8a8 <__alt_data_end+0xfffb74c8>
     8b8:	8d61c83a 	sub	r16,r17,r21
     8bc:	80000e26 	beq	r16,zero,8f8 <___vfprintf_internal_r+0x148>
     8c0:	d8c02017 	ldw	r3,128(sp)
     8c4:	d8801f17 	ldw	r2,124(sp)
     8c8:	45400015 	stw	r21,0(r8)
     8cc:	1c07883a 	add	r3,r3,r16
     8d0:	10800044 	addi	r2,r2,1
     8d4:	d8c02015 	stw	r3,128(sp)
     8d8:	44000115 	stw	r16,4(r8)
     8dc:	d8801f15 	stw	r2,124(sp)
     8e0:	00c001c4 	movi	r3,7
     8e4:	1880a916 	blt	r3,r2,b8c <___vfprintf_internal_r+0x3dc>
     8e8:	42000204 	addi	r8,r8,8
     8ec:	d9402f17 	ldw	r5,188(sp)
     8f0:	2c0b883a 	add	r5,r5,r16
     8f4:	d9402f15 	stw	r5,188(sp)
     8f8:	88800007 	ldb	r2,0(r17)
     8fc:	1000aa26 	beq	r2,zero,ba8 <___vfprintf_internal_r+0x3f8>
     900:	8d400044 	addi	r21,r17,1
     904:	8c400047 	ldb	r17,1(r17)
     908:	0021883a 	mov	r16,zero
     90c:	00bfffc4 	movi	r2,-1
     910:	0025883a 	mov	r18,zero
     914:	dc002905 	stb	r16,164(sp)
     918:	d8002785 	stb	zero,158(sp)
     91c:	d8002b05 	stb	zero,172(sp)
     920:	d8802a15 	stw	r2,168(sp)
     924:	d8003115 	stw	zero,196(sp)
     928:	04c01604 	movi	r19,88
     92c:	05800244 	movi	r22,9
     930:	9021883a 	mov	r16,r18
     934:	4039883a 	mov	fp,r8
     938:	ad400044 	addi	r21,r21,1
     93c:	88bff804 	addi	r2,r17,-32
     940:	98833236 	bltu	r19,r2,160c <___vfprintf_internal_r+0xe5c>
     944:	100490ba 	slli	r2,r2,2
     948:	00c00034 	movhi	r3,0
     94c:	18c25704 	addi	r3,r3,2396
     950:	10c5883a 	add	r2,r2,r3
     954:	10800017 	ldw	r2,0(r2)
     958:	1000683a 	jmp	r2
     95c:	00001504 	movi	zero,84
     960:	0000160c 	andi	zero,zero,88
     964:	0000160c 	andi	zero,zero,88
     968:	00001524 	muli	zero,zero,84
     96c:	0000160c 	andi	zero,zero,88
     970:	0000160c 	andi	zero,zero,88
     974:	0000160c 	andi	zero,zero,88
     978:	0000160c 	andi	zero,zero,88
     97c:	0000160c 	andi	zero,zero,88
     980:	0000160c 	andi	zero,zero,88
     984:	00000c0c 	andi	zero,zero,48
     988:	00001414 	movui	zero,80
     98c:	0000160c 	andi	zero,zero,88
     990:	00000ad0 	cmplti	zero,zero,43
     994:	00000c30 	cmpltui	zero,zero,48
     998:	0000160c 	andi	zero,zero,88
     99c:	00000c80 	call	c8 <alt_exception+0xa8>
     9a0:	00000c8c 	andi	zero,zero,50
     9a4:	00000c8c 	andi	zero,zero,50
     9a8:	00000c8c 	andi	zero,zero,50
     9ac:	00000c8c 	andi	zero,zero,50
     9b0:	00000c8c 	andi	zero,zero,50
     9b4:	00000c8c 	andi	zero,zero,50
     9b8:	00000c8c 	andi	zero,zero,50
     9bc:	00000c8c 	andi	zero,zero,50
     9c0:	00000c8c 	andi	zero,zero,50
     9c4:	0000160c 	andi	zero,zero,88
     9c8:	0000160c 	andi	zero,zero,88
     9cc:	0000160c 	andi	zero,zero,88
     9d0:	0000160c 	andi	zero,zero,88
     9d4:	0000160c 	andi	zero,zero,88
     9d8:	0000160c 	andi	zero,zero,88
     9dc:	0000160c 	andi	zero,zero,88
     9e0:	0000160c 	andi	zero,zero,88
     9e4:	0000160c 	andi	zero,zero,88
     9e8:	0000160c 	andi	zero,zero,88
     9ec:	00000cc8 	cmpgei	zero,zero,51
     9f0:	00000d90 	cmplti	zero,zero,54
     9f4:	0000160c 	andi	zero,zero,88
     9f8:	00000d90 	cmplti	zero,zero,54
     9fc:	0000160c 	andi	zero,zero,88
     a00:	0000160c 	andi	zero,zero,88
     a04:	0000160c 	andi	zero,zero,88
     a08:	0000160c 	andi	zero,zero,88
     a0c:	00000e3c 	xorhi	zero,zero,56
     a10:	0000160c 	andi	zero,zero,88
     a14:	0000160c 	andi	zero,zero,88
     a18:	00000e48 	cmpgei	zero,zero,57
     a1c:	0000160c 	andi	zero,zero,88
     a20:	0000160c 	andi	zero,zero,88
     a24:	0000160c 	andi	zero,zero,88
     a28:	0000160c 	andi	zero,zero,88
     a2c:	0000160c 	andi	zero,zero,88
     a30:	000012cc 	andi	zero,zero,75
     a34:	0000160c 	andi	zero,zero,88
     a38:	0000160c 	andi	zero,zero,88
     a3c:	00001338 	rdprs	zero,zero,76
     a40:	0000160c 	andi	zero,zero,88
     a44:	0000160c 	andi	zero,zero,88
     a48:	0000160c 	andi	zero,zero,88
     a4c:	0000160c 	andi	zero,zero,88
     a50:	0000160c 	andi	zero,zero,88
     a54:	0000160c 	andi	zero,zero,88
     a58:	0000160c 	andi	zero,zero,88
     a5c:	0000160c 	andi	zero,zero,88
     a60:	0000160c 	andi	zero,zero,88
     a64:	0000160c 	andi	zero,zero,88
     a68:	000015b0 	cmpltui	zero,zero,86
     a6c:	00001530 	cmpltui	zero,zero,84
     a70:	00000d90 	cmplti	zero,zero,54
     a74:	00000d90 	cmplti	zero,zero,54
     a78:	00000d90 	cmplti	zero,zero,54
     a7c:	00001550 	cmplti	zero,zero,85
     a80:	00001530 	cmpltui	zero,zero,84
     a84:	0000160c 	andi	zero,zero,88
     a88:	0000160c 	andi	zero,zero,88
     a8c:	0000155c 	xori	zero,zero,85
     a90:	0000160c 	andi	zero,zero,88
     a94:	00001570 	cmpltui	zero,zero,85
     a98:	000013f4 	movhi	zero,79
     a9c:	00000adc 	xori	zero,zero,43
     aa0:	0000142c 	andhi	zero,zero,80
     aa4:	0000160c 	andi	zero,zero,88
     aa8:	00001438 	rdprs	zero,zero,80
     aac:	0000160c 	andi	zero,zero,88
     ab0:	0000149c 	xori	zero,zero,82
     ab4:	0000160c 	andi	zero,zero,88
     ab8:	0000160c 	andi	zero,zero,88
     abc:	000014bc 	xorhi	zero,zero,82
     ac0:	d8c03117 	ldw	r3,196(sp)
     ac4:	d8802e15 	stw	r2,184(sp)
     ac8:	00c7c83a 	sub	r3,zero,r3
     acc:	d8c03115 	stw	r3,196(sp)
     ad0:	84000114 	ori	r16,r16,4
     ad4:	ac400007 	ldb	r17,0(r21)
     ad8:	003f9706 	br	938 <__alt_data_end+0xfffb7558>
     adc:	00800c04 	movi	r2,48
     ae0:	d8802705 	stb	r2,156(sp)
     ae4:	00801e04 	movi	r2,120
     ae8:	d8802745 	stb	r2,157(sp)
     aec:	d9002a17 	ldw	r4,168(sp)
     af0:	d8802e17 	ldw	r2,184(sp)
     af4:	d8002785 	stb	zero,158(sp)
     af8:	e011883a 	mov	r8,fp
     afc:	10c00104 	addi	r3,r2,4
     b00:	14c00017 	ldw	r19,0(r2)
     b04:	002d883a 	mov	r22,zero
     b08:	80800094 	ori	r2,r16,2
     b0c:	2002ca16 	blt	r4,zero,1638 <___vfprintf_internal_r+0xe88>
     b10:	00bfdfc4 	movi	r2,-129
     b14:	80a4703a 	and	r18,r16,r2
     b18:	d8c02e15 	stw	r3,184(sp)
     b1c:	94800094 	ori	r18,r18,2
     b20:	9802b41e 	bne	r19,zero,15f4 <___vfprintf_internal_r+0xe44>
     b24:	01400074 	movhi	r5,1
     b28:	29418c04 	addi	r5,r5,1584
     b2c:	d9403915 	stw	r5,228(sp)
     b30:	04401e04 	movi	r17,120
     b34:	d8802a17 	ldw	r2,168(sp)
     b38:	0039883a 	mov	fp,zero
     b3c:	1001fa26 	beq	r2,zero,1328 <___vfprintf_internal_r+0xb78>
     b40:	0027883a 	mov	r19,zero
     b44:	002d883a 	mov	r22,zero
     b48:	00021906 	br	13b0 <___vfprintf_internal_r+0xc00>
     b4c:	d9002d17 	ldw	r4,180(sp)
     b50:	b80b883a 	mov	r5,r23
     b54:	0002b640 	call	2b64 <__swsetup_r>
     b58:	1005dc1e 	bne	r2,zero,22cc <___vfprintf_internal_r+0x1b1c>
     b5c:	b880030b 	ldhu	r2,12(r23)
     b60:	00c00284 	movi	r3,10
     b64:	1080068c 	andi	r2,r2,26
     b68:	10ff3a1e 	bne	r2,r3,854 <__alt_data_end+0xfffb7474>
     b6c:	b880038f 	ldh	r2,14(r23)
     b70:	103f3816 	blt	r2,zero,854 <__alt_data_end+0xfffb7474>
     b74:	d9c02e17 	ldw	r7,184(sp)
     b78:	d9002d17 	ldw	r4,180(sp)
     b7c:	a80d883a 	mov	r6,r21
     b80:	b80b883a 	mov	r5,r23
     b84:	0002aa80 	call	2aa8 <__sbprintf>
     b88:	00001106 	br	bd0 <___vfprintf_internal_r+0x420>
     b8c:	d9002d17 	ldw	r4,180(sp)
     b90:	d9801e04 	addi	r6,sp,120
     b94:	b80b883a 	mov	r5,r23
     b98:	00080f80 	call	80f8 <__sprint_r>
     b9c:	1000081e 	bne	r2,zero,bc0 <___vfprintf_internal_r+0x410>
     ba0:	da000404 	addi	r8,sp,16
     ba4:	003f5106 	br	8ec <__alt_data_end+0xfffb750c>
     ba8:	d8802017 	ldw	r2,128(sp)
     bac:	10000426 	beq	r2,zero,bc0 <___vfprintf_internal_r+0x410>
     bb0:	d9002d17 	ldw	r4,180(sp)
     bb4:	d9801e04 	addi	r6,sp,120
     bb8:	b80b883a 	mov	r5,r23
     bbc:	00080f80 	call	80f8 <__sprint_r>
     bc0:	b880030b 	ldhu	r2,12(r23)
     bc4:	1080100c 	andi	r2,r2,64
     bc8:	1005c01e 	bne	r2,zero,22cc <___vfprintf_internal_r+0x1b1c>
     bcc:	d8802f17 	ldw	r2,188(sp)
     bd0:	dfc04717 	ldw	ra,284(sp)
     bd4:	df004617 	ldw	fp,280(sp)
     bd8:	ddc04517 	ldw	r23,276(sp)
     bdc:	dd804417 	ldw	r22,272(sp)
     be0:	dd404317 	ldw	r21,268(sp)
     be4:	dd004217 	ldw	r20,264(sp)
     be8:	dcc04117 	ldw	r19,260(sp)
     bec:	dc804017 	ldw	r18,256(sp)
     bf0:	dc403f17 	ldw	r17,252(sp)
     bf4:	dc003e17 	ldw	r16,248(sp)
     bf8:	dec04804 	addi	sp,sp,288
     bfc:	f800283a 	ret
     c00:	d9002d17 	ldw	r4,180(sp)
     c04:	0004b700 	call	4b70 <__sinit>
     c08:	003f0206 	br	814 <__alt_data_end+0xfffb7434>
     c0c:	d9002e17 	ldw	r4,184(sp)
     c10:	d9402e17 	ldw	r5,184(sp)
     c14:	21000017 	ldw	r4,0(r4)
     c18:	28800104 	addi	r2,r5,4
     c1c:	d9003115 	stw	r4,196(sp)
     c20:	203fa716 	blt	r4,zero,ac0 <__alt_data_end+0xfffb76e0>
     c24:	d8802e15 	stw	r2,184(sp)
     c28:	ac400007 	ldb	r17,0(r21)
     c2c:	003f4206 	br	938 <__alt_data_end+0xfffb7558>
     c30:	ac400007 	ldb	r17,0(r21)
     c34:	01000a84 	movi	r4,42
     c38:	a8c00044 	addi	r3,r21,1
     c3c:	89075826 	beq	r17,r4,29a0 <___vfprintf_internal_r+0x21f0>
     c40:	8cbff404 	addi	r18,r17,-48
     c44:	b486ae36 	bltu	r22,r18,2700 <___vfprintf_internal_r+0x1f50>
     c48:	0009883a 	mov	r4,zero
     c4c:	1823883a 	mov	r17,r3
     c50:	01400284 	movi	r5,10
     c54:	000adb40 	call	adb4 <__mulsi3>
     c58:	88c00007 	ldb	r3,0(r17)
     c5c:	1489883a 	add	r4,r2,r18
     c60:	8d400044 	addi	r21,r17,1
     c64:	1cbff404 	addi	r18,r3,-48
     c68:	a823883a 	mov	r17,r21
     c6c:	b4bff82e 	bgeu	r22,r18,c50 <__alt_data_end+0xfffb7870>
     c70:	1823883a 	mov	r17,r3
     c74:	2005f616 	blt	r4,zero,2450 <___vfprintf_internal_r+0x1ca0>
     c78:	d9002a15 	stw	r4,168(sp)
     c7c:	003f2f06 	br	93c <__alt_data_end+0xfffb755c>
     c80:	84002014 	ori	r16,r16,128
     c84:	ac400007 	ldb	r17,0(r21)
     c88:	003f2b06 	br	938 <__alt_data_end+0xfffb7558>
     c8c:	8cbff404 	addi	r18,r17,-48
     c90:	d8003115 	stw	zero,196(sp)
     c94:	0009883a 	mov	r4,zero
     c98:	a823883a 	mov	r17,r21
     c9c:	01400284 	movi	r5,10
     ca0:	000adb40 	call	adb4 <__mulsi3>
     ca4:	88c00007 	ldb	r3,0(r17)
     ca8:	9089883a 	add	r4,r18,r2
     cac:	ad400044 	addi	r21,r21,1
     cb0:	1cbff404 	addi	r18,r3,-48
     cb4:	a823883a 	mov	r17,r21
     cb8:	b4bff82e 	bgeu	r22,r18,c9c <__alt_data_end+0xfffb78bc>
     cbc:	1823883a 	mov	r17,r3
     cc0:	d9003115 	stw	r4,196(sp)
     cc4:	003f1d06 	br	93c <__alt_data_end+0xfffb755c>
     cc8:	8025883a 	mov	r18,r16
     ccc:	dc002903 	ldbu	r16,164(sp)
     cd0:	e011883a 	mov	r8,fp
     cd4:	84003fcc 	andi	r16,r16,255
     cd8:	8007531e 	bne	r16,zero,2a28 <___vfprintf_internal_r+0x2278>
     cdc:	94800414 	ori	r18,r18,16
     ce0:	9080080c 	andi	r2,r18,32
     ce4:	1003a326 	beq	r2,zero,1b74 <___vfprintf_internal_r+0x13c4>
     ce8:	d9002e17 	ldw	r4,184(sp)
     cec:	20800117 	ldw	r2,4(r4)
     cf0:	24c00017 	ldw	r19,0(r4)
     cf4:	21000204 	addi	r4,r4,8
     cf8:	d9002e15 	stw	r4,184(sp)
     cfc:	102d883a 	mov	r22,r2
     d00:	10047316 	blt	r2,zero,1ed0 <___vfprintf_internal_r+0x1720>
     d04:	d9002a17 	ldw	r4,168(sp)
     d08:	df002783 	ldbu	fp,158(sp)
     d0c:	2003e416 	blt	r4,zero,1ca0 <___vfprintf_internal_r+0x14f0>
     d10:	00ffdfc4 	movi	r3,-129
     d14:	9d84b03a 	or	r2,r19,r22
     d18:	90e4703a 	and	r18,r18,r3
     d1c:	10018026 	beq	r2,zero,1320 <___vfprintf_internal_r+0xb70>
     d20:	b003ab26 	beq	r22,zero,1bd0 <___vfprintf_internal_r+0x1420>
     d24:	dc402915 	stw	r17,164(sp)
     d28:	dc001e04 	addi	r16,sp,120
     d2c:	b023883a 	mov	r17,r22
     d30:	402d883a 	mov	r22,r8
     d34:	9809883a 	mov	r4,r19
     d38:	880b883a 	mov	r5,r17
     d3c:	01800284 	movi	r6,10
     d40:	000f883a 	mov	r7,zero
     d44:	000a63c0 	call	a63c <__umoddi3>
     d48:	10800c04 	addi	r2,r2,48
     d4c:	843fffc4 	addi	r16,r16,-1
     d50:	9809883a 	mov	r4,r19
     d54:	880b883a 	mov	r5,r17
     d58:	80800005 	stb	r2,0(r16)
     d5c:	01800284 	movi	r6,10
     d60:	000f883a 	mov	r7,zero
     d64:	000a0400 	call	a040 <__udivdi3>
     d68:	1027883a 	mov	r19,r2
     d6c:	10c4b03a 	or	r2,r2,r3
     d70:	1823883a 	mov	r17,r3
     d74:	103fef1e 	bne	r2,zero,d34 <__alt_data_end+0xfffb7954>
     d78:	d8c02817 	ldw	r3,160(sp)
     d7c:	dc402917 	ldw	r17,164(sp)
     d80:	b011883a 	mov	r8,r22
     d84:	1c07c83a 	sub	r3,r3,r16
     d88:	d8c02b15 	stw	r3,172(sp)
     d8c:	00005f06 	br	f0c <___vfprintf_internal_r+0x75c>
     d90:	8025883a 	mov	r18,r16
     d94:	dc002903 	ldbu	r16,164(sp)
     d98:	e011883a 	mov	r8,fp
     d9c:	84003fcc 	andi	r16,r16,255
     da0:	80071e1e 	bne	r16,zero,2a1c <___vfprintf_internal_r+0x226c>
     da4:	9080020c 	andi	r2,r18,8
     da8:	1004af26 	beq	r2,zero,2068 <___vfprintf_internal_r+0x18b8>
     dac:	d9002e17 	ldw	r4,184(sp)
     db0:	d9402e17 	ldw	r5,184(sp)
     db4:	d8802e17 	ldw	r2,184(sp)
     db8:	21000017 	ldw	r4,0(r4)
     dbc:	29400117 	ldw	r5,4(r5)
     dc0:	10800204 	addi	r2,r2,8
     dc4:	d9003615 	stw	r4,216(sp)
     dc8:	d9403815 	stw	r5,224(sp)
     dcc:	d8802e15 	stw	r2,184(sp)
     dd0:	d9003617 	ldw	r4,216(sp)
     dd4:	d9403817 	ldw	r5,224(sp)
     dd8:	da003d15 	stw	r8,244(sp)
     ddc:	04000044 	movi	r16,1
     de0:	0007d1c0 	call	7d1c <__fpclassifyd>
     de4:	da003d17 	ldw	r8,244(sp)
     de8:	1404441e 	bne	r2,r16,1efc <___vfprintf_internal_r+0x174c>
     dec:	d9003617 	ldw	r4,216(sp)
     df0:	d9403817 	ldw	r5,224(sp)
     df4:	000d883a 	mov	r6,zero
     df8:	000f883a 	mov	r7,zero
     dfc:	000c1bc0 	call	c1bc <__ledf2>
     e00:	da003d17 	ldw	r8,244(sp)
     e04:	1005e316 	blt	r2,zero,2594 <___vfprintf_internal_r+0x1de4>
     e08:	df002783 	ldbu	fp,158(sp)
     e0c:	008011c4 	movi	r2,71
     e10:	1445580e 	bge	r2,r17,2374 <___vfprintf_internal_r+0x1bc4>
     e14:	04000074 	movhi	r16,1
     e18:	84018404 	addi	r16,r16,1552
     e1c:	00c000c4 	movi	r3,3
     e20:	00bfdfc4 	movi	r2,-129
     e24:	d8c02915 	stw	r3,164(sp)
     e28:	90a4703a 	and	r18,r18,r2
     e2c:	d8c02b15 	stw	r3,172(sp)
     e30:	d8002a15 	stw	zero,168(sp)
     e34:	d8003215 	stw	zero,200(sp)
     e38:	00003a06 	br	f24 <___vfprintf_internal_r+0x774>
     e3c:	84000214 	ori	r16,r16,8
     e40:	ac400007 	ldb	r17,0(r21)
     e44:	003ebc06 	br	938 <__alt_data_end+0xfffb7558>
     e48:	8025883a 	mov	r18,r16
     e4c:	dc002903 	ldbu	r16,164(sp)
     e50:	e011883a 	mov	r8,fp
     e54:	84003fcc 	andi	r16,r16,255
     e58:	8007001e 	bne	r16,zero,2a5c <___vfprintf_internal_r+0x22ac>
     e5c:	94800414 	ori	r18,r18,16
     e60:	9080080c 	andi	r2,r18,32
     e64:	1002fa26 	beq	r2,zero,1a50 <___vfprintf_internal_r+0x12a0>
     e68:	d9002e17 	ldw	r4,184(sp)
     e6c:	d9402a17 	ldw	r5,168(sp)
     e70:	d8002785 	stb	zero,158(sp)
     e74:	20800204 	addi	r2,r4,8
     e78:	24c00017 	ldw	r19,0(r4)
     e7c:	25800117 	ldw	r22,4(r4)
     e80:	2804b116 	blt	r5,zero,2148 <___vfprintf_internal_r+0x1998>
     e84:	013fdfc4 	movi	r4,-129
     e88:	9d86b03a 	or	r3,r19,r22
     e8c:	d8802e15 	stw	r2,184(sp)
     e90:	9124703a 	and	r18,r18,r4
     e94:	1802fb1e 	bne	r3,zero,1a84 <___vfprintf_internal_r+0x12d4>
     e98:	d8c02a17 	ldw	r3,168(sp)
     e9c:	0039883a 	mov	fp,zero
     ea0:	1805e526 	beq	r3,zero,2638 <___vfprintf_internal_r+0x1e88>
     ea4:	0027883a 	mov	r19,zero
     ea8:	002d883a 	mov	r22,zero
     eac:	dc001e04 	addi	r16,sp,120
     eb0:	9806d0fa 	srli	r3,r19,3
     eb4:	b008977a 	slli	r4,r22,29
     eb8:	b02cd0fa 	srli	r22,r22,3
     ebc:	9cc001cc 	andi	r19,r19,7
     ec0:	98800c04 	addi	r2,r19,48
     ec4:	843fffc4 	addi	r16,r16,-1
     ec8:	20e6b03a 	or	r19,r4,r3
     ecc:	80800005 	stb	r2,0(r16)
     ed0:	9d86b03a 	or	r3,r19,r22
     ed4:	183ff61e 	bne	r3,zero,eb0 <__alt_data_end+0xfffb7ad0>
     ed8:	90c0004c 	andi	r3,r18,1
     edc:	18014126 	beq	r3,zero,13e4 <___vfprintf_internal_r+0xc34>
     ee0:	10803fcc 	andi	r2,r2,255
     ee4:	1080201c 	xori	r2,r2,128
     ee8:	10bfe004 	addi	r2,r2,-128
     eec:	00c00c04 	movi	r3,48
     ef0:	10c13c26 	beq	r2,r3,13e4 <___vfprintf_internal_r+0xc34>
     ef4:	80ffffc5 	stb	r3,-1(r16)
     ef8:	d8c02817 	ldw	r3,160(sp)
     efc:	80bfffc4 	addi	r2,r16,-1
     f00:	1021883a 	mov	r16,r2
     f04:	1887c83a 	sub	r3,r3,r2
     f08:	d8c02b15 	stw	r3,172(sp)
     f0c:	d8802b17 	ldw	r2,172(sp)
     f10:	d9002a17 	ldw	r4,168(sp)
     f14:	1100010e 	bge	r2,r4,f1c <___vfprintf_internal_r+0x76c>
     f18:	2005883a 	mov	r2,r4
     f1c:	d8802915 	stw	r2,164(sp)
     f20:	d8003215 	stw	zero,200(sp)
     f24:	e7003fcc 	andi	fp,fp,255
     f28:	e700201c 	xori	fp,fp,128
     f2c:	e73fe004 	addi	fp,fp,-128
     f30:	e0000326 	beq	fp,zero,f40 <___vfprintf_internal_r+0x790>
     f34:	d8c02917 	ldw	r3,164(sp)
     f38:	18c00044 	addi	r3,r3,1
     f3c:	d8c02915 	stw	r3,164(sp)
     f40:	90c0008c 	andi	r3,r18,2
     f44:	d8c02c15 	stw	r3,176(sp)
     f48:	18000326 	beq	r3,zero,f58 <___vfprintf_internal_r+0x7a8>
     f4c:	d8c02917 	ldw	r3,164(sp)
     f50:	18c00084 	addi	r3,r3,2
     f54:	d8c02915 	stw	r3,164(sp)
     f58:	90c0210c 	andi	r3,r18,132
     f5c:	d8c03015 	stw	r3,192(sp)
     f60:	1801c51e 	bne	r3,zero,1678 <___vfprintf_internal_r+0xec8>
     f64:	d9003117 	ldw	r4,196(sp)
     f68:	d8c02917 	ldw	r3,164(sp)
     f6c:	20e7c83a 	sub	r19,r4,r3
     f70:	04c1c10e 	bge	zero,r19,1678 <___vfprintf_internal_r+0xec8>
     f74:	02400404 	movi	r9,16
     f78:	d8c02017 	ldw	r3,128(sp)
     f7c:	d8801f17 	ldw	r2,124(sp)
     f80:	4cc52f0e 	bge	r9,r19,2440 <___vfprintf_internal_r+0x1c90>
     f84:	01400074 	movhi	r5,1
     f88:	29419784 	addi	r5,r5,1630
     f8c:	dc403b15 	stw	r17,236(sp)
     f90:	d9403515 	stw	r5,212(sp)
     f94:	9823883a 	mov	r17,r19
     f98:	482d883a 	mov	r22,r9
     f9c:	9027883a 	mov	r19,r18
     fa0:	070001c4 	movi	fp,7
     fa4:	8025883a 	mov	r18,r16
     fa8:	dc002d17 	ldw	r16,180(sp)
     fac:	00000306 	br	fbc <___vfprintf_internal_r+0x80c>
     fb0:	8c7ffc04 	addi	r17,r17,-16
     fb4:	42000204 	addi	r8,r8,8
     fb8:	b440130e 	bge	r22,r17,1008 <___vfprintf_internal_r+0x858>
     fbc:	01000074 	movhi	r4,1
     fc0:	18c00404 	addi	r3,r3,16
     fc4:	10800044 	addi	r2,r2,1
     fc8:	21019784 	addi	r4,r4,1630
     fcc:	41000015 	stw	r4,0(r8)
     fd0:	45800115 	stw	r22,4(r8)
     fd4:	d8c02015 	stw	r3,128(sp)
     fd8:	d8801f15 	stw	r2,124(sp)
     fdc:	e0bff40e 	bge	fp,r2,fb0 <__alt_data_end+0xfffb7bd0>
     fe0:	d9801e04 	addi	r6,sp,120
     fe4:	b80b883a 	mov	r5,r23
     fe8:	8009883a 	mov	r4,r16
     fec:	00080f80 	call	80f8 <__sprint_r>
     ff0:	103ef31e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
     ff4:	8c7ffc04 	addi	r17,r17,-16
     ff8:	d8c02017 	ldw	r3,128(sp)
     ffc:	d8801f17 	ldw	r2,124(sp)
    1000:	da000404 	addi	r8,sp,16
    1004:	b47fed16 	blt	r22,r17,fbc <__alt_data_end+0xfffb7bdc>
    1008:	9021883a 	mov	r16,r18
    100c:	9825883a 	mov	r18,r19
    1010:	8827883a 	mov	r19,r17
    1014:	dc403b17 	ldw	r17,236(sp)
    1018:	d9403517 	ldw	r5,212(sp)
    101c:	98c7883a 	add	r3,r19,r3
    1020:	10800044 	addi	r2,r2,1
    1024:	41400015 	stw	r5,0(r8)
    1028:	44c00115 	stw	r19,4(r8)
    102c:	d8c02015 	stw	r3,128(sp)
    1030:	d8801f15 	stw	r2,124(sp)
    1034:	010001c4 	movi	r4,7
    1038:	2082c516 	blt	r4,r2,1b50 <___vfprintf_internal_r+0x13a0>
    103c:	df002787 	ldb	fp,158(sp)
    1040:	42000204 	addi	r8,r8,8
    1044:	e0000c26 	beq	fp,zero,1078 <___vfprintf_internal_r+0x8c8>
    1048:	d8801f17 	ldw	r2,124(sp)
    104c:	d9002784 	addi	r4,sp,158
    1050:	18c00044 	addi	r3,r3,1
    1054:	10800044 	addi	r2,r2,1
    1058:	41000015 	stw	r4,0(r8)
    105c:	01000044 	movi	r4,1
    1060:	41000115 	stw	r4,4(r8)
    1064:	d8c02015 	stw	r3,128(sp)
    1068:	d8801f15 	stw	r2,124(sp)
    106c:	010001c4 	movi	r4,7
    1070:	20825e16 	blt	r4,r2,19ec <___vfprintf_internal_r+0x123c>
    1074:	42000204 	addi	r8,r8,8
    1078:	d8802c17 	ldw	r2,176(sp)
    107c:	10000c26 	beq	r2,zero,10b0 <___vfprintf_internal_r+0x900>
    1080:	d8801f17 	ldw	r2,124(sp)
    1084:	d9002704 	addi	r4,sp,156
    1088:	18c00084 	addi	r3,r3,2
    108c:	10800044 	addi	r2,r2,1
    1090:	41000015 	stw	r4,0(r8)
    1094:	01000084 	movi	r4,2
    1098:	41000115 	stw	r4,4(r8)
    109c:	d8c02015 	stw	r3,128(sp)
    10a0:	d8801f15 	stw	r2,124(sp)
    10a4:	010001c4 	movi	r4,7
    10a8:	20825816 	blt	r4,r2,1a0c <___vfprintf_internal_r+0x125c>
    10ac:	42000204 	addi	r8,r8,8
    10b0:	d9003017 	ldw	r4,192(sp)
    10b4:	00802004 	movi	r2,128
    10b8:	2081bb26 	beq	r4,r2,17a8 <___vfprintf_internal_r+0xff8>
    10bc:	d9402a17 	ldw	r5,168(sp)
    10c0:	d8802b17 	ldw	r2,172(sp)
    10c4:	28adc83a 	sub	r22,r5,r2
    10c8:	0580310e 	bge	zero,r22,1190 <___vfprintf_internal_r+0x9e0>
    10cc:	07000404 	movi	fp,16
    10d0:	d8801f17 	ldw	r2,124(sp)
    10d4:	e584360e 	bge	fp,r22,21b0 <___vfprintf_internal_r+0x1a00>
    10d8:	01400074 	movhi	r5,1
    10dc:	29419384 	addi	r5,r5,1614
    10e0:	dc402a15 	stw	r17,168(sp)
    10e4:	d9402c15 	stw	r5,176(sp)
    10e8:	b023883a 	mov	r17,r22
    10ec:	04c001c4 	movi	r19,7
    10f0:	a82d883a 	mov	r22,r21
    10f4:	902b883a 	mov	r21,r18
    10f8:	8025883a 	mov	r18,r16
    10fc:	dc002d17 	ldw	r16,180(sp)
    1100:	00000306 	br	1110 <___vfprintf_internal_r+0x960>
    1104:	8c7ffc04 	addi	r17,r17,-16
    1108:	42000204 	addi	r8,r8,8
    110c:	e440110e 	bge	fp,r17,1154 <___vfprintf_internal_r+0x9a4>
    1110:	18c00404 	addi	r3,r3,16
    1114:	10800044 	addi	r2,r2,1
    1118:	45000015 	stw	r20,0(r8)
    111c:	47000115 	stw	fp,4(r8)
    1120:	d8c02015 	stw	r3,128(sp)
    1124:	d8801f15 	stw	r2,124(sp)
    1128:	98bff60e 	bge	r19,r2,1104 <__alt_data_end+0xfffb7d24>
    112c:	d9801e04 	addi	r6,sp,120
    1130:	b80b883a 	mov	r5,r23
    1134:	8009883a 	mov	r4,r16
    1138:	00080f80 	call	80f8 <__sprint_r>
    113c:	103ea01e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    1140:	8c7ffc04 	addi	r17,r17,-16
    1144:	d8c02017 	ldw	r3,128(sp)
    1148:	d8801f17 	ldw	r2,124(sp)
    114c:	da000404 	addi	r8,sp,16
    1150:	e47fef16 	blt	fp,r17,1110 <__alt_data_end+0xfffb7d30>
    1154:	9021883a 	mov	r16,r18
    1158:	a825883a 	mov	r18,r21
    115c:	b02b883a 	mov	r21,r22
    1160:	882d883a 	mov	r22,r17
    1164:	dc402a17 	ldw	r17,168(sp)
    1168:	d9002c17 	ldw	r4,176(sp)
    116c:	1d87883a 	add	r3,r3,r22
    1170:	10800044 	addi	r2,r2,1
    1174:	41000015 	stw	r4,0(r8)
    1178:	45800115 	stw	r22,4(r8)
    117c:	d8c02015 	stw	r3,128(sp)
    1180:	d8801f15 	stw	r2,124(sp)
    1184:	010001c4 	movi	r4,7
    1188:	20821016 	blt	r4,r2,19cc <___vfprintf_internal_r+0x121c>
    118c:	42000204 	addi	r8,r8,8
    1190:	9080400c 	andi	r2,r18,256
    1194:	10013a1e 	bne	r2,zero,1680 <___vfprintf_internal_r+0xed0>
    1198:	d9402b17 	ldw	r5,172(sp)
    119c:	d8801f17 	ldw	r2,124(sp)
    11a0:	44000015 	stw	r16,0(r8)
    11a4:	1947883a 	add	r3,r3,r5
    11a8:	10800044 	addi	r2,r2,1
    11ac:	41400115 	stw	r5,4(r8)
    11b0:	d8c02015 	stw	r3,128(sp)
    11b4:	d8801f15 	stw	r2,124(sp)
    11b8:	010001c4 	movi	r4,7
    11bc:	2081f516 	blt	r4,r2,1994 <___vfprintf_internal_r+0x11e4>
    11c0:	42000204 	addi	r8,r8,8
    11c4:	9480010c 	andi	r18,r18,4
    11c8:	90003226 	beq	r18,zero,1294 <___vfprintf_internal_r+0xae4>
    11cc:	d9403117 	ldw	r5,196(sp)
    11d0:	d8802917 	ldw	r2,164(sp)
    11d4:	28a1c83a 	sub	r16,r5,r2
    11d8:	04002e0e 	bge	zero,r16,1294 <___vfprintf_internal_r+0xae4>
    11dc:	04400404 	movi	r17,16
    11e0:	d8801f17 	ldw	r2,124(sp)
    11e4:	8c04c40e 	bge	r17,r16,24f8 <___vfprintf_internal_r+0x1d48>
    11e8:	01400074 	movhi	r5,1
    11ec:	29419784 	addi	r5,r5,1630
    11f0:	d9403515 	stw	r5,212(sp)
    11f4:	048001c4 	movi	r18,7
    11f8:	dcc02d17 	ldw	r19,180(sp)
    11fc:	00000306 	br	120c <___vfprintf_internal_r+0xa5c>
    1200:	843ffc04 	addi	r16,r16,-16
    1204:	42000204 	addi	r8,r8,8
    1208:	8c00130e 	bge	r17,r16,1258 <___vfprintf_internal_r+0xaa8>
    120c:	01000074 	movhi	r4,1
    1210:	18c00404 	addi	r3,r3,16
    1214:	10800044 	addi	r2,r2,1
    1218:	21019784 	addi	r4,r4,1630
    121c:	41000015 	stw	r4,0(r8)
    1220:	44400115 	stw	r17,4(r8)
    1224:	d8c02015 	stw	r3,128(sp)
    1228:	d8801f15 	stw	r2,124(sp)
    122c:	90bff40e 	bge	r18,r2,1200 <__alt_data_end+0xfffb7e20>
    1230:	d9801e04 	addi	r6,sp,120
    1234:	b80b883a 	mov	r5,r23
    1238:	9809883a 	mov	r4,r19
    123c:	00080f80 	call	80f8 <__sprint_r>
    1240:	103e5f1e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    1244:	843ffc04 	addi	r16,r16,-16
    1248:	d8c02017 	ldw	r3,128(sp)
    124c:	d8801f17 	ldw	r2,124(sp)
    1250:	da000404 	addi	r8,sp,16
    1254:	8c3fed16 	blt	r17,r16,120c <__alt_data_end+0xfffb7e2c>
    1258:	d9403517 	ldw	r5,212(sp)
    125c:	1c07883a 	add	r3,r3,r16
    1260:	10800044 	addi	r2,r2,1
    1264:	41400015 	stw	r5,0(r8)
    1268:	44000115 	stw	r16,4(r8)
    126c:	d8c02015 	stw	r3,128(sp)
    1270:	d8801f15 	stw	r2,124(sp)
    1274:	010001c4 	movi	r4,7
    1278:	2080060e 	bge	r4,r2,1294 <___vfprintf_internal_r+0xae4>
    127c:	d9002d17 	ldw	r4,180(sp)
    1280:	d9801e04 	addi	r6,sp,120
    1284:	b80b883a 	mov	r5,r23
    1288:	00080f80 	call	80f8 <__sprint_r>
    128c:	103e4c1e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    1290:	d8c02017 	ldw	r3,128(sp)
    1294:	d8803117 	ldw	r2,196(sp)
    1298:	d9002917 	ldw	r4,164(sp)
    129c:	1100010e 	bge	r2,r4,12a4 <___vfprintf_internal_r+0xaf4>
    12a0:	2005883a 	mov	r2,r4
    12a4:	d9402f17 	ldw	r5,188(sp)
    12a8:	288b883a 	add	r5,r5,r2
    12ac:	d9402f15 	stw	r5,188(sp)
    12b0:	1801c01e 	bne	r3,zero,19b4 <___vfprintf_internal_r+0x1204>
    12b4:	a8800007 	ldb	r2,0(r21)
    12b8:	d8001f15 	stw	zero,124(sp)
    12bc:	da000404 	addi	r8,sp,16
    12c0:	103d751e 	bne	r2,zero,898 <__alt_data_end+0xfffb74b8>
    12c4:	a823883a 	mov	r17,r21
    12c8:	003d8b06 	br	8f8 <__alt_data_end+0xfffb7518>
    12cc:	8025883a 	mov	r18,r16
    12d0:	dc002903 	ldbu	r16,164(sp)
    12d4:	e011883a 	mov	r8,fp
    12d8:	84003fcc 	andi	r16,r16,255
    12dc:	8005e51e 	bne	r16,zero,2a74 <___vfprintf_internal_r+0x22c4>
    12e0:	94800414 	ori	r18,r18,16
    12e4:	9080080c 	andi	r2,r18,32
    12e8:	10022b26 	beq	r2,zero,1b98 <___vfprintf_internal_r+0x13e8>
    12ec:	d9002e17 	ldw	r4,184(sp)
    12f0:	d9402a17 	ldw	r5,168(sp)
    12f4:	d8002785 	stb	zero,158(sp)
    12f8:	20c00204 	addi	r3,r4,8
    12fc:	24c00017 	ldw	r19,0(r4)
    1300:	25800117 	ldw	r22,4(r4)
    1304:	28042e16 	blt	r5,zero,23c0 <___vfprintf_internal_r+0x1c10>
    1308:	013fdfc4 	movi	r4,-129
    130c:	9d84b03a 	or	r2,r19,r22
    1310:	d8c02e15 	stw	r3,184(sp)
    1314:	9124703a 	and	r18,r18,r4
    1318:	0039883a 	mov	fp,zero
    131c:	103e801e 	bne	r2,zero,d20 <__alt_data_end+0xfffb7940>
    1320:	d9002a17 	ldw	r4,168(sp)
    1324:	2002e01e 	bne	r4,zero,1ea8 <___vfprintf_internal_r+0x16f8>
    1328:	d8002a15 	stw	zero,168(sp)
    132c:	d8002b15 	stw	zero,172(sp)
    1330:	dc001e04 	addi	r16,sp,120
    1334:	003ef506 	br	f0c <__alt_data_end+0xfffb7b2c>
    1338:	8025883a 	mov	r18,r16
    133c:	dc002903 	ldbu	r16,164(sp)
    1340:	e011883a 	mov	r8,fp
    1344:	84003fcc 	andi	r16,r16,255
    1348:	8005ba1e 	bne	r16,zero,2a34 <___vfprintf_internal_r+0x2284>
    134c:	01000074 	movhi	r4,1
    1350:	21018704 	addi	r4,r4,1564
    1354:	d9003915 	stw	r4,228(sp)
    1358:	9080080c 	andi	r2,r18,32
    135c:	10006126 	beq	r2,zero,14e4 <___vfprintf_internal_r+0xd34>
    1360:	d9402e17 	ldw	r5,184(sp)
    1364:	2cc00017 	ldw	r19,0(r5)
    1368:	2d800117 	ldw	r22,4(r5)
    136c:	29400204 	addi	r5,r5,8
    1370:	d9402e15 	stw	r5,184(sp)
    1374:	9080004c 	andi	r2,r18,1
    1378:	1001ac26 	beq	r2,zero,1a2c <___vfprintf_internal_r+0x127c>
    137c:	9d84b03a 	or	r2,r19,r22
    1380:	10038526 	beq	r2,zero,2198 <___vfprintf_internal_r+0x19e8>
    1384:	d8c02a17 	ldw	r3,168(sp)
    1388:	00800c04 	movi	r2,48
    138c:	d8802705 	stb	r2,156(sp)
    1390:	dc402745 	stb	r17,157(sp)
    1394:	d8002785 	stb	zero,158(sp)
    1398:	90800094 	ori	r2,r18,2
    139c:	18047916 	blt	r3,zero,2584 <___vfprintf_internal_r+0x1dd4>
    13a0:	00bfdfc4 	movi	r2,-129
    13a4:	90a4703a 	and	r18,r18,r2
    13a8:	94800094 	ori	r18,r18,2
    13ac:	0039883a 	mov	fp,zero
    13b0:	d9003917 	ldw	r4,228(sp)
    13b4:	dc001e04 	addi	r16,sp,120
    13b8:	988003cc 	andi	r2,r19,15
    13bc:	b006973a 	slli	r3,r22,28
    13c0:	2085883a 	add	r2,r4,r2
    13c4:	9826d13a 	srli	r19,r19,4
    13c8:	10800003 	ldbu	r2,0(r2)
    13cc:	b02cd13a 	srli	r22,r22,4
    13d0:	843fffc4 	addi	r16,r16,-1
    13d4:	1ce6b03a 	or	r19,r3,r19
    13d8:	80800005 	stb	r2,0(r16)
    13dc:	9d84b03a 	or	r2,r19,r22
    13e0:	103ff51e 	bne	r2,zero,13b8 <__alt_data_end+0xfffb7fd8>
    13e4:	d8c02817 	ldw	r3,160(sp)
    13e8:	1c07c83a 	sub	r3,r3,r16
    13ec:	d8c02b15 	stw	r3,172(sp)
    13f0:	003ec606 	br	f0c <__alt_data_end+0xfffb7b2c>
    13f4:	8025883a 	mov	r18,r16
    13f8:	dc002903 	ldbu	r16,164(sp)
    13fc:	e011883a 	mov	r8,fp
    1400:	84003fcc 	andi	r16,r16,255
    1404:	803e9626 	beq	r16,zero,e60 <__alt_data_end+0xfffb7a80>
    1408:	d8c02b03 	ldbu	r3,172(sp)
    140c:	d8c02785 	stb	r3,158(sp)
    1410:	003e9306 	br	e60 <__alt_data_end+0xfffb7a80>
    1414:	00c00044 	movi	r3,1
    1418:	d8c02905 	stb	r3,164(sp)
    141c:	00c00ac4 	movi	r3,43
    1420:	d8c02b05 	stb	r3,172(sp)
    1424:	ac400007 	ldb	r17,0(r21)
    1428:	003d4306 	br	938 <__alt_data_end+0xfffb7558>
    142c:	84000814 	ori	r16,r16,32
    1430:	ac400007 	ldb	r17,0(r21)
    1434:	003d4006 	br	938 <__alt_data_end+0xfffb7558>
    1438:	d8802e17 	ldw	r2,184(sp)
    143c:	8025883a 	mov	r18,r16
    1440:	d8002785 	stb	zero,158(sp)
    1444:	14000017 	ldw	r16,0(r2)
    1448:	e011883a 	mov	r8,fp
    144c:	14c00104 	addi	r19,r2,4
    1450:	80042d26 	beq	r16,zero,2508 <___vfprintf_internal_r+0x1d58>
    1454:	d8c02a17 	ldw	r3,168(sp)
    1458:	1803e416 	blt	r3,zero,23ec <___vfprintf_internal_r+0x1c3c>
    145c:	180d883a 	mov	r6,r3
    1460:	000b883a 	mov	r5,zero
    1464:	8009883a 	mov	r4,r16
    1468:	df003d15 	stw	fp,244(sp)
    146c:	00060e80 	call	60e8 <memchr>
    1470:	da003d17 	ldw	r8,244(sp)
    1474:	10046826 	beq	r2,zero,2618 <___vfprintf_internal_r+0x1e68>
    1478:	1405c83a 	sub	r2,r2,r16
    147c:	d8802b15 	stw	r2,172(sp)
    1480:	1003e016 	blt	r2,zero,2404 <___vfprintf_internal_r+0x1c54>
    1484:	df002783 	ldbu	fp,158(sp)
    1488:	d8802915 	stw	r2,164(sp)
    148c:	dcc02e15 	stw	r19,184(sp)
    1490:	d8002a15 	stw	zero,168(sp)
    1494:	d8003215 	stw	zero,200(sp)
    1498:	003ea206 	br	f24 <__alt_data_end+0xfffb7b44>
    149c:	8025883a 	mov	r18,r16
    14a0:	dc002903 	ldbu	r16,164(sp)
    14a4:	e011883a 	mov	r8,fp
    14a8:	84003fcc 	andi	r16,r16,255
    14ac:	803f8d26 	beq	r16,zero,12e4 <__alt_data_end+0xfffb7f04>
    14b0:	d8c02b03 	ldbu	r3,172(sp)
    14b4:	d8c02785 	stb	r3,158(sp)
    14b8:	003f8a06 	br	12e4 <__alt_data_end+0xfffb7f04>
    14bc:	8025883a 	mov	r18,r16
    14c0:	dc002903 	ldbu	r16,164(sp)
    14c4:	e011883a 	mov	r8,fp
    14c8:	84003fcc 	andi	r16,r16,255
    14cc:	8005661e 	bne	r16,zero,2a68 <___vfprintf_internal_r+0x22b8>
    14d0:	01000074 	movhi	r4,1
    14d4:	21018c04 	addi	r4,r4,1584
    14d8:	d9003915 	stw	r4,228(sp)
    14dc:	9080080c 	andi	r2,r18,32
    14e0:	103f9f1e 	bne	r2,zero,1360 <__alt_data_end+0xfffb7f80>
    14e4:	9080040c 	andi	r2,r18,16
    14e8:	1002eb26 	beq	r2,zero,2098 <___vfprintf_internal_r+0x18e8>
    14ec:	d8802e17 	ldw	r2,184(sp)
    14f0:	002d883a 	mov	r22,zero
    14f4:	14c00017 	ldw	r19,0(r2)
    14f8:	10800104 	addi	r2,r2,4
    14fc:	d8802e15 	stw	r2,184(sp)
    1500:	003f9c06 	br	1374 <__alt_data_end+0xfffb7f94>
    1504:	d8802b07 	ldb	r2,172(sp)
    1508:	1002e11e 	bne	r2,zero,2090 <___vfprintf_internal_r+0x18e0>
    150c:	00c00044 	movi	r3,1
    1510:	d8c02905 	stb	r3,164(sp)
    1514:	00c00804 	movi	r3,32
    1518:	d8c02b05 	stb	r3,172(sp)
    151c:	ac400007 	ldb	r17,0(r21)
    1520:	003d0506 	br	938 <__alt_data_end+0xfffb7558>
    1524:	84000054 	ori	r16,r16,1
    1528:	ac400007 	ldb	r17,0(r21)
    152c:	003d0206 	br	938 <__alt_data_end+0xfffb7558>
    1530:	8025883a 	mov	r18,r16
    1534:	dc002903 	ldbu	r16,164(sp)
    1538:	e011883a 	mov	r8,fp
    153c:	84003fcc 	andi	r16,r16,255
    1540:	803de726 	beq	r16,zero,ce0 <__alt_data_end+0xfffb7900>
    1544:	d8c02b03 	ldbu	r3,172(sp)
    1548:	d8c02785 	stb	r3,158(sp)
    154c:	003de406 	br	ce0 <__alt_data_end+0xfffb7900>
    1550:	84001014 	ori	r16,r16,64
    1554:	ac400007 	ldb	r17,0(r21)
    1558:	003cf706 	br	938 <__alt_data_end+0xfffb7558>
    155c:	ac400007 	ldb	r17,0(r21)
    1560:	00801b04 	movi	r2,108
    1564:	88838f26 	beq	r17,r2,23a4 <___vfprintf_internal_r+0x1bf4>
    1568:	84000414 	ori	r16,r16,16
    156c:	003cf206 	br	938 <__alt_data_end+0xfffb7558>
    1570:	8025883a 	mov	r18,r16
    1574:	dc002903 	ldbu	r16,164(sp)
    1578:	e011883a 	mov	r8,fp
    157c:	84003fcc 	andi	r16,r16,255
    1580:	80053f1e 	bne	r16,zero,2a80 <___vfprintf_internal_r+0x22d0>
    1584:	9080080c 	andi	r2,r18,32
    1588:	1002d226 	beq	r2,zero,20d4 <___vfprintf_internal_r+0x1924>
    158c:	d9002e17 	ldw	r4,184(sp)
    1590:	d9402f17 	ldw	r5,188(sp)
    1594:	20800017 	ldw	r2,0(r4)
    1598:	2807d7fa 	srai	r3,r5,31
    159c:	21000104 	addi	r4,r4,4
    15a0:	d9002e15 	stw	r4,184(sp)
    15a4:	11400015 	stw	r5,0(r2)
    15a8:	10c00115 	stw	r3,4(r2)
    15ac:	003cb806 	br	890 <__alt_data_end+0xfffb74b0>
    15b0:	d8c02e17 	ldw	r3,184(sp)
    15b4:	d9002e17 	ldw	r4,184(sp)
    15b8:	8025883a 	mov	r18,r16
    15bc:	18800017 	ldw	r2,0(r3)
    15c0:	21000104 	addi	r4,r4,4
    15c4:	00c00044 	movi	r3,1
    15c8:	e011883a 	mov	r8,fp
    15cc:	d8c02915 	stw	r3,164(sp)
    15d0:	d8002785 	stb	zero,158(sp)
    15d4:	d8801405 	stb	r2,80(sp)
    15d8:	d9002e15 	stw	r4,184(sp)
    15dc:	d8c02b15 	stw	r3,172(sp)
    15e0:	d8002a15 	stw	zero,168(sp)
    15e4:	d8003215 	stw	zero,200(sp)
    15e8:	dc001404 	addi	r16,sp,80
    15ec:	0039883a 	mov	fp,zero
    15f0:	003e5306 	br	f40 <__alt_data_end+0xfffb7b60>
    15f4:	01000074 	movhi	r4,1
    15f8:	21018c04 	addi	r4,r4,1584
    15fc:	0039883a 	mov	fp,zero
    1600:	d9003915 	stw	r4,228(sp)
    1604:	04401e04 	movi	r17,120
    1608:	003f6906 	br	13b0 <__alt_data_end+0xfffb7fd0>
    160c:	8025883a 	mov	r18,r16
    1610:	dc002903 	ldbu	r16,164(sp)
    1614:	e011883a 	mov	r8,fp
    1618:	84003fcc 	andi	r16,r16,255
    161c:	8005081e 	bne	r16,zero,2a40 <___vfprintf_internal_r+0x2290>
    1620:	883d6126 	beq	r17,zero,ba8 <__alt_data_end+0xfffb77c8>
    1624:	00c00044 	movi	r3,1
    1628:	d8c02915 	stw	r3,164(sp)
    162c:	dc401405 	stb	r17,80(sp)
    1630:	d8002785 	stb	zero,158(sp)
    1634:	003fe906 	br	15dc <__alt_data_end+0xfffb81fc>
    1638:	01400074 	movhi	r5,1
    163c:	29418c04 	addi	r5,r5,1584
    1640:	d9403915 	stw	r5,228(sp)
    1644:	d8c02e15 	stw	r3,184(sp)
    1648:	1025883a 	mov	r18,r2
    164c:	04401e04 	movi	r17,120
    1650:	9d84b03a 	or	r2,r19,r22
    1654:	1000fc1e 	bne	r2,zero,1a48 <___vfprintf_internal_r+0x1298>
    1658:	0039883a 	mov	fp,zero
    165c:	00800084 	movi	r2,2
    1660:	10803fcc 	andi	r2,r2,255
    1664:	00c00044 	movi	r3,1
    1668:	10c20f26 	beq	r2,r3,1ea8 <___vfprintf_internal_r+0x16f8>
    166c:	00c00084 	movi	r3,2
    1670:	10fd3326 	beq	r2,r3,b40 <__alt_data_end+0xfffb7760>
    1674:	003e0b06 	br	ea4 <__alt_data_end+0xfffb7ac4>
    1678:	d8c02017 	ldw	r3,128(sp)
    167c:	003e7106 	br	1044 <__alt_data_end+0xfffb7c64>
    1680:	00801944 	movi	r2,101
    1684:	14407e0e 	bge	r2,r17,1880 <___vfprintf_internal_r+0x10d0>
    1688:	d9003617 	ldw	r4,216(sp)
    168c:	d9403817 	ldw	r5,224(sp)
    1690:	000d883a 	mov	r6,zero
    1694:	000f883a 	mov	r7,zero
    1698:	d8c03c15 	stw	r3,240(sp)
    169c:	da003d15 	stw	r8,244(sp)
    16a0:	000c0580 	call	c058 <__eqdf2>
    16a4:	d8c03c17 	ldw	r3,240(sp)
    16a8:	da003d17 	ldw	r8,244(sp)
    16ac:	1000f71e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x12dc>
    16b0:	d8801f17 	ldw	r2,124(sp)
    16b4:	01000074 	movhi	r4,1
    16b8:	21019304 	addi	r4,r4,1612
    16bc:	18c00044 	addi	r3,r3,1
    16c0:	10800044 	addi	r2,r2,1
    16c4:	41000015 	stw	r4,0(r8)
    16c8:	01000044 	movi	r4,1
    16cc:	41000115 	stw	r4,4(r8)
    16d0:	d8c02015 	stw	r3,128(sp)
    16d4:	d8801f15 	stw	r2,124(sp)
    16d8:	010001c4 	movi	r4,7
    16dc:	2082b816 	blt	r4,r2,21c0 <___vfprintf_internal_r+0x1a10>
    16e0:	42000204 	addi	r8,r8,8
    16e4:	d8802617 	ldw	r2,152(sp)
    16e8:	d9403317 	ldw	r5,204(sp)
    16ec:	11400216 	blt	r2,r5,16f8 <___vfprintf_internal_r+0xf48>
    16f0:	9080004c 	andi	r2,r18,1
    16f4:	103eb326 	beq	r2,zero,11c4 <__alt_data_end+0xfffb7de4>
    16f8:	d8803717 	ldw	r2,220(sp)
    16fc:	d9003417 	ldw	r4,208(sp)
    1700:	d9403717 	ldw	r5,220(sp)
    1704:	1887883a 	add	r3,r3,r2
    1708:	d8801f17 	ldw	r2,124(sp)
    170c:	41000015 	stw	r4,0(r8)
    1710:	41400115 	stw	r5,4(r8)
    1714:	10800044 	addi	r2,r2,1
    1718:	d8c02015 	stw	r3,128(sp)
    171c:	d8801f15 	stw	r2,124(sp)
    1720:	010001c4 	movi	r4,7
    1724:	20832916 	blt	r4,r2,23cc <___vfprintf_internal_r+0x1c1c>
    1728:	42000204 	addi	r8,r8,8
    172c:	d8803317 	ldw	r2,204(sp)
    1730:	143fffc4 	addi	r16,r2,-1
    1734:	043ea30e 	bge	zero,r16,11c4 <__alt_data_end+0xfffb7de4>
    1738:	04400404 	movi	r17,16
    173c:	d8801f17 	ldw	r2,124(sp)
    1740:	8c00880e 	bge	r17,r16,1964 <___vfprintf_internal_r+0x11b4>
    1744:	01400074 	movhi	r5,1
    1748:	29419384 	addi	r5,r5,1614
    174c:	d9402c15 	stw	r5,176(sp)
    1750:	058001c4 	movi	r22,7
    1754:	dcc02d17 	ldw	r19,180(sp)
    1758:	00000306 	br	1768 <___vfprintf_internal_r+0xfb8>
    175c:	42000204 	addi	r8,r8,8
    1760:	843ffc04 	addi	r16,r16,-16
    1764:	8c00820e 	bge	r17,r16,1970 <___vfprintf_internal_r+0x11c0>
    1768:	18c00404 	addi	r3,r3,16
    176c:	10800044 	addi	r2,r2,1
    1770:	45000015 	stw	r20,0(r8)
    1774:	44400115 	stw	r17,4(r8)
    1778:	d8c02015 	stw	r3,128(sp)
    177c:	d8801f15 	stw	r2,124(sp)
    1780:	b0bff60e 	bge	r22,r2,175c <__alt_data_end+0xfffb837c>
    1784:	d9801e04 	addi	r6,sp,120
    1788:	b80b883a 	mov	r5,r23
    178c:	9809883a 	mov	r4,r19
    1790:	00080f80 	call	80f8 <__sprint_r>
    1794:	103d0a1e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    1798:	d8c02017 	ldw	r3,128(sp)
    179c:	d8801f17 	ldw	r2,124(sp)
    17a0:	da000404 	addi	r8,sp,16
    17a4:	003fee06 	br	1760 <__alt_data_end+0xfffb8380>
    17a8:	d9403117 	ldw	r5,196(sp)
    17ac:	d8802917 	ldw	r2,164(sp)
    17b0:	28adc83a 	sub	r22,r5,r2
    17b4:	05be410e 	bge	zero,r22,10bc <__alt_data_end+0xfffb7cdc>
    17b8:	07000404 	movi	fp,16
    17bc:	d8801f17 	ldw	r2,124(sp)
    17c0:	e5838f0e 	bge	fp,r22,2600 <___vfprintf_internal_r+0x1e50>
    17c4:	01400074 	movhi	r5,1
    17c8:	29419384 	addi	r5,r5,1614
    17cc:	dc403015 	stw	r17,192(sp)
    17d0:	d9402c15 	stw	r5,176(sp)
    17d4:	b023883a 	mov	r17,r22
    17d8:	04c001c4 	movi	r19,7
    17dc:	a82d883a 	mov	r22,r21
    17e0:	902b883a 	mov	r21,r18
    17e4:	8025883a 	mov	r18,r16
    17e8:	dc002d17 	ldw	r16,180(sp)
    17ec:	00000306 	br	17fc <___vfprintf_internal_r+0x104c>
    17f0:	8c7ffc04 	addi	r17,r17,-16
    17f4:	42000204 	addi	r8,r8,8
    17f8:	e440110e 	bge	fp,r17,1840 <___vfprintf_internal_r+0x1090>
    17fc:	18c00404 	addi	r3,r3,16
    1800:	10800044 	addi	r2,r2,1
    1804:	45000015 	stw	r20,0(r8)
    1808:	47000115 	stw	fp,4(r8)
    180c:	d8c02015 	stw	r3,128(sp)
    1810:	d8801f15 	stw	r2,124(sp)
    1814:	98bff60e 	bge	r19,r2,17f0 <__alt_data_end+0xfffb8410>
    1818:	d9801e04 	addi	r6,sp,120
    181c:	b80b883a 	mov	r5,r23
    1820:	8009883a 	mov	r4,r16
    1824:	00080f80 	call	80f8 <__sprint_r>
    1828:	103ce51e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    182c:	8c7ffc04 	addi	r17,r17,-16
    1830:	d8c02017 	ldw	r3,128(sp)
    1834:	d8801f17 	ldw	r2,124(sp)
    1838:	da000404 	addi	r8,sp,16
    183c:	e47fef16 	blt	fp,r17,17fc <__alt_data_end+0xfffb841c>
    1840:	9021883a 	mov	r16,r18
    1844:	a825883a 	mov	r18,r21
    1848:	b02b883a 	mov	r21,r22
    184c:	882d883a 	mov	r22,r17
    1850:	dc403017 	ldw	r17,192(sp)
    1854:	d9002c17 	ldw	r4,176(sp)
    1858:	1d87883a 	add	r3,r3,r22
    185c:	10800044 	addi	r2,r2,1
    1860:	41000015 	stw	r4,0(r8)
    1864:	45800115 	stw	r22,4(r8)
    1868:	d8c02015 	stw	r3,128(sp)
    186c:	d8801f15 	stw	r2,124(sp)
    1870:	010001c4 	movi	r4,7
    1874:	20818e16 	blt	r4,r2,1eb0 <___vfprintf_internal_r+0x1700>
    1878:	42000204 	addi	r8,r8,8
    187c:	003e0f06 	br	10bc <__alt_data_end+0xfffb7cdc>
    1880:	d9403317 	ldw	r5,204(sp)
    1884:	00800044 	movi	r2,1
    1888:	18c00044 	addi	r3,r3,1
    188c:	1141530e 	bge	r2,r5,1ddc <___vfprintf_internal_r+0x162c>
    1890:	dc401f17 	ldw	r17,124(sp)
    1894:	00800044 	movi	r2,1
    1898:	40800115 	stw	r2,4(r8)
    189c:	8c400044 	addi	r17,r17,1
    18a0:	44000015 	stw	r16,0(r8)
    18a4:	d8c02015 	stw	r3,128(sp)
    18a8:	dc401f15 	stw	r17,124(sp)
    18ac:	008001c4 	movi	r2,7
    18b0:	14416b16 	blt	r2,r17,1e60 <___vfprintf_internal_r+0x16b0>
    18b4:	42000204 	addi	r8,r8,8
    18b8:	d8803717 	ldw	r2,220(sp)
    18bc:	d9003417 	ldw	r4,208(sp)
    18c0:	8c400044 	addi	r17,r17,1
    18c4:	10c7883a 	add	r3,r2,r3
    18c8:	40800115 	stw	r2,4(r8)
    18cc:	41000015 	stw	r4,0(r8)
    18d0:	d8c02015 	stw	r3,128(sp)
    18d4:	dc401f15 	stw	r17,124(sp)
    18d8:	008001c4 	movi	r2,7
    18dc:	14416916 	blt	r2,r17,1e84 <___vfprintf_internal_r+0x16d4>
    18e0:	45800204 	addi	r22,r8,8
    18e4:	d9003617 	ldw	r4,216(sp)
    18e8:	d9403817 	ldw	r5,224(sp)
    18ec:	000d883a 	mov	r6,zero
    18f0:	000f883a 	mov	r7,zero
    18f4:	d8c03c15 	stw	r3,240(sp)
    18f8:	000c0580 	call	c058 <__eqdf2>
    18fc:	d8c03c17 	ldw	r3,240(sp)
    1900:	1000bc26 	beq	r2,zero,1bf4 <___vfprintf_internal_r+0x1444>
    1904:	d9403317 	ldw	r5,204(sp)
    1908:	84000044 	addi	r16,r16,1
    190c:	8c400044 	addi	r17,r17,1
    1910:	28bfffc4 	addi	r2,r5,-1
    1914:	1887883a 	add	r3,r3,r2
    1918:	b0800115 	stw	r2,4(r22)
    191c:	b4000015 	stw	r16,0(r22)
    1920:	d8c02015 	stw	r3,128(sp)
    1924:	dc401f15 	stw	r17,124(sp)
    1928:	008001c4 	movi	r2,7
    192c:	14414316 	blt	r2,r17,1e3c <___vfprintf_internal_r+0x168c>
    1930:	b5800204 	addi	r22,r22,8
    1934:	d9003a17 	ldw	r4,232(sp)
    1938:	df0022c4 	addi	fp,sp,139
    193c:	8c400044 	addi	r17,r17,1
    1940:	20c7883a 	add	r3,r4,r3
    1944:	b7000015 	stw	fp,0(r22)
    1948:	b1000115 	stw	r4,4(r22)
    194c:	d8c02015 	stw	r3,128(sp)
    1950:	dc401f15 	stw	r17,124(sp)
    1954:	008001c4 	movi	r2,7
    1958:	14400e16 	blt	r2,r17,1994 <___vfprintf_internal_r+0x11e4>
    195c:	b2000204 	addi	r8,r22,8
    1960:	003e1806 	br	11c4 <__alt_data_end+0xfffb7de4>
    1964:	01000074 	movhi	r4,1
    1968:	21019384 	addi	r4,r4,1614
    196c:	d9002c15 	stw	r4,176(sp)
    1970:	d9002c17 	ldw	r4,176(sp)
    1974:	1c07883a 	add	r3,r3,r16
    1978:	44000115 	stw	r16,4(r8)
    197c:	41000015 	stw	r4,0(r8)
    1980:	10800044 	addi	r2,r2,1
    1984:	d8c02015 	stw	r3,128(sp)
    1988:	d8801f15 	stw	r2,124(sp)
    198c:	010001c4 	movi	r4,7
    1990:	20be0b0e 	bge	r4,r2,11c0 <__alt_data_end+0xfffb7de0>
    1994:	d9002d17 	ldw	r4,180(sp)
    1998:	d9801e04 	addi	r6,sp,120
    199c:	b80b883a 	mov	r5,r23
    19a0:	00080f80 	call	80f8 <__sprint_r>
    19a4:	103c861e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    19a8:	d8c02017 	ldw	r3,128(sp)
    19ac:	da000404 	addi	r8,sp,16
    19b0:	003e0406 	br	11c4 <__alt_data_end+0xfffb7de4>
    19b4:	d9002d17 	ldw	r4,180(sp)
    19b8:	d9801e04 	addi	r6,sp,120
    19bc:	b80b883a 	mov	r5,r23
    19c0:	00080f80 	call	80f8 <__sprint_r>
    19c4:	103e3b26 	beq	r2,zero,12b4 <__alt_data_end+0xfffb7ed4>
    19c8:	003c7d06 	br	bc0 <__alt_data_end+0xfffb77e0>
    19cc:	d9002d17 	ldw	r4,180(sp)
    19d0:	d9801e04 	addi	r6,sp,120
    19d4:	b80b883a 	mov	r5,r23
    19d8:	00080f80 	call	80f8 <__sprint_r>
    19dc:	103c781e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    19e0:	d8c02017 	ldw	r3,128(sp)
    19e4:	da000404 	addi	r8,sp,16
    19e8:	003de906 	br	1190 <__alt_data_end+0xfffb7db0>
    19ec:	d9002d17 	ldw	r4,180(sp)
    19f0:	d9801e04 	addi	r6,sp,120
    19f4:	b80b883a 	mov	r5,r23
    19f8:	00080f80 	call	80f8 <__sprint_r>
    19fc:	103c701e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    1a00:	d8c02017 	ldw	r3,128(sp)
    1a04:	da000404 	addi	r8,sp,16
    1a08:	003d9b06 	br	1078 <__alt_data_end+0xfffb7c98>
    1a0c:	d9002d17 	ldw	r4,180(sp)
    1a10:	d9801e04 	addi	r6,sp,120
    1a14:	b80b883a 	mov	r5,r23
    1a18:	00080f80 	call	80f8 <__sprint_r>
    1a1c:	103c681e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    1a20:	d8c02017 	ldw	r3,128(sp)
    1a24:	da000404 	addi	r8,sp,16
    1a28:	003da106 	br	10b0 <__alt_data_end+0xfffb7cd0>
    1a2c:	d9402a17 	ldw	r5,168(sp)
    1a30:	d8002785 	stb	zero,158(sp)
    1a34:	283f0616 	blt	r5,zero,1650 <__alt_data_end+0xfffb8270>
    1a38:	00ffdfc4 	movi	r3,-129
    1a3c:	9d84b03a 	or	r2,r19,r22
    1a40:	90e4703a 	and	r18,r18,r3
    1a44:	103c3b26 	beq	r2,zero,b34 <__alt_data_end+0xfffb7754>
    1a48:	0039883a 	mov	fp,zero
    1a4c:	003e5806 	br	13b0 <__alt_data_end+0xfffb7fd0>
    1a50:	9080040c 	andi	r2,r18,16
    1a54:	1001b326 	beq	r2,zero,2124 <___vfprintf_internal_r+0x1974>
    1a58:	d8c02e17 	ldw	r3,184(sp)
    1a5c:	d9002a17 	ldw	r4,168(sp)
    1a60:	d8002785 	stb	zero,158(sp)
    1a64:	18800104 	addi	r2,r3,4
    1a68:	1cc00017 	ldw	r19,0(r3)
    1a6c:	002d883a 	mov	r22,zero
    1a70:	2001b516 	blt	r4,zero,2148 <___vfprintf_internal_r+0x1998>
    1a74:	00ffdfc4 	movi	r3,-129
    1a78:	d8802e15 	stw	r2,184(sp)
    1a7c:	90e4703a 	and	r18,r18,r3
    1a80:	983d0526 	beq	r19,zero,e98 <__alt_data_end+0xfffb7ab8>
    1a84:	0039883a 	mov	fp,zero
    1a88:	003d0806 	br	eac <__alt_data_end+0xfffb7acc>
    1a8c:	dc402617 	ldw	r17,152(sp)
    1a90:	0441d30e 	bge	zero,r17,21e0 <___vfprintf_internal_r+0x1a30>
    1a94:	dc403217 	ldw	r17,200(sp)
    1a98:	d8803317 	ldw	r2,204(sp)
    1a9c:	1440010e 	bge	r2,r17,1aa4 <___vfprintf_internal_r+0x12f4>
    1aa0:	1023883a 	mov	r17,r2
    1aa4:	04400a0e 	bge	zero,r17,1ad0 <___vfprintf_internal_r+0x1320>
    1aa8:	d8801f17 	ldw	r2,124(sp)
    1aac:	1c47883a 	add	r3,r3,r17
    1ab0:	44000015 	stw	r16,0(r8)
    1ab4:	10800044 	addi	r2,r2,1
    1ab8:	44400115 	stw	r17,4(r8)
    1abc:	d8c02015 	stw	r3,128(sp)
    1ac0:	d8801f15 	stw	r2,124(sp)
    1ac4:	010001c4 	movi	r4,7
    1ac8:	20826516 	blt	r4,r2,2460 <___vfprintf_internal_r+0x1cb0>
    1acc:	42000204 	addi	r8,r8,8
    1ad0:	88026116 	blt	r17,zero,2458 <___vfprintf_internal_r+0x1ca8>
    1ad4:	d9003217 	ldw	r4,200(sp)
    1ad8:	2463c83a 	sub	r17,r4,r17
    1adc:	04407b0e 	bge	zero,r17,1ccc <___vfprintf_internal_r+0x151c>
    1ae0:	05800404 	movi	r22,16
    1ae4:	d8801f17 	ldw	r2,124(sp)
    1ae8:	b4419d0e 	bge	r22,r17,2160 <___vfprintf_internal_r+0x19b0>
    1aec:	01000074 	movhi	r4,1
    1af0:	21019384 	addi	r4,r4,1614
    1af4:	d9002c15 	stw	r4,176(sp)
    1af8:	070001c4 	movi	fp,7
    1afc:	dcc02d17 	ldw	r19,180(sp)
    1b00:	00000306 	br	1b10 <___vfprintf_internal_r+0x1360>
    1b04:	42000204 	addi	r8,r8,8
    1b08:	8c7ffc04 	addi	r17,r17,-16
    1b0c:	b441970e 	bge	r22,r17,216c <___vfprintf_internal_r+0x19bc>
    1b10:	18c00404 	addi	r3,r3,16
    1b14:	10800044 	addi	r2,r2,1
    1b18:	45000015 	stw	r20,0(r8)
    1b1c:	45800115 	stw	r22,4(r8)
    1b20:	d8c02015 	stw	r3,128(sp)
    1b24:	d8801f15 	stw	r2,124(sp)
    1b28:	e0bff60e 	bge	fp,r2,1b04 <__alt_data_end+0xfffb8724>
    1b2c:	d9801e04 	addi	r6,sp,120
    1b30:	b80b883a 	mov	r5,r23
    1b34:	9809883a 	mov	r4,r19
    1b38:	00080f80 	call	80f8 <__sprint_r>
    1b3c:	103c201e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    1b40:	d8c02017 	ldw	r3,128(sp)
    1b44:	d8801f17 	ldw	r2,124(sp)
    1b48:	da000404 	addi	r8,sp,16
    1b4c:	003fee06 	br	1b08 <__alt_data_end+0xfffb8728>
    1b50:	d9002d17 	ldw	r4,180(sp)
    1b54:	d9801e04 	addi	r6,sp,120
    1b58:	b80b883a 	mov	r5,r23
    1b5c:	00080f80 	call	80f8 <__sprint_r>
    1b60:	103c171e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    1b64:	d8c02017 	ldw	r3,128(sp)
    1b68:	df002787 	ldb	fp,158(sp)
    1b6c:	da000404 	addi	r8,sp,16
    1b70:	003d3406 	br	1044 <__alt_data_end+0xfffb7c64>
    1b74:	9080040c 	andi	r2,r18,16
    1b78:	10016126 	beq	r2,zero,2100 <___vfprintf_internal_r+0x1950>
    1b7c:	d9402e17 	ldw	r5,184(sp)
    1b80:	2cc00017 	ldw	r19,0(r5)
    1b84:	29400104 	addi	r5,r5,4
    1b88:	d9402e15 	stw	r5,184(sp)
    1b8c:	982dd7fa 	srai	r22,r19,31
    1b90:	b005883a 	mov	r2,r22
    1b94:	003c5a06 	br	d00 <__alt_data_end+0xfffb7920>
    1b98:	9080040c 	andi	r2,r18,16
    1b9c:	10003526 	beq	r2,zero,1c74 <___vfprintf_internal_r+0x14c4>
    1ba0:	d8c02e17 	ldw	r3,184(sp)
    1ba4:	d9002a17 	ldw	r4,168(sp)
    1ba8:	d8002785 	stb	zero,158(sp)
    1bac:	18800104 	addi	r2,r3,4
    1bb0:	1cc00017 	ldw	r19,0(r3)
    1bb4:	002d883a 	mov	r22,zero
    1bb8:	20003716 	blt	r4,zero,1c98 <___vfprintf_internal_r+0x14e8>
    1bbc:	00ffdfc4 	movi	r3,-129
    1bc0:	d8802e15 	stw	r2,184(sp)
    1bc4:	90e4703a 	and	r18,r18,r3
    1bc8:	0039883a 	mov	fp,zero
    1bcc:	983dd426 	beq	r19,zero,1320 <__alt_data_end+0xfffb7f40>
    1bd0:	00800244 	movi	r2,9
    1bd4:	14fc5336 	bltu	r2,r19,d24 <__alt_data_end+0xfffb7944>
    1bd8:	d8c02817 	ldw	r3,160(sp)
    1bdc:	dc001dc4 	addi	r16,sp,119
    1be0:	9cc00c04 	addi	r19,r19,48
    1be4:	1c07c83a 	sub	r3,r3,r16
    1be8:	dcc01dc5 	stb	r19,119(sp)
    1bec:	d8c02b15 	stw	r3,172(sp)
    1bf0:	003cc606 	br	f0c <__alt_data_end+0xfffb7b2c>
    1bf4:	d8803317 	ldw	r2,204(sp)
    1bf8:	143fffc4 	addi	r16,r2,-1
    1bfc:	043f4d0e 	bge	zero,r16,1934 <__alt_data_end+0xfffb8554>
    1c00:	07000404 	movi	fp,16
    1c04:	e400810e 	bge	fp,r16,1e0c <___vfprintf_internal_r+0x165c>
    1c08:	01400074 	movhi	r5,1
    1c0c:	29419384 	addi	r5,r5,1614
    1c10:	d9402c15 	stw	r5,176(sp)
    1c14:	01c001c4 	movi	r7,7
    1c18:	dcc02d17 	ldw	r19,180(sp)
    1c1c:	00000306 	br	1c2c <___vfprintf_internal_r+0x147c>
    1c20:	b5800204 	addi	r22,r22,8
    1c24:	843ffc04 	addi	r16,r16,-16
    1c28:	e4007b0e 	bge	fp,r16,1e18 <___vfprintf_internal_r+0x1668>
    1c2c:	18c00404 	addi	r3,r3,16
    1c30:	8c400044 	addi	r17,r17,1
    1c34:	b5000015 	stw	r20,0(r22)
    1c38:	b7000115 	stw	fp,4(r22)
    1c3c:	d8c02015 	stw	r3,128(sp)
    1c40:	dc401f15 	stw	r17,124(sp)
    1c44:	3c7ff60e 	bge	r7,r17,1c20 <__alt_data_end+0xfffb8840>
    1c48:	d9801e04 	addi	r6,sp,120
    1c4c:	b80b883a 	mov	r5,r23
    1c50:	9809883a 	mov	r4,r19
    1c54:	d9c03c15 	stw	r7,240(sp)
    1c58:	00080f80 	call	80f8 <__sprint_r>
    1c5c:	d9c03c17 	ldw	r7,240(sp)
    1c60:	103bd71e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    1c64:	d8c02017 	ldw	r3,128(sp)
    1c68:	dc401f17 	ldw	r17,124(sp)
    1c6c:	dd800404 	addi	r22,sp,16
    1c70:	003fec06 	br	1c24 <__alt_data_end+0xfffb8844>
    1c74:	9080100c 	andi	r2,r18,64
    1c78:	d8002785 	stb	zero,158(sp)
    1c7c:	10010e26 	beq	r2,zero,20b8 <___vfprintf_internal_r+0x1908>
    1c80:	d9402e17 	ldw	r5,184(sp)
    1c84:	d8c02a17 	ldw	r3,168(sp)
    1c88:	002d883a 	mov	r22,zero
    1c8c:	28800104 	addi	r2,r5,4
    1c90:	2cc0000b 	ldhu	r19,0(r5)
    1c94:	183fc90e 	bge	r3,zero,1bbc <__alt_data_end+0xfffb87dc>
    1c98:	d8802e15 	stw	r2,184(sp)
    1c9c:	0039883a 	mov	fp,zero
    1ca0:	9d84b03a 	or	r2,r19,r22
    1ca4:	103c1e1e 	bne	r2,zero,d20 <__alt_data_end+0xfffb7940>
    1ca8:	00800044 	movi	r2,1
    1cac:	003e6c06 	br	1660 <__alt_data_end+0xfffb8280>
    1cb0:	d9002d17 	ldw	r4,180(sp)
    1cb4:	d9801e04 	addi	r6,sp,120
    1cb8:	b80b883a 	mov	r5,r23
    1cbc:	00080f80 	call	80f8 <__sprint_r>
    1cc0:	103bbf1e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    1cc4:	d8c02017 	ldw	r3,128(sp)
    1cc8:	da000404 	addi	r8,sp,16
    1ccc:	d9003217 	ldw	r4,200(sp)
    1cd0:	d8802617 	ldw	r2,152(sp)
    1cd4:	d9403317 	ldw	r5,204(sp)
    1cd8:	8123883a 	add	r17,r16,r4
    1cdc:	11400216 	blt	r2,r5,1ce8 <___vfprintf_internal_r+0x1538>
    1ce0:	9100004c 	andi	r4,r18,1
    1ce4:	20000d26 	beq	r4,zero,1d1c <___vfprintf_internal_r+0x156c>
    1ce8:	d9003717 	ldw	r4,220(sp)
    1cec:	d9403417 	ldw	r5,208(sp)
    1cf0:	1907883a 	add	r3,r3,r4
    1cf4:	d9001f17 	ldw	r4,124(sp)
    1cf8:	41400015 	stw	r5,0(r8)
    1cfc:	d9403717 	ldw	r5,220(sp)
    1d00:	21000044 	addi	r4,r4,1
    1d04:	d8c02015 	stw	r3,128(sp)
    1d08:	41400115 	stw	r5,4(r8)
    1d0c:	d9001f15 	stw	r4,124(sp)
    1d10:	014001c4 	movi	r5,7
    1d14:	2901e816 	blt	r5,r4,24b8 <___vfprintf_internal_r+0x1d08>
    1d18:	42000204 	addi	r8,r8,8
    1d1c:	d9003317 	ldw	r4,204(sp)
    1d20:	8121883a 	add	r16,r16,r4
    1d24:	2085c83a 	sub	r2,r4,r2
    1d28:	8461c83a 	sub	r16,r16,r17
    1d2c:	1400010e 	bge	r2,r16,1d34 <___vfprintf_internal_r+0x1584>
    1d30:	1021883a 	mov	r16,r2
    1d34:	04000a0e 	bge	zero,r16,1d60 <___vfprintf_internal_r+0x15b0>
    1d38:	d9001f17 	ldw	r4,124(sp)
    1d3c:	1c07883a 	add	r3,r3,r16
    1d40:	44400015 	stw	r17,0(r8)
    1d44:	21000044 	addi	r4,r4,1
    1d48:	44000115 	stw	r16,4(r8)
    1d4c:	d8c02015 	stw	r3,128(sp)
    1d50:	d9001f15 	stw	r4,124(sp)
    1d54:	014001c4 	movi	r5,7
    1d58:	2901fb16 	blt	r5,r4,2548 <___vfprintf_internal_r+0x1d98>
    1d5c:	42000204 	addi	r8,r8,8
    1d60:	8001f716 	blt	r16,zero,2540 <___vfprintf_internal_r+0x1d90>
    1d64:	1421c83a 	sub	r16,r2,r16
    1d68:	043d160e 	bge	zero,r16,11c4 <__alt_data_end+0xfffb7de4>
    1d6c:	04400404 	movi	r17,16
    1d70:	d8801f17 	ldw	r2,124(sp)
    1d74:	8c3efb0e 	bge	r17,r16,1964 <__alt_data_end+0xfffb8584>
    1d78:	01400074 	movhi	r5,1
    1d7c:	29419384 	addi	r5,r5,1614
    1d80:	d9402c15 	stw	r5,176(sp)
    1d84:	058001c4 	movi	r22,7
    1d88:	dcc02d17 	ldw	r19,180(sp)
    1d8c:	00000306 	br	1d9c <___vfprintf_internal_r+0x15ec>
    1d90:	42000204 	addi	r8,r8,8
    1d94:	843ffc04 	addi	r16,r16,-16
    1d98:	8c3ef50e 	bge	r17,r16,1970 <__alt_data_end+0xfffb8590>
    1d9c:	18c00404 	addi	r3,r3,16
    1da0:	10800044 	addi	r2,r2,1
    1da4:	45000015 	stw	r20,0(r8)
    1da8:	44400115 	stw	r17,4(r8)
    1dac:	d8c02015 	stw	r3,128(sp)
    1db0:	d8801f15 	stw	r2,124(sp)
    1db4:	b0bff60e 	bge	r22,r2,1d90 <__alt_data_end+0xfffb89b0>
    1db8:	d9801e04 	addi	r6,sp,120
    1dbc:	b80b883a 	mov	r5,r23
    1dc0:	9809883a 	mov	r4,r19
    1dc4:	00080f80 	call	80f8 <__sprint_r>
    1dc8:	103b7d1e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    1dcc:	d8c02017 	ldw	r3,128(sp)
    1dd0:	d8801f17 	ldw	r2,124(sp)
    1dd4:	da000404 	addi	r8,sp,16
    1dd8:	003fee06 	br	1d94 <__alt_data_end+0xfffb89b4>
    1ddc:	9088703a 	and	r4,r18,r2
    1de0:	203eab1e 	bne	r4,zero,1890 <__alt_data_end+0xfffb84b0>
    1de4:	dc401f17 	ldw	r17,124(sp)
    1de8:	40800115 	stw	r2,4(r8)
    1dec:	44000015 	stw	r16,0(r8)
    1df0:	8c400044 	addi	r17,r17,1
    1df4:	d8c02015 	stw	r3,128(sp)
    1df8:	dc401f15 	stw	r17,124(sp)
    1dfc:	008001c4 	movi	r2,7
    1e00:	14400e16 	blt	r2,r17,1e3c <___vfprintf_internal_r+0x168c>
    1e04:	45800204 	addi	r22,r8,8
    1e08:	003eca06 	br	1934 <__alt_data_end+0xfffb8554>
    1e0c:	01000074 	movhi	r4,1
    1e10:	21019384 	addi	r4,r4,1614
    1e14:	d9002c15 	stw	r4,176(sp)
    1e18:	d8802c17 	ldw	r2,176(sp)
    1e1c:	1c07883a 	add	r3,r3,r16
    1e20:	8c400044 	addi	r17,r17,1
    1e24:	b0800015 	stw	r2,0(r22)
    1e28:	b4000115 	stw	r16,4(r22)
    1e2c:	d8c02015 	stw	r3,128(sp)
    1e30:	dc401f15 	stw	r17,124(sp)
    1e34:	008001c4 	movi	r2,7
    1e38:	147ebd0e 	bge	r2,r17,1930 <__alt_data_end+0xfffb8550>
    1e3c:	d9002d17 	ldw	r4,180(sp)
    1e40:	d9801e04 	addi	r6,sp,120
    1e44:	b80b883a 	mov	r5,r23
    1e48:	00080f80 	call	80f8 <__sprint_r>
    1e4c:	103b5c1e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    1e50:	d8c02017 	ldw	r3,128(sp)
    1e54:	dc401f17 	ldw	r17,124(sp)
    1e58:	dd800404 	addi	r22,sp,16
    1e5c:	003eb506 	br	1934 <__alt_data_end+0xfffb8554>
    1e60:	d9002d17 	ldw	r4,180(sp)
    1e64:	d9801e04 	addi	r6,sp,120
    1e68:	b80b883a 	mov	r5,r23
    1e6c:	00080f80 	call	80f8 <__sprint_r>
    1e70:	103b531e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    1e74:	d8c02017 	ldw	r3,128(sp)
    1e78:	dc401f17 	ldw	r17,124(sp)
    1e7c:	da000404 	addi	r8,sp,16
    1e80:	003e8d06 	br	18b8 <__alt_data_end+0xfffb84d8>
    1e84:	d9002d17 	ldw	r4,180(sp)
    1e88:	d9801e04 	addi	r6,sp,120
    1e8c:	b80b883a 	mov	r5,r23
    1e90:	00080f80 	call	80f8 <__sprint_r>
    1e94:	103b4a1e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    1e98:	d8c02017 	ldw	r3,128(sp)
    1e9c:	dc401f17 	ldw	r17,124(sp)
    1ea0:	dd800404 	addi	r22,sp,16
    1ea4:	003e8f06 	br	18e4 <__alt_data_end+0xfffb8504>
    1ea8:	0027883a 	mov	r19,zero
    1eac:	003f4a06 	br	1bd8 <__alt_data_end+0xfffb87f8>
    1eb0:	d9002d17 	ldw	r4,180(sp)
    1eb4:	d9801e04 	addi	r6,sp,120
    1eb8:	b80b883a 	mov	r5,r23
    1ebc:	00080f80 	call	80f8 <__sprint_r>
    1ec0:	103b3f1e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    1ec4:	d8c02017 	ldw	r3,128(sp)
    1ec8:	da000404 	addi	r8,sp,16
    1ecc:	003c7b06 	br	10bc <__alt_data_end+0xfffb7cdc>
    1ed0:	d9402a17 	ldw	r5,168(sp)
    1ed4:	04e7c83a 	sub	r19,zero,r19
    1ed8:	07000b44 	movi	fp,45
    1edc:	9804c03a 	cmpne	r2,r19,zero
    1ee0:	05adc83a 	sub	r22,zero,r22
    1ee4:	df002785 	stb	fp,158(sp)
    1ee8:	b0adc83a 	sub	r22,r22,r2
    1eec:	28017b16 	blt	r5,zero,24dc <___vfprintf_internal_r+0x1d2c>
    1ef0:	00bfdfc4 	movi	r2,-129
    1ef4:	90a4703a 	and	r18,r18,r2
    1ef8:	003b8906 	br	d20 <__alt_data_end+0xfffb7940>
    1efc:	d9003617 	ldw	r4,216(sp)
    1f00:	d9403817 	ldw	r5,224(sp)
    1f04:	da003d15 	stw	r8,244(sp)
    1f08:	0007d1c0 	call	7d1c <__fpclassifyd>
    1f0c:	da003d17 	ldw	r8,244(sp)
    1f10:	1000f026 	beq	r2,zero,22d4 <___vfprintf_internal_r+0x1b24>
    1f14:	d9002a17 	ldw	r4,168(sp)
    1f18:	05bff7c4 	movi	r22,-33
    1f1c:	00bfffc4 	movi	r2,-1
    1f20:	8dac703a 	and	r22,r17,r22
    1f24:	20820026 	beq	r4,r2,2728 <___vfprintf_internal_r+0x1f78>
    1f28:	008011c4 	movi	r2,71
    1f2c:	b081f726 	beq	r22,r2,270c <___vfprintf_internal_r+0x1f5c>
    1f30:	d9003817 	ldw	r4,224(sp)
    1f34:	90c04014 	ori	r3,r18,256
    1f38:	d8c02c15 	stw	r3,176(sp)
    1f3c:	20021516 	blt	r4,zero,2794 <___vfprintf_internal_r+0x1fe4>
    1f40:	dcc03817 	ldw	r19,224(sp)
    1f44:	d8002905 	stb	zero,164(sp)
    1f48:	00801984 	movi	r2,102
    1f4c:	8881f926 	beq	r17,r2,2734 <___vfprintf_internal_r+0x1f84>
    1f50:	00801184 	movi	r2,70
    1f54:	88821c26 	beq	r17,r2,27c8 <___vfprintf_internal_r+0x2018>
    1f58:	00801144 	movi	r2,69
    1f5c:	b081ef26 	beq	r22,r2,271c <___vfprintf_internal_r+0x1f6c>
    1f60:	d8c02a17 	ldw	r3,168(sp)
    1f64:	d8802104 	addi	r2,sp,132
    1f68:	d8800315 	stw	r2,12(sp)
    1f6c:	d9403617 	ldw	r5,216(sp)
    1f70:	d8802504 	addi	r2,sp,148
    1f74:	d9002d17 	ldw	r4,180(sp)
    1f78:	d8800215 	stw	r2,8(sp)
    1f7c:	d8802604 	addi	r2,sp,152
    1f80:	d8c00015 	stw	r3,0(sp)
    1f84:	d8800115 	stw	r2,4(sp)
    1f88:	01c00084 	movi	r7,2
    1f8c:	980d883a 	mov	r6,r19
    1f90:	d8c03c15 	stw	r3,240(sp)
    1f94:	da003d15 	stw	r8,244(sp)
    1f98:	0002ee00 	call	2ee0 <_dtoa_r>
    1f9c:	1021883a 	mov	r16,r2
    1fa0:	008019c4 	movi	r2,103
    1fa4:	d8c03c17 	ldw	r3,240(sp)
    1fa8:	da003d17 	ldw	r8,244(sp)
    1fac:	88817126 	beq	r17,r2,2574 <___vfprintf_internal_r+0x1dc4>
    1fb0:	008011c4 	movi	r2,71
    1fb4:	88829126 	beq	r17,r2,29fc <___vfprintf_internal_r+0x224c>
    1fb8:	80f9883a 	add	fp,r16,r3
    1fbc:	d9003617 	ldw	r4,216(sp)
    1fc0:	000d883a 	mov	r6,zero
    1fc4:	000f883a 	mov	r7,zero
    1fc8:	980b883a 	mov	r5,r19
    1fcc:	da003d15 	stw	r8,244(sp)
    1fd0:	000c0580 	call	c058 <__eqdf2>
    1fd4:	da003d17 	ldw	r8,244(sp)
    1fd8:	10018d26 	beq	r2,zero,2610 <___vfprintf_internal_r+0x1e60>
    1fdc:	d8802117 	ldw	r2,132(sp)
    1fe0:	1700062e 	bgeu	r2,fp,1ffc <___vfprintf_internal_r+0x184c>
    1fe4:	01000c04 	movi	r4,48
    1fe8:	10c00044 	addi	r3,r2,1
    1fec:	d8c02115 	stw	r3,132(sp)
    1ff0:	11000005 	stb	r4,0(r2)
    1ff4:	d8802117 	ldw	r2,132(sp)
    1ff8:	173ffb36 	bltu	r2,fp,1fe8 <__alt_data_end+0xfffb8c08>
    1ffc:	1405c83a 	sub	r2,r2,r16
    2000:	d8803315 	stw	r2,204(sp)
    2004:	008011c4 	movi	r2,71
    2008:	b0817626 	beq	r22,r2,25e4 <___vfprintf_internal_r+0x1e34>
    200c:	00801944 	movi	r2,101
    2010:	1442800e 	bge	r2,r17,2a14 <___vfprintf_internal_r+0x2264>
    2014:	d8c02617 	ldw	r3,152(sp)
    2018:	00801984 	movi	r2,102
    201c:	d8c03215 	stw	r3,200(sp)
    2020:	8881fe26 	beq	r17,r2,281c <___vfprintf_internal_r+0x206c>
    2024:	d8c03217 	ldw	r3,200(sp)
    2028:	d9003317 	ldw	r4,204(sp)
    202c:	1901dd16 	blt	r3,r4,27a4 <___vfprintf_internal_r+0x1ff4>
    2030:	9480004c 	andi	r18,r18,1
    2034:	90022b1e 	bne	r18,zero,28e4 <___vfprintf_internal_r+0x2134>
    2038:	1805883a 	mov	r2,r3
    203c:	18028316 	blt	r3,zero,2a4c <___vfprintf_internal_r+0x229c>
    2040:	d8c03217 	ldw	r3,200(sp)
    2044:	044019c4 	movi	r17,103
    2048:	d8c02b15 	stw	r3,172(sp)
    204c:	df002907 	ldb	fp,164(sp)
    2050:	e001531e 	bne	fp,zero,25a0 <___vfprintf_internal_r+0x1df0>
    2054:	df002783 	ldbu	fp,158(sp)
    2058:	d8802915 	stw	r2,164(sp)
    205c:	dc802c17 	ldw	r18,176(sp)
    2060:	d8002a15 	stw	zero,168(sp)
    2064:	003baf06 	br	f24 <__alt_data_end+0xfffb7b44>
    2068:	d8c02e17 	ldw	r3,184(sp)
    206c:	d9002e17 	ldw	r4,184(sp)
    2070:	d9402e17 	ldw	r5,184(sp)
    2074:	18c00017 	ldw	r3,0(r3)
    2078:	21000117 	ldw	r4,4(r4)
    207c:	29400204 	addi	r5,r5,8
    2080:	d8c03615 	stw	r3,216(sp)
    2084:	d9003815 	stw	r4,224(sp)
    2088:	d9402e15 	stw	r5,184(sp)
    208c:	003b5006 	br	dd0 <__alt_data_end+0xfffb79f0>
    2090:	ac400007 	ldb	r17,0(r21)
    2094:	003a2806 	br	938 <__alt_data_end+0xfffb7558>
    2098:	9080100c 	andi	r2,r18,64
    209c:	1000a826 	beq	r2,zero,2340 <___vfprintf_internal_r+0x1b90>
    20a0:	d8c02e17 	ldw	r3,184(sp)
    20a4:	002d883a 	mov	r22,zero
    20a8:	1cc0000b 	ldhu	r19,0(r3)
    20ac:	18c00104 	addi	r3,r3,4
    20b0:	d8c02e15 	stw	r3,184(sp)
    20b4:	003caf06 	br	1374 <__alt_data_end+0xfffb7f94>
    20b8:	d9002e17 	ldw	r4,184(sp)
    20bc:	d9402a17 	ldw	r5,168(sp)
    20c0:	002d883a 	mov	r22,zero
    20c4:	20800104 	addi	r2,r4,4
    20c8:	24c00017 	ldw	r19,0(r4)
    20cc:	283ebb0e 	bge	r5,zero,1bbc <__alt_data_end+0xfffb87dc>
    20d0:	003ef106 	br	1c98 <__alt_data_end+0xfffb88b8>
    20d4:	9080040c 	andi	r2,r18,16
    20d8:	1000921e 	bne	r2,zero,2324 <___vfprintf_internal_r+0x1b74>
    20dc:	9480100c 	andi	r18,r18,64
    20e0:	90013926 	beq	r18,zero,25c8 <___vfprintf_internal_r+0x1e18>
    20e4:	d9402e17 	ldw	r5,184(sp)
    20e8:	d8c02f17 	ldw	r3,188(sp)
    20ec:	28800017 	ldw	r2,0(r5)
    20f0:	29400104 	addi	r5,r5,4
    20f4:	d9402e15 	stw	r5,184(sp)
    20f8:	10c0000d 	sth	r3,0(r2)
    20fc:	0039e406 	br	890 <__alt_data_end+0xfffb74b0>
    2100:	9080100c 	andi	r2,r18,64
    2104:	10008026 	beq	r2,zero,2308 <___vfprintf_internal_r+0x1b58>
    2108:	d8802e17 	ldw	r2,184(sp)
    210c:	14c0000f 	ldh	r19,0(r2)
    2110:	10800104 	addi	r2,r2,4
    2114:	d8802e15 	stw	r2,184(sp)
    2118:	982dd7fa 	srai	r22,r19,31
    211c:	b005883a 	mov	r2,r22
    2120:	003af706 	br	d00 <__alt_data_end+0xfffb7920>
    2124:	9080100c 	andi	r2,r18,64
    2128:	d8002785 	stb	zero,158(sp)
    212c:	10008a1e 	bne	r2,zero,2358 <___vfprintf_internal_r+0x1ba8>
    2130:	d9002e17 	ldw	r4,184(sp)
    2134:	d9402a17 	ldw	r5,168(sp)
    2138:	002d883a 	mov	r22,zero
    213c:	20800104 	addi	r2,r4,4
    2140:	24c00017 	ldw	r19,0(r4)
    2144:	283e4b0e 	bge	r5,zero,1a74 <__alt_data_end+0xfffb8694>
    2148:	9d86b03a 	or	r3,r19,r22
    214c:	d8802e15 	stw	r2,184(sp)
    2150:	183e4c1e 	bne	r3,zero,1a84 <__alt_data_end+0xfffb86a4>
    2154:	0039883a 	mov	fp,zero
    2158:	0005883a 	mov	r2,zero
    215c:	003d4006 	br	1660 <__alt_data_end+0xfffb8280>
    2160:	01400074 	movhi	r5,1
    2164:	29419384 	addi	r5,r5,1614
    2168:	d9402c15 	stw	r5,176(sp)
    216c:	d9402c17 	ldw	r5,176(sp)
    2170:	1c47883a 	add	r3,r3,r17
    2174:	10800044 	addi	r2,r2,1
    2178:	41400015 	stw	r5,0(r8)
    217c:	44400115 	stw	r17,4(r8)
    2180:	d8c02015 	stw	r3,128(sp)
    2184:	d8801f15 	stw	r2,124(sp)
    2188:	010001c4 	movi	r4,7
    218c:	20bec816 	blt	r4,r2,1cb0 <__alt_data_end+0xfffb88d0>
    2190:	42000204 	addi	r8,r8,8
    2194:	003ecd06 	br	1ccc <__alt_data_end+0xfffb88ec>
    2198:	d9002a17 	ldw	r4,168(sp)
    219c:	d8002785 	stb	zero,158(sp)
    21a0:	203d2d16 	blt	r4,zero,1658 <__alt_data_end+0xfffb8278>
    21a4:	00bfdfc4 	movi	r2,-129
    21a8:	90a4703a 	and	r18,r18,r2
    21ac:	003a6106 	br	b34 <__alt_data_end+0xfffb7754>
    21b0:	01000074 	movhi	r4,1
    21b4:	21019384 	addi	r4,r4,1614
    21b8:	d9002c15 	stw	r4,176(sp)
    21bc:	003bea06 	br	1168 <__alt_data_end+0xfffb7d88>
    21c0:	d9002d17 	ldw	r4,180(sp)
    21c4:	d9801e04 	addi	r6,sp,120
    21c8:	b80b883a 	mov	r5,r23
    21cc:	00080f80 	call	80f8 <__sprint_r>
    21d0:	103a7b1e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    21d4:	d8c02017 	ldw	r3,128(sp)
    21d8:	da000404 	addi	r8,sp,16
    21dc:	003d4106 	br	16e4 <__alt_data_end+0xfffb8304>
    21e0:	d8801f17 	ldw	r2,124(sp)
    21e4:	01400074 	movhi	r5,1
    21e8:	01000044 	movi	r4,1
    21ec:	18c00044 	addi	r3,r3,1
    21f0:	10800044 	addi	r2,r2,1
    21f4:	29419304 	addi	r5,r5,1612
    21f8:	41000115 	stw	r4,4(r8)
    21fc:	41400015 	stw	r5,0(r8)
    2200:	d8c02015 	stw	r3,128(sp)
    2204:	d8801f15 	stw	r2,124(sp)
    2208:	010001c4 	movi	r4,7
    220c:	20805c16 	blt	r4,r2,2380 <___vfprintf_internal_r+0x1bd0>
    2210:	42000204 	addi	r8,r8,8
    2214:	8800041e 	bne	r17,zero,2228 <___vfprintf_internal_r+0x1a78>
    2218:	d8803317 	ldw	r2,204(sp)
    221c:	1000021e 	bne	r2,zero,2228 <___vfprintf_internal_r+0x1a78>
    2220:	9080004c 	andi	r2,r18,1
    2224:	103be726 	beq	r2,zero,11c4 <__alt_data_end+0xfffb7de4>
    2228:	d9003717 	ldw	r4,220(sp)
    222c:	d8801f17 	ldw	r2,124(sp)
    2230:	d9403417 	ldw	r5,208(sp)
    2234:	20c7883a 	add	r3,r4,r3
    2238:	10800044 	addi	r2,r2,1
    223c:	41000115 	stw	r4,4(r8)
    2240:	41400015 	stw	r5,0(r8)
    2244:	d8c02015 	stw	r3,128(sp)
    2248:	d8801f15 	stw	r2,124(sp)
    224c:	010001c4 	movi	r4,7
    2250:	20812116 	blt	r4,r2,26d8 <___vfprintf_internal_r+0x1f28>
    2254:	42000204 	addi	r8,r8,8
    2258:	0463c83a 	sub	r17,zero,r17
    225c:	0440730e 	bge	zero,r17,242c <___vfprintf_internal_r+0x1c7c>
    2260:	05800404 	movi	r22,16
    2264:	b440860e 	bge	r22,r17,2480 <___vfprintf_internal_r+0x1cd0>
    2268:	01400074 	movhi	r5,1
    226c:	29419384 	addi	r5,r5,1614
    2270:	d9402c15 	stw	r5,176(sp)
    2274:	070001c4 	movi	fp,7
    2278:	dcc02d17 	ldw	r19,180(sp)
    227c:	00000306 	br	228c <___vfprintf_internal_r+0x1adc>
    2280:	42000204 	addi	r8,r8,8
    2284:	8c7ffc04 	addi	r17,r17,-16
    2288:	b440800e 	bge	r22,r17,248c <___vfprintf_internal_r+0x1cdc>
    228c:	18c00404 	addi	r3,r3,16
    2290:	10800044 	addi	r2,r2,1
    2294:	45000015 	stw	r20,0(r8)
    2298:	45800115 	stw	r22,4(r8)
    229c:	d8c02015 	stw	r3,128(sp)
    22a0:	d8801f15 	stw	r2,124(sp)
    22a4:	e0bff60e 	bge	fp,r2,2280 <__alt_data_end+0xfffb8ea0>
    22a8:	d9801e04 	addi	r6,sp,120
    22ac:	b80b883a 	mov	r5,r23
    22b0:	9809883a 	mov	r4,r19
    22b4:	00080f80 	call	80f8 <__sprint_r>
    22b8:	103a411e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    22bc:	d8c02017 	ldw	r3,128(sp)
    22c0:	d8801f17 	ldw	r2,124(sp)
    22c4:	da000404 	addi	r8,sp,16
    22c8:	003fee06 	br	2284 <__alt_data_end+0xfffb8ea4>
    22cc:	00bfffc4 	movi	r2,-1
    22d0:	003a3f06 	br	bd0 <__alt_data_end+0xfffb77f0>
    22d4:	008011c4 	movi	r2,71
    22d8:	1440b816 	blt	r2,r17,25bc <___vfprintf_internal_r+0x1e0c>
    22dc:	04000074 	movhi	r16,1
    22e0:	84018504 	addi	r16,r16,1556
    22e4:	00c000c4 	movi	r3,3
    22e8:	00bfdfc4 	movi	r2,-129
    22ec:	d8c02915 	stw	r3,164(sp)
    22f0:	90a4703a 	and	r18,r18,r2
    22f4:	df002783 	ldbu	fp,158(sp)
    22f8:	d8c02b15 	stw	r3,172(sp)
    22fc:	d8002a15 	stw	zero,168(sp)
    2300:	d8003215 	stw	zero,200(sp)
    2304:	003b0706 	br	f24 <__alt_data_end+0xfffb7b44>
    2308:	d8c02e17 	ldw	r3,184(sp)
    230c:	1cc00017 	ldw	r19,0(r3)
    2310:	18c00104 	addi	r3,r3,4
    2314:	d8c02e15 	stw	r3,184(sp)
    2318:	982dd7fa 	srai	r22,r19,31
    231c:	b005883a 	mov	r2,r22
    2320:	003a7706 	br	d00 <__alt_data_end+0xfffb7920>
    2324:	d8c02e17 	ldw	r3,184(sp)
    2328:	d9002f17 	ldw	r4,188(sp)
    232c:	18800017 	ldw	r2,0(r3)
    2330:	18c00104 	addi	r3,r3,4
    2334:	d8c02e15 	stw	r3,184(sp)
    2338:	11000015 	stw	r4,0(r2)
    233c:	00395406 	br	890 <__alt_data_end+0xfffb74b0>
    2340:	d9002e17 	ldw	r4,184(sp)
    2344:	002d883a 	mov	r22,zero
    2348:	24c00017 	ldw	r19,0(r4)
    234c:	21000104 	addi	r4,r4,4
    2350:	d9002e15 	stw	r4,184(sp)
    2354:	003c0706 	br	1374 <__alt_data_end+0xfffb7f94>
    2358:	d9402e17 	ldw	r5,184(sp)
    235c:	d8c02a17 	ldw	r3,168(sp)
    2360:	002d883a 	mov	r22,zero
    2364:	28800104 	addi	r2,r5,4
    2368:	2cc0000b 	ldhu	r19,0(r5)
    236c:	183dc10e 	bge	r3,zero,1a74 <__alt_data_end+0xfffb8694>
    2370:	003f7506 	br	2148 <__alt_data_end+0xfffb8d68>
    2374:	04000074 	movhi	r16,1
    2378:	84018304 	addi	r16,r16,1548
    237c:	003aa706 	br	e1c <__alt_data_end+0xfffb7a3c>
    2380:	d9002d17 	ldw	r4,180(sp)
    2384:	d9801e04 	addi	r6,sp,120
    2388:	b80b883a 	mov	r5,r23
    238c:	00080f80 	call	80f8 <__sprint_r>
    2390:	103a0b1e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    2394:	dc402617 	ldw	r17,152(sp)
    2398:	d8c02017 	ldw	r3,128(sp)
    239c:	da000404 	addi	r8,sp,16
    23a0:	003f9c06 	br	2214 <__alt_data_end+0xfffb8e34>
    23a4:	ac400043 	ldbu	r17,1(r21)
    23a8:	84000814 	ori	r16,r16,32
    23ac:	ad400044 	addi	r21,r21,1
    23b0:	8c403fcc 	andi	r17,r17,255
    23b4:	8c40201c 	xori	r17,r17,128
    23b8:	8c7fe004 	addi	r17,r17,-128
    23bc:	00395e06 	br	938 <__alt_data_end+0xfffb7558>
    23c0:	d8c02e15 	stw	r3,184(sp)
    23c4:	0039883a 	mov	fp,zero
    23c8:	003e3506 	br	1ca0 <__alt_data_end+0xfffb88c0>
    23cc:	d9002d17 	ldw	r4,180(sp)
    23d0:	d9801e04 	addi	r6,sp,120
    23d4:	b80b883a 	mov	r5,r23
    23d8:	00080f80 	call	80f8 <__sprint_r>
    23dc:	1039f81e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    23e0:	d8c02017 	ldw	r3,128(sp)
    23e4:	da000404 	addi	r8,sp,16
    23e8:	003cd006 	br	172c <__alt_data_end+0xfffb834c>
    23ec:	8009883a 	mov	r4,r16
    23f0:	df003d15 	stw	fp,244(sp)
    23f4:	00007180 	call	718 <strlen>
    23f8:	d8802b15 	stw	r2,172(sp)
    23fc:	da003d17 	ldw	r8,244(sp)
    2400:	103c200e 	bge	r2,zero,1484 <__alt_data_end+0xfffb80a4>
    2404:	0005883a 	mov	r2,zero
    2408:	003c1e06 	br	1484 <__alt_data_end+0xfffb80a4>
    240c:	d9002d17 	ldw	r4,180(sp)
    2410:	d9801e04 	addi	r6,sp,120
    2414:	b80b883a 	mov	r5,r23
    2418:	00080f80 	call	80f8 <__sprint_r>
    241c:	1039e81e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    2420:	d8c02017 	ldw	r3,128(sp)
    2424:	d8801f17 	ldw	r2,124(sp)
    2428:	da000404 	addi	r8,sp,16
    242c:	d9403317 	ldw	r5,204(sp)
    2430:	10800044 	addi	r2,r2,1
    2434:	44000015 	stw	r16,0(r8)
    2438:	28c7883a 	add	r3,r5,r3
    243c:	003b5b06 	br	11ac <__alt_data_end+0xfffb7dcc>
    2440:	01000074 	movhi	r4,1
    2444:	21019784 	addi	r4,r4,1630
    2448:	d9003515 	stw	r4,212(sp)
    244c:	003af206 	br	1018 <__alt_data_end+0xfffb7c38>
    2450:	013fffc4 	movi	r4,-1
    2454:	003a0806 	br	c78 <__alt_data_end+0xfffb7898>
    2458:	0023883a 	mov	r17,zero
    245c:	003d9d06 	br	1ad4 <__alt_data_end+0xfffb86f4>
    2460:	d9002d17 	ldw	r4,180(sp)
    2464:	d9801e04 	addi	r6,sp,120
    2468:	b80b883a 	mov	r5,r23
    246c:	00080f80 	call	80f8 <__sprint_r>
    2470:	1039d31e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    2474:	d8c02017 	ldw	r3,128(sp)
    2478:	da000404 	addi	r8,sp,16
    247c:	003d9406 	br	1ad0 <__alt_data_end+0xfffb86f0>
    2480:	01000074 	movhi	r4,1
    2484:	21019384 	addi	r4,r4,1614
    2488:	d9002c15 	stw	r4,176(sp)
    248c:	d9002c17 	ldw	r4,176(sp)
    2490:	1c47883a 	add	r3,r3,r17
    2494:	10800044 	addi	r2,r2,1
    2498:	41000015 	stw	r4,0(r8)
    249c:	44400115 	stw	r17,4(r8)
    24a0:	d8c02015 	stw	r3,128(sp)
    24a4:	d8801f15 	stw	r2,124(sp)
    24a8:	010001c4 	movi	r4,7
    24ac:	20bfd716 	blt	r4,r2,240c <__alt_data_end+0xfffb902c>
    24b0:	42000204 	addi	r8,r8,8
    24b4:	003fdd06 	br	242c <__alt_data_end+0xfffb904c>
    24b8:	d9002d17 	ldw	r4,180(sp)
    24bc:	d9801e04 	addi	r6,sp,120
    24c0:	b80b883a 	mov	r5,r23
    24c4:	00080f80 	call	80f8 <__sprint_r>
    24c8:	1039bd1e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    24cc:	d8802617 	ldw	r2,152(sp)
    24d0:	d8c02017 	ldw	r3,128(sp)
    24d4:	da000404 	addi	r8,sp,16
    24d8:	003e1006 	br	1d1c <__alt_data_end+0xfffb893c>
    24dc:	00800044 	movi	r2,1
    24e0:	10803fcc 	andi	r2,r2,255
    24e4:	00c00044 	movi	r3,1
    24e8:	10fa0d26 	beq	r2,r3,d20 <__alt_data_end+0xfffb7940>
    24ec:	00c00084 	movi	r3,2
    24f0:	10fbaf26 	beq	r2,r3,13b0 <__alt_data_end+0xfffb7fd0>
    24f4:	003a6d06 	br	eac <__alt_data_end+0xfffb7acc>
    24f8:	01000074 	movhi	r4,1
    24fc:	21019784 	addi	r4,r4,1630
    2500:	d9003515 	stw	r4,212(sp)
    2504:	003b5406 	br	1258 <__alt_data_end+0xfffb7e78>
    2508:	d8802a17 	ldw	r2,168(sp)
    250c:	00c00184 	movi	r3,6
    2510:	1880012e 	bgeu	r3,r2,2518 <___vfprintf_internal_r+0x1d68>
    2514:	1805883a 	mov	r2,r3
    2518:	d8802b15 	stw	r2,172(sp)
    251c:	1000ef16 	blt	r2,zero,28dc <___vfprintf_internal_r+0x212c>
    2520:	04000074 	movhi	r16,1
    2524:	d8802915 	stw	r2,164(sp)
    2528:	dcc02e15 	stw	r19,184(sp)
    252c:	d8002a15 	stw	zero,168(sp)
    2530:	d8003215 	stw	zero,200(sp)
    2534:	84019104 	addi	r16,r16,1604
    2538:	0039883a 	mov	fp,zero
    253c:	003a8006 	br	f40 <__alt_data_end+0xfffb7b60>
    2540:	0021883a 	mov	r16,zero
    2544:	003e0706 	br	1d64 <__alt_data_end+0xfffb8984>
    2548:	d9002d17 	ldw	r4,180(sp)
    254c:	d9801e04 	addi	r6,sp,120
    2550:	b80b883a 	mov	r5,r23
    2554:	00080f80 	call	80f8 <__sprint_r>
    2558:	1039991e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    255c:	d8802617 	ldw	r2,152(sp)
    2560:	d9403317 	ldw	r5,204(sp)
    2564:	d8c02017 	ldw	r3,128(sp)
    2568:	da000404 	addi	r8,sp,16
    256c:	2885c83a 	sub	r2,r5,r2
    2570:	003dfb06 	br	1d60 <__alt_data_end+0xfffb8980>
    2574:	9080004c 	andi	r2,r18,1
    2578:	103e8f1e 	bne	r2,zero,1fb8 <__alt_data_end+0xfffb8bd8>
    257c:	d8802117 	ldw	r2,132(sp)
    2580:	003e9e06 	br	1ffc <__alt_data_end+0xfffb8c1c>
    2584:	1025883a 	mov	r18,r2
    2588:	0039883a 	mov	fp,zero
    258c:	00800084 	movi	r2,2
    2590:	003fd306 	br	24e0 <__alt_data_end+0xfffb9100>
    2594:	07000b44 	movi	fp,45
    2598:	df002785 	stb	fp,158(sp)
    259c:	003a1b06 	br	e0c <__alt_data_end+0xfffb7a2c>
    25a0:	00c00b44 	movi	r3,45
    25a4:	d8c02785 	stb	r3,158(sp)
    25a8:	d8802915 	stw	r2,164(sp)
    25ac:	dc802c17 	ldw	r18,176(sp)
    25b0:	d8002a15 	stw	zero,168(sp)
    25b4:	07000b44 	movi	fp,45
    25b8:	003a5e06 	br	f34 <__alt_data_end+0xfffb7b54>
    25bc:	04000074 	movhi	r16,1
    25c0:	84018604 	addi	r16,r16,1560
    25c4:	003f4706 	br	22e4 <__alt_data_end+0xfffb8f04>
    25c8:	d9002e17 	ldw	r4,184(sp)
    25cc:	d9402f17 	ldw	r5,188(sp)
    25d0:	20800017 	ldw	r2,0(r4)
    25d4:	21000104 	addi	r4,r4,4
    25d8:	d9002e15 	stw	r4,184(sp)
    25dc:	11400015 	stw	r5,0(r2)
    25e0:	0038ab06 	br	890 <__alt_data_end+0xfffb74b0>
    25e4:	dd802617 	ldw	r22,152(sp)
    25e8:	00bfff44 	movi	r2,-3
    25ec:	b0801c16 	blt	r22,r2,2660 <___vfprintf_internal_r+0x1eb0>
    25f0:	d9402a17 	ldw	r5,168(sp)
    25f4:	2d801a16 	blt	r5,r22,2660 <___vfprintf_internal_r+0x1eb0>
    25f8:	dd803215 	stw	r22,200(sp)
    25fc:	003e8906 	br	2024 <__alt_data_end+0xfffb8c44>
    2600:	01000074 	movhi	r4,1
    2604:	21019384 	addi	r4,r4,1614
    2608:	d9002c15 	stw	r4,176(sp)
    260c:	003c9106 	br	1854 <__alt_data_end+0xfffb8474>
    2610:	e005883a 	mov	r2,fp
    2614:	003e7906 	br	1ffc <__alt_data_end+0xfffb8c1c>
    2618:	d9002a17 	ldw	r4,168(sp)
    261c:	df002783 	ldbu	fp,158(sp)
    2620:	dcc02e15 	stw	r19,184(sp)
    2624:	d9002915 	stw	r4,164(sp)
    2628:	d9002b15 	stw	r4,172(sp)
    262c:	d8002a15 	stw	zero,168(sp)
    2630:	d8003215 	stw	zero,200(sp)
    2634:	003a3b06 	br	f24 <__alt_data_end+0xfffb7b44>
    2638:	9080004c 	andi	r2,r18,1
    263c:	0039883a 	mov	fp,zero
    2640:	10000426 	beq	r2,zero,2654 <___vfprintf_internal_r+0x1ea4>
    2644:	00800c04 	movi	r2,48
    2648:	dc001dc4 	addi	r16,sp,119
    264c:	d8801dc5 	stb	r2,119(sp)
    2650:	003b6406 	br	13e4 <__alt_data_end+0xfffb8004>
    2654:	d8002b15 	stw	zero,172(sp)
    2658:	dc001e04 	addi	r16,sp,120
    265c:	003a2b06 	br	f0c <__alt_data_end+0xfffb7b2c>
    2660:	8c7fff84 	addi	r17,r17,-2
    2664:	b5bfffc4 	addi	r22,r22,-1
    2668:	dd802615 	stw	r22,152(sp)
    266c:	dc4022c5 	stb	r17,139(sp)
    2670:	b000bf16 	blt	r22,zero,2970 <___vfprintf_internal_r+0x21c0>
    2674:	00800ac4 	movi	r2,43
    2678:	d8802305 	stb	r2,140(sp)
    267c:	00800244 	movi	r2,9
    2680:	15807016 	blt	r2,r22,2844 <___vfprintf_internal_r+0x2094>
    2684:	00800c04 	movi	r2,48
    2688:	b5800c04 	addi	r22,r22,48
    268c:	d8802345 	stb	r2,141(sp)
    2690:	dd802385 	stb	r22,142(sp)
    2694:	d88023c4 	addi	r2,sp,143
    2698:	df0022c4 	addi	fp,sp,139
    269c:	d8c03317 	ldw	r3,204(sp)
    26a0:	1739c83a 	sub	fp,r2,fp
    26a4:	d9003317 	ldw	r4,204(sp)
    26a8:	e0c7883a 	add	r3,fp,r3
    26ac:	df003a15 	stw	fp,232(sp)
    26b0:	d8c02b15 	stw	r3,172(sp)
    26b4:	00800044 	movi	r2,1
    26b8:	1100b30e 	bge	r2,r4,2988 <___vfprintf_internal_r+0x21d8>
    26bc:	d8c02b17 	ldw	r3,172(sp)
    26c0:	18c00044 	addi	r3,r3,1
    26c4:	d8c02b15 	stw	r3,172(sp)
    26c8:	1805883a 	mov	r2,r3
    26cc:	1800ac16 	blt	r3,zero,2980 <___vfprintf_internal_r+0x21d0>
    26d0:	d8003215 	stw	zero,200(sp)
    26d4:	003e5d06 	br	204c <__alt_data_end+0xfffb8c6c>
    26d8:	d9002d17 	ldw	r4,180(sp)
    26dc:	d9801e04 	addi	r6,sp,120
    26e0:	b80b883a 	mov	r5,r23
    26e4:	00080f80 	call	80f8 <__sprint_r>
    26e8:	1039351e 	bne	r2,zero,bc0 <__alt_data_end+0xfffb77e0>
    26ec:	dc402617 	ldw	r17,152(sp)
    26f0:	d8c02017 	ldw	r3,128(sp)
    26f4:	d8801f17 	ldw	r2,124(sp)
    26f8:	da000404 	addi	r8,sp,16
    26fc:	003ed606 	br	2258 <__alt_data_end+0xfffb8e78>
    2700:	182b883a 	mov	r21,r3
    2704:	d8002a15 	stw	zero,168(sp)
    2708:	00388c06 	br	93c <__alt_data_end+0xfffb755c>
    270c:	d8802a17 	ldw	r2,168(sp)
    2710:	103e071e 	bne	r2,zero,1f30 <__alt_data_end+0xfffb8b50>
    2714:	dc002a15 	stw	r16,168(sp)
    2718:	003e0506 	br	1f30 <__alt_data_end+0xfffb8b50>
    271c:	d9002a17 	ldw	r4,168(sp)
    2720:	20c00044 	addi	r3,r4,1
    2724:	003e0f06 	br	1f64 <__alt_data_end+0xfffb8b84>
    2728:	01400184 	movi	r5,6
    272c:	d9402a15 	stw	r5,168(sp)
    2730:	003dff06 	br	1f30 <__alt_data_end+0xfffb8b50>
    2734:	d8802104 	addi	r2,sp,132
    2738:	d8800315 	stw	r2,12(sp)
    273c:	d8802504 	addi	r2,sp,148
    2740:	d8800215 	stw	r2,8(sp)
    2744:	d8802604 	addi	r2,sp,152
    2748:	d8800115 	stw	r2,4(sp)
    274c:	d8802a17 	ldw	r2,168(sp)
    2750:	d9403617 	ldw	r5,216(sp)
    2754:	d9002d17 	ldw	r4,180(sp)
    2758:	d8800015 	stw	r2,0(sp)
    275c:	01c000c4 	movi	r7,3
    2760:	980d883a 	mov	r6,r19
    2764:	da003d15 	stw	r8,244(sp)
    2768:	0002ee00 	call	2ee0 <_dtoa_r>
    276c:	d8c02a17 	ldw	r3,168(sp)
    2770:	da003d17 	ldw	r8,244(sp)
    2774:	1021883a 	mov	r16,r2
    2778:	10f9883a 	add	fp,r2,r3
    277c:	81000007 	ldb	r4,0(r16)
    2780:	00800c04 	movi	r2,48
    2784:	20805e26 	beq	r4,r2,2900 <___vfprintf_internal_r+0x2150>
    2788:	d8c02617 	ldw	r3,152(sp)
    278c:	e0f9883a 	add	fp,fp,r3
    2790:	003e0a06 	br	1fbc <__alt_data_end+0xfffb8bdc>
    2794:	00c00b44 	movi	r3,45
    2798:	24e0003c 	xorhi	r19,r4,32768
    279c:	d8c02905 	stb	r3,164(sp)
    27a0:	003de906 	br	1f48 <__alt_data_end+0xfffb8b68>
    27a4:	d8c03217 	ldw	r3,200(sp)
    27a8:	00c07a0e 	bge	zero,r3,2994 <___vfprintf_internal_r+0x21e4>
    27ac:	00800044 	movi	r2,1
    27b0:	d9003317 	ldw	r4,204(sp)
    27b4:	1105883a 	add	r2,r2,r4
    27b8:	d8802b15 	stw	r2,172(sp)
    27bc:	10004e16 	blt	r2,zero,28f8 <___vfprintf_internal_r+0x2148>
    27c0:	044019c4 	movi	r17,103
    27c4:	003e2106 	br	204c <__alt_data_end+0xfffb8c6c>
    27c8:	d9002a17 	ldw	r4,168(sp)
    27cc:	d8802104 	addi	r2,sp,132
    27d0:	d8800315 	stw	r2,12(sp)
    27d4:	d9000015 	stw	r4,0(sp)
    27d8:	d8802504 	addi	r2,sp,148
    27dc:	d9403617 	ldw	r5,216(sp)
    27e0:	d9002d17 	ldw	r4,180(sp)
    27e4:	d8800215 	stw	r2,8(sp)
    27e8:	d8802604 	addi	r2,sp,152
    27ec:	d8800115 	stw	r2,4(sp)
    27f0:	01c000c4 	movi	r7,3
    27f4:	980d883a 	mov	r6,r19
    27f8:	da003d15 	stw	r8,244(sp)
    27fc:	0002ee00 	call	2ee0 <_dtoa_r>
    2800:	d8c02a17 	ldw	r3,168(sp)
    2804:	da003d17 	ldw	r8,244(sp)
    2808:	1021883a 	mov	r16,r2
    280c:	00801184 	movi	r2,70
    2810:	80f9883a 	add	fp,r16,r3
    2814:	88bfd926 	beq	r17,r2,277c <__alt_data_end+0xfffb939c>
    2818:	003de806 	br	1fbc <__alt_data_end+0xfffb8bdc>
    281c:	d9002a17 	ldw	r4,168(sp)
    2820:	00c04d0e 	bge	zero,r3,2958 <___vfprintf_internal_r+0x21a8>
    2824:	2000441e 	bne	r4,zero,2938 <___vfprintf_internal_r+0x2188>
    2828:	9480004c 	andi	r18,r18,1
    282c:	9000421e 	bne	r18,zero,2938 <___vfprintf_internal_r+0x2188>
    2830:	1805883a 	mov	r2,r3
    2834:	18006f16 	blt	r3,zero,29f4 <___vfprintf_internal_r+0x2244>
    2838:	d8c03217 	ldw	r3,200(sp)
    283c:	d8c02b15 	stw	r3,172(sp)
    2840:	003e0206 	br	204c <__alt_data_end+0xfffb8c6c>
    2844:	df0022c4 	addi	fp,sp,139
    2848:	dc002a15 	stw	r16,168(sp)
    284c:	4027883a 	mov	r19,r8
    2850:	e021883a 	mov	r16,fp
    2854:	b009883a 	mov	r4,r22
    2858:	01400284 	movi	r5,10
    285c:	000ac840 	call	ac84 <__modsi3>
    2860:	10800c04 	addi	r2,r2,48
    2864:	843fffc4 	addi	r16,r16,-1
    2868:	b009883a 	mov	r4,r22
    286c:	01400284 	movi	r5,10
    2870:	80800005 	stb	r2,0(r16)
    2874:	000ac000 	call	ac00 <__divsi3>
    2878:	102d883a 	mov	r22,r2
    287c:	00800244 	movi	r2,9
    2880:	15bff416 	blt	r2,r22,2854 <__alt_data_end+0xfffb9474>
    2884:	9811883a 	mov	r8,r19
    2888:	b0800c04 	addi	r2,r22,48
    288c:	8027883a 	mov	r19,r16
    2890:	997fffc4 	addi	r5,r19,-1
    2894:	98bfffc5 	stb	r2,-1(r19)
    2898:	dc002a17 	ldw	r16,168(sp)
    289c:	2f006d2e 	bgeu	r5,fp,2a54 <___vfprintf_internal_r+0x22a4>
    28a0:	d9c02384 	addi	r7,sp,142
    28a4:	3ccfc83a 	sub	r7,r7,r19
    28a8:	d9002344 	addi	r4,sp,141
    28ac:	e1cf883a 	add	r7,fp,r7
    28b0:	00000106 	br	28b8 <___vfprintf_internal_r+0x2108>
    28b4:	28800003 	ldbu	r2,0(r5)
    28b8:	20800005 	stb	r2,0(r4)
    28bc:	21000044 	addi	r4,r4,1
    28c0:	29400044 	addi	r5,r5,1
    28c4:	393ffb1e 	bne	r7,r4,28b4 <__alt_data_end+0xfffb94d4>
    28c8:	d8802304 	addi	r2,sp,140
    28cc:	14c5c83a 	sub	r2,r2,r19
    28d0:	d8c02344 	addi	r3,sp,141
    28d4:	1885883a 	add	r2,r3,r2
    28d8:	003f7006 	br	269c <__alt_data_end+0xfffb92bc>
    28dc:	0005883a 	mov	r2,zero
    28e0:	003f0f06 	br	2520 <__alt_data_end+0xfffb9140>
    28e4:	d8c03217 	ldw	r3,200(sp)
    28e8:	18c00044 	addi	r3,r3,1
    28ec:	d8c02b15 	stw	r3,172(sp)
    28f0:	1805883a 	mov	r2,r3
    28f4:	183fb20e 	bge	r3,zero,27c0 <__alt_data_end+0xfffb93e0>
    28f8:	0005883a 	mov	r2,zero
    28fc:	003fb006 	br	27c0 <__alt_data_end+0xfffb93e0>
    2900:	d9003617 	ldw	r4,216(sp)
    2904:	000d883a 	mov	r6,zero
    2908:	000f883a 	mov	r7,zero
    290c:	980b883a 	mov	r5,r19
    2910:	d8c03c15 	stw	r3,240(sp)
    2914:	da003d15 	stw	r8,244(sp)
    2918:	000c0580 	call	c058 <__eqdf2>
    291c:	d8c03c17 	ldw	r3,240(sp)
    2920:	da003d17 	ldw	r8,244(sp)
    2924:	103f9826 	beq	r2,zero,2788 <__alt_data_end+0xfffb93a8>
    2928:	00800044 	movi	r2,1
    292c:	10c7c83a 	sub	r3,r2,r3
    2930:	d8c02615 	stw	r3,152(sp)
    2934:	003f9506 	br	278c <__alt_data_end+0xfffb93ac>
    2938:	d9002a17 	ldw	r4,168(sp)
    293c:	d8c03217 	ldw	r3,200(sp)
    2940:	20800044 	addi	r2,r4,1
    2944:	1885883a 	add	r2,r3,r2
    2948:	d8802b15 	stw	r2,172(sp)
    294c:	103dbf0e 	bge	r2,zero,204c <__alt_data_end+0xfffb8c6c>
    2950:	0005883a 	mov	r2,zero
    2954:	003dbd06 	br	204c <__alt_data_end+0xfffb8c6c>
    2958:	2000201e 	bne	r4,zero,29dc <___vfprintf_internal_r+0x222c>
    295c:	9480004c 	andi	r18,r18,1
    2960:	90001e1e 	bne	r18,zero,29dc <___vfprintf_internal_r+0x222c>
    2964:	00800044 	movi	r2,1
    2968:	d8802b15 	stw	r2,172(sp)
    296c:	003db706 	br	204c <__alt_data_end+0xfffb8c6c>
    2970:	00800b44 	movi	r2,45
    2974:	05adc83a 	sub	r22,zero,r22
    2978:	d8802305 	stb	r2,140(sp)
    297c:	003f3f06 	br	267c <__alt_data_end+0xfffb929c>
    2980:	0005883a 	mov	r2,zero
    2984:	003f5206 	br	26d0 <__alt_data_end+0xfffb92f0>
    2988:	90a4703a 	and	r18,r18,r2
    298c:	903f4e26 	beq	r18,zero,26c8 <__alt_data_end+0xfffb92e8>
    2990:	003f4a06 	br	26bc <__alt_data_end+0xfffb92dc>
    2994:	00800084 	movi	r2,2
    2998:	10c5c83a 	sub	r2,r2,r3
    299c:	003f8406 	br	27b0 <__alt_data_end+0xfffb93d0>
    29a0:	d9402e17 	ldw	r5,184(sp)
    29a4:	d9002e17 	ldw	r4,184(sp)
    29a8:	ac400043 	ldbu	r17,1(r21)
    29ac:	29400017 	ldw	r5,0(r5)
    29b0:	20800104 	addi	r2,r4,4
    29b4:	d8802e15 	stw	r2,184(sp)
    29b8:	d9402a15 	stw	r5,168(sp)
    29bc:	182b883a 	mov	r21,r3
    29c0:	283e7b0e 	bge	r5,zero,23b0 <__alt_data_end+0xfffb8fd0>
    29c4:	8c403fcc 	andi	r17,r17,255
    29c8:	017fffc4 	movi	r5,-1
    29cc:	8c40201c 	xori	r17,r17,128
    29d0:	d9402a15 	stw	r5,168(sp)
    29d4:	8c7fe004 	addi	r17,r17,-128
    29d8:	0037d706 	br	938 <__alt_data_end+0xfffb7558>
    29dc:	d8c02a17 	ldw	r3,168(sp)
    29e0:	18c00084 	addi	r3,r3,2
    29e4:	d8c02b15 	stw	r3,172(sp)
    29e8:	1805883a 	mov	r2,r3
    29ec:	183d970e 	bge	r3,zero,204c <__alt_data_end+0xfffb8c6c>
    29f0:	003fd706 	br	2950 <__alt_data_end+0xfffb9570>
    29f4:	0005883a 	mov	r2,zero
    29f8:	003f8f06 	br	2838 <__alt_data_end+0xfffb9458>
    29fc:	9080004c 	andi	r2,r18,1
    2a00:	103f821e 	bne	r2,zero,280c <__alt_data_end+0xfffb942c>
    2a04:	d8802117 	ldw	r2,132(sp)
    2a08:	1405c83a 	sub	r2,r2,r16
    2a0c:	d8803315 	stw	r2,204(sp)
    2a10:	b47ef426 	beq	r22,r17,25e4 <__alt_data_end+0xfffb9204>
    2a14:	dd802617 	ldw	r22,152(sp)
    2a18:	003f1206 	br	2664 <__alt_data_end+0xfffb9284>
    2a1c:	d8c02b03 	ldbu	r3,172(sp)
    2a20:	d8c02785 	stb	r3,158(sp)
    2a24:	0038df06 	br	da4 <__alt_data_end+0xfffb79c4>
    2a28:	d8c02b03 	ldbu	r3,172(sp)
    2a2c:	d8c02785 	stb	r3,158(sp)
    2a30:	0038aa06 	br	cdc <__alt_data_end+0xfffb78fc>
    2a34:	d8c02b03 	ldbu	r3,172(sp)
    2a38:	d8c02785 	stb	r3,158(sp)
    2a3c:	003a4306 	br	134c <__alt_data_end+0xfffb7f6c>
    2a40:	d8c02b03 	ldbu	r3,172(sp)
    2a44:	d8c02785 	stb	r3,158(sp)
    2a48:	003af506 	br	1620 <__alt_data_end+0xfffb8240>
    2a4c:	0005883a 	mov	r2,zero
    2a50:	003d7b06 	br	2040 <__alt_data_end+0xfffb8c60>
    2a54:	d8802344 	addi	r2,sp,141
    2a58:	003f1006 	br	269c <__alt_data_end+0xfffb92bc>
    2a5c:	d8c02b03 	ldbu	r3,172(sp)
    2a60:	d8c02785 	stb	r3,158(sp)
    2a64:	0038fd06 	br	e5c <__alt_data_end+0xfffb7a7c>
    2a68:	d8c02b03 	ldbu	r3,172(sp)
    2a6c:	d8c02785 	stb	r3,158(sp)
    2a70:	003a9706 	br	14d0 <__alt_data_end+0xfffb80f0>
    2a74:	d8c02b03 	ldbu	r3,172(sp)
    2a78:	d8c02785 	stb	r3,158(sp)
    2a7c:	003a1806 	br	12e0 <__alt_data_end+0xfffb7f00>
    2a80:	d8c02b03 	ldbu	r3,172(sp)
    2a84:	d8c02785 	stb	r3,158(sp)
    2a88:	003abe06 	br	1584 <__alt_data_end+0xfffb81a4>

00002a8c <__vfprintf_internal>:
    2a8c:	00800074 	movhi	r2,1
    2a90:	1088ee04 	addi	r2,r2,9144
    2a94:	300f883a 	mov	r7,r6
    2a98:	280d883a 	mov	r6,r5
    2a9c:	200b883a 	mov	r5,r4
    2aa0:	11000017 	ldw	r4,0(r2)
    2aa4:	00007b01 	jmpi	7b0 <___vfprintf_internal_r>

00002aa8 <__sbprintf>:
    2aa8:	2880030b 	ldhu	r2,12(r5)
    2aac:	2ac01917 	ldw	r11,100(r5)
    2ab0:	2a80038b 	ldhu	r10,14(r5)
    2ab4:	2a400717 	ldw	r9,28(r5)
    2ab8:	2a000917 	ldw	r8,36(r5)
    2abc:	defee204 	addi	sp,sp,-1144
    2ac0:	00c10004 	movi	r3,1024
    2ac4:	dc011a15 	stw	r16,1128(sp)
    2ac8:	10bfff4c 	andi	r2,r2,65533
    2acc:	2821883a 	mov	r16,r5
    2ad0:	d8cb883a 	add	r5,sp,r3
    2ad4:	dc811c15 	stw	r18,1136(sp)
    2ad8:	dc411b15 	stw	r17,1132(sp)
    2adc:	dfc11d15 	stw	ra,1140(sp)
    2ae0:	2025883a 	mov	r18,r4
    2ae4:	d881030d 	sth	r2,1036(sp)
    2ae8:	dac11915 	stw	r11,1124(sp)
    2aec:	da81038d 	sth	r10,1038(sp)
    2af0:	da410715 	stw	r9,1052(sp)
    2af4:	da010915 	stw	r8,1060(sp)
    2af8:	dec10015 	stw	sp,1024(sp)
    2afc:	dec10415 	stw	sp,1040(sp)
    2b00:	d8c10215 	stw	r3,1032(sp)
    2b04:	d8c10515 	stw	r3,1044(sp)
    2b08:	d8010615 	stw	zero,1048(sp)
    2b0c:	00007b00 	call	7b0 <___vfprintf_internal_r>
    2b10:	1023883a 	mov	r17,r2
    2b14:	10000416 	blt	r2,zero,2b28 <__sbprintf+0x80>
    2b18:	d9410004 	addi	r5,sp,1024
    2b1c:	9009883a 	mov	r4,r18
    2b20:	00047840 	call	4784 <_fflush_r>
    2b24:	10000d1e 	bne	r2,zero,2b5c <__sbprintf+0xb4>
    2b28:	d881030b 	ldhu	r2,1036(sp)
    2b2c:	1080100c 	andi	r2,r2,64
    2b30:	10000326 	beq	r2,zero,2b40 <__sbprintf+0x98>
    2b34:	8080030b 	ldhu	r2,12(r16)
    2b38:	10801014 	ori	r2,r2,64
    2b3c:	8080030d 	sth	r2,12(r16)
    2b40:	8805883a 	mov	r2,r17
    2b44:	dfc11d17 	ldw	ra,1140(sp)
    2b48:	dc811c17 	ldw	r18,1136(sp)
    2b4c:	dc411b17 	ldw	r17,1132(sp)
    2b50:	dc011a17 	ldw	r16,1128(sp)
    2b54:	dec11e04 	addi	sp,sp,1144
    2b58:	f800283a 	ret
    2b5c:	047fffc4 	movi	r17,-1
    2b60:	003ff106 	br	2b28 <__alt_data_end+0xfffb9748>

00002b64 <__swsetup_r>:
    2b64:	00800074 	movhi	r2,1
    2b68:	defffd04 	addi	sp,sp,-12
    2b6c:	1088ee04 	addi	r2,r2,9144
    2b70:	dc400115 	stw	r17,4(sp)
    2b74:	2023883a 	mov	r17,r4
    2b78:	11000017 	ldw	r4,0(r2)
    2b7c:	dc000015 	stw	r16,0(sp)
    2b80:	dfc00215 	stw	ra,8(sp)
    2b84:	2821883a 	mov	r16,r5
    2b88:	20000226 	beq	r4,zero,2b94 <__swsetup_r+0x30>
    2b8c:	20800e17 	ldw	r2,56(r4)
    2b90:	10003126 	beq	r2,zero,2c58 <__swsetup_r+0xf4>
    2b94:	8080030b 	ldhu	r2,12(r16)
    2b98:	10c0020c 	andi	r3,r2,8
    2b9c:	1009883a 	mov	r4,r2
    2ba0:	18000f26 	beq	r3,zero,2be0 <__swsetup_r+0x7c>
    2ba4:	80c00417 	ldw	r3,16(r16)
    2ba8:	18001526 	beq	r3,zero,2c00 <__swsetup_r+0x9c>
    2bac:	1100004c 	andi	r4,r2,1
    2bb0:	20001c1e 	bne	r4,zero,2c24 <__swsetup_r+0xc0>
    2bb4:	1080008c 	andi	r2,r2,2
    2bb8:	1000291e 	bne	r2,zero,2c60 <__swsetup_r+0xfc>
    2bbc:	80800517 	ldw	r2,20(r16)
    2bc0:	80800215 	stw	r2,8(r16)
    2bc4:	18001c26 	beq	r3,zero,2c38 <__swsetup_r+0xd4>
    2bc8:	0005883a 	mov	r2,zero
    2bcc:	dfc00217 	ldw	ra,8(sp)
    2bd0:	dc400117 	ldw	r17,4(sp)
    2bd4:	dc000017 	ldw	r16,0(sp)
    2bd8:	dec00304 	addi	sp,sp,12
    2bdc:	f800283a 	ret
    2be0:	2080040c 	andi	r2,r4,16
    2be4:	10002e26 	beq	r2,zero,2ca0 <__swsetup_r+0x13c>
    2be8:	2080010c 	andi	r2,r4,4
    2bec:	10001e1e 	bne	r2,zero,2c68 <__swsetup_r+0x104>
    2bf0:	80c00417 	ldw	r3,16(r16)
    2bf4:	20800214 	ori	r2,r4,8
    2bf8:	8080030d 	sth	r2,12(r16)
    2bfc:	183feb1e 	bne	r3,zero,2bac <__alt_data_end+0xfffb97cc>
    2c00:	1100a00c 	andi	r4,r2,640
    2c04:	01408004 	movi	r5,512
    2c08:	217fe826 	beq	r4,r5,2bac <__alt_data_end+0xfffb97cc>
    2c0c:	800b883a 	mov	r5,r16
    2c10:	8809883a 	mov	r4,r17
    2c14:	00057200 	call	5720 <__smakebuf_r>
    2c18:	8080030b 	ldhu	r2,12(r16)
    2c1c:	80c00417 	ldw	r3,16(r16)
    2c20:	003fe206 	br	2bac <__alt_data_end+0xfffb97cc>
    2c24:	80800517 	ldw	r2,20(r16)
    2c28:	80000215 	stw	zero,8(r16)
    2c2c:	0085c83a 	sub	r2,zero,r2
    2c30:	80800615 	stw	r2,24(r16)
    2c34:	183fe41e 	bne	r3,zero,2bc8 <__alt_data_end+0xfffb97e8>
    2c38:	80c0030b 	ldhu	r3,12(r16)
    2c3c:	0005883a 	mov	r2,zero
    2c40:	1900200c 	andi	r4,r3,128
    2c44:	203fe126 	beq	r4,zero,2bcc <__alt_data_end+0xfffb97ec>
    2c48:	18c01014 	ori	r3,r3,64
    2c4c:	80c0030d 	sth	r3,12(r16)
    2c50:	00bfffc4 	movi	r2,-1
    2c54:	003fdd06 	br	2bcc <__alt_data_end+0xfffb97ec>
    2c58:	0004b700 	call	4b70 <__sinit>
    2c5c:	003fcd06 	br	2b94 <__alt_data_end+0xfffb97b4>
    2c60:	0005883a 	mov	r2,zero
    2c64:	003fd606 	br	2bc0 <__alt_data_end+0xfffb97e0>
    2c68:	81400c17 	ldw	r5,48(r16)
    2c6c:	28000626 	beq	r5,zero,2c88 <__swsetup_r+0x124>
    2c70:	80801004 	addi	r2,r16,64
    2c74:	28800326 	beq	r5,r2,2c84 <__swsetup_r+0x120>
    2c78:	8809883a 	mov	r4,r17
    2c7c:	0004ce40 	call	4ce4 <_free_r>
    2c80:	8100030b 	ldhu	r4,12(r16)
    2c84:	80000c15 	stw	zero,48(r16)
    2c88:	80c00417 	ldw	r3,16(r16)
    2c8c:	00bff6c4 	movi	r2,-37
    2c90:	1108703a 	and	r4,r2,r4
    2c94:	80000115 	stw	zero,4(r16)
    2c98:	80c00015 	stw	r3,0(r16)
    2c9c:	003fd506 	br	2bf4 <__alt_data_end+0xfffb9814>
    2ca0:	00800244 	movi	r2,9
    2ca4:	88800015 	stw	r2,0(r17)
    2ca8:	20801014 	ori	r2,r4,64
    2cac:	8080030d 	sth	r2,12(r16)
    2cb0:	00bfffc4 	movi	r2,-1
    2cb4:	003fc506 	br	2bcc <__alt_data_end+0xfffb97ec>

00002cb8 <quorem>:
    2cb8:	defff204 	addi	sp,sp,-56
    2cbc:	ddc00b15 	stw	r23,44(sp)
    2cc0:	20800417 	ldw	r2,16(r4)
    2cc4:	2dc00417 	ldw	r23,16(r5)
    2cc8:	dfc00d15 	stw	ra,52(sp)
    2ccc:	df000c15 	stw	fp,48(sp)
    2cd0:	dd800a15 	stw	r22,40(sp)
    2cd4:	dd400915 	stw	r21,36(sp)
    2cd8:	dd000815 	stw	r20,32(sp)
    2cdc:	dcc00715 	stw	r19,28(sp)
    2ce0:	dc800615 	stw	r18,24(sp)
    2ce4:	dc400515 	stw	r17,20(sp)
    2ce8:	dc000415 	stw	r16,16(sp)
    2cec:	15c07a16 	blt	r2,r23,2ed8 <quorem+0x220>
    2cf0:	bdffffc4 	addi	r23,r23,-1
    2cf4:	bde9883a 	add	r20,r23,r23
    2cf8:	28c00504 	addi	r3,r5,20
    2cfc:	a529883a 	add	r20,r20,r20
    2d00:	1d39883a 	add	fp,r3,r20
    2d04:	24c00504 	addi	r19,r4,20
    2d08:	d9400215 	stw	r5,8(sp)
    2d0c:	9d29883a 	add	r20,r19,r20
    2d10:	e1400017 	ldw	r5,0(fp)
    2d14:	d9000015 	stw	r4,0(sp)
    2d18:	a1000017 	ldw	r4,0(r20)
    2d1c:	29400044 	addi	r5,r5,1
    2d20:	d8c00115 	stw	r3,4(sp)
    2d24:	dd000315 	stw	r20,12(sp)
    2d28:	000acf80 	call	acf8 <__udivsi3>
    2d2c:	1025883a 	mov	r18,r2
    2d30:	10003026 	beq	r2,zero,2df4 <quorem+0x13c>
    2d34:	dc400117 	ldw	r17,4(sp)
    2d38:	9829883a 	mov	r20,r19
    2d3c:	002d883a 	mov	r22,zero
    2d40:	0021883a 	mov	r16,zero
    2d44:	8d400017 	ldw	r21,0(r17)
    2d48:	900b883a 	mov	r5,r18
    2d4c:	8c400104 	addi	r17,r17,4
    2d50:	a93fffcc 	andi	r4,r21,65535
    2d54:	000adb40 	call	adb4 <__mulsi3>
    2d58:	a808d43a 	srli	r4,r21,16
    2d5c:	900b883a 	mov	r5,r18
    2d60:	15ad883a 	add	r22,r2,r22
    2d64:	000adb40 	call	adb4 <__mulsi3>
    2d68:	a1000017 	ldw	r4,0(r20)
    2d6c:	b00cd43a 	srli	r6,r22,16
    2d70:	b0ffffcc 	andi	r3,r22,65535
    2d74:	217fffcc 	andi	r5,r4,65535
    2d78:	2c21883a 	add	r16,r5,r16
    2d7c:	80c7c83a 	sub	r3,r16,r3
    2d80:	2008d43a 	srli	r4,r4,16
    2d84:	1185883a 	add	r2,r2,r6
    2d88:	1821d43a 	srai	r16,r3,16
    2d8c:	117fffcc 	andi	r5,r2,65535
    2d90:	2149c83a 	sub	r4,r4,r5
    2d94:	2421883a 	add	r16,r4,r16
    2d98:	8008943a 	slli	r4,r16,16
    2d9c:	18ffffcc 	andi	r3,r3,65535
    2da0:	102cd43a 	srli	r22,r2,16
    2da4:	20c8b03a 	or	r4,r4,r3
    2da8:	a1000015 	stw	r4,0(r20)
    2dac:	8021d43a 	srai	r16,r16,16
    2db0:	a5000104 	addi	r20,r20,4
    2db4:	e47fe32e 	bgeu	fp,r17,2d44 <__alt_data_end+0xfffb9964>
    2db8:	d8c00317 	ldw	r3,12(sp)
    2dbc:	18800017 	ldw	r2,0(r3)
    2dc0:	10000c1e 	bne	r2,zero,2df4 <quorem+0x13c>
    2dc4:	18bfff04 	addi	r2,r3,-4
    2dc8:	9880082e 	bgeu	r19,r2,2dec <quorem+0x134>
    2dcc:	18ffff17 	ldw	r3,-4(r3)
    2dd0:	18000326 	beq	r3,zero,2de0 <quorem+0x128>
    2dd4:	00000506 	br	2dec <quorem+0x134>
    2dd8:	10c00017 	ldw	r3,0(r2)
    2ddc:	1800031e 	bne	r3,zero,2dec <quorem+0x134>
    2de0:	10bfff04 	addi	r2,r2,-4
    2de4:	bdffffc4 	addi	r23,r23,-1
    2de8:	98bffb36 	bltu	r19,r2,2dd8 <__alt_data_end+0xfffb99f8>
    2dec:	d8c00017 	ldw	r3,0(sp)
    2df0:	1dc00415 	stw	r23,16(r3)
    2df4:	d9400217 	ldw	r5,8(sp)
    2df8:	d9000017 	ldw	r4,0(sp)
    2dfc:	0006f1c0 	call	6f1c <__mcmp>
    2e00:	10002816 	blt	r2,zero,2ea4 <quorem+0x1ec>
    2e04:	dc400117 	ldw	r17,4(sp)
    2e08:	94800044 	addi	r18,r18,1
    2e0c:	980d883a 	mov	r6,r19
    2e10:	0007883a 	mov	r3,zero
    2e14:	31000017 	ldw	r4,0(r6)
    2e18:	89400017 	ldw	r5,0(r17)
    2e1c:	31800104 	addi	r6,r6,4
    2e20:	20bfffcc 	andi	r2,r4,65535
    2e24:	10c7883a 	add	r3,r2,r3
    2e28:	28bfffcc 	andi	r2,r5,65535
    2e2c:	1885c83a 	sub	r2,r3,r2
    2e30:	280ad43a 	srli	r5,r5,16
    2e34:	2008d43a 	srli	r4,r4,16
    2e38:	1007d43a 	srai	r3,r2,16
    2e3c:	10bfffcc 	andi	r2,r2,65535
    2e40:	2149c83a 	sub	r4,r4,r5
    2e44:	20c9883a 	add	r4,r4,r3
    2e48:	200a943a 	slli	r5,r4,16
    2e4c:	8c400104 	addi	r17,r17,4
    2e50:	2007d43a 	srai	r3,r4,16
    2e54:	2884b03a 	or	r2,r5,r2
    2e58:	30bfff15 	stw	r2,-4(r6)
    2e5c:	e47fed2e 	bgeu	fp,r17,2e14 <__alt_data_end+0xfffb9a34>
    2e60:	bdc5883a 	add	r2,r23,r23
    2e64:	1085883a 	add	r2,r2,r2
    2e68:	9887883a 	add	r3,r19,r2
    2e6c:	18800017 	ldw	r2,0(r3)
    2e70:	10000c1e 	bne	r2,zero,2ea4 <quorem+0x1ec>
    2e74:	18bfff04 	addi	r2,r3,-4
    2e78:	9880082e 	bgeu	r19,r2,2e9c <quorem+0x1e4>
    2e7c:	18ffff17 	ldw	r3,-4(r3)
    2e80:	18000326 	beq	r3,zero,2e90 <quorem+0x1d8>
    2e84:	00000506 	br	2e9c <quorem+0x1e4>
    2e88:	10c00017 	ldw	r3,0(r2)
    2e8c:	1800031e 	bne	r3,zero,2e9c <quorem+0x1e4>
    2e90:	10bfff04 	addi	r2,r2,-4
    2e94:	bdffffc4 	addi	r23,r23,-1
    2e98:	98bffb36 	bltu	r19,r2,2e88 <__alt_data_end+0xfffb9aa8>
    2e9c:	d8c00017 	ldw	r3,0(sp)
    2ea0:	1dc00415 	stw	r23,16(r3)
    2ea4:	9005883a 	mov	r2,r18
    2ea8:	dfc00d17 	ldw	ra,52(sp)
    2eac:	df000c17 	ldw	fp,48(sp)
    2eb0:	ddc00b17 	ldw	r23,44(sp)
    2eb4:	dd800a17 	ldw	r22,40(sp)
    2eb8:	dd400917 	ldw	r21,36(sp)
    2ebc:	dd000817 	ldw	r20,32(sp)
    2ec0:	dcc00717 	ldw	r19,28(sp)
    2ec4:	dc800617 	ldw	r18,24(sp)
    2ec8:	dc400517 	ldw	r17,20(sp)
    2ecc:	dc000417 	ldw	r16,16(sp)
    2ed0:	dec00e04 	addi	sp,sp,56
    2ed4:	f800283a 	ret
    2ed8:	0005883a 	mov	r2,zero
    2edc:	003ff206 	br	2ea8 <__alt_data_end+0xfffb9ac8>

00002ee0 <_dtoa_r>:
    2ee0:	20801017 	ldw	r2,64(r4)
    2ee4:	deffde04 	addi	sp,sp,-136
    2ee8:	df002015 	stw	fp,128(sp)
    2eec:	dcc01b15 	stw	r19,108(sp)
    2ef0:	dc801a15 	stw	r18,104(sp)
    2ef4:	dc401915 	stw	r17,100(sp)
    2ef8:	dc001815 	stw	r16,96(sp)
    2efc:	dfc02115 	stw	ra,132(sp)
    2f00:	ddc01f15 	stw	r23,124(sp)
    2f04:	dd801e15 	stw	r22,120(sp)
    2f08:	dd401d15 	stw	r21,116(sp)
    2f0c:	dd001c15 	stw	r20,112(sp)
    2f10:	d9c00315 	stw	r7,12(sp)
    2f14:	2039883a 	mov	fp,r4
    2f18:	3023883a 	mov	r17,r6
    2f1c:	2825883a 	mov	r18,r5
    2f20:	dc002417 	ldw	r16,144(sp)
    2f24:	3027883a 	mov	r19,r6
    2f28:	10000826 	beq	r2,zero,2f4c <_dtoa_r+0x6c>
    2f2c:	21801117 	ldw	r6,68(r4)
    2f30:	00c00044 	movi	r3,1
    2f34:	100b883a 	mov	r5,r2
    2f38:	1986983a 	sll	r3,r3,r6
    2f3c:	11800115 	stw	r6,4(r2)
    2f40:	10c00215 	stw	r3,8(r2)
    2f44:	00066400 	call	6640 <_Bfree>
    2f48:	e0001015 	stw	zero,64(fp)
    2f4c:	88002e16 	blt	r17,zero,3008 <_dtoa_r+0x128>
    2f50:	80000015 	stw	zero,0(r16)
    2f54:	889ffc2c 	andhi	r2,r17,32752
    2f58:	00dffc34 	movhi	r3,32752
    2f5c:	10c01c26 	beq	r2,r3,2fd0 <_dtoa_r+0xf0>
    2f60:	000d883a 	mov	r6,zero
    2f64:	000f883a 	mov	r7,zero
    2f68:	9009883a 	mov	r4,r18
    2f6c:	980b883a 	mov	r5,r19
    2f70:	000c0580 	call	c058 <__eqdf2>
    2f74:	10002b1e 	bne	r2,zero,3024 <_dtoa_r+0x144>
    2f78:	d9c02317 	ldw	r7,140(sp)
    2f7c:	00800044 	movi	r2,1
    2f80:	38800015 	stw	r2,0(r7)
    2f84:	d8802517 	ldw	r2,148(sp)
    2f88:	10019e26 	beq	r2,zero,3604 <_dtoa_r+0x724>
    2f8c:	d8c02517 	ldw	r3,148(sp)
    2f90:	00800074 	movhi	r2,1
    2f94:	10819344 	addi	r2,r2,1613
    2f98:	18800015 	stw	r2,0(r3)
    2f9c:	10bfffc4 	addi	r2,r2,-1
    2fa0:	dfc02117 	ldw	ra,132(sp)
    2fa4:	df002017 	ldw	fp,128(sp)
    2fa8:	ddc01f17 	ldw	r23,124(sp)
    2fac:	dd801e17 	ldw	r22,120(sp)
    2fb0:	dd401d17 	ldw	r21,116(sp)
    2fb4:	dd001c17 	ldw	r20,112(sp)
    2fb8:	dcc01b17 	ldw	r19,108(sp)
    2fbc:	dc801a17 	ldw	r18,104(sp)
    2fc0:	dc401917 	ldw	r17,100(sp)
    2fc4:	dc001817 	ldw	r16,96(sp)
    2fc8:	dec02204 	addi	sp,sp,136
    2fcc:	f800283a 	ret
    2fd0:	d8c02317 	ldw	r3,140(sp)
    2fd4:	0089c3c4 	movi	r2,9999
    2fd8:	18800015 	stw	r2,0(r3)
    2fdc:	90017726 	beq	r18,zero,35bc <_dtoa_r+0x6dc>
    2fe0:	00800074 	movhi	r2,1
    2fe4:	10819f04 	addi	r2,r2,1660
    2fe8:	d9002517 	ldw	r4,148(sp)
    2fec:	203fec26 	beq	r4,zero,2fa0 <__alt_data_end+0xfffb9bc0>
    2ff0:	10c000c7 	ldb	r3,3(r2)
    2ff4:	1801781e 	bne	r3,zero,35d8 <_dtoa_r+0x6f8>
    2ff8:	10c000c4 	addi	r3,r2,3
    2ffc:	d9802517 	ldw	r6,148(sp)
    3000:	30c00015 	stw	r3,0(r6)
    3004:	003fe606 	br	2fa0 <__alt_data_end+0xfffb9bc0>
    3008:	04e00034 	movhi	r19,32768
    300c:	9cffffc4 	addi	r19,r19,-1
    3010:	00800044 	movi	r2,1
    3014:	8ce6703a 	and	r19,r17,r19
    3018:	80800015 	stw	r2,0(r16)
    301c:	9823883a 	mov	r17,r19
    3020:	003fcc06 	br	2f54 <__alt_data_end+0xfffb9b74>
    3024:	d8800204 	addi	r2,sp,8
    3028:	d8800015 	stw	r2,0(sp)
    302c:	d9c00104 	addi	r7,sp,4
    3030:	900b883a 	mov	r5,r18
    3034:	980d883a 	mov	r6,r19
    3038:	e009883a 	mov	r4,fp
    303c:	8820d53a 	srli	r16,r17,20
    3040:	00072e80 	call	72e8 <__d2b>
    3044:	d8800915 	stw	r2,36(sp)
    3048:	8001651e 	bne	r16,zero,35e0 <_dtoa_r+0x700>
    304c:	dd800217 	ldw	r22,8(sp)
    3050:	dc000117 	ldw	r16,4(sp)
    3054:	00800804 	movi	r2,32
    3058:	b421883a 	add	r16,r22,r16
    305c:	80c10c84 	addi	r3,r16,1074
    3060:	10c2d10e 	bge	r2,r3,3ba8 <_dtoa_r+0xcc8>
    3064:	00801004 	movi	r2,64
    3068:	81010484 	addi	r4,r16,1042
    306c:	10c7c83a 	sub	r3,r2,r3
    3070:	9108d83a 	srl	r4,r18,r4
    3074:	88e2983a 	sll	r17,r17,r3
    3078:	2448b03a 	or	r4,r4,r17
    307c:	000d5740 	call	d574 <__floatunsidf>
    3080:	017f8434 	movhi	r5,65040
    3084:	01800044 	movi	r6,1
    3088:	1009883a 	mov	r4,r2
    308c:	194b883a 	add	r5,r3,r5
    3090:	843fffc4 	addi	r16,r16,-1
    3094:	d9801115 	stw	r6,68(sp)
    3098:	000d883a 	mov	r6,zero
    309c:	01cffe34 	movhi	r7,16376
    30a0:	000cb1c0 	call	cb1c <__subdf3>
    30a4:	0198dbf4 	movhi	r6,25455
    30a8:	01cff4f4 	movhi	r7,16339
    30ac:	3190d844 	addi	r6,r6,17249
    30b0:	39e1e9c4 	addi	r7,r7,-30809
    30b4:	1009883a 	mov	r4,r2
    30b8:	180b883a 	mov	r5,r3
    30bc:	000c2b00 	call	c2b0 <__muldf3>
    30c0:	01a2d874 	movhi	r6,35681
    30c4:	01cff1f4 	movhi	r7,16327
    30c8:	31b22cc4 	addi	r6,r6,-14157
    30cc:	39e28a04 	addi	r7,r7,-30168
    30d0:	180b883a 	mov	r5,r3
    30d4:	1009883a 	mov	r4,r2
    30d8:	000addc0 	call	addc <__adddf3>
    30dc:	8009883a 	mov	r4,r16
    30e0:	1029883a 	mov	r20,r2
    30e4:	1823883a 	mov	r17,r3
    30e8:	000d4980 	call	d498 <__floatsidf>
    30ec:	019427f4 	movhi	r6,20639
    30f0:	01cff4f4 	movhi	r7,16339
    30f4:	319e7ec4 	addi	r6,r6,31227
    30f8:	39d104c4 	addi	r7,r7,17427
    30fc:	1009883a 	mov	r4,r2
    3100:	180b883a 	mov	r5,r3
    3104:	000c2b00 	call	c2b0 <__muldf3>
    3108:	100d883a 	mov	r6,r2
    310c:	180f883a 	mov	r7,r3
    3110:	a009883a 	mov	r4,r20
    3114:	880b883a 	mov	r5,r17
    3118:	000addc0 	call	addc <__adddf3>
    311c:	1009883a 	mov	r4,r2
    3120:	180b883a 	mov	r5,r3
    3124:	1029883a 	mov	r20,r2
    3128:	1823883a 	mov	r17,r3
    312c:	000d4180 	call	d418 <__fixdfsi>
    3130:	000d883a 	mov	r6,zero
    3134:	000f883a 	mov	r7,zero
    3138:	a009883a 	mov	r4,r20
    313c:	880b883a 	mov	r5,r17
    3140:	d8800515 	stw	r2,20(sp)
    3144:	000c1bc0 	call	c1bc <__ledf2>
    3148:	10028716 	blt	r2,zero,3b68 <_dtoa_r+0xc88>
    314c:	d8c00517 	ldw	r3,20(sp)
    3150:	00800584 	movi	r2,22
    3154:	10c27536 	bltu	r2,r3,3b2c <_dtoa_r+0xc4c>
    3158:	180490fa 	slli	r2,r3,3
    315c:	00c00074 	movhi	r3,1
    3160:	18c1bb04 	addi	r3,r3,1772
    3164:	1885883a 	add	r2,r3,r2
    3168:	11000017 	ldw	r4,0(r2)
    316c:	11400117 	ldw	r5,4(r2)
    3170:	900d883a 	mov	r6,r18
    3174:	980f883a 	mov	r7,r19
    3178:	000c0e00 	call	c0e0 <__gedf2>
    317c:	00828d0e 	bge	zero,r2,3bb4 <_dtoa_r+0xcd4>
    3180:	d9000517 	ldw	r4,20(sp)
    3184:	d8000e15 	stw	zero,56(sp)
    3188:	213fffc4 	addi	r4,r4,-1
    318c:	d9000515 	stw	r4,20(sp)
    3190:	b42dc83a 	sub	r22,r22,r16
    3194:	b5bfffc4 	addi	r22,r22,-1
    3198:	b0026f16 	blt	r22,zero,3b58 <_dtoa_r+0xc78>
    319c:	d8000815 	stw	zero,32(sp)
    31a0:	d9c00517 	ldw	r7,20(sp)
    31a4:	38026416 	blt	r7,zero,3b38 <_dtoa_r+0xc58>
    31a8:	b1ed883a 	add	r22,r22,r7
    31ac:	d9c00d15 	stw	r7,52(sp)
    31b0:	d8000a15 	stw	zero,40(sp)
    31b4:	d9800317 	ldw	r6,12(sp)
    31b8:	00800244 	movi	r2,9
    31bc:	11811436 	bltu	r2,r6,3610 <_dtoa_r+0x730>
    31c0:	00800144 	movi	r2,5
    31c4:	1184e10e 	bge	r2,r6,454c <_dtoa_r+0x166c>
    31c8:	31bfff04 	addi	r6,r6,-4
    31cc:	d9800315 	stw	r6,12(sp)
    31d0:	0023883a 	mov	r17,zero
    31d4:	d9800317 	ldw	r6,12(sp)
    31d8:	008000c4 	movi	r2,3
    31dc:	30836726 	beq	r6,r2,3f7c <_dtoa_r+0x109c>
    31e0:	1183410e 	bge	r2,r6,3ee8 <_dtoa_r+0x1008>
    31e4:	d9c00317 	ldw	r7,12(sp)
    31e8:	00800104 	movi	r2,4
    31ec:	38827c26 	beq	r7,r2,3be0 <_dtoa_r+0xd00>
    31f0:	00800144 	movi	r2,5
    31f4:	3884c41e 	bne	r7,r2,4508 <_dtoa_r+0x1628>
    31f8:	00800044 	movi	r2,1
    31fc:	d8800b15 	stw	r2,44(sp)
    3200:	d8c00517 	ldw	r3,20(sp)
    3204:	d9002217 	ldw	r4,136(sp)
    3208:	1907883a 	add	r3,r3,r4
    320c:	19800044 	addi	r6,r3,1
    3210:	d8c00c15 	stw	r3,48(sp)
    3214:	d9800615 	stw	r6,24(sp)
    3218:	0183a40e 	bge	zero,r6,40ac <_dtoa_r+0x11cc>
    321c:	d9800617 	ldw	r6,24(sp)
    3220:	3021883a 	mov	r16,r6
    3224:	e0001115 	stw	zero,68(fp)
    3228:	008005c4 	movi	r2,23
    322c:	1184c92e 	bgeu	r2,r6,4554 <_dtoa_r+0x1674>
    3230:	00c00044 	movi	r3,1
    3234:	00800104 	movi	r2,4
    3238:	1085883a 	add	r2,r2,r2
    323c:	11000504 	addi	r4,r2,20
    3240:	180b883a 	mov	r5,r3
    3244:	18c00044 	addi	r3,r3,1
    3248:	313ffb2e 	bgeu	r6,r4,3238 <__alt_data_end+0xfffb9e58>
    324c:	e1401115 	stw	r5,68(fp)
    3250:	e009883a 	mov	r4,fp
    3254:	00065980 	call	6598 <_Balloc>
    3258:	d8800715 	stw	r2,28(sp)
    325c:	e0801015 	stw	r2,64(fp)
    3260:	00800384 	movi	r2,14
    3264:	1400f736 	bltu	r2,r16,3644 <_dtoa_r+0x764>
    3268:	8800f626 	beq	r17,zero,3644 <_dtoa_r+0x764>
    326c:	d9c00517 	ldw	r7,20(sp)
    3270:	01c39a0e 	bge	zero,r7,40dc <_dtoa_r+0x11fc>
    3274:	388003cc 	andi	r2,r7,15
    3278:	100490fa 	slli	r2,r2,3
    327c:	382bd13a 	srai	r21,r7,4
    3280:	00c00074 	movhi	r3,1
    3284:	18c1bb04 	addi	r3,r3,1772
    3288:	1885883a 	add	r2,r3,r2
    328c:	a8c0040c 	andi	r3,r21,16
    3290:	12400017 	ldw	r9,0(r2)
    3294:	12000117 	ldw	r8,4(r2)
    3298:	18037926 	beq	r3,zero,4080 <_dtoa_r+0x11a0>
    329c:	00800074 	movhi	r2,1
    32a0:	1081b104 	addi	r2,r2,1732
    32a4:	11800817 	ldw	r6,32(r2)
    32a8:	11c00917 	ldw	r7,36(r2)
    32ac:	9009883a 	mov	r4,r18
    32b0:	980b883a 	mov	r5,r19
    32b4:	da001715 	stw	r8,92(sp)
    32b8:	da401615 	stw	r9,88(sp)
    32bc:	000b6880 	call	b688 <__divdf3>
    32c0:	da001717 	ldw	r8,92(sp)
    32c4:	da401617 	ldw	r9,88(sp)
    32c8:	ad4003cc 	andi	r21,r21,15
    32cc:	040000c4 	movi	r16,3
    32d0:	1023883a 	mov	r17,r2
    32d4:	1829883a 	mov	r20,r3
    32d8:	a8001126 	beq	r21,zero,3320 <_dtoa_r+0x440>
    32dc:	05c00074 	movhi	r23,1
    32e0:	bdc1b104 	addi	r23,r23,1732
    32e4:	4805883a 	mov	r2,r9
    32e8:	4007883a 	mov	r3,r8
    32ec:	a980004c 	andi	r6,r21,1
    32f0:	1009883a 	mov	r4,r2
    32f4:	a82bd07a 	srai	r21,r21,1
    32f8:	180b883a 	mov	r5,r3
    32fc:	30000426 	beq	r6,zero,3310 <_dtoa_r+0x430>
    3300:	b9800017 	ldw	r6,0(r23)
    3304:	b9c00117 	ldw	r7,4(r23)
    3308:	84000044 	addi	r16,r16,1
    330c:	000c2b00 	call	c2b0 <__muldf3>
    3310:	bdc00204 	addi	r23,r23,8
    3314:	a83ff51e 	bne	r21,zero,32ec <__alt_data_end+0xfffb9f0c>
    3318:	1013883a 	mov	r9,r2
    331c:	1811883a 	mov	r8,r3
    3320:	480d883a 	mov	r6,r9
    3324:	400f883a 	mov	r7,r8
    3328:	8809883a 	mov	r4,r17
    332c:	a00b883a 	mov	r5,r20
    3330:	000b6880 	call	b688 <__divdf3>
    3334:	d8800f15 	stw	r2,60(sp)
    3338:	d8c01015 	stw	r3,64(sp)
    333c:	d8c00e17 	ldw	r3,56(sp)
    3340:	18000626 	beq	r3,zero,335c <_dtoa_r+0x47c>
    3344:	d9000f17 	ldw	r4,60(sp)
    3348:	d9401017 	ldw	r5,64(sp)
    334c:	000d883a 	mov	r6,zero
    3350:	01cffc34 	movhi	r7,16368
    3354:	000c1bc0 	call	c1bc <__ledf2>
    3358:	10040b16 	blt	r2,zero,4388 <_dtoa_r+0x14a8>
    335c:	8009883a 	mov	r4,r16
    3360:	000d4980 	call	d498 <__floatsidf>
    3364:	d9800f17 	ldw	r6,60(sp)
    3368:	d9c01017 	ldw	r7,64(sp)
    336c:	1009883a 	mov	r4,r2
    3370:	180b883a 	mov	r5,r3
    3374:	000c2b00 	call	c2b0 <__muldf3>
    3378:	000d883a 	mov	r6,zero
    337c:	01d00734 	movhi	r7,16412
    3380:	1009883a 	mov	r4,r2
    3384:	180b883a 	mov	r5,r3
    3388:	000addc0 	call	addc <__adddf3>
    338c:	1021883a 	mov	r16,r2
    3390:	d8800617 	ldw	r2,24(sp)
    3394:	047f3034 	movhi	r17,64704
    3398:	1c63883a 	add	r17,r3,r17
    339c:	10031826 	beq	r2,zero,4000 <_dtoa_r+0x1120>
    33a0:	d8c00517 	ldw	r3,20(sp)
    33a4:	db000617 	ldw	r12,24(sp)
    33a8:	d8c01315 	stw	r3,76(sp)
    33ac:	d9000b17 	ldw	r4,44(sp)
    33b0:	20038f26 	beq	r4,zero,41f0 <_dtoa_r+0x1310>
    33b4:	60bfffc4 	addi	r2,r12,-1
    33b8:	100490fa 	slli	r2,r2,3
    33bc:	00c00074 	movhi	r3,1
    33c0:	18c1bb04 	addi	r3,r3,1772
    33c4:	1885883a 	add	r2,r3,r2
    33c8:	11800017 	ldw	r6,0(r2)
    33cc:	11c00117 	ldw	r7,4(r2)
    33d0:	d8800717 	ldw	r2,28(sp)
    33d4:	0009883a 	mov	r4,zero
    33d8:	014ff834 	movhi	r5,16352
    33dc:	db001615 	stw	r12,88(sp)
    33e0:	15c00044 	addi	r23,r2,1
    33e4:	000b6880 	call	b688 <__divdf3>
    33e8:	800d883a 	mov	r6,r16
    33ec:	880f883a 	mov	r7,r17
    33f0:	1009883a 	mov	r4,r2
    33f4:	180b883a 	mov	r5,r3
    33f8:	000cb1c0 	call	cb1c <__subdf3>
    33fc:	d9401017 	ldw	r5,64(sp)
    3400:	d9000f17 	ldw	r4,60(sp)
    3404:	102b883a 	mov	r21,r2
    3408:	d8c01215 	stw	r3,72(sp)
    340c:	000d4180 	call	d418 <__fixdfsi>
    3410:	1009883a 	mov	r4,r2
    3414:	1029883a 	mov	r20,r2
    3418:	000d4980 	call	d498 <__floatsidf>
    341c:	d9000f17 	ldw	r4,60(sp)
    3420:	d9401017 	ldw	r5,64(sp)
    3424:	100d883a 	mov	r6,r2
    3428:	180f883a 	mov	r7,r3
    342c:	000cb1c0 	call	cb1c <__subdf3>
    3430:	1823883a 	mov	r17,r3
    3434:	d8c00717 	ldw	r3,28(sp)
    3438:	d9401217 	ldw	r5,72(sp)
    343c:	a2000c04 	addi	r8,r20,48
    3440:	1021883a 	mov	r16,r2
    3444:	1a000005 	stb	r8,0(r3)
    3448:	800d883a 	mov	r6,r16
    344c:	880f883a 	mov	r7,r17
    3450:	a809883a 	mov	r4,r21
    3454:	4029883a 	mov	r20,r8
    3458:	000c0e00 	call	c0e0 <__gedf2>
    345c:	00841d16 	blt	zero,r2,44d4 <_dtoa_r+0x15f4>
    3460:	800d883a 	mov	r6,r16
    3464:	880f883a 	mov	r7,r17
    3468:	0009883a 	mov	r4,zero
    346c:	014ffc34 	movhi	r5,16368
    3470:	000cb1c0 	call	cb1c <__subdf3>
    3474:	d9401217 	ldw	r5,72(sp)
    3478:	100d883a 	mov	r6,r2
    347c:	180f883a 	mov	r7,r3
    3480:	a809883a 	mov	r4,r21
    3484:	000c0e00 	call	c0e0 <__gedf2>
    3488:	db001617 	ldw	r12,88(sp)
    348c:	00840e16 	blt	zero,r2,44c8 <_dtoa_r+0x15e8>
    3490:	00800044 	movi	r2,1
    3494:	13006b0e 	bge	r2,r12,3644 <_dtoa_r+0x764>
    3498:	d9000717 	ldw	r4,28(sp)
    349c:	dd800f15 	stw	r22,60(sp)
    34a0:	dcc01015 	stw	r19,64(sp)
    34a4:	2319883a 	add	r12,r4,r12
    34a8:	dcc01217 	ldw	r19,72(sp)
    34ac:	602d883a 	mov	r22,r12
    34b0:	dc801215 	stw	r18,72(sp)
    34b4:	b825883a 	mov	r18,r23
    34b8:	00000906 	br	34e0 <_dtoa_r+0x600>
    34bc:	000cb1c0 	call	cb1c <__subdf3>
    34c0:	a80d883a 	mov	r6,r21
    34c4:	980f883a 	mov	r7,r19
    34c8:	1009883a 	mov	r4,r2
    34cc:	180b883a 	mov	r5,r3
    34d0:	000c1bc0 	call	c1bc <__ledf2>
    34d4:	1003e816 	blt	r2,zero,4478 <_dtoa_r+0x1598>
    34d8:	b825883a 	mov	r18,r23
    34dc:	bd83e926 	beq	r23,r22,4484 <_dtoa_r+0x15a4>
    34e0:	a809883a 	mov	r4,r21
    34e4:	980b883a 	mov	r5,r19
    34e8:	000d883a 	mov	r6,zero
    34ec:	01d00934 	movhi	r7,16420
    34f0:	000c2b00 	call	c2b0 <__muldf3>
    34f4:	000d883a 	mov	r6,zero
    34f8:	01d00934 	movhi	r7,16420
    34fc:	8009883a 	mov	r4,r16
    3500:	880b883a 	mov	r5,r17
    3504:	102b883a 	mov	r21,r2
    3508:	1827883a 	mov	r19,r3
    350c:	000c2b00 	call	c2b0 <__muldf3>
    3510:	180b883a 	mov	r5,r3
    3514:	1009883a 	mov	r4,r2
    3518:	1821883a 	mov	r16,r3
    351c:	1023883a 	mov	r17,r2
    3520:	000d4180 	call	d418 <__fixdfsi>
    3524:	1009883a 	mov	r4,r2
    3528:	1029883a 	mov	r20,r2
    352c:	000d4980 	call	d498 <__floatsidf>
    3530:	8809883a 	mov	r4,r17
    3534:	800b883a 	mov	r5,r16
    3538:	100d883a 	mov	r6,r2
    353c:	180f883a 	mov	r7,r3
    3540:	000cb1c0 	call	cb1c <__subdf3>
    3544:	a5000c04 	addi	r20,r20,48
    3548:	a80d883a 	mov	r6,r21
    354c:	980f883a 	mov	r7,r19
    3550:	1009883a 	mov	r4,r2
    3554:	180b883a 	mov	r5,r3
    3558:	95000005 	stb	r20,0(r18)
    355c:	1021883a 	mov	r16,r2
    3560:	1823883a 	mov	r17,r3
    3564:	000c1bc0 	call	c1bc <__ledf2>
    3568:	bdc00044 	addi	r23,r23,1
    356c:	800d883a 	mov	r6,r16
    3570:	880f883a 	mov	r7,r17
    3574:	0009883a 	mov	r4,zero
    3578:	014ffc34 	movhi	r5,16368
    357c:	103fcf0e 	bge	r2,zero,34bc <__alt_data_end+0xfffba0dc>
    3580:	d8c01317 	ldw	r3,76(sp)
    3584:	d8c00515 	stw	r3,20(sp)
    3588:	d9400917 	ldw	r5,36(sp)
    358c:	e009883a 	mov	r4,fp
    3590:	00066400 	call	6640 <_Bfree>
    3594:	d9000517 	ldw	r4,20(sp)
    3598:	d9802317 	ldw	r6,140(sp)
    359c:	d9c02517 	ldw	r7,148(sp)
    35a0:	b8000005 	stb	zero,0(r23)
    35a4:	20800044 	addi	r2,r4,1
    35a8:	30800015 	stw	r2,0(r6)
    35ac:	3802aa26 	beq	r7,zero,4058 <_dtoa_r+0x1178>
    35b0:	3dc00015 	stw	r23,0(r7)
    35b4:	d8800717 	ldw	r2,28(sp)
    35b8:	003e7906 	br	2fa0 <__alt_data_end+0xfffb9bc0>
    35bc:	00800434 	movhi	r2,16
    35c0:	10bfffc4 	addi	r2,r2,-1
    35c4:	88a2703a 	and	r17,r17,r2
    35c8:	883e851e 	bne	r17,zero,2fe0 <__alt_data_end+0xfffb9c00>
    35cc:	00800074 	movhi	r2,1
    35d0:	10819c04 	addi	r2,r2,1648
    35d4:	003e8406 	br	2fe8 <__alt_data_end+0xfffb9c08>
    35d8:	10c00204 	addi	r3,r2,8
    35dc:	003e8706 	br	2ffc <__alt_data_end+0xfffb9c1c>
    35e0:	01400434 	movhi	r5,16
    35e4:	297fffc4 	addi	r5,r5,-1
    35e8:	994a703a 	and	r5,r19,r5
    35ec:	9009883a 	mov	r4,r18
    35f0:	843f0044 	addi	r16,r16,-1023
    35f4:	294ffc34 	orhi	r5,r5,16368
    35f8:	dd800217 	ldw	r22,8(sp)
    35fc:	d8001115 	stw	zero,68(sp)
    3600:	003ea506 	br	3098 <__alt_data_end+0xfffb9cb8>
    3604:	00800074 	movhi	r2,1
    3608:	10819304 	addi	r2,r2,1612
    360c:	003e6406 	br	2fa0 <__alt_data_end+0xfffb9bc0>
    3610:	e0001115 	stw	zero,68(fp)
    3614:	000b883a 	mov	r5,zero
    3618:	e009883a 	mov	r4,fp
    361c:	00065980 	call	6598 <_Balloc>
    3620:	01bfffc4 	movi	r6,-1
    3624:	01c00044 	movi	r7,1
    3628:	d8800715 	stw	r2,28(sp)
    362c:	d9800c15 	stw	r6,48(sp)
    3630:	e0801015 	stw	r2,64(fp)
    3634:	d8000315 	stw	zero,12(sp)
    3638:	d9c00b15 	stw	r7,44(sp)
    363c:	d9800615 	stw	r6,24(sp)
    3640:	d8002215 	stw	zero,136(sp)
    3644:	d8800117 	ldw	r2,4(sp)
    3648:	10008916 	blt	r2,zero,3870 <_dtoa_r+0x990>
    364c:	d9000517 	ldw	r4,20(sp)
    3650:	00c00384 	movi	r3,14
    3654:	19008616 	blt	r3,r4,3870 <_dtoa_r+0x990>
    3658:	200490fa 	slli	r2,r4,3
    365c:	00c00074 	movhi	r3,1
    3660:	d9802217 	ldw	r6,136(sp)
    3664:	18c1bb04 	addi	r3,r3,1772
    3668:	1885883a 	add	r2,r3,r2
    366c:	14000017 	ldw	r16,0(r2)
    3670:	14400117 	ldw	r17,4(r2)
    3674:	30016316 	blt	r6,zero,3c04 <_dtoa_r+0xd24>
    3678:	800d883a 	mov	r6,r16
    367c:	880f883a 	mov	r7,r17
    3680:	9009883a 	mov	r4,r18
    3684:	980b883a 	mov	r5,r19
    3688:	000b6880 	call	b688 <__divdf3>
    368c:	180b883a 	mov	r5,r3
    3690:	1009883a 	mov	r4,r2
    3694:	000d4180 	call	d418 <__fixdfsi>
    3698:	1009883a 	mov	r4,r2
    369c:	102b883a 	mov	r21,r2
    36a0:	000d4980 	call	d498 <__floatsidf>
    36a4:	800d883a 	mov	r6,r16
    36a8:	880f883a 	mov	r7,r17
    36ac:	1009883a 	mov	r4,r2
    36b0:	180b883a 	mov	r5,r3
    36b4:	000c2b00 	call	c2b0 <__muldf3>
    36b8:	100d883a 	mov	r6,r2
    36bc:	180f883a 	mov	r7,r3
    36c0:	9009883a 	mov	r4,r18
    36c4:	980b883a 	mov	r5,r19
    36c8:	000cb1c0 	call	cb1c <__subdf3>
    36cc:	d9c00717 	ldw	r7,28(sp)
    36d0:	1009883a 	mov	r4,r2
    36d4:	a8800c04 	addi	r2,r21,48
    36d8:	38800005 	stb	r2,0(r7)
    36dc:	3dc00044 	addi	r23,r7,1
    36e0:	d9c00617 	ldw	r7,24(sp)
    36e4:	01800044 	movi	r6,1
    36e8:	180b883a 	mov	r5,r3
    36ec:	2005883a 	mov	r2,r4
    36f0:	39803826 	beq	r7,r6,37d4 <_dtoa_r+0x8f4>
    36f4:	000d883a 	mov	r6,zero
    36f8:	01d00934 	movhi	r7,16420
    36fc:	000c2b00 	call	c2b0 <__muldf3>
    3700:	000d883a 	mov	r6,zero
    3704:	000f883a 	mov	r7,zero
    3708:	1009883a 	mov	r4,r2
    370c:	180b883a 	mov	r5,r3
    3710:	1025883a 	mov	r18,r2
    3714:	1827883a 	mov	r19,r3
    3718:	000c0580 	call	c058 <__eqdf2>
    371c:	103f9a26 	beq	r2,zero,3588 <__alt_data_end+0xfffba1a8>
    3720:	d9c00617 	ldw	r7,24(sp)
    3724:	d8c00717 	ldw	r3,28(sp)
    3728:	b829883a 	mov	r20,r23
    372c:	38bfffc4 	addi	r2,r7,-1
    3730:	18ad883a 	add	r22,r3,r2
    3734:	00000a06 	br	3760 <_dtoa_r+0x880>
    3738:	000c2b00 	call	c2b0 <__muldf3>
    373c:	000d883a 	mov	r6,zero
    3740:	000f883a 	mov	r7,zero
    3744:	1009883a 	mov	r4,r2
    3748:	180b883a 	mov	r5,r3
    374c:	1025883a 	mov	r18,r2
    3750:	1827883a 	mov	r19,r3
    3754:	b829883a 	mov	r20,r23
    3758:	000c0580 	call	c058 <__eqdf2>
    375c:	103f8a26 	beq	r2,zero,3588 <__alt_data_end+0xfffba1a8>
    3760:	800d883a 	mov	r6,r16
    3764:	880f883a 	mov	r7,r17
    3768:	9009883a 	mov	r4,r18
    376c:	980b883a 	mov	r5,r19
    3770:	000b6880 	call	b688 <__divdf3>
    3774:	180b883a 	mov	r5,r3
    3778:	1009883a 	mov	r4,r2
    377c:	000d4180 	call	d418 <__fixdfsi>
    3780:	1009883a 	mov	r4,r2
    3784:	102b883a 	mov	r21,r2
    3788:	000d4980 	call	d498 <__floatsidf>
    378c:	800d883a 	mov	r6,r16
    3790:	880f883a 	mov	r7,r17
    3794:	1009883a 	mov	r4,r2
    3798:	180b883a 	mov	r5,r3
    379c:	000c2b00 	call	c2b0 <__muldf3>
    37a0:	100d883a 	mov	r6,r2
    37a4:	180f883a 	mov	r7,r3
    37a8:	9009883a 	mov	r4,r18
    37ac:	980b883a 	mov	r5,r19
    37b0:	000cb1c0 	call	cb1c <__subdf3>
    37b4:	aa000c04 	addi	r8,r21,48
    37b8:	a2000005 	stb	r8,0(r20)
    37bc:	000d883a 	mov	r6,zero
    37c0:	01d00934 	movhi	r7,16420
    37c4:	1009883a 	mov	r4,r2
    37c8:	180b883a 	mov	r5,r3
    37cc:	a5c00044 	addi	r23,r20,1
    37d0:	b53fd91e 	bne	r22,r20,3738 <__alt_data_end+0xfffba358>
    37d4:	100d883a 	mov	r6,r2
    37d8:	180f883a 	mov	r7,r3
    37dc:	1009883a 	mov	r4,r2
    37e0:	180b883a 	mov	r5,r3
    37e4:	000addc0 	call	addc <__adddf3>
    37e8:	100d883a 	mov	r6,r2
    37ec:	180f883a 	mov	r7,r3
    37f0:	8009883a 	mov	r4,r16
    37f4:	880b883a 	mov	r5,r17
    37f8:	1027883a 	mov	r19,r2
    37fc:	1825883a 	mov	r18,r3
    3800:	000c1bc0 	call	c1bc <__ledf2>
    3804:	10000816 	blt	r2,zero,3828 <_dtoa_r+0x948>
    3808:	980d883a 	mov	r6,r19
    380c:	900f883a 	mov	r7,r18
    3810:	8009883a 	mov	r4,r16
    3814:	880b883a 	mov	r5,r17
    3818:	000c0580 	call	c058 <__eqdf2>
    381c:	103f5a1e 	bne	r2,zero,3588 <__alt_data_end+0xfffba1a8>
    3820:	ad40004c 	andi	r21,r21,1
    3824:	a83f5826 	beq	r21,zero,3588 <__alt_data_end+0xfffba1a8>
    3828:	bd3fffc3 	ldbu	r20,-1(r23)
    382c:	b8bfffc4 	addi	r2,r23,-1
    3830:	1007883a 	mov	r3,r2
    3834:	01400e44 	movi	r5,57
    3838:	d9800717 	ldw	r6,28(sp)
    383c:	00000506 	br	3854 <_dtoa_r+0x974>
    3840:	18ffffc4 	addi	r3,r3,-1
    3844:	11824726 	beq	r2,r6,4164 <_dtoa_r+0x1284>
    3848:	1d000003 	ldbu	r20,0(r3)
    384c:	102f883a 	mov	r23,r2
    3850:	10bfffc4 	addi	r2,r2,-1
    3854:	a1003fcc 	andi	r4,r20,255
    3858:	2100201c 	xori	r4,r4,128
    385c:	213fe004 	addi	r4,r4,-128
    3860:	217ff726 	beq	r4,r5,3840 <__alt_data_end+0xfffba460>
    3864:	a2000044 	addi	r8,r20,1
    3868:	12000005 	stb	r8,0(r2)
    386c:	003f4606 	br	3588 <__alt_data_end+0xfffba1a8>
    3870:	d9000b17 	ldw	r4,44(sp)
    3874:	2000c826 	beq	r4,zero,3b98 <_dtoa_r+0xcb8>
    3878:	d9800317 	ldw	r6,12(sp)
    387c:	00c00044 	movi	r3,1
    3880:	1980f90e 	bge	r3,r6,3c68 <_dtoa_r+0xd88>
    3884:	d8800617 	ldw	r2,24(sp)
    3888:	d8c00a17 	ldw	r3,40(sp)
    388c:	157fffc4 	addi	r21,r2,-1
    3890:	1d41f316 	blt	r3,r21,4060 <_dtoa_r+0x1180>
    3894:	1d6bc83a 	sub	r21,r3,r21
    3898:	d9c00617 	ldw	r7,24(sp)
    389c:	3802aa16 	blt	r7,zero,4348 <_dtoa_r+0x1468>
    38a0:	dd000817 	ldw	r20,32(sp)
    38a4:	d8800617 	ldw	r2,24(sp)
    38a8:	d8c00817 	ldw	r3,32(sp)
    38ac:	01400044 	movi	r5,1
    38b0:	e009883a 	mov	r4,fp
    38b4:	1887883a 	add	r3,r3,r2
    38b8:	d8c00815 	stw	r3,32(sp)
    38bc:	b0ad883a 	add	r22,r22,r2
    38c0:	00069cc0 	call	69cc <__i2b>
    38c4:	1023883a 	mov	r17,r2
    38c8:	a0000826 	beq	r20,zero,38ec <_dtoa_r+0xa0c>
    38cc:	0580070e 	bge	zero,r22,38ec <_dtoa_r+0xa0c>
    38d0:	a005883a 	mov	r2,r20
    38d4:	b500b916 	blt	r22,r20,3bbc <_dtoa_r+0xcdc>
    38d8:	d9000817 	ldw	r4,32(sp)
    38dc:	a0a9c83a 	sub	r20,r20,r2
    38e0:	b0adc83a 	sub	r22,r22,r2
    38e4:	2089c83a 	sub	r4,r4,r2
    38e8:	d9000815 	stw	r4,32(sp)
    38ec:	d9800a17 	ldw	r6,40(sp)
    38f0:	0181810e 	bge	zero,r6,3ef8 <_dtoa_r+0x1018>
    38f4:	d9c00b17 	ldw	r7,44(sp)
    38f8:	3800b326 	beq	r7,zero,3bc8 <_dtoa_r+0xce8>
    38fc:	a800b226 	beq	r21,zero,3bc8 <_dtoa_r+0xce8>
    3900:	880b883a 	mov	r5,r17
    3904:	a80d883a 	mov	r6,r21
    3908:	e009883a 	mov	r4,fp
    390c:	0006c940 	call	6c94 <__pow5mult>
    3910:	d9800917 	ldw	r6,36(sp)
    3914:	100b883a 	mov	r5,r2
    3918:	e009883a 	mov	r4,fp
    391c:	1023883a 	mov	r17,r2
    3920:	0006a080 	call	6a08 <__multiply>
    3924:	1021883a 	mov	r16,r2
    3928:	d8800a17 	ldw	r2,40(sp)
    392c:	d9400917 	ldw	r5,36(sp)
    3930:	e009883a 	mov	r4,fp
    3934:	1545c83a 	sub	r2,r2,r21
    3938:	d8800a15 	stw	r2,40(sp)
    393c:	00066400 	call	6640 <_Bfree>
    3940:	d8c00a17 	ldw	r3,40(sp)
    3944:	18009f1e 	bne	r3,zero,3bc4 <_dtoa_r+0xce4>
    3948:	05c00044 	movi	r23,1
    394c:	e009883a 	mov	r4,fp
    3950:	b80b883a 	mov	r5,r23
    3954:	00069cc0 	call	69cc <__i2b>
    3958:	d9000d17 	ldw	r4,52(sp)
    395c:	102b883a 	mov	r21,r2
    3960:	2000ce26 	beq	r4,zero,3c9c <_dtoa_r+0xdbc>
    3964:	200d883a 	mov	r6,r4
    3968:	100b883a 	mov	r5,r2
    396c:	e009883a 	mov	r4,fp
    3970:	0006c940 	call	6c94 <__pow5mult>
    3974:	d9800317 	ldw	r6,12(sp)
    3978:	102b883a 	mov	r21,r2
    397c:	b981810e 	bge	r23,r6,3f84 <_dtoa_r+0x10a4>
    3980:	0027883a 	mov	r19,zero
    3984:	a8800417 	ldw	r2,16(r21)
    3988:	05c00804 	movi	r23,32
    398c:	10800104 	addi	r2,r2,4
    3990:	1085883a 	add	r2,r2,r2
    3994:	1085883a 	add	r2,r2,r2
    3998:	a885883a 	add	r2,r21,r2
    399c:	11000017 	ldw	r4,0(r2)
    39a0:	00068b40 	call	68b4 <__hi0bits>
    39a4:	b885c83a 	sub	r2,r23,r2
    39a8:	1585883a 	add	r2,r2,r22
    39ac:	108007cc 	andi	r2,r2,31
    39b0:	1000b326 	beq	r2,zero,3c80 <_dtoa_r+0xda0>
    39b4:	00c00804 	movi	r3,32
    39b8:	1887c83a 	sub	r3,r3,r2
    39bc:	01000104 	movi	r4,4
    39c0:	20c2cd0e 	bge	r4,r3,44f8 <_dtoa_r+0x1618>
    39c4:	00c00704 	movi	r3,28
    39c8:	1885c83a 	sub	r2,r3,r2
    39cc:	d8c00817 	ldw	r3,32(sp)
    39d0:	a0a9883a 	add	r20,r20,r2
    39d4:	b0ad883a 	add	r22,r22,r2
    39d8:	1887883a 	add	r3,r3,r2
    39dc:	d8c00815 	stw	r3,32(sp)
    39e0:	d9800817 	ldw	r6,32(sp)
    39e4:	0180040e 	bge	zero,r6,39f8 <_dtoa_r+0xb18>
    39e8:	800b883a 	mov	r5,r16
    39ec:	e009883a 	mov	r4,fp
    39f0:	0006dd40 	call	6dd4 <__lshift>
    39f4:	1021883a 	mov	r16,r2
    39f8:	0580050e 	bge	zero,r22,3a10 <_dtoa_r+0xb30>
    39fc:	a80b883a 	mov	r5,r21
    3a00:	b00d883a 	mov	r6,r22
    3a04:	e009883a 	mov	r4,fp
    3a08:	0006dd40 	call	6dd4 <__lshift>
    3a0c:	102b883a 	mov	r21,r2
    3a10:	d9c00e17 	ldw	r7,56(sp)
    3a14:	3801211e 	bne	r7,zero,3e9c <_dtoa_r+0xfbc>
    3a18:	d9800617 	ldw	r6,24(sp)
    3a1c:	0181380e 	bge	zero,r6,3f00 <_dtoa_r+0x1020>
    3a20:	d8c00b17 	ldw	r3,44(sp)
    3a24:	1800ab1e 	bne	r3,zero,3cd4 <_dtoa_r+0xdf4>
    3a28:	dc800717 	ldw	r18,28(sp)
    3a2c:	dcc00617 	ldw	r19,24(sp)
    3a30:	9029883a 	mov	r20,r18
    3a34:	00000206 	br	3a40 <_dtoa_r+0xb60>
    3a38:	00066680 	call	6668 <__multadd>
    3a3c:	1021883a 	mov	r16,r2
    3a40:	a80b883a 	mov	r5,r21
    3a44:	8009883a 	mov	r4,r16
    3a48:	0002cb80 	call	2cb8 <quorem>
    3a4c:	10800c04 	addi	r2,r2,48
    3a50:	90800005 	stb	r2,0(r18)
    3a54:	94800044 	addi	r18,r18,1
    3a58:	9507c83a 	sub	r3,r18,r20
    3a5c:	000f883a 	mov	r7,zero
    3a60:	01800284 	movi	r6,10
    3a64:	800b883a 	mov	r5,r16
    3a68:	e009883a 	mov	r4,fp
    3a6c:	1cfff216 	blt	r3,r19,3a38 <__alt_data_end+0xfffba658>
    3a70:	1011883a 	mov	r8,r2
    3a74:	d8800617 	ldw	r2,24(sp)
    3a78:	0082370e 	bge	zero,r2,4358 <_dtoa_r+0x1478>
    3a7c:	d9000717 	ldw	r4,28(sp)
    3a80:	0025883a 	mov	r18,zero
    3a84:	20af883a 	add	r23,r4,r2
    3a88:	01800044 	movi	r6,1
    3a8c:	800b883a 	mov	r5,r16
    3a90:	e009883a 	mov	r4,fp
    3a94:	da001715 	stw	r8,92(sp)
    3a98:	0006dd40 	call	6dd4 <__lshift>
    3a9c:	a80b883a 	mov	r5,r21
    3aa0:	1009883a 	mov	r4,r2
    3aa4:	d8800915 	stw	r2,36(sp)
    3aa8:	0006f1c0 	call	6f1c <__mcmp>
    3aac:	da001717 	ldw	r8,92(sp)
    3ab0:	0081800e 	bge	zero,r2,40b4 <_dtoa_r+0x11d4>
    3ab4:	b93fffc3 	ldbu	r4,-1(r23)
    3ab8:	b8bfffc4 	addi	r2,r23,-1
    3abc:	1007883a 	mov	r3,r2
    3ac0:	01800e44 	movi	r6,57
    3ac4:	d9c00717 	ldw	r7,28(sp)
    3ac8:	00000506 	br	3ae0 <_dtoa_r+0xc00>
    3acc:	18ffffc4 	addi	r3,r3,-1
    3ad0:	11c12326 	beq	r2,r7,3f60 <_dtoa_r+0x1080>
    3ad4:	19000003 	ldbu	r4,0(r3)
    3ad8:	102f883a 	mov	r23,r2
    3adc:	10bfffc4 	addi	r2,r2,-1
    3ae0:	21403fcc 	andi	r5,r4,255
    3ae4:	2940201c 	xori	r5,r5,128
    3ae8:	297fe004 	addi	r5,r5,-128
    3aec:	29bff726 	beq	r5,r6,3acc <__alt_data_end+0xfffba6ec>
    3af0:	21000044 	addi	r4,r4,1
    3af4:	11000005 	stb	r4,0(r2)
    3af8:	a80b883a 	mov	r5,r21
    3afc:	e009883a 	mov	r4,fp
    3b00:	00066400 	call	6640 <_Bfree>
    3b04:	883ea026 	beq	r17,zero,3588 <__alt_data_end+0xfffba1a8>
    3b08:	90000426 	beq	r18,zero,3b1c <_dtoa_r+0xc3c>
    3b0c:	94400326 	beq	r18,r17,3b1c <_dtoa_r+0xc3c>
    3b10:	900b883a 	mov	r5,r18
    3b14:	e009883a 	mov	r4,fp
    3b18:	00066400 	call	6640 <_Bfree>
    3b1c:	880b883a 	mov	r5,r17
    3b20:	e009883a 	mov	r4,fp
    3b24:	00066400 	call	6640 <_Bfree>
    3b28:	003e9706 	br	3588 <__alt_data_end+0xfffba1a8>
    3b2c:	01800044 	movi	r6,1
    3b30:	d9800e15 	stw	r6,56(sp)
    3b34:	003d9606 	br	3190 <__alt_data_end+0xfffb9db0>
    3b38:	d8800817 	ldw	r2,32(sp)
    3b3c:	d8c00517 	ldw	r3,20(sp)
    3b40:	d8000d15 	stw	zero,52(sp)
    3b44:	10c5c83a 	sub	r2,r2,r3
    3b48:	00c9c83a 	sub	r4,zero,r3
    3b4c:	d8800815 	stw	r2,32(sp)
    3b50:	d9000a15 	stw	r4,40(sp)
    3b54:	003d9706 	br	31b4 <__alt_data_end+0xfffb9dd4>
    3b58:	05adc83a 	sub	r22,zero,r22
    3b5c:	dd800815 	stw	r22,32(sp)
    3b60:	002d883a 	mov	r22,zero
    3b64:	003d8e06 	br	31a0 <__alt_data_end+0xfffb9dc0>
    3b68:	d9000517 	ldw	r4,20(sp)
    3b6c:	000d4980 	call	d498 <__floatsidf>
    3b70:	100d883a 	mov	r6,r2
    3b74:	180f883a 	mov	r7,r3
    3b78:	a009883a 	mov	r4,r20
    3b7c:	880b883a 	mov	r5,r17
    3b80:	000c0580 	call	c058 <__eqdf2>
    3b84:	103d7126 	beq	r2,zero,314c <__alt_data_end+0xfffb9d6c>
    3b88:	d9c00517 	ldw	r7,20(sp)
    3b8c:	39ffffc4 	addi	r7,r7,-1
    3b90:	d9c00515 	stw	r7,20(sp)
    3b94:	003d6d06 	br	314c <__alt_data_end+0xfffb9d6c>
    3b98:	dd400a17 	ldw	r21,40(sp)
    3b9c:	dd000817 	ldw	r20,32(sp)
    3ba0:	0023883a 	mov	r17,zero
    3ba4:	003f4806 	br	38c8 <__alt_data_end+0xfffba4e8>
    3ba8:	10e3c83a 	sub	r17,r2,r3
    3bac:	9448983a 	sll	r4,r18,r17
    3bb0:	003d3206 	br	307c <__alt_data_end+0xfffb9c9c>
    3bb4:	d8000e15 	stw	zero,56(sp)
    3bb8:	003d7506 	br	3190 <__alt_data_end+0xfffb9db0>
    3bbc:	b005883a 	mov	r2,r22
    3bc0:	003f4506 	br	38d8 <__alt_data_end+0xfffba4f8>
    3bc4:	dc000915 	stw	r16,36(sp)
    3bc8:	d9800a17 	ldw	r6,40(sp)
    3bcc:	d9400917 	ldw	r5,36(sp)
    3bd0:	e009883a 	mov	r4,fp
    3bd4:	0006c940 	call	6c94 <__pow5mult>
    3bd8:	1021883a 	mov	r16,r2
    3bdc:	003f5a06 	br	3948 <__alt_data_end+0xfffba568>
    3be0:	01c00044 	movi	r7,1
    3be4:	d9c00b15 	stw	r7,44(sp)
    3be8:	d8802217 	ldw	r2,136(sp)
    3bec:	0081280e 	bge	zero,r2,4090 <_dtoa_r+0x11b0>
    3bf0:	100d883a 	mov	r6,r2
    3bf4:	1021883a 	mov	r16,r2
    3bf8:	d8800c15 	stw	r2,48(sp)
    3bfc:	d8800615 	stw	r2,24(sp)
    3c00:	003d8806 	br	3224 <__alt_data_end+0xfffb9e44>
    3c04:	d8800617 	ldw	r2,24(sp)
    3c08:	00be9b16 	blt	zero,r2,3678 <__alt_data_end+0xfffba298>
    3c0c:	10010f1e 	bne	r2,zero,404c <_dtoa_r+0x116c>
    3c10:	880b883a 	mov	r5,r17
    3c14:	000d883a 	mov	r6,zero
    3c18:	01d00534 	movhi	r7,16404
    3c1c:	8009883a 	mov	r4,r16
    3c20:	000c2b00 	call	c2b0 <__muldf3>
    3c24:	900d883a 	mov	r6,r18
    3c28:	980f883a 	mov	r7,r19
    3c2c:	1009883a 	mov	r4,r2
    3c30:	180b883a 	mov	r5,r3
    3c34:	000c0e00 	call	c0e0 <__gedf2>
    3c38:	002b883a 	mov	r21,zero
    3c3c:	0023883a 	mov	r17,zero
    3c40:	1000bf16 	blt	r2,zero,3f40 <_dtoa_r+0x1060>
    3c44:	d9802217 	ldw	r6,136(sp)
    3c48:	ddc00717 	ldw	r23,28(sp)
    3c4c:	018c303a 	nor	r6,zero,r6
    3c50:	d9800515 	stw	r6,20(sp)
    3c54:	a80b883a 	mov	r5,r21
    3c58:	e009883a 	mov	r4,fp
    3c5c:	00066400 	call	6640 <_Bfree>
    3c60:	883e4926 	beq	r17,zero,3588 <__alt_data_end+0xfffba1a8>
    3c64:	003fad06 	br	3b1c <__alt_data_end+0xfffba73c>
    3c68:	d9c01117 	ldw	r7,68(sp)
    3c6c:	3801bc26 	beq	r7,zero,4360 <_dtoa_r+0x1480>
    3c70:	10810cc4 	addi	r2,r2,1075
    3c74:	dd400a17 	ldw	r21,40(sp)
    3c78:	dd000817 	ldw	r20,32(sp)
    3c7c:	003f0a06 	br	38a8 <__alt_data_end+0xfffba4c8>
    3c80:	00800704 	movi	r2,28
    3c84:	d9000817 	ldw	r4,32(sp)
    3c88:	a0a9883a 	add	r20,r20,r2
    3c8c:	b0ad883a 	add	r22,r22,r2
    3c90:	2089883a 	add	r4,r4,r2
    3c94:	d9000815 	stw	r4,32(sp)
    3c98:	003f5106 	br	39e0 <__alt_data_end+0xfffba600>
    3c9c:	d8c00317 	ldw	r3,12(sp)
    3ca0:	b8c1fc0e 	bge	r23,r3,4494 <_dtoa_r+0x15b4>
    3ca4:	0027883a 	mov	r19,zero
    3ca8:	b805883a 	mov	r2,r23
    3cac:	003f3e06 	br	39a8 <__alt_data_end+0xfffba5c8>
    3cb0:	880b883a 	mov	r5,r17
    3cb4:	e009883a 	mov	r4,fp
    3cb8:	000f883a 	mov	r7,zero
    3cbc:	01800284 	movi	r6,10
    3cc0:	00066680 	call	6668 <__multadd>
    3cc4:	d9000c17 	ldw	r4,48(sp)
    3cc8:	1023883a 	mov	r17,r2
    3ccc:	0102040e 	bge	zero,r4,44e0 <_dtoa_r+0x1600>
    3cd0:	d9000615 	stw	r4,24(sp)
    3cd4:	0500050e 	bge	zero,r20,3cec <_dtoa_r+0xe0c>
    3cd8:	880b883a 	mov	r5,r17
    3cdc:	a00d883a 	mov	r6,r20
    3ce0:	e009883a 	mov	r4,fp
    3ce4:	0006dd40 	call	6dd4 <__lshift>
    3ce8:	1023883a 	mov	r17,r2
    3cec:	9801241e 	bne	r19,zero,4180 <_dtoa_r+0x12a0>
    3cf0:	8829883a 	mov	r20,r17
    3cf4:	d9000617 	ldw	r4,24(sp)
    3cf8:	dcc00717 	ldw	r19,28(sp)
    3cfc:	9480004c 	andi	r18,r18,1
    3d00:	20bfffc4 	addi	r2,r4,-1
    3d04:	9885883a 	add	r2,r19,r2
    3d08:	d8800415 	stw	r2,16(sp)
    3d0c:	dc800615 	stw	r18,24(sp)
    3d10:	a80b883a 	mov	r5,r21
    3d14:	8009883a 	mov	r4,r16
    3d18:	0002cb80 	call	2cb8 <quorem>
    3d1c:	880b883a 	mov	r5,r17
    3d20:	8009883a 	mov	r4,r16
    3d24:	102f883a 	mov	r23,r2
    3d28:	0006f1c0 	call	6f1c <__mcmp>
    3d2c:	a80b883a 	mov	r5,r21
    3d30:	a00d883a 	mov	r6,r20
    3d34:	e009883a 	mov	r4,fp
    3d38:	102d883a 	mov	r22,r2
    3d3c:	0006f7c0 	call	6f7c <__mdiff>
    3d40:	1007883a 	mov	r3,r2
    3d44:	10800317 	ldw	r2,12(r2)
    3d48:	bc800c04 	addi	r18,r23,48
    3d4c:	180b883a 	mov	r5,r3
    3d50:	10004e1e 	bne	r2,zero,3e8c <_dtoa_r+0xfac>
    3d54:	8009883a 	mov	r4,r16
    3d58:	d8c01615 	stw	r3,88(sp)
    3d5c:	0006f1c0 	call	6f1c <__mcmp>
    3d60:	d8c01617 	ldw	r3,88(sp)
    3d64:	e009883a 	mov	r4,fp
    3d68:	d8801615 	stw	r2,88(sp)
    3d6c:	180b883a 	mov	r5,r3
    3d70:	00066400 	call	6640 <_Bfree>
    3d74:	d8801617 	ldw	r2,88(sp)
    3d78:	1000041e 	bne	r2,zero,3d8c <_dtoa_r+0xeac>
    3d7c:	d9800317 	ldw	r6,12(sp)
    3d80:	3000021e 	bne	r6,zero,3d8c <_dtoa_r+0xeac>
    3d84:	d8c00617 	ldw	r3,24(sp)
    3d88:	18003726 	beq	r3,zero,3e68 <_dtoa_r+0xf88>
    3d8c:	b0002016 	blt	r22,zero,3e10 <_dtoa_r+0xf30>
    3d90:	b000041e 	bne	r22,zero,3da4 <_dtoa_r+0xec4>
    3d94:	d9000317 	ldw	r4,12(sp)
    3d98:	2000021e 	bne	r4,zero,3da4 <_dtoa_r+0xec4>
    3d9c:	d8c00617 	ldw	r3,24(sp)
    3da0:	18001b26 	beq	r3,zero,3e10 <_dtoa_r+0xf30>
    3da4:	00810716 	blt	zero,r2,41c4 <_dtoa_r+0x12e4>
    3da8:	d8c00417 	ldw	r3,16(sp)
    3dac:	9d800044 	addi	r22,r19,1
    3db0:	9c800005 	stb	r18,0(r19)
    3db4:	b02f883a 	mov	r23,r22
    3db8:	98c10626 	beq	r19,r3,41d4 <_dtoa_r+0x12f4>
    3dbc:	800b883a 	mov	r5,r16
    3dc0:	000f883a 	mov	r7,zero
    3dc4:	01800284 	movi	r6,10
    3dc8:	e009883a 	mov	r4,fp
    3dcc:	00066680 	call	6668 <__multadd>
    3dd0:	1021883a 	mov	r16,r2
    3dd4:	000f883a 	mov	r7,zero
    3dd8:	01800284 	movi	r6,10
    3ddc:	880b883a 	mov	r5,r17
    3de0:	e009883a 	mov	r4,fp
    3de4:	8d002526 	beq	r17,r20,3e7c <_dtoa_r+0xf9c>
    3de8:	00066680 	call	6668 <__multadd>
    3dec:	a00b883a 	mov	r5,r20
    3df0:	000f883a 	mov	r7,zero
    3df4:	01800284 	movi	r6,10
    3df8:	e009883a 	mov	r4,fp
    3dfc:	1023883a 	mov	r17,r2
    3e00:	00066680 	call	6668 <__multadd>
    3e04:	1029883a 	mov	r20,r2
    3e08:	b027883a 	mov	r19,r22
    3e0c:	003fc006 	br	3d10 <__alt_data_end+0xfffba930>
    3e10:	9011883a 	mov	r8,r18
    3e14:	00800e0e 	bge	zero,r2,3e50 <_dtoa_r+0xf70>
    3e18:	800b883a 	mov	r5,r16
    3e1c:	01800044 	movi	r6,1
    3e20:	e009883a 	mov	r4,fp
    3e24:	da001715 	stw	r8,92(sp)
    3e28:	0006dd40 	call	6dd4 <__lshift>
    3e2c:	a80b883a 	mov	r5,r21
    3e30:	1009883a 	mov	r4,r2
    3e34:	1021883a 	mov	r16,r2
    3e38:	0006f1c0 	call	6f1c <__mcmp>
    3e3c:	da001717 	ldw	r8,92(sp)
    3e40:	0081960e 	bge	zero,r2,449c <_dtoa_r+0x15bc>
    3e44:	00800e44 	movi	r2,57
    3e48:	40817026 	beq	r8,r2,440c <_dtoa_r+0x152c>
    3e4c:	ba000c44 	addi	r8,r23,49
    3e50:	8825883a 	mov	r18,r17
    3e54:	9dc00044 	addi	r23,r19,1
    3e58:	9a000005 	stb	r8,0(r19)
    3e5c:	a023883a 	mov	r17,r20
    3e60:	dc000915 	stw	r16,36(sp)
    3e64:	003f2406 	br	3af8 <__alt_data_end+0xfffba718>
    3e68:	00800e44 	movi	r2,57
    3e6c:	9011883a 	mov	r8,r18
    3e70:	90816626 	beq	r18,r2,440c <_dtoa_r+0x152c>
    3e74:	05bff516 	blt	zero,r22,3e4c <__alt_data_end+0xfffbaa6c>
    3e78:	003ff506 	br	3e50 <__alt_data_end+0xfffbaa70>
    3e7c:	00066680 	call	6668 <__multadd>
    3e80:	1023883a 	mov	r17,r2
    3e84:	1029883a 	mov	r20,r2
    3e88:	003fdf06 	br	3e08 <__alt_data_end+0xfffbaa28>
    3e8c:	e009883a 	mov	r4,fp
    3e90:	00066400 	call	6640 <_Bfree>
    3e94:	00800044 	movi	r2,1
    3e98:	003fbc06 	br	3d8c <__alt_data_end+0xfffba9ac>
    3e9c:	a80b883a 	mov	r5,r21
    3ea0:	8009883a 	mov	r4,r16
    3ea4:	0006f1c0 	call	6f1c <__mcmp>
    3ea8:	103edb0e 	bge	r2,zero,3a18 <__alt_data_end+0xfffba638>
    3eac:	800b883a 	mov	r5,r16
    3eb0:	000f883a 	mov	r7,zero
    3eb4:	01800284 	movi	r6,10
    3eb8:	e009883a 	mov	r4,fp
    3ebc:	00066680 	call	6668 <__multadd>
    3ec0:	1021883a 	mov	r16,r2
    3ec4:	d8800517 	ldw	r2,20(sp)
    3ec8:	d8c00b17 	ldw	r3,44(sp)
    3ecc:	10bfffc4 	addi	r2,r2,-1
    3ed0:	d8800515 	stw	r2,20(sp)
    3ed4:	183f761e 	bne	r3,zero,3cb0 <__alt_data_end+0xfffba8d0>
    3ed8:	d9000c17 	ldw	r4,48(sp)
    3edc:	0101730e 	bge	zero,r4,44ac <_dtoa_r+0x15cc>
    3ee0:	d9000615 	stw	r4,24(sp)
    3ee4:	003ed006 	br	3a28 <__alt_data_end+0xfffba648>
    3ee8:	00800084 	movi	r2,2
    3eec:	3081861e 	bne	r6,r2,4508 <_dtoa_r+0x1628>
    3ef0:	d8000b15 	stw	zero,44(sp)
    3ef4:	003f3c06 	br	3be8 <__alt_data_end+0xfffba808>
    3ef8:	dc000917 	ldw	r16,36(sp)
    3efc:	003e9206 	br	3948 <__alt_data_end+0xfffba568>
    3f00:	d9c00317 	ldw	r7,12(sp)
    3f04:	00800084 	movi	r2,2
    3f08:	11fec50e 	bge	r2,r7,3a20 <__alt_data_end+0xfffba640>
    3f0c:	d9000617 	ldw	r4,24(sp)
    3f10:	20013c1e 	bne	r4,zero,4404 <_dtoa_r+0x1524>
    3f14:	a80b883a 	mov	r5,r21
    3f18:	000f883a 	mov	r7,zero
    3f1c:	01800144 	movi	r6,5
    3f20:	e009883a 	mov	r4,fp
    3f24:	00066680 	call	6668 <__multadd>
    3f28:	100b883a 	mov	r5,r2
    3f2c:	8009883a 	mov	r4,r16
    3f30:	102b883a 	mov	r21,r2
    3f34:	0006f1c0 	call	6f1c <__mcmp>
    3f38:	dc000915 	stw	r16,36(sp)
    3f3c:	00bf410e 	bge	zero,r2,3c44 <__alt_data_end+0xfffba864>
    3f40:	d9c00717 	ldw	r7,28(sp)
    3f44:	00800c44 	movi	r2,49
    3f48:	38800005 	stb	r2,0(r7)
    3f4c:	d8800517 	ldw	r2,20(sp)
    3f50:	3dc00044 	addi	r23,r7,1
    3f54:	10800044 	addi	r2,r2,1
    3f58:	d8800515 	stw	r2,20(sp)
    3f5c:	003f3d06 	br	3c54 <__alt_data_end+0xfffba874>
    3f60:	d9800517 	ldw	r6,20(sp)
    3f64:	d9c00717 	ldw	r7,28(sp)
    3f68:	00800c44 	movi	r2,49
    3f6c:	31800044 	addi	r6,r6,1
    3f70:	d9800515 	stw	r6,20(sp)
    3f74:	38800005 	stb	r2,0(r7)
    3f78:	003edf06 	br	3af8 <__alt_data_end+0xfffba718>
    3f7c:	d8000b15 	stw	zero,44(sp)
    3f80:	003c9f06 	br	3200 <__alt_data_end+0xfffb9e20>
    3f84:	903e7e1e 	bne	r18,zero,3980 <__alt_data_end+0xfffba5a0>
    3f88:	00800434 	movhi	r2,16
    3f8c:	10bfffc4 	addi	r2,r2,-1
    3f90:	9884703a 	and	r2,r19,r2
    3f94:	1000ea1e 	bne	r2,zero,4340 <_dtoa_r+0x1460>
    3f98:	9cdffc2c 	andhi	r19,r19,32752
    3f9c:	9800e826 	beq	r19,zero,4340 <_dtoa_r+0x1460>
    3fa0:	d9c00817 	ldw	r7,32(sp)
    3fa4:	b5800044 	addi	r22,r22,1
    3fa8:	04c00044 	movi	r19,1
    3fac:	39c00044 	addi	r7,r7,1
    3fb0:	d9c00815 	stw	r7,32(sp)
    3fb4:	d8800d17 	ldw	r2,52(sp)
    3fb8:	103e721e 	bne	r2,zero,3984 <__alt_data_end+0xfffba5a4>
    3fbc:	00800044 	movi	r2,1
    3fc0:	003e7906 	br	39a8 <__alt_data_end+0xfffba5c8>
    3fc4:	8009883a 	mov	r4,r16
    3fc8:	000d4980 	call	d498 <__floatsidf>
    3fcc:	d9800f17 	ldw	r6,60(sp)
    3fd0:	d9c01017 	ldw	r7,64(sp)
    3fd4:	1009883a 	mov	r4,r2
    3fd8:	180b883a 	mov	r5,r3
    3fdc:	000c2b00 	call	c2b0 <__muldf3>
    3fe0:	000d883a 	mov	r6,zero
    3fe4:	01d00734 	movhi	r7,16412
    3fe8:	1009883a 	mov	r4,r2
    3fec:	180b883a 	mov	r5,r3
    3ff0:	000addc0 	call	addc <__adddf3>
    3ff4:	047f3034 	movhi	r17,64704
    3ff8:	1021883a 	mov	r16,r2
    3ffc:	1c63883a 	add	r17,r3,r17
    4000:	d9000f17 	ldw	r4,60(sp)
    4004:	d9401017 	ldw	r5,64(sp)
    4008:	000d883a 	mov	r6,zero
    400c:	01d00534 	movhi	r7,16404
    4010:	000cb1c0 	call	cb1c <__subdf3>
    4014:	800d883a 	mov	r6,r16
    4018:	880f883a 	mov	r7,r17
    401c:	1009883a 	mov	r4,r2
    4020:	180b883a 	mov	r5,r3
    4024:	102b883a 	mov	r21,r2
    4028:	1829883a 	mov	r20,r3
    402c:	000c0e00 	call	c0e0 <__gedf2>
    4030:	00806c16 	blt	zero,r2,41e4 <_dtoa_r+0x1304>
    4034:	89e0003c 	xorhi	r7,r17,32768
    4038:	800d883a 	mov	r6,r16
    403c:	a809883a 	mov	r4,r21
    4040:	a00b883a 	mov	r5,r20
    4044:	000c1bc0 	call	c1bc <__ledf2>
    4048:	103d7e0e 	bge	r2,zero,3644 <__alt_data_end+0xfffba264>
    404c:	002b883a 	mov	r21,zero
    4050:	0023883a 	mov	r17,zero
    4054:	003efb06 	br	3c44 <__alt_data_end+0xfffba864>
    4058:	d8800717 	ldw	r2,28(sp)
    405c:	003bd006 	br	2fa0 <__alt_data_end+0xfffb9bc0>
    4060:	d9000a17 	ldw	r4,40(sp)
    4064:	d9800d17 	ldw	r6,52(sp)
    4068:	dd400a15 	stw	r21,40(sp)
    406c:	a905c83a 	sub	r2,r21,r4
    4070:	308d883a 	add	r6,r6,r2
    4074:	d9800d15 	stw	r6,52(sp)
    4078:	002b883a 	mov	r21,zero
    407c:	003e0606 	br	3898 <__alt_data_end+0xfffba4b8>
    4080:	9023883a 	mov	r17,r18
    4084:	9829883a 	mov	r20,r19
    4088:	04000084 	movi	r16,2
    408c:	003c9206 	br	32d8 <__alt_data_end+0xfffb9ef8>
    4090:	04000044 	movi	r16,1
    4094:	dc000c15 	stw	r16,48(sp)
    4098:	dc000615 	stw	r16,24(sp)
    409c:	dc002215 	stw	r16,136(sp)
    40a0:	e0001115 	stw	zero,68(fp)
    40a4:	000b883a 	mov	r5,zero
    40a8:	003c6906 	br	3250 <__alt_data_end+0xfffb9e70>
    40ac:	3021883a 	mov	r16,r6
    40b0:	003ffb06 	br	40a0 <__alt_data_end+0xfffbacc0>
    40b4:	1000021e 	bne	r2,zero,40c0 <_dtoa_r+0x11e0>
    40b8:	4200004c 	andi	r8,r8,1
    40bc:	403e7d1e 	bne	r8,zero,3ab4 <__alt_data_end+0xfffba6d4>
    40c0:	01000c04 	movi	r4,48
    40c4:	00000106 	br	40cc <_dtoa_r+0x11ec>
    40c8:	102f883a 	mov	r23,r2
    40cc:	b8bfffc4 	addi	r2,r23,-1
    40d0:	10c00007 	ldb	r3,0(r2)
    40d4:	193ffc26 	beq	r3,r4,40c8 <__alt_data_end+0xfffbace8>
    40d8:	003e8706 	br	3af8 <__alt_data_end+0xfffba718>
    40dc:	d8800517 	ldw	r2,20(sp)
    40e0:	00a3c83a 	sub	r17,zero,r2
    40e4:	8800a426 	beq	r17,zero,4378 <_dtoa_r+0x1498>
    40e8:	888003cc 	andi	r2,r17,15
    40ec:	100490fa 	slli	r2,r2,3
    40f0:	00c00074 	movhi	r3,1
    40f4:	18c1bb04 	addi	r3,r3,1772
    40f8:	1885883a 	add	r2,r3,r2
    40fc:	11800017 	ldw	r6,0(r2)
    4100:	11c00117 	ldw	r7,4(r2)
    4104:	9009883a 	mov	r4,r18
    4108:	980b883a 	mov	r5,r19
    410c:	8823d13a 	srai	r17,r17,4
    4110:	000c2b00 	call	c2b0 <__muldf3>
    4114:	d8800f15 	stw	r2,60(sp)
    4118:	d8c01015 	stw	r3,64(sp)
    411c:	8800e826 	beq	r17,zero,44c0 <_dtoa_r+0x15e0>
    4120:	05000074 	movhi	r20,1
    4124:	a501b104 	addi	r20,r20,1732
    4128:	04000084 	movi	r16,2
    412c:	8980004c 	andi	r6,r17,1
    4130:	1009883a 	mov	r4,r2
    4134:	8823d07a 	srai	r17,r17,1
    4138:	180b883a 	mov	r5,r3
    413c:	30000426 	beq	r6,zero,4150 <_dtoa_r+0x1270>
    4140:	a1800017 	ldw	r6,0(r20)
    4144:	a1c00117 	ldw	r7,4(r20)
    4148:	84000044 	addi	r16,r16,1
    414c:	000c2b00 	call	c2b0 <__muldf3>
    4150:	a5000204 	addi	r20,r20,8
    4154:	883ff51e 	bne	r17,zero,412c <__alt_data_end+0xfffbad4c>
    4158:	d8800f15 	stw	r2,60(sp)
    415c:	d8c01015 	stw	r3,64(sp)
    4160:	003c7606 	br	333c <__alt_data_end+0xfffb9f5c>
    4164:	00c00c04 	movi	r3,48
    4168:	10c00005 	stb	r3,0(r2)
    416c:	d8c00517 	ldw	r3,20(sp)
    4170:	bd3fffc3 	ldbu	r20,-1(r23)
    4174:	18c00044 	addi	r3,r3,1
    4178:	d8c00515 	stw	r3,20(sp)
    417c:	003db906 	br	3864 <__alt_data_end+0xfffba484>
    4180:	89400117 	ldw	r5,4(r17)
    4184:	e009883a 	mov	r4,fp
    4188:	00065980 	call	6598 <_Balloc>
    418c:	89800417 	ldw	r6,16(r17)
    4190:	89400304 	addi	r5,r17,12
    4194:	11000304 	addi	r4,r2,12
    4198:	31800084 	addi	r6,r6,2
    419c:	318d883a 	add	r6,r6,r6
    41a0:	318d883a 	add	r6,r6,r6
    41a4:	1027883a 	mov	r19,r2
    41a8:	00061cc0 	call	61cc <memcpy>
    41ac:	01800044 	movi	r6,1
    41b0:	980b883a 	mov	r5,r19
    41b4:	e009883a 	mov	r4,fp
    41b8:	0006dd40 	call	6dd4 <__lshift>
    41bc:	1029883a 	mov	r20,r2
    41c0:	003ecc06 	br	3cf4 <__alt_data_end+0xfffba914>
    41c4:	00800e44 	movi	r2,57
    41c8:	90809026 	beq	r18,r2,440c <_dtoa_r+0x152c>
    41cc:	92000044 	addi	r8,r18,1
    41d0:	003f1f06 	br	3e50 <__alt_data_end+0xfffbaa70>
    41d4:	9011883a 	mov	r8,r18
    41d8:	8825883a 	mov	r18,r17
    41dc:	a023883a 	mov	r17,r20
    41e0:	003e2906 	br	3a88 <__alt_data_end+0xfffba6a8>
    41e4:	002b883a 	mov	r21,zero
    41e8:	0023883a 	mov	r17,zero
    41ec:	003f5406 	br	3f40 <__alt_data_end+0xfffbab60>
    41f0:	61bfffc4 	addi	r6,r12,-1
    41f4:	300490fa 	slli	r2,r6,3
    41f8:	00c00074 	movhi	r3,1
    41fc:	18c1bb04 	addi	r3,r3,1772
    4200:	1885883a 	add	r2,r3,r2
    4204:	11000017 	ldw	r4,0(r2)
    4208:	11400117 	ldw	r5,4(r2)
    420c:	d8800717 	ldw	r2,28(sp)
    4210:	880f883a 	mov	r7,r17
    4214:	d9801215 	stw	r6,72(sp)
    4218:	800d883a 	mov	r6,r16
    421c:	db001615 	stw	r12,88(sp)
    4220:	15c00044 	addi	r23,r2,1
    4224:	000c2b00 	call	c2b0 <__muldf3>
    4228:	d9401017 	ldw	r5,64(sp)
    422c:	d9000f17 	ldw	r4,60(sp)
    4230:	d8c01515 	stw	r3,84(sp)
    4234:	d8801415 	stw	r2,80(sp)
    4238:	000d4180 	call	d418 <__fixdfsi>
    423c:	1009883a 	mov	r4,r2
    4240:	1021883a 	mov	r16,r2
    4244:	000d4980 	call	d498 <__floatsidf>
    4248:	d9000f17 	ldw	r4,60(sp)
    424c:	d9401017 	ldw	r5,64(sp)
    4250:	100d883a 	mov	r6,r2
    4254:	180f883a 	mov	r7,r3
    4258:	000cb1c0 	call	cb1c <__subdf3>
    425c:	1829883a 	mov	r20,r3
    4260:	d8c00717 	ldw	r3,28(sp)
    4264:	84000c04 	addi	r16,r16,48
    4268:	1023883a 	mov	r17,r2
    426c:	1c000005 	stb	r16,0(r3)
    4270:	db001617 	ldw	r12,88(sp)
    4274:	00800044 	movi	r2,1
    4278:	60802226 	beq	r12,r2,4304 <_dtoa_r+0x1424>
    427c:	d9c00717 	ldw	r7,28(sp)
    4280:	8805883a 	mov	r2,r17
    4284:	b82b883a 	mov	r21,r23
    4288:	3b19883a 	add	r12,r7,r12
    428c:	6023883a 	mov	r17,r12
    4290:	a007883a 	mov	r3,r20
    4294:	dc800f15 	stw	r18,60(sp)
    4298:	000d883a 	mov	r6,zero
    429c:	01d00934 	movhi	r7,16420
    42a0:	1009883a 	mov	r4,r2
    42a4:	180b883a 	mov	r5,r3
    42a8:	000c2b00 	call	c2b0 <__muldf3>
    42ac:	180b883a 	mov	r5,r3
    42b0:	1009883a 	mov	r4,r2
    42b4:	1829883a 	mov	r20,r3
    42b8:	1025883a 	mov	r18,r2
    42bc:	000d4180 	call	d418 <__fixdfsi>
    42c0:	1009883a 	mov	r4,r2
    42c4:	1021883a 	mov	r16,r2
    42c8:	000d4980 	call	d498 <__floatsidf>
    42cc:	100d883a 	mov	r6,r2
    42d0:	180f883a 	mov	r7,r3
    42d4:	9009883a 	mov	r4,r18
    42d8:	a00b883a 	mov	r5,r20
    42dc:	84000c04 	addi	r16,r16,48
    42e0:	000cb1c0 	call	cb1c <__subdf3>
    42e4:	ad400044 	addi	r21,r21,1
    42e8:	ac3fffc5 	stb	r16,-1(r21)
    42ec:	ac7fea1e 	bne	r21,r17,4298 <__alt_data_end+0xfffbaeb8>
    42f0:	1023883a 	mov	r17,r2
    42f4:	d8801217 	ldw	r2,72(sp)
    42f8:	dc800f17 	ldw	r18,60(sp)
    42fc:	1829883a 	mov	r20,r3
    4300:	b8af883a 	add	r23,r23,r2
    4304:	d9001417 	ldw	r4,80(sp)
    4308:	d9401517 	ldw	r5,84(sp)
    430c:	000d883a 	mov	r6,zero
    4310:	01cff834 	movhi	r7,16352
    4314:	000addc0 	call	addc <__adddf3>
    4318:	880d883a 	mov	r6,r17
    431c:	a00f883a 	mov	r7,r20
    4320:	1009883a 	mov	r4,r2
    4324:	180b883a 	mov	r5,r3
    4328:	000c1bc0 	call	c1bc <__ledf2>
    432c:	10003e0e 	bge	r2,zero,4428 <_dtoa_r+0x1548>
    4330:	d9001317 	ldw	r4,76(sp)
    4334:	bd3fffc3 	ldbu	r20,-1(r23)
    4338:	d9000515 	stw	r4,20(sp)
    433c:	003d3b06 	br	382c <__alt_data_end+0xfffba44c>
    4340:	0027883a 	mov	r19,zero
    4344:	003f1b06 	br	3fb4 <__alt_data_end+0xfffbabd4>
    4348:	d8800817 	ldw	r2,32(sp)
    434c:	11e9c83a 	sub	r20,r2,r7
    4350:	0005883a 	mov	r2,zero
    4354:	003d5406 	br	38a8 <__alt_data_end+0xfffba4c8>
    4358:	00800044 	movi	r2,1
    435c:	003dc706 	br	3a7c <__alt_data_end+0xfffba69c>
    4360:	d8c00217 	ldw	r3,8(sp)
    4364:	00800d84 	movi	r2,54
    4368:	dd400a17 	ldw	r21,40(sp)
    436c:	10c5c83a 	sub	r2,r2,r3
    4370:	dd000817 	ldw	r20,32(sp)
    4374:	003d4c06 	br	38a8 <__alt_data_end+0xfffba4c8>
    4378:	dc800f15 	stw	r18,60(sp)
    437c:	dcc01015 	stw	r19,64(sp)
    4380:	04000084 	movi	r16,2
    4384:	003bed06 	br	333c <__alt_data_end+0xfffb9f5c>
    4388:	d9000617 	ldw	r4,24(sp)
    438c:	203f0d26 	beq	r4,zero,3fc4 <__alt_data_end+0xfffbabe4>
    4390:	d9800c17 	ldw	r6,48(sp)
    4394:	01bcab0e 	bge	zero,r6,3644 <__alt_data_end+0xfffba264>
    4398:	d9401017 	ldw	r5,64(sp)
    439c:	d9000f17 	ldw	r4,60(sp)
    43a0:	000d883a 	mov	r6,zero
    43a4:	01d00934 	movhi	r7,16420
    43a8:	000c2b00 	call	c2b0 <__muldf3>
    43ac:	81000044 	addi	r4,r16,1
    43b0:	d8800f15 	stw	r2,60(sp)
    43b4:	d8c01015 	stw	r3,64(sp)
    43b8:	000d4980 	call	d498 <__floatsidf>
    43bc:	d9800f17 	ldw	r6,60(sp)
    43c0:	d9c01017 	ldw	r7,64(sp)
    43c4:	1009883a 	mov	r4,r2
    43c8:	180b883a 	mov	r5,r3
    43cc:	000c2b00 	call	c2b0 <__muldf3>
    43d0:	01d00734 	movhi	r7,16412
    43d4:	000d883a 	mov	r6,zero
    43d8:	1009883a 	mov	r4,r2
    43dc:	180b883a 	mov	r5,r3
    43e0:	000addc0 	call	addc <__adddf3>
    43e4:	d9c00517 	ldw	r7,20(sp)
    43e8:	047f3034 	movhi	r17,64704
    43ec:	1021883a 	mov	r16,r2
    43f0:	39ffffc4 	addi	r7,r7,-1
    43f4:	d9c01315 	stw	r7,76(sp)
    43f8:	1c63883a 	add	r17,r3,r17
    43fc:	db000c17 	ldw	r12,48(sp)
    4400:	003bea06 	br	33ac <__alt_data_end+0xfffb9fcc>
    4404:	dc000915 	stw	r16,36(sp)
    4408:	003e0e06 	br	3c44 <__alt_data_end+0xfffba864>
    440c:	01000e44 	movi	r4,57
    4410:	8825883a 	mov	r18,r17
    4414:	9dc00044 	addi	r23,r19,1
    4418:	99000005 	stb	r4,0(r19)
    441c:	a023883a 	mov	r17,r20
    4420:	dc000915 	stw	r16,36(sp)
    4424:	003da406 	br	3ab8 <__alt_data_end+0xfffba6d8>
    4428:	d9801417 	ldw	r6,80(sp)
    442c:	d9c01517 	ldw	r7,84(sp)
    4430:	0009883a 	mov	r4,zero
    4434:	014ff834 	movhi	r5,16352
    4438:	000cb1c0 	call	cb1c <__subdf3>
    443c:	880d883a 	mov	r6,r17
    4440:	a00f883a 	mov	r7,r20
    4444:	1009883a 	mov	r4,r2
    4448:	180b883a 	mov	r5,r3
    444c:	000c0e00 	call	c0e0 <__gedf2>
    4450:	00bc7c0e 	bge	zero,r2,3644 <__alt_data_end+0xfffba264>
    4454:	01000c04 	movi	r4,48
    4458:	00000106 	br	4460 <_dtoa_r+0x1580>
    445c:	102f883a 	mov	r23,r2
    4460:	b8bfffc4 	addi	r2,r23,-1
    4464:	10c00007 	ldb	r3,0(r2)
    4468:	193ffc26 	beq	r3,r4,445c <__alt_data_end+0xfffbb07c>
    446c:	d9801317 	ldw	r6,76(sp)
    4470:	d9800515 	stw	r6,20(sp)
    4474:	003c4406 	br	3588 <__alt_data_end+0xfffba1a8>
    4478:	d9801317 	ldw	r6,76(sp)
    447c:	d9800515 	stw	r6,20(sp)
    4480:	003cea06 	br	382c <__alt_data_end+0xfffba44c>
    4484:	dd800f17 	ldw	r22,60(sp)
    4488:	dcc01017 	ldw	r19,64(sp)
    448c:	dc801217 	ldw	r18,72(sp)
    4490:	003c6c06 	br	3644 <__alt_data_end+0xfffba264>
    4494:	903e031e 	bne	r18,zero,3ca4 <__alt_data_end+0xfffba8c4>
    4498:	003ebb06 	br	3f88 <__alt_data_end+0xfffbaba8>
    449c:	103e6c1e 	bne	r2,zero,3e50 <__alt_data_end+0xfffbaa70>
    44a0:	4080004c 	andi	r2,r8,1
    44a4:	103e6a26 	beq	r2,zero,3e50 <__alt_data_end+0xfffbaa70>
    44a8:	003e6606 	br	3e44 <__alt_data_end+0xfffbaa64>
    44ac:	d8c00317 	ldw	r3,12(sp)
    44b0:	00800084 	movi	r2,2
    44b4:	10c02916 	blt	r2,r3,455c <_dtoa_r+0x167c>
    44b8:	d9000c17 	ldw	r4,48(sp)
    44bc:	003e8806 	br	3ee0 <__alt_data_end+0xfffbab00>
    44c0:	04000084 	movi	r16,2
    44c4:	003b9d06 	br	333c <__alt_data_end+0xfffb9f5c>
    44c8:	d9001317 	ldw	r4,76(sp)
    44cc:	d9000515 	stw	r4,20(sp)
    44d0:	003cd606 	br	382c <__alt_data_end+0xfffba44c>
    44d4:	d8801317 	ldw	r2,76(sp)
    44d8:	d8800515 	stw	r2,20(sp)
    44dc:	003c2a06 	br	3588 <__alt_data_end+0xfffba1a8>
    44e0:	d9800317 	ldw	r6,12(sp)
    44e4:	00800084 	movi	r2,2
    44e8:	11801516 	blt	r2,r6,4540 <_dtoa_r+0x1660>
    44ec:	d9c00c17 	ldw	r7,48(sp)
    44f0:	d9c00615 	stw	r7,24(sp)
    44f4:	003df706 	br	3cd4 <__alt_data_end+0xfffba8f4>
    44f8:	193d3926 	beq	r3,r4,39e0 <__alt_data_end+0xfffba600>
    44fc:	00c00f04 	movi	r3,60
    4500:	1885c83a 	sub	r2,r3,r2
    4504:	003ddf06 	br	3c84 <__alt_data_end+0xfffba8a4>
    4508:	e009883a 	mov	r4,fp
    450c:	e0001115 	stw	zero,68(fp)
    4510:	000b883a 	mov	r5,zero
    4514:	00065980 	call	6598 <_Balloc>
    4518:	d8800715 	stw	r2,28(sp)
    451c:	d8c00717 	ldw	r3,28(sp)
    4520:	00bfffc4 	movi	r2,-1
    4524:	01000044 	movi	r4,1
    4528:	d8800c15 	stw	r2,48(sp)
    452c:	e0c01015 	stw	r3,64(fp)
    4530:	d9000b15 	stw	r4,44(sp)
    4534:	d8800615 	stw	r2,24(sp)
    4538:	d8002215 	stw	zero,136(sp)
    453c:	003c4106 	br	3644 <__alt_data_end+0xfffba264>
    4540:	d8c00c17 	ldw	r3,48(sp)
    4544:	d8c00615 	stw	r3,24(sp)
    4548:	003e7006 	br	3f0c <__alt_data_end+0xfffbab2c>
    454c:	04400044 	movi	r17,1
    4550:	003b2006 	br	31d4 <__alt_data_end+0xfffb9df4>
    4554:	000b883a 	mov	r5,zero
    4558:	003b3d06 	br	3250 <__alt_data_end+0xfffb9e70>
    455c:	d8800c17 	ldw	r2,48(sp)
    4560:	d8800615 	stw	r2,24(sp)
    4564:	003e6906 	br	3f0c <__alt_data_end+0xfffbab2c>

00004568 <__sflush_r>:
    4568:	2880030b 	ldhu	r2,12(r5)
    456c:	defffb04 	addi	sp,sp,-20
    4570:	dcc00315 	stw	r19,12(sp)
    4574:	dc400115 	stw	r17,4(sp)
    4578:	dfc00415 	stw	ra,16(sp)
    457c:	dc800215 	stw	r18,8(sp)
    4580:	dc000015 	stw	r16,0(sp)
    4584:	10c0020c 	andi	r3,r2,8
    4588:	2823883a 	mov	r17,r5
    458c:	2027883a 	mov	r19,r4
    4590:	1800311e 	bne	r3,zero,4658 <__sflush_r+0xf0>
    4594:	28c00117 	ldw	r3,4(r5)
    4598:	10820014 	ori	r2,r2,2048
    459c:	2880030d 	sth	r2,12(r5)
    45a0:	00c04b0e 	bge	zero,r3,46d0 <__sflush_r+0x168>
    45a4:	8a000a17 	ldw	r8,40(r17)
    45a8:	40002326 	beq	r8,zero,4638 <__sflush_r+0xd0>
    45ac:	9c000017 	ldw	r16,0(r19)
    45b0:	10c4000c 	andi	r3,r2,4096
    45b4:	98000015 	stw	zero,0(r19)
    45b8:	18004826 	beq	r3,zero,46dc <__sflush_r+0x174>
    45bc:	89801417 	ldw	r6,80(r17)
    45c0:	10c0010c 	andi	r3,r2,4
    45c4:	18000626 	beq	r3,zero,45e0 <__sflush_r+0x78>
    45c8:	88c00117 	ldw	r3,4(r17)
    45cc:	88800c17 	ldw	r2,48(r17)
    45d0:	30cdc83a 	sub	r6,r6,r3
    45d4:	10000226 	beq	r2,zero,45e0 <__sflush_r+0x78>
    45d8:	88800f17 	ldw	r2,60(r17)
    45dc:	308dc83a 	sub	r6,r6,r2
    45e0:	89400717 	ldw	r5,28(r17)
    45e4:	000f883a 	mov	r7,zero
    45e8:	9809883a 	mov	r4,r19
    45ec:	403ee83a 	callr	r8
    45f0:	00ffffc4 	movi	r3,-1
    45f4:	10c04426 	beq	r2,r3,4708 <__sflush_r+0x1a0>
    45f8:	88c0030b 	ldhu	r3,12(r17)
    45fc:	89000417 	ldw	r4,16(r17)
    4600:	88000115 	stw	zero,4(r17)
    4604:	197dffcc 	andi	r5,r3,63487
    4608:	8940030d 	sth	r5,12(r17)
    460c:	89000015 	stw	r4,0(r17)
    4610:	18c4000c 	andi	r3,r3,4096
    4614:	18002c1e 	bne	r3,zero,46c8 <__sflush_r+0x160>
    4618:	89400c17 	ldw	r5,48(r17)
    461c:	9c000015 	stw	r16,0(r19)
    4620:	28000526 	beq	r5,zero,4638 <__sflush_r+0xd0>
    4624:	88801004 	addi	r2,r17,64
    4628:	28800226 	beq	r5,r2,4634 <__sflush_r+0xcc>
    462c:	9809883a 	mov	r4,r19
    4630:	0004ce40 	call	4ce4 <_free_r>
    4634:	88000c15 	stw	zero,48(r17)
    4638:	0005883a 	mov	r2,zero
    463c:	dfc00417 	ldw	ra,16(sp)
    4640:	dcc00317 	ldw	r19,12(sp)
    4644:	dc800217 	ldw	r18,8(sp)
    4648:	dc400117 	ldw	r17,4(sp)
    464c:	dc000017 	ldw	r16,0(sp)
    4650:	dec00504 	addi	sp,sp,20
    4654:	f800283a 	ret
    4658:	2c800417 	ldw	r18,16(r5)
    465c:	903ff626 	beq	r18,zero,4638 <__alt_data_end+0xfffbb258>
    4660:	2c000017 	ldw	r16,0(r5)
    4664:	108000cc 	andi	r2,r2,3
    4668:	2c800015 	stw	r18,0(r5)
    466c:	84a1c83a 	sub	r16,r16,r18
    4670:	1000131e 	bne	r2,zero,46c0 <__sflush_r+0x158>
    4674:	28800517 	ldw	r2,20(r5)
    4678:	88800215 	stw	r2,8(r17)
    467c:	04000316 	blt	zero,r16,468c <__sflush_r+0x124>
    4680:	003fed06 	br	4638 <__alt_data_end+0xfffbb258>
    4684:	90a5883a 	add	r18,r18,r2
    4688:	043feb0e 	bge	zero,r16,4638 <__alt_data_end+0xfffbb258>
    468c:	88800917 	ldw	r2,36(r17)
    4690:	89400717 	ldw	r5,28(r17)
    4694:	800f883a 	mov	r7,r16
    4698:	900d883a 	mov	r6,r18
    469c:	9809883a 	mov	r4,r19
    46a0:	103ee83a 	callr	r2
    46a4:	80a1c83a 	sub	r16,r16,r2
    46a8:	00bff616 	blt	zero,r2,4684 <__alt_data_end+0xfffbb2a4>
    46ac:	88c0030b 	ldhu	r3,12(r17)
    46b0:	00bfffc4 	movi	r2,-1
    46b4:	18c01014 	ori	r3,r3,64
    46b8:	88c0030d 	sth	r3,12(r17)
    46bc:	003fdf06 	br	463c <__alt_data_end+0xfffbb25c>
    46c0:	0005883a 	mov	r2,zero
    46c4:	003fec06 	br	4678 <__alt_data_end+0xfffbb298>
    46c8:	88801415 	stw	r2,80(r17)
    46cc:	003fd206 	br	4618 <__alt_data_end+0xfffbb238>
    46d0:	28c00f17 	ldw	r3,60(r5)
    46d4:	00ffb316 	blt	zero,r3,45a4 <__alt_data_end+0xfffbb1c4>
    46d8:	003fd706 	br	4638 <__alt_data_end+0xfffbb258>
    46dc:	89400717 	ldw	r5,28(r17)
    46e0:	000d883a 	mov	r6,zero
    46e4:	01c00044 	movi	r7,1
    46e8:	9809883a 	mov	r4,r19
    46ec:	403ee83a 	callr	r8
    46f0:	100d883a 	mov	r6,r2
    46f4:	00bfffc4 	movi	r2,-1
    46f8:	30801426 	beq	r6,r2,474c <__sflush_r+0x1e4>
    46fc:	8880030b 	ldhu	r2,12(r17)
    4700:	8a000a17 	ldw	r8,40(r17)
    4704:	003fae06 	br	45c0 <__alt_data_end+0xfffbb1e0>
    4708:	98c00017 	ldw	r3,0(r19)
    470c:	183fba26 	beq	r3,zero,45f8 <__alt_data_end+0xfffbb218>
    4710:	01000744 	movi	r4,29
    4714:	19000626 	beq	r3,r4,4730 <__sflush_r+0x1c8>
    4718:	01000584 	movi	r4,22
    471c:	19000426 	beq	r3,r4,4730 <__sflush_r+0x1c8>
    4720:	88c0030b 	ldhu	r3,12(r17)
    4724:	18c01014 	ori	r3,r3,64
    4728:	88c0030d 	sth	r3,12(r17)
    472c:	003fc306 	br	463c <__alt_data_end+0xfffbb25c>
    4730:	8880030b 	ldhu	r2,12(r17)
    4734:	88c00417 	ldw	r3,16(r17)
    4738:	88000115 	stw	zero,4(r17)
    473c:	10bdffcc 	andi	r2,r2,63487
    4740:	8880030d 	sth	r2,12(r17)
    4744:	88c00015 	stw	r3,0(r17)
    4748:	003fb306 	br	4618 <__alt_data_end+0xfffbb238>
    474c:	98800017 	ldw	r2,0(r19)
    4750:	103fea26 	beq	r2,zero,46fc <__alt_data_end+0xfffbb31c>
    4754:	00c00744 	movi	r3,29
    4758:	10c00226 	beq	r2,r3,4764 <__sflush_r+0x1fc>
    475c:	00c00584 	movi	r3,22
    4760:	10c0031e 	bne	r2,r3,4770 <__sflush_r+0x208>
    4764:	9c000015 	stw	r16,0(r19)
    4768:	0005883a 	mov	r2,zero
    476c:	003fb306 	br	463c <__alt_data_end+0xfffbb25c>
    4770:	88c0030b 	ldhu	r3,12(r17)
    4774:	3005883a 	mov	r2,r6
    4778:	18c01014 	ori	r3,r3,64
    477c:	88c0030d 	sth	r3,12(r17)
    4780:	003fae06 	br	463c <__alt_data_end+0xfffbb25c>

00004784 <_fflush_r>:
    4784:	defffd04 	addi	sp,sp,-12
    4788:	dc000115 	stw	r16,4(sp)
    478c:	dfc00215 	stw	ra,8(sp)
    4790:	2021883a 	mov	r16,r4
    4794:	20000226 	beq	r4,zero,47a0 <_fflush_r+0x1c>
    4798:	20800e17 	ldw	r2,56(r4)
    479c:	10000c26 	beq	r2,zero,47d0 <_fflush_r+0x4c>
    47a0:	2880030f 	ldh	r2,12(r5)
    47a4:	1000051e 	bne	r2,zero,47bc <_fflush_r+0x38>
    47a8:	0005883a 	mov	r2,zero
    47ac:	dfc00217 	ldw	ra,8(sp)
    47b0:	dc000117 	ldw	r16,4(sp)
    47b4:	dec00304 	addi	sp,sp,12
    47b8:	f800283a 	ret
    47bc:	8009883a 	mov	r4,r16
    47c0:	dfc00217 	ldw	ra,8(sp)
    47c4:	dc000117 	ldw	r16,4(sp)
    47c8:	dec00304 	addi	sp,sp,12
    47cc:	00045681 	jmpi	4568 <__sflush_r>
    47d0:	d9400015 	stw	r5,0(sp)
    47d4:	0004b700 	call	4b70 <__sinit>
    47d8:	d9400017 	ldw	r5,0(sp)
    47dc:	003ff006 	br	47a0 <__alt_data_end+0xfffbb3c0>

000047e0 <fflush>:
    47e0:	20000526 	beq	r4,zero,47f8 <fflush+0x18>
    47e4:	00800074 	movhi	r2,1
    47e8:	1088ee04 	addi	r2,r2,9144
    47ec:	200b883a 	mov	r5,r4
    47f0:	11000017 	ldw	r4,0(r2)
    47f4:	00047841 	jmpi	4784 <_fflush_r>
    47f8:	00800074 	movhi	r2,1
    47fc:	1088ed04 	addi	r2,r2,9140
    4800:	11000017 	ldw	r4,0(r2)
    4804:	01400034 	movhi	r5,0
    4808:	2951e104 	addi	r5,r5,18308
    480c:	00055801 	jmpi	5580 <_fwalk_reent>

00004810 <__fp_unlock>:
    4810:	0005883a 	mov	r2,zero
    4814:	f800283a 	ret

00004818 <_cleanup_r>:
    4818:	01400074 	movhi	r5,1
    481c:	29667704 	addi	r5,r5,-26148
    4820:	00055801 	jmpi	5580 <_fwalk_reent>

00004824 <__sinit.part.1>:
    4824:	defff704 	addi	sp,sp,-36
    4828:	00c00034 	movhi	r3,0
    482c:	dfc00815 	stw	ra,32(sp)
    4830:	ddc00715 	stw	r23,28(sp)
    4834:	dd800615 	stw	r22,24(sp)
    4838:	dd400515 	stw	r21,20(sp)
    483c:	dd000415 	stw	r20,16(sp)
    4840:	dcc00315 	stw	r19,12(sp)
    4844:	dc800215 	stw	r18,8(sp)
    4848:	dc400115 	stw	r17,4(sp)
    484c:	dc000015 	stw	r16,0(sp)
    4850:	18d20604 	addi	r3,r3,18456
    4854:	24000117 	ldw	r16,4(r4)
    4858:	20c00f15 	stw	r3,60(r4)
    485c:	2080bb04 	addi	r2,r4,748
    4860:	00c000c4 	movi	r3,3
    4864:	20c0b915 	stw	r3,740(r4)
    4868:	2080ba15 	stw	r2,744(r4)
    486c:	2000b815 	stw	zero,736(r4)
    4870:	05c00204 	movi	r23,8
    4874:	00800104 	movi	r2,4
    4878:	2025883a 	mov	r18,r4
    487c:	b80d883a 	mov	r6,r23
    4880:	81001704 	addi	r4,r16,92
    4884:	000b883a 	mov	r5,zero
    4888:	80000015 	stw	zero,0(r16)
    488c:	80000115 	stw	zero,4(r16)
    4890:	80000215 	stw	zero,8(r16)
    4894:	8080030d 	sth	r2,12(r16)
    4898:	80001915 	stw	zero,100(r16)
    489c:	8000038d 	sth	zero,14(r16)
    48a0:	80000415 	stw	zero,16(r16)
    48a4:	80000515 	stw	zero,20(r16)
    48a8:	80000615 	stw	zero,24(r16)
    48ac:	00064700 	call	6470 <memset>
    48b0:	05800034 	movhi	r22,0
    48b4:	94400217 	ldw	r17,8(r18)
    48b8:	05400034 	movhi	r21,0
    48bc:	05000034 	movhi	r20,0
    48c0:	04c00034 	movhi	r19,0
    48c4:	b59f7904 	addi	r22,r22,32228
    48c8:	ad5f9004 	addi	r21,r21,32320
    48cc:	a51faf04 	addi	r20,r20,32444
    48d0:	9cdfc604 	addi	r19,r19,32536
    48d4:	85800815 	stw	r22,32(r16)
    48d8:	85400915 	stw	r21,36(r16)
    48dc:	85000a15 	stw	r20,40(r16)
    48e0:	84c00b15 	stw	r19,44(r16)
    48e4:	84000715 	stw	r16,28(r16)
    48e8:	00800284 	movi	r2,10
    48ec:	8880030d 	sth	r2,12(r17)
    48f0:	00800044 	movi	r2,1
    48f4:	b80d883a 	mov	r6,r23
    48f8:	89001704 	addi	r4,r17,92
    48fc:	000b883a 	mov	r5,zero
    4900:	88000015 	stw	zero,0(r17)
    4904:	88000115 	stw	zero,4(r17)
    4908:	88000215 	stw	zero,8(r17)
    490c:	88001915 	stw	zero,100(r17)
    4910:	8880038d 	sth	r2,14(r17)
    4914:	88000415 	stw	zero,16(r17)
    4918:	88000515 	stw	zero,20(r17)
    491c:	88000615 	stw	zero,24(r17)
    4920:	00064700 	call	6470 <memset>
    4924:	94000317 	ldw	r16,12(r18)
    4928:	00800484 	movi	r2,18
    492c:	8c400715 	stw	r17,28(r17)
    4930:	8d800815 	stw	r22,32(r17)
    4934:	8d400915 	stw	r21,36(r17)
    4938:	8d000a15 	stw	r20,40(r17)
    493c:	8cc00b15 	stw	r19,44(r17)
    4940:	8080030d 	sth	r2,12(r16)
    4944:	00800084 	movi	r2,2
    4948:	80000015 	stw	zero,0(r16)
    494c:	80000115 	stw	zero,4(r16)
    4950:	80000215 	stw	zero,8(r16)
    4954:	80001915 	stw	zero,100(r16)
    4958:	8080038d 	sth	r2,14(r16)
    495c:	80000415 	stw	zero,16(r16)
    4960:	80000515 	stw	zero,20(r16)
    4964:	80000615 	stw	zero,24(r16)
    4968:	b80d883a 	mov	r6,r23
    496c:	000b883a 	mov	r5,zero
    4970:	81001704 	addi	r4,r16,92
    4974:	00064700 	call	6470 <memset>
    4978:	00800044 	movi	r2,1
    497c:	84000715 	stw	r16,28(r16)
    4980:	85800815 	stw	r22,32(r16)
    4984:	85400915 	stw	r21,36(r16)
    4988:	85000a15 	stw	r20,40(r16)
    498c:	84c00b15 	stw	r19,44(r16)
    4990:	90800e15 	stw	r2,56(r18)
    4994:	dfc00817 	ldw	ra,32(sp)
    4998:	ddc00717 	ldw	r23,28(sp)
    499c:	dd800617 	ldw	r22,24(sp)
    49a0:	dd400517 	ldw	r21,20(sp)
    49a4:	dd000417 	ldw	r20,16(sp)
    49a8:	dcc00317 	ldw	r19,12(sp)
    49ac:	dc800217 	ldw	r18,8(sp)
    49b0:	dc400117 	ldw	r17,4(sp)
    49b4:	dc000017 	ldw	r16,0(sp)
    49b8:	dec00904 	addi	sp,sp,36
    49bc:	f800283a 	ret

000049c0 <__fp_lock>:
    49c0:	0005883a 	mov	r2,zero
    49c4:	f800283a 	ret

000049c8 <__sfmoreglue>:
    49c8:	defffc04 	addi	sp,sp,-16
    49cc:	dc800215 	stw	r18,8(sp)
    49d0:	2825883a 	mov	r18,r5
    49d4:	dc000015 	stw	r16,0(sp)
    49d8:	01401a04 	movi	r5,104
    49dc:	2021883a 	mov	r16,r4
    49e0:	913fffc4 	addi	r4,r18,-1
    49e4:	dfc00315 	stw	ra,12(sp)
    49e8:	dc400115 	stw	r17,4(sp)
    49ec:	000adb40 	call	adb4 <__mulsi3>
    49f0:	8009883a 	mov	r4,r16
    49f4:	11401d04 	addi	r5,r2,116
    49f8:	1023883a 	mov	r17,r2
    49fc:	00058dc0 	call	58dc <_malloc_r>
    4a00:	1021883a 	mov	r16,r2
    4a04:	10000726 	beq	r2,zero,4a24 <__sfmoreglue+0x5c>
    4a08:	11000304 	addi	r4,r2,12
    4a0c:	10000015 	stw	zero,0(r2)
    4a10:	14800115 	stw	r18,4(r2)
    4a14:	11000215 	stw	r4,8(r2)
    4a18:	89801a04 	addi	r6,r17,104
    4a1c:	000b883a 	mov	r5,zero
    4a20:	00064700 	call	6470 <memset>
    4a24:	8005883a 	mov	r2,r16
    4a28:	dfc00317 	ldw	ra,12(sp)
    4a2c:	dc800217 	ldw	r18,8(sp)
    4a30:	dc400117 	ldw	r17,4(sp)
    4a34:	dc000017 	ldw	r16,0(sp)
    4a38:	dec00404 	addi	sp,sp,16
    4a3c:	f800283a 	ret

00004a40 <__sfp>:
    4a40:	defffb04 	addi	sp,sp,-20
    4a44:	dc000015 	stw	r16,0(sp)
    4a48:	04000074 	movhi	r16,1
    4a4c:	8408ed04 	addi	r16,r16,9140
    4a50:	dcc00315 	stw	r19,12(sp)
    4a54:	2027883a 	mov	r19,r4
    4a58:	81000017 	ldw	r4,0(r16)
    4a5c:	dfc00415 	stw	ra,16(sp)
    4a60:	dc800215 	stw	r18,8(sp)
    4a64:	20800e17 	ldw	r2,56(r4)
    4a68:	dc400115 	stw	r17,4(sp)
    4a6c:	1000021e 	bne	r2,zero,4a78 <__sfp+0x38>
    4a70:	00048240 	call	4824 <__sinit.part.1>
    4a74:	81000017 	ldw	r4,0(r16)
    4a78:	2480b804 	addi	r18,r4,736
    4a7c:	047fffc4 	movi	r17,-1
    4a80:	91000117 	ldw	r4,4(r18)
    4a84:	94000217 	ldw	r16,8(r18)
    4a88:	213fffc4 	addi	r4,r4,-1
    4a8c:	20000a16 	blt	r4,zero,4ab8 <__sfp+0x78>
    4a90:	8080030f 	ldh	r2,12(r16)
    4a94:	10000c26 	beq	r2,zero,4ac8 <__sfp+0x88>
    4a98:	80c01d04 	addi	r3,r16,116
    4a9c:	00000206 	br	4aa8 <__sfp+0x68>
    4aa0:	18bfe60f 	ldh	r2,-104(r3)
    4aa4:	10000826 	beq	r2,zero,4ac8 <__sfp+0x88>
    4aa8:	213fffc4 	addi	r4,r4,-1
    4aac:	1c3ffd04 	addi	r16,r3,-12
    4ab0:	18c01a04 	addi	r3,r3,104
    4ab4:	247ffa1e 	bne	r4,r17,4aa0 <__alt_data_end+0xfffbb6c0>
    4ab8:	90800017 	ldw	r2,0(r18)
    4abc:	10001d26 	beq	r2,zero,4b34 <__sfp+0xf4>
    4ac0:	1025883a 	mov	r18,r2
    4ac4:	003fee06 	br	4a80 <__alt_data_end+0xfffbb6a0>
    4ac8:	00bfffc4 	movi	r2,-1
    4acc:	8080038d 	sth	r2,14(r16)
    4ad0:	00800044 	movi	r2,1
    4ad4:	8080030d 	sth	r2,12(r16)
    4ad8:	80001915 	stw	zero,100(r16)
    4adc:	80000015 	stw	zero,0(r16)
    4ae0:	80000215 	stw	zero,8(r16)
    4ae4:	80000115 	stw	zero,4(r16)
    4ae8:	80000415 	stw	zero,16(r16)
    4aec:	80000515 	stw	zero,20(r16)
    4af0:	80000615 	stw	zero,24(r16)
    4af4:	01800204 	movi	r6,8
    4af8:	000b883a 	mov	r5,zero
    4afc:	81001704 	addi	r4,r16,92
    4b00:	00064700 	call	6470 <memset>
    4b04:	8005883a 	mov	r2,r16
    4b08:	80000c15 	stw	zero,48(r16)
    4b0c:	80000d15 	stw	zero,52(r16)
    4b10:	80001115 	stw	zero,68(r16)
    4b14:	80001215 	stw	zero,72(r16)
    4b18:	dfc00417 	ldw	ra,16(sp)
    4b1c:	dcc00317 	ldw	r19,12(sp)
    4b20:	dc800217 	ldw	r18,8(sp)
    4b24:	dc400117 	ldw	r17,4(sp)
    4b28:	dc000017 	ldw	r16,0(sp)
    4b2c:	dec00504 	addi	sp,sp,20
    4b30:	f800283a 	ret
    4b34:	01400104 	movi	r5,4
    4b38:	9809883a 	mov	r4,r19
    4b3c:	00049c80 	call	49c8 <__sfmoreglue>
    4b40:	90800015 	stw	r2,0(r18)
    4b44:	103fde1e 	bne	r2,zero,4ac0 <__alt_data_end+0xfffbb6e0>
    4b48:	00800304 	movi	r2,12
    4b4c:	98800015 	stw	r2,0(r19)
    4b50:	0005883a 	mov	r2,zero
    4b54:	003ff006 	br	4b18 <__alt_data_end+0xfffbb738>

00004b58 <_cleanup>:
    4b58:	00800074 	movhi	r2,1
    4b5c:	1088ed04 	addi	r2,r2,9140
    4b60:	11000017 	ldw	r4,0(r2)
    4b64:	01400074 	movhi	r5,1
    4b68:	29667704 	addi	r5,r5,-26148
    4b6c:	00055801 	jmpi	5580 <_fwalk_reent>

00004b70 <__sinit>:
    4b70:	20800e17 	ldw	r2,56(r4)
    4b74:	10000126 	beq	r2,zero,4b7c <__sinit+0xc>
    4b78:	f800283a 	ret
    4b7c:	00048241 	jmpi	4824 <__sinit.part.1>

00004b80 <__sfp_lock_acquire>:
    4b80:	f800283a 	ret

00004b84 <__sfp_lock_release>:
    4b84:	f800283a 	ret

00004b88 <__sinit_lock_acquire>:
    4b88:	f800283a 	ret

00004b8c <__sinit_lock_release>:
    4b8c:	f800283a 	ret

00004b90 <__fp_lock_all>:
    4b90:	00800074 	movhi	r2,1
    4b94:	1088ee04 	addi	r2,r2,9144
    4b98:	11000017 	ldw	r4,0(r2)
    4b9c:	01400034 	movhi	r5,0
    4ba0:	29527004 	addi	r5,r5,18880
    4ba4:	00054bc1 	jmpi	54bc <_fwalk>

00004ba8 <__fp_unlock_all>:
    4ba8:	00800074 	movhi	r2,1
    4bac:	1088ee04 	addi	r2,r2,9144
    4bb0:	11000017 	ldw	r4,0(r2)
    4bb4:	01400034 	movhi	r5,0
    4bb8:	29520404 	addi	r5,r5,18448
    4bbc:	00054bc1 	jmpi	54bc <_fwalk>

00004bc0 <_malloc_trim_r>:
    4bc0:	defffb04 	addi	sp,sp,-20
    4bc4:	dcc00315 	stw	r19,12(sp)
    4bc8:	04c00074 	movhi	r19,1
    4bcc:	dc800215 	stw	r18,8(sp)
    4bd0:	dc400115 	stw	r17,4(sp)
    4bd4:	dc000015 	stw	r16,0(sp)
    4bd8:	dfc00415 	stw	ra,16(sp)
    4bdc:	2821883a 	mov	r16,r5
    4be0:	9cc36904 	addi	r19,r19,3492
    4be4:	2025883a 	mov	r18,r4
    4be8:	000dc6c0 	call	dc6c <__malloc_lock>
    4bec:	98800217 	ldw	r2,8(r19)
    4bf0:	14400117 	ldw	r17,4(r2)
    4bf4:	00bfff04 	movi	r2,-4
    4bf8:	88a2703a 	and	r17,r17,r2
    4bfc:	8c21c83a 	sub	r16,r17,r16
    4c00:	8403fbc4 	addi	r16,r16,4079
    4c04:	8020d33a 	srli	r16,r16,12
    4c08:	0083ffc4 	movi	r2,4095
    4c0c:	843fffc4 	addi	r16,r16,-1
    4c10:	8020933a 	slli	r16,r16,12
    4c14:	1400060e 	bge	r2,r16,4c30 <_malloc_trim_r+0x70>
    4c18:	000b883a 	mov	r5,zero
    4c1c:	9009883a 	mov	r4,r18
    4c20:	0007d900 	call	7d90 <_sbrk_r>
    4c24:	98c00217 	ldw	r3,8(r19)
    4c28:	1c47883a 	add	r3,r3,r17
    4c2c:	10c00a26 	beq	r2,r3,4c58 <_malloc_trim_r+0x98>
    4c30:	9009883a 	mov	r4,r18
    4c34:	000dc900 	call	dc90 <__malloc_unlock>
    4c38:	0005883a 	mov	r2,zero
    4c3c:	dfc00417 	ldw	ra,16(sp)
    4c40:	dcc00317 	ldw	r19,12(sp)
    4c44:	dc800217 	ldw	r18,8(sp)
    4c48:	dc400117 	ldw	r17,4(sp)
    4c4c:	dc000017 	ldw	r16,0(sp)
    4c50:	dec00504 	addi	sp,sp,20
    4c54:	f800283a 	ret
    4c58:	040bc83a 	sub	r5,zero,r16
    4c5c:	9009883a 	mov	r4,r18
    4c60:	0007d900 	call	7d90 <_sbrk_r>
    4c64:	00ffffc4 	movi	r3,-1
    4c68:	10c00d26 	beq	r2,r3,4ca0 <_malloc_trim_r+0xe0>
    4c6c:	00c00074 	movhi	r3,1
    4c70:	18cfc604 	addi	r3,r3,16152
    4c74:	18800017 	ldw	r2,0(r3)
    4c78:	99000217 	ldw	r4,8(r19)
    4c7c:	8c23c83a 	sub	r17,r17,r16
    4c80:	8c400054 	ori	r17,r17,1
    4c84:	1421c83a 	sub	r16,r2,r16
    4c88:	24400115 	stw	r17,4(r4)
    4c8c:	9009883a 	mov	r4,r18
    4c90:	1c000015 	stw	r16,0(r3)
    4c94:	000dc900 	call	dc90 <__malloc_unlock>
    4c98:	00800044 	movi	r2,1
    4c9c:	003fe706 	br	4c3c <__alt_data_end+0xfffbb85c>
    4ca0:	000b883a 	mov	r5,zero
    4ca4:	9009883a 	mov	r4,r18
    4ca8:	0007d900 	call	7d90 <_sbrk_r>
    4cac:	99000217 	ldw	r4,8(r19)
    4cb0:	014003c4 	movi	r5,15
    4cb4:	1107c83a 	sub	r3,r2,r4
    4cb8:	28ffdd0e 	bge	r5,r3,4c30 <__alt_data_end+0xfffbb850>
    4cbc:	01400074 	movhi	r5,1
    4cc0:	2948f004 	addi	r5,r5,9152
    4cc4:	29400017 	ldw	r5,0(r5)
    4cc8:	18c00054 	ori	r3,r3,1
    4ccc:	20c00115 	stw	r3,4(r4)
    4cd0:	00c00074 	movhi	r3,1
    4cd4:	1145c83a 	sub	r2,r2,r5
    4cd8:	18cfc604 	addi	r3,r3,16152
    4cdc:	18800015 	stw	r2,0(r3)
    4ce0:	003fd306 	br	4c30 <__alt_data_end+0xfffbb850>

00004ce4 <_free_r>:
    4ce4:	28004126 	beq	r5,zero,4dec <_free_r+0x108>
    4ce8:	defffd04 	addi	sp,sp,-12
    4cec:	dc400115 	stw	r17,4(sp)
    4cf0:	dc000015 	stw	r16,0(sp)
    4cf4:	2023883a 	mov	r17,r4
    4cf8:	2821883a 	mov	r16,r5
    4cfc:	dfc00215 	stw	ra,8(sp)
    4d00:	000dc6c0 	call	dc6c <__malloc_lock>
    4d04:	81ffff17 	ldw	r7,-4(r16)
    4d08:	00bfff84 	movi	r2,-2
    4d0c:	01000074 	movhi	r4,1
    4d10:	81bffe04 	addi	r6,r16,-8
    4d14:	3884703a 	and	r2,r7,r2
    4d18:	21036904 	addi	r4,r4,3492
    4d1c:	308b883a 	add	r5,r6,r2
    4d20:	2a400117 	ldw	r9,4(r5)
    4d24:	22000217 	ldw	r8,8(r4)
    4d28:	00ffff04 	movi	r3,-4
    4d2c:	48c6703a 	and	r3,r9,r3
    4d30:	2a005726 	beq	r5,r8,4e90 <_free_r+0x1ac>
    4d34:	28c00115 	stw	r3,4(r5)
    4d38:	39c0004c 	andi	r7,r7,1
    4d3c:	3800091e 	bne	r7,zero,4d64 <_free_r+0x80>
    4d40:	823ffe17 	ldw	r8,-8(r16)
    4d44:	22400204 	addi	r9,r4,8
    4d48:	320dc83a 	sub	r6,r6,r8
    4d4c:	31c00217 	ldw	r7,8(r6)
    4d50:	1205883a 	add	r2,r2,r8
    4d54:	3a406526 	beq	r7,r9,4eec <_free_r+0x208>
    4d58:	32000317 	ldw	r8,12(r6)
    4d5c:	3a000315 	stw	r8,12(r7)
    4d60:	41c00215 	stw	r7,8(r8)
    4d64:	28cf883a 	add	r7,r5,r3
    4d68:	39c00117 	ldw	r7,4(r7)
    4d6c:	39c0004c 	andi	r7,r7,1
    4d70:	38003a26 	beq	r7,zero,4e5c <_free_r+0x178>
    4d74:	10c00054 	ori	r3,r2,1
    4d78:	30c00115 	stw	r3,4(r6)
    4d7c:	3087883a 	add	r3,r6,r2
    4d80:	18800015 	stw	r2,0(r3)
    4d84:	00c07fc4 	movi	r3,511
    4d88:	18801936 	bltu	r3,r2,4df0 <_free_r+0x10c>
    4d8c:	1004d0fa 	srli	r2,r2,3
    4d90:	01c00044 	movi	r7,1
    4d94:	21400117 	ldw	r5,4(r4)
    4d98:	10c00044 	addi	r3,r2,1
    4d9c:	18c7883a 	add	r3,r3,r3
    4da0:	1005d0ba 	srai	r2,r2,2
    4da4:	18c7883a 	add	r3,r3,r3
    4da8:	18c7883a 	add	r3,r3,r3
    4dac:	1907883a 	add	r3,r3,r4
    4db0:	3884983a 	sll	r2,r7,r2
    4db4:	19c00017 	ldw	r7,0(r3)
    4db8:	1a3ffe04 	addi	r8,r3,-8
    4dbc:	1144b03a 	or	r2,r2,r5
    4dc0:	32000315 	stw	r8,12(r6)
    4dc4:	31c00215 	stw	r7,8(r6)
    4dc8:	20800115 	stw	r2,4(r4)
    4dcc:	19800015 	stw	r6,0(r3)
    4dd0:	39800315 	stw	r6,12(r7)
    4dd4:	8809883a 	mov	r4,r17
    4dd8:	dfc00217 	ldw	ra,8(sp)
    4ddc:	dc400117 	ldw	r17,4(sp)
    4de0:	dc000017 	ldw	r16,0(sp)
    4de4:	dec00304 	addi	sp,sp,12
    4de8:	000dc901 	jmpi	dc90 <__malloc_unlock>
    4dec:	f800283a 	ret
    4df0:	100ad27a 	srli	r5,r2,9
    4df4:	00c00104 	movi	r3,4
    4df8:	19404a36 	bltu	r3,r5,4f24 <_free_r+0x240>
    4dfc:	100ad1ba 	srli	r5,r2,6
    4e00:	28c00e44 	addi	r3,r5,57
    4e04:	18c7883a 	add	r3,r3,r3
    4e08:	29400e04 	addi	r5,r5,56
    4e0c:	18c7883a 	add	r3,r3,r3
    4e10:	18c7883a 	add	r3,r3,r3
    4e14:	1909883a 	add	r4,r3,r4
    4e18:	20c00017 	ldw	r3,0(r4)
    4e1c:	01c00074 	movhi	r7,1
    4e20:	213ffe04 	addi	r4,r4,-8
    4e24:	39c36904 	addi	r7,r7,3492
    4e28:	20c04426 	beq	r4,r3,4f3c <_free_r+0x258>
    4e2c:	01ffff04 	movi	r7,-4
    4e30:	19400117 	ldw	r5,4(r3)
    4e34:	29ca703a 	and	r5,r5,r7
    4e38:	1140022e 	bgeu	r2,r5,4e44 <_free_r+0x160>
    4e3c:	18c00217 	ldw	r3,8(r3)
    4e40:	20fffb1e 	bne	r4,r3,4e30 <__alt_data_end+0xfffbba50>
    4e44:	19000317 	ldw	r4,12(r3)
    4e48:	31000315 	stw	r4,12(r6)
    4e4c:	30c00215 	stw	r3,8(r6)
    4e50:	21800215 	stw	r6,8(r4)
    4e54:	19800315 	stw	r6,12(r3)
    4e58:	003fde06 	br	4dd4 <__alt_data_end+0xfffbb9f4>
    4e5c:	29c00217 	ldw	r7,8(r5)
    4e60:	10c5883a 	add	r2,r2,r3
    4e64:	00c00074 	movhi	r3,1
    4e68:	18c36b04 	addi	r3,r3,3500
    4e6c:	38c03b26 	beq	r7,r3,4f5c <_free_r+0x278>
    4e70:	2a000317 	ldw	r8,12(r5)
    4e74:	11400054 	ori	r5,r2,1
    4e78:	3087883a 	add	r3,r6,r2
    4e7c:	3a000315 	stw	r8,12(r7)
    4e80:	41c00215 	stw	r7,8(r8)
    4e84:	31400115 	stw	r5,4(r6)
    4e88:	18800015 	stw	r2,0(r3)
    4e8c:	003fbd06 	br	4d84 <__alt_data_end+0xfffbb9a4>
    4e90:	39c0004c 	andi	r7,r7,1
    4e94:	10c5883a 	add	r2,r2,r3
    4e98:	3800071e 	bne	r7,zero,4eb8 <_free_r+0x1d4>
    4e9c:	81fffe17 	ldw	r7,-8(r16)
    4ea0:	31cdc83a 	sub	r6,r6,r7
    4ea4:	30c00317 	ldw	r3,12(r6)
    4ea8:	31400217 	ldw	r5,8(r6)
    4eac:	11c5883a 	add	r2,r2,r7
    4eb0:	28c00315 	stw	r3,12(r5)
    4eb4:	19400215 	stw	r5,8(r3)
    4eb8:	10c00054 	ori	r3,r2,1
    4ebc:	30c00115 	stw	r3,4(r6)
    4ec0:	00c00074 	movhi	r3,1
    4ec4:	18c8f104 	addi	r3,r3,9156
    4ec8:	18c00017 	ldw	r3,0(r3)
    4ecc:	21800215 	stw	r6,8(r4)
    4ed0:	10ffc036 	bltu	r2,r3,4dd4 <__alt_data_end+0xfffbb9f4>
    4ed4:	00800074 	movhi	r2,1
    4ed8:	108fbd04 	addi	r2,r2,16116
    4edc:	11400017 	ldw	r5,0(r2)
    4ee0:	8809883a 	mov	r4,r17
    4ee4:	0004bc00 	call	4bc0 <_malloc_trim_r>
    4ee8:	003fba06 	br	4dd4 <__alt_data_end+0xfffbb9f4>
    4eec:	28c9883a 	add	r4,r5,r3
    4ef0:	21000117 	ldw	r4,4(r4)
    4ef4:	2100004c 	andi	r4,r4,1
    4ef8:	2000391e 	bne	r4,zero,4fe0 <_free_r+0x2fc>
    4efc:	29c00217 	ldw	r7,8(r5)
    4f00:	29000317 	ldw	r4,12(r5)
    4f04:	1885883a 	add	r2,r3,r2
    4f08:	10c00054 	ori	r3,r2,1
    4f0c:	39000315 	stw	r4,12(r7)
    4f10:	21c00215 	stw	r7,8(r4)
    4f14:	30c00115 	stw	r3,4(r6)
    4f18:	308d883a 	add	r6,r6,r2
    4f1c:	30800015 	stw	r2,0(r6)
    4f20:	003fac06 	br	4dd4 <__alt_data_end+0xfffbb9f4>
    4f24:	00c00504 	movi	r3,20
    4f28:	19401536 	bltu	r3,r5,4f80 <_free_r+0x29c>
    4f2c:	28c01704 	addi	r3,r5,92
    4f30:	18c7883a 	add	r3,r3,r3
    4f34:	294016c4 	addi	r5,r5,91
    4f38:	003fb406 	br	4e0c <__alt_data_end+0xfffbba2c>
    4f3c:	280bd0ba 	srai	r5,r5,2
    4f40:	00c00044 	movi	r3,1
    4f44:	38800117 	ldw	r2,4(r7)
    4f48:	194a983a 	sll	r5,r3,r5
    4f4c:	2007883a 	mov	r3,r4
    4f50:	2884b03a 	or	r2,r5,r2
    4f54:	38800115 	stw	r2,4(r7)
    4f58:	003fbb06 	br	4e48 <__alt_data_end+0xfffbba68>
    4f5c:	21800515 	stw	r6,20(r4)
    4f60:	21800415 	stw	r6,16(r4)
    4f64:	10c00054 	ori	r3,r2,1
    4f68:	31c00315 	stw	r7,12(r6)
    4f6c:	31c00215 	stw	r7,8(r6)
    4f70:	30c00115 	stw	r3,4(r6)
    4f74:	308d883a 	add	r6,r6,r2
    4f78:	30800015 	stw	r2,0(r6)
    4f7c:	003f9506 	br	4dd4 <__alt_data_end+0xfffbb9f4>
    4f80:	00c01504 	movi	r3,84
    4f84:	19400536 	bltu	r3,r5,4f9c <_free_r+0x2b8>
    4f88:	100ad33a 	srli	r5,r2,12
    4f8c:	28c01bc4 	addi	r3,r5,111
    4f90:	18c7883a 	add	r3,r3,r3
    4f94:	29401b84 	addi	r5,r5,110
    4f98:	003f9c06 	br	4e0c <__alt_data_end+0xfffbba2c>
    4f9c:	00c05504 	movi	r3,340
    4fa0:	19400536 	bltu	r3,r5,4fb8 <_free_r+0x2d4>
    4fa4:	100ad3fa 	srli	r5,r2,15
    4fa8:	28c01e04 	addi	r3,r5,120
    4fac:	18c7883a 	add	r3,r3,r3
    4fb0:	29401dc4 	addi	r5,r5,119
    4fb4:	003f9506 	br	4e0c <__alt_data_end+0xfffbba2c>
    4fb8:	00c15504 	movi	r3,1364
    4fbc:	19400536 	bltu	r3,r5,4fd4 <_free_r+0x2f0>
    4fc0:	100ad4ba 	srli	r5,r2,18
    4fc4:	28c01f44 	addi	r3,r5,125
    4fc8:	18c7883a 	add	r3,r3,r3
    4fcc:	29401f04 	addi	r5,r5,124
    4fd0:	003f8e06 	br	4e0c <__alt_data_end+0xfffbba2c>
    4fd4:	00c03f84 	movi	r3,254
    4fd8:	01401f84 	movi	r5,126
    4fdc:	003f8b06 	br	4e0c <__alt_data_end+0xfffbba2c>
    4fe0:	10c00054 	ori	r3,r2,1
    4fe4:	30c00115 	stw	r3,4(r6)
    4fe8:	308d883a 	add	r6,r6,r2
    4fec:	30800015 	stw	r2,0(r6)
    4ff0:	003f7806 	br	4dd4 <__alt_data_end+0xfffbb9f4>

00004ff4 <__sfvwrite_r>:
    4ff4:	30800217 	ldw	r2,8(r6)
    4ff8:	10006726 	beq	r2,zero,5198 <__sfvwrite_r+0x1a4>
    4ffc:	28c0030b 	ldhu	r3,12(r5)
    5000:	defff404 	addi	sp,sp,-48
    5004:	dd400715 	stw	r21,28(sp)
    5008:	dd000615 	stw	r20,24(sp)
    500c:	dc000215 	stw	r16,8(sp)
    5010:	dfc00b15 	stw	ra,44(sp)
    5014:	df000a15 	stw	fp,40(sp)
    5018:	ddc00915 	stw	r23,36(sp)
    501c:	dd800815 	stw	r22,32(sp)
    5020:	dcc00515 	stw	r19,20(sp)
    5024:	dc800415 	stw	r18,16(sp)
    5028:	dc400315 	stw	r17,12(sp)
    502c:	1880020c 	andi	r2,r3,8
    5030:	2821883a 	mov	r16,r5
    5034:	202b883a 	mov	r21,r4
    5038:	3029883a 	mov	r20,r6
    503c:	10002726 	beq	r2,zero,50dc <__sfvwrite_r+0xe8>
    5040:	28800417 	ldw	r2,16(r5)
    5044:	10002526 	beq	r2,zero,50dc <__sfvwrite_r+0xe8>
    5048:	1880008c 	andi	r2,r3,2
    504c:	a4400017 	ldw	r17,0(r20)
    5050:	10002a26 	beq	r2,zero,50fc <__sfvwrite_r+0x108>
    5054:	05a00034 	movhi	r22,32768
    5058:	0027883a 	mov	r19,zero
    505c:	0025883a 	mov	r18,zero
    5060:	b5bf0004 	addi	r22,r22,-1024
    5064:	980d883a 	mov	r6,r19
    5068:	a809883a 	mov	r4,r21
    506c:	90004626 	beq	r18,zero,5188 <__sfvwrite_r+0x194>
    5070:	900f883a 	mov	r7,r18
    5074:	b480022e 	bgeu	r22,r18,5080 <__sfvwrite_r+0x8c>
    5078:	01e00034 	movhi	r7,32768
    507c:	39ff0004 	addi	r7,r7,-1024
    5080:	80800917 	ldw	r2,36(r16)
    5084:	81400717 	ldw	r5,28(r16)
    5088:	103ee83a 	callr	r2
    508c:	00805a0e 	bge	zero,r2,51f8 <__sfvwrite_r+0x204>
    5090:	a0c00217 	ldw	r3,8(r20)
    5094:	98a7883a 	add	r19,r19,r2
    5098:	90a5c83a 	sub	r18,r18,r2
    509c:	1885c83a 	sub	r2,r3,r2
    50a0:	a0800215 	stw	r2,8(r20)
    50a4:	103fef1e 	bne	r2,zero,5064 <__alt_data_end+0xfffbbc84>
    50a8:	0005883a 	mov	r2,zero
    50ac:	dfc00b17 	ldw	ra,44(sp)
    50b0:	df000a17 	ldw	fp,40(sp)
    50b4:	ddc00917 	ldw	r23,36(sp)
    50b8:	dd800817 	ldw	r22,32(sp)
    50bc:	dd400717 	ldw	r21,28(sp)
    50c0:	dd000617 	ldw	r20,24(sp)
    50c4:	dcc00517 	ldw	r19,20(sp)
    50c8:	dc800417 	ldw	r18,16(sp)
    50cc:	dc400317 	ldw	r17,12(sp)
    50d0:	dc000217 	ldw	r16,8(sp)
    50d4:	dec00c04 	addi	sp,sp,48
    50d8:	f800283a 	ret
    50dc:	800b883a 	mov	r5,r16
    50e0:	a809883a 	mov	r4,r21
    50e4:	0002b640 	call	2b64 <__swsetup_r>
    50e8:	1000ee1e 	bne	r2,zero,54a4 <__sfvwrite_r+0x4b0>
    50ec:	80c0030b 	ldhu	r3,12(r16)
    50f0:	a4400017 	ldw	r17,0(r20)
    50f4:	1880008c 	andi	r2,r3,2
    50f8:	103fd61e 	bne	r2,zero,5054 <__alt_data_end+0xfffbbc74>
    50fc:	1880004c 	andi	r2,r3,1
    5100:	1000421e 	bne	r2,zero,520c <__sfvwrite_r+0x218>
    5104:	0039883a 	mov	fp,zero
    5108:	0025883a 	mov	r18,zero
    510c:	90001a26 	beq	r18,zero,5178 <__sfvwrite_r+0x184>
    5110:	1880800c 	andi	r2,r3,512
    5114:	84c00217 	ldw	r19,8(r16)
    5118:	10002126 	beq	r2,zero,51a0 <__sfvwrite_r+0x1ac>
    511c:	982f883a 	mov	r23,r19
    5120:	94c09636 	bltu	r18,r19,537c <__sfvwrite_r+0x388>
    5124:	1881200c 	andi	r2,r3,1152
    5128:	1000a11e 	bne	r2,zero,53b0 <__sfvwrite_r+0x3bc>
    512c:	81000017 	ldw	r4,0(r16)
    5130:	b80d883a 	mov	r6,r23
    5134:	e00b883a 	mov	r5,fp
    5138:	00063140 	call	6314 <memmove>
    513c:	80c00217 	ldw	r3,8(r16)
    5140:	81000017 	ldw	r4,0(r16)
    5144:	9005883a 	mov	r2,r18
    5148:	1ce7c83a 	sub	r19,r3,r19
    514c:	25cf883a 	add	r7,r4,r23
    5150:	84c00215 	stw	r19,8(r16)
    5154:	81c00015 	stw	r7,0(r16)
    5158:	a0c00217 	ldw	r3,8(r20)
    515c:	e0b9883a 	add	fp,fp,r2
    5160:	90a5c83a 	sub	r18,r18,r2
    5164:	18a7c83a 	sub	r19,r3,r2
    5168:	a4c00215 	stw	r19,8(r20)
    516c:	983fce26 	beq	r19,zero,50a8 <__alt_data_end+0xfffbbcc8>
    5170:	80c0030b 	ldhu	r3,12(r16)
    5174:	903fe61e 	bne	r18,zero,5110 <__alt_data_end+0xfffbbd30>
    5178:	8f000017 	ldw	fp,0(r17)
    517c:	8c800117 	ldw	r18,4(r17)
    5180:	8c400204 	addi	r17,r17,8
    5184:	003fe106 	br	510c <__alt_data_end+0xfffbbd2c>
    5188:	8cc00017 	ldw	r19,0(r17)
    518c:	8c800117 	ldw	r18,4(r17)
    5190:	8c400204 	addi	r17,r17,8
    5194:	003fb306 	br	5064 <__alt_data_end+0xfffbbc84>
    5198:	0005883a 	mov	r2,zero
    519c:	f800283a 	ret
    51a0:	81000017 	ldw	r4,0(r16)
    51a4:	80800417 	ldw	r2,16(r16)
    51a8:	11005a36 	bltu	r2,r4,5314 <__sfvwrite_r+0x320>
    51ac:	85c00517 	ldw	r23,20(r16)
    51b0:	95c05836 	bltu	r18,r23,5314 <__sfvwrite_r+0x320>
    51b4:	00a00034 	movhi	r2,32768
    51b8:	10bfffc4 	addi	r2,r2,-1
    51bc:	9009883a 	mov	r4,r18
    51c0:	1480012e 	bgeu	r2,r18,51c8 <__sfvwrite_r+0x1d4>
    51c4:	1009883a 	mov	r4,r2
    51c8:	b80b883a 	mov	r5,r23
    51cc:	000ac000 	call	ac00 <__divsi3>
    51d0:	b80b883a 	mov	r5,r23
    51d4:	1009883a 	mov	r4,r2
    51d8:	000adb40 	call	adb4 <__mulsi3>
    51dc:	81400717 	ldw	r5,28(r16)
    51e0:	80c00917 	ldw	r3,36(r16)
    51e4:	100f883a 	mov	r7,r2
    51e8:	e00d883a 	mov	r6,fp
    51ec:	a809883a 	mov	r4,r21
    51f0:	183ee83a 	callr	r3
    51f4:	00bfd816 	blt	zero,r2,5158 <__alt_data_end+0xfffbbd78>
    51f8:	8080030b 	ldhu	r2,12(r16)
    51fc:	10801014 	ori	r2,r2,64
    5200:	8080030d 	sth	r2,12(r16)
    5204:	00bfffc4 	movi	r2,-1
    5208:	003fa806 	br	50ac <__alt_data_end+0xfffbbccc>
    520c:	0027883a 	mov	r19,zero
    5210:	0011883a 	mov	r8,zero
    5214:	0039883a 	mov	fp,zero
    5218:	0025883a 	mov	r18,zero
    521c:	90001f26 	beq	r18,zero,529c <__sfvwrite_r+0x2a8>
    5220:	40005a26 	beq	r8,zero,538c <__sfvwrite_r+0x398>
    5224:	982d883a 	mov	r22,r19
    5228:	94c0012e 	bgeu	r18,r19,5230 <__sfvwrite_r+0x23c>
    522c:	902d883a 	mov	r22,r18
    5230:	81000017 	ldw	r4,0(r16)
    5234:	80800417 	ldw	r2,16(r16)
    5238:	b02f883a 	mov	r23,r22
    523c:	81c00517 	ldw	r7,20(r16)
    5240:	1100032e 	bgeu	r2,r4,5250 <__sfvwrite_r+0x25c>
    5244:	80c00217 	ldw	r3,8(r16)
    5248:	38c7883a 	add	r3,r7,r3
    524c:	1d801816 	blt	r3,r22,52b0 <__sfvwrite_r+0x2bc>
    5250:	b1c03e16 	blt	r22,r7,534c <__sfvwrite_r+0x358>
    5254:	80800917 	ldw	r2,36(r16)
    5258:	81400717 	ldw	r5,28(r16)
    525c:	e00d883a 	mov	r6,fp
    5260:	da000115 	stw	r8,4(sp)
    5264:	a809883a 	mov	r4,r21
    5268:	103ee83a 	callr	r2
    526c:	102f883a 	mov	r23,r2
    5270:	da000117 	ldw	r8,4(sp)
    5274:	00bfe00e 	bge	zero,r2,51f8 <__alt_data_end+0xfffbbe18>
    5278:	9de7c83a 	sub	r19,r19,r23
    527c:	98001f26 	beq	r19,zero,52fc <__sfvwrite_r+0x308>
    5280:	a0800217 	ldw	r2,8(r20)
    5284:	e5f9883a 	add	fp,fp,r23
    5288:	95e5c83a 	sub	r18,r18,r23
    528c:	15efc83a 	sub	r23,r2,r23
    5290:	a5c00215 	stw	r23,8(r20)
    5294:	b83f8426 	beq	r23,zero,50a8 <__alt_data_end+0xfffbbcc8>
    5298:	903fe11e 	bne	r18,zero,5220 <__alt_data_end+0xfffbbe40>
    529c:	8f000017 	ldw	fp,0(r17)
    52a0:	8c800117 	ldw	r18,4(r17)
    52a4:	0011883a 	mov	r8,zero
    52a8:	8c400204 	addi	r17,r17,8
    52ac:	003fdb06 	br	521c <__alt_data_end+0xfffbbe3c>
    52b0:	180d883a 	mov	r6,r3
    52b4:	e00b883a 	mov	r5,fp
    52b8:	da000115 	stw	r8,4(sp)
    52bc:	d8c00015 	stw	r3,0(sp)
    52c0:	00063140 	call	6314 <memmove>
    52c4:	d8c00017 	ldw	r3,0(sp)
    52c8:	80800017 	ldw	r2,0(r16)
    52cc:	800b883a 	mov	r5,r16
    52d0:	a809883a 	mov	r4,r21
    52d4:	10c5883a 	add	r2,r2,r3
    52d8:	80800015 	stw	r2,0(r16)
    52dc:	d8c00015 	stw	r3,0(sp)
    52e0:	00047840 	call	4784 <_fflush_r>
    52e4:	d8c00017 	ldw	r3,0(sp)
    52e8:	da000117 	ldw	r8,4(sp)
    52ec:	103fc21e 	bne	r2,zero,51f8 <__alt_data_end+0xfffbbe18>
    52f0:	182f883a 	mov	r23,r3
    52f4:	9de7c83a 	sub	r19,r19,r23
    52f8:	983fe11e 	bne	r19,zero,5280 <__alt_data_end+0xfffbbea0>
    52fc:	800b883a 	mov	r5,r16
    5300:	a809883a 	mov	r4,r21
    5304:	00047840 	call	4784 <_fflush_r>
    5308:	103fbb1e 	bne	r2,zero,51f8 <__alt_data_end+0xfffbbe18>
    530c:	0011883a 	mov	r8,zero
    5310:	003fdb06 	br	5280 <__alt_data_end+0xfffbbea0>
    5314:	94c0012e 	bgeu	r18,r19,531c <__sfvwrite_r+0x328>
    5318:	9027883a 	mov	r19,r18
    531c:	980d883a 	mov	r6,r19
    5320:	e00b883a 	mov	r5,fp
    5324:	00063140 	call	6314 <memmove>
    5328:	80800217 	ldw	r2,8(r16)
    532c:	80c00017 	ldw	r3,0(r16)
    5330:	14c5c83a 	sub	r2,r2,r19
    5334:	1cc7883a 	add	r3,r3,r19
    5338:	80800215 	stw	r2,8(r16)
    533c:	80c00015 	stw	r3,0(r16)
    5340:	10004326 	beq	r2,zero,5450 <__sfvwrite_r+0x45c>
    5344:	9805883a 	mov	r2,r19
    5348:	003f8306 	br	5158 <__alt_data_end+0xfffbbd78>
    534c:	b00d883a 	mov	r6,r22
    5350:	e00b883a 	mov	r5,fp
    5354:	da000115 	stw	r8,4(sp)
    5358:	00063140 	call	6314 <memmove>
    535c:	80800217 	ldw	r2,8(r16)
    5360:	80c00017 	ldw	r3,0(r16)
    5364:	da000117 	ldw	r8,4(sp)
    5368:	1585c83a 	sub	r2,r2,r22
    536c:	1dad883a 	add	r22,r3,r22
    5370:	80800215 	stw	r2,8(r16)
    5374:	85800015 	stw	r22,0(r16)
    5378:	003fbf06 	br	5278 <__alt_data_end+0xfffbbe98>
    537c:	81000017 	ldw	r4,0(r16)
    5380:	9027883a 	mov	r19,r18
    5384:	902f883a 	mov	r23,r18
    5388:	003f6906 	br	5130 <__alt_data_end+0xfffbbd50>
    538c:	900d883a 	mov	r6,r18
    5390:	01400284 	movi	r5,10
    5394:	e009883a 	mov	r4,fp
    5398:	00060e80 	call	60e8 <memchr>
    539c:	10003e26 	beq	r2,zero,5498 <__sfvwrite_r+0x4a4>
    53a0:	10800044 	addi	r2,r2,1
    53a4:	1727c83a 	sub	r19,r2,fp
    53a8:	02000044 	movi	r8,1
    53ac:	003f9d06 	br	5224 <__alt_data_end+0xfffbbe44>
    53b0:	80800517 	ldw	r2,20(r16)
    53b4:	81400417 	ldw	r5,16(r16)
    53b8:	81c00017 	ldw	r7,0(r16)
    53bc:	10a7883a 	add	r19,r2,r2
    53c0:	9885883a 	add	r2,r19,r2
    53c4:	1026d7fa 	srli	r19,r2,31
    53c8:	396dc83a 	sub	r22,r7,r5
    53cc:	b1000044 	addi	r4,r22,1
    53d0:	9885883a 	add	r2,r19,r2
    53d4:	1027d07a 	srai	r19,r2,1
    53d8:	2485883a 	add	r2,r4,r18
    53dc:	980d883a 	mov	r6,r19
    53e0:	9880022e 	bgeu	r19,r2,53ec <__sfvwrite_r+0x3f8>
    53e4:	1027883a 	mov	r19,r2
    53e8:	100d883a 	mov	r6,r2
    53ec:	18c1000c 	andi	r3,r3,1024
    53f0:	18001c26 	beq	r3,zero,5464 <__sfvwrite_r+0x470>
    53f4:	300b883a 	mov	r5,r6
    53f8:	a809883a 	mov	r4,r21
    53fc:	00058dc0 	call	58dc <_malloc_r>
    5400:	102f883a 	mov	r23,r2
    5404:	10002926 	beq	r2,zero,54ac <__sfvwrite_r+0x4b8>
    5408:	81400417 	ldw	r5,16(r16)
    540c:	b00d883a 	mov	r6,r22
    5410:	1009883a 	mov	r4,r2
    5414:	00061cc0 	call	61cc <memcpy>
    5418:	8080030b 	ldhu	r2,12(r16)
    541c:	00fedfc4 	movi	r3,-1153
    5420:	10c4703a 	and	r2,r2,r3
    5424:	10802014 	ori	r2,r2,128
    5428:	8080030d 	sth	r2,12(r16)
    542c:	bd89883a 	add	r4,r23,r22
    5430:	9d8fc83a 	sub	r7,r19,r22
    5434:	85c00415 	stw	r23,16(r16)
    5438:	84c00515 	stw	r19,20(r16)
    543c:	81000015 	stw	r4,0(r16)
    5440:	9027883a 	mov	r19,r18
    5444:	81c00215 	stw	r7,8(r16)
    5448:	902f883a 	mov	r23,r18
    544c:	003f3806 	br	5130 <__alt_data_end+0xfffbbd50>
    5450:	800b883a 	mov	r5,r16
    5454:	a809883a 	mov	r4,r21
    5458:	00047840 	call	4784 <_fflush_r>
    545c:	103fb926 	beq	r2,zero,5344 <__alt_data_end+0xfffbbf64>
    5460:	003f6506 	br	51f8 <__alt_data_end+0xfffbbe18>
    5464:	a809883a 	mov	r4,r21
    5468:	00077b80 	call	77b8 <_realloc_r>
    546c:	102f883a 	mov	r23,r2
    5470:	103fee1e 	bne	r2,zero,542c <__alt_data_end+0xfffbc04c>
    5474:	81400417 	ldw	r5,16(r16)
    5478:	a809883a 	mov	r4,r21
    547c:	0004ce40 	call	4ce4 <_free_r>
    5480:	8080030b 	ldhu	r2,12(r16)
    5484:	00ffdfc4 	movi	r3,-129
    5488:	1884703a 	and	r2,r3,r2
    548c:	00c00304 	movi	r3,12
    5490:	a8c00015 	stw	r3,0(r21)
    5494:	003f5906 	br	51fc <__alt_data_end+0xfffbbe1c>
    5498:	94c00044 	addi	r19,r18,1
    549c:	02000044 	movi	r8,1
    54a0:	003f6006 	br	5224 <__alt_data_end+0xfffbbe44>
    54a4:	00bfffc4 	movi	r2,-1
    54a8:	003f0006 	br	50ac <__alt_data_end+0xfffbbccc>
    54ac:	00800304 	movi	r2,12
    54b0:	a8800015 	stw	r2,0(r21)
    54b4:	8080030b 	ldhu	r2,12(r16)
    54b8:	003f5006 	br	51fc <__alt_data_end+0xfffbbe1c>

000054bc <_fwalk>:
    54bc:	defff704 	addi	sp,sp,-36
    54c0:	dd000415 	stw	r20,16(sp)
    54c4:	dfc00815 	stw	ra,32(sp)
    54c8:	ddc00715 	stw	r23,28(sp)
    54cc:	dd800615 	stw	r22,24(sp)
    54d0:	dd400515 	stw	r21,20(sp)
    54d4:	dcc00315 	stw	r19,12(sp)
    54d8:	dc800215 	stw	r18,8(sp)
    54dc:	dc400115 	stw	r17,4(sp)
    54e0:	dc000015 	stw	r16,0(sp)
    54e4:	2500b804 	addi	r20,r4,736
    54e8:	a0002326 	beq	r20,zero,5578 <_fwalk+0xbc>
    54ec:	282b883a 	mov	r21,r5
    54f0:	002f883a 	mov	r23,zero
    54f4:	05800044 	movi	r22,1
    54f8:	04ffffc4 	movi	r19,-1
    54fc:	a4400117 	ldw	r17,4(r20)
    5500:	a4800217 	ldw	r18,8(r20)
    5504:	8c7fffc4 	addi	r17,r17,-1
    5508:	88000d16 	blt	r17,zero,5540 <_fwalk+0x84>
    550c:	94000304 	addi	r16,r18,12
    5510:	94800384 	addi	r18,r18,14
    5514:	8080000b 	ldhu	r2,0(r16)
    5518:	8c7fffc4 	addi	r17,r17,-1
    551c:	813ffd04 	addi	r4,r16,-12
    5520:	b080042e 	bgeu	r22,r2,5534 <_fwalk+0x78>
    5524:	9080000f 	ldh	r2,0(r18)
    5528:	14c00226 	beq	r2,r19,5534 <_fwalk+0x78>
    552c:	a83ee83a 	callr	r21
    5530:	b8aeb03a 	or	r23,r23,r2
    5534:	84001a04 	addi	r16,r16,104
    5538:	94801a04 	addi	r18,r18,104
    553c:	8cfff51e 	bne	r17,r19,5514 <__alt_data_end+0xfffbc134>
    5540:	a5000017 	ldw	r20,0(r20)
    5544:	a03fed1e 	bne	r20,zero,54fc <__alt_data_end+0xfffbc11c>
    5548:	b805883a 	mov	r2,r23
    554c:	dfc00817 	ldw	ra,32(sp)
    5550:	ddc00717 	ldw	r23,28(sp)
    5554:	dd800617 	ldw	r22,24(sp)
    5558:	dd400517 	ldw	r21,20(sp)
    555c:	dd000417 	ldw	r20,16(sp)
    5560:	dcc00317 	ldw	r19,12(sp)
    5564:	dc800217 	ldw	r18,8(sp)
    5568:	dc400117 	ldw	r17,4(sp)
    556c:	dc000017 	ldw	r16,0(sp)
    5570:	dec00904 	addi	sp,sp,36
    5574:	f800283a 	ret
    5578:	002f883a 	mov	r23,zero
    557c:	003ff206 	br	5548 <__alt_data_end+0xfffbc168>

00005580 <_fwalk_reent>:
    5580:	defff704 	addi	sp,sp,-36
    5584:	dd000415 	stw	r20,16(sp)
    5588:	dfc00815 	stw	ra,32(sp)
    558c:	ddc00715 	stw	r23,28(sp)
    5590:	dd800615 	stw	r22,24(sp)
    5594:	dd400515 	stw	r21,20(sp)
    5598:	dcc00315 	stw	r19,12(sp)
    559c:	dc800215 	stw	r18,8(sp)
    55a0:	dc400115 	stw	r17,4(sp)
    55a4:	dc000015 	stw	r16,0(sp)
    55a8:	2500b804 	addi	r20,r4,736
    55ac:	a0002326 	beq	r20,zero,563c <_fwalk_reent+0xbc>
    55b0:	282b883a 	mov	r21,r5
    55b4:	2027883a 	mov	r19,r4
    55b8:	002f883a 	mov	r23,zero
    55bc:	05800044 	movi	r22,1
    55c0:	04bfffc4 	movi	r18,-1
    55c4:	a4400117 	ldw	r17,4(r20)
    55c8:	a4000217 	ldw	r16,8(r20)
    55cc:	8c7fffc4 	addi	r17,r17,-1
    55d0:	88000c16 	blt	r17,zero,5604 <_fwalk_reent+0x84>
    55d4:	84000304 	addi	r16,r16,12
    55d8:	8080000b 	ldhu	r2,0(r16)
    55dc:	8c7fffc4 	addi	r17,r17,-1
    55e0:	817ffd04 	addi	r5,r16,-12
    55e4:	b080052e 	bgeu	r22,r2,55fc <_fwalk_reent+0x7c>
    55e8:	8080008f 	ldh	r2,2(r16)
    55ec:	9809883a 	mov	r4,r19
    55f0:	14800226 	beq	r2,r18,55fc <_fwalk_reent+0x7c>
    55f4:	a83ee83a 	callr	r21
    55f8:	b8aeb03a 	or	r23,r23,r2
    55fc:	84001a04 	addi	r16,r16,104
    5600:	8cbff51e 	bne	r17,r18,55d8 <__alt_data_end+0xfffbc1f8>
    5604:	a5000017 	ldw	r20,0(r20)
    5608:	a03fee1e 	bne	r20,zero,55c4 <__alt_data_end+0xfffbc1e4>
    560c:	b805883a 	mov	r2,r23
    5610:	dfc00817 	ldw	ra,32(sp)
    5614:	ddc00717 	ldw	r23,28(sp)
    5618:	dd800617 	ldw	r22,24(sp)
    561c:	dd400517 	ldw	r21,20(sp)
    5620:	dd000417 	ldw	r20,16(sp)
    5624:	dcc00317 	ldw	r19,12(sp)
    5628:	dc800217 	ldw	r18,8(sp)
    562c:	dc400117 	ldw	r17,4(sp)
    5630:	dc000017 	ldw	r16,0(sp)
    5634:	dec00904 	addi	sp,sp,36
    5638:	f800283a 	ret
    563c:	002f883a 	mov	r23,zero
    5640:	003ff206 	br	560c <__alt_data_end+0xfffbc22c>

00005644 <_setlocale_r>:
    5644:	30001b26 	beq	r6,zero,56b4 <_setlocale_r+0x70>
    5648:	01400074 	movhi	r5,1
    564c:	defffe04 	addi	sp,sp,-8
    5650:	2941a104 	addi	r5,r5,1668
    5654:	3009883a 	mov	r4,r6
    5658:	dc000015 	stw	r16,0(sp)
    565c:	dfc00115 	stw	ra,4(sp)
    5660:	3021883a 	mov	r16,r6
    5664:	0007f200 	call	7f20 <strcmp>
    5668:	1000061e 	bne	r2,zero,5684 <_setlocale_r+0x40>
    566c:	00800074 	movhi	r2,1
    5670:	1081a004 	addi	r2,r2,1664
    5674:	dfc00117 	ldw	ra,4(sp)
    5678:	dc000017 	ldw	r16,0(sp)
    567c:	dec00204 	addi	sp,sp,8
    5680:	f800283a 	ret
    5684:	01400074 	movhi	r5,1
    5688:	2941a004 	addi	r5,r5,1664
    568c:	8009883a 	mov	r4,r16
    5690:	0007f200 	call	7f20 <strcmp>
    5694:	103ff526 	beq	r2,zero,566c <__alt_data_end+0xfffbc28c>
    5698:	01400074 	movhi	r5,1
    569c:	29418b04 	addi	r5,r5,1580
    56a0:	8009883a 	mov	r4,r16
    56a4:	0007f200 	call	7f20 <strcmp>
    56a8:	103ff026 	beq	r2,zero,566c <__alt_data_end+0xfffbc28c>
    56ac:	0005883a 	mov	r2,zero
    56b0:	003ff006 	br	5674 <__alt_data_end+0xfffbc294>
    56b4:	00800074 	movhi	r2,1
    56b8:	1081a004 	addi	r2,r2,1664
    56bc:	f800283a 	ret

000056c0 <__locale_charset>:
    56c0:	00800074 	movhi	r2,1
    56c4:	10835304 	addi	r2,r2,3404
    56c8:	f800283a 	ret

000056cc <__locale_mb_cur_max>:
    56cc:	00800074 	movhi	r2,1
    56d0:	1088ef04 	addi	r2,r2,9148
    56d4:	10800017 	ldw	r2,0(r2)
    56d8:	f800283a 	ret

000056dc <__locale_msgcharset>:
    56dc:	00800074 	movhi	r2,1
    56e0:	10834b04 	addi	r2,r2,3372
    56e4:	f800283a 	ret

000056e8 <__locale_cjk_lang>:
    56e8:	0005883a 	mov	r2,zero
    56ec:	f800283a 	ret

000056f0 <_localeconv_r>:
    56f0:	00800074 	movhi	r2,1
    56f4:	10835b04 	addi	r2,r2,3436
    56f8:	f800283a 	ret

000056fc <setlocale>:
    56fc:	00800074 	movhi	r2,1
    5700:	1088ee04 	addi	r2,r2,9144
    5704:	280d883a 	mov	r6,r5
    5708:	200b883a 	mov	r5,r4
    570c:	11000017 	ldw	r4,0(r2)
    5710:	00056441 	jmpi	5644 <_setlocale_r>

00005714 <localeconv>:
    5714:	00800074 	movhi	r2,1
    5718:	10835b04 	addi	r2,r2,3436
    571c:	f800283a 	ret

00005720 <__smakebuf_r>:
    5720:	2880030b 	ldhu	r2,12(r5)
    5724:	10c0008c 	andi	r3,r2,2
    5728:	1800411e 	bne	r3,zero,5830 <__smakebuf_r+0x110>
    572c:	deffec04 	addi	sp,sp,-80
    5730:	dc000f15 	stw	r16,60(sp)
    5734:	2821883a 	mov	r16,r5
    5738:	2940038f 	ldh	r5,14(r5)
    573c:	dc401015 	stw	r17,64(sp)
    5740:	dfc01315 	stw	ra,76(sp)
    5744:	dcc01215 	stw	r19,72(sp)
    5748:	dc801115 	stw	r18,68(sp)
    574c:	2023883a 	mov	r17,r4
    5750:	28001c16 	blt	r5,zero,57c4 <__smakebuf_r+0xa4>
    5754:	d80d883a 	mov	r6,sp
    5758:	0009ce80 	call	9ce8 <_fstat_r>
    575c:	10001816 	blt	r2,zero,57c0 <__smakebuf_r+0xa0>
    5760:	d8800117 	ldw	r2,4(sp)
    5764:	00e00014 	movui	r3,32768
    5768:	10bc000c 	andi	r2,r2,61440
    576c:	14c80020 	cmpeqi	r19,r2,8192
    5770:	10c03726 	beq	r2,r3,5850 <__smakebuf_r+0x130>
    5774:	80c0030b 	ldhu	r3,12(r16)
    5778:	18c20014 	ori	r3,r3,2048
    577c:	80c0030d 	sth	r3,12(r16)
    5780:	00c80004 	movi	r3,8192
    5784:	10c0521e 	bne	r2,r3,58d0 <__smakebuf_r+0x1b0>
    5788:	8140038f 	ldh	r5,14(r16)
    578c:	8809883a 	mov	r4,r17
    5790:	0009d440 	call	9d44 <_isatty_r>
    5794:	10004c26 	beq	r2,zero,58c8 <__smakebuf_r+0x1a8>
    5798:	8080030b 	ldhu	r2,12(r16)
    579c:	80c010c4 	addi	r3,r16,67
    57a0:	80c00015 	stw	r3,0(r16)
    57a4:	10800054 	ori	r2,r2,1
    57a8:	8080030d 	sth	r2,12(r16)
    57ac:	00800044 	movi	r2,1
    57b0:	80c00415 	stw	r3,16(r16)
    57b4:	80800515 	stw	r2,20(r16)
    57b8:	04810004 	movi	r18,1024
    57bc:	00000706 	br	57dc <__smakebuf_r+0xbc>
    57c0:	8080030b 	ldhu	r2,12(r16)
    57c4:	10c0200c 	andi	r3,r2,128
    57c8:	18001f1e 	bne	r3,zero,5848 <__smakebuf_r+0x128>
    57cc:	04810004 	movi	r18,1024
    57d0:	10820014 	ori	r2,r2,2048
    57d4:	8080030d 	sth	r2,12(r16)
    57d8:	0027883a 	mov	r19,zero
    57dc:	900b883a 	mov	r5,r18
    57e0:	8809883a 	mov	r4,r17
    57e4:	00058dc0 	call	58dc <_malloc_r>
    57e8:	10002c26 	beq	r2,zero,589c <__smakebuf_r+0x17c>
    57ec:	80c0030b 	ldhu	r3,12(r16)
    57f0:	01000034 	movhi	r4,0
    57f4:	21120604 	addi	r4,r4,18456
    57f8:	89000f15 	stw	r4,60(r17)
    57fc:	18c02014 	ori	r3,r3,128
    5800:	80c0030d 	sth	r3,12(r16)
    5804:	80800015 	stw	r2,0(r16)
    5808:	80800415 	stw	r2,16(r16)
    580c:	84800515 	stw	r18,20(r16)
    5810:	98001a1e 	bne	r19,zero,587c <__smakebuf_r+0x15c>
    5814:	dfc01317 	ldw	ra,76(sp)
    5818:	dcc01217 	ldw	r19,72(sp)
    581c:	dc801117 	ldw	r18,68(sp)
    5820:	dc401017 	ldw	r17,64(sp)
    5824:	dc000f17 	ldw	r16,60(sp)
    5828:	dec01404 	addi	sp,sp,80
    582c:	f800283a 	ret
    5830:	288010c4 	addi	r2,r5,67
    5834:	28800015 	stw	r2,0(r5)
    5838:	28800415 	stw	r2,16(r5)
    583c:	00800044 	movi	r2,1
    5840:	28800515 	stw	r2,20(r5)
    5844:	f800283a 	ret
    5848:	04801004 	movi	r18,64
    584c:	003fe006 	br	57d0 <__alt_data_end+0xfffbc3f0>
    5850:	81000a17 	ldw	r4,40(r16)
    5854:	00c00034 	movhi	r3,0
    5858:	18dfaf04 	addi	r3,r3,32444
    585c:	20ffc51e 	bne	r4,r3,5774 <__alt_data_end+0xfffbc394>
    5860:	8080030b 	ldhu	r2,12(r16)
    5864:	04810004 	movi	r18,1024
    5868:	84801315 	stw	r18,76(r16)
    586c:	1484b03a 	or	r2,r2,r18
    5870:	8080030d 	sth	r2,12(r16)
    5874:	0027883a 	mov	r19,zero
    5878:	003fd806 	br	57dc <__alt_data_end+0xfffbc3fc>
    587c:	8140038f 	ldh	r5,14(r16)
    5880:	8809883a 	mov	r4,r17
    5884:	0009d440 	call	9d44 <_isatty_r>
    5888:	103fe226 	beq	r2,zero,5814 <__alt_data_end+0xfffbc434>
    588c:	8080030b 	ldhu	r2,12(r16)
    5890:	10800054 	ori	r2,r2,1
    5894:	8080030d 	sth	r2,12(r16)
    5898:	003fde06 	br	5814 <__alt_data_end+0xfffbc434>
    589c:	8080030b 	ldhu	r2,12(r16)
    58a0:	10c0800c 	andi	r3,r2,512
    58a4:	183fdb1e 	bne	r3,zero,5814 <__alt_data_end+0xfffbc434>
    58a8:	10800094 	ori	r2,r2,2
    58ac:	80c010c4 	addi	r3,r16,67
    58b0:	8080030d 	sth	r2,12(r16)
    58b4:	00800044 	movi	r2,1
    58b8:	80c00015 	stw	r3,0(r16)
    58bc:	80c00415 	stw	r3,16(r16)
    58c0:	80800515 	stw	r2,20(r16)
    58c4:	003fd306 	br	5814 <__alt_data_end+0xfffbc434>
    58c8:	04810004 	movi	r18,1024
    58cc:	003fc306 	br	57dc <__alt_data_end+0xfffbc3fc>
    58d0:	0027883a 	mov	r19,zero
    58d4:	04810004 	movi	r18,1024
    58d8:	003fc006 	br	57dc <__alt_data_end+0xfffbc3fc>

000058dc <_malloc_r>:
    58dc:	defff504 	addi	sp,sp,-44
    58e0:	dc800315 	stw	r18,12(sp)
    58e4:	dfc00a15 	stw	ra,40(sp)
    58e8:	df000915 	stw	fp,36(sp)
    58ec:	ddc00815 	stw	r23,32(sp)
    58f0:	dd800715 	stw	r22,28(sp)
    58f4:	dd400615 	stw	r21,24(sp)
    58f8:	dd000515 	stw	r20,20(sp)
    58fc:	dcc00415 	stw	r19,16(sp)
    5900:	dc400215 	stw	r17,8(sp)
    5904:	dc000115 	stw	r16,4(sp)
    5908:	288002c4 	addi	r2,r5,11
    590c:	00c00584 	movi	r3,22
    5910:	2025883a 	mov	r18,r4
    5914:	18807f2e 	bgeu	r3,r2,5b14 <_malloc_r+0x238>
    5918:	047ffe04 	movi	r17,-8
    591c:	1462703a 	and	r17,r2,r17
    5920:	8800a316 	blt	r17,zero,5bb0 <_malloc_r+0x2d4>
    5924:	8940a236 	bltu	r17,r5,5bb0 <_malloc_r+0x2d4>
    5928:	000dc6c0 	call	dc6c <__malloc_lock>
    592c:	00807dc4 	movi	r2,503
    5930:	1441e92e 	bgeu	r2,r17,60d8 <_malloc_r+0x7fc>
    5934:	8804d27a 	srli	r2,r17,9
    5938:	1000a126 	beq	r2,zero,5bc0 <_malloc_r+0x2e4>
    593c:	00c00104 	movi	r3,4
    5940:	18811e36 	bltu	r3,r2,5dbc <_malloc_r+0x4e0>
    5944:	8804d1ba 	srli	r2,r17,6
    5948:	12000e44 	addi	r8,r2,57
    594c:	11c00e04 	addi	r7,r2,56
    5950:	4209883a 	add	r4,r8,r8
    5954:	04c00074 	movhi	r19,1
    5958:	2109883a 	add	r4,r4,r4
    595c:	9cc36904 	addi	r19,r19,3492
    5960:	2109883a 	add	r4,r4,r4
    5964:	9909883a 	add	r4,r19,r4
    5968:	24000117 	ldw	r16,4(r4)
    596c:	213ffe04 	addi	r4,r4,-8
    5970:	24009726 	beq	r4,r16,5bd0 <_malloc_r+0x2f4>
    5974:	80800117 	ldw	r2,4(r16)
    5978:	01bfff04 	movi	r6,-4
    597c:	014003c4 	movi	r5,15
    5980:	1184703a 	and	r2,r2,r6
    5984:	1447c83a 	sub	r3,r2,r17
    5988:	28c00716 	blt	r5,r3,59a8 <_malloc_r+0xcc>
    598c:	1800920e 	bge	r3,zero,5bd8 <_malloc_r+0x2fc>
    5990:	84000317 	ldw	r16,12(r16)
    5994:	24008e26 	beq	r4,r16,5bd0 <_malloc_r+0x2f4>
    5998:	80800117 	ldw	r2,4(r16)
    599c:	1184703a 	and	r2,r2,r6
    59a0:	1447c83a 	sub	r3,r2,r17
    59a4:	28fff90e 	bge	r5,r3,598c <__alt_data_end+0xfffbc5ac>
    59a8:	3809883a 	mov	r4,r7
    59ac:	01800074 	movhi	r6,1
    59b0:	9c000417 	ldw	r16,16(r19)
    59b4:	31836904 	addi	r6,r6,3492
    59b8:	32000204 	addi	r8,r6,8
    59bc:	82013426 	beq	r16,r8,5e90 <_malloc_r+0x5b4>
    59c0:	80c00117 	ldw	r3,4(r16)
    59c4:	00bfff04 	movi	r2,-4
    59c8:	188e703a 	and	r7,r3,r2
    59cc:	3c45c83a 	sub	r2,r7,r17
    59d0:	00c003c4 	movi	r3,15
    59d4:	18811f16 	blt	r3,r2,5e54 <_malloc_r+0x578>
    59d8:	32000515 	stw	r8,20(r6)
    59dc:	32000415 	stw	r8,16(r6)
    59e0:	10007f0e 	bge	r2,zero,5be0 <_malloc_r+0x304>
    59e4:	00807fc4 	movi	r2,511
    59e8:	11c0fd36 	bltu	r2,r7,5de0 <_malloc_r+0x504>
    59ec:	3806d0fa 	srli	r3,r7,3
    59f0:	01c00044 	movi	r7,1
    59f4:	30800117 	ldw	r2,4(r6)
    59f8:	19400044 	addi	r5,r3,1
    59fc:	294b883a 	add	r5,r5,r5
    5a00:	1807d0ba 	srai	r3,r3,2
    5a04:	294b883a 	add	r5,r5,r5
    5a08:	294b883a 	add	r5,r5,r5
    5a0c:	298b883a 	add	r5,r5,r6
    5a10:	38c6983a 	sll	r3,r7,r3
    5a14:	29c00017 	ldw	r7,0(r5)
    5a18:	2a7ffe04 	addi	r9,r5,-8
    5a1c:	1886b03a 	or	r3,r3,r2
    5a20:	82400315 	stw	r9,12(r16)
    5a24:	81c00215 	stw	r7,8(r16)
    5a28:	30c00115 	stw	r3,4(r6)
    5a2c:	2c000015 	stw	r16,0(r5)
    5a30:	3c000315 	stw	r16,12(r7)
    5a34:	2005d0ba 	srai	r2,r4,2
    5a38:	01400044 	movi	r5,1
    5a3c:	288a983a 	sll	r5,r5,r2
    5a40:	19406f36 	bltu	r3,r5,5c00 <_malloc_r+0x324>
    5a44:	28c4703a 	and	r2,r5,r3
    5a48:	10000a1e 	bne	r2,zero,5a74 <_malloc_r+0x198>
    5a4c:	00bfff04 	movi	r2,-4
    5a50:	294b883a 	add	r5,r5,r5
    5a54:	2088703a 	and	r4,r4,r2
    5a58:	28c4703a 	and	r2,r5,r3
    5a5c:	21000104 	addi	r4,r4,4
    5a60:	1000041e 	bne	r2,zero,5a74 <_malloc_r+0x198>
    5a64:	294b883a 	add	r5,r5,r5
    5a68:	28c4703a 	and	r2,r5,r3
    5a6c:	21000104 	addi	r4,r4,4
    5a70:	103ffc26 	beq	r2,zero,5a64 <__alt_data_end+0xfffbc684>
    5a74:	02bfff04 	movi	r10,-4
    5a78:	024003c4 	movi	r9,15
    5a7c:	21800044 	addi	r6,r4,1
    5a80:	318d883a 	add	r6,r6,r6
    5a84:	318d883a 	add	r6,r6,r6
    5a88:	318d883a 	add	r6,r6,r6
    5a8c:	998d883a 	add	r6,r19,r6
    5a90:	333ffe04 	addi	r12,r6,-8
    5a94:	2017883a 	mov	r11,r4
    5a98:	31800104 	addi	r6,r6,4
    5a9c:	34000017 	ldw	r16,0(r6)
    5aa0:	31fffd04 	addi	r7,r6,-12
    5aa4:	81c0041e 	bne	r16,r7,5ab8 <_malloc_r+0x1dc>
    5aa8:	0000fb06 	br	5e98 <_malloc_r+0x5bc>
    5aac:	1801030e 	bge	r3,zero,5ebc <_malloc_r+0x5e0>
    5ab0:	84000317 	ldw	r16,12(r16)
    5ab4:	81c0f826 	beq	r16,r7,5e98 <_malloc_r+0x5bc>
    5ab8:	80800117 	ldw	r2,4(r16)
    5abc:	1284703a 	and	r2,r2,r10
    5ac0:	1447c83a 	sub	r3,r2,r17
    5ac4:	48fff90e 	bge	r9,r3,5aac <__alt_data_end+0xfffbc6cc>
    5ac8:	80800317 	ldw	r2,12(r16)
    5acc:	81000217 	ldw	r4,8(r16)
    5ad0:	89400054 	ori	r5,r17,1
    5ad4:	81400115 	stw	r5,4(r16)
    5ad8:	20800315 	stw	r2,12(r4)
    5adc:	11000215 	stw	r4,8(r2)
    5ae0:	8463883a 	add	r17,r16,r17
    5ae4:	9c400515 	stw	r17,20(r19)
    5ae8:	9c400415 	stw	r17,16(r19)
    5aec:	18800054 	ori	r2,r3,1
    5af0:	88800115 	stw	r2,4(r17)
    5af4:	8a000315 	stw	r8,12(r17)
    5af8:	8a000215 	stw	r8,8(r17)
    5afc:	88e3883a 	add	r17,r17,r3
    5b00:	88c00015 	stw	r3,0(r17)
    5b04:	9009883a 	mov	r4,r18
    5b08:	000dc900 	call	dc90 <__malloc_unlock>
    5b0c:	80800204 	addi	r2,r16,8
    5b10:	00001b06 	br	5b80 <_malloc_r+0x2a4>
    5b14:	04400404 	movi	r17,16
    5b18:	89402536 	bltu	r17,r5,5bb0 <_malloc_r+0x2d4>
    5b1c:	000dc6c0 	call	dc6c <__malloc_lock>
    5b20:	00800184 	movi	r2,6
    5b24:	01000084 	movi	r4,2
    5b28:	04c00074 	movhi	r19,1
    5b2c:	1085883a 	add	r2,r2,r2
    5b30:	9cc36904 	addi	r19,r19,3492
    5b34:	1085883a 	add	r2,r2,r2
    5b38:	9885883a 	add	r2,r19,r2
    5b3c:	14000117 	ldw	r16,4(r2)
    5b40:	10fffe04 	addi	r3,r2,-8
    5b44:	80c0d926 	beq	r16,r3,5eac <_malloc_r+0x5d0>
    5b48:	80c00117 	ldw	r3,4(r16)
    5b4c:	81000317 	ldw	r4,12(r16)
    5b50:	00bfff04 	movi	r2,-4
    5b54:	1884703a 	and	r2,r3,r2
    5b58:	81400217 	ldw	r5,8(r16)
    5b5c:	8085883a 	add	r2,r16,r2
    5b60:	10c00117 	ldw	r3,4(r2)
    5b64:	29000315 	stw	r4,12(r5)
    5b68:	21400215 	stw	r5,8(r4)
    5b6c:	18c00054 	ori	r3,r3,1
    5b70:	10c00115 	stw	r3,4(r2)
    5b74:	9009883a 	mov	r4,r18
    5b78:	000dc900 	call	dc90 <__malloc_unlock>
    5b7c:	80800204 	addi	r2,r16,8
    5b80:	dfc00a17 	ldw	ra,40(sp)
    5b84:	df000917 	ldw	fp,36(sp)
    5b88:	ddc00817 	ldw	r23,32(sp)
    5b8c:	dd800717 	ldw	r22,28(sp)
    5b90:	dd400617 	ldw	r21,24(sp)
    5b94:	dd000517 	ldw	r20,20(sp)
    5b98:	dcc00417 	ldw	r19,16(sp)
    5b9c:	dc800317 	ldw	r18,12(sp)
    5ba0:	dc400217 	ldw	r17,8(sp)
    5ba4:	dc000117 	ldw	r16,4(sp)
    5ba8:	dec00b04 	addi	sp,sp,44
    5bac:	f800283a 	ret
    5bb0:	00800304 	movi	r2,12
    5bb4:	90800015 	stw	r2,0(r18)
    5bb8:	0005883a 	mov	r2,zero
    5bbc:	003ff006 	br	5b80 <__alt_data_end+0xfffbc7a0>
    5bc0:	01002004 	movi	r4,128
    5bc4:	02001004 	movi	r8,64
    5bc8:	01c00fc4 	movi	r7,63
    5bcc:	003f6106 	br	5954 <__alt_data_end+0xfffbc574>
    5bd0:	4009883a 	mov	r4,r8
    5bd4:	003f7506 	br	59ac <__alt_data_end+0xfffbc5cc>
    5bd8:	81000317 	ldw	r4,12(r16)
    5bdc:	003fde06 	br	5b58 <__alt_data_end+0xfffbc778>
    5be0:	81c5883a 	add	r2,r16,r7
    5be4:	11400117 	ldw	r5,4(r2)
    5be8:	9009883a 	mov	r4,r18
    5bec:	29400054 	ori	r5,r5,1
    5bf0:	11400115 	stw	r5,4(r2)
    5bf4:	000dc900 	call	dc90 <__malloc_unlock>
    5bf8:	80800204 	addi	r2,r16,8
    5bfc:	003fe006 	br	5b80 <__alt_data_end+0xfffbc7a0>
    5c00:	9c000217 	ldw	r16,8(r19)
    5c04:	00bfff04 	movi	r2,-4
    5c08:	85800117 	ldw	r22,4(r16)
    5c0c:	b0ac703a 	and	r22,r22,r2
    5c10:	b4400336 	bltu	r22,r17,5c20 <_malloc_r+0x344>
    5c14:	b445c83a 	sub	r2,r22,r17
    5c18:	00c003c4 	movi	r3,15
    5c1c:	18805d16 	blt	r3,r2,5d94 <_malloc_r+0x4b8>
    5c20:	05c00074 	movhi	r23,1
    5c24:	00800074 	movhi	r2,1
    5c28:	108fbd04 	addi	r2,r2,16116
    5c2c:	bdc8f004 	addi	r23,r23,9152
    5c30:	15400017 	ldw	r21,0(r2)
    5c34:	b8c00017 	ldw	r3,0(r23)
    5c38:	00bfffc4 	movi	r2,-1
    5c3c:	858d883a 	add	r6,r16,r22
    5c40:	8d6b883a 	add	r21,r17,r21
    5c44:	1880ea26 	beq	r3,r2,5ff0 <_malloc_r+0x714>
    5c48:	ad4403c4 	addi	r21,r21,4111
    5c4c:	00bc0004 	movi	r2,-4096
    5c50:	a8aa703a 	and	r21,r21,r2
    5c54:	a80b883a 	mov	r5,r21
    5c58:	9009883a 	mov	r4,r18
    5c5c:	d9800015 	stw	r6,0(sp)
    5c60:	0007d900 	call	7d90 <_sbrk_r>
    5c64:	1029883a 	mov	r20,r2
    5c68:	00bfffc4 	movi	r2,-1
    5c6c:	d9800017 	ldw	r6,0(sp)
    5c70:	a080e826 	beq	r20,r2,6014 <_malloc_r+0x738>
    5c74:	a180a636 	bltu	r20,r6,5f10 <_malloc_r+0x634>
    5c78:	07000074 	movhi	fp,1
    5c7c:	e70fc604 	addi	fp,fp,16152
    5c80:	e0800017 	ldw	r2,0(fp)
    5c84:	a887883a 	add	r3,r21,r2
    5c88:	e0c00015 	stw	r3,0(fp)
    5c8c:	3500e626 	beq	r6,r20,6028 <_malloc_r+0x74c>
    5c90:	b9000017 	ldw	r4,0(r23)
    5c94:	00bfffc4 	movi	r2,-1
    5c98:	2080ee26 	beq	r4,r2,6054 <_malloc_r+0x778>
    5c9c:	a185c83a 	sub	r2,r20,r6
    5ca0:	10c5883a 	add	r2,r2,r3
    5ca4:	e0800015 	stw	r2,0(fp)
    5ca8:	a0c001cc 	andi	r3,r20,7
    5cac:	1800bc26 	beq	r3,zero,5fa0 <_malloc_r+0x6c4>
    5cb0:	a0e9c83a 	sub	r20,r20,r3
    5cb4:	00840204 	movi	r2,4104
    5cb8:	a5000204 	addi	r20,r20,8
    5cbc:	10c7c83a 	sub	r3,r2,r3
    5cc0:	a545883a 	add	r2,r20,r21
    5cc4:	1083ffcc 	andi	r2,r2,4095
    5cc8:	18abc83a 	sub	r21,r3,r2
    5ccc:	a80b883a 	mov	r5,r21
    5cd0:	9009883a 	mov	r4,r18
    5cd4:	0007d900 	call	7d90 <_sbrk_r>
    5cd8:	00ffffc4 	movi	r3,-1
    5cdc:	10c0e126 	beq	r2,r3,6064 <_malloc_r+0x788>
    5ce0:	1505c83a 	sub	r2,r2,r20
    5ce4:	1545883a 	add	r2,r2,r21
    5ce8:	10800054 	ori	r2,r2,1
    5cec:	e0c00017 	ldw	r3,0(fp)
    5cf0:	9d000215 	stw	r20,8(r19)
    5cf4:	a0800115 	stw	r2,4(r20)
    5cf8:	a8c7883a 	add	r3,r21,r3
    5cfc:	e0c00015 	stw	r3,0(fp)
    5d00:	84c00e26 	beq	r16,r19,5d3c <_malloc_r+0x460>
    5d04:	018003c4 	movi	r6,15
    5d08:	3580a72e 	bgeu	r6,r22,5fa8 <_malloc_r+0x6cc>
    5d0c:	81400117 	ldw	r5,4(r16)
    5d10:	013ffe04 	movi	r4,-8
    5d14:	b0bffd04 	addi	r2,r22,-12
    5d18:	1104703a 	and	r2,r2,r4
    5d1c:	2900004c 	andi	r4,r5,1
    5d20:	2088b03a 	or	r4,r4,r2
    5d24:	81000115 	stw	r4,4(r16)
    5d28:	01400144 	movi	r5,5
    5d2c:	8089883a 	add	r4,r16,r2
    5d30:	21400115 	stw	r5,4(r4)
    5d34:	21400215 	stw	r5,8(r4)
    5d38:	3080cd36 	bltu	r6,r2,6070 <_malloc_r+0x794>
    5d3c:	00800074 	movhi	r2,1
    5d40:	108fbc04 	addi	r2,r2,16112
    5d44:	11000017 	ldw	r4,0(r2)
    5d48:	20c0012e 	bgeu	r4,r3,5d50 <_malloc_r+0x474>
    5d4c:	10c00015 	stw	r3,0(r2)
    5d50:	00800074 	movhi	r2,1
    5d54:	108fbb04 	addi	r2,r2,16108
    5d58:	11000017 	ldw	r4,0(r2)
    5d5c:	9c000217 	ldw	r16,8(r19)
    5d60:	20c0012e 	bgeu	r4,r3,5d68 <_malloc_r+0x48c>
    5d64:	10c00015 	stw	r3,0(r2)
    5d68:	80c00117 	ldw	r3,4(r16)
    5d6c:	00bfff04 	movi	r2,-4
    5d70:	1886703a 	and	r3,r3,r2
    5d74:	1c45c83a 	sub	r2,r3,r17
    5d78:	1c400236 	bltu	r3,r17,5d84 <_malloc_r+0x4a8>
    5d7c:	00c003c4 	movi	r3,15
    5d80:	18800416 	blt	r3,r2,5d94 <_malloc_r+0x4b8>
    5d84:	9009883a 	mov	r4,r18
    5d88:	000dc900 	call	dc90 <__malloc_unlock>
    5d8c:	0005883a 	mov	r2,zero
    5d90:	003f7b06 	br	5b80 <__alt_data_end+0xfffbc7a0>
    5d94:	88c00054 	ori	r3,r17,1
    5d98:	80c00115 	stw	r3,4(r16)
    5d9c:	8463883a 	add	r17,r16,r17
    5da0:	10800054 	ori	r2,r2,1
    5da4:	9c400215 	stw	r17,8(r19)
    5da8:	88800115 	stw	r2,4(r17)
    5dac:	9009883a 	mov	r4,r18
    5db0:	000dc900 	call	dc90 <__malloc_unlock>
    5db4:	80800204 	addi	r2,r16,8
    5db8:	003f7106 	br	5b80 <__alt_data_end+0xfffbc7a0>
    5dbc:	00c00504 	movi	r3,20
    5dc0:	18804a2e 	bgeu	r3,r2,5eec <_malloc_r+0x610>
    5dc4:	00c01504 	movi	r3,84
    5dc8:	18806e36 	bltu	r3,r2,5f84 <_malloc_r+0x6a8>
    5dcc:	8804d33a 	srli	r2,r17,12
    5dd0:	12001bc4 	addi	r8,r2,111
    5dd4:	11c01b84 	addi	r7,r2,110
    5dd8:	4209883a 	add	r4,r8,r8
    5ddc:	003edd06 	br	5954 <__alt_data_end+0xfffbc574>
    5de0:	3804d27a 	srli	r2,r7,9
    5de4:	00c00104 	movi	r3,4
    5de8:	1880442e 	bgeu	r3,r2,5efc <_malloc_r+0x620>
    5dec:	00c00504 	movi	r3,20
    5df0:	18808136 	bltu	r3,r2,5ff8 <_malloc_r+0x71c>
    5df4:	11401704 	addi	r5,r2,92
    5df8:	10c016c4 	addi	r3,r2,91
    5dfc:	294b883a 	add	r5,r5,r5
    5e00:	294b883a 	add	r5,r5,r5
    5e04:	294b883a 	add	r5,r5,r5
    5e08:	994b883a 	add	r5,r19,r5
    5e0c:	28800017 	ldw	r2,0(r5)
    5e10:	01800074 	movhi	r6,1
    5e14:	297ffe04 	addi	r5,r5,-8
    5e18:	31836904 	addi	r6,r6,3492
    5e1c:	28806526 	beq	r5,r2,5fb4 <_malloc_r+0x6d8>
    5e20:	01bfff04 	movi	r6,-4
    5e24:	10c00117 	ldw	r3,4(r2)
    5e28:	1986703a 	and	r3,r3,r6
    5e2c:	38c0022e 	bgeu	r7,r3,5e38 <_malloc_r+0x55c>
    5e30:	10800217 	ldw	r2,8(r2)
    5e34:	28bffb1e 	bne	r5,r2,5e24 <__alt_data_end+0xfffbca44>
    5e38:	11400317 	ldw	r5,12(r2)
    5e3c:	98c00117 	ldw	r3,4(r19)
    5e40:	81400315 	stw	r5,12(r16)
    5e44:	80800215 	stw	r2,8(r16)
    5e48:	2c000215 	stw	r16,8(r5)
    5e4c:	14000315 	stw	r16,12(r2)
    5e50:	003ef806 	br	5a34 <__alt_data_end+0xfffbc654>
    5e54:	88c00054 	ori	r3,r17,1
    5e58:	80c00115 	stw	r3,4(r16)
    5e5c:	8463883a 	add	r17,r16,r17
    5e60:	34400515 	stw	r17,20(r6)
    5e64:	34400415 	stw	r17,16(r6)
    5e68:	10c00054 	ori	r3,r2,1
    5e6c:	8a000315 	stw	r8,12(r17)
    5e70:	8a000215 	stw	r8,8(r17)
    5e74:	88c00115 	stw	r3,4(r17)
    5e78:	88a3883a 	add	r17,r17,r2
    5e7c:	88800015 	stw	r2,0(r17)
    5e80:	9009883a 	mov	r4,r18
    5e84:	000dc900 	call	dc90 <__malloc_unlock>
    5e88:	80800204 	addi	r2,r16,8
    5e8c:	003f3c06 	br	5b80 <__alt_data_end+0xfffbc7a0>
    5e90:	30c00117 	ldw	r3,4(r6)
    5e94:	003ee706 	br	5a34 <__alt_data_end+0xfffbc654>
    5e98:	5ac00044 	addi	r11,r11,1
    5e9c:	588000cc 	andi	r2,r11,3
    5ea0:	31800204 	addi	r6,r6,8
    5ea4:	103efd1e 	bne	r2,zero,5a9c <__alt_data_end+0xfffbc6bc>
    5ea8:	00002406 	br	5f3c <_malloc_r+0x660>
    5eac:	14000317 	ldw	r16,12(r2)
    5eb0:	143f251e 	bne	r2,r16,5b48 <__alt_data_end+0xfffbc768>
    5eb4:	21000084 	addi	r4,r4,2
    5eb8:	003ebc06 	br	59ac <__alt_data_end+0xfffbc5cc>
    5ebc:	8085883a 	add	r2,r16,r2
    5ec0:	10c00117 	ldw	r3,4(r2)
    5ec4:	81000317 	ldw	r4,12(r16)
    5ec8:	81400217 	ldw	r5,8(r16)
    5ecc:	18c00054 	ori	r3,r3,1
    5ed0:	10c00115 	stw	r3,4(r2)
    5ed4:	29000315 	stw	r4,12(r5)
    5ed8:	21400215 	stw	r5,8(r4)
    5edc:	9009883a 	mov	r4,r18
    5ee0:	000dc900 	call	dc90 <__malloc_unlock>
    5ee4:	80800204 	addi	r2,r16,8
    5ee8:	003f2506 	br	5b80 <__alt_data_end+0xfffbc7a0>
    5eec:	12001704 	addi	r8,r2,92
    5ef0:	11c016c4 	addi	r7,r2,91
    5ef4:	4209883a 	add	r4,r8,r8
    5ef8:	003e9606 	br	5954 <__alt_data_end+0xfffbc574>
    5efc:	3804d1ba 	srli	r2,r7,6
    5f00:	11400e44 	addi	r5,r2,57
    5f04:	10c00e04 	addi	r3,r2,56
    5f08:	294b883a 	add	r5,r5,r5
    5f0c:	003fbc06 	br	5e00 <__alt_data_end+0xfffbca20>
    5f10:	84ff5926 	beq	r16,r19,5c78 <__alt_data_end+0xfffbc898>
    5f14:	00800074 	movhi	r2,1
    5f18:	10836904 	addi	r2,r2,3492
    5f1c:	14000217 	ldw	r16,8(r2)
    5f20:	00bfff04 	movi	r2,-4
    5f24:	80c00117 	ldw	r3,4(r16)
    5f28:	1886703a 	and	r3,r3,r2
    5f2c:	003f9106 	br	5d74 <__alt_data_end+0xfffbc994>
    5f30:	60800217 	ldw	r2,8(r12)
    5f34:	213fffc4 	addi	r4,r4,-1
    5f38:	1300651e 	bne	r2,r12,60d0 <_malloc_r+0x7f4>
    5f3c:	208000cc 	andi	r2,r4,3
    5f40:	633ffe04 	addi	r12,r12,-8
    5f44:	103ffa1e 	bne	r2,zero,5f30 <__alt_data_end+0xfffbcb50>
    5f48:	98800117 	ldw	r2,4(r19)
    5f4c:	0146303a 	nor	r3,zero,r5
    5f50:	1884703a 	and	r2,r3,r2
    5f54:	98800115 	stw	r2,4(r19)
    5f58:	294b883a 	add	r5,r5,r5
    5f5c:	117f2836 	bltu	r2,r5,5c00 <__alt_data_end+0xfffbc820>
    5f60:	283f2726 	beq	r5,zero,5c00 <__alt_data_end+0xfffbc820>
    5f64:	2886703a 	and	r3,r5,r2
    5f68:	5809883a 	mov	r4,r11
    5f6c:	183ec31e 	bne	r3,zero,5a7c <__alt_data_end+0xfffbc69c>
    5f70:	294b883a 	add	r5,r5,r5
    5f74:	2886703a 	and	r3,r5,r2
    5f78:	21000104 	addi	r4,r4,4
    5f7c:	183ffc26 	beq	r3,zero,5f70 <__alt_data_end+0xfffbcb90>
    5f80:	003ebe06 	br	5a7c <__alt_data_end+0xfffbc69c>
    5f84:	00c05504 	movi	r3,340
    5f88:	18801236 	bltu	r3,r2,5fd4 <_malloc_r+0x6f8>
    5f8c:	8804d3fa 	srli	r2,r17,15
    5f90:	12001e04 	addi	r8,r2,120
    5f94:	11c01dc4 	addi	r7,r2,119
    5f98:	4209883a 	add	r4,r8,r8
    5f9c:	003e6d06 	br	5954 <__alt_data_end+0xfffbc574>
    5fa0:	00c40004 	movi	r3,4096
    5fa4:	003f4606 	br	5cc0 <__alt_data_end+0xfffbc8e0>
    5fa8:	00800044 	movi	r2,1
    5fac:	a0800115 	stw	r2,4(r20)
    5fb0:	003f7406 	br	5d84 <__alt_data_end+0xfffbc9a4>
    5fb4:	1805d0ba 	srai	r2,r3,2
    5fb8:	01c00044 	movi	r7,1
    5fbc:	30c00117 	ldw	r3,4(r6)
    5fc0:	388e983a 	sll	r7,r7,r2
    5fc4:	2805883a 	mov	r2,r5
    5fc8:	38c6b03a 	or	r3,r7,r3
    5fcc:	30c00115 	stw	r3,4(r6)
    5fd0:	003f9b06 	br	5e40 <__alt_data_end+0xfffbca60>
    5fd4:	00c15504 	movi	r3,1364
    5fd8:	18801a36 	bltu	r3,r2,6044 <_malloc_r+0x768>
    5fdc:	8804d4ba 	srli	r2,r17,18
    5fe0:	12001f44 	addi	r8,r2,125
    5fe4:	11c01f04 	addi	r7,r2,124
    5fe8:	4209883a 	add	r4,r8,r8
    5fec:	003e5906 	br	5954 <__alt_data_end+0xfffbc574>
    5ff0:	ad400404 	addi	r21,r21,16
    5ff4:	003f1706 	br	5c54 <__alt_data_end+0xfffbc874>
    5ff8:	00c01504 	movi	r3,84
    5ffc:	18802336 	bltu	r3,r2,608c <_malloc_r+0x7b0>
    6000:	3804d33a 	srli	r2,r7,12
    6004:	11401bc4 	addi	r5,r2,111
    6008:	10c01b84 	addi	r3,r2,110
    600c:	294b883a 	add	r5,r5,r5
    6010:	003f7b06 	br	5e00 <__alt_data_end+0xfffbca20>
    6014:	9c000217 	ldw	r16,8(r19)
    6018:	00bfff04 	movi	r2,-4
    601c:	80c00117 	ldw	r3,4(r16)
    6020:	1886703a 	and	r3,r3,r2
    6024:	003f5306 	br	5d74 <__alt_data_end+0xfffbc994>
    6028:	3083ffcc 	andi	r2,r6,4095
    602c:	103f181e 	bne	r2,zero,5c90 <__alt_data_end+0xfffbc8b0>
    6030:	99000217 	ldw	r4,8(r19)
    6034:	b545883a 	add	r2,r22,r21
    6038:	10800054 	ori	r2,r2,1
    603c:	20800115 	stw	r2,4(r4)
    6040:	003f3e06 	br	5d3c <__alt_data_end+0xfffbc95c>
    6044:	01003f84 	movi	r4,254
    6048:	02001fc4 	movi	r8,127
    604c:	01c01f84 	movi	r7,126
    6050:	003e4006 	br	5954 <__alt_data_end+0xfffbc574>
    6054:	00800074 	movhi	r2,1
    6058:	1088f004 	addi	r2,r2,9152
    605c:	15000015 	stw	r20,0(r2)
    6060:	003f1106 	br	5ca8 <__alt_data_end+0xfffbc8c8>
    6064:	00800044 	movi	r2,1
    6068:	002b883a 	mov	r21,zero
    606c:	003f1f06 	br	5cec <__alt_data_end+0xfffbc90c>
    6070:	81400204 	addi	r5,r16,8
    6074:	9009883a 	mov	r4,r18
    6078:	0004ce40 	call	4ce4 <_free_r>
    607c:	00800074 	movhi	r2,1
    6080:	108fc604 	addi	r2,r2,16152
    6084:	10c00017 	ldw	r3,0(r2)
    6088:	003f2c06 	br	5d3c <__alt_data_end+0xfffbc95c>
    608c:	00c05504 	movi	r3,340
    6090:	18800536 	bltu	r3,r2,60a8 <_malloc_r+0x7cc>
    6094:	3804d3fa 	srli	r2,r7,15
    6098:	11401e04 	addi	r5,r2,120
    609c:	10c01dc4 	addi	r3,r2,119
    60a0:	294b883a 	add	r5,r5,r5
    60a4:	003f5606 	br	5e00 <__alt_data_end+0xfffbca20>
    60a8:	00c15504 	movi	r3,1364
    60ac:	18800536 	bltu	r3,r2,60c4 <_malloc_r+0x7e8>
    60b0:	3804d4ba 	srli	r2,r7,18
    60b4:	11401f44 	addi	r5,r2,125
    60b8:	10c01f04 	addi	r3,r2,124
    60bc:	294b883a 	add	r5,r5,r5
    60c0:	003f4f06 	br	5e00 <__alt_data_end+0xfffbca20>
    60c4:	01403f84 	movi	r5,254
    60c8:	00c01f84 	movi	r3,126
    60cc:	003f4c06 	br	5e00 <__alt_data_end+0xfffbca20>
    60d0:	98800117 	ldw	r2,4(r19)
    60d4:	003fa006 	br	5f58 <__alt_data_end+0xfffbcb78>
    60d8:	8808d0fa 	srli	r4,r17,3
    60dc:	20800044 	addi	r2,r4,1
    60e0:	1085883a 	add	r2,r2,r2
    60e4:	003e9006 	br	5b28 <__alt_data_end+0xfffbc748>

000060e8 <memchr>:
    60e8:	208000cc 	andi	r2,r4,3
    60ec:	280f883a 	mov	r7,r5
    60f0:	10003426 	beq	r2,zero,61c4 <memchr+0xdc>
    60f4:	30bfffc4 	addi	r2,r6,-1
    60f8:	30001a26 	beq	r6,zero,6164 <memchr+0x7c>
    60fc:	20c00003 	ldbu	r3,0(r4)
    6100:	29803fcc 	andi	r6,r5,255
    6104:	30c0051e 	bne	r6,r3,611c <memchr+0x34>
    6108:	00001806 	br	616c <memchr+0x84>
    610c:	10001526 	beq	r2,zero,6164 <memchr+0x7c>
    6110:	20c00003 	ldbu	r3,0(r4)
    6114:	10bfffc4 	addi	r2,r2,-1
    6118:	30c01426 	beq	r6,r3,616c <memchr+0x84>
    611c:	21000044 	addi	r4,r4,1
    6120:	20c000cc 	andi	r3,r4,3
    6124:	183ff91e 	bne	r3,zero,610c <__alt_data_end+0xfffbcd2c>
    6128:	020000c4 	movi	r8,3
    612c:	40801136 	bltu	r8,r2,6174 <memchr+0x8c>
    6130:	10000c26 	beq	r2,zero,6164 <memchr+0x7c>
    6134:	20c00003 	ldbu	r3,0(r4)
    6138:	29403fcc 	andi	r5,r5,255
    613c:	28c00b26 	beq	r5,r3,616c <memchr+0x84>
    6140:	20c00044 	addi	r3,r4,1
    6144:	39803fcc 	andi	r6,r7,255
    6148:	2089883a 	add	r4,r4,r2
    614c:	00000306 	br	615c <memchr+0x74>
    6150:	18c00044 	addi	r3,r3,1
    6154:	197fffc3 	ldbu	r5,-1(r3)
    6158:	31400526 	beq	r6,r5,6170 <memchr+0x88>
    615c:	1805883a 	mov	r2,r3
    6160:	20fffb1e 	bne	r4,r3,6150 <__alt_data_end+0xfffbcd70>
    6164:	0005883a 	mov	r2,zero
    6168:	f800283a 	ret
    616c:	2005883a 	mov	r2,r4
    6170:	f800283a 	ret
    6174:	28c03fcc 	andi	r3,r5,255
    6178:	1812923a 	slli	r9,r3,8
    617c:	02ffbff4 	movhi	r11,65279
    6180:	02a02074 	movhi	r10,32897
    6184:	48d2b03a 	or	r9,r9,r3
    6188:	4806943a 	slli	r3,r9,16
    618c:	5affbfc4 	addi	r11,r11,-257
    6190:	52a02004 	addi	r10,r10,-32640
    6194:	48d2b03a 	or	r9,r9,r3
    6198:	20c00017 	ldw	r3,0(r4)
    619c:	48c6f03a 	xor	r3,r9,r3
    61a0:	1acd883a 	add	r6,r3,r11
    61a4:	00c6303a 	nor	r3,zero,r3
    61a8:	30c6703a 	and	r3,r6,r3
    61ac:	1a86703a 	and	r3,r3,r10
    61b0:	183fe01e 	bne	r3,zero,6134 <__alt_data_end+0xfffbcd54>
    61b4:	10bfff04 	addi	r2,r2,-4
    61b8:	21000104 	addi	r4,r4,4
    61bc:	40bff636 	bltu	r8,r2,6198 <__alt_data_end+0xfffbcdb8>
    61c0:	003fdb06 	br	6130 <__alt_data_end+0xfffbcd50>
    61c4:	3005883a 	mov	r2,r6
    61c8:	003fd706 	br	6128 <__alt_data_end+0xfffbcd48>

000061cc <memcpy>:
    61cc:	defffd04 	addi	sp,sp,-12
    61d0:	dfc00215 	stw	ra,8(sp)
    61d4:	dc400115 	stw	r17,4(sp)
    61d8:	dc000015 	stw	r16,0(sp)
    61dc:	00c003c4 	movi	r3,15
    61e0:	2005883a 	mov	r2,r4
    61e4:	1980452e 	bgeu	r3,r6,62fc <memcpy+0x130>
    61e8:	2906b03a 	or	r3,r5,r4
    61ec:	18c000cc 	andi	r3,r3,3
    61f0:	1800441e 	bne	r3,zero,6304 <memcpy+0x138>
    61f4:	347ffc04 	addi	r17,r6,-16
    61f8:	8822d13a 	srli	r17,r17,4
    61fc:	28c00104 	addi	r3,r5,4
    6200:	23400104 	addi	r13,r4,4
    6204:	8820913a 	slli	r16,r17,4
    6208:	2b000204 	addi	r12,r5,8
    620c:	22c00204 	addi	r11,r4,8
    6210:	84000504 	addi	r16,r16,20
    6214:	2a800304 	addi	r10,r5,12
    6218:	22400304 	addi	r9,r4,12
    621c:	2c21883a 	add	r16,r5,r16
    6220:	2811883a 	mov	r8,r5
    6224:	200f883a 	mov	r7,r4
    6228:	41000017 	ldw	r4,0(r8)
    622c:	1fc00017 	ldw	ra,0(r3)
    6230:	63c00017 	ldw	r15,0(r12)
    6234:	39000015 	stw	r4,0(r7)
    6238:	53800017 	ldw	r14,0(r10)
    623c:	6fc00015 	stw	ra,0(r13)
    6240:	5bc00015 	stw	r15,0(r11)
    6244:	4b800015 	stw	r14,0(r9)
    6248:	18c00404 	addi	r3,r3,16
    624c:	39c00404 	addi	r7,r7,16
    6250:	42000404 	addi	r8,r8,16
    6254:	6b400404 	addi	r13,r13,16
    6258:	63000404 	addi	r12,r12,16
    625c:	5ac00404 	addi	r11,r11,16
    6260:	52800404 	addi	r10,r10,16
    6264:	4a400404 	addi	r9,r9,16
    6268:	1c3fef1e 	bne	r3,r16,6228 <__alt_data_end+0xfffbce48>
    626c:	89c00044 	addi	r7,r17,1
    6270:	380e913a 	slli	r7,r7,4
    6274:	310003cc 	andi	r4,r6,15
    6278:	02c000c4 	movi	r11,3
    627c:	11c7883a 	add	r3,r2,r7
    6280:	29cb883a 	add	r5,r5,r7
    6284:	5900212e 	bgeu	r11,r4,630c <memcpy+0x140>
    6288:	1813883a 	mov	r9,r3
    628c:	2811883a 	mov	r8,r5
    6290:	200f883a 	mov	r7,r4
    6294:	42800017 	ldw	r10,0(r8)
    6298:	4a400104 	addi	r9,r9,4
    629c:	39ffff04 	addi	r7,r7,-4
    62a0:	4abfff15 	stw	r10,-4(r9)
    62a4:	42000104 	addi	r8,r8,4
    62a8:	59fffa36 	bltu	r11,r7,6294 <__alt_data_end+0xfffbceb4>
    62ac:	213fff04 	addi	r4,r4,-4
    62b0:	2008d0ba 	srli	r4,r4,2
    62b4:	318000cc 	andi	r6,r6,3
    62b8:	21000044 	addi	r4,r4,1
    62bc:	2109883a 	add	r4,r4,r4
    62c0:	2109883a 	add	r4,r4,r4
    62c4:	1907883a 	add	r3,r3,r4
    62c8:	290b883a 	add	r5,r5,r4
    62cc:	30000626 	beq	r6,zero,62e8 <memcpy+0x11c>
    62d0:	198d883a 	add	r6,r3,r6
    62d4:	29c00003 	ldbu	r7,0(r5)
    62d8:	18c00044 	addi	r3,r3,1
    62dc:	29400044 	addi	r5,r5,1
    62e0:	19ffffc5 	stb	r7,-1(r3)
    62e4:	19bffb1e 	bne	r3,r6,62d4 <__alt_data_end+0xfffbcef4>
    62e8:	dfc00217 	ldw	ra,8(sp)
    62ec:	dc400117 	ldw	r17,4(sp)
    62f0:	dc000017 	ldw	r16,0(sp)
    62f4:	dec00304 	addi	sp,sp,12
    62f8:	f800283a 	ret
    62fc:	2007883a 	mov	r3,r4
    6300:	003ff206 	br	62cc <__alt_data_end+0xfffbceec>
    6304:	2007883a 	mov	r3,r4
    6308:	003ff106 	br	62d0 <__alt_data_end+0xfffbcef0>
    630c:	200d883a 	mov	r6,r4
    6310:	003fee06 	br	62cc <__alt_data_end+0xfffbceec>

00006314 <memmove>:
    6314:	2005883a 	mov	r2,r4
    6318:	29000b2e 	bgeu	r5,r4,6348 <memmove+0x34>
    631c:	298f883a 	add	r7,r5,r6
    6320:	21c0092e 	bgeu	r4,r7,6348 <memmove+0x34>
    6324:	2187883a 	add	r3,r4,r6
    6328:	198bc83a 	sub	r5,r3,r6
    632c:	30004826 	beq	r6,zero,6450 <memmove+0x13c>
    6330:	39ffffc4 	addi	r7,r7,-1
    6334:	39000003 	ldbu	r4,0(r7)
    6338:	18ffffc4 	addi	r3,r3,-1
    633c:	19000005 	stb	r4,0(r3)
    6340:	28fffb1e 	bne	r5,r3,6330 <__alt_data_end+0xfffbcf50>
    6344:	f800283a 	ret
    6348:	00c003c4 	movi	r3,15
    634c:	1980412e 	bgeu	r3,r6,6454 <memmove+0x140>
    6350:	2886b03a 	or	r3,r5,r2
    6354:	18c000cc 	andi	r3,r3,3
    6358:	1800401e 	bne	r3,zero,645c <memmove+0x148>
    635c:	33fffc04 	addi	r15,r6,-16
    6360:	781ed13a 	srli	r15,r15,4
    6364:	28c00104 	addi	r3,r5,4
    6368:	13400104 	addi	r13,r2,4
    636c:	781c913a 	slli	r14,r15,4
    6370:	2b000204 	addi	r12,r5,8
    6374:	12c00204 	addi	r11,r2,8
    6378:	73800504 	addi	r14,r14,20
    637c:	2a800304 	addi	r10,r5,12
    6380:	12400304 	addi	r9,r2,12
    6384:	2b9d883a 	add	r14,r5,r14
    6388:	2811883a 	mov	r8,r5
    638c:	100f883a 	mov	r7,r2
    6390:	41000017 	ldw	r4,0(r8)
    6394:	39c00404 	addi	r7,r7,16
    6398:	18c00404 	addi	r3,r3,16
    639c:	393ffc15 	stw	r4,-16(r7)
    63a0:	193ffc17 	ldw	r4,-16(r3)
    63a4:	6b400404 	addi	r13,r13,16
    63a8:	5ac00404 	addi	r11,r11,16
    63ac:	693ffc15 	stw	r4,-16(r13)
    63b0:	61000017 	ldw	r4,0(r12)
    63b4:	4a400404 	addi	r9,r9,16
    63b8:	42000404 	addi	r8,r8,16
    63bc:	593ffc15 	stw	r4,-16(r11)
    63c0:	51000017 	ldw	r4,0(r10)
    63c4:	63000404 	addi	r12,r12,16
    63c8:	52800404 	addi	r10,r10,16
    63cc:	493ffc15 	stw	r4,-16(r9)
    63d0:	1bbfef1e 	bne	r3,r14,6390 <__alt_data_end+0xfffbcfb0>
    63d4:	79000044 	addi	r4,r15,1
    63d8:	2008913a 	slli	r4,r4,4
    63dc:	328003cc 	andi	r10,r6,15
    63e0:	02c000c4 	movi	r11,3
    63e4:	1107883a 	add	r3,r2,r4
    63e8:	290b883a 	add	r5,r5,r4
    63ec:	5a801e2e 	bgeu	r11,r10,6468 <memmove+0x154>
    63f0:	1813883a 	mov	r9,r3
    63f4:	2811883a 	mov	r8,r5
    63f8:	500f883a 	mov	r7,r10
    63fc:	41000017 	ldw	r4,0(r8)
    6400:	4a400104 	addi	r9,r9,4
    6404:	39ffff04 	addi	r7,r7,-4
    6408:	493fff15 	stw	r4,-4(r9)
    640c:	42000104 	addi	r8,r8,4
    6410:	59fffa36 	bltu	r11,r7,63fc <__alt_data_end+0xfffbd01c>
    6414:	513fff04 	addi	r4,r10,-4
    6418:	2008d0ba 	srli	r4,r4,2
    641c:	318000cc 	andi	r6,r6,3
    6420:	21000044 	addi	r4,r4,1
    6424:	2109883a 	add	r4,r4,r4
    6428:	2109883a 	add	r4,r4,r4
    642c:	1907883a 	add	r3,r3,r4
    6430:	290b883a 	add	r5,r5,r4
    6434:	30000b26 	beq	r6,zero,6464 <memmove+0x150>
    6438:	198d883a 	add	r6,r3,r6
    643c:	29c00003 	ldbu	r7,0(r5)
    6440:	18c00044 	addi	r3,r3,1
    6444:	29400044 	addi	r5,r5,1
    6448:	19ffffc5 	stb	r7,-1(r3)
    644c:	19bffb1e 	bne	r3,r6,643c <__alt_data_end+0xfffbd05c>
    6450:	f800283a 	ret
    6454:	1007883a 	mov	r3,r2
    6458:	003ff606 	br	6434 <__alt_data_end+0xfffbd054>
    645c:	1007883a 	mov	r3,r2
    6460:	003ff506 	br	6438 <__alt_data_end+0xfffbd058>
    6464:	f800283a 	ret
    6468:	500d883a 	mov	r6,r10
    646c:	003ff106 	br	6434 <__alt_data_end+0xfffbd054>

00006470 <memset>:
    6470:	20c000cc 	andi	r3,r4,3
    6474:	2005883a 	mov	r2,r4
    6478:	18004426 	beq	r3,zero,658c <memset+0x11c>
    647c:	31ffffc4 	addi	r7,r6,-1
    6480:	30004026 	beq	r6,zero,6584 <memset+0x114>
    6484:	2813883a 	mov	r9,r5
    6488:	200d883a 	mov	r6,r4
    648c:	2007883a 	mov	r3,r4
    6490:	00000406 	br	64a4 <memset+0x34>
    6494:	3a3fffc4 	addi	r8,r7,-1
    6498:	31800044 	addi	r6,r6,1
    649c:	38003926 	beq	r7,zero,6584 <memset+0x114>
    64a0:	400f883a 	mov	r7,r8
    64a4:	18c00044 	addi	r3,r3,1
    64a8:	32400005 	stb	r9,0(r6)
    64ac:	1a0000cc 	andi	r8,r3,3
    64b0:	403ff81e 	bne	r8,zero,6494 <__alt_data_end+0xfffbd0b4>
    64b4:	010000c4 	movi	r4,3
    64b8:	21c02d2e 	bgeu	r4,r7,6570 <memset+0x100>
    64bc:	29003fcc 	andi	r4,r5,255
    64c0:	200c923a 	slli	r6,r4,8
    64c4:	3108b03a 	or	r4,r6,r4
    64c8:	200c943a 	slli	r6,r4,16
    64cc:	218cb03a 	or	r6,r4,r6
    64d0:	010003c4 	movi	r4,15
    64d4:	21c0182e 	bgeu	r4,r7,6538 <memset+0xc8>
    64d8:	3b3ffc04 	addi	r12,r7,-16
    64dc:	6018d13a 	srli	r12,r12,4
    64e0:	1a000104 	addi	r8,r3,4
    64e4:	1ac00204 	addi	r11,r3,8
    64e8:	6008913a 	slli	r4,r12,4
    64ec:	1a800304 	addi	r10,r3,12
    64f0:	1813883a 	mov	r9,r3
    64f4:	21000504 	addi	r4,r4,20
    64f8:	1909883a 	add	r4,r3,r4
    64fc:	49800015 	stw	r6,0(r9)
    6500:	41800015 	stw	r6,0(r8)
    6504:	59800015 	stw	r6,0(r11)
    6508:	51800015 	stw	r6,0(r10)
    650c:	42000404 	addi	r8,r8,16
    6510:	4a400404 	addi	r9,r9,16
    6514:	5ac00404 	addi	r11,r11,16
    6518:	52800404 	addi	r10,r10,16
    651c:	413ff71e 	bne	r8,r4,64fc <__alt_data_end+0xfffbd11c>
    6520:	63000044 	addi	r12,r12,1
    6524:	6018913a 	slli	r12,r12,4
    6528:	39c003cc 	andi	r7,r7,15
    652c:	010000c4 	movi	r4,3
    6530:	1b07883a 	add	r3,r3,r12
    6534:	21c00e2e 	bgeu	r4,r7,6570 <memset+0x100>
    6538:	1813883a 	mov	r9,r3
    653c:	3811883a 	mov	r8,r7
    6540:	010000c4 	movi	r4,3
    6544:	49800015 	stw	r6,0(r9)
    6548:	423fff04 	addi	r8,r8,-4
    654c:	4a400104 	addi	r9,r9,4
    6550:	223ffc36 	bltu	r4,r8,6544 <__alt_data_end+0xfffbd164>
    6554:	393fff04 	addi	r4,r7,-4
    6558:	2008d0ba 	srli	r4,r4,2
    655c:	39c000cc 	andi	r7,r7,3
    6560:	21000044 	addi	r4,r4,1
    6564:	2109883a 	add	r4,r4,r4
    6568:	2109883a 	add	r4,r4,r4
    656c:	1907883a 	add	r3,r3,r4
    6570:	38000526 	beq	r7,zero,6588 <memset+0x118>
    6574:	19cf883a 	add	r7,r3,r7
    6578:	19400005 	stb	r5,0(r3)
    657c:	18c00044 	addi	r3,r3,1
    6580:	38fffd1e 	bne	r7,r3,6578 <__alt_data_end+0xfffbd198>
    6584:	f800283a 	ret
    6588:	f800283a 	ret
    658c:	2007883a 	mov	r3,r4
    6590:	300f883a 	mov	r7,r6
    6594:	003fc706 	br	64b4 <__alt_data_end+0xfffbd0d4>

00006598 <_Balloc>:
    6598:	20801317 	ldw	r2,76(r4)
    659c:	defffc04 	addi	sp,sp,-16
    65a0:	dc400115 	stw	r17,4(sp)
    65a4:	dc000015 	stw	r16,0(sp)
    65a8:	dfc00315 	stw	ra,12(sp)
    65ac:	dc800215 	stw	r18,8(sp)
    65b0:	2023883a 	mov	r17,r4
    65b4:	2821883a 	mov	r16,r5
    65b8:	10000f26 	beq	r2,zero,65f8 <_Balloc+0x60>
    65bc:	8407883a 	add	r3,r16,r16
    65c0:	18c7883a 	add	r3,r3,r3
    65c4:	10c7883a 	add	r3,r2,r3
    65c8:	18800017 	ldw	r2,0(r3)
    65cc:	10001126 	beq	r2,zero,6614 <_Balloc+0x7c>
    65d0:	11000017 	ldw	r4,0(r2)
    65d4:	19000015 	stw	r4,0(r3)
    65d8:	10000415 	stw	zero,16(r2)
    65dc:	10000315 	stw	zero,12(r2)
    65e0:	dfc00317 	ldw	ra,12(sp)
    65e4:	dc800217 	ldw	r18,8(sp)
    65e8:	dc400117 	ldw	r17,4(sp)
    65ec:	dc000017 	ldw	r16,0(sp)
    65f0:	dec00404 	addi	sp,sp,16
    65f4:	f800283a 	ret
    65f8:	01800844 	movi	r6,33
    65fc:	01400104 	movi	r5,4
    6600:	00099000 	call	9900 <_calloc_r>
    6604:	88801315 	stw	r2,76(r17)
    6608:	103fec1e 	bne	r2,zero,65bc <__alt_data_end+0xfffbd1dc>
    660c:	0005883a 	mov	r2,zero
    6610:	003ff306 	br	65e0 <__alt_data_end+0xfffbd200>
    6614:	01400044 	movi	r5,1
    6618:	2c24983a 	sll	r18,r5,r16
    661c:	8809883a 	mov	r4,r17
    6620:	91800144 	addi	r6,r18,5
    6624:	318d883a 	add	r6,r6,r6
    6628:	318d883a 	add	r6,r6,r6
    662c:	00099000 	call	9900 <_calloc_r>
    6630:	103ff626 	beq	r2,zero,660c <__alt_data_end+0xfffbd22c>
    6634:	14000115 	stw	r16,4(r2)
    6638:	14800215 	stw	r18,8(r2)
    663c:	003fe606 	br	65d8 <__alt_data_end+0xfffbd1f8>

00006640 <_Bfree>:
    6640:	28000826 	beq	r5,zero,6664 <_Bfree+0x24>
    6644:	28c00117 	ldw	r3,4(r5)
    6648:	20801317 	ldw	r2,76(r4)
    664c:	18c7883a 	add	r3,r3,r3
    6650:	18c7883a 	add	r3,r3,r3
    6654:	10c5883a 	add	r2,r2,r3
    6658:	10c00017 	ldw	r3,0(r2)
    665c:	28c00015 	stw	r3,0(r5)
    6660:	11400015 	stw	r5,0(r2)
    6664:	f800283a 	ret

00006668 <__multadd>:
    6668:	defff704 	addi	sp,sp,-36
    666c:	dc800215 	stw	r18,8(sp)
    6670:	2c800417 	ldw	r18,16(r5)
    6674:	dd800615 	stw	r22,24(sp)
    6678:	dd400515 	stw	r21,20(sp)
    667c:	dd000415 	stw	r20,16(sp)
    6680:	dcc00315 	stw	r19,12(sp)
    6684:	dc400115 	stw	r17,4(sp)
    6688:	dc000015 	stw	r16,0(sp)
    668c:	dfc00815 	stw	ra,32(sp)
    6690:	ddc00715 	stw	r23,28(sp)
    6694:	2827883a 	mov	r19,r5
    6698:	2029883a 	mov	r20,r4
    669c:	3023883a 	mov	r17,r6
    66a0:	3821883a 	mov	r16,r7
    66a4:	2d400504 	addi	r21,r5,20
    66a8:	002d883a 	mov	r22,zero
    66ac:	adc00017 	ldw	r23,0(r21)
    66b0:	880b883a 	mov	r5,r17
    66b4:	ad400104 	addi	r21,r21,4
    66b8:	b93fffcc 	andi	r4,r23,65535
    66bc:	000adb40 	call	adb4 <__mulsi3>
    66c0:	b808d43a 	srli	r4,r23,16
    66c4:	880b883a 	mov	r5,r17
    66c8:	1421883a 	add	r16,r2,r16
    66cc:	000adb40 	call	adb4 <__mulsi3>
    66d0:	800ed43a 	srli	r7,r16,16
    66d4:	80ffffcc 	andi	r3,r16,65535
    66d8:	b5800044 	addi	r22,r22,1
    66dc:	11c5883a 	add	r2,r2,r7
    66e0:	100e943a 	slli	r7,r2,16
    66e4:	1020d43a 	srli	r16,r2,16
    66e8:	38c7883a 	add	r3,r7,r3
    66ec:	a8ffff15 	stw	r3,-4(r21)
    66f0:	b4bfee16 	blt	r22,r18,66ac <__alt_data_end+0xfffbd2cc>
    66f4:	80000926 	beq	r16,zero,671c <__multadd+0xb4>
    66f8:	98800217 	ldw	r2,8(r19)
    66fc:	9080130e 	bge	r18,r2,674c <__multadd+0xe4>
    6700:	90800144 	addi	r2,r18,5
    6704:	1085883a 	add	r2,r2,r2
    6708:	1085883a 	add	r2,r2,r2
    670c:	9885883a 	add	r2,r19,r2
    6710:	14000015 	stw	r16,0(r2)
    6714:	94800044 	addi	r18,r18,1
    6718:	9c800415 	stw	r18,16(r19)
    671c:	9805883a 	mov	r2,r19
    6720:	dfc00817 	ldw	ra,32(sp)
    6724:	ddc00717 	ldw	r23,28(sp)
    6728:	dd800617 	ldw	r22,24(sp)
    672c:	dd400517 	ldw	r21,20(sp)
    6730:	dd000417 	ldw	r20,16(sp)
    6734:	dcc00317 	ldw	r19,12(sp)
    6738:	dc800217 	ldw	r18,8(sp)
    673c:	dc400117 	ldw	r17,4(sp)
    6740:	dc000017 	ldw	r16,0(sp)
    6744:	dec00904 	addi	sp,sp,36
    6748:	f800283a 	ret
    674c:	99400117 	ldw	r5,4(r19)
    6750:	a009883a 	mov	r4,r20
    6754:	29400044 	addi	r5,r5,1
    6758:	00065980 	call	6598 <_Balloc>
    675c:	99800417 	ldw	r6,16(r19)
    6760:	99400304 	addi	r5,r19,12
    6764:	11000304 	addi	r4,r2,12
    6768:	31800084 	addi	r6,r6,2
    676c:	318d883a 	add	r6,r6,r6
    6770:	318d883a 	add	r6,r6,r6
    6774:	1023883a 	mov	r17,r2
    6778:	00061cc0 	call	61cc <memcpy>
    677c:	98000a26 	beq	r19,zero,67a8 <__multadd+0x140>
    6780:	98c00117 	ldw	r3,4(r19)
    6784:	a0801317 	ldw	r2,76(r20)
    6788:	18c7883a 	add	r3,r3,r3
    678c:	18c7883a 	add	r3,r3,r3
    6790:	10c5883a 	add	r2,r2,r3
    6794:	10c00017 	ldw	r3,0(r2)
    6798:	98c00015 	stw	r3,0(r19)
    679c:	14c00015 	stw	r19,0(r2)
    67a0:	8827883a 	mov	r19,r17
    67a4:	003fd606 	br	6700 <__alt_data_end+0xfffbd320>
    67a8:	8827883a 	mov	r19,r17
    67ac:	003fd406 	br	6700 <__alt_data_end+0xfffbd320>

000067b0 <__s2b>:
    67b0:	defff904 	addi	sp,sp,-28
    67b4:	dc400115 	stw	r17,4(sp)
    67b8:	dc000015 	stw	r16,0(sp)
    67bc:	2023883a 	mov	r17,r4
    67c0:	2821883a 	mov	r16,r5
    67c4:	39000204 	addi	r4,r7,8
    67c8:	01400244 	movi	r5,9
    67cc:	dcc00315 	stw	r19,12(sp)
    67d0:	dc800215 	stw	r18,8(sp)
    67d4:	dfc00615 	stw	ra,24(sp)
    67d8:	dd400515 	stw	r21,20(sp)
    67dc:	dd000415 	stw	r20,16(sp)
    67e0:	3825883a 	mov	r18,r7
    67e4:	3027883a 	mov	r19,r6
    67e8:	000ac000 	call	ac00 <__divsi3>
    67ec:	00c00044 	movi	r3,1
    67f0:	000b883a 	mov	r5,zero
    67f4:	1880030e 	bge	r3,r2,6804 <__s2b+0x54>
    67f8:	18c7883a 	add	r3,r3,r3
    67fc:	29400044 	addi	r5,r5,1
    6800:	18bffd16 	blt	r3,r2,67f8 <__alt_data_end+0xfffbd418>
    6804:	8809883a 	mov	r4,r17
    6808:	00065980 	call	6598 <_Balloc>
    680c:	d8c00717 	ldw	r3,28(sp)
    6810:	10c00515 	stw	r3,20(r2)
    6814:	00c00044 	movi	r3,1
    6818:	10c00415 	stw	r3,16(r2)
    681c:	00c00244 	movi	r3,9
    6820:	1cc0210e 	bge	r3,r19,68a8 <__s2b+0xf8>
    6824:	80eb883a 	add	r21,r16,r3
    6828:	a829883a 	mov	r20,r21
    682c:	84e1883a 	add	r16,r16,r19
    6830:	a1c00007 	ldb	r7,0(r20)
    6834:	01800284 	movi	r6,10
    6838:	a5000044 	addi	r20,r20,1
    683c:	100b883a 	mov	r5,r2
    6840:	39fff404 	addi	r7,r7,-48
    6844:	8809883a 	mov	r4,r17
    6848:	00066680 	call	6668 <__multadd>
    684c:	a43ff81e 	bne	r20,r16,6830 <__alt_data_end+0xfffbd450>
    6850:	ace1883a 	add	r16,r21,r19
    6854:	843ffe04 	addi	r16,r16,-8
    6858:	9c800a0e 	bge	r19,r18,6884 <__s2b+0xd4>
    685c:	94e5c83a 	sub	r18,r18,r19
    6860:	84a5883a 	add	r18,r16,r18
    6864:	81c00007 	ldb	r7,0(r16)
    6868:	01800284 	movi	r6,10
    686c:	84000044 	addi	r16,r16,1
    6870:	100b883a 	mov	r5,r2
    6874:	39fff404 	addi	r7,r7,-48
    6878:	8809883a 	mov	r4,r17
    687c:	00066680 	call	6668 <__multadd>
    6880:	84bff81e 	bne	r16,r18,6864 <__alt_data_end+0xfffbd484>
    6884:	dfc00617 	ldw	ra,24(sp)
    6888:	dd400517 	ldw	r21,20(sp)
    688c:	dd000417 	ldw	r20,16(sp)
    6890:	dcc00317 	ldw	r19,12(sp)
    6894:	dc800217 	ldw	r18,8(sp)
    6898:	dc400117 	ldw	r17,4(sp)
    689c:	dc000017 	ldw	r16,0(sp)
    68a0:	dec00704 	addi	sp,sp,28
    68a4:	f800283a 	ret
    68a8:	84000284 	addi	r16,r16,10
    68ac:	1827883a 	mov	r19,r3
    68b0:	003fe906 	br	6858 <__alt_data_end+0xfffbd478>

000068b4 <__hi0bits>:
    68b4:	20bfffec 	andhi	r2,r4,65535
    68b8:	1000141e 	bne	r2,zero,690c <__hi0bits+0x58>
    68bc:	2008943a 	slli	r4,r4,16
    68c0:	00800404 	movi	r2,16
    68c4:	20ffc02c 	andhi	r3,r4,65280
    68c8:	1800021e 	bne	r3,zero,68d4 <__hi0bits+0x20>
    68cc:	2008923a 	slli	r4,r4,8
    68d0:	10800204 	addi	r2,r2,8
    68d4:	20fc002c 	andhi	r3,r4,61440
    68d8:	1800021e 	bne	r3,zero,68e4 <__hi0bits+0x30>
    68dc:	2008913a 	slli	r4,r4,4
    68e0:	10800104 	addi	r2,r2,4
    68e4:	20f0002c 	andhi	r3,r4,49152
    68e8:	1800031e 	bne	r3,zero,68f8 <__hi0bits+0x44>
    68ec:	2109883a 	add	r4,r4,r4
    68f0:	10800084 	addi	r2,r2,2
    68f4:	2109883a 	add	r4,r4,r4
    68f8:	20000316 	blt	r4,zero,6908 <__hi0bits+0x54>
    68fc:	2110002c 	andhi	r4,r4,16384
    6900:	2000041e 	bne	r4,zero,6914 <__hi0bits+0x60>
    6904:	00800804 	movi	r2,32
    6908:	f800283a 	ret
    690c:	0005883a 	mov	r2,zero
    6910:	003fec06 	br	68c4 <__alt_data_end+0xfffbd4e4>
    6914:	10800044 	addi	r2,r2,1
    6918:	f800283a 	ret

0000691c <__lo0bits>:
    691c:	20c00017 	ldw	r3,0(r4)
    6920:	188001cc 	andi	r2,r3,7
    6924:	10000826 	beq	r2,zero,6948 <__lo0bits+0x2c>
    6928:	1880004c 	andi	r2,r3,1
    692c:	1000211e 	bne	r2,zero,69b4 <__lo0bits+0x98>
    6930:	1880008c 	andi	r2,r3,2
    6934:	1000211e 	bne	r2,zero,69bc <__lo0bits+0xa0>
    6938:	1806d0ba 	srli	r3,r3,2
    693c:	00800084 	movi	r2,2
    6940:	20c00015 	stw	r3,0(r4)
    6944:	f800283a 	ret
    6948:	18bfffcc 	andi	r2,r3,65535
    694c:	10001326 	beq	r2,zero,699c <__lo0bits+0x80>
    6950:	0005883a 	mov	r2,zero
    6954:	19403fcc 	andi	r5,r3,255
    6958:	2800021e 	bne	r5,zero,6964 <__lo0bits+0x48>
    695c:	1806d23a 	srli	r3,r3,8
    6960:	10800204 	addi	r2,r2,8
    6964:	194003cc 	andi	r5,r3,15
    6968:	2800021e 	bne	r5,zero,6974 <__lo0bits+0x58>
    696c:	1806d13a 	srli	r3,r3,4
    6970:	10800104 	addi	r2,r2,4
    6974:	194000cc 	andi	r5,r3,3
    6978:	2800021e 	bne	r5,zero,6984 <__lo0bits+0x68>
    697c:	1806d0ba 	srli	r3,r3,2
    6980:	10800084 	addi	r2,r2,2
    6984:	1940004c 	andi	r5,r3,1
    6988:	2800081e 	bne	r5,zero,69ac <__lo0bits+0x90>
    698c:	1806d07a 	srli	r3,r3,1
    6990:	1800051e 	bne	r3,zero,69a8 <__lo0bits+0x8c>
    6994:	00800804 	movi	r2,32
    6998:	f800283a 	ret
    699c:	1806d43a 	srli	r3,r3,16
    69a0:	00800404 	movi	r2,16
    69a4:	003feb06 	br	6954 <__alt_data_end+0xfffbd574>
    69a8:	10800044 	addi	r2,r2,1
    69ac:	20c00015 	stw	r3,0(r4)
    69b0:	f800283a 	ret
    69b4:	0005883a 	mov	r2,zero
    69b8:	f800283a 	ret
    69bc:	1806d07a 	srli	r3,r3,1
    69c0:	00800044 	movi	r2,1
    69c4:	20c00015 	stw	r3,0(r4)
    69c8:	f800283a 	ret

000069cc <__i2b>:
    69cc:	defffd04 	addi	sp,sp,-12
    69d0:	dc000015 	stw	r16,0(sp)
    69d4:	04000044 	movi	r16,1
    69d8:	dc400115 	stw	r17,4(sp)
    69dc:	2823883a 	mov	r17,r5
    69e0:	800b883a 	mov	r5,r16
    69e4:	dfc00215 	stw	ra,8(sp)
    69e8:	00065980 	call	6598 <_Balloc>
    69ec:	14400515 	stw	r17,20(r2)
    69f0:	14000415 	stw	r16,16(r2)
    69f4:	dfc00217 	ldw	ra,8(sp)
    69f8:	dc400117 	ldw	r17,4(sp)
    69fc:	dc000017 	ldw	r16,0(sp)
    6a00:	dec00304 	addi	sp,sp,12
    6a04:	f800283a 	ret

00006a08 <__multiply>:
    6a08:	deffef04 	addi	sp,sp,-68
    6a0c:	dc400815 	stw	r17,32(sp)
    6a10:	dc000715 	stw	r16,28(sp)
    6a14:	34400417 	ldw	r17,16(r6)
    6a18:	2c000417 	ldw	r16,16(r5)
    6a1c:	dd800d15 	stw	r22,52(sp)
    6a20:	dc800915 	stw	r18,36(sp)
    6a24:	dfc01015 	stw	ra,64(sp)
    6a28:	df000f15 	stw	fp,60(sp)
    6a2c:	ddc00e15 	stw	r23,56(sp)
    6a30:	dd400c15 	stw	r21,48(sp)
    6a34:	dd000b15 	stw	r20,44(sp)
    6a38:	dcc00a15 	stw	r19,40(sp)
    6a3c:	2825883a 	mov	r18,r5
    6a40:	302d883a 	mov	r22,r6
    6a44:	8440050e 	bge	r16,r17,6a5c <__multiply+0x54>
    6a48:	8007883a 	mov	r3,r16
    6a4c:	3025883a 	mov	r18,r6
    6a50:	8821883a 	mov	r16,r17
    6a54:	282d883a 	mov	r22,r5
    6a58:	1823883a 	mov	r17,r3
    6a5c:	90800217 	ldw	r2,8(r18)
    6a60:	8447883a 	add	r3,r16,r17
    6a64:	d8c00215 	stw	r3,8(sp)
    6a68:	91400117 	ldw	r5,4(r18)
    6a6c:	10c0010e 	bge	r2,r3,6a74 <__multiply+0x6c>
    6a70:	29400044 	addi	r5,r5,1
    6a74:	00065980 	call	6598 <_Balloc>
    6a78:	d8c00217 	ldw	r3,8(sp)
    6a7c:	d8800615 	stw	r2,24(sp)
    6a80:	18eb883a 	add	r21,r3,r3
    6a84:	ad6b883a 	add	r21,r21,r21
    6a88:	10c00504 	addi	r3,r2,20
    6a8c:	1d6b883a 	add	r21,r3,r21
    6a90:	d8c00115 	stw	r3,4(sp)
    6a94:	dd400315 	stw	r21,12(sp)
    6a98:	1805883a 	mov	r2,r3
    6a9c:	1d40042e 	bgeu	r3,r21,6ab0 <__multiply+0xa8>
    6aa0:	d8c00317 	ldw	r3,12(sp)
    6aa4:	10000015 	stw	zero,0(r2)
    6aa8:	10800104 	addi	r2,r2,4
    6aac:	10fffc36 	bltu	r2,r3,6aa0 <__alt_data_end+0xfffbd6c0>
    6ab0:	8c63883a 	add	r17,r17,r17
    6ab4:	b5800504 	addi	r22,r22,20
    6ab8:	8c63883a 	add	r17,r17,r17
    6abc:	94800504 	addi	r18,r18,20
    6ac0:	8421883a 	add	r16,r16,r16
    6ac4:	b463883a 	add	r17,r22,r17
    6ac8:	8421883a 	add	r16,r16,r16
    6acc:	dd800015 	stw	r22,0(sp)
    6ad0:	dc800415 	stw	r18,16(sp)
    6ad4:	dc400515 	stw	r17,20(sp)
    6ad8:	9429883a 	add	r20,r18,r16
    6adc:	b4404f2e 	bgeu	r22,r17,6c1c <__multiply+0x214>
    6ae0:	d8c00017 	ldw	r3,0(sp)
    6ae4:	1c800017 	ldw	r18,0(r3)
    6ae8:	947fffcc 	andi	r17,r18,65535
    6aec:	88001e26 	beq	r17,zero,6b68 <__multiply+0x160>
    6af0:	dd800117 	ldw	r22,4(sp)
    6af4:	dd400417 	ldw	r21,16(sp)
    6af8:	0027883a 	mov	r19,zero
    6afc:	ac800017 	ldw	r18,0(r21)
    6b00:	b4000017 	ldw	r16,0(r22)
    6b04:	880b883a 	mov	r5,r17
    6b08:	913fffcc 	andi	r4,r18,65535
    6b0c:	000adb40 	call	adb4 <__mulsi3>
    6b10:	9008d43a 	srli	r4,r18,16
    6b14:	84bfffcc 	andi	r18,r16,65535
    6b18:	1485883a 	add	r2,r2,r18
    6b1c:	14e5883a 	add	r18,r2,r19
    6b20:	8020d43a 	srli	r16,r16,16
    6b24:	9026d43a 	srli	r19,r18,16
    6b28:	880b883a 	mov	r5,r17
    6b2c:	000adb40 	call	adb4 <__mulsi3>
    6b30:	1405883a 	add	r2,r2,r16
    6b34:	14e1883a 	add	r16,r2,r19
    6b38:	90ffffcc 	andi	r3,r18,65535
    6b3c:	8024943a 	slli	r18,r16,16
    6b40:	ad400104 	addi	r21,r21,4
    6b44:	b005883a 	mov	r2,r22
    6b48:	90c6b03a 	or	r3,r18,r3
    6b4c:	b0c00015 	stw	r3,0(r22)
    6b50:	8026d43a 	srli	r19,r16,16
    6b54:	b5800104 	addi	r22,r22,4
    6b58:	ad3fe836 	bltu	r21,r20,6afc <__alt_data_end+0xfffbd71c>
    6b5c:	d8c00017 	ldw	r3,0(sp)
    6b60:	14c00115 	stw	r19,4(r2)
    6b64:	1c800017 	ldw	r18,0(r3)
    6b68:	9024d43a 	srli	r18,r18,16
    6b6c:	90002226 	beq	r18,zero,6bf8 <__multiply+0x1f0>
    6b70:	d8c00117 	ldw	r3,4(sp)
    6b74:	dd800417 	ldw	r22,16(sp)
    6b78:	002f883a 	mov	r23,zero
    6b7c:	1f000017 	ldw	fp,0(r3)
    6b80:	1823883a 	mov	r17,r3
    6b84:	182b883a 	mov	r21,r3
    6b88:	e021883a 	mov	r16,fp
    6b8c:	00000106 	br	6b94 <__multiply+0x18c>
    6b90:	982b883a 	mov	r21,r19
    6b94:	b100000b 	ldhu	r4,0(r22)
    6b98:	8020d43a 	srli	r16,r16,16
    6b9c:	900b883a 	mov	r5,r18
    6ba0:	000adb40 	call	adb4 <__mulsi3>
    6ba4:	1405883a 	add	r2,r2,r16
    6ba8:	15ef883a 	add	r23,r2,r23
    6bac:	b804943a 	slli	r2,r23,16
    6bb0:	e0ffffcc 	andi	r3,fp,65535
    6bb4:	8c400104 	addi	r17,r17,4
    6bb8:	10c6b03a 	or	r3,r2,r3
    6bbc:	88ffff15 	stw	r3,-4(r17)
    6bc0:	b5800104 	addi	r22,r22,4
    6bc4:	b13fff17 	ldw	r4,-4(r22)
    6bc8:	acc00104 	addi	r19,r21,4
    6bcc:	900b883a 	mov	r5,r18
    6bd0:	2008d43a 	srli	r4,r4,16
    6bd4:	9c000017 	ldw	r16,0(r19)
    6bd8:	000adb40 	call	adb4 <__mulsi3>
    6bdc:	b806d43a 	srli	r3,r23,16
    6be0:	813fffcc 	andi	r4,r16,65535
    6be4:	1105883a 	add	r2,r2,r4
    6be8:	10f9883a 	add	fp,r2,r3
    6bec:	e02ed43a 	srli	r23,fp,16
    6bf0:	b53fe736 	bltu	r22,r20,6b90 <__alt_data_end+0xfffbd7b0>
    6bf4:	af000115 	stw	fp,4(r21)
    6bf8:	d8c00017 	ldw	r3,0(sp)
    6bfc:	d9000517 	ldw	r4,20(sp)
    6c00:	18c00104 	addi	r3,r3,4
    6c04:	d8c00015 	stw	r3,0(sp)
    6c08:	d8c00117 	ldw	r3,4(sp)
    6c0c:	18c00104 	addi	r3,r3,4
    6c10:	d8c00115 	stw	r3,4(sp)
    6c14:	d8c00017 	ldw	r3,0(sp)
    6c18:	193fb136 	bltu	r3,r4,6ae0 <__alt_data_end+0xfffbd700>
    6c1c:	d8c00217 	ldw	r3,8(sp)
    6c20:	00c00c0e 	bge	zero,r3,6c54 <__multiply+0x24c>
    6c24:	d8c00317 	ldw	r3,12(sp)
    6c28:	18bfff17 	ldw	r2,-4(r3)
    6c2c:	1d7fff04 	addi	r21,r3,-4
    6c30:	10000326 	beq	r2,zero,6c40 <__multiply+0x238>
    6c34:	00000706 	br	6c54 <__multiply+0x24c>
    6c38:	a8800017 	ldw	r2,0(r21)
    6c3c:	1000051e 	bne	r2,zero,6c54 <__multiply+0x24c>
    6c40:	d8c00217 	ldw	r3,8(sp)
    6c44:	ad7fff04 	addi	r21,r21,-4
    6c48:	18ffffc4 	addi	r3,r3,-1
    6c4c:	d8c00215 	stw	r3,8(sp)
    6c50:	183ff91e 	bne	r3,zero,6c38 <__alt_data_end+0xfffbd858>
    6c54:	d8c00617 	ldw	r3,24(sp)
    6c58:	d9000217 	ldw	r4,8(sp)
    6c5c:	1805883a 	mov	r2,r3
    6c60:	19000415 	stw	r4,16(r3)
    6c64:	dfc01017 	ldw	ra,64(sp)
    6c68:	df000f17 	ldw	fp,60(sp)
    6c6c:	ddc00e17 	ldw	r23,56(sp)
    6c70:	dd800d17 	ldw	r22,52(sp)
    6c74:	dd400c17 	ldw	r21,48(sp)
    6c78:	dd000b17 	ldw	r20,44(sp)
    6c7c:	dcc00a17 	ldw	r19,40(sp)
    6c80:	dc800917 	ldw	r18,36(sp)
    6c84:	dc400817 	ldw	r17,32(sp)
    6c88:	dc000717 	ldw	r16,28(sp)
    6c8c:	dec01104 	addi	sp,sp,68
    6c90:	f800283a 	ret

00006c94 <__pow5mult>:
    6c94:	defffa04 	addi	sp,sp,-24
    6c98:	dcc00315 	stw	r19,12(sp)
    6c9c:	dc000015 	stw	r16,0(sp)
    6ca0:	dfc00515 	stw	ra,20(sp)
    6ca4:	dd000415 	stw	r20,16(sp)
    6ca8:	dc800215 	stw	r18,8(sp)
    6cac:	dc400115 	stw	r17,4(sp)
    6cb0:	308000cc 	andi	r2,r6,3
    6cb4:	3021883a 	mov	r16,r6
    6cb8:	2027883a 	mov	r19,r4
    6cbc:	10002f1e 	bne	r2,zero,6d7c <__pow5mult+0xe8>
    6cc0:	2825883a 	mov	r18,r5
    6cc4:	8021d0ba 	srai	r16,r16,2
    6cc8:	80001a26 	beq	r16,zero,6d34 <__pow5mult+0xa0>
    6ccc:	9c401217 	ldw	r17,72(r19)
    6cd0:	8800061e 	bne	r17,zero,6cec <__pow5mult+0x58>
    6cd4:	00003406 	br	6da8 <__pow5mult+0x114>
    6cd8:	8021d07a 	srai	r16,r16,1
    6cdc:	80001526 	beq	r16,zero,6d34 <__pow5mult+0xa0>
    6ce0:	88800017 	ldw	r2,0(r17)
    6ce4:	10001c26 	beq	r2,zero,6d58 <__pow5mult+0xc4>
    6ce8:	1023883a 	mov	r17,r2
    6cec:	8080004c 	andi	r2,r16,1
    6cf0:	103ff926 	beq	r2,zero,6cd8 <__alt_data_end+0xfffbd8f8>
    6cf4:	880d883a 	mov	r6,r17
    6cf8:	900b883a 	mov	r5,r18
    6cfc:	9809883a 	mov	r4,r19
    6d00:	0006a080 	call	6a08 <__multiply>
    6d04:	90001b26 	beq	r18,zero,6d74 <__pow5mult+0xe0>
    6d08:	91000117 	ldw	r4,4(r18)
    6d0c:	98c01317 	ldw	r3,76(r19)
    6d10:	8021d07a 	srai	r16,r16,1
    6d14:	2109883a 	add	r4,r4,r4
    6d18:	2109883a 	add	r4,r4,r4
    6d1c:	1907883a 	add	r3,r3,r4
    6d20:	19000017 	ldw	r4,0(r3)
    6d24:	91000015 	stw	r4,0(r18)
    6d28:	1c800015 	stw	r18,0(r3)
    6d2c:	1025883a 	mov	r18,r2
    6d30:	803feb1e 	bne	r16,zero,6ce0 <__alt_data_end+0xfffbd900>
    6d34:	9005883a 	mov	r2,r18
    6d38:	dfc00517 	ldw	ra,20(sp)
    6d3c:	dd000417 	ldw	r20,16(sp)
    6d40:	dcc00317 	ldw	r19,12(sp)
    6d44:	dc800217 	ldw	r18,8(sp)
    6d48:	dc400117 	ldw	r17,4(sp)
    6d4c:	dc000017 	ldw	r16,0(sp)
    6d50:	dec00604 	addi	sp,sp,24
    6d54:	f800283a 	ret
    6d58:	880d883a 	mov	r6,r17
    6d5c:	880b883a 	mov	r5,r17
    6d60:	9809883a 	mov	r4,r19
    6d64:	0006a080 	call	6a08 <__multiply>
    6d68:	88800015 	stw	r2,0(r17)
    6d6c:	10000015 	stw	zero,0(r2)
    6d70:	003fdd06 	br	6ce8 <__alt_data_end+0xfffbd908>
    6d74:	1025883a 	mov	r18,r2
    6d78:	003fd706 	br	6cd8 <__alt_data_end+0xfffbd8f8>
    6d7c:	10bfffc4 	addi	r2,r2,-1
    6d80:	1085883a 	add	r2,r2,r2
    6d84:	00c00074 	movhi	r3,1
    6d88:	18c1a404 	addi	r3,r3,1680
    6d8c:	1085883a 	add	r2,r2,r2
    6d90:	1885883a 	add	r2,r3,r2
    6d94:	11800017 	ldw	r6,0(r2)
    6d98:	000f883a 	mov	r7,zero
    6d9c:	00066680 	call	6668 <__multadd>
    6da0:	1025883a 	mov	r18,r2
    6da4:	003fc706 	br	6cc4 <__alt_data_end+0xfffbd8e4>
    6da8:	05000044 	movi	r20,1
    6dac:	a00b883a 	mov	r5,r20
    6db0:	9809883a 	mov	r4,r19
    6db4:	00065980 	call	6598 <_Balloc>
    6db8:	1023883a 	mov	r17,r2
    6dbc:	00809c44 	movi	r2,625
    6dc0:	88800515 	stw	r2,20(r17)
    6dc4:	8d000415 	stw	r20,16(r17)
    6dc8:	9c401215 	stw	r17,72(r19)
    6dcc:	88000015 	stw	zero,0(r17)
    6dd0:	003fc606 	br	6cec <__alt_data_end+0xfffbd90c>

00006dd4 <__lshift>:
    6dd4:	defff904 	addi	sp,sp,-28
    6dd8:	dd400515 	stw	r21,20(sp)
    6ddc:	dcc00315 	stw	r19,12(sp)
    6de0:	302bd17a 	srai	r21,r6,5
    6de4:	2cc00417 	ldw	r19,16(r5)
    6de8:	28800217 	ldw	r2,8(r5)
    6dec:	dd000415 	stw	r20,16(sp)
    6df0:	ace7883a 	add	r19,r21,r19
    6df4:	dc800215 	stw	r18,8(sp)
    6df8:	dc400115 	stw	r17,4(sp)
    6dfc:	dc000015 	stw	r16,0(sp)
    6e00:	dfc00615 	stw	ra,24(sp)
    6e04:	9c000044 	addi	r16,r19,1
    6e08:	2823883a 	mov	r17,r5
    6e0c:	3029883a 	mov	r20,r6
    6e10:	2025883a 	mov	r18,r4
    6e14:	29400117 	ldw	r5,4(r5)
    6e18:	1400030e 	bge	r2,r16,6e28 <__lshift+0x54>
    6e1c:	1085883a 	add	r2,r2,r2
    6e20:	29400044 	addi	r5,r5,1
    6e24:	143ffd16 	blt	r2,r16,6e1c <__alt_data_end+0xfffbda3c>
    6e28:	9009883a 	mov	r4,r18
    6e2c:	00065980 	call	6598 <_Balloc>
    6e30:	10c00504 	addi	r3,r2,20
    6e34:	0540070e 	bge	zero,r21,6e54 <__lshift+0x80>
    6e38:	ad6b883a 	add	r21,r21,r21
    6e3c:	ad6b883a 	add	r21,r21,r21
    6e40:	1809883a 	mov	r4,r3
    6e44:	1d47883a 	add	r3,r3,r21
    6e48:	20000015 	stw	zero,0(r4)
    6e4c:	21000104 	addi	r4,r4,4
    6e50:	193ffd1e 	bne	r3,r4,6e48 <__alt_data_end+0xfffbda68>
    6e54:	8a000417 	ldw	r8,16(r17)
    6e58:	89000504 	addi	r4,r17,20
    6e5c:	a18007cc 	andi	r6,r20,31
    6e60:	4211883a 	add	r8,r8,r8
    6e64:	4211883a 	add	r8,r8,r8
    6e68:	2211883a 	add	r8,r4,r8
    6e6c:	30002326 	beq	r6,zero,6efc <__lshift+0x128>
    6e70:	02400804 	movi	r9,32
    6e74:	4993c83a 	sub	r9,r9,r6
    6e78:	000b883a 	mov	r5,zero
    6e7c:	21c00017 	ldw	r7,0(r4)
    6e80:	1815883a 	mov	r10,r3
    6e84:	18c00104 	addi	r3,r3,4
    6e88:	398e983a 	sll	r7,r7,r6
    6e8c:	21000104 	addi	r4,r4,4
    6e90:	394ab03a 	or	r5,r7,r5
    6e94:	197fff15 	stw	r5,-4(r3)
    6e98:	217fff17 	ldw	r5,-4(r4)
    6e9c:	2a4ad83a 	srl	r5,r5,r9
    6ea0:	223ff636 	bltu	r4,r8,6e7c <__alt_data_end+0xfffbda9c>
    6ea4:	51400115 	stw	r5,4(r10)
    6ea8:	28001a1e 	bne	r5,zero,6f14 <__lshift+0x140>
    6eac:	843fffc4 	addi	r16,r16,-1
    6eb0:	14000415 	stw	r16,16(r2)
    6eb4:	88000826 	beq	r17,zero,6ed8 <__lshift+0x104>
    6eb8:	89000117 	ldw	r4,4(r17)
    6ebc:	90c01317 	ldw	r3,76(r18)
    6ec0:	2109883a 	add	r4,r4,r4
    6ec4:	2109883a 	add	r4,r4,r4
    6ec8:	1907883a 	add	r3,r3,r4
    6ecc:	19000017 	ldw	r4,0(r3)
    6ed0:	89000015 	stw	r4,0(r17)
    6ed4:	1c400015 	stw	r17,0(r3)
    6ed8:	dfc00617 	ldw	ra,24(sp)
    6edc:	dd400517 	ldw	r21,20(sp)
    6ee0:	dd000417 	ldw	r20,16(sp)
    6ee4:	dcc00317 	ldw	r19,12(sp)
    6ee8:	dc800217 	ldw	r18,8(sp)
    6eec:	dc400117 	ldw	r17,4(sp)
    6ef0:	dc000017 	ldw	r16,0(sp)
    6ef4:	dec00704 	addi	sp,sp,28
    6ef8:	f800283a 	ret
    6efc:	21400017 	ldw	r5,0(r4)
    6f00:	18c00104 	addi	r3,r3,4
    6f04:	21000104 	addi	r4,r4,4
    6f08:	197fff15 	stw	r5,-4(r3)
    6f0c:	223ffb36 	bltu	r4,r8,6efc <__alt_data_end+0xfffbdb1c>
    6f10:	003fe606 	br	6eac <__alt_data_end+0xfffbdacc>
    6f14:	9c000084 	addi	r16,r19,2
    6f18:	003fe406 	br	6eac <__alt_data_end+0xfffbdacc>

00006f1c <__mcmp>:
    6f1c:	20800417 	ldw	r2,16(r4)
    6f20:	28c00417 	ldw	r3,16(r5)
    6f24:	10c5c83a 	sub	r2,r2,r3
    6f28:	1000111e 	bne	r2,zero,6f70 <__mcmp+0x54>
    6f2c:	18c7883a 	add	r3,r3,r3
    6f30:	18c7883a 	add	r3,r3,r3
    6f34:	21000504 	addi	r4,r4,20
    6f38:	29400504 	addi	r5,r5,20
    6f3c:	20c5883a 	add	r2,r4,r3
    6f40:	28cb883a 	add	r5,r5,r3
    6f44:	00000106 	br	6f4c <__mcmp+0x30>
    6f48:	20800a2e 	bgeu	r4,r2,6f74 <__mcmp+0x58>
    6f4c:	10bfff04 	addi	r2,r2,-4
    6f50:	297fff04 	addi	r5,r5,-4
    6f54:	11800017 	ldw	r6,0(r2)
    6f58:	28c00017 	ldw	r3,0(r5)
    6f5c:	30fffa26 	beq	r6,r3,6f48 <__alt_data_end+0xfffbdb68>
    6f60:	30c00236 	bltu	r6,r3,6f6c <__mcmp+0x50>
    6f64:	00800044 	movi	r2,1
    6f68:	f800283a 	ret
    6f6c:	00bfffc4 	movi	r2,-1
    6f70:	f800283a 	ret
    6f74:	0005883a 	mov	r2,zero
    6f78:	f800283a 	ret

00006f7c <__mdiff>:
    6f7c:	28c00417 	ldw	r3,16(r5)
    6f80:	30800417 	ldw	r2,16(r6)
    6f84:	defffa04 	addi	sp,sp,-24
    6f88:	dcc00315 	stw	r19,12(sp)
    6f8c:	dc800215 	stw	r18,8(sp)
    6f90:	dfc00515 	stw	ra,20(sp)
    6f94:	dd000415 	stw	r20,16(sp)
    6f98:	dc400115 	stw	r17,4(sp)
    6f9c:	dc000015 	stw	r16,0(sp)
    6fa0:	1887c83a 	sub	r3,r3,r2
    6fa4:	2825883a 	mov	r18,r5
    6fa8:	3027883a 	mov	r19,r6
    6fac:	1800141e 	bne	r3,zero,7000 <__mdiff+0x84>
    6fb0:	1085883a 	add	r2,r2,r2
    6fb4:	1085883a 	add	r2,r2,r2
    6fb8:	2a000504 	addi	r8,r5,20
    6fbc:	34000504 	addi	r16,r6,20
    6fc0:	4087883a 	add	r3,r8,r2
    6fc4:	8085883a 	add	r2,r16,r2
    6fc8:	00000106 	br	6fd0 <__mdiff+0x54>
    6fcc:	40c0592e 	bgeu	r8,r3,7134 <__mdiff+0x1b8>
    6fd0:	18ffff04 	addi	r3,r3,-4
    6fd4:	10bfff04 	addi	r2,r2,-4
    6fd8:	19c00017 	ldw	r7,0(r3)
    6fdc:	11400017 	ldw	r5,0(r2)
    6fe0:	397ffa26 	beq	r7,r5,6fcc <__alt_data_end+0xfffbdbec>
    6fe4:	3940592e 	bgeu	r7,r5,714c <__mdiff+0x1d0>
    6fe8:	9005883a 	mov	r2,r18
    6fec:	4023883a 	mov	r17,r8
    6ff0:	9825883a 	mov	r18,r19
    6ff4:	05000044 	movi	r20,1
    6ff8:	1027883a 	mov	r19,r2
    6ffc:	00000406 	br	7010 <__mdiff+0x94>
    7000:	18005616 	blt	r3,zero,715c <__mdiff+0x1e0>
    7004:	34400504 	addi	r17,r6,20
    7008:	2c000504 	addi	r16,r5,20
    700c:	0029883a 	mov	r20,zero
    7010:	91400117 	ldw	r5,4(r18)
    7014:	00065980 	call	6598 <_Balloc>
    7018:	92400417 	ldw	r9,16(r18)
    701c:	9b000417 	ldw	r12,16(r19)
    7020:	12c00504 	addi	r11,r2,20
    7024:	4a51883a 	add	r8,r9,r9
    7028:	6319883a 	add	r12,r12,r12
    702c:	4211883a 	add	r8,r8,r8
    7030:	6319883a 	add	r12,r12,r12
    7034:	15000315 	stw	r20,12(r2)
    7038:	8211883a 	add	r8,r16,r8
    703c:	8b19883a 	add	r12,r17,r12
    7040:	0007883a 	mov	r3,zero
    7044:	81400017 	ldw	r5,0(r16)
    7048:	89c00017 	ldw	r7,0(r17)
    704c:	59800104 	addi	r6,r11,4
    7050:	293fffcc 	andi	r4,r5,65535
    7054:	20c7883a 	add	r3,r4,r3
    7058:	393fffcc 	andi	r4,r7,65535
    705c:	1909c83a 	sub	r4,r3,r4
    7060:	280ad43a 	srli	r5,r5,16
    7064:	380ed43a 	srli	r7,r7,16
    7068:	2007d43a 	srai	r3,r4,16
    706c:	213fffcc 	andi	r4,r4,65535
    7070:	29cbc83a 	sub	r5,r5,r7
    7074:	28c7883a 	add	r3,r5,r3
    7078:	180a943a 	slli	r5,r3,16
    707c:	8c400104 	addi	r17,r17,4
    7080:	84000104 	addi	r16,r16,4
    7084:	2908b03a 	or	r4,r5,r4
    7088:	59000015 	stw	r4,0(r11)
    708c:	1807d43a 	srai	r3,r3,16
    7090:	3015883a 	mov	r10,r6
    7094:	3017883a 	mov	r11,r6
    7098:	8b3fea36 	bltu	r17,r12,7044 <__alt_data_end+0xfffbdc64>
    709c:	8200162e 	bgeu	r16,r8,70f8 <__mdiff+0x17c>
    70a0:	8017883a 	mov	r11,r16
    70a4:	59400017 	ldw	r5,0(r11)
    70a8:	31800104 	addi	r6,r6,4
    70ac:	5ac00104 	addi	r11,r11,4
    70b0:	293fffcc 	andi	r4,r5,65535
    70b4:	20c7883a 	add	r3,r4,r3
    70b8:	280ed43a 	srli	r7,r5,16
    70bc:	180bd43a 	srai	r5,r3,16
    70c0:	193fffcc 	andi	r4,r3,65535
    70c4:	3947883a 	add	r3,r7,r5
    70c8:	180a943a 	slli	r5,r3,16
    70cc:	1807d43a 	srai	r3,r3,16
    70d0:	2908b03a 	or	r4,r5,r4
    70d4:	313fff15 	stw	r4,-4(r6)
    70d8:	5a3ff236 	bltu	r11,r8,70a4 <__alt_data_end+0xfffbdcc4>
    70dc:	0406303a 	nor	r3,zero,r16
    70e0:	1a07883a 	add	r3,r3,r8
    70e4:	1806d0ba 	srli	r3,r3,2
    70e8:	18c00044 	addi	r3,r3,1
    70ec:	18c7883a 	add	r3,r3,r3
    70f0:	18c7883a 	add	r3,r3,r3
    70f4:	50d5883a 	add	r10,r10,r3
    70f8:	50ffff04 	addi	r3,r10,-4
    70fc:	2000041e 	bne	r4,zero,7110 <__mdiff+0x194>
    7100:	18ffff04 	addi	r3,r3,-4
    7104:	19000017 	ldw	r4,0(r3)
    7108:	4a7fffc4 	addi	r9,r9,-1
    710c:	203ffc26 	beq	r4,zero,7100 <__alt_data_end+0xfffbdd20>
    7110:	12400415 	stw	r9,16(r2)
    7114:	dfc00517 	ldw	ra,20(sp)
    7118:	dd000417 	ldw	r20,16(sp)
    711c:	dcc00317 	ldw	r19,12(sp)
    7120:	dc800217 	ldw	r18,8(sp)
    7124:	dc400117 	ldw	r17,4(sp)
    7128:	dc000017 	ldw	r16,0(sp)
    712c:	dec00604 	addi	sp,sp,24
    7130:	f800283a 	ret
    7134:	000b883a 	mov	r5,zero
    7138:	00065980 	call	6598 <_Balloc>
    713c:	00c00044 	movi	r3,1
    7140:	10c00415 	stw	r3,16(r2)
    7144:	10000515 	stw	zero,20(r2)
    7148:	003ff206 	br	7114 <__alt_data_end+0xfffbdd34>
    714c:	8023883a 	mov	r17,r16
    7150:	0029883a 	mov	r20,zero
    7154:	4021883a 	mov	r16,r8
    7158:	003fad06 	br	7010 <__alt_data_end+0xfffbdc30>
    715c:	9005883a 	mov	r2,r18
    7160:	94400504 	addi	r17,r18,20
    7164:	9c000504 	addi	r16,r19,20
    7168:	9825883a 	mov	r18,r19
    716c:	05000044 	movi	r20,1
    7170:	1027883a 	mov	r19,r2
    7174:	003fa606 	br	7010 <__alt_data_end+0xfffbdc30>

00007178 <__ulp>:
    7178:	295ffc2c 	andhi	r5,r5,32752
    717c:	00bf3034 	movhi	r2,64704
    7180:	2887883a 	add	r3,r5,r2
    7184:	00c0020e 	bge	zero,r3,7190 <__ulp+0x18>
    7188:	0005883a 	mov	r2,zero
    718c:	f800283a 	ret
    7190:	00c7c83a 	sub	r3,zero,r3
    7194:	1807d53a 	srai	r3,r3,20
    7198:	008004c4 	movi	r2,19
    719c:	10c00b0e 	bge	r2,r3,71cc <__ulp+0x54>
    71a0:	18bffb04 	addi	r2,r3,-20
    71a4:	01000784 	movi	r4,30
    71a8:	0007883a 	mov	r3,zero
    71ac:	20800516 	blt	r4,r2,71c4 <__ulp+0x4c>
    71b0:	010007c4 	movi	r4,31
    71b4:	2089c83a 	sub	r4,r4,r2
    71b8:	00800044 	movi	r2,1
    71bc:	1104983a 	sll	r2,r2,r4
    71c0:	f800283a 	ret
    71c4:	00800044 	movi	r2,1
    71c8:	f800283a 	ret
    71cc:	01400234 	movhi	r5,8
    71d0:	28c7d83a 	sra	r3,r5,r3
    71d4:	0005883a 	mov	r2,zero
    71d8:	f800283a 	ret

000071dc <__b2d>:
    71dc:	defffa04 	addi	sp,sp,-24
    71e0:	dc000015 	stw	r16,0(sp)
    71e4:	24000417 	ldw	r16,16(r4)
    71e8:	dc400115 	stw	r17,4(sp)
    71ec:	24400504 	addi	r17,r4,20
    71f0:	8421883a 	add	r16,r16,r16
    71f4:	8421883a 	add	r16,r16,r16
    71f8:	8c21883a 	add	r16,r17,r16
    71fc:	dc800215 	stw	r18,8(sp)
    7200:	84bfff17 	ldw	r18,-4(r16)
    7204:	dd000415 	stw	r20,16(sp)
    7208:	dcc00315 	stw	r19,12(sp)
    720c:	9009883a 	mov	r4,r18
    7210:	2829883a 	mov	r20,r5
    7214:	dfc00515 	stw	ra,20(sp)
    7218:	00068b40 	call	68b4 <__hi0bits>
    721c:	00c00804 	movi	r3,32
    7220:	1889c83a 	sub	r4,r3,r2
    7224:	a1000015 	stw	r4,0(r20)
    7228:	01000284 	movi	r4,10
    722c:	84ffff04 	addi	r19,r16,-4
    7230:	20801216 	blt	r4,r2,727c <__b2d+0xa0>
    7234:	018002c4 	movi	r6,11
    7238:	308dc83a 	sub	r6,r6,r2
    723c:	9186d83a 	srl	r3,r18,r6
    7240:	18cffc34 	orhi	r3,r3,16368
    7244:	8cc0212e 	bgeu	r17,r19,72cc <__b2d+0xf0>
    7248:	813ffe17 	ldw	r4,-8(r16)
    724c:	218cd83a 	srl	r6,r4,r6
    7250:	10800544 	addi	r2,r2,21
    7254:	9084983a 	sll	r2,r18,r2
    7258:	1184b03a 	or	r2,r2,r6
    725c:	dfc00517 	ldw	ra,20(sp)
    7260:	dd000417 	ldw	r20,16(sp)
    7264:	dcc00317 	ldw	r19,12(sp)
    7268:	dc800217 	ldw	r18,8(sp)
    726c:	dc400117 	ldw	r17,4(sp)
    7270:	dc000017 	ldw	r16,0(sp)
    7274:	dec00604 	addi	sp,sp,24
    7278:	f800283a 	ret
    727c:	8cc00f2e 	bgeu	r17,r19,72bc <__b2d+0xe0>
    7280:	117ffd44 	addi	r5,r2,-11
    7284:	80bffe17 	ldw	r2,-8(r16)
    7288:	28000e26 	beq	r5,zero,72c4 <__b2d+0xe8>
    728c:	1949c83a 	sub	r4,r3,r5
    7290:	9164983a 	sll	r18,r18,r5
    7294:	1106d83a 	srl	r3,r2,r4
    7298:	81bffe04 	addi	r6,r16,-8
    729c:	948ffc34 	orhi	r18,r18,16368
    72a0:	90c6b03a 	or	r3,r18,r3
    72a4:	89800e2e 	bgeu	r17,r6,72e0 <__b2d+0x104>
    72a8:	81bffd17 	ldw	r6,-12(r16)
    72ac:	1144983a 	sll	r2,r2,r5
    72b0:	310ad83a 	srl	r5,r6,r4
    72b4:	2884b03a 	or	r2,r5,r2
    72b8:	003fe806 	br	725c <__alt_data_end+0xfffbde7c>
    72bc:	10bffd44 	addi	r2,r2,-11
    72c0:	1000041e 	bne	r2,zero,72d4 <__b2d+0xf8>
    72c4:	90cffc34 	orhi	r3,r18,16368
    72c8:	003fe406 	br	725c <__alt_data_end+0xfffbde7c>
    72cc:	000d883a 	mov	r6,zero
    72d0:	003fdf06 	br	7250 <__alt_data_end+0xfffbde70>
    72d4:	90a4983a 	sll	r18,r18,r2
    72d8:	0005883a 	mov	r2,zero
    72dc:	003ff906 	br	72c4 <__alt_data_end+0xfffbdee4>
    72e0:	1144983a 	sll	r2,r2,r5
    72e4:	003fdd06 	br	725c <__alt_data_end+0xfffbde7c>

000072e8 <__d2b>:
    72e8:	defff804 	addi	sp,sp,-32
    72ec:	dc000215 	stw	r16,8(sp)
    72f0:	3021883a 	mov	r16,r6
    72f4:	dc400315 	stw	r17,12(sp)
    72f8:	8022907a 	slli	r17,r16,1
    72fc:	dd000615 	stw	r20,24(sp)
    7300:	2829883a 	mov	r20,r5
    7304:	01400044 	movi	r5,1
    7308:	dcc00515 	stw	r19,20(sp)
    730c:	dc800415 	stw	r18,16(sp)
    7310:	dfc00715 	stw	ra,28(sp)
    7314:	3825883a 	mov	r18,r7
    7318:	8822d57a 	srli	r17,r17,21
    731c:	00065980 	call	6598 <_Balloc>
    7320:	1027883a 	mov	r19,r2
    7324:	00800434 	movhi	r2,16
    7328:	10bfffc4 	addi	r2,r2,-1
    732c:	808c703a 	and	r6,r16,r2
    7330:	88000126 	beq	r17,zero,7338 <__d2b+0x50>
    7334:	31800434 	orhi	r6,r6,16
    7338:	d9800015 	stw	r6,0(sp)
    733c:	a0002426 	beq	r20,zero,73d0 <__d2b+0xe8>
    7340:	d9000104 	addi	r4,sp,4
    7344:	dd000115 	stw	r20,4(sp)
    7348:	000691c0 	call	691c <__lo0bits>
    734c:	d8c00017 	ldw	r3,0(sp)
    7350:	10002f1e 	bne	r2,zero,7410 <__d2b+0x128>
    7354:	d9000117 	ldw	r4,4(sp)
    7358:	99000515 	stw	r4,20(r19)
    735c:	1821003a 	cmpeq	r16,r3,zero
    7360:	01000084 	movi	r4,2
    7364:	2421c83a 	sub	r16,r4,r16
    7368:	98c00615 	stw	r3,24(r19)
    736c:	9c000415 	stw	r16,16(r19)
    7370:	88001f1e 	bne	r17,zero,73f0 <__d2b+0x108>
    7374:	10bef384 	addi	r2,r2,-1074
    7378:	90800015 	stw	r2,0(r18)
    737c:	00900034 	movhi	r2,16384
    7380:	10bfffc4 	addi	r2,r2,-1
    7384:	8085883a 	add	r2,r16,r2
    7388:	1085883a 	add	r2,r2,r2
    738c:	1085883a 	add	r2,r2,r2
    7390:	9885883a 	add	r2,r19,r2
    7394:	11000517 	ldw	r4,20(r2)
    7398:	8020917a 	slli	r16,r16,5
    739c:	00068b40 	call	68b4 <__hi0bits>
    73a0:	d8c00817 	ldw	r3,32(sp)
    73a4:	8085c83a 	sub	r2,r16,r2
    73a8:	18800015 	stw	r2,0(r3)
    73ac:	9805883a 	mov	r2,r19
    73b0:	dfc00717 	ldw	ra,28(sp)
    73b4:	dd000617 	ldw	r20,24(sp)
    73b8:	dcc00517 	ldw	r19,20(sp)
    73bc:	dc800417 	ldw	r18,16(sp)
    73c0:	dc400317 	ldw	r17,12(sp)
    73c4:	dc000217 	ldw	r16,8(sp)
    73c8:	dec00804 	addi	sp,sp,32
    73cc:	f800283a 	ret
    73d0:	d809883a 	mov	r4,sp
    73d4:	000691c0 	call	691c <__lo0bits>
    73d8:	d8c00017 	ldw	r3,0(sp)
    73dc:	04000044 	movi	r16,1
    73e0:	9c000415 	stw	r16,16(r19)
    73e4:	98c00515 	stw	r3,20(r19)
    73e8:	10800804 	addi	r2,r2,32
    73ec:	883fe126 	beq	r17,zero,7374 <__alt_data_end+0xfffbdf94>
    73f0:	00c00d44 	movi	r3,53
    73f4:	8c7ef344 	addi	r17,r17,-1075
    73f8:	88a3883a 	add	r17,r17,r2
    73fc:	1885c83a 	sub	r2,r3,r2
    7400:	d8c00817 	ldw	r3,32(sp)
    7404:	94400015 	stw	r17,0(r18)
    7408:	18800015 	stw	r2,0(r3)
    740c:	003fe706 	br	73ac <__alt_data_end+0xfffbdfcc>
    7410:	01000804 	movi	r4,32
    7414:	2089c83a 	sub	r4,r4,r2
    7418:	1908983a 	sll	r4,r3,r4
    741c:	d9400117 	ldw	r5,4(sp)
    7420:	1886d83a 	srl	r3,r3,r2
    7424:	2148b03a 	or	r4,r4,r5
    7428:	99000515 	stw	r4,20(r19)
    742c:	d8c00015 	stw	r3,0(sp)
    7430:	003fca06 	br	735c <__alt_data_end+0xfffbdf7c>

00007434 <__ratio>:
    7434:	defff904 	addi	sp,sp,-28
    7438:	dc400315 	stw	r17,12(sp)
    743c:	2823883a 	mov	r17,r5
    7440:	d9400104 	addi	r5,sp,4
    7444:	dfc00615 	stw	ra,24(sp)
    7448:	dcc00515 	stw	r19,20(sp)
    744c:	dc800415 	stw	r18,16(sp)
    7450:	2027883a 	mov	r19,r4
    7454:	dc000215 	stw	r16,8(sp)
    7458:	00071dc0 	call	71dc <__b2d>
    745c:	d80b883a 	mov	r5,sp
    7460:	8809883a 	mov	r4,r17
    7464:	1025883a 	mov	r18,r2
    7468:	1821883a 	mov	r16,r3
    746c:	00071dc0 	call	71dc <__b2d>
    7470:	8a000417 	ldw	r8,16(r17)
    7474:	99000417 	ldw	r4,16(r19)
    7478:	d9400117 	ldw	r5,4(sp)
    747c:	2209c83a 	sub	r4,r4,r8
    7480:	2010917a 	slli	r8,r4,5
    7484:	d9000017 	ldw	r4,0(sp)
    7488:	2909c83a 	sub	r4,r5,r4
    748c:	4109883a 	add	r4,r8,r4
    7490:	01000e0e 	bge	zero,r4,74cc <__ratio+0x98>
    7494:	2008953a 	slli	r4,r4,20
    7498:	2421883a 	add	r16,r4,r16
    749c:	100d883a 	mov	r6,r2
    74a0:	180f883a 	mov	r7,r3
    74a4:	9009883a 	mov	r4,r18
    74a8:	800b883a 	mov	r5,r16
    74ac:	000b6880 	call	b688 <__divdf3>
    74b0:	dfc00617 	ldw	ra,24(sp)
    74b4:	dcc00517 	ldw	r19,20(sp)
    74b8:	dc800417 	ldw	r18,16(sp)
    74bc:	dc400317 	ldw	r17,12(sp)
    74c0:	dc000217 	ldw	r16,8(sp)
    74c4:	dec00704 	addi	sp,sp,28
    74c8:	f800283a 	ret
    74cc:	2008953a 	slli	r4,r4,20
    74d0:	1907c83a 	sub	r3,r3,r4
    74d4:	003ff106 	br	749c <__alt_data_end+0xfffbe0bc>

000074d8 <_mprec_log10>:
    74d8:	defffe04 	addi	sp,sp,-8
    74dc:	dc000015 	stw	r16,0(sp)
    74e0:	dfc00115 	stw	ra,4(sp)
    74e4:	008005c4 	movi	r2,23
    74e8:	2021883a 	mov	r16,r4
    74ec:	11000d0e 	bge	r2,r4,7524 <_mprec_log10+0x4c>
    74f0:	0005883a 	mov	r2,zero
    74f4:	00cffc34 	movhi	r3,16368
    74f8:	843fffc4 	addi	r16,r16,-1
    74fc:	000d883a 	mov	r6,zero
    7500:	01d00934 	movhi	r7,16420
    7504:	1009883a 	mov	r4,r2
    7508:	180b883a 	mov	r5,r3
    750c:	000c2b00 	call	c2b0 <__muldf3>
    7510:	803ff91e 	bne	r16,zero,74f8 <__alt_data_end+0xfffbe118>
    7514:	dfc00117 	ldw	ra,4(sp)
    7518:	dc000017 	ldw	r16,0(sp)
    751c:	dec00204 	addi	sp,sp,8
    7520:	f800283a 	ret
    7524:	202090fa 	slli	r16,r4,3
    7528:	00800074 	movhi	r2,1
    752c:	1081bb04 	addi	r2,r2,1772
    7530:	1421883a 	add	r16,r2,r16
    7534:	80800017 	ldw	r2,0(r16)
    7538:	80c00117 	ldw	r3,4(r16)
    753c:	dfc00117 	ldw	ra,4(sp)
    7540:	dc000017 	ldw	r16,0(sp)
    7544:	dec00204 	addi	sp,sp,8
    7548:	f800283a 	ret

0000754c <__copybits>:
    754c:	297fffc4 	addi	r5,r5,-1
    7550:	280fd17a 	srai	r7,r5,5
    7554:	30c00417 	ldw	r3,16(r6)
    7558:	30800504 	addi	r2,r6,20
    755c:	39c00044 	addi	r7,r7,1
    7560:	18c7883a 	add	r3,r3,r3
    7564:	39cf883a 	add	r7,r7,r7
    7568:	18c7883a 	add	r3,r3,r3
    756c:	39cf883a 	add	r7,r7,r7
    7570:	10c7883a 	add	r3,r2,r3
    7574:	21cf883a 	add	r7,r4,r7
    7578:	10c00d2e 	bgeu	r2,r3,75b0 <__copybits+0x64>
    757c:	200b883a 	mov	r5,r4
    7580:	12000017 	ldw	r8,0(r2)
    7584:	29400104 	addi	r5,r5,4
    7588:	10800104 	addi	r2,r2,4
    758c:	2a3fff15 	stw	r8,-4(r5)
    7590:	10fffb36 	bltu	r2,r3,7580 <__alt_data_end+0xfffbe1a0>
    7594:	1985c83a 	sub	r2,r3,r6
    7598:	10bffac4 	addi	r2,r2,-21
    759c:	1004d0ba 	srli	r2,r2,2
    75a0:	10800044 	addi	r2,r2,1
    75a4:	1085883a 	add	r2,r2,r2
    75a8:	1085883a 	add	r2,r2,r2
    75ac:	2089883a 	add	r4,r4,r2
    75b0:	21c0032e 	bgeu	r4,r7,75c0 <__copybits+0x74>
    75b4:	20000015 	stw	zero,0(r4)
    75b8:	21000104 	addi	r4,r4,4
    75bc:	21fffd36 	bltu	r4,r7,75b4 <__alt_data_end+0xfffbe1d4>
    75c0:	f800283a 	ret

000075c4 <__any_on>:
    75c4:	20c00417 	ldw	r3,16(r4)
    75c8:	2805d17a 	srai	r2,r5,5
    75cc:	21000504 	addi	r4,r4,20
    75d0:	18800d0e 	bge	r3,r2,7608 <__any_on+0x44>
    75d4:	18c7883a 	add	r3,r3,r3
    75d8:	18c7883a 	add	r3,r3,r3
    75dc:	20c7883a 	add	r3,r4,r3
    75e0:	20c0192e 	bgeu	r4,r3,7648 <__any_on+0x84>
    75e4:	18bfff17 	ldw	r2,-4(r3)
    75e8:	18ffff04 	addi	r3,r3,-4
    75ec:	1000041e 	bne	r2,zero,7600 <__any_on+0x3c>
    75f0:	20c0142e 	bgeu	r4,r3,7644 <__any_on+0x80>
    75f4:	18ffff04 	addi	r3,r3,-4
    75f8:	19400017 	ldw	r5,0(r3)
    75fc:	283ffc26 	beq	r5,zero,75f0 <__alt_data_end+0xfffbe210>
    7600:	00800044 	movi	r2,1
    7604:	f800283a 	ret
    7608:	10c00a0e 	bge	r2,r3,7634 <__any_on+0x70>
    760c:	1085883a 	add	r2,r2,r2
    7610:	1085883a 	add	r2,r2,r2
    7614:	294007cc 	andi	r5,r5,31
    7618:	2087883a 	add	r3,r4,r2
    761c:	283ff026 	beq	r5,zero,75e0 <__alt_data_end+0xfffbe200>
    7620:	19800017 	ldw	r6,0(r3)
    7624:	3144d83a 	srl	r2,r6,r5
    7628:	114a983a 	sll	r5,r2,r5
    762c:	317ff41e 	bne	r6,r5,7600 <__alt_data_end+0xfffbe220>
    7630:	003feb06 	br	75e0 <__alt_data_end+0xfffbe200>
    7634:	1085883a 	add	r2,r2,r2
    7638:	1085883a 	add	r2,r2,r2
    763c:	2087883a 	add	r3,r4,r2
    7640:	003fe706 	br	75e0 <__alt_data_end+0xfffbe200>
    7644:	f800283a 	ret
    7648:	0005883a 	mov	r2,zero
    764c:	f800283a 	ret

00007650 <_putc_r>:
    7650:	defffc04 	addi	sp,sp,-16
    7654:	dc000215 	stw	r16,8(sp)
    7658:	dfc00315 	stw	ra,12(sp)
    765c:	2021883a 	mov	r16,r4
    7660:	20000226 	beq	r4,zero,766c <_putc_r+0x1c>
    7664:	20800e17 	ldw	r2,56(r4)
    7668:	10001b26 	beq	r2,zero,76d8 <_putc_r+0x88>
    766c:	30800217 	ldw	r2,8(r6)
    7670:	10bfffc4 	addi	r2,r2,-1
    7674:	30800215 	stw	r2,8(r6)
    7678:	10000a16 	blt	r2,zero,76a4 <_putc_r+0x54>
    767c:	30800017 	ldw	r2,0(r6)
    7680:	11400005 	stb	r5,0(r2)
    7684:	30800017 	ldw	r2,0(r6)
    7688:	10c00044 	addi	r3,r2,1
    768c:	30c00015 	stw	r3,0(r6)
    7690:	10800003 	ldbu	r2,0(r2)
    7694:	dfc00317 	ldw	ra,12(sp)
    7698:	dc000217 	ldw	r16,8(sp)
    769c:	dec00404 	addi	sp,sp,16
    76a0:	f800283a 	ret
    76a4:	30c00617 	ldw	r3,24(r6)
    76a8:	10c00616 	blt	r2,r3,76c4 <_putc_r+0x74>
    76ac:	30800017 	ldw	r2,0(r6)
    76b0:	00c00284 	movi	r3,10
    76b4:	11400005 	stb	r5,0(r2)
    76b8:	30800017 	ldw	r2,0(r6)
    76bc:	11400003 	ldbu	r5,0(r2)
    76c0:	28fff11e 	bne	r5,r3,7688 <__alt_data_end+0xfffbe2a8>
    76c4:	8009883a 	mov	r4,r16
    76c8:	dfc00317 	ldw	ra,12(sp)
    76cc:	dc000217 	ldw	r16,8(sp)
    76d0:	dec00404 	addi	sp,sp,16
    76d4:	00096f41 	jmpi	96f4 <__swbuf_r>
    76d8:	d9400015 	stw	r5,0(sp)
    76dc:	d9800115 	stw	r6,4(sp)
    76e0:	0004b700 	call	4b70 <__sinit>
    76e4:	d9800117 	ldw	r6,4(sp)
    76e8:	d9400017 	ldw	r5,0(sp)
    76ec:	003fdf06 	br	766c <__alt_data_end+0xfffbe28c>

000076f0 <putc>:
    76f0:	00800074 	movhi	r2,1
    76f4:	defffc04 	addi	sp,sp,-16
    76f8:	1088ee04 	addi	r2,r2,9144
    76fc:	dc000115 	stw	r16,4(sp)
    7700:	14000017 	ldw	r16,0(r2)
    7704:	dc400215 	stw	r17,8(sp)
    7708:	dfc00315 	stw	ra,12(sp)
    770c:	2023883a 	mov	r17,r4
    7710:	80000226 	beq	r16,zero,771c <putc+0x2c>
    7714:	80800e17 	ldw	r2,56(r16)
    7718:	10001a26 	beq	r2,zero,7784 <putc+0x94>
    771c:	28800217 	ldw	r2,8(r5)
    7720:	10bfffc4 	addi	r2,r2,-1
    7724:	28800215 	stw	r2,8(r5)
    7728:	10000b16 	blt	r2,zero,7758 <putc+0x68>
    772c:	28800017 	ldw	r2,0(r5)
    7730:	14400005 	stb	r17,0(r2)
    7734:	28800017 	ldw	r2,0(r5)
    7738:	10c00044 	addi	r3,r2,1
    773c:	28c00015 	stw	r3,0(r5)
    7740:	10800003 	ldbu	r2,0(r2)
    7744:	dfc00317 	ldw	ra,12(sp)
    7748:	dc400217 	ldw	r17,8(sp)
    774c:	dc000117 	ldw	r16,4(sp)
    7750:	dec00404 	addi	sp,sp,16
    7754:	f800283a 	ret
    7758:	28c00617 	ldw	r3,24(r5)
    775c:	10c00e16 	blt	r2,r3,7798 <putc+0xa8>
    7760:	28800017 	ldw	r2,0(r5)
    7764:	01000284 	movi	r4,10
    7768:	14400005 	stb	r17,0(r2)
    776c:	28800017 	ldw	r2,0(r5)
    7770:	10c00003 	ldbu	r3,0(r2)
    7774:	193ff01e 	bne	r3,r4,7738 <__alt_data_end+0xfffbe358>
    7778:	280d883a 	mov	r6,r5
    777c:	180b883a 	mov	r5,r3
    7780:	00000706 	br	77a0 <putc+0xb0>
    7784:	8009883a 	mov	r4,r16
    7788:	d9400015 	stw	r5,0(sp)
    778c:	0004b700 	call	4b70 <__sinit>
    7790:	d9400017 	ldw	r5,0(sp)
    7794:	003fe106 	br	771c <__alt_data_end+0xfffbe33c>
    7798:	280d883a 	mov	r6,r5
    779c:	880b883a 	mov	r5,r17
    77a0:	8009883a 	mov	r4,r16
    77a4:	dfc00317 	ldw	ra,12(sp)
    77a8:	dc400217 	ldw	r17,8(sp)
    77ac:	dc000117 	ldw	r16,4(sp)
    77b0:	dec00404 	addi	sp,sp,16
    77b4:	00096f41 	jmpi	96f4 <__swbuf_r>

000077b8 <_realloc_r>:
    77b8:	defff604 	addi	sp,sp,-40
    77bc:	dc800215 	stw	r18,8(sp)
    77c0:	dfc00915 	stw	ra,36(sp)
    77c4:	df000815 	stw	fp,32(sp)
    77c8:	ddc00715 	stw	r23,28(sp)
    77cc:	dd800615 	stw	r22,24(sp)
    77d0:	dd400515 	stw	r21,20(sp)
    77d4:	dd000415 	stw	r20,16(sp)
    77d8:	dcc00315 	stw	r19,12(sp)
    77dc:	dc400115 	stw	r17,4(sp)
    77e0:	dc000015 	stw	r16,0(sp)
    77e4:	3025883a 	mov	r18,r6
    77e8:	2800b726 	beq	r5,zero,7ac8 <_realloc_r+0x310>
    77ec:	282b883a 	mov	r21,r5
    77f0:	2029883a 	mov	r20,r4
    77f4:	000dc6c0 	call	dc6c <__malloc_lock>
    77f8:	a8bfff17 	ldw	r2,-4(r21)
    77fc:	043fff04 	movi	r16,-4
    7800:	90c002c4 	addi	r3,r18,11
    7804:	01000584 	movi	r4,22
    7808:	acfffe04 	addi	r19,r21,-8
    780c:	1420703a 	and	r16,r2,r16
    7810:	20c0332e 	bgeu	r4,r3,78e0 <_realloc_r+0x128>
    7814:	047ffe04 	movi	r17,-8
    7818:	1c62703a 	and	r17,r3,r17
    781c:	8807883a 	mov	r3,r17
    7820:	88005816 	blt	r17,zero,7984 <_realloc_r+0x1cc>
    7824:	8c805736 	bltu	r17,r18,7984 <_realloc_r+0x1cc>
    7828:	80c0300e 	bge	r16,r3,78ec <_realloc_r+0x134>
    782c:	07000074 	movhi	fp,1
    7830:	e7036904 	addi	fp,fp,3492
    7834:	e1c00217 	ldw	r7,8(fp)
    7838:	9c09883a 	add	r4,r19,r16
    783c:	22000117 	ldw	r8,4(r4)
    7840:	21c06326 	beq	r4,r7,79d0 <_realloc_r+0x218>
    7844:	017fff84 	movi	r5,-2
    7848:	414a703a 	and	r5,r8,r5
    784c:	214b883a 	add	r5,r4,r5
    7850:	29800117 	ldw	r6,4(r5)
    7854:	3180004c 	andi	r6,r6,1
    7858:	30003f26 	beq	r6,zero,7958 <_realloc_r+0x1a0>
    785c:	1080004c 	andi	r2,r2,1
    7860:	10008326 	beq	r2,zero,7a70 <_realloc_r+0x2b8>
    7864:	900b883a 	mov	r5,r18
    7868:	a009883a 	mov	r4,r20
    786c:	00058dc0 	call	58dc <_malloc_r>
    7870:	1025883a 	mov	r18,r2
    7874:	10011e26 	beq	r2,zero,7cf0 <_realloc_r+0x538>
    7878:	a93fff17 	ldw	r4,-4(r21)
    787c:	10fffe04 	addi	r3,r2,-8
    7880:	00bfff84 	movi	r2,-2
    7884:	2084703a 	and	r2,r4,r2
    7888:	9885883a 	add	r2,r19,r2
    788c:	1880ee26 	beq	r3,r2,7c48 <_realloc_r+0x490>
    7890:	81bfff04 	addi	r6,r16,-4
    7894:	00800904 	movi	r2,36
    7898:	1180b836 	bltu	r2,r6,7b7c <_realloc_r+0x3c4>
    789c:	00c004c4 	movi	r3,19
    78a0:	19809636 	bltu	r3,r6,7afc <_realloc_r+0x344>
    78a4:	9005883a 	mov	r2,r18
    78a8:	a807883a 	mov	r3,r21
    78ac:	19000017 	ldw	r4,0(r3)
    78b0:	11000015 	stw	r4,0(r2)
    78b4:	19000117 	ldw	r4,4(r3)
    78b8:	11000115 	stw	r4,4(r2)
    78bc:	18c00217 	ldw	r3,8(r3)
    78c0:	10c00215 	stw	r3,8(r2)
    78c4:	a80b883a 	mov	r5,r21
    78c8:	a009883a 	mov	r4,r20
    78cc:	0004ce40 	call	4ce4 <_free_r>
    78d0:	a009883a 	mov	r4,r20
    78d4:	000dc900 	call	dc90 <__malloc_unlock>
    78d8:	9005883a 	mov	r2,r18
    78dc:	00001206 	br	7928 <_realloc_r+0x170>
    78e0:	00c00404 	movi	r3,16
    78e4:	1823883a 	mov	r17,r3
    78e8:	003fce06 	br	7824 <__alt_data_end+0xfffbe444>
    78ec:	a825883a 	mov	r18,r21
    78f0:	8445c83a 	sub	r2,r16,r17
    78f4:	00c003c4 	movi	r3,15
    78f8:	18802636 	bltu	r3,r2,7994 <_realloc_r+0x1dc>
    78fc:	99800117 	ldw	r6,4(r19)
    7900:	9c07883a 	add	r3,r19,r16
    7904:	3180004c 	andi	r6,r6,1
    7908:	3420b03a 	or	r16,r6,r16
    790c:	9c000115 	stw	r16,4(r19)
    7910:	18800117 	ldw	r2,4(r3)
    7914:	10800054 	ori	r2,r2,1
    7918:	18800115 	stw	r2,4(r3)
    791c:	a009883a 	mov	r4,r20
    7920:	000dc900 	call	dc90 <__malloc_unlock>
    7924:	9005883a 	mov	r2,r18
    7928:	dfc00917 	ldw	ra,36(sp)
    792c:	df000817 	ldw	fp,32(sp)
    7930:	ddc00717 	ldw	r23,28(sp)
    7934:	dd800617 	ldw	r22,24(sp)
    7938:	dd400517 	ldw	r21,20(sp)
    793c:	dd000417 	ldw	r20,16(sp)
    7940:	dcc00317 	ldw	r19,12(sp)
    7944:	dc800217 	ldw	r18,8(sp)
    7948:	dc400117 	ldw	r17,4(sp)
    794c:	dc000017 	ldw	r16,0(sp)
    7950:	dec00a04 	addi	sp,sp,40
    7954:	f800283a 	ret
    7958:	017fff04 	movi	r5,-4
    795c:	414a703a 	and	r5,r8,r5
    7960:	814d883a 	add	r6,r16,r5
    7964:	30c01f16 	blt	r6,r3,79e4 <_realloc_r+0x22c>
    7968:	20800317 	ldw	r2,12(r4)
    796c:	20c00217 	ldw	r3,8(r4)
    7970:	a825883a 	mov	r18,r21
    7974:	3021883a 	mov	r16,r6
    7978:	18800315 	stw	r2,12(r3)
    797c:	10c00215 	stw	r3,8(r2)
    7980:	003fdb06 	br	78f0 <__alt_data_end+0xfffbe510>
    7984:	00800304 	movi	r2,12
    7988:	a0800015 	stw	r2,0(r20)
    798c:	0005883a 	mov	r2,zero
    7990:	003fe506 	br	7928 <__alt_data_end+0xfffbe548>
    7994:	98c00117 	ldw	r3,4(r19)
    7998:	9c4b883a 	add	r5,r19,r17
    799c:	11000054 	ori	r4,r2,1
    79a0:	18c0004c 	andi	r3,r3,1
    79a4:	1c62b03a 	or	r17,r3,r17
    79a8:	9c400115 	stw	r17,4(r19)
    79ac:	29000115 	stw	r4,4(r5)
    79b0:	2885883a 	add	r2,r5,r2
    79b4:	10c00117 	ldw	r3,4(r2)
    79b8:	29400204 	addi	r5,r5,8
    79bc:	a009883a 	mov	r4,r20
    79c0:	18c00054 	ori	r3,r3,1
    79c4:	10c00115 	stw	r3,4(r2)
    79c8:	0004ce40 	call	4ce4 <_free_r>
    79cc:	003fd306 	br	791c <__alt_data_end+0xfffbe53c>
    79d0:	017fff04 	movi	r5,-4
    79d4:	414a703a 	and	r5,r8,r5
    79d8:	89800404 	addi	r6,r17,16
    79dc:	8151883a 	add	r8,r16,r5
    79e0:	4180590e 	bge	r8,r6,7b48 <_realloc_r+0x390>
    79e4:	1080004c 	andi	r2,r2,1
    79e8:	103f9e1e 	bne	r2,zero,7864 <__alt_data_end+0xfffbe484>
    79ec:	adbffe17 	ldw	r22,-8(r21)
    79f0:	00bfff04 	movi	r2,-4
    79f4:	9dadc83a 	sub	r22,r19,r22
    79f8:	b1800117 	ldw	r6,4(r22)
    79fc:	3084703a 	and	r2,r6,r2
    7a00:	20002026 	beq	r4,zero,7a84 <_realloc_r+0x2cc>
    7a04:	80af883a 	add	r23,r16,r2
    7a08:	b96f883a 	add	r23,r23,r5
    7a0c:	21c05f26 	beq	r4,r7,7b8c <_realloc_r+0x3d4>
    7a10:	b8c01c16 	blt	r23,r3,7a84 <_realloc_r+0x2cc>
    7a14:	20800317 	ldw	r2,12(r4)
    7a18:	20c00217 	ldw	r3,8(r4)
    7a1c:	81bfff04 	addi	r6,r16,-4
    7a20:	01000904 	movi	r4,36
    7a24:	18800315 	stw	r2,12(r3)
    7a28:	10c00215 	stw	r3,8(r2)
    7a2c:	b0c00217 	ldw	r3,8(r22)
    7a30:	b0800317 	ldw	r2,12(r22)
    7a34:	b4800204 	addi	r18,r22,8
    7a38:	18800315 	stw	r2,12(r3)
    7a3c:	10c00215 	stw	r3,8(r2)
    7a40:	21801b36 	bltu	r4,r6,7ab0 <_realloc_r+0x2f8>
    7a44:	008004c4 	movi	r2,19
    7a48:	1180352e 	bgeu	r2,r6,7b20 <_realloc_r+0x368>
    7a4c:	a8800017 	ldw	r2,0(r21)
    7a50:	b0800215 	stw	r2,8(r22)
    7a54:	a8800117 	ldw	r2,4(r21)
    7a58:	b0800315 	stw	r2,12(r22)
    7a5c:	008006c4 	movi	r2,27
    7a60:	11807f36 	bltu	r2,r6,7c60 <_realloc_r+0x4a8>
    7a64:	b0800404 	addi	r2,r22,16
    7a68:	ad400204 	addi	r21,r21,8
    7a6c:	00002d06 	br	7b24 <_realloc_r+0x36c>
    7a70:	adbffe17 	ldw	r22,-8(r21)
    7a74:	00bfff04 	movi	r2,-4
    7a78:	9dadc83a 	sub	r22,r19,r22
    7a7c:	b1000117 	ldw	r4,4(r22)
    7a80:	2084703a 	and	r2,r4,r2
    7a84:	b03f7726 	beq	r22,zero,7864 <__alt_data_end+0xfffbe484>
    7a88:	80af883a 	add	r23,r16,r2
    7a8c:	b8ff7516 	blt	r23,r3,7864 <__alt_data_end+0xfffbe484>
    7a90:	b0800317 	ldw	r2,12(r22)
    7a94:	b0c00217 	ldw	r3,8(r22)
    7a98:	81bfff04 	addi	r6,r16,-4
    7a9c:	01000904 	movi	r4,36
    7aa0:	18800315 	stw	r2,12(r3)
    7aa4:	10c00215 	stw	r3,8(r2)
    7aa8:	b4800204 	addi	r18,r22,8
    7aac:	21bfe52e 	bgeu	r4,r6,7a44 <__alt_data_end+0xfffbe664>
    7ab0:	a80b883a 	mov	r5,r21
    7ab4:	9009883a 	mov	r4,r18
    7ab8:	00063140 	call	6314 <memmove>
    7abc:	b821883a 	mov	r16,r23
    7ac0:	b027883a 	mov	r19,r22
    7ac4:	003f8a06 	br	78f0 <__alt_data_end+0xfffbe510>
    7ac8:	300b883a 	mov	r5,r6
    7acc:	dfc00917 	ldw	ra,36(sp)
    7ad0:	df000817 	ldw	fp,32(sp)
    7ad4:	ddc00717 	ldw	r23,28(sp)
    7ad8:	dd800617 	ldw	r22,24(sp)
    7adc:	dd400517 	ldw	r21,20(sp)
    7ae0:	dd000417 	ldw	r20,16(sp)
    7ae4:	dcc00317 	ldw	r19,12(sp)
    7ae8:	dc800217 	ldw	r18,8(sp)
    7aec:	dc400117 	ldw	r17,4(sp)
    7af0:	dc000017 	ldw	r16,0(sp)
    7af4:	dec00a04 	addi	sp,sp,40
    7af8:	00058dc1 	jmpi	58dc <_malloc_r>
    7afc:	a8c00017 	ldw	r3,0(r21)
    7b00:	90c00015 	stw	r3,0(r18)
    7b04:	a8c00117 	ldw	r3,4(r21)
    7b08:	90c00115 	stw	r3,4(r18)
    7b0c:	00c006c4 	movi	r3,27
    7b10:	19804536 	bltu	r3,r6,7c28 <_realloc_r+0x470>
    7b14:	90800204 	addi	r2,r18,8
    7b18:	a8c00204 	addi	r3,r21,8
    7b1c:	003f6306 	br	78ac <__alt_data_end+0xfffbe4cc>
    7b20:	9005883a 	mov	r2,r18
    7b24:	a8c00017 	ldw	r3,0(r21)
    7b28:	b821883a 	mov	r16,r23
    7b2c:	b027883a 	mov	r19,r22
    7b30:	10c00015 	stw	r3,0(r2)
    7b34:	a8c00117 	ldw	r3,4(r21)
    7b38:	10c00115 	stw	r3,4(r2)
    7b3c:	a8c00217 	ldw	r3,8(r21)
    7b40:	10c00215 	stw	r3,8(r2)
    7b44:	003f6a06 	br	78f0 <__alt_data_end+0xfffbe510>
    7b48:	9c67883a 	add	r19,r19,r17
    7b4c:	4445c83a 	sub	r2,r8,r17
    7b50:	e4c00215 	stw	r19,8(fp)
    7b54:	10800054 	ori	r2,r2,1
    7b58:	98800115 	stw	r2,4(r19)
    7b5c:	a8bfff17 	ldw	r2,-4(r21)
    7b60:	a009883a 	mov	r4,r20
    7b64:	1080004c 	andi	r2,r2,1
    7b68:	1462b03a 	or	r17,r2,r17
    7b6c:	ac7fff15 	stw	r17,-4(r21)
    7b70:	000dc900 	call	dc90 <__malloc_unlock>
    7b74:	a805883a 	mov	r2,r21
    7b78:	003f6b06 	br	7928 <__alt_data_end+0xfffbe548>
    7b7c:	a80b883a 	mov	r5,r21
    7b80:	9009883a 	mov	r4,r18
    7b84:	00063140 	call	6314 <memmove>
    7b88:	003f4e06 	br	78c4 <__alt_data_end+0xfffbe4e4>
    7b8c:	89000404 	addi	r4,r17,16
    7b90:	b93fbc16 	blt	r23,r4,7a84 <__alt_data_end+0xfffbe6a4>
    7b94:	b0800317 	ldw	r2,12(r22)
    7b98:	b0c00217 	ldw	r3,8(r22)
    7b9c:	81bfff04 	addi	r6,r16,-4
    7ba0:	01000904 	movi	r4,36
    7ba4:	18800315 	stw	r2,12(r3)
    7ba8:	10c00215 	stw	r3,8(r2)
    7bac:	b4800204 	addi	r18,r22,8
    7bb0:	21804336 	bltu	r4,r6,7cc0 <_realloc_r+0x508>
    7bb4:	008004c4 	movi	r2,19
    7bb8:	11803f2e 	bgeu	r2,r6,7cb8 <_realloc_r+0x500>
    7bbc:	a8800017 	ldw	r2,0(r21)
    7bc0:	b0800215 	stw	r2,8(r22)
    7bc4:	a8800117 	ldw	r2,4(r21)
    7bc8:	b0800315 	stw	r2,12(r22)
    7bcc:	008006c4 	movi	r2,27
    7bd0:	11803f36 	bltu	r2,r6,7cd0 <_realloc_r+0x518>
    7bd4:	b0800404 	addi	r2,r22,16
    7bd8:	ad400204 	addi	r21,r21,8
    7bdc:	a8c00017 	ldw	r3,0(r21)
    7be0:	10c00015 	stw	r3,0(r2)
    7be4:	a8c00117 	ldw	r3,4(r21)
    7be8:	10c00115 	stw	r3,4(r2)
    7bec:	a8c00217 	ldw	r3,8(r21)
    7bf0:	10c00215 	stw	r3,8(r2)
    7bf4:	b447883a 	add	r3,r22,r17
    7bf8:	bc45c83a 	sub	r2,r23,r17
    7bfc:	e0c00215 	stw	r3,8(fp)
    7c00:	10800054 	ori	r2,r2,1
    7c04:	18800115 	stw	r2,4(r3)
    7c08:	b0800117 	ldw	r2,4(r22)
    7c0c:	a009883a 	mov	r4,r20
    7c10:	1080004c 	andi	r2,r2,1
    7c14:	1462b03a 	or	r17,r2,r17
    7c18:	b4400115 	stw	r17,4(r22)
    7c1c:	000dc900 	call	dc90 <__malloc_unlock>
    7c20:	9005883a 	mov	r2,r18
    7c24:	003f4006 	br	7928 <__alt_data_end+0xfffbe548>
    7c28:	a8c00217 	ldw	r3,8(r21)
    7c2c:	90c00215 	stw	r3,8(r18)
    7c30:	a8c00317 	ldw	r3,12(r21)
    7c34:	90c00315 	stw	r3,12(r18)
    7c38:	30801126 	beq	r6,r2,7c80 <_realloc_r+0x4c8>
    7c3c:	90800404 	addi	r2,r18,16
    7c40:	a8c00404 	addi	r3,r21,16
    7c44:	003f1906 	br	78ac <__alt_data_end+0xfffbe4cc>
    7c48:	90ffff17 	ldw	r3,-4(r18)
    7c4c:	00bfff04 	movi	r2,-4
    7c50:	a825883a 	mov	r18,r21
    7c54:	1884703a 	and	r2,r3,r2
    7c58:	80a1883a 	add	r16,r16,r2
    7c5c:	003f2406 	br	78f0 <__alt_data_end+0xfffbe510>
    7c60:	a8800217 	ldw	r2,8(r21)
    7c64:	b0800415 	stw	r2,16(r22)
    7c68:	a8800317 	ldw	r2,12(r21)
    7c6c:	b0800515 	stw	r2,20(r22)
    7c70:	31000a26 	beq	r6,r4,7c9c <_realloc_r+0x4e4>
    7c74:	b0800604 	addi	r2,r22,24
    7c78:	ad400404 	addi	r21,r21,16
    7c7c:	003fa906 	br	7b24 <__alt_data_end+0xfffbe744>
    7c80:	a9000417 	ldw	r4,16(r21)
    7c84:	90800604 	addi	r2,r18,24
    7c88:	a8c00604 	addi	r3,r21,24
    7c8c:	91000415 	stw	r4,16(r18)
    7c90:	a9000517 	ldw	r4,20(r21)
    7c94:	91000515 	stw	r4,20(r18)
    7c98:	003f0406 	br	78ac <__alt_data_end+0xfffbe4cc>
    7c9c:	a8c00417 	ldw	r3,16(r21)
    7ca0:	ad400604 	addi	r21,r21,24
    7ca4:	b0800804 	addi	r2,r22,32
    7ca8:	b0c00615 	stw	r3,24(r22)
    7cac:	a8ffff17 	ldw	r3,-4(r21)
    7cb0:	b0c00715 	stw	r3,28(r22)
    7cb4:	003f9b06 	br	7b24 <__alt_data_end+0xfffbe744>
    7cb8:	9005883a 	mov	r2,r18
    7cbc:	003fc706 	br	7bdc <__alt_data_end+0xfffbe7fc>
    7cc0:	a80b883a 	mov	r5,r21
    7cc4:	9009883a 	mov	r4,r18
    7cc8:	00063140 	call	6314 <memmove>
    7ccc:	003fc906 	br	7bf4 <__alt_data_end+0xfffbe814>
    7cd0:	a8800217 	ldw	r2,8(r21)
    7cd4:	b0800415 	stw	r2,16(r22)
    7cd8:	a8800317 	ldw	r2,12(r21)
    7cdc:	b0800515 	stw	r2,20(r22)
    7ce0:	31000726 	beq	r6,r4,7d00 <_realloc_r+0x548>
    7ce4:	b0800604 	addi	r2,r22,24
    7ce8:	ad400404 	addi	r21,r21,16
    7cec:	003fbb06 	br	7bdc <__alt_data_end+0xfffbe7fc>
    7cf0:	a009883a 	mov	r4,r20
    7cf4:	000dc900 	call	dc90 <__malloc_unlock>
    7cf8:	0005883a 	mov	r2,zero
    7cfc:	003f0a06 	br	7928 <__alt_data_end+0xfffbe548>
    7d00:	a8c00417 	ldw	r3,16(r21)
    7d04:	ad400604 	addi	r21,r21,24
    7d08:	b0800804 	addi	r2,r22,32
    7d0c:	b0c00615 	stw	r3,24(r22)
    7d10:	a8ffff17 	ldw	r3,-4(r21)
    7d14:	b0c00715 	stw	r3,28(r22)
    7d18:	003fb006 	br	7bdc <__alt_data_end+0xfffbe7fc>

00007d1c <__fpclassifyd>:
    7d1c:	00a00034 	movhi	r2,32768
    7d20:	10bfffc4 	addi	r2,r2,-1
    7d24:	2884703a 	and	r2,r5,r2
    7d28:	10000726 	beq	r2,zero,7d48 <__fpclassifyd+0x2c>
    7d2c:	00fffc34 	movhi	r3,65520
    7d30:	019ff834 	movhi	r6,32736
    7d34:	28c7883a 	add	r3,r5,r3
    7d38:	31bfffc4 	addi	r6,r6,-1
    7d3c:	30c00536 	bltu	r6,r3,7d54 <__fpclassifyd+0x38>
    7d40:	00800104 	movi	r2,4
    7d44:	f800283a 	ret
    7d48:	2000021e 	bne	r4,zero,7d54 <__fpclassifyd+0x38>
    7d4c:	00800084 	movi	r2,2
    7d50:	f800283a 	ret
    7d54:	00dffc34 	movhi	r3,32752
    7d58:	019ff834 	movhi	r6,32736
    7d5c:	28cb883a 	add	r5,r5,r3
    7d60:	31bfffc4 	addi	r6,r6,-1
    7d64:	317ff62e 	bgeu	r6,r5,7d40 <__alt_data_end+0xfffbe960>
    7d68:	01400434 	movhi	r5,16
    7d6c:	297fffc4 	addi	r5,r5,-1
    7d70:	28800236 	bltu	r5,r2,7d7c <__fpclassifyd+0x60>
    7d74:	008000c4 	movi	r2,3
    7d78:	f800283a 	ret
    7d7c:	10c00226 	beq	r2,r3,7d88 <__fpclassifyd+0x6c>
    7d80:	0005883a 	mov	r2,zero
    7d84:	f800283a 	ret
    7d88:	2005003a 	cmpeq	r2,r4,zero
    7d8c:	f800283a 	ret

00007d90 <_sbrk_r>:
    7d90:	defffd04 	addi	sp,sp,-12
    7d94:	dc000015 	stw	r16,0(sp)
    7d98:	04000074 	movhi	r16,1
    7d9c:	dc400115 	stw	r17,4(sp)
    7da0:	840fbe04 	addi	r16,r16,16120
    7da4:	2023883a 	mov	r17,r4
    7da8:	2809883a 	mov	r4,r5
    7dac:	dfc00215 	stw	ra,8(sp)
    7db0:	80000015 	stw	zero,0(r16)
    7db4:	000de8c0 	call	de8c <sbrk>
    7db8:	00ffffc4 	movi	r3,-1
    7dbc:	10c00526 	beq	r2,r3,7dd4 <_sbrk_r+0x44>
    7dc0:	dfc00217 	ldw	ra,8(sp)
    7dc4:	dc400117 	ldw	r17,4(sp)
    7dc8:	dc000017 	ldw	r16,0(sp)
    7dcc:	dec00304 	addi	sp,sp,12
    7dd0:	f800283a 	ret
    7dd4:	80c00017 	ldw	r3,0(r16)
    7dd8:	183ff926 	beq	r3,zero,7dc0 <__alt_data_end+0xfffbe9e0>
    7ddc:	88c00015 	stw	r3,0(r17)
    7de0:	003ff706 	br	7dc0 <__alt_data_end+0xfffbe9e0>

00007de4 <__sread>:
    7de4:	defffe04 	addi	sp,sp,-8
    7de8:	dc000015 	stw	r16,0(sp)
    7dec:	2821883a 	mov	r16,r5
    7df0:	2940038f 	ldh	r5,14(r5)
    7df4:	dfc00115 	stw	ra,4(sp)
    7df8:	0009df80 	call	9df8 <_read_r>
    7dfc:	10000716 	blt	r2,zero,7e1c <__sread+0x38>
    7e00:	80c01417 	ldw	r3,80(r16)
    7e04:	1887883a 	add	r3,r3,r2
    7e08:	80c01415 	stw	r3,80(r16)
    7e0c:	dfc00117 	ldw	ra,4(sp)
    7e10:	dc000017 	ldw	r16,0(sp)
    7e14:	dec00204 	addi	sp,sp,8
    7e18:	f800283a 	ret
    7e1c:	80c0030b 	ldhu	r3,12(r16)
    7e20:	18fbffcc 	andi	r3,r3,61439
    7e24:	80c0030d 	sth	r3,12(r16)
    7e28:	dfc00117 	ldw	ra,4(sp)
    7e2c:	dc000017 	ldw	r16,0(sp)
    7e30:	dec00204 	addi	sp,sp,8
    7e34:	f800283a 	ret

00007e38 <__seofread>:
    7e38:	0005883a 	mov	r2,zero
    7e3c:	f800283a 	ret

00007e40 <__swrite>:
    7e40:	2880030b 	ldhu	r2,12(r5)
    7e44:	defffb04 	addi	sp,sp,-20
    7e48:	dcc00315 	stw	r19,12(sp)
    7e4c:	dc800215 	stw	r18,8(sp)
    7e50:	dc400115 	stw	r17,4(sp)
    7e54:	dc000015 	stw	r16,0(sp)
    7e58:	dfc00415 	stw	ra,16(sp)
    7e5c:	10c0400c 	andi	r3,r2,256
    7e60:	2821883a 	mov	r16,r5
    7e64:	2023883a 	mov	r17,r4
    7e68:	3025883a 	mov	r18,r6
    7e6c:	3827883a 	mov	r19,r7
    7e70:	18000526 	beq	r3,zero,7e88 <__swrite+0x48>
    7e74:	2940038f 	ldh	r5,14(r5)
    7e78:	01c00084 	movi	r7,2
    7e7c:	000d883a 	mov	r6,zero
    7e80:	0009d980 	call	9d98 <_lseek_r>
    7e84:	8080030b 	ldhu	r2,12(r16)
    7e88:	8140038f 	ldh	r5,14(r16)
    7e8c:	10bbffcc 	andi	r2,r2,61439
    7e90:	980f883a 	mov	r7,r19
    7e94:	900d883a 	mov	r6,r18
    7e98:	8809883a 	mov	r4,r17
    7e9c:	8080030d 	sth	r2,12(r16)
    7ea0:	dfc00417 	ldw	ra,16(sp)
    7ea4:	dcc00317 	ldw	r19,12(sp)
    7ea8:	dc800217 	ldw	r18,8(sp)
    7eac:	dc400117 	ldw	r17,4(sp)
    7eb0:	dc000017 	ldw	r16,0(sp)
    7eb4:	dec00504 	addi	sp,sp,20
    7eb8:	000984c1 	jmpi	984c <_write_r>

00007ebc <__sseek>:
    7ebc:	defffe04 	addi	sp,sp,-8
    7ec0:	dc000015 	stw	r16,0(sp)
    7ec4:	2821883a 	mov	r16,r5
    7ec8:	2940038f 	ldh	r5,14(r5)
    7ecc:	dfc00115 	stw	ra,4(sp)
    7ed0:	0009d980 	call	9d98 <_lseek_r>
    7ed4:	00ffffc4 	movi	r3,-1
    7ed8:	10c00826 	beq	r2,r3,7efc <__sseek+0x40>
    7edc:	80c0030b 	ldhu	r3,12(r16)
    7ee0:	80801415 	stw	r2,80(r16)
    7ee4:	18c40014 	ori	r3,r3,4096
    7ee8:	80c0030d 	sth	r3,12(r16)
    7eec:	dfc00117 	ldw	ra,4(sp)
    7ef0:	dc000017 	ldw	r16,0(sp)
    7ef4:	dec00204 	addi	sp,sp,8
    7ef8:	f800283a 	ret
    7efc:	80c0030b 	ldhu	r3,12(r16)
    7f00:	18fbffcc 	andi	r3,r3,61439
    7f04:	80c0030d 	sth	r3,12(r16)
    7f08:	dfc00117 	ldw	ra,4(sp)
    7f0c:	dc000017 	ldw	r16,0(sp)
    7f10:	dec00204 	addi	sp,sp,8
    7f14:	f800283a 	ret

00007f18 <__sclose>:
    7f18:	2940038f 	ldh	r5,14(r5)
    7f1c:	00098ac1 	jmpi	98ac <_close_r>

00007f20 <strcmp>:
    7f20:	2144b03a 	or	r2,r4,r5
    7f24:	108000cc 	andi	r2,r2,3
    7f28:	1000171e 	bne	r2,zero,7f88 <strcmp+0x68>
    7f2c:	20800017 	ldw	r2,0(r4)
    7f30:	28c00017 	ldw	r3,0(r5)
    7f34:	10c0141e 	bne	r2,r3,7f88 <strcmp+0x68>
    7f38:	027fbff4 	movhi	r9,65279
    7f3c:	4a7fbfc4 	addi	r9,r9,-257
    7f40:	0086303a 	nor	r3,zero,r2
    7f44:	02202074 	movhi	r8,32897
    7f48:	1245883a 	add	r2,r2,r9
    7f4c:	42202004 	addi	r8,r8,-32640
    7f50:	10c4703a 	and	r2,r2,r3
    7f54:	1204703a 	and	r2,r2,r8
    7f58:	10000226 	beq	r2,zero,7f64 <strcmp+0x44>
    7f5c:	00002306 	br	7fec <strcmp+0xcc>
    7f60:	1000221e 	bne	r2,zero,7fec <strcmp+0xcc>
    7f64:	21000104 	addi	r4,r4,4
    7f68:	20c00017 	ldw	r3,0(r4)
    7f6c:	29400104 	addi	r5,r5,4
    7f70:	29800017 	ldw	r6,0(r5)
    7f74:	1a4f883a 	add	r7,r3,r9
    7f78:	00c4303a 	nor	r2,zero,r3
    7f7c:	3884703a 	and	r2,r7,r2
    7f80:	1204703a 	and	r2,r2,r8
    7f84:	19bff626 	beq	r3,r6,7f60 <__alt_data_end+0xfffbeb80>
    7f88:	20800003 	ldbu	r2,0(r4)
    7f8c:	10c03fcc 	andi	r3,r2,255
    7f90:	18c0201c 	xori	r3,r3,128
    7f94:	18ffe004 	addi	r3,r3,-128
    7f98:	18000c26 	beq	r3,zero,7fcc <strcmp+0xac>
    7f9c:	29800007 	ldb	r6,0(r5)
    7fa0:	19800326 	beq	r3,r6,7fb0 <strcmp+0x90>
    7fa4:	00001306 	br	7ff4 <strcmp+0xd4>
    7fa8:	29800007 	ldb	r6,0(r5)
    7fac:	11800b1e 	bne	r2,r6,7fdc <strcmp+0xbc>
    7fb0:	21000044 	addi	r4,r4,1
    7fb4:	20c00003 	ldbu	r3,0(r4)
    7fb8:	29400044 	addi	r5,r5,1
    7fbc:	18803fcc 	andi	r2,r3,255
    7fc0:	1080201c 	xori	r2,r2,128
    7fc4:	10bfe004 	addi	r2,r2,-128
    7fc8:	103ff71e 	bne	r2,zero,7fa8 <__alt_data_end+0xfffbebc8>
    7fcc:	0007883a 	mov	r3,zero
    7fd0:	28800003 	ldbu	r2,0(r5)
    7fd4:	1885c83a 	sub	r2,r3,r2
    7fd8:	f800283a 	ret
    7fdc:	28800003 	ldbu	r2,0(r5)
    7fe0:	18c03fcc 	andi	r3,r3,255
    7fe4:	1885c83a 	sub	r2,r3,r2
    7fe8:	f800283a 	ret
    7fec:	0005883a 	mov	r2,zero
    7ff0:	f800283a 	ret
    7ff4:	10c03fcc 	andi	r3,r2,255
    7ff8:	003ff506 	br	7fd0 <__alt_data_end+0xfffbebf0>

00007ffc <__sprint_r.part.0>:
    7ffc:	28801917 	ldw	r2,100(r5)
    8000:	defff604 	addi	sp,sp,-40
    8004:	dd400515 	stw	r21,20(sp)
    8008:	dfc00915 	stw	ra,36(sp)
    800c:	df000815 	stw	fp,32(sp)
    8010:	ddc00715 	stw	r23,28(sp)
    8014:	dd800615 	stw	r22,24(sp)
    8018:	dd000415 	stw	r20,16(sp)
    801c:	dcc00315 	stw	r19,12(sp)
    8020:	dc800215 	stw	r18,8(sp)
    8024:	dc400115 	stw	r17,4(sp)
    8028:	dc000015 	stw	r16,0(sp)
    802c:	1088000c 	andi	r2,r2,8192
    8030:	302b883a 	mov	r21,r6
    8034:	10002e26 	beq	r2,zero,80f0 <__sprint_r.part.0+0xf4>
    8038:	30800217 	ldw	r2,8(r6)
    803c:	35800017 	ldw	r22,0(r6)
    8040:	10002926 	beq	r2,zero,80e8 <__sprint_r.part.0+0xec>
    8044:	2827883a 	mov	r19,r5
    8048:	2029883a 	mov	r20,r4
    804c:	b5c00104 	addi	r23,r22,4
    8050:	04bfffc4 	movi	r18,-1
    8054:	bc400017 	ldw	r17,0(r23)
    8058:	b4000017 	ldw	r16,0(r22)
    805c:	0039883a 	mov	fp,zero
    8060:	8822d0ba 	srli	r17,r17,2
    8064:	8800031e 	bne	r17,zero,8074 <__sprint_r.part.0+0x78>
    8068:	00001806 	br	80cc <__sprint_r.part.0+0xd0>
    806c:	84000104 	addi	r16,r16,4
    8070:	8f001526 	beq	r17,fp,80c8 <__sprint_r.part.0+0xcc>
    8074:	81400017 	ldw	r5,0(r16)
    8078:	980d883a 	mov	r6,r19
    807c:	a009883a 	mov	r4,r20
    8080:	0009c440 	call	9c44 <_fputwc_r>
    8084:	e7000044 	addi	fp,fp,1
    8088:	14bff81e 	bne	r2,r18,806c <__alt_data_end+0xfffbec8c>
    808c:	9005883a 	mov	r2,r18
    8090:	a8000215 	stw	zero,8(r21)
    8094:	a8000115 	stw	zero,4(r21)
    8098:	dfc00917 	ldw	ra,36(sp)
    809c:	df000817 	ldw	fp,32(sp)
    80a0:	ddc00717 	ldw	r23,28(sp)
    80a4:	dd800617 	ldw	r22,24(sp)
    80a8:	dd400517 	ldw	r21,20(sp)
    80ac:	dd000417 	ldw	r20,16(sp)
    80b0:	dcc00317 	ldw	r19,12(sp)
    80b4:	dc800217 	ldw	r18,8(sp)
    80b8:	dc400117 	ldw	r17,4(sp)
    80bc:	dc000017 	ldw	r16,0(sp)
    80c0:	dec00a04 	addi	sp,sp,40
    80c4:	f800283a 	ret
    80c8:	a8800217 	ldw	r2,8(r21)
    80cc:	8c63883a 	add	r17,r17,r17
    80d0:	8c63883a 	add	r17,r17,r17
    80d4:	1445c83a 	sub	r2,r2,r17
    80d8:	a8800215 	stw	r2,8(r21)
    80dc:	b5800204 	addi	r22,r22,8
    80e0:	bdc00204 	addi	r23,r23,8
    80e4:	103fdb1e 	bne	r2,zero,8054 <__alt_data_end+0xfffbec74>
    80e8:	0005883a 	mov	r2,zero
    80ec:	003fe806 	br	8090 <__alt_data_end+0xfffbecb0>
    80f0:	0004ff40 	call	4ff4 <__sfvwrite_r>
    80f4:	003fe606 	br	8090 <__alt_data_end+0xfffbecb0>

000080f8 <__sprint_r>:
    80f8:	30c00217 	ldw	r3,8(r6)
    80fc:	18000126 	beq	r3,zero,8104 <__sprint_r+0xc>
    8100:	0007ffc1 	jmpi	7ffc <__sprint_r.part.0>
    8104:	30000115 	stw	zero,4(r6)
    8108:	0005883a 	mov	r2,zero
    810c:	f800283a 	ret

00008110 <___vfiprintf_internal_r>:
    8110:	deffca04 	addi	sp,sp,-216
    8114:	dd403115 	stw	r21,196(sp)
    8118:	dfc03515 	stw	ra,212(sp)
    811c:	df003415 	stw	fp,208(sp)
    8120:	ddc03315 	stw	r23,204(sp)
    8124:	dd803215 	stw	r22,200(sp)
    8128:	dd003015 	stw	r20,192(sp)
    812c:	dcc02f15 	stw	r19,188(sp)
    8130:	dc802e15 	stw	r18,184(sp)
    8134:	dc402d15 	stw	r17,180(sp)
    8138:	dc002c15 	stw	r16,176(sp)
    813c:	d9002115 	stw	r4,132(sp)
    8140:	d9402015 	stw	r5,128(sp)
    8144:	d9c02215 	stw	r7,136(sp)
    8148:	302b883a 	mov	r21,r6
    814c:	20000226 	beq	r4,zero,8158 <___vfiprintf_internal_r+0x48>
    8150:	20800e17 	ldw	r2,56(r4)
    8154:	1000cf26 	beq	r2,zero,8494 <___vfiprintf_internal_r+0x384>
    8158:	d8c02017 	ldw	r3,128(sp)
    815c:	1880030b 	ldhu	r2,12(r3)
    8160:	10c8000c 	andi	r3,r2,8192
    8164:	1800071e 	bne	r3,zero,8184 <___vfiprintf_internal_r+0x74>
    8168:	d9402017 	ldw	r5,128(sp)
    816c:	00f7ffc4 	movi	r3,-8193
    8170:	10880014 	ori	r2,r2,8192
    8174:	29001917 	ldw	r4,100(r5)
    8178:	2880030d 	sth	r2,12(r5)
    817c:	20c6703a 	and	r3,r4,r3
    8180:	28c01915 	stw	r3,100(r5)
    8184:	10c0020c 	andi	r3,r2,8
    8188:	1800a526 	beq	r3,zero,8420 <___vfiprintf_internal_r+0x310>
    818c:	d9002017 	ldw	r4,128(sp)
    8190:	20c00417 	ldw	r3,16(r4)
    8194:	1800a226 	beq	r3,zero,8420 <___vfiprintf_internal_r+0x310>
    8198:	1080068c 	andi	r2,r2,26
    819c:	00c00284 	movi	r3,10
    81a0:	10c0a826 	beq	r2,r3,8444 <___vfiprintf_internal_r+0x334>
    81a4:	d9001a04 	addi	r4,sp,104
    81a8:	d94019c4 	addi	r5,sp,103
    81ac:	04800074 	movhi	r18,1
    81b0:	2145c83a 	sub	r2,r4,r5
    81b4:	9481ed04 	addi	r18,r18,1972
    81b8:	d9001e15 	stw	r4,120(sp)
    81bc:	d9401f15 	stw	r5,124(sp)
    81c0:	dec01a15 	stw	sp,104(sp)
    81c4:	d8001c15 	stw	zero,112(sp)
    81c8:	d8001b15 	stw	zero,108(sp)
    81cc:	d811883a 	mov	r8,sp
    81d0:	d8002615 	stw	zero,152(sp)
    81d4:	d8002415 	stw	zero,144(sp)
    81d8:	d8802815 	stw	r2,160(sp)
    81dc:	a82d883a 	mov	r22,r21
    81e0:	b0800007 	ldb	r2,0(r22)
    81e4:	10040d26 	beq	r2,zero,921c <___vfiprintf_internal_r+0x110c>
    81e8:	00c00944 	movi	r3,37
    81ec:	b029883a 	mov	r20,r22
    81f0:	10c0021e 	bne	r2,r3,81fc <___vfiprintf_internal_r+0xec>
    81f4:	00001606 	br	8250 <___vfiprintf_internal_r+0x140>
    81f8:	10c00326 	beq	r2,r3,8208 <___vfiprintf_internal_r+0xf8>
    81fc:	a5000044 	addi	r20,r20,1
    8200:	a0800007 	ldb	r2,0(r20)
    8204:	103ffc1e 	bne	r2,zero,81f8 <__alt_data_end+0xfffbee18>
    8208:	a5a1c83a 	sub	r16,r20,r22
    820c:	80001026 	beq	r16,zero,8250 <___vfiprintf_internal_r+0x140>
    8210:	d8c01c17 	ldw	r3,112(sp)
    8214:	d8801b17 	ldw	r2,108(sp)
    8218:	45800015 	stw	r22,0(r8)
    821c:	80c7883a 	add	r3,r16,r3
    8220:	10800044 	addi	r2,r2,1
    8224:	44000115 	stw	r16,4(r8)
    8228:	d8c01c15 	stw	r3,112(sp)
    822c:	d8801b15 	stw	r2,108(sp)
    8230:	010001c4 	movi	r4,7
    8234:	2080750e 	bge	r4,r2,840c <___vfiprintf_internal_r+0x2fc>
    8238:	1803951e 	bne	r3,zero,9090 <___vfiprintf_internal_r+0xf80>
    823c:	d8c02417 	ldw	r3,144(sp)
    8240:	d8001b15 	stw	zero,108(sp)
    8244:	d811883a 	mov	r8,sp
    8248:	1c07883a 	add	r3,r3,r16
    824c:	d8c02415 	stw	r3,144(sp)
    8250:	a0800007 	ldb	r2,0(r20)
    8254:	1002e026 	beq	r2,zero,8dd8 <___vfiprintf_internal_r+0xcc8>
    8258:	a5800044 	addi	r22,r20,1
    825c:	a0c00047 	ldb	r3,1(r20)
    8260:	d8001d85 	stb	zero,118(sp)
    8264:	0027883a 	mov	r19,zero
    8268:	d8002305 	stb	zero,140(sp)
    826c:	043fffc4 	movi	r16,-1
    8270:	d8002515 	stw	zero,148(sp)
    8274:	0023883a 	mov	r17,zero
    8278:	05001604 	movi	r20,88
    827c:	05400244 	movi	r21,9
    8280:	402f883a 	mov	r23,r8
    8284:	b5800044 	addi	r22,r22,1
    8288:	18bff804 	addi	r2,r3,-32
    828c:	a0827736 	bltu	r20,r2,8c6c <___vfiprintf_internal_r+0xb5c>
    8290:	100490ba 	slli	r2,r2,2
    8294:	01000074 	movhi	r4,1
    8298:	2120aa04 	addi	r4,r4,-32088
    829c:	1105883a 	add	r2,r2,r4
    82a0:	10800017 	ldw	r2,0(r2)
    82a4:	1000683a 	jmp	r2
    82a8:	0000896c 	andhi	zero,zero,549
    82ac:	00008c6c 	andhi	zero,zero,561
    82b0:	00008c6c 	andhi	zero,zero,561
    82b4:	00008988 	cmpgei	zero,zero,550
    82b8:	00008c6c 	andhi	zero,zero,561
    82bc:	00008c6c 	andhi	zero,zero,561
    82c0:	00008c6c 	andhi	zero,zero,561
    82c4:	00008c6c 	andhi	zero,zero,561
    82c8:	00008c6c 	andhi	zero,zero,561
    82cc:	00008c6c 	andhi	zero,zero,561
    82d0:	00008b90 	cmplti	zero,zero,558
    82d4:	00008bb4 	movhi	zero,558
    82d8:	00008c6c 	andhi	zero,zero,561
    82dc:	000084ac 	andhi	zero,zero,530
    82e0:	00008bc8 	cmpgei	zero,zero,559
    82e4:	00008c6c 	andhi	zero,zero,561
    82e8:	00008994 	movui	zero,550
    82ec:	000089a0 	cmpeqi	zero,zero,550
    82f0:	000089a0 	cmpeqi	zero,zero,550
    82f4:	000089a0 	cmpeqi	zero,zero,550
    82f8:	000089a0 	cmpeqi	zero,zero,550
    82fc:	000089a0 	cmpeqi	zero,zero,550
    8300:	000089a0 	cmpeqi	zero,zero,550
    8304:	000089a0 	cmpeqi	zero,zero,550
    8308:	000089a0 	cmpeqi	zero,zero,550
    830c:	000089a0 	cmpeqi	zero,zero,550
    8310:	00008c6c 	andhi	zero,zero,561
    8314:	00008c6c 	andhi	zero,zero,561
    8318:	00008c6c 	andhi	zero,zero,561
    831c:	00008c6c 	andhi	zero,zero,561
    8320:	00008c6c 	andhi	zero,zero,561
    8324:	00008c6c 	andhi	zero,zero,561
    8328:	00008c6c 	andhi	zero,zero,561
    832c:	00008c6c 	andhi	zero,zero,561
    8330:	00008c6c 	andhi	zero,zero,561
    8334:	00008c6c 	andhi	zero,zero,561
    8338:	000089e0 	cmpeqi	zero,zero,551
    833c:	00008c6c 	andhi	zero,zero,561
    8340:	00008c6c 	andhi	zero,zero,561
    8344:	00008c6c 	andhi	zero,zero,561
    8348:	00008c6c 	andhi	zero,zero,561
    834c:	00008c6c 	andhi	zero,zero,561
    8350:	00008c6c 	andhi	zero,zero,561
    8354:	00008c6c 	andhi	zero,zero,561
    8358:	00008c6c 	andhi	zero,zero,561
    835c:	00008c6c 	andhi	zero,zero,561
    8360:	00008c6c 	andhi	zero,zero,561
    8364:	00008a1c 	xori	zero,zero,552
    8368:	00008c6c 	andhi	zero,zero,561
    836c:	00008c6c 	andhi	zero,zero,561
    8370:	00008c6c 	andhi	zero,zero,561
    8374:	00008c6c 	andhi	zero,zero,561
    8378:	00008c6c 	andhi	zero,zero,561
    837c:	00008a78 	rdprs	zero,zero,553
    8380:	00008c6c 	andhi	zero,zero,561
    8384:	00008c6c 	andhi	zero,zero,561
    8388:	00008aec 	andhi	zero,zero,555
    838c:	00008c6c 	andhi	zero,zero,561
    8390:	00008c6c 	andhi	zero,zero,561
    8394:	00008c6c 	andhi	zero,zero,561
    8398:	00008c6c 	andhi	zero,zero,561
    839c:	00008c6c 	andhi	zero,zero,561
    83a0:	00008c6c 	andhi	zero,zero,561
    83a4:	00008c6c 	andhi	zero,zero,561
    83a8:	00008c6c 	andhi	zero,zero,561
    83ac:	00008c6c 	andhi	zero,zero,561
    83b0:	00008c6c 	andhi	zero,zero,561
    83b4:	00008894 	movui	zero,546
    83b8:	000088c4 	movi	zero,547
    83bc:	00008c6c 	andhi	zero,zero,561
    83c0:	00008c6c 	andhi	zero,zero,561
    83c4:	00008c6c 	andhi	zero,zero,561
    83c8:	00008c14 	movui	zero,560
    83cc:	000088c4 	movi	zero,547
    83d0:	00008c6c 	andhi	zero,zero,561
    83d4:	00008c6c 	andhi	zero,zero,561
    83d8:	0000876c 	andhi	zero,zero,541
    83dc:	00008c6c 	andhi	zero,zero,561
    83e0:	00008780 	call	878 <___vfprintf_internal_r+0xc8>
    83e4:	000087b8 	rdprs	zero,zero,542
    83e8:	000084b8 	rdprs	zero,zero,530
    83ec:	00008760 	cmpeqi	zero,zero,541
    83f0:	00008c6c 	andhi	zero,zero,561
    83f4:	00008b2c 	andhi	zero,zero,556
    83f8:	00008c6c 	andhi	zero,zero,561
    83fc:	00008b78 	rdprs	zero,zero,557
    8400:	00008c6c 	andhi	zero,zero,561
    8404:	00008c6c 	andhi	zero,zero,561
    8408:	0000883c 	xorhi	zero,zero,544
    840c:	42000204 	addi	r8,r8,8
    8410:	d8c02417 	ldw	r3,144(sp)
    8414:	1c07883a 	add	r3,r3,r16
    8418:	d8c02415 	stw	r3,144(sp)
    841c:	003f8c06 	br	8250 <__alt_data_end+0xfffbee70>
    8420:	d9402017 	ldw	r5,128(sp)
    8424:	d9002117 	ldw	r4,132(sp)
    8428:	0002b640 	call	2b64 <__swsetup_r>
    842c:	1003c11e 	bne	r2,zero,9334 <___vfiprintf_internal_r+0x1224>
    8430:	d9402017 	ldw	r5,128(sp)
    8434:	00c00284 	movi	r3,10
    8438:	2880030b 	ldhu	r2,12(r5)
    843c:	1080068c 	andi	r2,r2,26
    8440:	10ff581e 	bne	r2,r3,81a4 <__alt_data_end+0xfffbedc4>
    8444:	d8c02017 	ldw	r3,128(sp)
    8448:	1880038f 	ldh	r2,14(r3)
    844c:	103f5516 	blt	r2,zero,81a4 <__alt_data_end+0xfffbedc4>
    8450:	d9c02217 	ldw	r7,136(sp)
    8454:	d9002117 	ldw	r4,132(sp)
    8458:	a80d883a 	mov	r6,r21
    845c:	180b883a 	mov	r5,r3
    8460:	00096380 	call	9638 <__sbprintf>
    8464:	dfc03517 	ldw	ra,212(sp)
    8468:	df003417 	ldw	fp,208(sp)
    846c:	ddc03317 	ldw	r23,204(sp)
    8470:	dd803217 	ldw	r22,200(sp)
    8474:	dd403117 	ldw	r21,196(sp)
    8478:	dd003017 	ldw	r20,192(sp)
    847c:	dcc02f17 	ldw	r19,188(sp)
    8480:	dc802e17 	ldw	r18,184(sp)
    8484:	dc402d17 	ldw	r17,180(sp)
    8488:	dc002c17 	ldw	r16,176(sp)
    848c:	dec03604 	addi	sp,sp,216
    8490:	f800283a 	ret
    8494:	0004b700 	call	4b70 <__sinit>
    8498:	003f2f06 	br	8158 <__alt_data_end+0xfffbed78>
    849c:	d8c02517 	ldw	r3,148(sp)
    84a0:	d8802215 	stw	r2,136(sp)
    84a4:	00c7c83a 	sub	r3,zero,r3
    84a8:	d8c02515 	stw	r3,148(sp)
    84ac:	8c400114 	ori	r17,r17,4
    84b0:	b0c00007 	ldb	r3,0(r22)
    84b4:	003f7306 	br	8284 <__alt_data_end+0xfffbeea4>
    84b8:	00800c04 	movi	r2,48
    84bc:	d9402217 	ldw	r5,136(sp)
    84c0:	d8801d05 	stb	r2,116(sp)
    84c4:	00801e04 	movi	r2,120
    84c8:	d8801d45 	stb	r2,117(sp)
    84cc:	d8001d85 	stb	zero,118(sp)
    84d0:	b811883a 	mov	r8,r23
    84d4:	28c00104 	addi	r3,r5,4
    84d8:	2cc00017 	ldw	r19,0(r5)
    84dc:	0029883a 	mov	r20,zero
    84e0:	88800094 	ori	r2,r17,2
    84e4:	80032516 	blt	r16,zero,917c <___vfiprintf_internal_r+0x106c>
    84e8:	00bfdfc4 	movi	r2,-129
    84ec:	88a2703a 	and	r17,r17,r2
    84f0:	d8c02215 	stw	r3,136(sp)
    84f4:	8c400094 	ori	r17,r17,2
    84f8:	98032a1e 	bne	r19,zero,91a4 <___vfiprintf_internal_r+0x1094>
    84fc:	00800074 	movhi	r2,1
    8500:	10818c04 	addi	r2,r2,1584
    8504:	d8802615 	stw	r2,152(sp)
    8508:	002b883a 	mov	r21,zero
    850c:	8001741e 	bne	r16,zero,8ae0 <___vfiprintf_internal_r+0x9d0>
    8510:	0021883a 	mov	r16,zero
    8514:	0029883a 	mov	r20,zero
    8518:	ddc01a04 	addi	r23,sp,104
    851c:	8027883a 	mov	r19,r16
    8520:	8500010e 	bge	r16,r20,8528 <___vfiprintf_internal_r+0x418>
    8524:	a027883a 	mov	r19,r20
    8528:	ad403fcc 	andi	r21,r21,255
    852c:	ad40201c 	xori	r21,r21,128
    8530:	ad7fe004 	addi	r21,r21,-128
    8534:	a8000126 	beq	r21,zero,853c <___vfiprintf_internal_r+0x42c>
    8538:	9cc00044 	addi	r19,r19,1
    853c:	89c0008c 	andi	r7,r17,2
    8540:	38000126 	beq	r7,zero,8548 <___vfiprintf_internal_r+0x438>
    8544:	9cc00084 	addi	r19,r19,2
    8548:	88c0210c 	andi	r3,r17,132
    854c:	1801dd1e 	bne	r3,zero,8cc4 <___vfiprintf_internal_r+0xbb4>
    8550:	d9402517 	ldw	r5,148(sp)
    8554:	2cebc83a 	sub	r21,r5,r19
    8558:	0541da0e 	bge	zero,r21,8cc4 <___vfiprintf_internal_r+0xbb4>
    855c:	07000404 	movi	fp,16
    8560:	d8801c17 	ldw	r2,112(sp)
    8564:	e543be0e 	bge	fp,r21,9460 <___vfiprintf_internal_r+0x1350>
    8568:	01400074 	movhi	r5,1
    856c:	2941f104 	addi	r5,r5,1988
    8570:	dc002715 	stw	r16,156(sp)
    8574:	d9801b17 	ldw	r6,108(sp)
    8578:	a821883a 	mov	r16,r21
    857c:	d9402315 	stw	r5,140(sp)
    8580:	028001c4 	movi	r10,7
    8584:	d9c02915 	stw	r7,164(sp)
    8588:	182b883a 	mov	r21,r3
    858c:	00000506 	br	85a4 <___vfiprintf_internal_r+0x494>
    8590:	31000084 	addi	r4,r6,2
    8594:	42000204 	addi	r8,r8,8
    8598:	180d883a 	mov	r6,r3
    859c:	843ffc04 	addi	r16,r16,-16
    85a0:	e4000f0e 	bge	fp,r16,85e0 <___vfiprintf_internal_r+0x4d0>
    85a4:	01000074 	movhi	r4,1
    85a8:	10800404 	addi	r2,r2,16
    85ac:	30c00044 	addi	r3,r6,1
    85b0:	2101f104 	addi	r4,r4,1988
    85b4:	41000015 	stw	r4,0(r8)
    85b8:	47000115 	stw	fp,4(r8)
    85bc:	d8801c15 	stw	r2,112(sp)
    85c0:	d8c01b15 	stw	r3,108(sp)
    85c4:	50fff20e 	bge	r10,r3,8590 <__alt_data_end+0xfffbf1b0>
    85c8:	1001b21e 	bne	r2,zero,8c94 <___vfiprintf_internal_r+0xb84>
    85cc:	843ffc04 	addi	r16,r16,-16
    85d0:	000d883a 	mov	r6,zero
    85d4:	01000044 	movi	r4,1
    85d8:	d811883a 	mov	r8,sp
    85dc:	e43ff116 	blt	fp,r16,85a4 <__alt_data_end+0xfffbf1c4>
    85e0:	a807883a 	mov	r3,r21
    85e4:	d9c02917 	ldw	r7,164(sp)
    85e8:	802b883a 	mov	r21,r16
    85ec:	dc002717 	ldw	r16,156(sp)
    85f0:	d9402317 	ldw	r5,140(sp)
    85f4:	a885883a 	add	r2,r21,r2
    85f8:	45400115 	stw	r21,4(r8)
    85fc:	41400015 	stw	r5,0(r8)
    8600:	d8801c15 	stw	r2,112(sp)
    8604:	d9001b15 	stw	r4,108(sp)
    8608:	014001c4 	movi	r5,7
    860c:	29026216 	blt	r5,r4,8f98 <___vfiprintf_internal_r+0xe88>
    8610:	d9801d87 	ldb	r6,118(sp)
    8614:	42000204 	addi	r8,r8,8
    8618:	21400044 	addi	r5,r4,1
    861c:	3001ae1e 	bne	r6,zero,8cd8 <___vfiprintf_internal_r+0xbc8>
    8620:	3801bb26 	beq	r7,zero,8d10 <___vfiprintf_internal_r+0xc00>
    8624:	d9001d04 	addi	r4,sp,116
    8628:	10800084 	addi	r2,r2,2
    862c:	41000015 	stw	r4,0(r8)
    8630:	01000084 	movi	r4,2
    8634:	41000115 	stw	r4,4(r8)
    8638:	d8801c15 	stw	r2,112(sp)
    863c:	d9401b15 	stw	r5,108(sp)
    8640:	010001c4 	movi	r4,7
    8644:	2142680e 	bge	r4,r5,8fe8 <___vfiprintf_internal_r+0xed8>
    8648:	1002b11e 	bne	r2,zero,9110 <___vfiprintf_internal_r+0x1000>
    864c:	01802004 	movi	r6,128
    8650:	01400044 	movi	r5,1
    8654:	0009883a 	mov	r4,zero
    8658:	d811883a 	mov	r8,sp
    865c:	1981ae1e 	bne	r3,r6,8d18 <___vfiprintf_internal_r+0xc08>
    8660:	d8c02517 	ldw	r3,148(sp)
    8664:	1cf9c83a 	sub	fp,r3,r19
    8668:	0701ab0e 	bge	zero,fp,8d18 <___vfiprintf_internal_r+0xc08>
    866c:	05400404 	movi	r21,16
    8670:	af03a90e 	bge	r21,fp,9518 <___vfiprintf_internal_r+0x1408>
    8674:	01400074 	movhi	r5,1
    8678:	2941ed04 	addi	r5,r5,1972
    867c:	d9402315 	stw	r5,140(sp)
    8680:	01c001c4 	movi	r7,7
    8684:	00000506 	br	869c <___vfiprintf_internal_r+0x58c>
    8688:	21800084 	addi	r6,r4,2
    868c:	42000204 	addi	r8,r8,8
    8690:	1809883a 	mov	r4,r3
    8694:	e73ffc04 	addi	fp,fp,-16
    8698:	af000d0e 	bge	r21,fp,86d0 <___vfiprintf_internal_r+0x5c0>
    869c:	10800404 	addi	r2,r2,16
    86a0:	20c00044 	addi	r3,r4,1
    86a4:	44800015 	stw	r18,0(r8)
    86a8:	45400115 	stw	r21,4(r8)
    86ac:	d8801c15 	stw	r2,112(sp)
    86b0:	d8c01b15 	stw	r3,108(sp)
    86b4:	38fff40e 	bge	r7,r3,8688 <__alt_data_end+0xfffbf2a8>
    86b8:	10022b1e 	bne	r2,zero,8f68 <___vfiprintf_internal_r+0xe58>
    86bc:	e73ffc04 	addi	fp,fp,-16
    86c0:	01800044 	movi	r6,1
    86c4:	0009883a 	mov	r4,zero
    86c8:	d811883a 	mov	r8,sp
    86cc:	af3ff316 	blt	r21,fp,869c <__alt_data_end+0xfffbf2bc>
    86d0:	d8c02317 	ldw	r3,140(sp)
    86d4:	1705883a 	add	r2,r2,fp
    86d8:	47000115 	stw	fp,4(r8)
    86dc:	40c00015 	stw	r3,0(r8)
    86e0:	d8801c15 	stw	r2,112(sp)
    86e4:	d9801b15 	stw	r6,108(sp)
    86e8:	00c001c4 	movi	r3,7
    86ec:	19829416 	blt	r3,r6,9140 <___vfiprintf_internal_r+0x1030>
    86f0:	8521c83a 	sub	r16,r16,r20
    86f4:	42000204 	addi	r8,r8,8
    86f8:	31400044 	addi	r5,r6,1
    86fc:	3009883a 	mov	r4,r6
    8700:	04018716 	blt	zero,r16,8d20 <___vfiprintf_internal_r+0xc10>
    8704:	a085883a 	add	r2,r20,r2
    8708:	45c00015 	stw	r23,0(r8)
    870c:	45000115 	stw	r20,4(r8)
    8710:	d8801c15 	stw	r2,112(sp)
    8714:	d9401b15 	stw	r5,108(sp)
    8718:	00c001c4 	movi	r3,7
    871c:	1941c20e 	bge	r3,r5,8e28 <___vfiprintf_internal_r+0xd18>
    8720:	1002531e 	bne	r2,zero,9070 <___vfiprintf_internal_r+0xf60>
    8724:	d8001b15 	stw	zero,108(sp)
    8728:	8c40010c 	andi	r17,r17,4
    872c:	88023226 	beq	r17,zero,8ff8 <___vfiprintf_internal_r+0xee8>
    8730:	d9002517 	ldw	r4,148(sp)
    8734:	24e3c83a 	sub	r17,r4,r19
    8738:	04432916 	blt	zero,r17,93e0 <___vfiprintf_internal_r+0x12d0>
    873c:	d8802517 	ldw	r2,148(sp)
    8740:	14c0010e 	bge	r2,r19,8748 <___vfiprintf_internal_r+0x638>
    8744:	9805883a 	mov	r2,r19
    8748:	d8c02417 	ldw	r3,144(sp)
    874c:	1887883a 	add	r3,r3,r2
    8750:	d8c02415 	stw	r3,144(sp)
    8754:	d8001b15 	stw	zero,108(sp)
    8758:	d811883a 	mov	r8,sp
    875c:	003ea006 	br	81e0 <__alt_data_end+0xfffbee00>
    8760:	8c400814 	ori	r17,r17,32
    8764:	b0c00007 	ldb	r3,0(r22)
    8768:	003ec606 	br	8284 <__alt_data_end+0xfffbeea4>
    876c:	b0c00007 	ldb	r3,0(r22)
    8770:	00801b04 	movi	r2,108
    8774:	18832026 	beq	r3,r2,93f8 <___vfiprintf_internal_r+0x12e8>
    8778:	8c400414 	ori	r17,r17,16
    877c:	003ec106 	br	8284 <__alt_data_end+0xfffbeea4>
    8780:	9cc03fcc 	andi	r19,r19,255
    8784:	b811883a 	mov	r8,r23
    8788:	9803981e 	bne	r19,zero,95ec <___vfiprintf_internal_r+0x14dc>
    878c:	8880080c 	andi	r2,r17,32
    8790:	1002be26 	beq	r2,zero,928c <___vfiprintf_internal_r+0x117c>
    8794:	d9002217 	ldw	r4,136(sp)
    8798:	d9402417 	ldw	r5,144(sp)
    879c:	20800017 	ldw	r2,0(r4)
    87a0:	2807d7fa 	srai	r3,r5,31
    87a4:	21000104 	addi	r4,r4,4
    87a8:	d9002215 	stw	r4,136(sp)
    87ac:	11400015 	stw	r5,0(r2)
    87b0:	10c00115 	stw	r3,4(r2)
    87b4:	003e8a06 	br	81e0 <__alt_data_end+0xfffbee00>
    87b8:	9cc03fcc 	andi	r19,r19,255
    87bc:	b811883a 	mov	r8,r23
    87c0:	9803871e 	bne	r19,zero,95e0 <___vfiprintf_internal_r+0x14d0>
    87c4:	8880080c 	andi	r2,r17,32
    87c8:	10009a26 	beq	r2,zero,8a34 <___vfiprintf_internal_r+0x924>
    87cc:	d9002217 	ldw	r4,136(sp)
    87d0:	d8001d85 	stb	zero,118(sp)
    87d4:	20800204 	addi	r2,r4,8
    87d8:	24c00017 	ldw	r19,0(r4)
    87dc:	25000117 	ldw	r20,4(r4)
    87e0:	8002a416 	blt	r16,zero,9274 <___vfiprintf_internal_r+0x1164>
    87e4:	013fdfc4 	movi	r4,-129
    87e8:	9d06b03a 	or	r3,r19,r20
    87ec:	d8802215 	stw	r2,136(sp)
    87f0:	8922703a 	and	r17,r17,r4
    87f4:	18009b26 	beq	r3,zero,8a64 <___vfiprintf_internal_r+0x954>
    87f8:	002b883a 	mov	r21,zero
    87fc:	ddc01a04 	addi	r23,sp,104
    8800:	9806d0fa 	srli	r3,r19,3
    8804:	a008977a 	slli	r4,r20,29
    8808:	a028d0fa 	srli	r20,r20,3
    880c:	9cc001cc 	andi	r19,r19,7
    8810:	98800c04 	addi	r2,r19,48
    8814:	bdffffc4 	addi	r23,r23,-1
    8818:	20e6b03a 	or	r19,r4,r3
    881c:	b8800005 	stb	r2,0(r23)
    8820:	9d06b03a 	or	r3,r19,r20
    8824:	183ff61e 	bne	r3,zero,8800 <__alt_data_end+0xfffbf420>
    8828:	88c0004c 	andi	r3,r17,1
    882c:	18021f1e 	bne	r3,zero,90ac <___vfiprintf_internal_r+0xf9c>
    8830:	d9401e17 	ldw	r5,120(sp)
    8834:	2de9c83a 	sub	r20,r5,r23
    8838:	003f3806 	br	851c <__alt_data_end+0xfffbf13c>
    883c:	9cc03fcc 	andi	r19,r19,255
    8840:	b811883a 	mov	r8,r23
    8844:	98034f1e 	bne	r19,zero,9584 <___vfiprintf_internal_r+0x1474>
    8848:	00800074 	movhi	r2,1
    884c:	10818c04 	addi	r2,r2,1584
    8850:	d8802615 	stw	r2,152(sp)
    8854:	8880080c 	andi	r2,r17,32
    8858:	1000ac26 	beq	r2,zero,8b0c <___vfiprintf_internal_r+0x9fc>
    885c:	d9002217 	ldw	r4,136(sp)
    8860:	24c00017 	ldw	r19,0(r4)
    8864:	25000117 	ldw	r20,4(r4)
    8868:	21000204 	addi	r4,r4,8
    886c:	d9002215 	stw	r4,136(sp)
    8870:	8880004c 	andi	r2,r17,1
    8874:	1001e726 	beq	r2,zero,9014 <___vfiprintf_internal_r+0xf04>
    8878:	9d04b03a 	or	r2,r19,r20
    887c:	10025c1e 	bne	r2,zero,91f0 <___vfiprintf_internal_r+0x10e0>
    8880:	d8001d85 	stb	zero,118(sp)
    8884:	80024416 	blt	r16,zero,9198 <___vfiprintf_internal_r+0x1088>
    8888:	00bfdfc4 	movi	r2,-129
    888c:	88a2703a 	and	r17,r17,r2
    8890:	003f1d06 	br	8508 <__alt_data_end+0xfffbf128>
    8894:	d8c02217 	ldw	r3,136(sp)
    8898:	04c00044 	movi	r19,1
    889c:	b811883a 	mov	r8,r23
    88a0:	18800017 	ldw	r2,0(r3)
    88a4:	18c00104 	addi	r3,r3,4
    88a8:	d8001d85 	stb	zero,118(sp)
    88ac:	d8801005 	stb	r2,64(sp)
    88b0:	d8c02215 	stw	r3,136(sp)
    88b4:	9829883a 	mov	r20,r19
    88b8:	ddc01004 	addi	r23,sp,64
    88bc:	0021883a 	mov	r16,zero
    88c0:	003f1e06 	br	853c <__alt_data_end+0xfffbf15c>
    88c4:	9cc03fcc 	andi	r19,r19,255
    88c8:	b811883a 	mov	r8,r23
    88cc:	9803331e 	bne	r19,zero,959c <___vfiprintf_internal_r+0x148c>
    88d0:	8880080c 	andi	r2,r17,32
    88d4:	10004826 	beq	r2,zero,89f8 <___vfiprintf_internal_r+0x8e8>
    88d8:	d9002217 	ldw	r4,136(sp)
    88dc:	20800117 	ldw	r2,4(r4)
    88e0:	24c00017 	ldw	r19,0(r4)
    88e4:	21000204 	addi	r4,r4,8
    88e8:	d9002215 	stw	r4,136(sp)
    88ec:	1029883a 	mov	r20,r2
    88f0:	10024c16 	blt	r2,zero,9224 <___vfiprintf_internal_r+0x1114>
    88f4:	dd401d83 	ldbu	r21,118(sp)
    88f8:	80007116 	blt	r16,zero,8ac0 <___vfiprintf_internal_r+0x9b0>
    88fc:	00ffdfc4 	movi	r3,-129
    8900:	9d04b03a 	or	r2,r19,r20
    8904:	88e2703a 	and	r17,r17,r3
    8908:	1000d126 	beq	r2,zero,8c50 <___vfiprintf_internal_r+0xb40>
    890c:	a0023526 	beq	r20,zero,91e4 <___vfiprintf_internal_r+0x10d4>
    8910:	ddc01a04 	addi	r23,sp,104
    8914:	4039883a 	mov	fp,r8
    8918:	9809883a 	mov	r4,r19
    891c:	a00b883a 	mov	r5,r20
    8920:	01800284 	movi	r6,10
    8924:	000f883a 	mov	r7,zero
    8928:	000a63c0 	call	a63c <__umoddi3>
    892c:	10800c04 	addi	r2,r2,48
    8930:	bdffffc4 	addi	r23,r23,-1
    8934:	9809883a 	mov	r4,r19
    8938:	a00b883a 	mov	r5,r20
    893c:	b8800005 	stb	r2,0(r23)
    8940:	01800284 	movi	r6,10
    8944:	000f883a 	mov	r7,zero
    8948:	000a0400 	call	a040 <__udivdi3>
    894c:	1027883a 	mov	r19,r2
    8950:	10c4b03a 	or	r2,r2,r3
    8954:	1829883a 	mov	r20,r3
    8958:	103fef1e 	bne	r2,zero,8918 <__alt_data_end+0xfffbf538>
    895c:	d9001e17 	ldw	r4,120(sp)
    8960:	e011883a 	mov	r8,fp
    8964:	25e9c83a 	sub	r20,r4,r23
    8968:	003eec06 	br	851c <__alt_data_end+0xfffbf13c>
    896c:	d8802307 	ldb	r2,140(sp)
    8970:	1002361e 	bne	r2,zero,924c <___vfiprintf_internal_r+0x113c>
    8974:	00c00804 	movi	r3,32
    8978:	d8c02305 	stb	r3,140(sp)
    897c:	04c00044 	movi	r19,1
    8980:	b0c00007 	ldb	r3,0(r22)
    8984:	003e3f06 	br	8284 <__alt_data_end+0xfffbeea4>
    8988:	8c400054 	ori	r17,r17,1
    898c:	b0c00007 	ldb	r3,0(r22)
    8990:	003e3c06 	br	8284 <__alt_data_end+0xfffbeea4>
    8994:	8c402014 	ori	r17,r17,128
    8998:	b0c00007 	ldb	r3,0(r22)
    899c:	003e3906 	br	8284 <__alt_data_end+0xfffbeea4>
    89a0:	dc002715 	stw	r16,156(sp)
    89a4:	d8002515 	stw	zero,148(sp)
    89a8:	1f3ff404 	addi	fp,r3,-48
    89ac:	0009883a 	mov	r4,zero
    89b0:	b021883a 	mov	r16,r22
    89b4:	01400284 	movi	r5,10
    89b8:	000adb40 	call	adb4 <__mulsi3>
    89bc:	80c00007 	ldb	r3,0(r16)
    89c0:	e089883a 	add	r4,fp,r2
    89c4:	b5800044 	addi	r22,r22,1
    89c8:	1f3ff404 	addi	fp,r3,-48
    89cc:	b021883a 	mov	r16,r22
    89d0:	af3ff82e 	bgeu	r21,fp,89b4 <__alt_data_end+0xfffbf5d4>
    89d4:	d9002515 	stw	r4,148(sp)
    89d8:	dc002717 	ldw	r16,156(sp)
    89dc:	003e2a06 	br	8288 <__alt_data_end+0xfffbeea8>
    89e0:	9cc03fcc 	andi	r19,r19,255
    89e4:	b811883a 	mov	r8,r23
    89e8:	9802e91e 	bne	r19,zero,9590 <___vfiprintf_internal_r+0x1480>
    89ec:	8c400414 	ori	r17,r17,16
    89f0:	8880080c 	andi	r2,r17,32
    89f4:	103fb81e 	bne	r2,zero,88d8 <__alt_data_end+0xfffbf4f8>
    89f8:	8880040c 	andi	r2,r17,16
    89fc:	10022e26 	beq	r2,zero,92b8 <___vfiprintf_internal_r+0x11a8>
    8a00:	d9402217 	ldw	r5,136(sp)
    8a04:	2cc00017 	ldw	r19,0(r5)
    8a08:	29400104 	addi	r5,r5,4
    8a0c:	d9402215 	stw	r5,136(sp)
    8a10:	9829d7fa 	srai	r20,r19,31
    8a14:	a005883a 	mov	r2,r20
    8a18:	003fb506 	br	88f0 <__alt_data_end+0xfffbf510>
    8a1c:	9cc03fcc 	andi	r19,r19,255
    8a20:	b811883a 	mov	r8,r23
    8a24:	9802fa1e 	bne	r19,zero,9610 <___vfiprintf_internal_r+0x1500>
    8a28:	8c400414 	ori	r17,r17,16
    8a2c:	8880080c 	andi	r2,r17,32
    8a30:	103f661e 	bne	r2,zero,87cc <__alt_data_end+0xfffbf3ec>
    8a34:	8880040c 	andi	r2,r17,16
    8a38:	10020626 	beq	r2,zero,9254 <___vfiprintf_internal_r+0x1144>
    8a3c:	d9402217 	ldw	r5,136(sp)
    8a40:	d8001d85 	stb	zero,118(sp)
    8a44:	0029883a 	mov	r20,zero
    8a48:	28800104 	addi	r2,r5,4
    8a4c:	2cc00017 	ldw	r19,0(r5)
    8a50:	80020816 	blt	r16,zero,9274 <___vfiprintf_internal_r+0x1164>
    8a54:	00ffdfc4 	movi	r3,-129
    8a58:	d8802215 	stw	r2,136(sp)
    8a5c:	88e2703a 	and	r17,r17,r3
    8a60:	983f651e 	bne	r19,zero,87f8 <__alt_data_end+0xfffbf418>
    8a64:	002b883a 	mov	r21,zero
    8a68:	8002cf26 	beq	r16,zero,95a8 <___vfiprintf_internal_r+0x1498>
    8a6c:	0027883a 	mov	r19,zero
    8a70:	0029883a 	mov	r20,zero
    8a74:	003f6106 	br	87fc <__alt_data_end+0xfffbf41c>
    8a78:	9cc03fcc 	andi	r19,r19,255
    8a7c:	b811883a 	mov	r8,r23
    8a80:	9802e01e 	bne	r19,zero,9604 <___vfiprintf_internal_r+0x14f4>
    8a84:	8c400414 	ori	r17,r17,16
    8a88:	8880080c 	andi	r2,r17,32
    8a8c:	1000641e 	bne	r2,zero,8c20 <___vfiprintf_internal_r+0xb10>
    8a90:	8880040c 	andi	r2,r17,16
    8a94:	1001c81e 	bne	r2,zero,91b8 <___vfiprintf_internal_r+0x10a8>
    8a98:	8880100c 	andi	r2,r17,64
    8a9c:	d8001d85 	stb	zero,118(sp)
    8aa0:	1002281e 	bne	r2,zero,9344 <___vfiprintf_internal_r+0x1234>
    8aa4:	d9002217 	ldw	r4,136(sp)
    8aa8:	0029883a 	mov	r20,zero
    8aac:	20800104 	addi	r2,r4,4
    8ab0:	24c00017 	ldw	r19,0(r4)
    8ab4:	8001c60e 	bge	r16,zero,91d0 <___vfiprintf_internal_r+0x10c0>
    8ab8:	d8802215 	stw	r2,136(sp)
    8abc:	002b883a 	mov	r21,zero
    8ac0:	9d04b03a 	or	r2,r19,r20
    8ac4:	103f911e 	bne	r2,zero,890c <__alt_data_end+0xfffbf52c>
    8ac8:	00800044 	movi	r2,1
    8acc:	10803fcc 	andi	r2,r2,255
    8ad0:	00c00044 	movi	r3,1
    8ad4:	10c05f26 	beq	r2,r3,8c54 <___vfiprintf_internal_r+0xb44>
    8ad8:	00c00084 	movi	r3,2
    8adc:	10ffe31e 	bne	r2,r3,8a6c <__alt_data_end+0xfffbf68c>
    8ae0:	0027883a 	mov	r19,zero
    8ae4:	0029883a 	mov	r20,zero
    8ae8:	00015106 	br	9030 <___vfiprintf_internal_r+0xf20>
    8aec:	9cc03fcc 	andi	r19,r19,255
    8af0:	b811883a 	mov	r8,r23
    8af4:	9802c01e 	bne	r19,zero,95f8 <___vfiprintf_internal_r+0x14e8>
    8af8:	01400074 	movhi	r5,1
    8afc:	29418704 	addi	r5,r5,1564
    8b00:	d9402615 	stw	r5,152(sp)
    8b04:	8880080c 	andi	r2,r17,32
    8b08:	103f541e 	bne	r2,zero,885c <__alt_data_end+0xfffbf47c>
    8b0c:	8880040c 	andi	r2,r17,16
    8b10:	1001f226 	beq	r2,zero,92dc <___vfiprintf_internal_r+0x11cc>
    8b14:	d9402217 	ldw	r5,136(sp)
    8b18:	0029883a 	mov	r20,zero
    8b1c:	2cc00017 	ldw	r19,0(r5)
    8b20:	29400104 	addi	r5,r5,4
    8b24:	d9402215 	stw	r5,136(sp)
    8b28:	003f5106 	br	8870 <__alt_data_end+0xfffbf490>
    8b2c:	d8c02217 	ldw	r3,136(sp)
    8b30:	b811883a 	mov	r8,r23
    8b34:	d8001d85 	stb	zero,118(sp)
    8b38:	1dc00017 	ldw	r23,0(r3)
    8b3c:	1f000104 	addi	fp,r3,4
    8b40:	b8025926 	beq	r23,zero,94a8 <___vfiprintf_internal_r+0x1398>
    8b44:	80023316 	blt	r16,zero,9414 <___vfiprintf_internal_r+0x1304>
    8b48:	800d883a 	mov	r6,r16
    8b4c:	000b883a 	mov	r5,zero
    8b50:	b809883a 	mov	r4,r23
    8b54:	da002a15 	stw	r8,168(sp)
    8b58:	00060e80 	call	60e8 <memchr>
    8b5c:	da002a17 	ldw	r8,168(sp)
    8b60:	10026826 	beq	r2,zero,9504 <___vfiprintf_internal_r+0x13f4>
    8b64:	15e9c83a 	sub	r20,r2,r23
    8b68:	dd401d83 	ldbu	r21,118(sp)
    8b6c:	df002215 	stw	fp,136(sp)
    8b70:	0021883a 	mov	r16,zero
    8b74:	003e6906 	br	851c <__alt_data_end+0xfffbf13c>
    8b78:	9cc03fcc 	andi	r19,r19,255
    8b7c:	b811883a 	mov	r8,r23
    8b80:	983fc126 	beq	r19,zero,8a88 <__alt_data_end+0xfffbf6a8>
    8b84:	d8c02303 	ldbu	r3,140(sp)
    8b88:	d8c01d85 	stb	r3,118(sp)
    8b8c:	003fbe06 	br	8a88 <__alt_data_end+0xfffbf6a8>
    8b90:	d9002217 	ldw	r4,136(sp)
    8b94:	d9402217 	ldw	r5,136(sp)
    8b98:	21000017 	ldw	r4,0(r4)
    8b9c:	28800104 	addi	r2,r5,4
    8ba0:	d9002515 	stw	r4,148(sp)
    8ba4:	203e3d16 	blt	r4,zero,849c <__alt_data_end+0xfffbf0bc>
    8ba8:	d8802215 	stw	r2,136(sp)
    8bac:	b0c00007 	ldb	r3,0(r22)
    8bb0:	003db406 	br	8284 <__alt_data_end+0xfffbeea4>
    8bb4:	00c00ac4 	movi	r3,43
    8bb8:	d8c02305 	stb	r3,140(sp)
    8bbc:	04c00044 	movi	r19,1
    8bc0:	b0c00007 	ldb	r3,0(r22)
    8bc4:	003daf06 	br	8284 <__alt_data_end+0xfffbeea4>
    8bc8:	b0c00007 	ldb	r3,0(r22)
    8bcc:	01000a84 	movi	r4,42
    8bd0:	b4000044 	addi	r16,r22,1
    8bd4:	19025e26 	beq	r3,r4,9550 <___vfiprintf_internal_r+0x1440>
    8bd8:	1f3ff404 	addi	fp,r3,-48
    8bdc:	0009883a 	mov	r4,zero
    8be0:	af025236 	bltu	r21,fp,952c <___vfiprintf_internal_r+0x141c>
    8be4:	01400284 	movi	r5,10
    8be8:	000adb40 	call	adb4 <__mulsi3>
    8bec:	80c00007 	ldb	r3,0(r16)
    8bf0:	1709883a 	add	r4,r2,fp
    8bf4:	85800044 	addi	r22,r16,1
    8bf8:	1f3ff404 	addi	fp,r3,-48
    8bfc:	b021883a 	mov	r16,r22
    8c00:	af3ff82e 	bgeu	r21,fp,8be4 <__alt_data_end+0xfffbf804>
    8c04:	2021883a 	mov	r16,r4
    8c08:	203d9f0e 	bge	r4,zero,8288 <__alt_data_end+0xfffbeea8>
    8c0c:	043fffc4 	movi	r16,-1
    8c10:	003d9d06 	br	8288 <__alt_data_end+0xfffbeea8>
    8c14:	8c401014 	ori	r17,r17,64
    8c18:	b0c00007 	ldb	r3,0(r22)
    8c1c:	003d9906 	br	8284 <__alt_data_end+0xfffbeea4>
    8c20:	d9002217 	ldw	r4,136(sp)
    8c24:	d8001d85 	stb	zero,118(sp)
    8c28:	20c00204 	addi	r3,r4,8
    8c2c:	24c00017 	ldw	r19,0(r4)
    8c30:	25000117 	ldw	r20,4(r4)
    8c34:	8001e716 	blt	r16,zero,93d4 <___vfiprintf_internal_r+0x12c4>
    8c38:	013fdfc4 	movi	r4,-129
    8c3c:	9d04b03a 	or	r2,r19,r20
    8c40:	d8c02215 	stw	r3,136(sp)
    8c44:	8922703a 	and	r17,r17,r4
    8c48:	002b883a 	mov	r21,zero
    8c4c:	103f2f1e 	bne	r2,zero,890c <__alt_data_end+0xfffbf52c>
    8c50:	803e2f26 	beq	r16,zero,8510 <__alt_data_end+0xfffbf130>
    8c54:	0027883a 	mov	r19,zero
    8c58:	9cc00c04 	addi	r19,r19,48
    8c5c:	dcc019c5 	stb	r19,103(sp)
    8c60:	dd002817 	ldw	r20,160(sp)
    8c64:	ddc019c4 	addi	r23,sp,103
    8c68:	003e2c06 	br	851c <__alt_data_end+0xfffbf13c>
    8c6c:	9cc03fcc 	andi	r19,r19,255
    8c70:	b811883a 	mov	r8,r23
    8c74:	9802571e 	bne	r19,zero,95d4 <___vfiprintf_internal_r+0x14c4>
    8c78:	18005726 	beq	r3,zero,8dd8 <___vfiprintf_internal_r+0xcc8>
    8c7c:	04c00044 	movi	r19,1
    8c80:	d8c01005 	stb	r3,64(sp)
    8c84:	d8001d85 	stb	zero,118(sp)
    8c88:	9829883a 	mov	r20,r19
    8c8c:	ddc01004 	addi	r23,sp,64
    8c90:	003f0a06 	br	88bc <__alt_data_end+0xfffbf4dc>
    8c94:	d9402017 	ldw	r5,128(sp)
    8c98:	d9002117 	ldw	r4,132(sp)
    8c9c:	d9801a04 	addi	r6,sp,104
    8ca0:	da802a15 	stw	r10,168(sp)
    8ca4:	0007ffc0 	call	7ffc <__sprint_r.part.0>
    8ca8:	da802a17 	ldw	r10,168(sp)
    8cac:	1000501e 	bne	r2,zero,8df0 <___vfiprintf_internal_r+0xce0>
    8cb0:	d9801b17 	ldw	r6,108(sp)
    8cb4:	d8801c17 	ldw	r2,112(sp)
    8cb8:	d811883a 	mov	r8,sp
    8cbc:	31000044 	addi	r4,r6,1
    8cc0:	003e3606 	br	859c <__alt_data_end+0xfffbf1bc>
    8cc4:	d9001b17 	ldw	r4,108(sp)
    8cc8:	d8801c17 	ldw	r2,112(sp)
    8ccc:	21400044 	addi	r5,r4,1
    8cd0:	d9801d87 	ldb	r6,118(sp)
    8cd4:	303e5226 	beq	r6,zero,8620 <__alt_data_end+0xfffbf240>
    8cd8:	01800044 	movi	r6,1
    8cdc:	d9001d84 	addi	r4,sp,118
    8ce0:	1185883a 	add	r2,r2,r6
    8ce4:	41000015 	stw	r4,0(r8)
    8ce8:	41800115 	stw	r6,4(r8)
    8cec:	d8801c15 	stw	r2,112(sp)
    8cf0:	d9401b15 	stw	r5,108(sp)
    8cf4:	010001c4 	movi	r4,7
    8cf8:	2140b00e 	bge	r4,r5,8fbc <___vfiprintf_internal_r+0xeac>
    8cfc:	1000f61e 	bne	r2,zero,90d8 <___vfiprintf_internal_r+0xfc8>
    8d00:	3800b31e 	bne	r7,zero,8fd0 <___vfiprintf_internal_r+0xec0>
    8d04:	0009883a 	mov	r4,zero
    8d08:	300b883a 	mov	r5,r6
    8d0c:	d811883a 	mov	r8,sp
    8d10:	01802004 	movi	r6,128
    8d14:	19be5226 	beq	r3,r6,8660 <__alt_data_end+0xfffbf280>
    8d18:	8521c83a 	sub	r16,r16,r20
    8d1c:	043e790e 	bge	zero,r16,8704 <__alt_data_end+0xfffbf324>
    8d20:	05400404 	movi	r21,16
    8d24:	ac01b00e 	bge	r21,r16,93e8 <___vfiprintf_internal_r+0x12d8>
    8d28:	01400074 	movhi	r5,1
    8d2c:	2941ed04 	addi	r5,r5,1972
    8d30:	d9402315 	stw	r5,140(sp)
    8d34:	070001c4 	movi	fp,7
    8d38:	00000506 	br	8d50 <___vfiprintf_internal_r+0xc40>
    8d3c:	21400084 	addi	r5,r4,2
    8d40:	42000204 	addi	r8,r8,8
    8d44:	1809883a 	mov	r4,r3
    8d48:	843ffc04 	addi	r16,r16,-16
    8d4c:	ac000d0e 	bge	r21,r16,8d84 <___vfiprintf_internal_r+0xc74>
    8d50:	10800404 	addi	r2,r2,16
    8d54:	20c00044 	addi	r3,r4,1
    8d58:	44800015 	stw	r18,0(r8)
    8d5c:	45400115 	stw	r21,4(r8)
    8d60:	d8801c15 	stw	r2,112(sp)
    8d64:	d8c01b15 	stw	r3,108(sp)
    8d68:	e0fff40e 	bge	fp,r3,8d3c <__alt_data_end+0xfffbf95c>
    8d6c:	1000101e 	bne	r2,zero,8db0 <___vfiprintf_internal_r+0xca0>
    8d70:	843ffc04 	addi	r16,r16,-16
    8d74:	01400044 	movi	r5,1
    8d78:	0009883a 	mov	r4,zero
    8d7c:	d811883a 	mov	r8,sp
    8d80:	ac3ff316 	blt	r21,r16,8d50 <__alt_data_end+0xfffbf970>
    8d84:	d8c02317 	ldw	r3,140(sp)
    8d88:	1405883a 	add	r2,r2,r16
    8d8c:	44000115 	stw	r16,4(r8)
    8d90:	40c00015 	stw	r3,0(r8)
    8d94:	d8801c15 	stw	r2,112(sp)
    8d98:	d9401b15 	stw	r5,108(sp)
    8d9c:	00c001c4 	movi	r3,7
    8da0:	19401916 	blt	r3,r5,8e08 <___vfiprintf_internal_r+0xcf8>
    8da4:	42000204 	addi	r8,r8,8
    8da8:	29400044 	addi	r5,r5,1
    8dac:	003e5506 	br	8704 <__alt_data_end+0xfffbf324>
    8db0:	d9402017 	ldw	r5,128(sp)
    8db4:	d9002117 	ldw	r4,132(sp)
    8db8:	d9801a04 	addi	r6,sp,104
    8dbc:	0007ffc0 	call	7ffc <__sprint_r.part.0>
    8dc0:	10000b1e 	bne	r2,zero,8df0 <___vfiprintf_internal_r+0xce0>
    8dc4:	d9001b17 	ldw	r4,108(sp)
    8dc8:	d8801c17 	ldw	r2,112(sp)
    8dcc:	d811883a 	mov	r8,sp
    8dd0:	21400044 	addi	r5,r4,1
    8dd4:	003fdc06 	br	8d48 <__alt_data_end+0xfffbf968>
    8dd8:	d8801c17 	ldw	r2,112(sp)
    8ddc:	10000426 	beq	r2,zero,8df0 <___vfiprintf_internal_r+0xce0>
    8de0:	d9402017 	ldw	r5,128(sp)
    8de4:	d9002117 	ldw	r4,132(sp)
    8de8:	d9801a04 	addi	r6,sp,104
    8dec:	0007ffc0 	call	7ffc <__sprint_r.part.0>
    8df0:	d9402017 	ldw	r5,128(sp)
    8df4:	2880030b 	ldhu	r2,12(r5)
    8df8:	1080100c 	andi	r2,r2,64
    8dfc:	10014d1e 	bne	r2,zero,9334 <___vfiprintf_internal_r+0x1224>
    8e00:	d8802417 	ldw	r2,144(sp)
    8e04:	003d9706 	br	8464 <__alt_data_end+0xfffbf084>
    8e08:	1000d21e 	bne	r2,zero,9154 <___vfiprintf_internal_r+0x1044>
    8e0c:	00c00044 	movi	r3,1
    8e10:	a005883a 	mov	r2,r20
    8e14:	ddc00015 	stw	r23,0(sp)
    8e18:	dd000115 	stw	r20,4(sp)
    8e1c:	dd001c15 	stw	r20,112(sp)
    8e20:	d8c01b15 	stw	r3,108(sp)
    8e24:	d811883a 	mov	r8,sp
    8e28:	42000204 	addi	r8,r8,8
    8e2c:	8c40010c 	andi	r17,r17,4
    8e30:	88004026 	beq	r17,zero,8f34 <___vfiprintf_internal_r+0xe24>
    8e34:	d9002517 	ldw	r4,148(sp)
    8e38:	24e3c83a 	sub	r17,r4,r19
    8e3c:	04403d0e 	bge	zero,r17,8f34 <___vfiprintf_internal_r+0xe24>
    8e40:	04000404 	movi	r16,16
    8e44:	8441a90e 	bge	r16,r17,94ec <___vfiprintf_internal_r+0x13dc>
    8e48:	00c00074 	movhi	r3,1
    8e4c:	18c1f104 	addi	r3,r3,1988
    8e50:	d9001b17 	ldw	r4,108(sp)
    8e54:	d8c02315 	stw	r3,140(sp)
    8e58:	050001c4 	movi	r20,7
    8e5c:	dd402117 	ldw	r21,132(sp)
    8e60:	ddc02017 	ldw	r23,128(sp)
    8e64:	00000506 	br	8e7c <___vfiprintf_internal_r+0xd6c>
    8e68:	21400084 	addi	r5,r4,2
    8e6c:	42000204 	addi	r8,r8,8
    8e70:	1809883a 	mov	r4,r3
    8e74:	8c7ffc04 	addi	r17,r17,-16
    8e78:	84400f0e 	bge	r16,r17,8eb8 <___vfiprintf_internal_r+0xda8>
    8e7c:	01400074 	movhi	r5,1
    8e80:	10800404 	addi	r2,r2,16
    8e84:	20c00044 	addi	r3,r4,1
    8e88:	2941f104 	addi	r5,r5,1988
    8e8c:	41400015 	stw	r5,0(r8)
    8e90:	44000115 	stw	r16,4(r8)
    8e94:	d8801c15 	stw	r2,112(sp)
    8e98:	d8c01b15 	stw	r3,108(sp)
    8e9c:	a0fff20e 	bge	r20,r3,8e68 <__alt_data_end+0xfffbfa88>
    8ea0:	1000141e 	bne	r2,zero,8ef4 <___vfiprintf_internal_r+0xde4>
    8ea4:	8c7ffc04 	addi	r17,r17,-16
    8ea8:	01400044 	movi	r5,1
    8eac:	0009883a 	mov	r4,zero
    8eb0:	d811883a 	mov	r8,sp
    8eb4:	847ff116 	blt	r16,r17,8e7c <__alt_data_end+0xfffbfa9c>
    8eb8:	d8c02317 	ldw	r3,140(sp)
    8ebc:	1445883a 	add	r2,r2,r17
    8ec0:	44400115 	stw	r17,4(r8)
    8ec4:	40c00015 	stw	r3,0(r8)
    8ec8:	d8801c15 	stw	r2,112(sp)
    8ecc:	d9401b15 	stw	r5,108(sp)
    8ed0:	00c001c4 	movi	r3,7
    8ed4:	1940170e 	bge	r3,r5,8f34 <___vfiprintf_internal_r+0xe24>
    8ed8:	1000101e 	bne	r2,zero,8f1c <___vfiprintf_internal_r+0xe0c>
    8edc:	d8802517 	ldw	r2,148(sp)
    8ee0:	14c11616 	blt	r2,r19,933c <___vfiprintf_internal_r+0x122c>
    8ee4:	d9002417 	ldw	r4,144(sp)
    8ee8:	2089883a 	add	r4,r4,r2
    8eec:	d9002415 	stw	r4,144(sp)
    8ef0:	003e1806 	br	8754 <__alt_data_end+0xfffbf374>
    8ef4:	d9801a04 	addi	r6,sp,104
    8ef8:	b80b883a 	mov	r5,r23
    8efc:	a809883a 	mov	r4,r21
    8f00:	0007ffc0 	call	7ffc <__sprint_r.part.0>
    8f04:	103fba1e 	bne	r2,zero,8df0 <__alt_data_end+0xfffbfa10>
    8f08:	d9001b17 	ldw	r4,108(sp)
    8f0c:	d8801c17 	ldw	r2,112(sp)
    8f10:	d811883a 	mov	r8,sp
    8f14:	21400044 	addi	r5,r4,1
    8f18:	003fd606 	br	8e74 <__alt_data_end+0xfffbfa94>
    8f1c:	d9402017 	ldw	r5,128(sp)
    8f20:	d9002117 	ldw	r4,132(sp)
    8f24:	d9801a04 	addi	r6,sp,104
    8f28:	0007ffc0 	call	7ffc <__sprint_r.part.0>
    8f2c:	103fb01e 	bne	r2,zero,8df0 <__alt_data_end+0xfffbfa10>
    8f30:	d8801c17 	ldw	r2,112(sp)
    8f34:	d8c02517 	ldw	r3,148(sp)
    8f38:	1cc0010e 	bge	r3,r19,8f40 <___vfiprintf_internal_r+0xe30>
    8f3c:	9807883a 	mov	r3,r19
    8f40:	d9002417 	ldw	r4,144(sp)
    8f44:	20c9883a 	add	r4,r4,r3
    8f48:	d9002415 	stw	r4,144(sp)
    8f4c:	103e0126 	beq	r2,zero,8754 <__alt_data_end+0xfffbf374>
    8f50:	d9402017 	ldw	r5,128(sp)
    8f54:	d9002117 	ldw	r4,132(sp)
    8f58:	d9801a04 	addi	r6,sp,104
    8f5c:	0007ffc0 	call	7ffc <__sprint_r.part.0>
    8f60:	103dfc26 	beq	r2,zero,8754 <__alt_data_end+0xfffbf374>
    8f64:	003fa206 	br	8df0 <__alt_data_end+0xfffbfa10>
    8f68:	d9402017 	ldw	r5,128(sp)
    8f6c:	d9002117 	ldw	r4,132(sp)
    8f70:	d9801a04 	addi	r6,sp,104
    8f74:	d9c02b15 	stw	r7,172(sp)
    8f78:	0007ffc0 	call	7ffc <__sprint_r.part.0>
    8f7c:	d9c02b17 	ldw	r7,172(sp)
    8f80:	103f9b1e 	bne	r2,zero,8df0 <__alt_data_end+0xfffbfa10>
    8f84:	d9001b17 	ldw	r4,108(sp)
    8f88:	d8801c17 	ldw	r2,112(sp)
    8f8c:	d811883a 	mov	r8,sp
    8f90:	21800044 	addi	r6,r4,1
    8f94:	003dbf06 	br	8694 <__alt_data_end+0xfffbf2b4>
    8f98:	1000d81e 	bne	r2,zero,92fc <___vfiprintf_internal_r+0x11ec>
    8f9c:	d9001d87 	ldb	r4,118(sp)
    8fa0:	20000a26 	beq	r4,zero,8fcc <___vfiprintf_internal_r+0xebc>
    8fa4:	00800044 	movi	r2,1
    8fa8:	d9001d84 	addi	r4,sp,118
    8fac:	100b883a 	mov	r5,r2
    8fb0:	d9000015 	stw	r4,0(sp)
    8fb4:	d8800115 	stw	r2,4(sp)
    8fb8:	d811883a 	mov	r8,sp
    8fbc:	2809883a 	mov	r4,r5
    8fc0:	42000204 	addi	r8,r8,8
    8fc4:	29400044 	addi	r5,r5,1
    8fc8:	003d9506 	br	8620 <__alt_data_end+0xfffbf240>
    8fcc:	3800fd26 	beq	r7,zero,93c4 <___vfiprintf_internal_r+0x12b4>
    8fd0:	00800084 	movi	r2,2
    8fd4:	d9001d04 	addi	r4,sp,116
    8fd8:	d9000015 	stw	r4,0(sp)
    8fdc:	d8800115 	stw	r2,4(sp)
    8fe0:	01400044 	movi	r5,1
    8fe4:	d811883a 	mov	r8,sp
    8fe8:	2809883a 	mov	r4,r5
    8fec:	42000204 	addi	r8,r8,8
    8ff0:	29400044 	addi	r5,r5,1
    8ff4:	003f4606 	br	8d10 <__alt_data_end+0xfffbf930>
    8ff8:	d8802517 	ldw	r2,148(sp)
    8ffc:	14c0010e 	bge	r2,r19,9004 <___vfiprintf_internal_r+0xef4>
    9000:	9805883a 	mov	r2,r19
    9004:	d9402417 	ldw	r5,144(sp)
    9008:	288b883a 	add	r5,r5,r2
    900c:	d9402415 	stw	r5,144(sp)
    9010:	003dd006 	br	8754 <__alt_data_end+0xfffbf374>
    9014:	d8001d85 	stb	zero,118(sp)
    9018:	80005d16 	blt	r16,zero,9190 <___vfiprintf_internal_r+0x1080>
    901c:	00ffdfc4 	movi	r3,-129
    9020:	9d04b03a 	or	r2,r19,r20
    9024:	88e2703a 	and	r17,r17,r3
    9028:	103d3726 	beq	r2,zero,8508 <__alt_data_end+0xfffbf128>
    902c:	002b883a 	mov	r21,zero
    9030:	d9002617 	ldw	r4,152(sp)
    9034:	ddc01a04 	addi	r23,sp,104
    9038:	988003cc 	andi	r2,r19,15
    903c:	a006973a 	slli	r3,r20,28
    9040:	2085883a 	add	r2,r4,r2
    9044:	9826d13a 	srli	r19,r19,4
    9048:	10800003 	ldbu	r2,0(r2)
    904c:	a028d13a 	srli	r20,r20,4
    9050:	bdffffc4 	addi	r23,r23,-1
    9054:	1ce6b03a 	or	r19,r3,r19
    9058:	b8800005 	stb	r2,0(r23)
    905c:	9d04b03a 	or	r2,r19,r20
    9060:	103ff51e 	bne	r2,zero,9038 <__alt_data_end+0xfffbfc58>
    9064:	d8801e17 	ldw	r2,120(sp)
    9068:	15e9c83a 	sub	r20,r2,r23
    906c:	003d2b06 	br	851c <__alt_data_end+0xfffbf13c>
    9070:	d9402017 	ldw	r5,128(sp)
    9074:	d9002117 	ldw	r4,132(sp)
    9078:	d9801a04 	addi	r6,sp,104
    907c:	0007ffc0 	call	7ffc <__sprint_r.part.0>
    9080:	103f5b1e 	bne	r2,zero,8df0 <__alt_data_end+0xfffbfa10>
    9084:	d8801c17 	ldw	r2,112(sp)
    9088:	d811883a 	mov	r8,sp
    908c:	003f6706 	br	8e2c <__alt_data_end+0xfffbfa4c>
    9090:	d9402017 	ldw	r5,128(sp)
    9094:	d9002117 	ldw	r4,132(sp)
    9098:	d9801a04 	addi	r6,sp,104
    909c:	0007ffc0 	call	7ffc <__sprint_r.part.0>
    90a0:	103f531e 	bne	r2,zero,8df0 <__alt_data_end+0xfffbfa10>
    90a4:	d811883a 	mov	r8,sp
    90a8:	003cd906 	br	8410 <__alt_data_end+0xfffbf030>
    90ac:	10803fcc 	andi	r2,r2,255
    90b0:	1080201c 	xori	r2,r2,128
    90b4:	10bfe004 	addi	r2,r2,-128
    90b8:	00c00c04 	movi	r3,48
    90bc:	10ffe926 	beq	r2,r3,9064 <__alt_data_end+0xfffbfc84>
    90c0:	b8ffffc5 	stb	r3,-1(r23)
    90c4:	d8c01e17 	ldw	r3,120(sp)
    90c8:	b8bfffc4 	addi	r2,r23,-1
    90cc:	102f883a 	mov	r23,r2
    90d0:	18a9c83a 	sub	r20,r3,r2
    90d4:	003d1106 	br	851c <__alt_data_end+0xfffbf13c>
    90d8:	d9402017 	ldw	r5,128(sp)
    90dc:	d9002117 	ldw	r4,132(sp)
    90e0:	d9801a04 	addi	r6,sp,104
    90e4:	d8c02a15 	stw	r3,168(sp)
    90e8:	d9c02b15 	stw	r7,172(sp)
    90ec:	0007ffc0 	call	7ffc <__sprint_r.part.0>
    90f0:	d8c02a17 	ldw	r3,168(sp)
    90f4:	d9c02b17 	ldw	r7,172(sp)
    90f8:	103f3d1e 	bne	r2,zero,8df0 <__alt_data_end+0xfffbfa10>
    90fc:	d9001b17 	ldw	r4,108(sp)
    9100:	d8801c17 	ldw	r2,112(sp)
    9104:	d811883a 	mov	r8,sp
    9108:	21400044 	addi	r5,r4,1
    910c:	003d4406 	br	8620 <__alt_data_end+0xfffbf240>
    9110:	d9402017 	ldw	r5,128(sp)
    9114:	d9002117 	ldw	r4,132(sp)
    9118:	d9801a04 	addi	r6,sp,104
    911c:	d8c02a15 	stw	r3,168(sp)
    9120:	0007ffc0 	call	7ffc <__sprint_r.part.0>
    9124:	d8c02a17 	ldw	r3,168(sp)
    9128:	103f311e 	bne	r2,zero,8df0 <__alt_data_end+0xfffbfa10>
    912c:	d9001b17 	ldw	r4,108(sp)
    9130:	d8801c17 	ldw	r2,112(sp)
    9134:	d811883a 	mov	r8,sp
    9138:	21400044 	addi	r5,r4,1
    913c:	003ef406 	br	8d10 <__alt_data_end+0xfffbf930>
    9140:	1000bd1e 	bne	r2,zero,9438 <___vfiprintf_internal_r+0x1328>
    9144:	01400044 	movi	r5,1
    9148:	0009883a 	mov	r4,zero
    914c:	d811883a 	mov	r8,sp
    9150:	003ef106 	br	8d18 <__alt_data_end+0xfffbf938>
    9154:	d9402017 	ldw	r5,128(sp)
    9158:	d9002117 	ldw	r4,132(sp)
    915c:	d9801a04 	addi	r6,sp,104
    9160:	0007ffc0 	call	7ffc <__sprint_r.part.0>
    9164:	103f221e 	bne	r2,zero,8df0 <__alt_data_end+0xfffbfa10>
    9168:	d9401b17 	ldw	r5,108(sp)
    916c:	d8801c17 	ldw	r2,112(sp)
    9170:	d811883a 	mov	r8,sp
    9174:	29400044 	addi	r5,r5,1
    9178:	003d6206 	br	8704 <__alt_data_end+0xfffbf324>
    917c:	01400074 	movhi	r5,1
    9180:	29418c04 	addi	r5,r5,1584
    9184:	d9402615 	stw	r5,152(sp)
    9188:	d8c02215 	stw	r3,136(sp)
    918c:	1023883a 	mov	r17,r2
    9190:	9d04b03a 	or	r2,r19,r20
    9194:	103fa51e 	bne	r2,zero,902c <__alt_data_end+0xfffbfc4c>
    9198:	002b883a 	mov	r21,zero
    919c:	00800084 	movi	r2,2
    91a0:	003e4a06 	br	8acc <__alt_data_end+0xfffbf6ec>
    91a4:	01400074 	movhi	r5,1
    91a8:	29418c04 	addi	r5,r5,1584
    91ac:	002b883a 	mov	r21,zero
    91b0:	d9402615 	stw	r5,152(sp)
    91b4:	003f9e06 	br	9030 <__alt_data_end+0xfffbfc50>
    91b8:	d9402217 	ldw	r5,136(sp)
    91bc:	d8001d85 	stb	zero,118(sp)
    91c0:	0029883a 	mov	r20,zero
    91c4:	28800104 	addi	r2,r5,4
    91c8:	2cc00017 	ldw	r19,0(r5)
    91cc:	803e3a16 	blt	r16,zero,8ab8 <__alt_data_end+0xfffbf6d8>
    91d0:	00ffdfc4 	movi	r3,-129
    91d4:	d8802215 	stw	r2,136(sp)
    91d8:	88e2703a 	and	r17,r17,r3
    91dc:	002b883a 	mov	r21,zero
    91e0:	983e9b26 	beq	r19,zero,8c50 <__alt_data_end+0xfffbf870>
    91e4:	00800244 	movi	r2,9
    91e8:	14fdc936 	bltu	r2,r19,8910 <__alt_data_end+0xfffbf530>
    91ec:	003e9a06 	br	8c58 <__alt_data_end+0xfffbf878>
    91f0:	00800c04 	movi	r2,48
    91f4:	d8c01d45 	stb	r3,117(sp)
    91f8:	d8801d05 	stb	r2,116(sp)
    91fc:	d8001d85 	stb	zero,118(sp)
    9200:	88c00094 	ori	r3,r17,2
    9204:	80009c16 	blt	r16,zero,9478 <___vfiprintf_internal_r+0x1368>
    9208:	00bfdfc4 	movi	r2,-129
    920c:	88a2703a 	and	r17,r17,r2
    9210:	8c400094 	ori	r17,r17,2
    9214:	002b883a 	mov	r21,zero
    9218:	003f8506 	br	9030 <__alt_data_end+0xfffbfc50>
    921c:	b029883a 	mov	r20,r22
    9220:	003c0b06 	br	8250 <__alt_data_end+0xfffbee70>
    9224:	04e7c83a 	sub	r19,zero,r19
    9228:	05400b44 	movi	r21,45
    922c:	9804c03a 	cmpne	r2,r19,zero
    9230:	0529c83a 	sub	r20,zero,r20
    9234:	dd401d85 	stb	r21,118(sp)
    9238:	a0a9c83a 	sub	r20,r20,r2
    923c:	80009716 	blt	r16,zero,949c <___vfiprintf_internal_r+0x138c>
    9240:	00bfdfc4 	movi	r2,-129
    9244:	88a2703a 	and	r17,r17,r2
    9248:	003db006 	br	890c <__alt_data_end+0xfffbf52c>
    924c:	b0c00007 	ldb	r3,0(r22)
    9250:	003c0c06 	br	8284 <__alt_data_end+0xfffbeea4>
    9254:	8880100c 	andi	r2,r17,64
    9258:	d8001d85 	stb	zero,118(sp)
    925c:	1000461e 	bne	r2,zero,9378 <___vfiprintf_internal_r+0x1268>
    9260:	d9002217 	ldw	r4,136(sp)
    9264:	0029883a 	mov	r20,zero
    9268:	20800104 	addi	r2,r4,4
    926c:	24c00017 	ldw	r19,0(r4)
    9270:	803df80e 	bge	r16,zero,8a54 <__alt_data_end+0xfffbf674>
    9274:	9d06b03a 	or	r3,r19,r20
    9278:	d8802215 	stw	r2,136(sp)
    927c:	183d5e1e 	bne	r3,zero,87f8 <__alt_data_end+0xfffbf418>
    9280:	002b883a 	mov	r21,zero
    9284:	0005883a 	mov	r2,zero
    9288:	003e1006 	br	8acc <__alt_data_end+0xfffbf6ec>
    928c:	8880040c 	andi	r2,r17,16
    9290:	1000321e 	bne	r2,zero,935c <___vfiprintf_internal_r+0x124c>
    9294:	8c40100c 	andi	r17,r17,64
    9298:	88008d26 	beq	r17,zero,94d0 <___vfiprintf_internal_r+0x13c0>
    929c:	d9402217 	ldw	r5,136(sp)
    92a0:	d8c02417 	ldw	r3,144(sp)
    92a4:	28800017 	ldw	r2,0(r5)
    92a8:	29400104 	addi	r5,r5,4
    92ac:	d9402215 	stw	r5,136(sp)
    92b0:	10c0000d 	sth	r3,0(r2)
    92b4:	003bca06 	br	81e0 <__alt_data_end+0xfffbee00>
    92b8:	8880100c 	andi	r2,r17,64
    92bc:	10003a26 	beq	r2,zero,93a8 <___vfiprintf_internal_r+0x1298>
    92c0:	d8802217 	ldw	r2,136(sp)
    92c4:	14c0000f 	ldh	r19,0(r2)
    92c8:	10800104 	addi	r2,r2,4
    92cc:	d8802215 	stw	r2,136(sp)
    92d0:	9829d7fa 	srai	r20,r19,31
    92d4:	a005883a 	mov	r2,r20
    92d8:	003d8506 	br	88f0 <__alt_data_end+0xfffbf510>
    92dc:	8880100c 	andi	r2,r17,64
    92e0:	10002b26 	beq	r2,zero,9390 <___vfiprintf_internal_r+0x1280>
    92e4:	d8802217 	ldw	r2,136(sp)
    92e8:	0029883a 	mov	r20,zero
    92ec:	14c0000b 	ldhu	r19,0(r2)
    92f0:	10800104 	addi	r2,r2,4
    92f4:	d8802215 	stw	r2,136(sp)
    92f8:	003d5d06 	br	8870 <__alt_data_end+0xfffbf490>
    92fc:	d9402017 	ldw	r5,128(sp)
    9300:	d9002117 	ldw	r4,132(sp)
    9304:	d9801a04 	addi	r6,sp,104
    9308:	d8c02a15 	stw	r3,168(sp)
    930c:	d9c02b15 	stw	r7,172(sp)
    9310:	0007ffc0 	call	7ffc <__sprint_r.part.0>
    9314:	d8c02a17 	ldw	r3,168(sp)
    9318:	d9c02b17 	ldw	r7,172(sp)
    931c:	103eb41e 	bne	r2,zero,8df0 <__alt_data_end+0xfffbfa10>
    9320:	d9001b17 	ldw	r4,108(sp)
    9324:	d8801c17 	ldw	r2,112(sp)
    9328:	d811883a 	mov	r8,sp
    932c:	21400044 	addi	r5,r4,1
    9330:	003e6706 	br	8cd0 <__alt_data_end+0xfffbf8f0>
    9334:	00bfffc4 	movi	r2,-1
    9338:	003c4a06 	br	8464 <__alt_data_end+0xfffbf084>
    933c:	9805883a 	mov	r2,r19
    9340:	003ee806 	br	8ee4 <__alt_data_end+0xfffbfb04>
    9344:	d8c02217 	ldw	r3,136(sp)
    9348:	0029883a 	mov	r20,zero
    934c:	18800104 	addi	r2,r3,4
    9350:	1cc0000b 	ldhu	r19,0(r3)
    9354:	803f9e0e 	bge	r16,zero,91d0 <__alt_data_end+0xfffbfdf0>
    9358:	003dd706 	br	8ab8 <__alt_data_end+0xfffbf6d8>
    935c:	d8c02217 	ldw	r3,136(sp)
    9360:	d9002417 	ldw	r4,144(sp)
    9364:	18800017 	ldw	r2,0(r3)
    9368:	18c00104 	addi	r3,r3,4
    936c:	d8c02215 	stw	r3,136(sp)
    9370:	11000015 	stw	r4,0(r2)
    9374:	003b9a06 	br	81e0 <__alt_data_end+0xfffbee00>
    9378:	d8c02217 	ldw	r3,136(sp)
    937c:	0029883a 	mov	r20,zero
    9380:	18800104 	addi	r2,r3,4
    9384:	1cc0000b 	ldhu	r19,0(r3)
    9388:	803db20e 	bge	r16,zero,8a54 <__alt_data_end+0xfffbf674>
    938c:	003fb906 	br	9274 <__alt_data_end+0xfffbfe94>
    9390:	d9002217 	ldw	r4,136(sp)
    9394:	0029883a 	mov	r20,zero
    9398:	24c00017 	ldw	r19,0(r4)
    939c:	21000104 	addi	r4,r4,4
    93a0:	d9002215 	stw	r4,136(sp)
    93a4:	003d3206 	br	8870 <__alt_data_end+0xfffbf490>
    93a8:	d8c02217 	ldw	r3,136(sp)
    93ac:	1cc00017 	ldw	r19,0(r3)
    93b0:	18c00104 	addi	r3,r3,4
    93b4:	d8c02215 	stw	r3,136(sp)
    93b8:	9829d7fa 	srai	r20,r19,31
    93bc:	a005883a 	mov	r2,r20
    93c0:	003d4b06 	br	88f0 <__alt_data_end+0xfffbf510>
    93c4:	0009883a 	mov	r4,zero
    93c8:	01400044 	movi	r5,1
    93cc:	d811883a 	mov	r8,sp
    93d0:	003e4f06 	br	8d10 <__alt_data_end+0xfffbf930>
    93d4:	d8c02215 	stw	r3,136(sp)
    93d8:	002b883a 	mov	r21,zero
    93dc:	003db806 	br	8ac0 <__alt_data_end+0xfffbf6e0>
    93e0:	d811883a 	mov	r8,sp
    93e4:	003e9606 	br	8e40 <__alt_data_end+0xfffbfa60>
    93e8:	01000074 	movhi	r4,1
    93ec:	2101ed04 	addi	r4,r4,1972
    93f0:	d9002315 	stw	r4,140(sp)
    93f4:	003e6306 	br	8d84 <__alt_data_end+0xfffbf9a4>
    93f8:	b0c00043 	ldbu	r3,1(r22)
    93fc:	8c400814 	ori	r17,r17,32
    9400:	b5800044 	addi	r22,r22,1
    9404:	18c03fcc 	andi	r3,r3,255
    9408:	18c0201c 	xori	r3,r3,128
    940c:	18ffe004 	addi	r3,r3,-128
    9410:	003b9c06 	br	8284 <__alt_data_end+0xfffbeea4>
    9414:	b809883a 	mov	r4,r23
    9418:	da002a15 	stw	r8,168(sp)
    941c:	00007180 	call	718 <strlen>
    9420:	1029883a 	mov	r20,r2
    9424:	dd401d83 	ldbu	r21,118(sp)
    9428:	df002215 	stw	fp,136(sp)
    942c:	0021883a 	mov	r16,zero
    9430:	da002a17 	ldw	r8,168(sp)
    9434:	003c3906 	br	851c <__alt_data_end+0xfffbf13c>
    9438:	d9402017 	ldw	r5,128(sp)
    943c:	d9002117 	ldw	r4,132(sp)
    9440:	d9801a04 	addi	r6,sp,104
    9444:	0007ffc0 	call	7ffc <__sprint_r.part.0>
    9448:	103e691e 	bne	r2,zero,8df0 <__alt_data_end+0xfffbfa10>
    944c:	d9001b17 	ldw	r4,108(sp)
    9450:	d8801c17 	ldw	r2,112(sp)
    9454:	d811883a 	mov	r8,sp
    9458:	21400044 	addi	r5,r4,1
    945c:	003e2e06 	br	8d18 <__alt_data_end+0xfffbf938>
    9460:	01000074 	movhi	r4,1
    9464:	2101f104 	addi	r4,r4,1988
    9468:	d9002315 	stw	r4,140(sp)
    946c:	d9001b17 	ldw	r4,108(sp)
    9470:	21000044 	addi	r4,r4,1
    9474:	003c5e06 	br	85f0 <__alt_data_end+0xfffbf210>
    9478:	002b883a 	mov	r21,zero
    947c:	00800084 	movi	r2,2
    9480:	10803fcc 	andi	r2,r2,255
    9484:	01000044 	movi	r4,1
    9488:	11002b26 	beq	r2,r4,9538 <___vfiprintf_internal_r+0x1428>
    948c:	01000084 	movi	r4,2
    9490:	11002b1e 	bne	r2,r4,9540 <___vfiprintf_internal_r+0x1430>
    9494:	1823883a 	mov	r17,r3
    9498:	003ee506 	br	9030 <__alt_data_end+0xfffbfc50>
    949c:	8807883a 	mov	r3,r17
    94a0:	00800044 	movi	r2,1
    94a4:	003ff606 	br	9480 <__alt_data_end+0xfffc00a0>
    94a8:	00800184 	movi	r2,6
    94ac:	1400012e 	bgeu	r2,r16,94b4 <___vfiprintf_internal_r+0x13a4>
    94b0:	1021883a 	mov	r16,r2
    94b4:	8029883a 	mov	r20,r16
    94b8:	8027883a 	mov	r19,r16
    94bc:	80002216 	blt	r16,zero,9548 <___vfiprintf_internal_r+0x1438>
    94c0:	05c00074 	movhi	r23,1
    94c4:	df002215 	stw	fp,136(sp)
    94c8:	bdc19104 	addi	r23,r23,1604
    94cc:	003cfb06 	br	88bc <__alt_data_end+0xfffbf4dc>
    94d0:	d9002217 	ldw	r4,136(sp)
    94d4:	d9402417 	ldw	r5,144(sp)
    94d8:	20800017 	ldw	r2,0(r4)
    94dc:	21000104 	addi	r4,r4,4
    94e0:	d9002215 	stw	r4,136(sp)
    94e4:	11400015 	stw	r5,0(r2)
    94e8:	003b3d06 	br	81e0 <__alt_data_end+0xfffbee00>
    94ec:	01400074 	movhi	r5,1
    94f0:	2941f104 	addi	r5,r5,1988
    94f4:	d9402315 	stw	r5,140(sp)
    94f8:	d9401b17 	ldw	r5,108(sp)
    94fc:	29400044 	addi	r5,r5,1
    9500:	003e6d06 	br	8eb8 <__alt_data_end+0xfffbfad8>
    9504:	8029883a 	mov	r20,r16
    9508:	dd401d83 	ldbu	r21,118(sp)
    950c:	df002215 	stw	fp,136(sp)
    9510:	0021883a 	mov	r16,zero
    9514:	003c0106 	br	851c <__alt_data_end+0xfffbf13c>
    9518:	00c00074 	movhi	r3,1
    951c:	18c1ed04 	addi	r3,r3,1972
    9520:	d8c02315 	stw	r3,140(sp)
    9524:	280d883a 	mov	r6,r5
    9528:	003c6906 	br	86d0 <__alt_data_end+0xfffbf2f0>
    952c:	802d883a 	mov	r22,r16
    9530:	0021883a 	mov	r16,zero
    9534:	003b5406 	br	8288 <__alt_data_end+0xfffbeea8>
    9538:	1823883a 	mov	r17,r3
    953c:	003cf306 	br	890c <__alt_data_end+0xfffbf52c>
    9540:	1823883a 	mov	r17,r3
    9544:	003cad06 	br	87fc <__alt_data_end+0xfffbf41c>
    9548:	0027883a 	mov	r19,zero
    954c:	003fdc06 	br	94c0 <__alt_data_end+0xfffc00e0>
    9550:	d9402217 	ldw	r5,136(sp)
    9554:	8005883a 	mov	r2,r16
    9558:	b0c00043 	ldbu	r3,1(r22)
    955c:	2c000017 	ldw	r16,0(r5)
    9560:	29000104 	addi	r4,r5,4
    9564:	d9002215 	stw	r4,136(sp)
    9568:	102d883a 	mov	r22,r2
    956c:	803fa50e 	bge	r16,zero,9404 <__alt_data_end+0xfffc0024>
    9570:	18c03fcc 	andi	r3,r3,255
    9574:	18c0201c 	xori	r3,r3,128
    9578:	043fffc4 	movi	r16,-1
    957c:	18ffe004 	addi	r3,r3,-128
    9580:	003b4006 	br	8284 <__alt_data_end+0xfffbeea4>
    9584:	d9402303 	ldbu	r5,140(sp)
    9588:	d9401d85 	stb	r5,118(sp)
    958c:	003cae06 	br	8848 <__alt_data_end+0xfffbf468>
    9590:	d8c02303 	ldbu	r3,140(sp)
    9594:	d8c01d85 	stb	r3,118(sp)
    9598:	003d1406 	br	89ec <__alt_data_end+0xfffbf60c>
    959c:	d8c02303 	ldbu	r3,140(sp)
    95a0:	d8c01d85 	stb	r3,118(sp)
    95a4:	003cca06 	br	88d0 <__alt_data_end+0xfffbf4f0>
    95a8:	8880004c 	andi	r2,r17,1
    95ac:	002b883a 	mov	r21,zero
    95b0:	10000526 	beq	r2,zero,95c8 <___vfiprintf_internal_r+0x14b8>
    95b4:	00800c04 	movi	r2,48
    95b8:	d88019c5 	stb	r2,103(sp)
    95bc:	dd002817 	ldw	r20,160(sp)
    95c0:	ddc019c4 	addi	r23,sp,103
    95c4:	003bd506 	br	851c <__alt_data_end+0xfffbf13c>
    95c8:	0029883a 	mov	r20,zero
    95cc:	ddc01a04 	addi	r23,sp,104
    95d0:	003bd206 	br	851c <__alt_data_end+0xfffbf13c>
    95d4:	d9002303 	ldbu	r4,140(sp)
    95d8:	d9001d85 	stb	r4,118(sp)
    95dc:	003da606 	br	8c78 <__alt_data_end+0xfffbf898>
    95e0:	d8c02303 	ldbu	r3,140(sp)
    95e4:	d8c01d85 	stb	r3,118(sp)
    95e8:	003c7606 	br	87c4 <__alt_data_end+0xfffbf3e4>
    95ec:	d8c02303 	ldbu	r3,140(sp)
    95f0:	d8c01d85 	stb	r3,118(sp)
    95f4:	003c6506 	br	878c <__alt_data_end+0xfffbf3ac>
    95f8:	d9002303 	ldbu	r4,140(sp)
    95fc:	d9001d85 	stb	r4,118(sp)
    9600:	003d3d06 	br	8af8 <__alt_data_end+0xfffbf718>
    9604:	d8c02303 	ldbu	r3,140(sp)
    9608:	d8c01d85 	stb	r3,118(sp)
    960c:	003d1d06 	br	8a84 <__alt_data_end+0xfffbf6a4>
    9610:	d8c02303 	ldbu	r3,140(sp)
    9614:	d8c01d85 	stb	r3,118(sp)
    9618:	003d0306 	br	8a28 <__alt_data_end+0xfffbf648>

0000961c <__vfiprintf_internal>:
    961c:	00800074 	movhi	r2,1
    9620:	1088ee04 	addi	r2,r2,9144
    9624:	300f883a 	mov	r7,r6
    9628:	280d883a 	mov	r6,r5
    962c:	200b883a 	mov	r5,r4
    9630:	11000017 	ldw	r4,0(r2)
    9634:	00081101 	jmpi	8110 <___vfiprintf_internal_r>

00009638 <__sbprintf>:
    9638:	2880030b 	ldhu	r2,12(r5)
    963c:	2ac01917 	ldw	r11,100(r5)
    9640:	2a80038b 	ldhu	r10,14(r5)
    9644:	2a400717 	ldw	r9,28(r5)
    9648:	2a000917 	ldw	r8,36(r5)
    964c:	defee204 	addi	sp,sp,-1144
    9650:	00c10004 	movi	r3,1024
    9654:	dc011a15 	stw	r16,1128(sp)
    9658:	10bfff4c 	andi	r2,r2,65533
    965c:	2821883a 	mov	r16,r5
    9660:	d8cb883a 	add	r5,sp,r3
    9664:	dc811c15 	stw	r18,1136(sp)
    9668:	dc411b15 	stw	r17,1132(sp)
    966c:	dfc11d15 	stw	ra,1140(sp)
    9670:	2025883a 	mov	r18,r4
    9674:	d881030d 	sth	r2,1036(sp)
    9678:	dac11915 	stw	r11,1124(sp)
    967c:	da81038d 	sth	r10,1038(sp)
    9680:	da410715 	stw	r9,1052(sp)
    9684:	da010915 	stw	r8,1060(sp)
    9688:	dec10015 	stw	sp,1024(sp)
    968c:	dec10415 	stw	sp,1040(sp)
    9690:	d8c10215 	stw	r3,1032(sp)
    9694:	d8c10515 	stw	r3,1044(sp)
    9698:	d8010615 	stw	zero,1048(sp)
    969c:	00081100 	call	8110 <___vfiprintf_internal_r>
    96a0:	1023883a 	mov	r17,r2
    96a4:	10000416 	blt	r2,zero,96b8 <__sbprintf+0x80>
    96a8:	d9410004 	addi	r5,sp,1024
    96ac:	9009883a 	mov	r4,r18
    96b0:	00047840 	call	4784 <_fflush_r>
    96b4:	10000d1e 	bne	r2,zero,96ec <__sbprintf+0xb4>
    96b8:	d881030b 	ldhu	r2,1036(sp)
    96bc:	1080100c 	andi	r2,r2,64
    96c0:	10000326 	beq	r2,zero,96d0 <__sbprintf+0x98>
    96c4:	8080030b 	ldhu	r2,12(r16)
    96c8:	10801014 	ori	r2,r2,64
    96cc:	8080030d 	sth	r2,12(r16)
    96d0:	8805883a 	mov	r2,r17
    96d4:	dfc11d17 	ldw	ra,1140(sp)
    96d8:	dc811c17 	ldw	r18,1136(sp)
    96dc:	dc411b17 	ldw	r17,1132(sp)
    96e0:	dc011a17 	ldw	r16,1128(sp)
    96e4:	dec11e04 	addi	sp,sp,1144
    96e8:	f800283a 	ret
    96ec:	047fffc4 	movi	r17,-1
    96f0:	003ff106 	br	96b8 <__alt_data_end+0xfffc02d8>

000096f4 <__swbuf_r>:
    96f4:	defffb04 	addi	sp,sp,-20
    96f8:	dcc00315 	stw	r19,12(sp)
    96fc:	dc800215 	stw	r18,8(sp)
    9700:	dc000015 	stw	r16,0(sp)
    9704:	dfc00415 	stw	ra,16(sp)
    9708:	dc400115 	stw	r17,4(sp)
    970c:	2025883a 	mov	r18,r4
    9710:	2827883a 	mov	r19,r5
    9714:	3021883a 	mov	r16,r6
    9718:	20000226 	beq	r4,zero,9724 <__swbuf_r+0x30>
    971c:	20800e17 	ldw	r2,56(r4)
    9720:	10004226 	beq	r2,zero,982c <__swbuf_r+0x138>
    9724:	80800617 	ldw	r2,24(r16)
    9728:	8100030b 	ldhu	r4,12(r16)
    972c:	80800215 	stw	r2,8(r16)
    9730:	2080020c 	andi	r2,r4,8
    9734:	10003626 	beq	r2,zero,9810 <__swbuf_r+0x11c>
    9738:	80c00417 	ldw	r3,16(r16)
    973c:	18003426 	beq	r3,zero,9810 <__swbuf_r+0x11c>
    9740:	2088000c 	andi	r2,r4,8192
    9744:	9c403fcc 	andi	r17,r19,255
    9748:	10001a26 	beq	r2,zero,97b4 <__swbuf_r+0xc0>
    974c:	80800017 	ldw	r2,0(r16)
    9750:	81000517 	ldw	r4,20(r16)
    9754:	10c7c83a 	sub	r3,r2,r3
    9758:	1900200e 	bge	r3,r4,97dc <__swbuf_r+0xe8>
    975c:	18c00044 	addi	r3,r3,1
    9760:	81000217 	ldw	r4,8(r16)
    9764:	11400044 	addi	r5,r2,1
    9768:	81400015 	stw	r5,0(r16)
    976c:	213fffc4 	addi	r4,r4,-1
    9770:	81000215 	stw	r4,8(r16)
    9774:	14c00005 	stb	r19,0(r2)
    9778:	80800517 	ldw	r2,20(r16)
    977c:	10c01e26 	beq	r2,r3,97f8 <__swbuf_r+0x104>
    9780:	8080030b 	ldhu	r2,12(r16)
    9784:	1080004c 	andi	r2,r2,1
    9788:	10000226 	beq	r2,zero,9794 <__swbuf_r+0xa0>
    978c:	00800284 	movi	r2,10
    9790:	88801926 	beq	r17,r2,97f8 <__swbuf_r+0x104>
    9794:	8805883a 	mov	r2,r17
    9798:	dfc00417 	ldw	ra,16(sp)
    979c:	dcc00317 	ldw	r19,12(sp)
    97a0:	dc800217 	ldw	r18,8(sp)
    97a4:	dc400117 	ldw	r17,4(sp)
    97a8:	dc000017 	ldw	r16,0(sp)
    97ac:	dec00504 	addi	sp,sp,20
    97b0:	f800283a 	ret
    97b4:	81401917 	ldw	r5,100(r16)
    97b8:	00b7ffc4 	movi	r2,-8193
    97bc:	21080014 	ori	r4,r4,8192
    97c0:	2884703a 	and	r2,r5,r2
    97c4:	80801915 	stw	r2,100(r16)
    97c8:	80800017 	ldw	r2,0(r16)
    97cc:	8100030d 	sth	r4,12(r16)
    97d0:	81000517 	ldw	r4,20(r16)
    97d4:	10c7c83a 	sub	r3,r2,r3
    97d8:	193fe016 	blt	r3,r4,975c <__alt_data_end+0xfffc037c>
    97dc:	800b883a 	mov	r5,r16
    97e0:	9009883a 	mov	r4,r18
    97e4:	00047840 	call	4784 <_fflush_r>
    97e8:	1000071e 	bne	r2,zero,9808 <__swbuf_r+0x114>
    97ec:	80800017 	ldw	r2,0(r16)
    97f0:	00c00044 	movi	r3,1
    97f4:	003fda06 	br	9760 <__alt_data_end+0xfffc0380>
    97f8:	800b883a 	mov	r5,r16
    97fc:	9009883a 	mov	r4,r18
    9800:	00047840 	call	4784 <_fflush_r>
    9804:	103fe326 	beq	r2,zero,9794 <__alt_data_end+0xfffc03b4>
    9808:	00bfffc4 	movi	r2,-1
    980c:	003fe206 	br	9798 <__alt_data_end+0xfffc03b8>
    9810:	800b883a 	mov	r5,r16
    9814:	9009883a 	mov	r4,r18
    9818:	0002b640 	call	2b64 <__swsetup_r>
    981c:	103ffa1e 	bne	r2,zero,9808 <__alt_data_end+0xfffc0428>
    9820:	8100030b 	ldhu	r4,12(r16)
    9824:	80c00417 	ldw	r3,16(r16)
    9828:	003fc506 	br	9740 <__alt_data_end+0xfffc0360>
    982c:	0004b700 	call	4b70 <__sinit>
    9830:	003fbc06 	br	9724 <__alt_data_end+0xfffc0344>

00009834 <__swbuf>:
    9834:	00800074 	movhi	r2,1
    9838:	1088ee04 	addi	r2,r2,9144
    983c:	280d883a 	mov	r6,r5
    9840:	200b883a 	mov	r5,r4
    9844:	11000017 	ldw	r4,0(r2)
    9848:	00096f41 	jmpi	96f4 <__swbuf_r>

0000984c <_write_r>:
    984c:	defffd04 	addi	sp,sp,-12
    9850:	2805883a 	mov	r2,r5
    9854:	dc000015 	stw	r16,0(sp)
    9858:	04000074 	movhi	r16,1
    985c:	dc400115 	stw	r17,4(sp)
    9860:	300b883a 	mov	r5,r6
    9864:	840fbe04 	addi	r16,r16,16120
    9868:	2023883a 	mov	r17,r4
    986c:	380d883a 	mov	r6,r7
    9870:	1009883a 	mov	r4,r2
    9874:	dfc00215 	stw	ra,8(sp)
    9878:	80000015 	stw	zero,0(r16)
    987c:	000dfbc0 	call	dfbc <write>
    9880:	00ffffc4 	movi	r3,-1
    9884:	10c00526 	beq	r2,r3,989c <_write_r+0x50>
    9888:	dfc00217 	ldw	ra,8(sp)
    988c:	dc400117 	ldw	r17,4(sp)
    9890:	dc000017 	ldw	r16,0(sp)
    9894:	dec00304 	addi	sp,sp,12
    9898:	f800283a 	ret
    989c:	80c00017 	ldw	r3,0(r16)
    98a0:	183ff926 	beq	r3,zero,9888 <__alt_data_end+0xfffc04a8>
    98a4:	88c00015 	stw	r3,0(r17)
    98a8:	003ff706 	br	9888 <__alt_data_end+0xfffc04a8>

000098ac <_close_r>:
    98ac:	defffd04 	addi	sp,sp,-12
    98b0:	dc000015 	stw	r16,0(sp)
    98b4:	04000074 	movhi	r16,1
    98b8:	dc400115 	stw	r17,4(sp)
    98bc:	840fbe04 	addi	r16,r16,16120
    98c0:	2023883a 	mov	r17,r4
    98c4:	2809883a 	mov	r4,r5
    98c8:	dfc00215 	stw	ra,8(sp)
    98cc:	80000015 	stw	zero,0(r16)
    98d0:	000d6d00 	call	d6d0 <close>
    98d4:	00ffffc4 	movi	r3,-1
    98d8:	10c00526 	beq	r2,r3,98f0 <_close_r+0x44>
    98dc:	dfc00217 	ldw	ra,8(sp)
    98e0:	dc400117 	ldw	r17,4(sp)
    98e4:	dc000017 	ldw	r16,0(sp)
    98e8:	dec00304 	addi	sp,sp,12
    98ec:	f800283a 	ret
    98f0:	80c00017 	ldw	r3,0(r16)
    98f4:	183ff926 	beq	r3,zero,98dc <__alt_data_end+0xfffc04fc>
    98f8:	88c00015 	stw	r3,0(r17)
    98fc:	003ff706 	br	98dc <__alt_data_end+0xfffc04fc>

00009900 <_calloc_r>:
    9900:	defffe04 	addi	sp,sp,-8
    9904:	2805883a 	mov	r2,r5
    9908:	dc000015 	stw	r16,0(sp)
    990c:	300b883a 	mov	r5,r6
    9910:	2021883a 	mov	r16,r4
    9914:	1009883a 	mov	r4,r2
    9918:	dfc00115 	stw	ra,4(sp)
    991c:	000adb40 	call	adb4 <__mulsi3>
    9920:	100b883a 	mov	r5,r2
    9924:	8009883a 	mov	r4,r16
    9928:	00058dc0 	call	58dc <_malloc_r>
    992c:	10002926 	beq	r2,zero,99d4 <_calloc_r+0xd4>
    9930:	11bfff17 	ldw	r6,-4(r2)
    9934:	1021883a 	mov	r16,r2
    9938:	00bfff04 	movi	r2,-4
    993c:	308c703a 	and	r6,r6,r2
    9940:	00c00904 	movi	r3,36
    9944:	308d883a 	add	r6,r6,r2
    9948:	19801636 	bltu	r3,r6,99a4 <_calloc_r+0xa4>
    994c:	008004c4 	movi	r2,19
    9950:	11800b2e 	bgeu	r2,r6,9980 <_calloc_r+0x80>
    9954:	80000015 	stw	zero,0(r16)
    9958:	80000115 	stw	zero,4(r16)
    995c:	008006c4 	movi	r2,27
    9960:	11801a2e 	bgeu	r2,r6,99cc <_calloc_r+0xcc>
    9964:	80000215 	stw	zero,8(r16)
    9968:	80000315 	stw	zero,12(r16)
    996c:	30c0151e 	bne	r6,r3,99c4 <_calloc_r+0xc4>
    9970:	80000415 	stw	zero,16(r16)
    9974:	80800604 	addi	r2,r16,24
    9978:	80000515 	stw	zero,20(r16)
    997c:	00000106 	br	9984 <_calloc_r+0x84>
    9980:	8005883a 	mov	r2,r16
    9984:	10000015 	stw	zero,0(r2)
    9988:	10000115 	stw	zero,4(r2)
    998c:	10000215 	stw	zero,8(r2)
    9990:	8005883a 	mov	r2,r16
    9994:	dfc00117 	ldw	ra,4(sp)
    9998:	dc000017 	ldw	r16,0(sp)
    999c:	dec00204 	addi	sp,sp,8
    99a0:	f800283a 	ret
    99a4:	000b883a 	mov	r5,zero
    99a8:	8009883a 	mov	r4,r16
    99ac:	00064700 	call	6470 <memset>
    99b0:	8005883a 	mov	r2,r16
    99b4:	dfc00117 	ldw	ra,4(sp)
    99b8:	dc000017 	ldw	r16,0(sp)
    99bc:	dec00204 	addi	sp,sp,8
    99c0:	f800283a 	ret
    99c4:	80800404 	addi	r2,r16,16
    99c8:	003fee06 	br	9984 <__alt_data_end+0xfffc05a4>
    99cc:	80800204 	addi	r2,r16,8
    99d0:	003fec06 	br	9984 <__alt_data_end+0xfffc05a4>
    99d4:	0005883a 	mov	r2,zero
    99d8:	003fee06 	br	9994 <__alt_data_end+0xfffc05b4>

000099dc <_fclose_r>:
    99dc:	28003926 	beq	r5,zero,9ac4 <_fclose_r+0xe8>
    99e0:	defffc04 	addi	sp,sp,-16
    99e4:	dc400115 	stw	r17,4(sp)
    99e8:	dc000015 	stw	r16,0(sp)
    99ec:	dfc00315 	stw	ra,12(sp)
    99f0:	dc800215 	stw	r18,8(sp)
    99f4:	2023883a 	mov	r17,r4
    99f8:	2821883a 	mov	r16,r5
    99fc:	20000226 	beq	r4,zero,9a08 <_fclose_r+0x2c>
    9a00:	20800e17 	ldw	r2,56(r4)
    9a04:	10002726 	beq	r2,zero,9aa4 <_fclose_r+0xc8>
    9a08:	8080030f 	ldh	r2,12(r16)
    9a0c:	1000071e 	bne	r2,zero,9a2c <_fclose_r+0x50>
    9a10:	0005883a 	mov	r2,zero
    9a14:	dfc00317 	ldw	ra,12(sp)
    9a18:	dc800217 	ldw	r18,8(sp)
    9a1c:	dc400117 	ldw	r17,4(sp)
    9a20:	dc000017 	ldw	r16,0(sp)
    9a24:	dec00404 	addi	sp,sp,16
    9a28:	f800283a 	ret
    9a2c:	800b883a 	mov	r5,r16
    9a30:	8809883a 	mov	r4,r17
    9a34:	00045680 	call	4568 <__sflush_r>
    9a38:	1025883a 	mov	r18,r2
    9a3c:	80800b17 	ldw	r2,44(r16)
    9a40:	10000426 	beq	r2,zero,9a54 <_fclose_r+0x78>
    9a44:	81400717 	ldw	r5,28(r16)
    9a48:	8809883a 	mov	r4,r17
    9a4c:	103ee83a 	callr	r2
    9a50:	10001616 	blt	r2,zero,9aac <_fclose_r+0xd0>
    9a54:	8080030b 	ldhu	r2,12(r16)
    9a58:	1080200c 	andi	r2,r2,128
    9a5c:	1000151e 	bne	r2,zero,9ab4 <_fclose_r+0xd8>
    9a60:	81400c17 	ldw	r5,48(r16)
    9a64:	28000526 	beq	r5,zero,9a7c <_fclose_r+0xa0>
    9a68:	80801004 	addi	r2,r16,64
    9a6c:	28800226 	beq	r5,r2,9a78 <_fclose_r+0x9c>
    9a70:	8809883a 	mov	r4,r17
    9a74:	0004ce40 	call	4ce4 <_free_r>
    9a78:	80000c15 	stw	zero,48(r16)
    9a7c:	81401117 	ldw	r5,68(r16)
    9a80:	28000326 	beq	r5,zero,9a90 <_fclose_r+0xb4>
    9a84:	8809883a 	mov	r4,r17
    9a88:	0004ce40 	call	4ce4 <_free_r>
    9a8c:	80001115 	stw	zero,68(r16)
    9a90:	0004b800 	call	4b80 <__sfp_lock_acquire>
    9a94:	8000030d 	sth	zero,12(r16)
    9a98:	0004b840 	call	4b84 <__sfp_lock_release>
    9a9c:	9005883a 	mov	r2,r18
    9aa0:	003fdc06 	br	9a14 <__alt_data_end+0xfffc0634>
    9aa4:	0004b700 	call	4b70 <__sinit>
    9aa8:	003fd706 	br	9a08 <__alt_data_end+0xfffc0628>
    9aac:	04bfffc4 	movi	r18,-1
    9ab0:	003fe806 	br	9a54 <__alt_data_end+0xfffc0674>
    9ab4:	81400417 	ldw	r5,16(r16)
    9ab8:	8809883a 	mov	r4,r17
    9abc:	0004ce40 	call	4ce4 <_free_r>
    9ac0:	003fe706 	br	9a60 <__alt_data_end+0xfffc0680>
    9ac4:	0005883a 	mov	r2,zero
    9ac8:	f800283a 	ret

00009acc <fclose>:
    9acc:	00800074 	movhi	r2,1
    9ad0:	1088ee04 	addi	r2,r2,9144
    9ad4:	200b883a 	mov	r5,r4
    9ad8:	11000017 	ldw	r4,0(r2)
    9adc:	00099dc1 	jmpi	99dc <_fclose_r>

00009ae0 <__fputwc>:
    9ae0:	defff804 	addi	sp,sp,-32
    9ae4:	dcc00415 	stw	r19,16(sp)
    9ae8:	dc800315 	stw	r18,12(sp)
    9aec:	dc000115 	stw	r16,4(sp)
    9af0:	dfc00715 	stw	ra,28(sp)
    9af4:	dd400615 	stw	r21,24(sp)
    9af8:	dd000515 	stw	r20,20(sp)
    9afc:	dc400215 	stw	r17,8(sp)
    9b00:	2027883a 	mov	r19,r4
    9b04:	2825883a 	mov	r18,r5
    9b08:	3021883a 	mov	r16,r6
    9b0c:	00056cc0 	call	56cc <__locale_mb_cur_max>
    9b10:	00c00044 	movi	r3,1
    9b14:	10c03e26 	beq	r2,r3,9c10 <__fputwc+0x130>
    9b18:	81c01704 	addi	r7,r16,92
    9b1c:	900d883a 	mov	r6,r18
    9b20:	d80b883a 	mov	r5,sp
    9b24:	9809883a 	mov	r4,r19
    9b28:	0009e580 	call	9e58 <_wcrtomb_r>
    9b2c:	1029883a 	mov	r20,r2
    9b30:	00bfffc4 	movi	r2,-1
    9b34:	a0802026 	beq	r20,r2,9bb8 <__fputwc+0xd8>
    9b38:	d9400003 	ldbu	r5,0(sp)
    9b3c:	a0001c26 	beq	r20,zero,9bb0 <__fputwc+0xd0>
    9b40:	0023883a 	mov	r17,zero
    9b44:	05400284 	movi	r21,10
    9b48:	00000906 	br	9b70 <__fputwc+0x90>
    9b4c:	80800017 	ldw	r2,0(r16)
    9b50:	11400005 	stb	r5,0(r2)
    9b54:	80c00017 	ldw	r3,0(r16)
    9b58:	18c00044 	addi	r3,r3,1
    9b5c:	80c00015 	stw	r3,0(r16)
    9b60:	8c400044 	addi	r17,r17,1
    9b64:	dc45883a 	add	r2,sp,r17
    9b68:	8d00112e 	bgeu	r17,r20,9bb0 <__fputwc+0xd0>
    9b6c:	11400003 	ldbu	r5,0(r2)
    9b70:	80c00217 	ldw	r3,8(r16)
    9b74:	18ffffc4 	addi	r3,r3,-1
    9b78:	80c00215 	stw	r3,8(r16)
    9b7c:	183ff30e 	bge	r3,zero,9b4c <__alt_data_end+0xfffc076c>
    9b80:	80800617 	ldw	r2,24(r16)
    9b84:	18801916 	blt	r3,r2,9bec <__fputwc+0x10c>
    9b88:	80800017 	ldw	r2,0(r16)
    9b8c:	11400005 	stb	r5,0(r2)
    9b90:	80800017 	ldw	r2,0(r16)
    9b94:	10c00003 	ldbu	r3,0(r2)
    9b98:	10800044 	addi	r2,r2,1
    9b9c:	1d402326 	beq	r3,r21,9c2c <__fputwc+0x14c>
    9ba0:	80800015 	stw	r2,0(r16)
    9ba4:	8c400044 	addi	r17,r17,1
    9ba8:	dc45883a 	add	r2,sp,r17
    9bac:	8d3fef36 	bltu	r17,r20,9b6c <__alt_data_end+0xfffc078c>
    9bb0:	9005883a 	mov	r2,r18
    9bb4:	00000406 	br	9bc8 <__fputwc+0xe8>
    9bb8:	80c0030b 	ldhu	r3,12(r16)
    9bbc:	a005883a 	mov	r2,r20
    9bc0:	18c01014 	ori	r3,r3,64
    9bc4:	80c0030d 	sth	r3,12(r16)
    9bc8:	dfc00717 	ldw	ra,28(sp)
    9bcc:	dd400617 	ldw	r21,24(sp)
    9bd0:	dd000517 	ldw	r20,20(sp)
    9bd4:	dcc00417 	ldw	r19,16(sp)
    9bd8:	dc800317 	ldw	r18,12(sp)
    9bdc:	dc400217 	ldw	r17,8(sp)
    9be0:	dc000117 	ldw	r16,4(sp)
    9be4:	dec00804 	addi	sp,sp,32
    9be8:	f800283a 	ret
    9bec:	800d883a 	mov	r6,r16
    9bf0:	29403fcc 	andi	r5,r5,255
    9bf4:	9809883a 	mov	r4,r19
    9bf8:	00096f40 	call	96f4 <__swbuf_r>
    9bfc:	10bfffe0 	cmpeqi	r2,r2,-1
    9c00:	10803fcc 	andi	r2,r2,255
    9c04:	103fd626 	beq	r2,zero,9b60 <__alt_data_end+0xfffc0780>
    9c08:	00bfffc4 	movi	r2,-1
    9c0c:	003fee06 	br	9bc8 <__alt_data_end+0xfffc07e8>
    9c10:	90ffffc4 	addi	r3,r18,-1
    9c14:	01003f84 	movi	r4,254
    9c18:	20ffbf36 	bltu	r4,r3,9b18 <__alt_data_end+0xfffc0738>
    9c1c:	900b883a 	mov	r5,r18
    9c20:	dc800005 	stb	r18,0(sp)
    9c24:	1029883a 	mov	r20,r2
    9c28:	003fc506 	br	9b40 <__alt_data_end+0xfffc0760>
    9c2c:	800d883a 	mov	r6,r16
    9c30:	a80b883a 	mov	r5,r21
    9c34:	9809883a 	mov	r4,r19
    9c38:	00096f40 	call	96f4 <__swbuf_r>
    9c3c:	10bfffe0 	cmpeqi	r2,r2,-1
    9c40:	003fef06 	br	9c00 <__alt_data_end+0xfffc0820>

00009c44 <_fputwc_r>:
    9c44:	3080030b 	ldhu	r2,12(r6)
    9c48:	10c8000c 	andi	r3,r2,8192
    9c4c:	1800051e 	bne	r3,zero,9c64 <_fputwc_r+0x20>
    9c50:	30c01917 	ldw	r3,100(r6)
    9c54:	10880014 	ori	r2,r2,8192
    9c58:	3080030d 	sth	r2,12(r6)
    9c5c:	18880014 	ori	r2,r3,8192
    9c60:	30801915 	stw	r2,100(r6)
    9c64:	0009ae01 	jmpi	9ae0 <__fputwc>

00009c68 <fputwc>:
    9c68:	00800074 	movhi	r2,1
    9c6c:	defffc04 	addi	sp,sp,-16
    9c70:	1088ee04 	addi	r2,r2,9144
    9c74:	dc000115 	stw	r16,4(sp)
    9c78:	14000017 	ldw	r16,0(r2)
    9c7c:	dc400215 	stw	r17,8(sp)
    9c80:	dfc00315 	stw	ra,12(sp)
    9c84:	2023883a 	mov	r17,r4
    9c88:	80000226 	beq	r16,zero,9c94 <fputwc+0x2c>
    9c8c:	80800e17 	ldw	r2,56(r16)
    9c90:	10001026 	beq	r2,zero,9cd4 <fputwc+0x6c>
    9c94:	2880030b 	ldhu	r2,12(r5)
    9c98:	10c8000c 	andi	r3,r2,8192
    9c9c:	1800051e 	bne	r3,zero,9cb4 <fputwc+0x4c>
    9ca0:	28c01917 	ldw	r3,100(r5)
    9ca4:	10880014 	ori	r2,r2,8192
    9ca8:	2880030d 	sth	r2,12(r5)
    9cac:	18880014 	ori	r2,r3,8192
    9cb0:	28801915 	stw	r2,100(r5)
    9cb4:	280d883a 	mov	r6,r5
    9cb8:	8009883a 	mov	r4,r16
    9cbc:	880b883a 	mov	r5,r17
    9cc0:	dfc00317 	ldw	ra,12(sp)
    9cc4:	dc400217 	ldw	r17,8(sp)
    9cc8:	dc000117 	ldw	r16,4(sp)
    9ccc:	dec00404 	addi	sp,sp,16
    9cd0:	0009ae01 	jmpi	9ae0 <__fputwc>
    9cd4:	8009883a 	mov	r4,r16
    9cd8:	d9400015 	stw	r5,0(sp)
    9cdc:	0004b700 	call	4b70 <__sinit>
    9ce0:	d9400017 	ldw	r5,0(sp)
    9ce4:	003feb06 	br	9c94 <__alt_data_end+0xfffc08b4>

00009ce8 <_fstat_r>:
    9ce8:	defffd04 	addi	sp,sp,-12
    9cec:	2805883a 	mov	r2,r5
    9cf0:	dc000015 	stw	r16,0(sp)
    9cf4:	04000074 	movhi	r16,1
    9cf8:	dc400115 	stw	r17,4(sp)
    9cfc:	840fbe04 	addi	r16,r16,16120
    9d00:	2023883a 	mov	r17,r4
    9d04:	300b883a 	mov	r5,r6
    9d08:	1009883a 	mov	r4,r2
    9d0c:	dfc00215 	stw	ra,8(sp)
    9d10:	80000015 	stw	zero,0(r16)
    9d14:	000d8240 	call	d824 <fstat>
    9d18:	00ffffc4 	movi	r3,-1
    9d1c:	10c00526 	beq	r2,r3,9d34 <_fstat_r+0x4c>
    9d20:	dfc00217 	ldw	ra,8(sp)
    9d24:	dc400117 	ldw	r17,4(sp)
    9d28:	dc000017 	ldw	r16,0(sp)
    9d2c:	dec00304 	addi	sp,sp,12
    9d30:	f800283a 	ret
    9d34:	80c00017 	ldw	r3,0(r16)
    9d38:	183ff926 	beq	r3,zero,9d20 <__alt_data_end+0xfffc0940>
    9d3c:	88c00015 	stw	r3,0(r17)
    9d40:	003ff706 	br	9d20 <__alt_data_end+0xfffc0940>

00009d44 <_isatty_r>:
    9d44:	defffd04 	addi	sp,sp,-12
    9d48:	dc000015 	stw	r16,0(sp)
    9d4c:	04000074 	movhi	r16,1
    9d50:	dc400115 	stw	r17,4(sp)
    9d54:	840fbe04 	addi	r16,r16,16120
    9d58:	2023883a 	mov	r17,r4
    9d5c:	2809883a 	mov	r4,r5
    9d60:	dfc00215 	stw	ra,8(sp)
    9d64:	80000015 	stw	zero,0(r16)
    9d68:	000d92c0 	call	d92c <isatty>
    9d6c:	00ffffc4 	movi	r3,-1
    9d70:	10c00526 	beq	r2,r3,9d88 <_isatty_r+0x44>
    9d74:	dfc00217 	ldw	ra,8(sp)
    9d78:	dc400117 	ldw	r17,4(sp)
    9d7c:	dc000017 	ldw	r16,0(sp)
    9d80:	dec00304 	addi	sp,sp,12
    9d84:	f800283a 	ret
    9d88:	80c00017 	ldw	r3,0(r16)
    9d8c:	183ff926 	beq	r3,zero,9d74 <__alt_data_end+0xfffc0994>
    9d90:	88c00015 	stw	r3,0(r17)
    9d94:	003ff706 	br	9d74 <__alt_data_end+0xfffc0994>

00009d98 <_lseek_r>:
    9d98:	defffd04 	addi	sp,sp,-12
    9d9c:	2805883a 	mov	r2,r5
    9da0:	dc000015 	stw	r16,0(sp)
    9da4:	04000074 	movhi	r16,1
    9da8:	dc400115 	stw	r17,4(sp)
    9dac:	300b883a 	mov	r5,r6
    9db0:	840fbe04 	addi	r16,r16,16120
    9db4:	2023883a 	mov	r17,r4
    9db8:	380d883a 	mov	r6,r7
    9dbc:	1009883a 	mov	r4,r2
    9dc0:	dfc00215 	stw	ra,8(sp)
    9dc4:	80000015 	stw	zero,0(r16)
    9dc8:	000db140 	call	db14 <lseek>
    9dcc:	00ffffc4 	movi	r3,-1
    9dd0:	10c00526 	beq	r2,r3,9de8 <_lseek_r+0x50>
    9dd4:	dfc00217 	ldw	ra,8(sp)
    9dd8:	dc400117 	ldw	r17,4(sp)
    9ddc:	dc000017 	ldw	r16,0(sp)
    9de0:	dec00304 	addi	sp,sp,12
    9de4:	f800283a 	ret
    9de8:	80c00017 	ldw	r3,0(r16)
    9dec:	183ff926 	beq	r3,zero,9dd4 <__alt_data_end+0xfffc09f4>
    9df0:	88c00015 	stw	r3,0(r17)
    9df4:	003ff706 	br	9dd4 <__alt_data_end+0xfffc09f4>

00009df8 <_read_r>:
    9df8:	defffd04 	addi	sp,sp,-12
    9dfc:	2805883a 	mov	r2,r5
    9e00:	dc000015 	stw	r16,0(sp)
    9e04:	04000074 	movhi	r16,1
    9e08:	dc400115 	stw	r17,4(sp)
    9e0c:	300b883a 	mov	r5,r6
    9e10:	840fbe04 	addi	r16,r16,16120
    9e14:	2023883a 	mov	r17,r4
    9e18:	380d883a 	mov	r6,r7
    9e1c:	1009883a 	mov	r4,r2
    9e20:	dfc00215 	stw	ra,8(sp)
    9e24:	80000015 	stw	zero,0(r16)
    9e28:	000dd040 	call	dd04 <read>
    9e2c:	00ffffc4 	movi	r3,-1
    9e30:	10c00526 	beq	r2,r3,9e48 <_read_r+0x50>
    9e34:	dfc00217 	ldw	ra,8(sp)
    9e38:	dc400117 	ldw	r17,4(sp)
    9e3c:	dc000017 	ldw	r16,0(sp)
    9e40:	dec00304 	addi	sp,sp,12
    9e44:	f800283a 	ret
    9e48:	80c00017 	ldw	r3,0(r16)
    9e4c:	183ff926 	beq	r3,zero,9e34 <__alt_data_end+0xfffc0a54>
    9e50:	88c00015 	stw	r3,0(r17)
    9e54:	003ff706 	br	9e34 <__alt_data_end+0xfffc0a54>

00009e58 <_wcrtomb_r>:
    9e58:	defff604 	addi	sp,sp,-40
    9e5c:	00800074 	movhi	r2,1
    9e60:	dc800815 	stw	r18,32(sp)
    9e64:	dc400715 	stw	r17,28(sp)
    9e68:	dc000615 	stw	r16,24(sp)
    9e6c:	1088f204 	addi	r2,r2,9160
    9e70:	dfc00915 	stw	ra,36(sp)
    9e74:	2021883a 	mov	r16,r4
    9e78:	3823883a 	mov	r17,r7
    9e7c:	14800017 	ldw	r18,0(r2)
    9e80:	28001426 	beq	r5,zero,9ed4 <_wcrtomb_r+0x7c>
    9e84:	d9400415 	stw	r5,16(sp)
    9e88:	d9800515 	stw	r6,20(sp)
    9e8c:	00056c00 	call	56c0 <__locale_charset>
    9e90:	d9800517 	ldw	r6,20(sp)
    9e94:	d9400417 	ldw	r5,16(sp)
    9e98:	100f883a 	mov	r7,r2
    9e9c:	dc400015 	stw	r17,0(sp)
    9ea0:	8009883a 	mov	r4,r16
    9ea4:	903ee83a 	callr	r18
    9ea8:	00ffffc4 	movi	r3,-1
    9eac:	10c0031e 	bne	r2,r3,9ebc <_wcrtomb_r+0x64>
    9eb0:	88000015 	stw	zero,0(r17)
    9eb4:	00c02284 	movi	r3,138
    9eb8:	80c00015 	stw	r3,0(r16)
    9ebc:	dfc00917 	ldw	ra,36(sp)
    9ec0:	dc800817 	ldw	r18,32(sp)
    9ec4:	dc400717 	ldw	r17,28(sp)
    9ec8:	dc000617 	ldw	r16,24(sp)
    9ecc:	dec00a04 	addi	sp,sp,40
    9ed0:	f800283a 	ret
    9ed4:	00056c00 	call	56c0 <__locale_charset>
    9ed8:	100f883a 	mov	r7,r2
    9edc:	dc400015 	stw	r17,0(sp)
    9ee0:	000d883a 	mov	r6,zero
    9ee4:	d9400104 	addi	r5,sp,4
    9ee8:	8009883a 	mov	r4,r16
    9eec:	903ee83a 	callr	r18
    9ef0:	003fed06 	br	9ea8 <__alt_data_end+0xfffc0ac8>

00009ef4 <wcrtomb>:
    9ef4:	defff604 	addi	sp,sp,-40
    9ef8:	00800074 	movhi	r2,1
    9efc:	dc800615 	stw	r18,24(sp)
    9f00:	dc400515 	stw	r17,20(sp)
    9f04:	1088ee04 	addi	r2,r2,9144
    9f08:	dfc00915 	stw	ra,36(sp)
    9f0c:	dd000815 	stw	r20,32(sp)
    9f10:	dcc00715 	stw	r19,28(sp)
    9f14:	dc000415 	stw	r16,16(sp)
    9f18:	3025883a 	mov	r18,r6
    9f1c:	14400017 	ldw	r17,0(r2)
    9f20:	20001926 	beq	r4,zero,9f88 <wcrtomb+0x94>
    9f24:	00800074 	movhi	r2,1
    9f28:	1088f204 	addi	r2,r2,9160
    9f2c:	15000017 	ldw	r20,0(r2)
    9f30:	2021883a 	mov	r16,r4
    9f34:	2827883a 	mov	r19,r5
    9f38:	00056c00 	call	56c0 <__locale_charset>
    9f3c:	100f883a 	mov	r7,r2
    9f40:	dc800015 	stw	r18,0(sp)
    9f44:	980d883a 	mov	r6,r19
    9f48:	800b883a 	mov	r5,r16
    9f4c:	8809883a 	mov	r4,r17
    9f50:	a03ee83a 	callr	r20
    9f54:	00ffffc4 	movi	r3,-1
    9f58:	10c0031e 	bne	r2,r3,9f68 <wcrtomb+0x74>
    9f5c:	90000015 	stw	zero,0(r18)
    9f60:	00c02284 	movi	r3,138
    9f64:	88c00015 	stw	r3,0(r17)
    9f68:	dfc00917 	ldw	ra,36(sp)
    9f6c:	dd000817 	ldw	r20,32(sp)
    9f70:	dcc00717 	ldw	r19,28(sp)
    9f74:	dc800617 	ldw	r18,24(sp)
    9f78:	dc400517 	ldw	r17,20(sp)
    9f7c:	dc000417 	ldw	r16,16(sp)
    9f80:	dec00a04 	addi	sp,sp,40
    9f84:	f800283a 	ret
    9f88:	00800074 	movhi	r2,1
    9f8c:	1088f204 	addi	r2,r2,9160
    9f90:	14000017 	ldw	r16,0(r2)
    9f94:	00056c00 	call	56c0 <__locale_charset>
    9f98:	100f883a 	mov	r7,r2
    9f9c:	dc800015 	stw	r18,0(sp)
    9fa0:	000d883a 	mov	r6,zero
    9fa4:	d9400104 	addi	r5,sp,4
    9fa8:	8809883a 	mov	r4,r17
    9fac:	803ee83a 	callr	r16
    9fb0:	003fe806 	br	9f54 <__alt_data_end+0xfffc0b74>

00009fb4 <__ascii_wctomb>:
    9fb4:	28000526 	beq	r5,zero,9fcc <__ascii_wctomb+0x18>
    9fb8:	00803fc4 	movi	r2,255
    9fbc:	11800536 	bltu	r2,r6,9fd4 <__ascii_wctomb+0x20>
    9fc0:	29800005 	stb	r6,0(r5)
    9fc4:	00800044 	movi	r2,1
    9fc8:	f800283a 	ret
    9fcc:	0005883a 	mov	r2,zero
    9fd0:	f800283a 	ret
    9fd4:	00802284 	movi	r2,138
    9fd8:	20800015 	stw	r2,0(r4)
    9fdc:	00bfffc4 	movi	r2,-1
    9fe0:	f800283a 	ret

00009fe4 <_wctomb_r>:
    9fe4:	00800074 	movhi	r2,1
    9fe8:	defff904 	addi	sp,sp,-28
    9fec:	1088f204 	addi	r2,r2,9160
    9ff0:	dfc00615 	stw	ra,24(sp)
    9ff4:	dc400515 	stw	r17,20(sp)
    9ff8:	dc000415 	stw	r16,16(sp)
    9ffc:	3823883a 	mov	r17,r7
    a000:	14000017 	ldw	r16,0(r2)
    a004:	d9000115 	stw	r4,4(sp)
    a008:	d9400215 	stw	r5,8(sp)
    a00c:	d9800315 	stw	r6,12(sp)
    a010:	00056c00 	call	56c0 <__locale_charset>
    a014:	d9800317 	ldw	r6,12(sp)
    a018:	d9400217 	ldw	r5,8(sp)
    a01c:	d9000117 	ldw	r4,4(sp)
    a020:	100f883a 	mov	r7,r2
    a024:	dc400015 	stw	r17,0(sp)
    a028:	803ee83a 	callr	r16
    a02c:	dfc00617 	ldw	ra,24(sp)
    a030:	dc400517 	ldw	r17,20(sp)
    a034:	dc000417 	ldw	r16,16(sp)
    a038:	dec00704 	addi	sp,sp,28
    a03c:	f800283a 	ret

0000a040 <__udivdi3>:
    a040:	defff404 	addi	sp,sp,-48
    a044:	dcc00515 	stw	r19,20(sp)
    a048:	dc000215 	stw	r16,8(sp)
    a04c:	dfc00b15 	stw	ra,44(sp)
    a050:	df000a15 	stw	fp,40(sp)
    a054:	ddc00915 	stw	r23,36(sp)
    a058:	dd800815 	stw	r22,32(sp)
    a05c:	dd400715 	stw	r21,28(sp)
    a060:	dd000615 	stw	r20,24(sp)
    a064:	dc800415 	stw	r18,16(sp)
    a068:	dc400315 	stw	r17,12(sp)
    a06c:	2027883a 	mov	r19,r4
    a070:	2821883a 	mov	r16,r5
    a074:	3800461e 	bne	r7,zero,a190 <__udivdi3+0x150>
    a078:	3023883a 	mov	r17,r6
    a07c:	2025883a 	mov	r18,r4
    a080:	2980572e 	bgeu	r5,r6,a1e0 <__udivdi3+0x1a0>
    a084:	00bfffd4 	movui	r2,65535
    a088:	282d883a 	mov	r22,r5
    a08c:	1180b236 	bltu	r2,r6,a358 <__udivdi3+0x318>
    a090:	00803fc4 	movi	r2,255
    a094:	1185803a 	cmpltu	r2,r2,r6
    a098:	100490fa 	slli	r2,r2,3
    a09c:	3086d83a 	srl	r3,r6,r2
    a0a0:	01000074 	movhi	r4,1
    a0a4:	2101f504 	addi	r4,r4,2004
    a0a8:	20c7883a 	add	r3,r4,r3
    a0ac:	18c00003 	ldbu	r3,0(r3)
    a0b0:	1885883a 	add	r2,r3,r2
    a0b4:	00c00804 	movi	r3,32
    a0b8:	1887c83a 	sub	r3,r3,r2
    a0bc:	18000526 	beq	r3,zero,a0d4 <__udivdi3+0x94>
    a0c0:	80e0983a 	sll	r16,r16,r3
    a0c4:	9884d83a 	srl	r2,r19,r2
    a0c8:	30e2983a 	sll	r17,r6,r3
    a0cc:	98e4983a 	sll	r18,r19,r3
    a0d0:	142cb03a 	or	r22,r2,r16
    a0d4:	882ad43a 	srli	r21,r17,16
    a0d8:	b009883a 	mov	r4,r22
    a0dc:	8d3fffcc 	andi	r20,r17,65535
    a0e0:	a80b883a 	mov	r5,r21
    a0e4:	000ad5c0 	call	ad5c <__umodsi3>
    a0e8:	b009883a 	mov	r4,r22
    a0ec:	a80b883a 	mov	r5,r21
    a0f0:	1027883a 	mov	r19,r2
    a0f4:	000acf80 	call	acf8 <__udivsi3>
    a0f8:	100b883a 	mov	r5,r2
    a0fc:	a009883a 	mov	r4,r20
    a100:	102d883a 	mov	r22,r2
    a104:	000adb40 	call	adb4 <__mulsi3>
    a108:	9826943a 	slli	r19,r19,16
    a10c:	9006d43a 	srli	r3,r18,16
    a110:	1cc6b03a 	or	r3,r3,r19
    a114:	1880052e 	bgeu	r3,r2,a12c <__udivdi3+0xec>
    a118:	1c47883a 	add	r3,r3,r17
    a11c:	b13fffc4 	addi	r4,r22,-1
    a120:	1c400136 	bltu	r3,r17,a128 <__udivdi3+0xe8>
    a124:	18814236 	bltu	r3,r2,a630 <__udivdi3+0x5f0>
    a128:	202d883a 	mov	r22,r4
    a12c:	18a1c83a 	sub	r16,r3,r2
    a130:	8009883a 	mov	r4,r16
    a134:	a80b883a 	mov	r5,r21
    a138:	000ad5c0 	call	ad5c <__umodsi3>
    a13c:	1027883a 	mov	r19,r2
    a140:	8009883a 	mov	r4,r16
    a144:	a80b883a 	mov	r5,r21
    a148:	9826943a 	slli	r19,r19,16
    a14c:	000acf80 	call	acf8 <__udivsi3>
    a150:	100b883a 	mov	r5,r2
    a154:	a009883a 	mov	r4,r20
    a158:	94bfffcc 	andi	r18,r18,65535
    a15c:	1021883a 	mov	r16,r2
    a160:	94e4b03a 	or	r18,r18,r19
    a164:	000adb40 	call	adb4 <__mulsi3>
    a168:	9080052e 	bgeu	r18,r2,a180 <__udivdi3+0x140>
    a16c:	8ca5883a 	add	r18,r17,r18
    a170:	80ffffc4 	addi	r3,r16,-1
    a174:	94410c36 	bltu	r18,r17,a5a8 <__udivdi3+0x568>
    a178:	90810b2e 	bgeu	r18,r2,a5a8 <__udivdi3+0x568>
    a17c:	843fff84 	addi	r16,r16,-2
    a180:	b004943a 	slli	r2,r22,16
    a184:	0007883a 	mov	r3,zero
    a188:	1404b03a 	or	r2,r2,r16
    a18c:	00005e06 	br	a308 <__udivdi3+0x2c8>
    a190:	29c05b36 	bltu	r5,r7,a300 <__udivdi3+0x2c0>
    a194:	00bfffd4 	movui	r2,65535
    a198:	11c0672e 	bgeu	r2,r7,a338 <__udivdi3+0x2f8>
    a19c:	00804034 	movhi	r2,256
    a1a0:	10bfffc4 	addi	r2,r2,-1
    a1a4:	11c10a36 	bltu	r2,r7,a5d0 <__udivdi3+0x590>
    a1a8:	00800404 	movi	r2,16
    a1ac:	3886d83a 	srl	r3,r7,r2
    a1b0:	01000074 	movhi	r4,1
    a1b4:	2101f504 	addi	r4,r4,2004
    a1b8:	20c7883a 	add	r3,r4,r3
    a1bc:	18c00003 	ldbu	r3,0(r3)
    a1c0:	05c00804 	movi	r23,32
    a1c4:	1885883a 	add	r2,r3,r2
    a1c8:	b8afc83a 	sub	r23,r23,r2
    a1cc:	b800671e 	bne	r23,zero,a36c <__udivdi3+0x32c>
    a1d0:	3c010536 	bltu	r7,r16,a5e8 <__udivdi3+0x5a8>
    a1d4:	9985403a 	cmpgeu	r2,r19,r6
    a1d8:	0007883a 	mov	r3,zero
    a1dc:	00004a06 	br	a308 <__udivdi3+0x2c8>
    a1e0:	3000041e 	bne	r6,zero,a1f4 <__udivdi3+0x1b4>
    a1e4:	000b883a 	mov	r5,zero
    a1e8:	01000044 	movi	r4,1
    a1ec:	000acf80 	call	acf8 <__udivsi3>
    a1f0:	1023883a 	mov	r17,r2
    a1f4:	00bfffd4 	movui	r2,65535
    a1f8:	1440532e 	bgeu	r2,r17,a348 <__udivdi3+0x308>
    a1fc:	00804034 	movhi	r2,256
    a200:	10bfffc4 	addi	r2,r2,-1
    a204:	1440f436 	bltu	r2,r17,a5d8 <__udivdi3+0x598>
    a208:	00800404 	movi	r2,16
    a20c:	8886d83a 	srl	r3,r17,r2
    a210:	01000074 	movhi	r4,1
    a214:	2101f504 	addi	r4,r4,2004
    a218:	20c7883a 	add	r3,r4,r3
    a21c:	18c00003 	ldbu	r3,0(r3)
    a220:	1885883a 	add	r2,r3,r2
    a224:	00c00804 	movi	r3,32
    a228:	1887c83a 	sub	r3,r3,r2
    a22c:	1800a51e 	bne	r3,zero,a4c4 <__udivdi3+0x484>
    a230:	882ad43a 	srli	r21,r17,16
    a234:	8461c83a 	sub	r16,r16,r17
    a238:	8d3fffcc 	andi	r20,r17,65535
    a23c:	00c00044 	movi	r3,1
    a240:	a80b883a 	mov	r5,r21
    a244:	8009883a 	mov	r4,r16
    a248:	d8c00115 	stw	r3,4(sp)
    a24c:	000ad5c0 	call	ad5c <__umodsi3>
    a250:	a80b883a 	mov	r5,r21
    a254:	8009883a 	mov	r4,r16
    a258:	1027883a 	mov	r19,r2
    a25c:	000acf80 	call	acf8 <__udivsi3>
    a260:	a00b883a 	mov	r5,r20
    a264:	1009883a 	mov	r4,r2
    a268:	102d883a 	mov	r22,r2
    a26c:	000adb40 	call	adb4 <__mulsi3>
    a270:	9826943a 	slli	r19,r19,16
    a274:	900ed43a 	srli	r7,r18,16
    a278:	d8c00117 	ldw	r3,4(sp)
    a27c:	3cceb03a 	or	r7,r7,r19
    a280:	3880052e 	bgeu	r7,r2,a298 <__udivdi3+0x258>
    a284:	3c4f883a 	add	r7,r7,r17
    a288:	b13fffc4 	addi	r4,r22,-1
    a28c:	3c400136 	bltu	r7,r17,a294 <__udivdi3+0x254>
    a290:	3880e436 	bltu	r7,r2,a624 <__udivdi3+0x5e4>
    a294:	202d883a 	mov	r22,r4
    a298:	38a1c83a 	sub	r16,r7,r2
    a29c:	8009883a 	mov	r4,r16
    a2a0:	a80b883a 	mov	r5,r21
    a2a4:	d8c00115 	stw	r3,4(sp)
    a2a8:	000ad5c0 	call	ad5c <__umodsi3>
    a2ac:	1027883a 	mov	r19,r2
    a2b0:	8009883a 	mov	r4,r16
    a2b4:	a80b883a 	mov	r5,r21
    a2b8:	9826943a 	slli	r19,r19,16
    a2bc:	000acf80 	call	acf8 <__udivsi3>
    a2c0:	a00b883a 	mov	r5,r20
    a2c4:	1009883a 	mov	r4,r2
    a2c8:	94bfffcc 	andi	r18,r18,65535
    a2cc:	1021883a 	mov	r16,r2
    a2d0:	94e4b03a 	or	r18,r18,r19
    a2d4:	000adb40 	call	adb4 <__mulsi3>
    a2d8:	d8c00117 	ldw	r3,4(sp)
    a2dc:	9080052e 	bgeu	r18,r2,a2f4 <__udivdi3+0x2b4>
    a2e0:	8ca5883a 	add	r18,r17,r18
    a2e4:	813fffc4 	addi	r4,r16,-1
    a2e8:	9440ad36 	bltu	r18,r17,a5a0 <__udivdi3+0x560>
    a2ec:	9080ac2e 	bgeu	r18,r2,a5a0 <__udivdi3+0x560>
    a2f0:	843fff84 	addi	r16,r16,-2
    a2f4:	b004943a 	slli	r2,r22,16
    a2f8:	1404b03a 	or	r2,r2,r16
    a2fc:	00000206 	br	a308 <__udivdi3+0x2c8>
    a300:	0007883a 	mov	r3,zero
    a304:	0005883a 	mov	r2,zero
    a308:	dfc00b17 	ldw	ra,44(sp)
    a30c:	df000a17 	ldw	fp,40(sp)
    a310:	ddc00917 	ldw	r23,36(sp)
    a314:	dd800817 	ldw	r22,32(sp)
    a318:	dd400717 	ldw	r21,28(sp)
    a31c:	dd000617 	ldw	r20,24(sp)
    a320:	dcc00517 	ldw	r19,20(sp)
    a324:	dc800417 	ldw	r18,16(sp)
    a328:	dc400317 	ldw	r17,12(sp)
    a32c:	dc000217 	ldw	r16,8(sp)
    a330:	dec00c04 	addi	sp,sp,48
    a334:	f800283a 	ret
    a338:	00803fc4 	movi	r2,255
    a33c:	11c5803a 	cmpltu	r2,r2,r7
    a340:	100490fa 	slli	r2,r2,3
    a344:	003f9906 	br	a1ac <__alt_data_end+0xfffc0dcc>
    a348:	00803fc4 	movi	r2,255
    a34c:	1445803a 	cmpltu	r2,r2,r17
    a350:	100490fa 	slli	r2,r2,3
    a354:	003fad06 	br	a20c <__alt_data_end+0xfffc0e2c>
    a358:	00804034 	movhi	r2,256
    a35c:	10bfffc4 	addi	r2,r2,-1
    a360:	11809f36 	bltu	r2,r6,a5e0 <__udivdi3+0x5a0>
    a364:	00800404 	movi	r2,16
    a368:	003f4c06 	br	a09c <__alt_data_end+0xfffc0cbc>
    a36c:	3dce983a 	sll	r7,r7,r23
    a370:	30b8d83a 	srl	fp,r6,r2
    a374:	80a2d83a 	srl	r17,r16,r2
    a378:	35cc983a 	sll	r6,r6,r23
    a37c:	3f38b03a 	or	fp,r7,fp
    a380:	e024d43a 	srli	r18,fp,16
    a384:	9884d83a 	srl	r2,r19,r2
    a388:	85e0983a 	sll	r16,r16,r23
    a38c:	8809883a 	mov	r4,r17
    a390:	900b883a 	mov	r5,r18
    a394:	d9800015 	stw	r6,0(sp)
    a398:	1420b03a 	or	r16,r2,r16
    a39c:	000ad5c0 	call	ad5c <__umodsi3>
    a3a0:	900b883a 	mov	r5,r18
    a3a4:	8809883a 	mov	r4,r17
    a3a8:	1029883a 	mov	r20,r2
    a3ac:	e5bfffcc 	andi	r22,fp,65535
    a3b0:	000acf80 	call	acf8 <__udivsi3>
    a3b4:	100b883a 	mov	r5,r2
    a3b8:	b009883a 	mov	r4,r22
    a3bc:	102b883a 	mov	r21,r2
    a3c0:	000adb40 	call	adb4 <__mulsi3>
    a3c4:	a028943a 	slli	r20,r20,16
    a3c8:	8006d43a 	srli	r3,r16,16
    a3cc:	1d06b03a 	or	r3,r3,r20
    a3d0:	1880042e 	bgeu	r3,r2,a3e4 <__udivdi3+0x3a4>
    a3d4:	1f07883a 	add	r3,r3,fp
    a3d8:	a93fffc4 	addi	r4,r21,-1
    a3dc:	1f00892e 	bgeu	r3,fp,a604 <__udivdi3+0x5c4>
    a3e0:	202b883a 	mov	r21,r4
    a3e4:	18a3c83a 	sub	r17,r3,r2
    a3e8:	8809883a 	mov	r4,r17
    a3ec:	900b883a 	mov	r5,r18
    a3f0:	000ad5c0 	call	ad5c <__umodsi3>
    a3f4:	1029883a 	mov	r20,r2
    a3f8:	8809883a 	mov	r4,r17
    a3fc:	900b883a 	mov	r5,r18
    a400:	a028943a 	slli	r20,r20,16
    a404:	000acf80 	call	acf8 <__udivsi3>
    a408:	100b883a 	mov	r5,r2
    a40c:	b009883a 	mov	r4,r22
    a410:	843fffcc 	andi	r16,r16,65535
    a414:	1023883a 	mov	r17,r2
    a418:	8520b03a 	or	r16,r16,r20
    a41c:	000adb40 	call	adb4 <__mulsi3>
    a420:	8080042e 	bgeu	r16,r2,a434 <__udivdi3+0x3f4>
    a424:	8721883a 	add	r16,r16,fp
    a428:	88ffffc4 	addi	r3,r17,-1
    a42c:	8700712e 	bgeu	r16,fp,a5f4 <__udivdi3+0x5b4>
    a430:	1823883a 	mov	r17,r3
    a434:	a80e943a 	slli	r7,r21,16
    a438:	d8c00017 	ldw	r3,0(sp)
    a43c:	80a1c83a 	sub	r16,r16,r2
    a440:	3c64b03a 	or	r18,r7,r17
    a444:	1d3fffcc 	andi	r20,r3,65535
    a448:	9022d43a 	srli	r17,r18,16
    a44c:	95bfffcc 	andi	r22,r18,65535
    a450:	a00b883a 	mov	r5,r20
    a454:	b009883a 	mov	r4,r22
    a458:	182ad43a 	srli	r21,r3,16
    a45c:	000adb40 	call	adb4 <__mulsi3>
    a460:	a00b883a 	mov	r5,r20
    a464:	8809883a 	mov	r4,r17
    a468:	1039883a 	mov	fp,r2
    a46c:	000adb40 	call	adb4 <__mulsi3>
    a470:	8809883a 	mov	r4,r17
    a474:	a80b883a 	mov	r5,r21
    a478:	1029883a 	mov	r20,r2
    a47c:	000adb40 	call	adb4 <__mulsi3>
    a480:	a80b883a 	mov	r5,r21
    a484:	b009883a 	mov	r4,r22
    a488:	1023883a 	mov	r17,r2
    a48c:	000adb40 	call	adb4 <__mulsi3>
    a490:	e006d43a 	srli	r3,fp,16
    a494:	1505883a 	add	r2,r2,r20
    a498:	1887883a 	add	r3,r3,r2
    a49c:	1d00022e 	bgeu	r3,r20,a4a8 <__udivdi3+0x468>
    a4a0:	00800074 	movhi	r2,1
    a4a4:	88a3883a 	add	r17,r17,r2
    a4a8:	1804d43a 	srli	r2,r3,16
    a4ac:	1463883a 	add	r17,r2,r17
    a4b0:	84404436 	bltu	r16,r17,a5c4 <__udivdi3+0x584>
    a4b4:	84403e26 	beq	r16,r17,a5b0 <__udivdi3+0x570>
    a4b8:	9005883a 	mov	r2,r18
    a4bc:	0007883a 	mov	r3,zero
    a4c0:	003f9106 	br	a308 <__alt_data_end+0xfffc0f28>
    a4c4:	88e2983a 	sll	r17,r17,r3
    a4c8:	80aed83a 	srl	r23,r16,r2
    a4cc:	80e0983a 	sll	r16,r16,r3
    a4d0:	882ad43a 	srli	r21,r17,16
    a4d4:	9884d83a 	srl	r2,r19,r2
    a4d8:	b809883a 	mov	r4,r23
    a4dc:	a80b883a 	mov	r5,r21
    a4e0:	98e4983a 	sll	r18,r19,r3
    a4e4:	142cb03a 	or	r22,r2,r16
    a4e8:	000ad5c0 	call	ad5c <__umodsi3>
    a4ec:	b809883a 	mov	r4,r23
    a4f0:	a80b883a 	mov	r5,r21
    a4f4:	1027883a 	mov	r19,r2
    a4f8:	8d3fffcc 	andi	r20,r17,65535
    a4fc:	000acf80 	call	acf8 <__udivsi3>
    a500:	a009883a 	mov	r4,r20
    a504:	100b883a 	mov	r5,r2
    a508:	102f883a 	mov	r23,r2
    a50c:	000adb40 	call	adb4 <__mulsi3>
    a510:	9826943a 	slli	r19,r19,16
    a514:	b008d43a 	srli	r4,r22,16
    a518:	24c8b03a 	or	r4,r4,r19
    a51c:	2080062e 	bgeu	r4,r2,a538 <__udivdi3+0x4f8>
    a520:	2449883a 	add	r4,r4,r17
    a524:	b8ffffc4 	addi	r3,r23,-1
    a528:	24403c36 	bltu	r4,r17,a61c <__udivdi3+0x5dc>
    a52c:	20803b2e 	bgeu	r4,r2,a61c <__udivdi3+0x5dc>
    a530:	bdffff84 	addi	r23,r23,-2
    a534:	2449883a 	add	r4,r4,r17
    a538:	20a1c83a 	sub	r16,r4,r2
    a53c:	a80b883a 	mov	r5,r21
    a540:	8009883a 	mov	r4,r16
    a544:	000ad5c0 	call	ad5c <__umodsi3>
    a548:	a80b883a 	mov	r5,r21
    a54c:	8009883a 	mov	r4,r16
    a550:	1027883a 	mov	r19,r2
    a554:	000acf80 	call	acf8 <__udivsi3>
    a558:	a009883a 	mov	r4,r20
    a55c:	100b883a 	mov	r5,r2
    a560:	9826943a 	slli	r19,r19,16
    a564:	1039883a 	mov	fp,r2
    a568:	000adb40 	call	adb4 <__mulsi3>
    a56c:	b13fffcc 	andi	r4,r22,65535
    a570:	24c8b03a 	or	r4,r4,r19
    a574:	2080062e 	bgeu	r4,r2,a590 <__udivdi3+0x550>
    a578:	2449883a 	add	r4,r4,r17
    a57c:	e0ffffc4 	addi	r3,fp,-1
    a580:	24402436 	bltu	r4,r17,a614 <__udivdi3+0x5d4>
    a584:	2080232e 	bgeu	r4,r2,a614 <__udivdi3+0x5d4>
    a588:	e73fff84 	addi	fp,fp,-2
    a58c:	2449883a 	add	r4,r4,r17
    a590:	b82e943a 	slli	r23,r23,16
    a594:	20a1c83a 	sub	r16,r4,r2
    a598:	bf06b03a 	or	r3,r23,fp
    a59c:	003f2806 	br	a240 <__alt_data_end+0xfffc0e60>
    a5a0:	2021883a 	mov	r16,r4
    a5a4:	003f5306 	br	a2f4 <__alt_data_end+0xfffc0f14>
    a5a8:	1821883a 	mov	r16,r3
    a5ac:	003ef406 	br	a180 <__alt_data_end+0xfffc0da0>
    a5b0:	1806943a 	slli	r3,r3,16
    a5b4:	9de6983a 	sll	r19,r19,r23
    a5b8:	e73fffcc 	andi	fp,fp,65535
    a5bc:	1f07883a 	add	r3,r3,fp
    a5c0:	98ffbd2e 	bgeu	r19,r3,a4b8 <__alt_data_end+0xfffc10d8>
    a5c4:	90bfffc4 	addi	r2,r18,-1
    a5c8:	0007883a 	mov	r3,zero
    a5cc:	003f4e06 	br	a308 <__alt_data_end+0xfffc0f28>
    a5d0:	00800604 	movi	r2,24
    a5d4:	003ef506 	br	a1ac <__alt_data_end+0xfffc0dcc>
    a5d8:	00800604 	movi	r2,24
    a5dc:	003f0b06 	br	a20c <__alt_data_end+0xfffc0e2c>
    a5e0:	00800604 	movi	r2,24
    a5e4:	003ead06 	br	a09c <__alt_data_end+0xfffc0cbc>
    a5e8:	0007883a 	mov	r3,zero
    a5ec:	00800044 	movi	r2,1
    a5f0:	003f4506 	br	a308 <__alt_data_end+0xfffc0f28>
    a5f4:	80bf8e2e 	bgeu	r16,r2,a430 <__alt_data_end+0xfffc1050>
    a5f8:	8c7fff84 	addi	r17,r17,-2
    a5fc:	8721883a 	add	r16,r16,fp
    a600:	003f8c06 	br	a434 <__alt_data_end+0xfffc1054>
    a604:	18bf762e 	bgeu	r3,r2,a3e0 <__alt_data_end+0xfffc1000>
    a608:	ad7fff84 	addi	r21,r21,-2
    a60c:	1f07883a 	add	r3,r3,fp
    a610:	003f7406 	br	a3e4 <__alt_data_end+0xfffc1004>
    a614:	1839883a 	mov	fp,r3
    a618:	003fdd06 	br	a590 <__alt_data_end+0xfffc11b0>
    a61c:	182f883a 	mov	r23,r3
    a620:	003fc506 	br	a538 <__alt_data_end+0xfffc1158>
    a624:	b5bfff84 	addi	r22,r22,-2
    a628:	3c4f883a 	add	r7,r7,r17
    a62c:	003f1a06 	br	a298 <__alt_data_end+0xfffc0eb8>
    a630:	b5bfff84 	addi	r22,r22,-2
    a634:	1c47883a 	add	r3,r3,r17
    a638:	003ebc06 	br	a12c <__alt_data_end+0xfffc0d4c>

0000a63c <__umoddi3>:
    a63c:	defff304 	addi	sp,sp,-52
    a640:	df000b15 	stw	fp,44(sp)
    a644:	dc400415 	stw	r17,16(sp)
    a648:	dc000315 	stw	r16,12(sp)
    a64c:	dfc00c15 	stw	ra,48(sp)
    a650:	ddc00a15 	stw	r23,40(sp)
    a654:	dd800915 	stw	r22,36(sp)
    a658:	dd400815 	stw	r21,32(sp)
    a65c:	dd000715 	stw	r20,28(sp)
    a660:	dcc00615 	stw	r19,24(sp)
    a664:	dc800515 	stw	r18,20(sp)
    a668:	2021883a 	mov	r16,r4
    a66c:	2823883a 	mov	r17,r5
    a670:	2839883a 	mov	fp,r5
    a674:	3800401e 	bne	r7,zero,a778 <__umoddi3+0x13c>
    a678:	3027883a 	mov	r19,r6
    a67c:	2029883a 	mov	r20,r4
    a680:	2980552e 	bgeu	r5,r6,a7d8 <__umoddi3+0x19c>
    a684:	00bfffd4 	movui	r2,65535
    a688:	1180a236 	bltu	r2,r6,a914 <__umoddi3+0x2d8>
    a68c:	01003fc4 	movi	r4,255
    a690:	2189803a 	cmpltu	r4,r4,r6
    a694:	200890fa 	slli	r4,r4,3
    a698:	3104d83a 	srl	r2,r6,r4
    a69c:	00c00074 	movhi	r3,1
    a6a0:	18c1f504 	addi	r3,r3,2004
    a6a4:	1885883a 	add	r2,r3,r2
    a6a8:	10c00003 	ldbu	r3,0(r2)
    a6ac:	00800804 	movi	r2,32
    a6b0:	1909883a 	add	r4,r3,r4
    a6b4:	1125c83a 	sub	r18,r2,r4
    a6b8:	90000526 	beq	r18,zero,a6d0 <__umoddi3+0x94>
    a6bc:	8ca2983a 	sll	r17,r17,r18
    a6c0:	8108d83a 	srl	r4,r16,r4
    a6c4:	34a6983a 	sll	r19,r6,r18
    a6c8:	84a8983a 	sll	r20,r16,r18
    a6cc:	2478b03a 	or	fp,r4,r17
    a6d0:	982cd43a 	srli	r22,r19,16
    a6d4:	e009883a 	mov	r4,fp
    a6d8:	9dffffcc 	andi	r23,r19,65535
    a6dc:	b00b883a 	mov	r5,r22
    a6e0:	000ad5c0 	call	ad5c <__umodsi3>
    a6e4:	b00b883a 	mov	r5,r22
    a6e8:	e009883a 	mov	r4,fp
    a6ec:	102b883a 	mov	r21,r2
    a6f0:	000acf80 	call	acf8 <__udivsi3>
    a6f4:	100b883a 	mov	r5,r2
    a6f8:	b809883a 	mov	r4,r23
    a6fc:	000adb40 	call	adb4 <__mulsi3>
    a700:	a82a943a 	slli	r21,r21,16
    a704:	a006d43a 	srli	r3,r20,16
    a708:	1d46b03a 	or	r3,r3,r21
    a70c:	1880032e 	bgeu	r3,r2,a71c <__umoddi3+0xe0>
    a710:	1cc7883a 	add	r3,r3,r19
    a714:	1cc00136 	bltu	r3,r19,a71c <__umoddi3+0xe0>
    a718:	18813136 	bltu	r3,r2,abe0 <__umoddi3+0x5a4>
    a71c:	18a1c83a 	sub	r16,r3,r2
    a720:	b00b883a 	mov	r5,r22
    a724:	8009883a 	mov	r4,r16
    a728:	000ad5c0 	call	ad5c <__umodsi3>
    a72c:	b00b883a 	mov	r5,r22
    a730:	8009883a 	mov	r4,r16
    a734:	1023883a 	mov	r17,r2
    a738:	000acf80 	call	acf8 <__udivsi3>
    a73c:	100b883a 	mov	r5,r2
    a740:	b809883a 	mov	r4,r23
    a744:	8822943a 	slli	r17,r17,16
    a748:	000adb40 	call	adb4 <__mulsi3>
    a74c:	a0ffffcc 	andi	r3,r20,65535
    a750:	1c46b03a 	or	r3,r3,r17
    a754:	1880042e 	bgeu	r3,r2,a768 <__umoddi3+0x12c>
    a758:	1cc7883a 	add	r3,r3,r19
    a75c:	1cc00236 	bltu	r3,r19,a768 <__umoddi3+0x12c>
    a760:	1880012e 	bgeu	r3,r2,a768 <__umoddi3+0x12c>
    a764:	1cc7883a 	add	r3,r3,r19
    a768:	1885c83a 	sub	r2,r3,r2
    a76c:	1484d83a 	srl	r2,r2,r18
    a770:	0007883a 	mov	r3,zero
    a774:	00005306 	br	a8c4 <__umoddi3+0x288>
    a778:	29c05036 	bltu	r5,r7,a8bc <__umoddi3+0x280>
    a77c:	00bfffd4 	movui	r2,65535
    a780:	11c05c2e 	bgeu	r2,r7,a8f4 <__umoddi3+0x2b8>
    a784:	00804034 	movhi	r2,256
    a788:	10bfffc4 	addi	r2,r2,-1
    a78c:	11c10636 	bltu	r2,r7,aba8 <__umoddi3+0x56c>
    a790:	01000404 	movi	r4,16
    a794:	3904d83a 	srl	r2,r7,r4
    a798:	00c00074 	movhi	r3,1
    a79c:	18c1f504 	addi	r3,r3,2004
    a7a0:	1885883a 	add	r2,r3,r2
    a7a4:	14c00003 	ldbu	r19,0(r2)
    a7a8:	00c00804 	movi	r3,32
    a7ac:	9927883a 	add	r19,r19,r4
    a7b0:	1ce9c83a 	sub	r20,r3,r19
    a7b4:	a0005c1e 	bne	r20,zero,a928 <__umoddi3+0x2ec>
    a7b8:	3c400136 	bltu	r7,r17,a7c0 <__umoddi3+0x184>
    a7bc:	81810a36 	bltu	r16,r6,abe8 <__umoddi3+0x5ac>
    a7c0:	8185c83a 	sub	r2,r16,r6
    a7c4:	89e3c83a 	sub	r17,r17,r7
    a7c8:	8089803a 	cmpltu	r4,r16,r2
    a7cc:	8939c83a 	sub	fp,r17,r4
    a7d0:	e007883a 	mov	r3,fp
    a7d4:	00003b06 	br	a8c4 <__umoddi3+0x288>
    a7d8:	3000041e 	bne	r6,zero,a7ec <__umoddi3+0x1b0>
    a7dc:	000b883a 	mov	r5,zero
    a7e0:	01000044 	movi	r4,1
    a7e4:	000acf80 	call	acf8 <__udivsi3>
    a7e8:	1027883a 	mov	r19,r2
    a7ec:	00bfffd4 	movui	r2,65535
    a7f0:	14c0442e 	bgeu	r2,r19,a904 <__umoddi3+0x2c8>
    a7f4:	00804034 	movhi	r2,256
    a7f8:	10bfffc4 	addi	r2,r2,-1
    a7fc:	14c0ec36 	bltu	r2,r19,abb0 <__umoddi3+0x574>
    a800:	00800404 	movi	r2,16
    a804:	9886d83a 	srl	r3,r19,r2
    a808:	01000074 	movhi	r4,1
    a80c:	2101f504 	addi	r4,r4,2004
    a810:	20c7883a 	add	r3,r4,r3
    a814:	18c00003 	ldbu	r3,0(r3)
    a818:	1887883a 	add	r3,r3,r2
    a81c:	00800804 	movi	r2,32
    a820:	10e5c83a 	sub	r18,r2,r3
    a824:	9000ab1e 	bne	r18,zero,aad4 <__umoddi3+0x498>
    a828:	982cd43a 	srli	r22,r19,16
    a82c:	8ce3c83a 	sub	r17,r17,r19
    a830:	9dffffcc 	andi	r23,r19,65535
    a834:	b00b883a 	mov	r5,r22
    a838:	8809883a 	mov	r4,r17
    a83c:	000ad5c0 	call	ad5c <__umodsi3>
    a840:	b00b883a 	mov	r5,r22
    a844:	8809883a 	mov	r4,r17
    a848:	102b883a 	mov	r21,r2
    a84c:	000acf80 	call	acf8 <__udivsi3>
    a850:	b80b883a 	mov	r5,r23
    a854:	1009883a 	mov	r4,r2
    a858:	000adb40 	call	adb4 <__mulsi3>
    a85c:	a82a943a 	slli	r21,r21,16
    a860:	a006d43a 	srli	r3,r20,16
    a864:	1d46b03a 	or	r3,r3,r21
    a868:	1880042e 	bgeu	r3,r2,a87c <__umoddi3+0x240>
    a86c:	1cc7883a 	add	r3,r3,r19
    a870:	1cc00236 	bltu	r3,r19,a87c <__umoddi3+0x240>
    a874:	1880012e 	bgeu	r3,r2,a87c <__umoddi3+0x240>
    a878:	1cc7883a 	add	r3,r3,r19
    a87c:	18a1c83a 	sub	r16,r3,r2
    a880:	b00b883a 	mov	r5,r22
    a884:	8009883a 	mov	r4,r16
    a888:	000ad5c0 	call	ad5c <__umodsi3>
    a88c:	1023883a 	mov	r17,r2
    a890:	b00b883a 	mov	r5,r22
    a894:	8009883a 	mov	r4,r16
    a898:	000acf80 	call	acf8 <__udivsi3>
    a89c:	8822943a 	slli	r17,r17,16
    a8a0:	b80b883a 	mov	r5,r23
    a8a4:	1009883a 	mov	r4,r2
    a8a8:	000adb40 	call	adb4 <__mulsi3>
    a8ac:	a53fffcc 	andi	r20,r20,65535
    a8b0:	a446b03a 	or	r3,r20,r17
    a8b4:	18bfac2e 	bgeu	r3,r2,a768 <__alt_data_end+0xfffc1388>
    a8b8:	003fa706 	br	a758 <__alt_data_end+0xfffc1378>
    a8bc:	2005883a 	mov	r2,r4
    a8c0:	2807883a 	mov	r3,r5
    a8c4:	dfc00c17 	ldw	ra,48(sp)
    a8c8:	df000b17 	ldw	fp,44(sp)
    a8cc:	ddc00a17 	ldw	r23,40(sp)
    a8d0:	dd800917 	ldw	r22,36(sp)
    a8d4:	dd400817 	ldw	r21,32(sp)
    a8d8:	dd000717 	ldw	r20,28(sp)
    a8dc:	dcc00617 	ldw	r19,24(sp)
    a8e0:	dc800517 	ldw	r18,20(sp)
    a8e4:	dc400417 	ldw	r17,16(sp)
    a8e8:	dc000317 	ldw	r16,12(sp)
    a8ec:	dec00d04 	addi	sp,sp,52
    a8f0:	f800283a 	ret
    a8f4:	04c03fc4 	movi	r19,255
    a8f8:	99c9803a 	cmpltu	r4,r19,r7
    a8fc:	200890fa 	slli	r4,r4,3
    a900:	003fa406 	br	a794 <__alt_data_end+0xfffc13b4>
    a904:	00803fc4 	movi	r2,255
    a908:	14c5803a 	cmpltu	r2,r2,r19
    a90c:	100490fa 	slli	r2,r2,3
    a910:	003fbc06 	br	a804 <__alt_data_end+0xfffc1424>
    a914:	00804034 	movhi	r2,256
    a918:	10bfffc4 	addi	r2,r2,-1
    a91c:	1180a636 	bltu	r2,r6,abb8 <__umoddi3+0x57c>
    a920:	01000404 	movi	r4,16
    a924:	003f5c06 	br	a698 <__alt_data_end+0xfffc12b8>
    a928:	3d0e983a 	sll	r7,r7,r20
    a92c:	34ead83a 	srl	r21,r6,r19
    a930:	8cc6d83a 	srl	r3,r17,r19
    a934:	8d10983a 	sll	r8,r17,r20
    a938:	3d6ab03a 	or	r21,r7,r21
    a93c:	a82cd43a 	srli	r22,r21,16
    a940:	84e2d83a 	srl	r17,r16,r19
    a944:	1809883a 	mov	r4,r3
    a948:	b00b883a 	mov	r5,r22
    a94c:	8a22b03a 	or	r17,r17,r8
    a950:	3524983a 	sll	r18,r6,r20
    a954:	dc400015 	stw	r17,0(sp)
    a958:	d8c00115 	stw	r3,4(sp)
    a95c:	000ad5c0 	call	ad5c <__umodsi3>
    a960:	d8c00117 	ldw	r3,4(sp)
    a964:	b00b883a 	mov	r5,r22
    a968:	1039883a 	mov	fp,r2
    a96c:	1809883a 	mov	r4,r3
    a970:	000acf80 	call	acf8 <__udivsi3>
    a974:	adffffcc 	andi	r23,r21,65535
    a978:	100b883a 	mov	r5,r2
    a97c:	b809883a 	mov	r4,r23
    a980:	1023883a 	mov	r17,r2
    a984:	000adb40 	call	adb4 <__mulsi3>
    a988:	d9400017 	ldw	r5,0(sp)
    a98c:	e008943a 	slli	r4,fp,16
    a990:	8520983a 	sll	r16,r16,r20
    a994:	2806d43a 	srli	r3,r5,16
    a998:	1906b03a 	or	r3,r3,r4
    a99c:	1880042e 	bgeu	r3,r2,a9b0 <__umoddi3+0x374>
    a9a0:	1d47883a 	add	r3,r3,r21
    a9a4:	893fffc4 	addi	r4,r17,-1
    a9a8:	1d40892e 	bgeu	r3,r21,abd0 <__umoddi3+0x594>
    a9ac:	2023883a 	mov	r17,r4
    a9b0:	18b9c83a 	sub	fp,r3,r2
    a9b4:	b00b883a 	mov	r5,r22
    a9b8:	e009883a 	mov	r4,fp
    a9bc:	000ad5c0 	call	ad5c <__umodsi3>
    a9c0:	b00b883a 	mov	r5,r22
    a9c4:	e009883a 	mov	r4,fp
    a9c8:	d8800215 	stw	r2,8(sp)
    a9cc:	000acf80 	call	acf8 <__udivsi3>
    a9d0:	100b883a 	mov	r5,r2
    a9d4:	b809883a 	mov	r4,r23
    a9d8:	102d883a 	mov	r22,r2
    a9dc:	000adb40 	call	adb4 <__mulsi3>
    a9e0:	d9800217 	ldw	r6,8(sp)
    a9e4:	d8c00017 	ldw	r3,0(sp)
    a9e8:	300c943a 	slli	r6,r6,16
    a9ec:	1a3fffcc 	andi	r8,r3,65535
    a9f0:	4190b03a 	or	r8,r8,r6
    a9f4:	4080042e 	bgeu	r8,r2,aa08 <__umoddi3+0x3cc>
    a9f8:	4551883a 	add	r8,r8,r21
    a9fc:	b0ffffc4 	addi	r3,r22,-1
    aa00:	45406f2e 	bgeu	r8,r21,abc0 <__umoddi3+0x584>
    aa04:	182d883a 	mov	r22,r3
    aa08:	880e943a 	slli	r7,r17,16
    aa0c:	9006d43a 	srli	r3,r18,16
    aa10:	91bfffcc 	andi	r6,r18,65535
    aa14:	3dacb03a 	or	r22,r7,r22
    aa18:	b02ed43a 	srli	r23,r22,16
    aa1c:	b5bfffcc 	andi	r22,r22,65535
    aa20:	300b883a 	mov	r5,r6
    aa24:	b009883a 	mov	r4,r22
    aa28:	40a3c83a 	sub	r17,r8,r2
    aa2c:	d8c00115 	stw	r3,4(sp)
    aa30:	d9800215 	stw	r6,8(sp)
    aa34:	000adb40 	call	adb4 <__mulsi3>
    aa38:	d9800217 	ldw	r6,8(sp)
    aa3c:	b809883a 	mov	r4,r23
    aa40:	1039883a 	mov	fp,r2
    aa44:	300b883a 	mov	r5,r6
    aa48:	000adb40 	call	adb4 <__mulsi3>
    aa4c:	d8c00117 	ldw	r3,4(sp)
    aa50:	b809883a 	mov	r4,r23
    aa54:	d8800215 	stw	r2,8(sp)
    aa58:	180b883a 	mov	r5,r3
    aa5c:	000adb40 	call	adb4 <__mulsi3>
    aa60:	d8c00117 	ldw	r3,4(sp)
    aa64:	b009883a 	mov	r4,r22
    aa68:	102f883a 	mov	r23,r2
    aa6c:	180b883a 	mov	r5,r3
    aa70:	000adb40 	call	adb4 <__mulsi3>
    aa74:	d9800217 	ldw	r6,8(sp)
    aa78:	e006d43a 	srli	r3,fp,16
    aa7c:	1185883a 	add	r2,r2,r6
    aa80:	1885883a 	add	r2,r3,r2
    aa84:	1180022e 	bgeu	r2,r6,aa90 <__umoddi3+0x454>
    aa88:	00c00074 	movhi	r3,1
    aa8c:	b8ef883a 	add	r23,r23,r3
    aa90:	1006d43a 	srli	r3,r2,16
    aa94:	1004943a 	slli	r2,r2,16
    aa98:	e73fffcc 	andi	fp,fp,65535
    aa9c:	1dc7883a 	add	r3,r3,r23
    aaa0:	1739883a 	add	fp,r2,fp
    aaa4:	88c03a36 	bltu	r17,r3,ab90 <__umoddi3+0x554>
    aaa8:	88c05126 	beq	r17,r3,abf0 <__umoddi3+0x5b4>
    aaac:	88c9c83a 	sub	r4,r17,r3
    aab0:	e00f883a 	mov	r7,fp
    aab4:	81cfc83a 	sub	r7,r16,r7
    aab8:	81c7803a 	cmpltu	r3,r16,r7
    aabc:	20c7c83a 	sub	r3,r4,r3
    aac0:	1cc4983a 	sll	r2,r3,r19
    aac4:	3d0ed83a 	srl	r7,r7,r20
    aac8:	1d06d83a 	srl	r3,r3,r20
    aacc:	11c4b03a 	or	r2,r2,r7
    aad0:	003f7c06 	br	a8c4 <__alt_data_end+0xfffc14e4>
    aad4:	9ca6983a 	sll	r19,r19,r18
    aad8:	88f8d83a 	srl	fp,r17,r3
    aadc:	80c4d83a 	srl	r2,r16,r3
    aae0:	982cd43a 	srli	r22,r19,16
    aae4:	8ca2983a 	sll	r17,r17,r18
    aae8:	e009883a 	mov	r4,fp
    aaec:	b00b883a 	mov	r5,r22
    aaf0:	146ab03a 	or	r21,r2,r17
    aaf4:	000ad5c0 	call	ad5c <__umodsi3>
    aaf8:	b00b883a 	mov	r5,r22
    aafc:	e009883a 	mov	r4,fp
    ab00:	1029883a 	mov	r20,r2
    ab04:	9dffffcc 	andi	r23,r19,65535
    ab08:	000acf80 	call	acf8 <__udivsi3>
    ab0c:	b809883a 	mov	r4,r23
    ab10:	100b883a 	mov	r5,r2
    ab14:	000adb40 	call	adb4 <__mulsi3>
    ab18:	a008943a 	slli	r4,r20,16
    ab1c:	a806d43a 	srli	r3,r21,16
    ab20:	84a8983a 	sll	r20,r16,r18
    ab24:	1906b03a 	or	r3,r3,r4
    ab28:	1880042e 	bgeu	r3,r2,ab3c <__umoddi3+0x500>
    ab2c:	1cc7883a 	add	r3,r3,r19
    ab30:	1cc00236 	bltu	r3,r19,ab3c <__umoddi3+0x500>
    ab34:	1880012e 	bgeu	r3,r2,ab3c <__umoddi3+0x500>
    ab38:	1cc7883a 	add	r3,r3,r19
    ab3c:	18a3c83a 	sub	r17,r3,r2
    ab40:	b00b883a 	mov	r5,r22
    ab44:	8809883a 	mov	r4,r17
    ab48:	000ad5c0 	call	ad5c <__umodsi3>
    ab4c:	b00b883a 	mov	r5,r22
    ab50:	8809883a 	mov	r4,r17
    ab54:	1021883a 	mov	r16,r2
    ab58:	000acf80 	call	acf8 <__udivsi3>
    ab5c:	100b883a 	mov	r5,r2
    ab60:	b809883a 	mov	r4,r23
    ab64:	8020943a 	slli	r16,r16,16
    ab68:	000adb40 	call	adb4 <__mulsi3>
    ab6c:	a8ffffcc 	andi	r3,r21,65535
    ab70:	1c06b03a 	or	r3,r3,r16
    ab74:	1880042e 	bgeu	r3,r2,ab88 <__umoddi3+0x54c>
    ab78:	1cc7883a 	add	r3,r3,r19
    ab7c:	1cc00236 	bltu	r3,r19,ab88 <__umoddi3+0x54c>
    ab80:	1880012e 	bgeu	r3,r2,ab88 <__umoddi3+0x54c>
    ab84:	1cc7883a 	add	r3,r3,r19
    ab88:	18a3c83a 	sub	r17,r3,r2
    ab8c:	003f2906 	br	a834 <__alt_data_end+0xfffc1454>
    ab90:	e48fc83a 	sub	r7,fp,r18
    ab94:	1d49c83a 	sub	r4,r3,r21
    ab98:	e1f9803a 	cmpltu	fp,fp,r7
    ab9c:	2739c83a 	sub	fp,r4,fp
    aba0:	8f09c83a 	sub	r4,r17,fp
    aba4:	003fc306 	br	aab4 <__alt_data_end+0xfffc16d4>
    aba8:	01000604 	movi	r4,24
    abac:	003ef906 	br	a794 <__alt_data_end+0xfffc13b4>
    abb0:	00800604 	movi	r2,24
    abb4:	003f1306 	br	a804 <__alt_data_end+0xfffc1424>
    abb8:	01000604 	movi	r4,24
    abbc:	003eb606 	br	a698 <__alt_data_end+0xfffc12b8>
    abc0:	40bf902e 	bgeu	r8,r2,aa04 <__alt_data_end+0xfffc1624>
    abc4:	b5bfff84 	addi	r22,r22,-2
    abc8:	4551883a 	add	r8,r8,r21
    abcc:	003f8e06 	br	aa08 <__alt_data_end+0xfffc1628>
    abd0:	18bf762e 	bgeu	r3,r2,a9ac <__alt_data_end+0xfffc15cc>
    abd4:	8c7fff84 	addi	r17,r17,-2
    abd8:	1d47883a 	add	r3,r3,r21
    abdc:	003f7406 	br	a9b0 <__alt_data_end+0xfffc15d0>
    abe0:	1cc7883a 	add	r3,r3,r19
    abe4:	003ecd06 	br	a71c <__alt_data_end+0xfffc133c>
    abe8:	8005883a 	mov	r2,r16
    abec:	003ef806 	br	a7d0 <__alt_data_end+0xfffc13f0>
    abf0:	873fe736 	bltu	r16,fp,ab90 <__alt_data_end+0xfffc17b0>
    abf4:	e00f883a 	mov	r7,fp
    abf8:	0009883a 	mov	r4,zero
    abfc:	003fad06 	br	aab4 <__alt_data_end+0xfffc16d4>

0000ac00 <__divsi3>:
    ac00:	20001b16 	blt	r4,zero,ac70 <__divsi3+0x70>
    ac04:	000f883a 	mov	r7,zero
    ac08:	28001616 	blt	r5,zero,ac64 <__divsi3+0x64>
    ac0c:	200d883a 	mov	r6,r4
    ac10:	29001a2e 	bgeu	r5,r4,ac7c <__divsi3+0x7c>
    ac14:	00800804 	movi	r2,32
    ac18:	00c00044 	movi	r3,1
    ac1c:	00000106 	br	ac24 <__divsi3+0x24>
    ac20:	10000d26 	beq	r2,zero,ac58 <__divsi3+0x58>
    ac24:	294b883a 	add	r5,r5,r5
    ac28:	10bfffc4 	addi	r2,r2,-1
    ac2c:	18c7883a 	add	r3,r3,r3
    ac30:	293ffb36 	bltu	r5,r4,ac20 <__alt_data_end+0xfffc1840>
    ac34:	0005883a 	mov	r2,zero
    ac38:	18000726 	beq	r3,zero,ac58 <__divsi3+0x58>
    ac3c:	0005883a 	mov	r2,zero
    ac40:	31400236 	bltu	r6,r5,ac4c <__divsi3+0x4c>
    ac44:	314dc83a 	sub	r6,r6,r5
    ac48:	10c4b03a 	or	r2,r2,r3
    ac4c:	1806d07a 	srli	r3,r3,1
    ac50:	280ad07a 	srli	r5,r5,1
    ac54:	183ffa1e 	bne	r3,zero,ac40 <__alt_data_end+0xfffc1860>
    ac58:	38000126 	beq	r7,zero,ac60 <__divsi3+0x60>
    ac5c:	0085c83a 	sub	r2,zero,r2
    ac60:	f800283a 	ret
    ac64:	014bc83a 	sub	r5,zero,r5
    ac68:	39c0005c 	xori	r7,r7,1
    ac6c:	003fe706 	br	ac0c <__alt_data_end+0xfffc182c>
    ac70:	0109c83a 	sub	r4,zero,r4
    ac74:	01c00044 	movi	r7,1
    ac78:	003fe306 	br	ac08 <__alt_data_end+0xfffc1828>
    ac7c:	00c00044 	movi	r3,1
    ac80:	003fee06 	br	ac3c <__alt_data_end+0xfffc185c>

0000ac84 <__modsi3>:
    ac84:	20001716 	blt	r4,zero,ace4 <__modsi3+0x60>
    ac88:	000f883a 	mov	r7,zero
    ac8c:	2005883a 	mov	r2,r4
    ac90:	28001216 	blt	r5,zero,acdc <__modsi3+0x58>
    ac94:	2900162e 	bgeu	r5,r4,acf0 <__modsi3+0x6c>
    ac98:	01800804 	movi	r6,32
    ac9c:	00c00044 	movi	r3,1
    aca0:	00000106 	br	aca8 <__modsi3+0x24>
    aca4:	30000a26 	beq	r6,zero,acd0 <__modsi3+0x4c>
    aca8:	294b883a 	add	r5,r5,r5
    acac:	31bfffc4 	addi	r6,r6,-1
    acb0:	18c7883a 	add	r3,r3,r3
    acb4:	293ffb36 	bltu	r5,r4,aca4 <__alt_data_end+0xfffc18c4>
    acb8:	18000526 	beq	r3,zero,acd0 <__modsi3+0x4c>
    acbc:	1806d07a 	srli	r3,r3,1
    acc0:	11400136 	bltu	r2,r5,acc8 <__modsi3+0x44>
    acc4:	1145c83a 	sub	r2,r2,r5
    acc8:	280ad07a 	srli	r5,r5,1
    accc:	183ffb1e 	bne	r3,zero,acbc <__alt_data_end+0xfffc18dc>
    acd0:	38000126 	beq	r7,zero,acd8 <__modsi3+0x54>
    acd4:	0085c83a 	sub	r2,zero,r2
    acd8:	f800283a 	ret
    acdc:	014bc83a 	sub	r5,zero,r5
    ace0:	003fec06 	br	ac94 <__alt_data_end+0xfffc18b4>
    ace4:	0109c83a 	sub	r4,zero,r4
    ace8:	01c00044 	movi	r7,1
    acec:	003fe706 	br	ac8c <__alt_data_end+0xfffc18ac>
    acf0:	00c00044 	movi	r3,1
    acf4:	003ff106 	br	acbc <__alt_data_end+0xfffc18dc>

0000acf8 <__udivsi3>:
    acf8:	200d883a 	mov	r6,r4
    acfc:	2900152e 	bgeu	r5,r4,ad54 <__udivsi3+0x5c>
    ad00:	28001416 	blt	r5,zero,ad54 <__udivsi3+0x5c>
    ad04:	00800804 	movi	r2,32
    ad08:	00c00044 	movi	r3,1
    ad0c:	00000206 	br	ad18 <__udivsi3+0x20>
    ad10:	10000e26 	beq	r2,zero,ad4c <__udivsi3+0x54>
    ad14:	28000516 	blt	r5,zero,ad2c <__udivsi3+0x34>
    ad18:	294b883a 	add	r5,r5,r5
    ad1c:	10bfffc4 	addi	r2,r2,-1
    ad20:	18c7883a 	add	r3,r3,r3
    ad24:	293ffa36 	bltu	r5,r4,ad10 <__alt_data_end+0xfffc1930>
    ad28:	18000826 	beq	r3,zero,ad4c <__udivsi3+0x54>
    ad2c:	0005883a 	mov	r2,zero
    ad30:	31400236 	bltu	r6,r5,ad3c <__udivsi3+0x44>
    ad34:	314dc83a 	sub	r6,r6,r5
    ad38:	10c4b03a 	or	r2,r2,r3
    ad3c:	1806d07a 	srli	r3,r3,1
    ad40:	280ad07a 	srli	r5,r5,1
    ad44:	183ffa1e 	bne	r3,zero,ad30 <__alt_data_end+0xfffc1950>
    ad48:	f800283a 	ret
    ad4c:	0005883a 	mov	r2,zero
    ad50:	f800283a 	ret
    ad54:	00c00044 	movi	r3,1
    ad58:	003ff406 	br	ad2c <__alt_data_end+0xfffc194c>

0000ad5c <__umodsi3>:
    ad5c:	2005883a 	mov	r2,r4
    ad60:	2900122e 	bgeu	r5,r4,adac <__umodsi3+0x50>
    ad64:	28001116 	blt	r5,zero,adac <__umodsi3+0x50>
    ad68:	01800804 	movi	r6,32
    ad6c:	00c00044 	movi	r3,1
    ad70:	00000206 	br	ad7c <__umodsi3+0x20>
    ad74:	30000c26 	beq	r6,zero,ada8 <__umodsi3+0x4c>
    ad78:	28000516 	blt	r5,zero,ad90 <__umodsi3+0x34>
    ad7c:	294b883a 	add	r5,r5,r5
    ad80:	31bfffc4 	addi	r6,r6,-1
    ad84:	18c7883a 	add	r3,r3,r3
    ad88:	293ffa36 	bltu	r5,r4,ad74 <__alt_data_end+0xfffc1994>
    ad8c:	18000626 	beq	r3,zero,ada8 <__umodsi3+0x4c>
    ad90:	1806d07a 	srli	r3,r3,1
    ad94:	11400136 	bltu	r2,r5,ad9c <__umodsi3+0x40>
    ad98:	1145c83a 	sub	r2,r2,r5
    ad9c:	280ad07a 	srli	r5,r5,1
    ada0:	183ffb1e 	bne	r3,zero,ad90 <__alt_data_end+0xfffc19b0>
    ada4:	f800283a 	ret
    ada8:	f800283a 	ret
    adac:	00c00044 	movi	r3,1
    adb0:	003ff706 	br	ad90 <__alt_data_end+0xfffc19b0>

0000adb4 <__mulsi3>:
    adb4:	0005883a 	mov	r2,zero
    adb8:	20000726 	beq	r4,zero,add8 <__mulsi3+0x24>
    adbc:	20c0004c 	andi	r3,r4,1
    adc0:	2008d07a 	srli	r4,r4,1
    adc4:	18000126 	beq	r3,zero,adcc <__mulsi3+0x18>
    adc8:	1145883a 	add	r2,r2,r5
    adcc:	294b883a 	add	r5,r5,r5
    add0:	203ffa1e 	bne	r4,zero,adbc <__alt_data_end+0xfffc19dc>
    add4:	f800283a 	ret
    add8:	f800283a 	ret

0000addc <__adddf3>:
    addc:	02c00434 	movhi	r11,16
    ade0:	5affffc4 	addi	r11,r11,-1
    ade4:	2806d7fa 	srli	r3,r5,31
    ade8:	2ad4703a 	and	r10,r5,r11
    adec:	3ad2703a 	and	r9,r7,r11
    adf0:	3804d53a 	srli	r2,r7,20
    adf4:	3018d77a 	srli	r12,r6,29
    adf8:	280ad53a 	srli	r5,r5,20
    adfc:	501490fa 	slli	r10,r10,3
    ae00:	2010d77a 	srli	r8,r4,29
    ae04:	481290fa 	slli	r9,r9,3
    ae08:	380ed7fa 	srli	r7,r7,31
    ae0c:	defffb04 	addi	sp,sp,-20
    ae10:	dc800215 	stw	r18,8(sp)
    ae14:	dc400115 	stw	r17,4(sp)
    ae18:	dc000015 	stw	r16,0(sp)
    ae1c:	dfc00415 	stw	ra,16(sp)
    ae20:	dcc00315 	stw	r19,12(sp)
    ae24:	1c803fcc 	andi	r18,r3,255
    ae28:	2c01ffcc 	andi	r16,r5,2047
    ae2c:	5210b03a 	or	r8,r10,r8
    ae30:	202290fa 	slli	r17,r4,3
    ae34:	1081ffcc 	andi	r2,r2,2047
    ae38:	4b12b03a 	or	r9,r9,r12
    ae3c:	300c90fa 	slli	r6,r6,3
    ae40:	91c07526 	beq	r18,r7,b018 <__adddf3+0x23c>
    ae44:	8087c83a 	sub	r3,r16,r2
    ae48:	00c0ab0e 	bge	zero,r3,b0f8 <__adddf3+0x31c>
    ae4c:	10002a1e 	bne	r2,zero,aef8 <__adddf3+0x11c>
    ae50:	4984b03a 	or	r2,r9,r6
    ae54:	1000961e 	bne	r2,zero,b0b0 <__adddf3+0x2d4>
    ae58:	888001cc 	andi	r2,r17,7
    ae5c:	10000726 	beq	r2,zero,ae7c <__adddf3+0xa0>
    ae60:	888003cc 	andi	r2,r17,15
    ae64:	00c00104 	movi	r3,4
    ae68:	10c00426 	beq	r2,r3,ae7c <__adddf3+0xa0>
    ae6c:	88c7883a 	add	r3,r17,r3
    ae70:	1c63803a 	cmpltu	r17,r3,r17
    ae74:	4451883a 	add	r8,r8,r17
    ae78:	1823883a 	mov	r17,r3
    ae7c:	4080202c 	andhi	r2,r8,128
    ae80:	10005926 	beq	r2,zero,afe8 <__adddf3+0x20c>
    ae84:	84000044 	addi	r16,r16,1
    ae88:	0081ffc4 	movi	r2,2047
    ae8c:	8080ba26 	beq	r16,r2,b178 <__adddf3+0x39c>
    ae90:	00bfe034 	movhi	r2,65408
    ae94:	10bfffc4 	addi	r2,r2,-1
    ae98:	4090703a 	and	r8,r8,r2
    ae9c:	4004977a 	slli	r2,r8,29
    aea0:	4010927a 	slli	r8,r8,9
    aea4:	8822d0fa 	srli	r17,r17,3
    aea8:	8401ffcc 	andi	r16,r16,2047
    aeac:	4010d33a 	srli	r8,r8,12
    aeb0:	9007883a 	mov	r3,r18
    aeb4:	1444b03a 	or	r2,r2,r17
    aeb8:	8401ffcc 	andi	r16,r16,2047
    aebc:	8020953a 	slli	r16,r16,20
    aec0:	18c03fcc 	andi	r3,r3,255
    aec4:	01000434 	movhi	r4,16
    aec8:	213fffc4 	addi	r4,r4,-1
    aecc:	180697fa 	slli	r3,r3,31
    aed0:	4110703a 	and	r8,r8,r4
    aed4:	4410b03a 	or	r8,r8,r16
    aed8:	40c6b03a 	or	r3,r8,r3
    aedc:	dfc00417 	ldw	ra,16(sp)
    aee0:	dcc00317 	ldw	r19,12(sp)
    aee4:	dc800217 	ldw	r18,8(sp)
    aee8:	dc400117 	ldw	r17,4(sp)
    aeec:	dc000017 	ldw	r16,0(sp)
    aef0:	dec00504 	addi	sp,sp,20
    aef4:	f800283a 	ret
    aef8:	0081ffc4 	movi	r2,2047
    aefc:	80bfd626 	beq	r16,r2,ae58 <__alt_data_end+0xfffc1a78>
    af00:	4a402034 	orhi	r9,r9,128
    af04:	00800e04 	movi	r2,56
    af08:	10c09f16 	blt	r2,r3,b188 <__adddf3+0x3ac>
    af0c:	008007c4 	movi	r2,31
    af10:	10c0c216 	blt	r2,r3,b21c <__adddf3+0x440>
    af14:	00800804 	movi	r2,32
    af18:	10c5c83a 	sub	r2,r2,r3
    af1c:	488a983a 	sll	r5,r9,r2
    af20:	30c8d83a 	srl	r4,r6,r3
    af24:	3084983a 	sll	r2,r6,r2
    af28:	48c6d83a 	srl	r3,r9,r3
    af2c:	290cb03a 	or	r6,r5,r4
    af30:	1004c03a 	cmpne	r2,r2,zero
    af34:	308cb03a 	or	r6,r6,r2
    af38:	898dc83a 	sub	r6,r17,r6
    af3c:	89a3803a 	cmpltu	r17,r17,r6
    af40:	40d1c83a 	sub	r8,r8,r3
    af44:	4451c83a 	sub	r8,r8,r17
    af48:	3023883a 	mov	r17,r6
    af4c:	4080202c 	andhi	r2,r8,128
    af50:	10002326 	beq	r2,zero,afe0 <__adddf3+0x204>
    af54:	04c02034 	movhi	r19,128
    af58:	9cffffc4 	addi	r19,r19,-1
    af5c:	44e6703a 	and	r19,r8,r19
    af60:	98007626 	beq	r19,zero,b13c <__adddf3+0x360>
    af64:	9809883a 	mov	r4,r19
    af68:	000d61c0 	call	d61c <__clzsi2>
    af6c:	10fffe04 	addi	r3,r2,-8
    af70:	010007c4 	movi	r4,31
    af74:	20c07716 	blt	r4,r3,b154 <__adddf3+0x378>
    af78:	00800804 	movi	r2,32
    af7c:	10c5c83a 	sub	r2,r2,r3
    af80:	8884d83a 	srl	r2,r17,r2
    af84:	98d0983a 	sll	r8,r19,r3
    af88:	88e2983a 	sll	r17,r17,r3
    af8c:	1204b03a 	or	r2,r2,r8
    af90:	1c007416 	blt	r3,r16,b164 <__adddf3+0x388>
    af94:	1c21c83a 	sub	r16,r3,r16
    af98:	82000044 	addi	r8,r16,1
    af9c:	00c007c4 	movi	r3,31
    afa0:	1a009116 	blt	r3,r8,b1e8 <__adddf3+0x40c>
    afa4:	00c00804 	movi	r3,32
    afa8:	1a07c83a 	sub	r3,r3,r8
    afac:	8a08d83a 	srl	r4,r17,r8
    afb0:	88e2983a 	sll	r17,r17,r3
    afb4:	10c6983a 	sll	r3,r2,r3
    afb8:	1210d83a 	srl	r8,r2,r8
    afbc:	8804c03a 	cmpne	r2,r17,zero
    afc0:	1906b03a 	or	r3,r3,r4
    afc4:	18a2b03a 	or	r17,r3,r2
    afc8:	0021883a 	mov	r16,zero
    afcc:	003fa206 	br	ae58 <__alt_data_end+0xfffc1a78>
    afd0:	1890b03a 	or	r8,r3,r2
    afd4:	40017d26 	beq	r8,zero,b5cc <__adddf3+0x7f0>
    afd8:	1011883a 	mov	r8,r2
    afdc:	1823883a 	mov	r17,r3
    afe0:	888001cc 	andi	r2,r17,7
    afe4:	103f9e1e 	bne	r2,zero,ae60 <__alt_data_end+0xfffc1a80>
    afe8:	4004977a 	slli	r2,r8,29
    afec:	8822d0fa 	srli	r17,r17,3
    aff0:	4010d0fa 	srli	r8,r8,3
    aff4:	9007883a 	mov	r3,r18
    aff8:	1444b03a 	or	r2,r2,r17
    affc:	0101ffc4 	movi	r4,2047
    b000:	81002426 	beq	r16,r4,b094 <__adddf3+0x2b8>
    b004:	8120703a 	and	r16,r16,r4
    b008:	01000434 	movhi	r4,16
    b00c:	213fffc4 	addi	r4,r4,-1
    b010:	4110703a 	and	r8,r8,r4
    b014:	003fa806 	br	aeb8 <__alt_data_end+0xfffc1ad8>
    b018:	8089c83a 	sub	r4,r16,r2
    b01c:	01005e0e 	bge	zero,r4,b198 <__adddf3+0x3bc>
    b020:	10002b26 	beq	r2,zero,b0d0 <__adddf3+0x2f4>
    b024:	0081ffc4 	movi	r2,2047
    b028:	80bf8b26 	beq	r16,r2,ae58 <__alt_data_end+0xfffc1a78>
    b02c:	4a402034 	orhi	r9,r9,128
    b030:	00800e04 	movi	r2,56
    b034:	1100a40e 	bge	r2,r4,b2c8 <__adddf3+0x4ec>
    b038:	498cb03a 	or	r6,r9,r6
    b03c:	300ac03a 	cmpne	r5,r6,zero
    b040:	0013883a 	mov	r9,zero
    b044:	2c4b883a 	add	r5,r5,r17
    b048:	2c63803a 	cmpltu	r17,r5,r17
    b04c:	4a11883a 	add	r8,r9,r8
    b050:	8a11883a 	add	r8,r17,r8
    b054:	2823883a 	mov	r17,r5
    b058:	4080202c 	andhi	r2,r8,128
    b05c:	103fe026 	beq	r2,zero,afe0 <__alt_data_end+0xfffc1c00>
    b060:	84000044 	addi	r16,r16,1
    b064:	0081ffc4 	movi	r2,2047
    b068:	8080d226 	beq	r16,r2,b3b4 <__adddf3+0x5d8>
    b06c:	00bfe034 	movhi	r2,65408
    b070:	10bfffc4 	addi	r2,r2,-1
    b074:	4090703a 	and	r8,r8,r2
    b078:	880ad07a 	srli	r5,r17,1
    b07c:	400897fa 	slli	r4,r8,31
    b080:	88c0004c 	andi	r3,r17,1
    b084:	28e2b03a 	or	r17,r5,r3
    b088:	4010d07a 	srli	r8,r8,1
    b08c:	2462b03a 	or	r17,r4,r17
    b090:	003f7106 	br	ae58 <__alt_data_end+0xfffc1a78>
    b094:	4088b03a 	or	r4,r8,r2
    b098:	20014526 	beq	r4,zero,b5b0 <__adddf3+0x7d4>
    b09c:	01000434 	movhi	r4,16
    b0a0:	42000234 	orhi	r8,r8,8
    b0a4:	213fffc4 	addi	r4,r4,-1
    b0a8:	4110703a 	and	r8,r8,r4
    b0ac:	003f8206 	br	aeb8 <__alt_data_end+0xfffc1ad8>
    b0b0:	18ffffc4 	addi	r3,r3,-1
    b0b4:	1800491e 	bne	r3,zero,b1dc <__adddf3+0x400>
    b0b8:	898bc83a 	sub	r5,r17,r6
    b0bc:	8963803a 	cmpltu	r17,r17,r5
    b0c0:	4251c83a 	sub	r8,r8,r9
    b0c4:	4451c83a 	sub	r8,r8,r17
    b0c8:	2823883a 	mov	r17,r5
    b0cc:	003f9f06 	br	af4c <__alt_data_end+0xfffc1b6c>
    b0d0:	4984b03a 	or	r2,r9,r6
    b0d4:	103f6026 	beq	r2,zero,ae58 <__alt_data_end+0xfffc1a78>
    b0d8:	213fffc4 	addi	r4,r4,-1
    b0dc:	2000931e 	bne	r4,zero,b32c <__adddf3+0x550>
    b0e0:	898d883a 	add	r6,r17,r6
    b0e4:	3463803a 	cmpltu	r17,r6,r17
    b0e8:	4251883a 	add	r8,r8,r9
    b0ec:	8a11883a 	add	r8,r17,r8
    b0f0:	3023883a 	mov	r17,r6
    b0f4:	003fd806 	br	b058 <__alt_data_end+0xfffc1c78>
    b0f8:	1800541e 	bne	r3,zero,b24c <__adddf3+0x470>
    b0fc:	80800044 	addi	r2,r16,1
    b100:	1081ffcc 	andi	r2,r2,2047
    b104:	00c00044 	movi	r3,1
    b108:	1880a00e 	bge	r3,r2,b38c <__adddf3+0x5b0>
    b10c:	8989c83a 	sub	r4,r17,r6
    b110:	8905803a 	cmpltu	r2,r17,r4
    b114:	4267c83a 	sub	r19,r8,r9
    b118:	98a7c83a 	sub	r19,r19,r2
    b11c:	9880202c 	andhi	r2,r19,128
    b120:	10006326 	beq	r2,zero,b2b0 <__adddf3+0x4d4>
    b124:	3463c83a 	sub	r17,r6,r17
    b128:	4a07c83a 	sub	r3,r9,r8
    b12c:	344d803a 	cmpltu	r6,r6,r17
    b130:	19a7c83a 	sub	r19,r3,r6
    b134:	3825883a 	mov	r18,r7
    b138:	983f8a1e 	bne	r19,zero,af64 <__alt_data_end+0xfffc1b84>
    b13c:	8809883a 	mov	r4,r17
    b140:	000d61c0 	call	d61c <__clzsi2>
    b144:	10800804 	addi	r2,r2,32
    b148:	10fffe04 	addi	r3,r2,-8
    b14c:	010007c4 	movi	r4,31
    b150:	20ff890e 	bge	r4,r3,af78 <__alt_data_end+0xfffc1b98>
    b154:	10bff604 	addi	r2,r2,-40
    b158:	8884983a 	sll	r2,r17,r2
    b15c:	0023883a 	mov	r17,zero
    b160:	1c3f8c0e 	bge	r3,r16,af94 <__alt_data_end+0xfffc1bb4>
    b164:	023fe034 	movhi	r8,65408
    b168:	423fffc4 	addi	r8,r8,-1
    b16c:	80e1c83a 	sub	r16,r16,r3
    b170:	1210703a 	and	r8,r2,r8
    b174:	003f3806 	br	ae58 <__alt_data_end+0xfffc1a78>
    b178:	9007883a 	mov	r3,r18
    b17c:	0011883a 	mov	r8,zero
    b180:	0005883a 	mov	r2,zero
    b184:	003f4c06 	br	aeb8 <__alt_data_end+0xfffc1ad8>
    b188:	498cb03a 	or	r6,r9,r6
    b18c:	300cc03a 	cmpne	r6,r6,zero
    b190:	0007883a 	mov	r3,zero
    b194:	003f6806 	br	af38 <__alt_data_end+0xfffc1b58>
    b198:	20009c1e 	bne	r4,zero,b40c <__adddf3+0x630>
    b19c:	80800044 	addi	r2,r16,1
    b1a0:	1141ffcc 	andi	r5,r2,2047
    b1a4:	01000044 	movi	r4,1
    b1a8:	2140670e 	bge	r4,r5,b348 <__adddf3+0x56c>
    b1ac:	0101ffc4 	movi	r4,2047
    b1b0:	11007f26 	beq	r2,r4,b3b0 <__adddf3+0x5d4>
    b1b4:	898d883a 	add	r6,r17,r6
    b1b8:	4247883a 	add	r3,r8,r9
    b1bc:	3451803a 	cmpltu	r8,r6,r17
    b1c0:	40d1883a 	add	r8,r8,r3
    b1c4:	402297fa 	slli	r17,r8,31
    b1c8:	300cd07a 	srli	r6,r6,1
    b1cc:	4010d07a 	srli	r8,r8,1
    b1d0:	1021883a 	mov	r16,r2
    b1d4:	89a2b03a 	or	r17,r17,r6
    b1d8:	003f1f06 	br	ae58 <__alt_data_end+0xfffc1a78>
    b1dc:	0081ffc4 	movi	r2,2047
    b1e0:	80bf481e 	bne	r16,r2,af04 <__alt_data_end+0xfffc1b24>
    b1e4:	003f1c06 	br	ae58 <__alt_data_end+0xfffc1a78>
    b1e8:	843ff844 	addi	r16,r16,-31
    b1ec:	01000804 	movi	r4,32
    b1f0:	1406d83a 	srl	r3,r2,r16
    b1f4:	41005026 	beq	r8,r4,b338 <__adddf3+0x55c>
    b1f8:	01001004 	movi	r4,64
    b1fc:	2211c83a 	sub	r8,r4,r8
    b200:	1204983a 	sll	r2,r2,r8
    b204:	88a2b03a 	or	r17,r17,r2
    b208:	8822c03a 	cmpne	r17,r17,zero
    b20c:	1c62b03a 	or	r17,r3,r17
    b210:	0011883a 	mov	r8,zero
    b214:	0021883a 	mov	r16,zero
    b218:	003f7106 	br	afe0 <__alt_data_end+0xfffc1c00>
    b21c:	193ff804 	addi	r4,r3,-32
    b220:	00800804 	movi	r2,32
    b224:	4908d83a 	srl	r4,r9,r4
    b228:	18804526 	beq	r3,r2,b340 <__adddf3+0x564>
    b22c:	00801004 	movi	r2,64
    b230:	10c5c83a 	sub	r2,r2,r3
    b234:	4886983a 	sll	r3,r9,r2
    b238:	198cb03a 	or	r6,r3,r6
    b23c:	300cc03a 	cmpne	r6,r6,zero
    b240:	218cb03a 	or	r6,r4,r6
    b244:	0007883a 	mov	r3,zero
    b248:	003f3b06 	br	af38 <__alt_data_end+0xfffc1b58>
    b24c:	80002a26 	beq	r16,zero,b2f8 <__adddf3+0x51c>
    b250:	0101ffc4 	movi	r4,2047
    b254:	11006826 	beq	r2,r4,b3f8 <__adddf3+0x61c>
    b258:	00c7c83a 	sub	r3,zero,r3
    b25c:	42002034 	orhi	r8,r8,128
    b260:	01000e04 	movi	r4,56
    b264:	20c07c16 	blt	r4,r3,b458 <__adddf3+0x67c>
    b268:	010007c4 	movi	r4,31
    b26c:	20c0da16 	blt	r4,r3,b5d8 <__adddf3+0x7fc>
    b270:	01000804 	movi	r4,32
    b274:	20c9c83a 	sub	r4,r4,r3
    b278:	4114983a 	sll	r10,r8,r4
    b27c:	88cad83a 	srl	r5,r17,r3
    b280:	8908983a 	sll	r4,r17,r4
    b284:	40c6d83a 	srl	r3,r8,r3
    b288:	5162b03a 	or	r17,r10,r5
    b28c:	2008c03a 	cmpne	r4,r4,zero
    b290:	8922b03a 	or	r17,r17,r4
    b294:	3463c83a 	sub	r17,r6,r17
    b298:	48c7c83a 	sub	r3,r9,r3
    b29c:	344d803a 	cmpltu	r6,r6,r17
    b2a0:	1991c83a 	sub	r8,r3,r6
    b2a4:	1021883a 	mov	r16,r2
    b2a8:	3825883a 	mov	r18,r7
    b2ac:	003f2706 	br	af4c <__alt_data_end+0xfffc1b6c>
    b2b0:	24d0b03a 	or	r8,r4,r19
    b2b4:	40001b1e 	bne	r8,zero,b324 <__adddf3+0x548>
    b2b8:	0005883a 	mov	r2,zero
    b2bc:	0007883a 	mov	r3,zero
    b2c0:	0021883a 	mov	r16,zero
    b2c4:	003f4d06 	br	affc <__alt_data_end+0xfffc1c1c>
    b2c8:	008007c4 	movi	r2,31
    b2cc:	11003c16 	blt	r2,r4,b3c0 <__adddf3+0x5e4>
    b2d0:	00800804 	movi	r2,32
    b2d4:	1105c83a 	sub	r2,r2,r4
    b2d8:	488e983a 	sll	r7,r9,r2
    b2dc:	310ad83a 	srl	r5,r6,r4
    b2e0:	3084983a 	sll	r2,r6,r2
    b2e4:	4912d83a 	srl	r9,r9,r4
    b2e8:	394ab03a 	or	r5,r7,r5
    b2ec:	1004c03a 	cmpne	r2,r2,zero
    b2f0:	288ab03a 	or	r5,r5,r2
    b2f4:	003f5306 	br	b044 <__alt_data_end+0xfffc1c64>
    b2f8:	4448b03a 	or	r4,r8,r17
    b2fc:	20003e26 	beq	r4,zero,b3f8 <__adddf3+0x61c>
    b300:	00c6303a 	nor	r3,zero,r3
    b304:	18003a1e 	bne	r3,zero,b3f0 <__adddf3+0x614>
    b308:	3463c83a 	sub	r17,r6,r17
    b30c:	4a07c83a 	sub	r3,r9,r8
    b310:	344d803a 	cmpltu	r6,r6,r17
    b314:	1991c83a 	sub	r8,r3,r6
    b318:	1021883a 	mov	r16,r2
    b31c:	3825883a 	mov	r18,r7
    b320:	003f0a06 	br	af4c <__alt_data_end+0xfffc1b6c>
    b324:	2023883a 	mov	r17,r4
    b328:	003f0d06 	br	af60 <__alt_data_end+0xfffc1b80>
    b32c:	0081ffc4 	movi	r2,2047
    b330:	80bf3f1e 	bne	r16,r2,b030 <__alt_data_end+0xfffc1c50>
    b334:	003ec806 	br	ae58 <__alt_data_end+0xfffc1a78>
    b338:	0005883a 	mov	r2,zero
    b33c:	003fb106 	br	b204 <__alt_data_end+0xfffc1e24>
    b340:	0007883a 	mov	r3,zero
    b344:	003fbc06 	br	b238 <__alt_data_end+0xfffc1e58>
    b348:	4444b03a 	or	r2,r8,r17
    b34c:	8000871e 	bne	r16,zero,b56c <__adddf3+0x790>
    b350:	1000ba26 	beq	r2,zero,b63c <__adddf3+0x860>
    b354:	4984b03a 	or	r2,r9,r6
    b358:	103ebf26 	beq	r2,zero,ae58 <__alt_data_end+0xfffc1a78>
    b35c:	8985883a 	add	r2,r17,r6
    b360:	4247883a 	add	r3,r8,r9
    b364:	1451803a 	cmpltu	r8,r2,r17
    b368:	40d1883a 	add	r8,r8,r3
    b36c:	40c0202c 	andhi	r3,r8,128
    b370:	1023883a 	mov	r17,r2
    b374:	183f1a26 	beq	r3,zero,afe0 <__alt_data_end+0xfffc1c00>
    b378:	00bfe034 	movhi	r2,65408
    b37c:	10bfffc4 	addi	r2,r2,-1
    b380:	2021883a 	mov	r16,r4
    b384:	4090703a 	and	r8,r8,r2
    b388:	003eb306 	br	ae58 <__alt_data_end+0xfffc1a78>
    b38c:	4444b03a 	or	r2,r8,r17
    b390:	8000291e 	bne	r16,zero,b438 <__adddf3+0x65c>
    b394:	10004b1e 	bne	r2,zero,b4c4 <__adddf3+0x6e8>
    b398:	4990b03a 	or	r8,r9,r6
    b39c:	40008b26 	beq	r8,zero,b5cc <__adddf3+0x7f0>
    b3a0:	4811883a 	mov	r8,r9
    b3a4:	3023883a 	mov	r17,r6
    b3a8:	3825883a 	mov	r18,r7
    b3ac:	003eaa06 	br	ae58 <__alt_data_end+0xfffc1a78>
    b3b0:	1021883a 	mov	r16,r2
    b3b4:	0011883a 	mov	r8,zero
    b3b8:	0005883a 	mov	r2,zero
    b3bc:	003f0f06 	br	affc <__alt_data_end+0xfffc1c1c>
    b3c0:	217ff804 	addi	r5,r4,-32
    b3c4:	00800804 	movi	r2,32
    b3c8:	494ad83a 	srl	r5,r9,r5
    b3cc:	20807d26 	beq	r4,r2,b5c4 <__adddf3+0x7e8>
    b3d0:	00801004 	movi	r2,64
    b3d4:	1109c83a 	sub	r4,r2,r4
    b3d8:	4912983a 	sll	r9,r9,r4
    b3dc:	498cb03a 	or	r6,r9,r6
    b3e0:	300cc03a 	cmpne	r6,r6,zero
    b3e4:	298ab03a 	or	r5,r5,r6
    b3e8:	0013883a 	mov	r9,zero
    b3ec:	003f1506 	br	b044 <__alt_data_end+0xfffc1c64>
    b3f0:	0101ffc4 	movi	r4,2047
    b3f4:	113f9a1e 	bne	r2,r4,b260 <__alt_data_end+0xfffc1e80>
    b3f8:	4811883a 	mov	r8,r9
    b3fc:	3023883a 	mov	r17,r6
    b400:	1021883a 	mov	r16,r2
    b404:	3825883a 	mov	r18,r7
    b408:	003e9306 	br	ae58 <__alt_data_end+0xfffc1a78>
    b40c:	8000161e 	bne	r16,zero,b468 <__adddf3+0x68c>
    b410:	444ab03a 	or	r5,r8,r17
    b414:	28005126 	beq	r5,zero,b55c <__adddf3+0x780>
    b418:	0108303a 	nor	r4,zero,r4
    b41c:	20004d1e 	bne	r4,zero,b554 <__adddf3+0x778>
    b420:	89a3883a 	add	r17,r17,r6
    b424:	4253883a 	add	r9,r8,r9
    b428:	898d803a 	cmpltu	r6,r17,r6
    b42c:	3251883a 	add	r8,r6,r9
    b430:	1021883a 	mov	r16,r2
    b434:	003f0806 	br	b058 <__alt_data_end+0xfffc1c78>
    b438:	1000301e 	bne	r2,zero,b4fc <__adddf3+0x720>
    b43c:	4984b03a 	or	r2,r9,r6
    b440:	10007126 	beq	r2,zero,b608 <__adddf3+0x82c>
    b444:	4811883a 	mov	r8,r9
    b448:	3023883a 	mov	r17,r6
    b44c:	3825883a 	mov	r18,r7
    b450:	0401ffc4 	movi	r16,2047
    b454:	003e8006 	br	ae58 <__alt_data_end+0xfffc1a78>
    b458:	4462b03a 	or	r17,r8,r17
    b45c:	8822c03a 	cmpne	r17,r17,zero
    b460:	0007883a 	mov	r3,zero
    b464:	003f8b06 	br	b294 <__alt_data_end+0xfffc1eb4>
    b468:	0141ffc4 	movi	r5,2047
    b46c:	11403b26 	beq	r2,r5,b55c <__adddf3+0x780>
    b470:	0109c83a 	sub	r4,zero,r4
    b474:	42002034 	orhi	r8,r8,128
    b478:	01400e04 	movi	r5,56
    b47c:	29006716 	blt	r5,r4,b61c <__adddf3+0x840>
    b480:	014007c4 	movi	r5,31
    b484:	29007016 	blt	r5,r4,b648 <__adddf3+0x86c>
    b488:	01400804 	movi	r5,32
    b48c:	290bc83a 	sub	r5,r5,r4
    b490:	4154983a 	sll	r10,r8,r5
    b494:	890ed83a 	srl	r7,r17,r4
    b498:	894a983a 	sll	r5,r17,r5
    b49c:	4108d83a 	srl	r4,r8,r4
    b4a0:	51e2b03a 	or	r17,r10,r7
    b4a4:	280ac03a 	cmpne	r5,r5,zero
    b4a8:	8962b03a 	or	r17,r17,r5
    b4ac:	89a3883a 	add	r17,r17,r6
    b4b0:	2253883a 	add	r9,r4,r9
    b4b4:	898d803a 	cmpltu	r6,r17,r6
    b4b8:	3251883a 	add	r8,r6,r9
    b4bc:	1021883a 	mov	r16,r2
    b4c0:	003ee506 	br	b058 <__alt_data_end+0xfffc1c78>
    b4c4:	4984b03a 	or	r2,r9,r6
    b4c8:	103e6326 	beq	r2,zero,ae58 <__alt_data_end+0xfffc1a78>
    b4cc:	8987c83a 	sub	r3,r17,r6
    b4d0:	88c9803a 	cmpltu	r4,r17,r3
    b4d4:	4245c83a 	sub	r2,r8,r9
    b4d8:	1105c83a 	sub	r2,r2,r4
    b4dc:	1100202c 	andhi	r4,r2,128
    b4e0:	203ebb26 	beq	r4,zero,afd0 <__alt_data_end+0xfffc1bf0>
    b4e4:	3463c83a 	sub	r17,r6,r17
    b4e8:	4a07c83a 	sub	r3,r9,r8
    b4ec:	344d803a 	cmpltu	r6,r6,r17
    b4f0:	1991c83a 	sub	r8,r3,r6
    b4f4:	3825883a 	mov	r18,r7
    b4f8:	003e5706 	br	ae58 <__alt_data_end+0xfffc1a78>
    b4fc:	4984b03a 	or	r2,r9,r6
    b500:	10002e26 	beq	r2,zero,b5bc <__adddf3+0x7e0>
    b504:	4004d0fa 	srli	r2,r8,3
    b508:	8822d0fa 	srli	r17,r17,3
    b50c:	4010977a 	slli	r8,r8,29
    b510:	10c0022c 	andhi	r3,r2,8
    b514:	4462b03a 	or	r17,r8,r17
    b518:	18000826 	beq	r3,zero,b53c <__adddf3+0x760>
    b51c:	4808d0fa 	srli	r4,r9,3
    b520:	20c0022c 	andhi	r3,r4,8
    b524:	1800051e 	bne	r3,zero,b53c <__adddf3+0x760>
    b528:	300cd0fa 	srli	r6,r6,3
    b52c:	4806977a 	slli	r3,r9,29
    b530:	2005883a 	mov	r2,r4
    b534:	3825883a 	mov	r18,r7
    b538:	19a2b03a 	or	r17,r3,r6
    b53c:	8810d77a 	srli	r8,r17,29
    b540:	100490fa 	slli	r2,r2,3
    b544:	882290fa 	slli	r17,r17,3
    b548:	0401ffc4 	movi	r16,2047
    b54c:	4090b03a 	or	r8,r8,r2
    b550:	003e4106 	br	ae58 <__alt_data_end+0xfffc1a78>
    b554:	0141ffc4 	movi	r5,2047
    b558:	117fc71e 	bne	r2,r5,b478 <__alt_data_end+0xfffc2098>
    b55c:	4811883a 	mov	r8,r9
    b560:	3023883a 	mov	r17,r6
    b564:	1021883a 	mov	r16,r2
    b568:	003e3b06 	br	ae58 <__alt_data_end+0xfffc1a78>
    b56c:	10002f26 	beq	r2,zero,b62c <__adddf3+0x850>
    b570:	4984b03a 	or	r2,r9,r6
    b574:	10001126 	beq	r2,zero,b5bc <__adddf3+0x7e0>
    b578:	4004d0fa 	srli	r2,r8,3
    b57c:	8822d0fa 	srli	r17,r17,3
    b580:	4010977a 	slli	r8,r8,29
    b584:	10c0022c 	andhi	r3,r2,8
    b588:	4462b03a 	or	r17,r8,r17
    b58c:	183feb26 	beq	r3,zero,b53c <__alt_data_end+0xfffc215c>
    b590:	4808d0fa 	srli	r4,r9,3
    b594:	20c0022c 	andhi	r3,r4,8
    b598:	183fe81e 	bne	r3,zero,b53c <__alt_data_end+0xfffc215c>
    b59c:	300cd0fa 	srli	r6,r6,3
    b5a0:	4806977a 	slli	r3,r9,29
    b5a4:	2005883a 	mov	r2,r4
    b5a8:	19a2b03a 	or	r17,r3,r6
    b5ac:	003fe306 	br	b53c <__alt_data_end+0xfffc215c>
    b5b0:	0011883a 	mov	r8,zero
    b5b4:	0005883a 	mov	r2,zero
    b5b8:	003e3f06 	br	aeb8 <__alt_data_end+0xfffc1ad8>
    b5bc:	0401ffc4 	movi	r16,2047
    b5c0:	003e2506 	br	ae58 <__alt_data_end+0xfffc1a78>
    b5c4:	0013883a 	mov	r9,zero
    b5c8:	003f8406 	br	b3dc <__alt_data_end+0xfffc1ffc>
    b5cc:	0005883a 	mov	r2,zero
    b5d0:	0007883a 	mov	r3,zero
    b5d4:	003e8906 	br	affc <__alt_data_end+0xfffc1c1c>
    b5d8:	197ff804 	addi	r5,r3,-32
    b5dc:	01000804 	movi	r4,32
    b5e0:	414ad83a 	srl	r5,r8,r5
    b5e4:	19002426 	beq	r3,r4,b678 <__adddf3+0x89c>
    b5e8:	01001004 	movi	r4,64
    b5ec:	20c7c83a 	sub	r3,r4,r3
    b5f0:	40c6983a 	sll	r3,r8,r3
    b5f4:	1c46b03a 	or	r3,r3,r17
    b5f8:	1806c03a 	cmpne	r3,r3,zero
    b5fc:	28e2b03a 	or	r17,r5,r3
    b600:	0007883a 	mov	r3,zero
    b604:	003f2306 	br	b294 <__alt_data_end+0xfffc1eb4>
    b608:	0007883a 	mov	r3,zero
    b60c:	5811883a 	mov	r8,r11
    b610:	00bfffc4 	movi	r2,-1
    b614:	0401ffc4 	movi	r16,2047
    b618:	003e7806 	br	affc <__alt_data_end+0xfffc1c1c>
    b61c:	4462b03a 	or	r17,r8,r17
    b620:	8822c03a 	cmpne	r17,r17,zero
    b624:	0009883a 	mov	r4,zero
    b628:	003fa006 	br	b4ac <__alt_data_end+0xfffc20cc>
    b62c:	4811883a 	mov	r8,r9
    b630:	3023883a 	mov	r17,r6
    b634:	0401ffc4 	movi	r16,2047
    b638:	003e0706 	br	ae58 <__alt_data_end+0xfffc1a78>
    b63c:	4811883a 	mov	r8,r9
    b640:	3023883a 	mov	r17,r6
    b644:	003e0406 	br	ae58 <__alt_data_end+0xfffc1a78>
    b648:	21fff804 	addi	r7,r4,-32
    b64c:	01400804 	movi	r5,32
    b650:	41ced83a 	srl	r7,r8,r7
    b654:	21400a26 	beq	r4,r5,b680 <__adddf3+0x8a4>
    b658:	01401004 	movi	r5,64
    b65c:	2909c83a 	sub	r4,r5,r4
    b660:	4108983a 	sll	r4,r8,r4
    b664:	2448b03a 	or	r4,r4,r17
    b668:	2008c03a 	cmpne	r4,r4,zero
    b66c:	3922b03a 	or	r17,r7,r4
    b670:	0009883a 	mov	r4,zero
    b674:	003f8d06 	br	b4ac <__alt_data_end+0xfffc20cc>
    b678:	0007883a 	mov	r3,zero
    b67c:	003fdd06 	br	b5f4 <__alt_data_end+0xfffc2214>
    b680:	0009883a 	mov	r4,zero
    b684:	003ff706 	br	b664 <__alt_data_end+0xfffc2284>

0000b688 <__divdf3>:
    b688:	defff004 	addi	sp,sp,-64
    b68c:	dc800815 	stw	r18,32(sp)
    b690:	2824d53a 	srli	r18,r5,20
    b694:	dd800c15 	stw	r22,48(sp)
    b698:	282cd7fa 	srli	r22,r5,31
    b69c:	dc000615 	stw	r16,24(sp)
    b6a0:	04000434 	movhi	r16,16
    b6a4:	843fffc4 	addi	r16,r16,-1
    b6a8:	dfc00f15 	stw	ra,60(sp)
    b6ac:	df000e15 	stw	fp,56(sp)
    b6b0:	ddc00d15 	stw	r23,52(sp)
    b6b4:	dd400b15 	stw	r21,44(sp)
    b6b8:	dd000a15 	stw	r20,40(sp)
    b6bc:	dcc00915 	stw	r19,36(sp)
    b6c0:	dc400715 	stw	r17,28(sp)
    b6c4:	9481ffcc 	andi	r18,r18,2047
    b6c8:	2c20703a 	and	r16,r5,r16
    b6cc:	b2003fcc 	andi	r8,r22,255
    b6d0:	90006126 	beq	r18,zero,b858 <__divdf3+0x1d0>
    b6d4:	0081ffc4 	movi	r2,2047
    b6d8:	202b883a 	mov	r21,r4
    b6dc:	90803726 	beq	r18,r2,b7bc <__divdf3+0x134>
    b6e0:	80800434 	orhi	r2,r16,16
    b6e4:	100490fa 	slli	r2,r2,3
    b6e8:	2020d77a 	srli	r16,r4,29
    b6ec:	202a90fa 	slli	r21,r4,3
    b6f0:	94bf0044 	addi	r18,r18,-1023
    b6f4:	80a0b03a 	or	r16,r16,r2
    b6f8:	0013883a 	mov	r9,zero
    b6fc:	000b883a 	mov	r5,zero
    b700:	3806d53a 	srli	r3,r7,20
    b704:	382ed7fa 	srli	r23,r7,31
    b708:	04400434 	movhi	r17,16
    b70c:	8c7fffc4 	addi	r17,r17,-1
    b710:	18c1ffcc 	andi	r3,r3,2047
    b714:	3029883a 	mov	r20,r6
    b718:	3c62703a 	and	r17,r7,r17
    b71c:	bf003fcc 	andi	fp,r23,255
    b720:	18006e26 	beq	r3,zero,b8dc <__divdf3+0x254>
    b724:	0081ffc4 	movi	r2,2047
    b728:	18806626 	beq	r3,r2,b8c4 <__divdf3+0x23c>
    b72c:	88800434 	orhi	r2,r17,16
    b730:	100490fa 	slli	r2,r2,3
    b734:	3022d77a 	srli	r17,r6,29
    b738:	302890fa 	slli	r20,r6,3
    b73c:	18ff0044 	addi	r3,r3,-1023
    b740:	88a2b03a 	or	r17,r17,r2
    b744:	000f883a 	mov	r7,zero
    b748:	b5e6f03a 	xor	r19,r22,r23
    b74c:	3a4cb03a 	or	r6,r7,r9
    b750:	008003c4 	movi	r2,15
    b754:	9809883a 	mov	r4,r19
    b758:	90c7c83a 	sub	r3,r18,r3
    b75c:	9cc03fcc 	andi	r19,r19,255
    b760:	11809636 	bltu	r2,r6,b9bc <__divdf3+0x334>
    b764:	300c90ba 	slli	r6,r6,2
    b768:	00800074 	movhi	r2,1
    b76c:	10addf04 	addi	r2,r2,-18564
    b770:	308d883a 	add	r6,r6,r2
    b774:	30800017 	ldw	r2,0(r6)
    b778:	1000683a 	jmp	r2
    b77c:	0000b9bc 	xorhi	zero,zero,742
    b780:	0000b7f4 	movhi	zero,735
    b784:	0000b9ac 	andhi	zero,zero,742
    b788:	0000b7e8 	cmpgeui	zero,zero,735
    b78c:	0000b9ac 	andhi	zero,zero,742
    b790:	0000b980 	call	b98 <___vfprintf_internal_r+0x3e8>
    b794:	0000b9ac 	andhi	zero,zero,742
    b798:	0000b7e8 	cmpgeui	zero,zero,735
    b79c:	0000b7f4 	movhi	zero,735
    b7a0:	0000b7f4 	movhi	zero,735
    b7a4:	0000b980 	call	b98 <___vfprintf_internal_r+0x3e8>
    b7a8:	0000b7e8 	cmpgeui	zero,zero,735
    b7ac:	0000b7d8 	cmpnei	zero,zero,735
    b7b0:	0000b7d8 	cmpnei	zero,zero,735
    b7b4:	0000b7d8 	cmpnei	zero,zero,735
    b7b8:	0000bd44 	movi	zero,757
    b7bc:	2404b03a 	or	r2,r4,r16
    b7c0:	10006c1e 	bne	r2,zero,b974 <__divdf3+0x2ec>
    b7c4:	02400204 	movi	r9,8
    b7c8:	0021883a 	mov	r16,zero
    b7cc:	002b883a 	mov	r21,zero
    b7d0:	01400084 	movi	r5,2
    b7d4:	003fca06 	br	b700 <__alt_data_end+0xfffc2320>
    b7d8:	8023883a 	mov	r17,r16
    b7dc:	a829883a 	mov	r20,r21
    b7e0:	4039883a 	mov	fp,r8
    b7e4:	280f883a 	mov	r7,r5
    b7e8:	00800084 	movi	r2,2
    b7ec:	3881601e 	bne	r7,r2,bd70 <__divdf3+0x6e8>
    b7f0:	e027883a 	mov	r19,fp
    b7f4:	9900004c 	andi	r4,r19,1
    b7f8:	0081ffc4 	movi	r2,2047
    b7fc:	0021883a 	mov	r16,zero
    b800:	002b883a 	mov	r21,zero
    b804:	1004953a 	slli	r2,r2,20
    b808:	20c03fcc 	andi	r3,r4,255
    b80c:	01400434 	movhi	r5,16
    b810:	297fffc4 	addi	r5,r5,-1
    b814:	180697fa 	slli	r3,r3,31
    b818:	8160703a 	and	r16,r16,r5
    b81c:	80a0b03a 	or	r16,r16,r2
    b820:	80c6b03a 	or	r3,r16,r3
    b824:	a805883a 	mov	r2,r21
    b828:	dfc00f17 	ldw	ra,60(sp)
    b82c:	df000e17 	ldw	fp,56(sp)
    b830:	ddc00d17 	ldw	r23,52(sp)
    b834:	dd800c17 	ldw	r22,48(sp)
    b838:	dd400b17 	ldw	r21,44(sp)
    b83c:	dd000a17 	ldw	r20,40(sp)
    b840:	dcc00917 	ldw	r19,36(sp)
    b844:	dc800817 	ldw	r18,32(sp)
    b848:	dc400717 	ldw	r17,28(sp)
    b84c:	dc000617 	ldw	r16,24(sp)
    b850:	dec01004 	addi	sp,sp,64
    b854:	f800283a 	ret
    b858:	2404b03a 	or	r2,r4,r16
    b85c:	2023883a 	mov	r17,r4
    b860:	10003f26 	beq	r2,zero,b960 <__divdf3+0x2d8>
    b864:	80015e26 	beq	r16,zero,bde0 <__divdf3+0x758>
    b868:	8009883a 	mov	r4,r16
    b86c:	d9800215 	stw	r6,8(sp)
    b870:	d9c00515 	stw	r7,20(sp)
    b874:	da000415 	stw	r8,16(sp)
    b878:	000d61c0 	call	d61c <__clzsi2>
    b87c:	d9800217 	ldw	r6,8(sp)
    b880:	d9c00517 	ldw	r7,20(sp)
    b884:	da000417 	ldw	r8,16(sp)
    b888:	113ffd44 	addi	r4,r2,-11
    b88c:	00c00704 	movi	r3,28
    b890:	19014f16 	blt	r3,r4,bdd0 <__divdf3+0x748>
    b894:	00c00744 	movi	r3,29
    b898:	157ffe04 	addi	r21,r2,-8
    b89c:	1907c83a 	sub	r3,r3,r4
    b8a0:	8560983a 	sll	r16,r16,r21
    b8a4:	88c6d83a 	srl	r3,r17,r3
    b8a8:	8d6a983a 	sll	r21,r17,r21
    b8ac:	1c20b03a 	or	r16,r3,r16
    b8b0:	1080fcc4 	addi	r2,r2,1011
    b8b4:	00a5c83a 	sub	r18,zero,r2
    b8b8:	0013883a 	mov	r9,zero
    b8bc:	000b883a 	mov	r5,zero
    b8c0:	003f8f06 	br	b700 <__alt_data_end+0xfffc2320>
    b8c4:	3444b03a 	or	r2,r6,r17
    b8c8:	1000231e 	bne	r2,zero,b958 <__divdf3+0x2d0>
    b8cc:	0023883a 	mov	r17,zero
    b8d0:	0029883a 	mov	r20,zero
    b8d4:	01c00084 	movi	r7,2
    b8d8:	003f9b06 	br	b748 <__alt_data_end+0xfffc2368>
    b8dc:	3444b03a 	or	r2,r6,r17
    b8e0:	10001926 	beq	r2,zero,b948 <__divdf3+0x2c0>
    b8e4:	88014b26 	beq	r17,zero,be14 <__divdf3+0x78c>
    b8e8:	8809883a 	mov	r4,r17
    b8ec:	d9400115 	stw	r5,4(sp)
    b8f0:	d9800215 	stw	r6,8(sp)
    b8f4:	da000415 	stw	r8,16(sp)
    b8f8:	da400315 	stw	r9,12(sp)
    b8fc:	000d61c0 	call	d61c <__clzsi2>
    b900:	d9400117 	ldw	r5,4(sp)
    b904:	d9800217 	ldw	r6,8(sp)
    b908:	da000417 	ldw	r8,16(sp)
    b90c:	da400317 	ldw	r9,12(sp)
    b910:	113ffd44 	addi	r4,r2,-11
    b914:	00c00704 	movi	r3,28
    b918:	19013a16 	blt	r3,r4,be04 <__divdf3+0x77c>
    b91c:	00c00744 	movi	r3,29
    b920:	153ffe04 	addi	r20,r2,-8
    b924:	1907c83a 	sub	r3,r3,r4
    b928:	8d22983a 	sll	r17,r17,r20
    b92c:	30c6d83a 	srl	r3,r6,r3
    b930:	3528983a 	sll	r20,r6,r20
    b934:	1c62b03a 	or	r17,r3,r17
    b938:	1080fcc4 	addi	r2,r2,1011
    b93c:	0087c83a 	sub	r3,zero,r2
    b940:	000f883a 	mov	r7,zero
    b944:	003f8006 	br	b748 <__alt_data_end+0xfffc2368>
    b948:	0023883a 	mov	r17,zero
    b94c:	0029883a 	mov	r20,zero
    b950:	01c00044 	movi	r7,1
    b954:	003f7c06 	br	b748 <__alt_data_end+0xfffc2368>
    b958:	01c000c4 	movi	r7,3
    b95c:	003f7a06 	br	b748 <__alt_data_end+0xfffc2368>
    b960:	02400104 	movi	r9,4
    b964:	0021883a 	mov	r16,zero
    b968:	002b883a 	mov	r21,zero
    b96c:	01400044 	movi	r5,1
    b970:	003f6306 	br	b700 <__alt_data_end+0xfffc2320>
    b974:	02400304 	movi	r9,12
    b978:	014000c4 	movi	r5,3
    b97c:	003f6006 	br	b700 <__alt_data_end+0xfffc2320>
    b980:	04000434 	movhi	r16,16
    b984:	0009883a 	mov	r4,zero
    b988:	843fffc4 	addi	r16,r16,-1
    b98c:	057fffc4 	movi	r21,-1
    b990:	0081ffc4 	movi	r2,2047
    b994:	003f9b06 	br	b804 <__alt_data_end+0xfffc2424>
    b998:	00c00044 	movi	r3,1
    b99c:	1887c83a 	sub	r3,r3,r2
    b9a0:	01000e04 	movi	r4,56
    b9a4:	20c1530e 	bge	r4,r3,bef4 <__divdf3+0x86c>
    b9a8:	9900004c 	andi	r4,r19,1
    b9ac:	0005883a 	mov	r2,zero
    b9b0:	0021883a 	mov	r16,zero
    b9b4:	002b883a 	mov	r21,zero
    b9b8:	003f9206 	br	b804 <__alt_data_end+0xfffc2424>
    b9bc:	8c012e36 	bltu	r17,r16,be78 <__divdf3+0x7f0>
    b9c0:	84412c26 	beq	r16,r17,be74 <__divdf3+0x7ec>
    b9c4:	a82f883a 	mov	r23,r21
    b9c8:	18ffffc4 	addi	r3,r3,-1
    b9cc:	002b883a 	mov	r21,zero
    b9d0:	a004d63a 	srli	r2,r20,24
    b9d4:	8822923a 	slli	r17,r17,8
    b9d8:	a028923a 	slli	r20,r20,8
    b9dc:	8009883a 	mov	r4,r16
    b9e0:	88acb03a 	or	r22,r17,r2
    b9e4:	dd000015 	stw	r20,0(sp)
    b9e8:	b028d43a 	srli	r20,r22,16
    b9ec:	d8c00215 	stw	r3,8(sp)
    b9f0:	b4bfffcc 	andi	r18,r22,65535
    b9f4:	a00b883a 	mov	r5,r20
    b9f8:	000acf80 	call	acf8 <__udivsi3>
    b9fc:	100b883a 	mov	r5,r2
    ba00:	9009883a 	mov	r4,r18
    ba04:	1023883a 	mov	r17,r2
    ba08:	000adb40 	call	adb4 <__mulsi3>
    ba0c:	8009883a 	mov	r4,r16
    ba10:	a00b883a 	mov	r5,r20
    ba14:	1039883a 	mov	fp,r2
    ba18:	000ad5c0 	call	ad5c <__umodsi3>
    ba1c:	1004943a 	slli	r2,r2,16
    ba20:	b808d43a 	srli	r4,r23,16
    ba24:	d8c00217 	ldw	r3,8(sp)
    ba28:	2084b03a 	or	r2,r4,r2
    ba2c:	1700062e 	bgeu	r2,fp,ba48 <__divdf3+0x3c0>
    ba30:	1585883a 	add	r2,r2,r22
    ba34:	893fffc4 	addi	r4,r17,-1
    ba38:	15811d36 	bltu	r2,r22,beb0 <__divdf3+0x828>
    ba3c:	17011c2e 	bgeu	r2,fp,beb0 <__divdf3+0x828>
    ba40:	8c7fff84 	addi	r17,r17,-2
    ba44:	1585883a 	add	r2,r2,r22
    ba48:	1739c83a 	sub	fp,r2,fp
    ba4c:	a00b883a 	mov	r5,r20
    ba50:	e009883a 	mov	r4,fp
    ba54:	d8c00215 	stw	r3,8(sp)
    ba58:	000acf80 	call	acf8 <__udivsi3>
    ba5c:	100b883a 	mov	r5,r2
    ba60:	9009883a 	mov	r4,r18
    ba64:	1021883a 	mov	r16,r2
    ba68:	000adb40 	call	adb4 <__mulsi3>
    ba6c:	a00b883a 	mov	r5,r20
    ba70:	e009883a 	mov	r4,fp
    ba74:	d8800415 	stw	r2,16(sp)
    ba78:	000ad5c0 	call	ad5c <__umodsi3>
    ba7c:	1004943a 	slli	r2,r2,16
    ba80:	da000417 	ldw	r8,16(sp)
    ba84:	bdffffcc 	andi	r23,r23,65535
    ba88:	b884b03a 	or	r2,r23,r2
    ba8c:	d8c00217 	ldw	r3,8(sp)
    ba90:	1200062e 	bgeu	r2,r8,baac <__divdf3+0x424>
    ba94:	1585883a 	add	r2,r2,r22
    ba98:	813fffc4 	addi	r4,r16,-1
    ba9c:	15810236 	bltu	r2,r22,bea8 <__divdf3+0x820>
    baa0:	1201012e 	bgeu	r2,r8,bea8 <__divdf3+0x820>
    baa4:	843fff84 	addi	r16,r16,-2
    baa8:	1585883a 	add	r2,r2,r22
    baac:	8822943a 	slli	r17,r17,16
    bab0:	d9800017 	ldw	r6,0(sp)
    bab4:	1211c83a 	sub	r8,r2,r8
    bab8:	8c22b03a 	or	r17,r17,r16
    babc:	373fffcc 	andi	fp,r6,65535
    bac0:	8abfffcc 	andi	r10,r17,65535
    bac4:	8820d43a 	srli	r16,r17,16
    bac8:	5009883a 	mov	r4,r10
    bacc:	e00b883a 	mov	r5,fp
    bad0:	302ed43a 	srli	r23,r6,16
    bad4:	d8c00215 	stw	r3,8(sp)
    bad8:	da000415 	stw	r8,16(sp)
    badc:	da800115 	stw	r10,4(sp)
    bae0:	000adb40 	call	adb4 <__mulsi3>
    bae4:	800b883a 	mov	r5,r16
    bae8:	e009883a 	mov	r4,fp
    baec:	d8800515 	stw	r2,20(sp)
    baf0:	000adb40 	call	adb4 <__mulsi3>
    baf4:	8009883a 	mov	r4,r16
    baf8:	b80b883a 	mov	r5,r23
    bafc:	d8800315 	stw	r2,12(sp)
    bb00:	000adb40 	call	adb4 <__mulsi3>
    bb04:	da800117 	ldw	r10,4(sp)
    bb08:	b80b883a 	mov	r5,r23
    bb0c:	1021883a 	mov	r16,r2
    bb10:	5009883a 	mov	r4,r10
    bb14:	000adb40 	call	adb4 <__mulsi3>
    bb18:	d9c00517 	ldw	r7,20(sp)
    bb1c:	da400317 	ldw	r9,12(sp)
    bb20:	d8c00217 	ldw	r3,8(sp)
    bb24:	3808d43a 	srli	r4,r7,16
    bb28:	1245883a 	add	r2,r2,r9
    bb2c:	da000417 	ldw	r8,16(sp)
    bb30:	2085883a 	add	r2,r4,r2
    bb34:	1240022e 	bgeu	r2,r9,bb40 <__divdf3+0x4b8>
    bb38:	01000074 	movhi	r4,1
    bb3c:	8121883a 	add	r16,r16,r4
    bb40:	1008d43a 	srli	r4,r2,16
    bb44:	1004943a 	slli	r2,r2,16
    bb48:	39ffffcc 	andi	r7,r7,65535
    bb4c:	2409883a 	add	r4,r4,r16
    bb50:	11c5883a 	add	r2,r2,r7
    bb54:	4100bb36 	bltu	r8,r4,be44 <__divdf3+0x7bc>
    bb58:	4100d726 	beq	r8,r4,beb8 <__divdf3+0x830>
    bb5c:	4109c83a 	sub	r4,r8,r4
    bb60:	a8a1c83a 	sub	r16,r21,r2
    bb64:	ac2b803a 	cmpltu	r21,r21,r16
    bb68:	256bc83a 	sub	r21,r4,r21
    bb6c:	b540d926 	beq	r22,r21,bed4 <__divdf3+0x84c>
    bb70:	a00b883a 	mov	r5,r20
    bb74:	a809883a 	mov	r4,r21
    bb78:	d8c00215 	stw	r3,8(sp)
    bb7c:	000acf80 	call	acf8 <__udivsi3>
    bb80:	100b883a 	mov	r5,r2
    bb84:	9009883a 	mov	r4,r18
    bb88:	d8800515 	stw	r2,20(sp)
    bb8c:	000adb40 	call	adb4 <__mulsi3>
    bb90:	a809883a 	mov	r4,r21
    bb94:	a00b883a 	mov	r5,r20
    bb98:	d8800415 	stw	r2,16(sp)
    bb9c:	000ad5c0 	call	ad5c <__umodsi3>
    bba0:	1004943a 	slli	r2,r2,16
    bba4:	8008d43a 	srli	r4,r16,16
    bba8:	da000417 	ldw	r8,16(sp)
    bbac:	d8c00217 	ldw	r3,8(sp)
    bbb0:	2084b03a 	or	r2,r4,r2
    bbb4:	d9c00517 	ldw	r7,20(sp)
    bbb8:	1200062e 	bgeu	r2,r8,bbd4 <__divdf3+0x54c>
    bbbc:	1585883a 	add	r2,r2,r22
    bbc0:	393fffc4 	addi	r4,r7,-1
    bbc4:	1580c536 	bltu	r2,r22,bedc <__divdf3+0x854>
    bbc8:	1200c42e 	bgeu	r2,r8,bedc <__divdf3+0x854>
    bbcc:	39ffff84 	addi	r7,r7,-2
    bbd0:	1585883a 	add	r2,r2,r22
    bbd4:	122bc83a 	sub	r21,r2,r8
    bbd8:	a00b883a 	mov	r5,r20
    bbdc:	a809883a 	mov	r4,r21
    bbe0:	d8c00215 	stw	r3,8(sp)
    bbe4:	d9c00515 	stw	r7,20(sp)
    bbe8:	000acf80 	call	acf8 <__udivsi3>
    bbec:	9009883a 	mov	r4,r18
    bbf0:	100b883a 	mov	r5,r2
    bbf4:	d8800415 	stw	r2,16(sp)
    bbf8:	000adb40 	call	adb4 <__mulsi3>
    bbfc:	a809883a 	mov	r4,r21
    bc00:	a00b883a 	mov	r5,r20
    bc04:	1025883a 	mov	r18,r2
    bc08:	000ad5c0 	call	ad5c <__umodsi3>
    bc0c:	1004943a 	slli	r2,r2,16
    bc10:	813fffcc 	andi	r4,r16,65535
    bc14:	d8c00217 	ldw	r3,8(sp)
    bc18:	20a0b03a 	or	r16,r4,r2
    bc1c:	d9c00517 	ldw	r7,20(sp)
    bc20:	da000417 	ldw	r8,16(sp)
    bc24:	8480062e 	bgeu	r16,r18,bc40 <__divdf3+0x5b8>
    bc28:	85a1883a 	add	r16,r16,r22
    bc2c:	40bfffc4 	addi	r2,r8,-1
    bc30:	8580ac36 	bltu	r16,r22,bee4 <__divdf3+0x85c>
    bc34:	8480ab2e 	bgeu	r16,r18,bee4 <__divdf3+0x85c>
    bc38:	423fff84 	addi	r8,r8,-2
    bc3c:	85a1883a 	add	r16,r16,r22
    bc40:	3804943a 	slli	r2,r7,16
    bc44:	84a1c83a 	sub	r16,r16,r18
    bc48:	e009883a 	mov	r4,fp
    bc4c:	1228b03a 	or	r20,r2,r8
    bc50:	a1ffffcc 	andi	r7,r20,65535
    bc54:	a024d43a 	srli	r18,r20,16
    bc58:	380b883a 	mov	r5,r7
    bc5c:	d8c00215 	stw	r3,8(sp)
    bc60:	d9c00515 	stw	r7,20(sp)
    bc64:	000adb40 	call	adb4 <__mulsi3>
    bc68:	900b883a 	mov	r5,r18
    bc6c:	e009883a 	mov	r4,fp
    bc70:	102b883a 	mov	r21,r2
    bc74:	000adb40 	call	adb4 <__mulsi3>
    bc78:	900b883a 	mov	r5,r18
    bc7c:	b809883a 	mov	r4,r23
    bc80:	1039883a 	mov	fp,r2
    bc84:	000adb40 	call	adb4 <__mulsi3>
    bc88:	d9c00517 	ldw	r7,20(sp)
    bc8c:	b80b883a 	mov	r5,r23
    bc90:	1025883a 	mov	r18,r2
    bc94:	3809883a 	mov	r4,r7
    bc98:	000adb40 	call	adb4 <__mulsi3>
    bc9c:	a808d43a 	srli	r4,r21,16
    bca0:	1705883a 	add	r2,r2,fp
    bca4:	d8c00217 	ldw	r3,8(sp)
    bca8:	2085883a 	add	r2,r4,r2
    bcac:	1700022e 	bgeu	r2,fp,bcb8 <__divdf3+0x630>
    bcb0:	01000074 	movhi	r4,1
    bcb4:	9125883a 	add	r18,r18,r4
    bcb8:	1008d43a 	srli	r4,r2,16
    bcbc:	1004943a 	slli	r2,r2,16
    bcc0:	ad7fffcc 	andi	r21,r21,65535
    bcc4:	2489883a 	add	r4,r4,r18
    bcc8:	1545883a 	add	r2,r2,r21
    bccc:	81003836 	bltu	r16,r4,bdb0 <__divdf3+0x728>
    bcd0:	81003626 	beq	r16,r4,bdac <__divdf3+0x724>
    bcd4:	a5000054 	ori	r20,r20,1
    bcd8:	1880ffc4 	addi	r2,r3,1023
    bcdc:	00bf2e0e 	bge	zero,r2,b998 <__alt_data_end+0xfffc25b8>
    bce0:	a10001cc 	andi	r4,r20,7
    bce4:	20000726 	beq	r4,zero,bd04 <__divdf3+0x67c>
    bce8:	a10003cc 	andi	r4,r20,15
    bcec:	01400104 	movi	r5,4
    bcf0:	21400426 	beq	r4,r5,bd04 <__divdf3+0x67c>
    bcf4:	a149883a 	add	r4,r20,r5
    bcf8:	2529803a 	cmpltu	r20,r4,r20
    bcfc:	8d23883a 	add	r17,r17,r20
    bd00:	2029883a 	mov	r20,r4
    bd04:	8900402c 	andhi	r4,r17,256
    bd08:	20000426 	beq	r4,zero,bd1c <__divdf3+0x694>
    bd0c:	18810004 	addi	r2,r3,1024
    bd10:	00ffc034 	movhi	r3,65280
    bd14:	18ffffc4 	addi	r3,r3,-1
    bd18:	88e2703a 	and	r17,r17,r3
    bd1c:	00c1ff84 	movi	r3,2046
    bd20:	18beb416 	blt	r3,r2,b7f4 <__alt_data_end+0xfffc2414>
    bd24:	a028d0fa 	srli	r20,r20,3
    bd28:	882a977a 	slli	r21,r17,29
    bd2c:	8820927a 	slli	r16,r17,9
    bd30:	1081ffcc 	andi	r2,r2,2047
    bd34:	ad2ab03a 	or	r21,r21,r20
    bd38:	8020d33a 	srli	r16,r16,12
    bd3c:	9900004c 	andi	r4,r19,1
    bd40:	003eb006 	br	b804 <__alt_data_end+0xfffc2424>
    bd44:	8080022c 	andhi	r2,r16,8
    bd48:	10001226 	beq	r2,zero,bd94 <__divdf3+0x70c>
    bd4c:	8880022c 	andhi	r2,r17,8
    bd50:	1000101e 	bne	r2,zero,bd94 <__divdf3+0x70c>
    bd54:	00800434 	movhi	r2,16
    bd58:	8c000234 	orhi	r16,r17,8
    bd5c:	10bfffc4 	addi	r2,r2,-1
    bd60:	b809883a 	mov	r4,r23
    bd64:	80a0703a 	and	r16,r16,r2
    bd68:	a02b883a 	mov	r21,r20
    bd6c:	003f0806 	br	b990 <__alt_data_end+0xfffc25b0>
    bd70:	008000c4 	movi	r2,3
    bd74:	3880b126 	beq	r7,r2,c03c <__divdf3+0x9b4>
    bd78:	00800044 	movi	r2,1
    bd7c:	38805b1e 	bne	r7,r2,beec <__divdf3+0x864>
    bd80:	e009883a 	mov	r4,fp
    bd84:	0005883a 	mov	r2,zero
    bd88:	0021883a 	mov	r16,zero
    bd8c:	002b883a 	mov	r21,zero
    bd90:	003e9c06 	br	b804 <__alt_data_end+0xfffc2424>
    bd94:	00800434 	movhi	r2,16
    bd98:	84000234 	orhi	r16,r16,8
    bd9c:	10bfffc4 	addi	r2,r2,-1
    bda0:	b009883a 	mov	r4,r22
    bda4:	80a0703a 	and	r16,r16,r2
    bda8:	003ef906 	br	b990 <__alt_data_end+0xfffc25b0>
    bdac:	103fca26 	beq	r2,zero,bcd8 <__alt_data_end+0xfffc28f8>
    bdb0:	b421883a 	add	r16,r22,r16
    bdb4:	a17fffc4 	addi	r5,r20,-1
    bdb8:	8580422e 	bgeu	r16,r22,bec4 <__divdf3+0x83c>
    bdbc:	2829883a 	mov	r20,r5
    bdc0:	813fc41e 	bne	r16,r4,bcd4 <__alt_data_end+0xfffc28f4>
    bdc4:	d9800017 	ldw	r6,0(sp)
    bdc8:	30bfc21e 	bne	r6,r2,bcd4 <__alt_data_end+0xfffc28f4>
    bdcc:	003fc206 	br	bcd8 <__alt_data_end+0xfffc28f8>
    bdd0:	143ff604 	addi	r16,r2,-40
    bdd4:	8c20983a 	sll	r16,r17,r16
    bdd8:	002b883a 	mov	r21,zero
    bddc:	003eb406 	br	b8b0 <__alt_data_end+0xfffc24d0>
    bde0:	d9800215 	stw	r6,8(sp)
    bde4:	d9c00515 	stw	r7,20(sp)
    bde8:	da000415 	stw	r8,16(sp)
    bdec:	000d61c0 	call	d61c <__clzsi2>
    bdf0:	10800804 	addi	r2,r2,32
    bdf4:	da000417 	ldw	r8,16(sp)
    bdf8:	d9c00517 	ldw	r7,20(sp)
    bdfc:	d9800217 	ldw	r6,8(sp)
    be00:	003ea106 	br	b888 <__alt_data_end+0xfffc24a8>
    be04:	147ff604 	addi	r17,r2,-40
    be08:	3462983a 	sll	r17,r6,r17
    be0c:	0029883a 	mov	r20,zero
    be10:	003ec906 	br	b938 <__alt_data_end+0xfffc2558>
    be14:	3009883a 	mov	r4,r6
    be18:	d9400115 	stw	r5,4(sp)
    be1c:	d9800215 	stw	r6,8(sp)
    be20:	da000415 	stw	r8,16(sp)
    be24:	da400315 	stw	r9,12(sp)
    be28:	000d61c0 	call	d61c <__clzsi2>
    be2c:	10800804 	addi	r2,r2,32
    be30:	da400317 	ldw	r9,12(sp)
    be34:	da000417 	ldw	r8,16(sp)
    be38:	d9800217 	ldw	r6,8(sp)
    be3c:	d9400117 	ldw	r5,4(sp)
    be40:	003eb306 	br	b910 <__alt_data_end+0xfffc2530>
    be44:	d9800017 	ldw	r6,0(sp)
    be48:	a9ab883a 	add	r21,r21,r6
    be4c:	a98b803a 	cmpltu	r5,r21,r6
    be50:	2d8b883a 	add	r5,r5,r22
    be54:	2a11883a 	add	r8,r5,r8
    be58:	897fffc4 	addi	r5,r17,-1
    be5c:	b2000c2e 	bgeu	r22,r8,be90 <__divdf3+0x808>
    be60:	41003f36 	bltu	r8,r4,bf60 <__divdf3+0x8d8>
    be64:	22006c26 	beq	r4,r8,c018 <__divdf3+0x990>
    be68:	4109c83a 	sub	r4,r8,r4
    be6c:	2823883a 	mov	r17,r5
    be70:	003f3b06 	br	bb60 <__alt_data_end+0xfffc2780>
    be74:	ad3ed336 	bltu	r21,r20,b9c4 <__alt_data_end+0xfffc25e4>
    be78:	a804d07a 	srli	r2,r21,1
    be7c:	802e97fa 	slli	r23,r16,31
    be80:	a82a97fa 	slli	r21,r21,31
    be84:	8020d07a 	srli	r16,r16,1
    be88:	b8aeb03a 	or	r23,r23,r2
    be8c:	003ed006 	br	b9d0 <__alt_data_end+0xfffc25f0>
    be90:	b23ff51e 	bne	r22,r8,be68 <__alt_data_end+0xfffc2a88>
    be94:	d9800017 	ldw	r6,0(sp)
    be98:	a9bff12e 	bgeu	r21,r6,be60 <__alt_data_end+0xfffc2a80>
    be9c:	b109c83a 	sub	r4,r22,r4
    bea0:	2823883a 	mov	r17,r5
    bea4:	003f2e06 	br	bb60 <__alt_data_end+0xfffc2780>
    bea8:	2021883a 	mov	r16,r4
    beac:	003eff06 	br	baac <__alt_data_end+0xfffc26cc>
    beb0:	2023883a 	mov	r17,r4
    beb4:	003ee406 	br	ba48 <__alt_data_end+0xfffc2668>
    beb8:	a8bfe236 	bltu	r21,r2,be44 <__alt_data_end+0xfffc2a64>
    bebc:	0009883a 	mov	r4,zero
    bec0:	003f2706 	br	bb60 <__alt_data_end+0xfffc2780>
    bec4:	81002d36 	bltu	r16,r4,bf7c <__divdf3+0x8f4>
    bec8:	24005626 	beq	r4,r16,c024 <__divdf3+0x99c>
    becc:	2829883a 	mov	r20,r5
    bed0:	003f8006 	br	bcd4 <__alt_data_end+0xfffc28f4>
    bed4:	053fffc4 	movi	r20,-1
    bed8:	003f7f06 	br	bcd8 <__alt_data_end+0xfffc28f8>
    bedc:	200f883a 	mov	r7,r4
    bee0:	003f3c06 	br	bbd4 <__alt_data_end+0xfffc27f4>
    bee4:	1011883a 	mov	r8,r2
    bee8:	003f5506 	br	bc40 <__alt_data_end+0xfffc2860>
    beec:	e027883a 	mov	r19,fp
    bef0:	003f7906 	br	bcd8 <__alt_data_end+0xfffc28f8>
    bef4:	010007c4 	movi	r4,31
    bef8:	20c02816 	blt	r4,r3,bf9c <__divdf3+0x914>
    befc:	00800804 	movi	r2,32
    bf00:	10c5c83a 	sub	r2,r2,r3
    bf04:	888a983a 	sll	r5,r17,r2
    bf08:	a0c8d83a 	srl	r4,r20,r3
    bf0c:	a084983a 	sll	r2,r20,r2
    bf10:	88e2d83a 	srl	r17,r17,r3
    bf14:	2906b03a 	or	r3,r5,r4
    bf18:	1004c03a 	cmpne	r2,r2,zero
    bf1c:	1886b03a 	or	r3,r3,r2
    bf20:	188001cc 	andi	r2,r3,7
    bf24:	10000726 	beq	r2,zero,bf44 <__divdf3+0x8bc>
    bf28:	188003cc 	andi	r2,r3,15
    bf2c:	01000104 	movi	r4,4
    bf30:	11000426 	beq	r2,r4,bf44 <__divdf3+0x8bc>
    bf34:	1805883a 	mov	r2,r3
    bf38:	10c00104 	addi	r3,r2,4
    bf3c:	1885803a 	cmpltu	r2,r3,r2
    bf40:	88a3883a 	add	r17,r17,r2
    bf44:	8880202c 	andhi	r2,r17,128
    bf48:	10002926 	beq	r2,zero,bff0 <__divdf3+0x968>
    bf4c:	9900004c 	andi	r4,r19,1
    bf50:	00800044 	movi	r2,1
    bf54:	0021883a 	mov	r16,zero
    bf58:	002b883a 	mov	r21,zero
    bf5c:	003e2906 	br	b804 <__alt_data_end+0xfffc2424>
    bf60:	d9800017 	ldw	r6,0(sp)
    bf64:	8c7fff84 	addi	r17,r17,-2
    bf68:	a9ab883a 	add	r21,r21,r6
    bf6c:	a98b803a 	cmpltu	r5,r21,r6
    bf70:	2d8b883a 	add	r5,r5,r22
    bf74:	2a11883a 	add	r8,r5,r8
    bf78:	003ef806 	br	bb5c <__alt_data_end+0xfffc277c>
    bf7c:	d9800017 	ldw	r6,0(sp)
    bf80:	318f883a 	add	r7,r6,r6
    bf84:	398b803a 	cmpltu	r5,r7,r6
    bf88:	2d8d883a 	add	r6,r5,r22
    bf8c:	81a1883a 	add	r16,r16,r6
    bf90:	a17fff84 	addi	r5,r20,-2
    bf94:	d9c00015 	stw	r7,0(sp)
    bf98:	003f8806 	br	bdbc <__alt_data_end+0xfffc29dc>
    bf9c:	013ff844 	movi	r4,-31
    bfa0:	2085c83a 	sub	r2,r4,r2
    bfa4:	8888d83a 	srl	r4,r17,r2
    bfa8:	00800804 	movi	r2,32
    bfac:	18802126 	beq	r3,r2,c034 <__divdf3+0x9ac>
    bfb0:	04001004 	movi	r16,64
    bfb4:	80c7c83a 	sub	r3,r16,r3
    bfb8:	88e0983a 	sll	r16,r17,r3
    bfbc:	8504b03a 	or	r2,r16,r20
    bfc0:	1004c03a 	cmpne	r2,r2,zero
    bfc4:	2084b03a 	or	r2,r4,r2
    bfc8:	144001cc 	andi	r17,r2,7
    bfcc:	88000d1e 	bne	r17,zero,c004 <__divdf3+0x97c>
    bfd0:	0021883a 	mov	r16,zero
    bfd4:	102ad0fa 	srli	r21,r2,3
    bfd8:	9900004c 	andi	r4,r19,1
    bfdc:	0005883a 	mov	r2,zero
    bfe0:	ac6ab03a 	or	r21,r21,r17
    bfe4:	003e0706 	br	b804 <__alt_data_end+0xfffc2424>
    bfe8:	1007883a 	mov	r3,r2
    bfec:	0023883a 	mov	r17,zero
    bff0:	8820927a 	slli	r16,r17,9
    bff4:	1805883a 	mov	r2,r3
    bff8:	8822977a 	slli	r17,r17,29
    bffc:	8020d33a 	srli	r16,r16,12
    c000:	003ff406 	br	bfd4 <__alt_data_end+0xfffc2bf4>
    c004:	10c003cc 	andi	r3,r2,15
    c008:	01000104 	movi	r4,4
    c00c:	193ff626 	beq	r3,r4,bfe8 <__alt_data_end+0xfffc2c08>
    c010:	0023883a 	mov	r17,zero
    c014:	003fc806 	br	bf38 <__alt_data_end+0xfffc2b58>
    c018:	a8bfd136 	bltu	r21,r2,bf60 <__alt_data_end+0xfffc2b80>
    c01c:	2823883a 	mov	r17,r5
    c020:	003fa606 	br	bebc <__alt_data_end+0xfffc2adc>
    c024:	d9800017 	ldw	r6,0(sp)
    c028:	30bfd436 	bltu	r6,r2,bf7c <__alt_data_end+0xfffc2b9c>
    c02c:	2829883a 	mov	r20,r5
    c030:	003f6406 	br	bdc4 <__alt_data_end+0xfffc29e4>
    c034:	0021883a 	mov	r16,zero
    c038:	003fe006 	br	bfbc <__alt_data_end+0xfffc2bdc>
    c03c:	00800434 	movhi	r2,16
    c040:	8c000234 	orhi	r16,r17,8
    c044:	10bfffc4 	addi	r2,r2,-1
    c048:	e009883a 	mov	r4,fp
    c04c:	80a0703a 	and	r16,r16,r2
    c050:	a02b883a 	mov	r21,r20
    c054:	003e4e06 	br	b990 <__alt_data_end+0xfffc25b0>

0000c058 <__eqdf2>:
    c058:	2804d53a 	srli	r2,r5,20
    c05c:	3806d53a 	srli	r3,r7,20
    c060:	02000434 	movhi	r8,16
    c064:	423fffc4 	addi	r8,r8,-1
    c068:	1081ffcc 	andi	r2,r2,2047
    c06c:	0281ffc4 	movi	r10,2047
    c070:	2a12703a 	and	r9,r5,r8
    c074:	18c1ffcc 	andi	r3,r3,2047
    c078:	3a10703a 	and	r8,r7,r8
    c07c:	280ad7fa 	srli	r5,r5,31
    c080:	380ed7fa 	srli	r7,r7,31
    c084:	12801026 	beq	r2,r10,c0c8 <__eqdf2+0x70>
    c088:	0281ffc4 	movi	r10,2047
    c08c:	1a800a26 	beq	r3,r10,c0b8 <__eqdf2+0x60>
    c090:	10c00226 	beq	r2,r3,c09c <__eqdf2+0x44>
    c094:	00800044 	movi	r2,1
    c098:	f800283a 	ret
    c09c:	4a3ffd1e 	bne	r9,r8,c094 <__alt_data_end+0xfffc2cb4>
    c0a0:	21bffc1e 	bne	r4,r6,c094 <__alt_data_end+0xfffc2cb4>
    c0a4:	29c00c26 	beq	r5,r7,c0d8 <__eqdf2+0x80>
    c0a8:	103ffa1e 	bne	r2,zero,c094 <__alt_data_end+0xfffc2cb4>
    c0ac:	2244b03a 	or	r2,r4,r9
    c0b0:	1004c03a 	cmpne	r2,r2,zero
    c0b4:	f800283a 	ret
    c0b8:	3214b03a 	or	r10,r6,r8
    c0bc:	503ff426 	beq	r10,zero,c090 <__alt_data_end+0xfffc2cb0>
    c0c0:	00800044 	movi	r2,1
    c0c4:	f800283a 	ret
    c0c8:	2254b03a 	or	r10,r4,r9
    c0cc:	503fee26 	beq	r10,zero,c088 <__alt_data_end+0xfffc2ca8>
    c0d0:	00800044 	movi	r2,1
    c0d4:	f800283a 	ret
    c0d8:	0005883a 	mov	r2,zero
    c0dc:	f800283a 	ret

0000c0e0 <__gedf2>:
    c0e0:	2804d53a 	srli	r2,r5,20
    c0e4:	3806d53a 	srli	r3,r7,20
    c0e8:	02000434 	movhi	r8,16
    c0ec:	423fffc4 	addi	r8,r8,-1
    c0f0:	1081ffcc 	andi	r2,r2,2047
    c0f4:	0241ffc4 	movi	r9,2047
    c0f8:	2a14703a 	and	r10,r5,r8
    c0fc:	18c1ffcc 	andi	r3,r3,2047
    c100:	3a10703a 	and	r8,r7,r8
    c104:	280ad7fa 	srli	r5,r5,31
    c108:	380ed7fa 	srli	r7,r7,31
    c10c:	12401d26 	beq	r2,r9,c184 <__gedf2+0xa4>
    c110:	0241ffc4 	movi	r9,2047
    c114:	1a401226 	beq	r3,r9,c160 <__gedf2+0x80>
    c118:	1000081e 	bne	r2,zero,c13c <__gedf2+0x5c>
    c11c:	2296b03a 	or	r11,r4,r10
    c120:	5813003a 	cmpeq	r9,r11,zero
    c124:	1800091e 	bne	r3,zero,c14c <__gedf2+0x6c>
    c128:	3218b03a 	or	r12,r6,r8
    c12c:	6000071e 	bne	r12,zero,c14c <__gedf2+0x6c>
    c130:	0005883a 	mov	r2,zero
    c134:	5800101e 	bne	r11,zero,c178 <__gedf2+0x98>
    c138:	f800283a 	ret
    c13c:	18000c1e 	bne	r3,zero,c170 <__gedf2+0x90>
    c140:	3212b03a 	or	r9,r6,r8
    c144:	48000c26 	beq	r9,zero,c178 <__gedf2+0x98>
    c148:	0013883a 	mov	r9,zero
    c14c:	39c03fcc 	andi	r7,r7,255
    c150:	48000826 	beq	r9,zero,c174 <__gedf2+0x94>
    c154:	38000926 	beq	r7,zero,c17c <__gedf2+0x9c>
    c158:	00800044 	movi	r2,1
    c15c:	f800283a 	ret
    c160:	3212b03a 	or	r9,r6,r8
    c164:	483fec26 	beq	r9,zero,c118 <__alt_data_end+0xfffc2d38>
    c168:	00bfff84 	movi	r2,-2
    c16c:	f800283a 	ret
    c170:	39c03fcc 	andi	r7,r7,255
    c174:	29c00626 	beq	r5,r7,c190 <__gedf2+0xb0>
    c178:	283ff726 	beq	r5,zero,c158 <__alt_data_end+0xfffc2d78>
    c17c:	00bfffc4 	movi	r2,-1
    c180:	f800283a 	ret
    c184:	2292b03a 	or	r9,r4,r10
    c188:	483fe126 	beq	r9,zero,c110 <__alt_data_end+0xfffc2d30>
    c18c:	003ff606 	br	c168 <__alt_data_end+0xfffc2d88>
    c190:	18bff916 	blt	r3,r2,c178 <__alt_data_end+0xfffc2d98>
    c194:	10c00316 	blt	r2,r3,c1a4 <__gedf2+0xc4>
    c198:	42bff736 	bltu	r8,r10,c178 <__alt_data_end+0xfffc2d98>
    c19c:	52000326 	beq	r10,r8,c1ac <__gedf2+0xcc>
    c1a0:	5200042e 	bgeu	r10,r8,c1b4 <__gedf2+0xd4>
    c1a4:	283fec1e 	bne	r5,zero,c158 <__alt_data_end+0xfffc2d78>
    c1a8:	003ff406 	br	c17c <__alt_data_end+0xfffc2d9c>
    c1ac:	313ff236 	bltu	r6,r4,c178 <__alt_data_end+0xfffc2d98>
    c1b0:	21bffc36 	bltu	r4,r6,c1a4 <__alt_data_end+0xfffc2dc4>
    c1b4:	0005883a 	mov	r2,zero
    c1b8:	f800283a 	ret

0000c1bc <__ledf2>:
    c1bc:	2804d53a 	srli	r2,r5,20
    c1c0:	3810d53a 	srli	r8,r7,20
    c1c4:	00c00434 	movhi	r3,16
    c1c8:	18ffffc4 	addi	r3,r3,-1
    c1cc:	1081ffcc 	andi	r2,r2,2047
    c1d0:	0241ffc4 	movi	r9,2047
    c1d4:	28d4703a 	and	r10,r5,r3
    c1d8:	4201ffcc 	andi	r8,r8,2047
    c1dc:	38c6703a 	and	r3,r7,r3
    c1e0:	280ad7fa 	srli	r5,r5,31
    c1e4:	380ed7fa 	srli	r7,r7,31
    c1e8:	12401f26 	beq	r2,r9,c268 <__ledf2+0xac>
    c1ec:	0241ffc4 	movi	r9,2047
    c1f0:	42401426 	beq	r8,r9,c244 <__ledf2+0x88>
    c1f4:	1000091e 	bne	r2,zero,c21c <__ledf2+0x60>
    c1f8:	2296b03a 	or	r11,r4,r10
    c1fc:	5813003a 	cmpeq	r9,r11,zero
    c200:	29403fcc 	andi	r5,r5,255
    c204:	40000a1e 	bne	r8,zero,c230 <__ledf2+0x74>
    c208:	30d8b03a 	or	r12,r6,r3
    c20c:	6000081e 	bne	r12,zero,c230 <__ledf2+0x74>
    c210:	0005883a 	mov	r2,zero
    c214:	5800111e 	bne	r11,zero,c25c <__ledf2+0xa0>
    c218:	f800283a 	ret
    c21c:	29403fcc 	andi	r5,r5,255
    c220:	40000c1e 	bne	r8,zero,c254 <__ledf2+0x98>
    c224:	30d2b03a 	or	r9,r6,r3
    c228:	48000c26 	beq	r9,zero,c25c <__ledf2+0xa0>
    c22c:	0013883a 	mov	r9,zero
    c230:	39c03fcc 	andi	r7,r7,255
    c234:	48000826 	beq	r9,zero,c258 <__ledf2+0x9c>
    c238:	38001126 	beq	r7,zero,c280 <__ledf2+0xc4>
    c23c:	00800044 	movi	r2,1
    c240:	f800283a 	ret
    c244:	30d2b03a 	or	r9,r6,r3
    c248:	483fea26 	beq	r9,zero,c1f4 <__alt_data_end+0xfffc2e14>
    c24c:	00800084 	movi	r2,2
    c250:	f800283a 	ret
    c254:	39c03fcc 	andi	r7,r7,255
    c258:	39400726 	beq	r7,r5,c278 <__ledf2+0xbc>
    c25c:	2800081e 	bne	r5,zero,c280 <__ledf2+0xc4>
    c260:	00800044 	movi	r2,1
    c264:	f800283a 	ret
    c268:	2292b03a 	or	r9,r4,r10
    c26c:	483fdf26 	beq	r9,zero,c1ec <__alt_data_end+0xfffc2e0c>
    c270:	00800084 	movi	r2,2
    c274:	f800283a 	ret
    c278:	4080030e 	bge	r8,r2,c288 <__ledf2+0xcc>
    c27c:	383fef26 	beq	r7,zero,c23c <__alt_data_end+0xfffc2e5c>
    c280:	00bfffc4 	movi	r2,-1
    c284:	f800283a 	ret
    c288:	123feb16 	blt	r2,r8,c238 <__alt_data_end+0xfffc2e58>
    c28c:	1abff336 	bltu	r3,r10,c25c <__alt_data_end+0xfffc2e7c>
    c290:	50c00326 	beq	r10,r3,c2a0 <__ledf2+0xe4>
    c294:	50c0042e 	bgeu	r10,r3,c2a8 <__ledf2+0xec>
    c298:	283fe81e 	bne	r5,zero,c23c <__alt_data_end+0xfffc2e5c>
    c29c:	003ff806 	br	c280 <__alt_data_end+0xfffc2ea0>
    c2a0:	313fee36 	bltu	r6,r4,c25c <__alt_data_end+0xfffc2e7c>
    c2a4:	21bffc36 	bltu	r4,r6,c298 <__alt_data_end+0xfffc2eb8>
    c2a8:	0005883a 	mov	r2,zero
    c2ac:	f800283a 	ret

0000c2b0 <__muldf3>:
    c2b0:	deffee04 	addi	sp,sp,-72
    c2b4:	dd000c15 	stw	r20,48(sp)
    c2b8:	2828d53a 	srli	r20,r5,20
    c2bc:	ddc00f15 	stw	r23,60(sp)
    c2c0:	282ed7fa 	srli	r23,r5,31
    c2c4:	dc000815 	stw	r16,32(sp)
    c2c8:	04000434 	movhi	r16,16
    c2cc:	dcc00b15 	stw	r19,44(sp)
    c2d0:	843fffc4 	addi	r16,r16,-1
    c2d4:	dfc01115 	stw	ra,68(sp)
    c2d8:	df001015 	stw	fp,64(sp)
    c2dc:	dd800e15 	stw	r22,56(sp)
    c2e0:	dd400d15 	stw	r21,52(sp)
    c2e4:	dc800a15 	stw	r18,40(sp)
    c2e8:	dc400915 	stw	r17,36(sp)
    c2ec:	a501ffcc 	andi	r20,r20,2047
    c2f0:	2c20703a 	and	r16,r5,r16
    c2f4:	b827883a 	mov	r19,r23
    c2f8:	ba403fcc 	andi	r9,r23,255
    c2fc:	a0006026 	beq	r20,zero,c480 <__muldf3+0x1d0>
    c300:	0081ffc4 	movi	r2,2047
    c304:	202d883a 	mov	r22,r4
    c308:	a0803626 	beq	r20,r2,c3e4 <__muldf3+0x134>
    c30c:	84000434 	orhi	r16,r16,16
    c310:	200ad77a 	srli	r5,r4,29
    c314:	800490fa 	slli	r2,r16,3
    c318:	202c90fa 	slli	r22,r4,3
    c31c:	a53f0044 	addi	r20,r20,-1023
    c320:	28a0b03a 	or	r16,r5,r2
    c324:	002b883a 	mov	r21,zero
    c328:	000b883a 	mov	r5,zero
    c32c:	3804d53a 	srli	r2,r7,20
    c330:	3838d7fa 	srli	fp,r7,31
    c334:	04400434 	movhi	r17,16
    c338:	8c7fffc4 	addi	r17,r17,-1
    c33c:	1081ffcc 	andi	r2,r2,2047
    c340:	3025883a 	mov	r18,r6
    c344:	3c62703a 	and	r17,r7,r17
    c348:	e2803fcc 	andi	r10,fp,255
    c34c:	10006d26 	beq	r2,zero,c504 <__muldf3+0x254>
    c350:	00c1ffc4 	movi	r3,2047
    c354:	10c06526 	beq	r2,r3,c4ec <__muldf3+0x23c>
    c358:	8c400434 	orhi	r17,r17,16
    c35c:	300ed77a 	srli	r7,r6,29
    c360:	880690fa 	slli	r3,r17,3
    c364:	302490fa 	slli	r18,r6,3
    c368:	10bf0044 	addi	r2,r2,-1023
    c36c:	38e2b03a 	or	r17,r7,r3
    c370:	000f883a 	mov	r7,zero
    c374:	a087883a 	add	r3,r20,r2
    c378:	010003c4 	movi	r4,15
    c37c:	3d44b03a 	or	r2,r7,r21
    c380:	e5ccf03a 	xor	r6,fp,r23
    c384:	1a000044 	addi	r8,r3,1
    c388:	20809b36 	bltu	r4,r2,c5f8 <__muldf3+0x348>
    c38c:	100490ba 	slli	r2,r2,2
    c390:	01000074 	movhi	r4,1
    c394:	2130e904 	addi	r4,r4,-15452
    c398:	1105883a 	add	r2,r2,r4
    c39c:	10800017 	ldw	r2,0(r2)
    c3a0:	1000683a 	jmp	r2
    c3a4:	0000c5f8 	rdprs	zero,zero,791
    c3a8:	0000c404 	movi	zero,784
    c3ac:	0000c404 	movi	zero,784
    c3b0:	0000c400 	call	c40 <___vfprintf_internal_r+0x490>
    c3b4:	0000c5d4 	movui	zero,791
    c3b8:	0000c5d4 	movui	zero,791
    c3bc:	0000c5bc 	xorhi	zero,zero,790
    c3c0:	0000c400 	call	c40 <___vfprintf_internal_r+0x490>
    c3c4:	0000c5d4 	movui	zero,791
    c3c8:	0000c5bc 	xorhi	zero,zero,790
    c3cc:	0000c5d4 	movui	zero,791
    c3d0:	0000c400 	call	c40 <___vfprintf_internal_r+0x490>
    c3d4:	0000c5e4 	muli	zero,zero,791
    c3d8:	0000c5e4 	muli	zero,zero,791
    c3dc:	0000c5e4 	muli	zero,zero,791
    c3e0:	0000c944 	movi	zero,805
    c3e4:	2404b03a 	or	r2,r4,r16
    c3e8:	1000711e 	bne	r2,zero,c5b0 <__muldf3+0x300>
    c3ec:	05400204 	movi	r21,8
    c3f0:	0021883a 	mov	r16,zero
    c3f4:	002d883a 	mov	r22,zero
    c3f8:	01400084 	movi	r5,2
    c3fc:	003fcb06 	br	c32c <__alt_data_end+0xfffc2f4c>
    c400:	500d883a 	mov	r6,r10
    c404:	00800084 	movi	r2,2
    c408:	38805926 	beq	r7,r2,c570 <__muldf3+0x2c0>
    c40c:	008000c4 	movi	r2,3
    c410:	3881bb26 	beq	r7,r2,cb00 <__muldf3+0x850>
    c414:	00800044 	movi	r2,1
    c418:	3881961e 	bne	r7,r2,ca74 <__muldf3+0x7c4>
    c41c:	3027883a 	mov	r19,r6
    c420:	0005883a 	mov	r2,zero
    c424:	0021883a 	mov	r16,zero
    c428:	002d883a 	mov	r22,zero
    c42c:	1004953a 	slli	r2,r2,20
    c430:	98c03fcc 	andi	r3,r19,255
    c434:	04400434 	movhi	r17,16
    c438:	8c7fffc4 	addi	r17,r17,-1
    c43c:	180697fa 	slli	r3,r3,31
    c440:	8460703a 	and	r16,r16,r17
    c444:	80a0b03a 	or	r16,r16,r2
    c448:	80c6b03a 	or	r3,r16,r3
    c44c:	b005883a 	mov	r2,r22
    c450:	dfc01117 	ldw	ra,68(sp)
    c454:	df001017 	ldw	fp,64(sp)
    c458:	ddc00f17 	ldw	r23,60(sp)
    c45c:	dd800e17 	ldw	r22,56(sp)
    c460:	dd400d17 	ldw	r21,52(sp)
    c464:	dd000c17 	ldw	r20,48(sp)
    c468:	dcc00b17 	ldw	r19,44(sp)
    c46c:	dc800a17 	ldw	r18,40(sp)
    c470:	dc400917 	ldw	r17,36(sp)
    c474:	dc000817 	ldw	r16,32(sp)
    c478:	dec01204 	addi	sp,sp,72
    c47c:	f800283a 	ret
    c480:	2404b03a 	or	r2,r4,r16
    c484:	202b883a 	mov	r21,r4
    c488:	10004426 	beq	r2,zero,c59c <__muldf3+0x2ec>
    c48c:	80015126 	beq	r16,zero,c9d4 <__muldf3+0x724>
    c490:	8009883a 	mov	r4,r16
    c494:	d9800715 	stw	r6,28(sp)
    c498:	d9c00215 	stw	r7,8(sp)
    c49c:	da400415 	stw	r9,16(sp)
    c4a0:	000d61c0 	call	d61c <__clzsi2>
    c4a4:	d9800717 	ldw	r6,28(sp)
    c4a8:	d9c00217 	ldw	r7,8(sp)
    c4ac:	da400417 	ldw	r9,16(sp)
    c4b0:	113ffd44 	addi	r4,r2,-11
    c4b4:	00c00704 	movi	r3,28
    c4b8:	19014216 	blt	r3,r4,c9c4 <__muldf3+0x714>
    c4bc:	00c00744 	movi	r3,29
    c4c0:	15bffe04 	addi	r22,r2,-8
    c4c4:	1907c83a 	sub	r3,r3,r4
    c4c8:	85a0983a 	sll	r16,r16,r22
    c4cc:	a8c6d83a 	srl	r3,r21,r3
    c4d0:	adac983a 	sll	r22,r21,r22
    c4d4:	1c20b03a 	or	r16,r3,r16
    c4d8:	1080fcc4 	addi	r2,r2,1011
    c4dc:	00a9c83a 	sub	r20,zero,r2
    c4e0:	002b883a 	mov	r21,zero
    c4e4:	000b883a 	mov	r5,zero
    c4e8:	003f9006 	br	c32c <__alt_data_end+0xfffc2f4c>
    c4ec:	3446b03a 	or	r3,r6,r17
    c4f0:	1800281e 	bne	r3,zero,c594 <__muldf3+0x2e4>
    c4f4:	0023883a 	mov	r17,zero
    c4f8:	0025883a 	mov	r18,zero
    c4fc:	01c00084 	movi	r7,2
    c500:	003f9c06 	br	c374 <__alt_data_end+0xfffc2f94>
    c504:	3446b03a 	or	r3,r6,r17
    c508:	18001e26 	beq	r3,zero,c584 <__muldf3+0x2d4>
    c50c:	88012126 	beq	r17,zero,c994 <__muldf3+0x6e4>
    c510:	8809883a 	mov	r4,r17
    c514:	d9400215 	stw	r5,8(sp)
    c518:	d9800715 	stw	r6,28(sp)
    c51c:	da400415 	stw	r9,16(sp)
    c520:	da800315 	stw	r10,12(sp)
    c524:	000d61c0 	call	d61c <__clzsi2>
    c528:	d9400217 	ldw	r5,8(sp)
    c52c:	d9800717 	ldw	r6,28(sp)
    c530:	da400417 	ldw	r9,16(sp)
    c534:	da800317 	ldw	r10,12(sp)
    c538:	113ffd44 	addi	r4,r2,-11
    c53c:	00c00704 	movi	r3,28
    c540:	19011016 	blt	r3,r4,c984 <__muldf3+0x6d4>
    c544:	00c00744 	movi	r3,29
    c548:	14bffe04 	addi	r18,r2,-8
    c54c:	1907c83a 	sub	r3,r3,r4
    c550:	8ca2983a 	sll	r17,r17,r18
    c554:	30c6d83a 	srl	r3,r6,r3
    c558:	34a4983a 	sll	r18,r6,r18
    c55c:	1c62b03a 	or	r17,r3,r17
    c560:	1080fcc4 	addi	r2,r2,1011
    c564:	0085c83a 	sub	r2,zero,r2
    c568:	000f883a 	mov	r7,zero
    c56c:	003f8106 	br	c374 <__alt_data_end+0xfffc2f94>
    c570:	3027883a 	mov	r19,r6
    c574:	0081ffc4 	movi	r2,2047
    c578:	0021883a 	mov	r16,zero
    c57c:	002d883a 	mov	r22,zero
    c580:	003faa06 	br	c42c <__alt_data_end+0xfffc304c>
    c584:	0023883a 	mov	r17,zero
    c588:	0025883a 	mov	r18,zero
    c58c:	01c00044 	movi	r7,1
    c590:	003f7806 	br	c374 <__alt_data_end+0xfffc2f94>
    c594:	01c000c4 	movi	r7,3
    c598:	003f7606 	br	c374 <__alt_data_end+0xfffc2f94>
    c59c:	05400104 	movi	r21,4
    c5a0:	0021883a 	mov	r16,zero
    c5a4:	002d883a 	mov	r22,zero
    c5a8:	01400044 	movi	r5,1
    c5ac:	003f5f06 	br	c32c <__alt_data_end+0xfffc2f4c>
    c5b0:	05400304 	movi	r21,12
    c5b4:	014000c4 	movi	r5,3
    c5b8:	003f5c06 	br	c32c <__alt_data_end+0xfffc2f4c>
    c5bc:	04000434 	movhi	r16,16
    c5c0:	0027883a 	mov	r19,zero
    c5c4:	843fffc4 	addi	r16,r16,-1
    c5c8:	05bfffc4 	movi	r22,-1
    c5cc:	0081ffc4 	movi	r2,2047
    c5d0:	003f9606 	br	c42c <__alt_data_end+0xfffc304c>
    c5d4:	8023883a 	mov	r17,r16
    c5d8:	b025883a 	mov	r18,r22
    c5dc:	280f883a 	mov	r7,r5
    c5e0:	003f8806 	br	c404 <__alt_data_end+0xfffc3024>
    c5e4:	8023883a 	mov	r17,r16
    c5e8:	b025883a 	mov	r18,r22
    c5ec:	480d883a 	mov	r6,r9
    c5f0:	280f883a 	mov	r7,r5
    c5f4:	003f8306 	br	c404 <__alt_data_end+0xfffc3024>
    c5f8:	b026d43a 	srli	r19,r22,16
    c5fc:	902ed43a 	srli	r23,r18,16
    c600:	b5bfffcc 	andi	r22,r22,65535
    c604:	94bfffcc 	andi	r18,r18,65535
    c608:	b00b883a 	mov	r5,r22
    c60c:	9009883a 	mov	r4,r18
    c610:	d8c00515 	stw	r3,20(sp)
    c614:	d9800715 	stw	r6,28(sp)
    c618:	da000615 	stw	r8,24(sp)
    c61c:	000adb40 	call	adb4 <__mulsi3>
    c620:	980b883a 	mov	r5,r19
    c624:	9009883a 	mov	r4,r18
    c628:	1029883a 	mov	r20,r2
    c62c:	000adb40 	call	adb4 <__mulsi3>
    c630:	b80b883a 	mov	r5,r23
    c634:	9809883a 	mov	r4,r19
    c638:	102b883a 	mov	r21,r2
    c63c:	000adb40 	call	adb4 <__mulsi3>
    c640:	b809883a 	mov	r4,r23
    c644:	b00b883a 	mov	r5,r22
    c648:	1039883a 	mov	fp,r2
    c64c:	000adb40 	call	adb4 <__mulsi3>
    c650:	a008d43a 	srli	r4,r20,16
    c654:	1545883a 	add	r2,r2,r21
    c658:	d8c00517 	ldw	r3,20(sp)
    c65c:	2085883a 	add	r2,r4,r2
    c660:	d9800717 	ldw	r6,28(sp)
    c664:	da000617 	ldw	r8,24(sp)
    c668:	1540022e 	bgeu	r2,r21,c674 <__muldf3+0x3c4>
    c66c:	01000074 	movhi	r4,1
    c670:	e139883a 	add	fp,fp,r4
    c674:	100e943a 	slli	r7,r2,16
    c678:	1004d43a 	srli	r2,r2,16
    c67c:	882ad43a 	srli	r21,r17,16
    c680:	a53fffcc 	andi	r20,r20,65535
    c684:	8c7fffcc 	andi	r17,r17,65535
    c688:	3d29883a 	add	r20,r7,r20
    c68c:	b00b883a 	mov	r5,r22
    c690:	8809883a 	mov	r4,r17
    c694:	d8c00515 	stw	r3,20(sp)
    c698:	d9800715 	stw	r6,28(sp)
    c69c:	da000615 	stw	r8,24(sp)
    c6a0:	dd000115 	stw	r20,4(sp)
    c6a4:	d8800015 	stw	r2,0(sp)
    c6a8:	000adb40 	call	adb4 <__mulsi3>
    c6ac:	980b883a 	mov	r5,r19
    c6b0:	8809883a 	mov	r4,r17
    c6b4:	d8800215 	stw	r2,8(sp)
    c6b8:	000adb40 	call	adb4 <__mulsi3>
    c6bc:	9809883a 	mov	r4,r19
    c6c0:	a80b883a 	mov	r5,r21
    c6c4:	1029883a 	mov	r20,r2
    c6c8:	000adb40 	call	adb4 <__mulsi3>
    c6cc:	b00b883a 	mov	r5,r22
    c6d0:	a809883a 	mov	r4,r21
    c6d4:	d8800415 	stw	r2,16(sp)
    c6d8:	000adb40 	call	adb4 <__mulsi3>
    c6dc:	d9c00217 	ldw	r7,8(sp)
    c6e0:	1505883a 	add	r2,r2,r20
    c6e4:	d8c00517 	ldw	r3,20(sp)
    c6e8:	3826d43a 	srli	r19,r7,16
    c6ec:	d9800717 	ldw	r6,28(sp)
    c6f0:	da000617 	ldw	r8,24(sp)
    c6f4:	9885883a 	add	r2,r19,r2
    c6f8:	da400417 	ldw	r9,16(sp)
    c6fc:	1500022e 	bgeu	r2,r20,c708 <__muldf3+0x458>
    c700:	01000074 	movhi	r4,1
    c704:	4913883a 	add	r9,r9,r4
    c708:	1028d43a 	srli	r20,r2,16
    c70c:	1004943a 	slli	r2,r2,16
    c710:	802cd43a 	srli	r22,r16,16
    c714:	843fffcc 	andi	r16,r16,65535
    c718:	3cffffcc 	andi	r19,r7,65535
    c71c:	9009883a 	mov	r4,r18
    c720:	800b883a 	mov	r5,r16
    c724:	a269883a 	add	r20,r20,r9
    c728:	d8c00515 	stw	r3,20(sp)
    c72c:	d9800715 	stw	r6,28(sp)
    c730:	da000615 	stw	r8,24(sp)
    c734:	14e7883a 	add	r19,r2,r19
    c738:	000adb40 	call	adb4 <__mulsi3>
    c73c:	9009883a 	mov	r4,r18
    c740:	b00b883a 	mov	r5,r22
    c744:	d8800315 	stw	r2,12(sp)
    c748:	000adb40 	call	adb4 <__mulsi3>
    c74c:	b809883a 	mov	r4,r23
    c750:	b00b883a 	mov	r5,r22
    c754:	d8800215 	stw	r2,8(sp)
    c758:	000adb40 	call	adb4 <__mulsi3>
    c75c:	b80b883a 	mov	r5,r23
    c760:	8009883a 	mov	r4,r16
    c764:	d8800415 	stw	r2,16(sp)
    c768:	000adb40 	call	adb4 <__mulsi3>
    c76c:	da800317 	ldw	r10,12(sp)
    c770:	d9c00217 	ldw	r7,8(sp)
    c774:	d9000017 	ldw	r4,0(sp)
    c778:	502ed43a 	srli	r23,r10,16
    c77c:	11c5883a 	add	r2,r2,r7
    c780:	24e5883a 	add	r18,r4,r19
    c784:	b885883a 	add	r2,r23,r2
    c788:	d8c00517 	ldw	r3,20(sp)
    c78c:	d9800717 	ldw	r6,28(sp)
    c790:	da000617 	ldw	r8,24(sp)
    c794:	da400417 	ldw	r9,16(sp)
    c798:	11c0022e 	bgeu	r2,r7,c7a4 <__muldf3+0x4f4>
    c79c:	01000074 	movhi	r4,1
    c7a0:	4913883a 	add	r9,r9,r4
    c7a4:	100ed43a 	srli	r7,r2,16
    c7a8:	1004943a 	slli	r2,r2,16
    c7ac:	55ffffcc 	andi	r23,r10,65535
    c7b0:	3a53883a 	add	r9,r7,r9
    c7b4:	8809883a 	mov	r4,r17
    c7b8:	800b883a 	mov	r5,r16
    c7bc:	d8c00515 	stw	r3,20(sp)
    c7c0:	d9800715 	stw	r6,28(sp)
    c7c4:	da000615 	stw	r8,24(sp)
    c7c8:	da400415 	stw	r9,16(sp)
    c7cc:	15ef883a 	add	r23,r2,r23
    c7d0:	000adb40 	call	adb4 <__mulsi3>
    c7d4:	8809883a 	mov	r4,r17
    c7d8:	b00b883a 	mov	r5,r22
    c7dc:	d8800215 	stw	r2,8(sp)
    c7e0:	000adb40 	call	adb4 <__mulsi3>
    c7e4:	b00b883a 	mov	r5,r22
    c7e8:	a809883a 	mov	r4,r21
    c7ec:	d8800315 	stw	r2,12(sp)
    c7f0:	000adb40 	call	adb4 <__mulsi3>
    c7f4:	8009883a 	mov	r4,r16
    c7f8:	a80b883a 	mov	r5,r21
    c7fc:	1023883a 	mov	r17,r2
    c800:	000adb40 	call	adb4 <__mulsi3>
    c804:	d9c00217 	ldw	r7,8(sp)
    c808:	da800317 	ldw	r10,12(sp)
    c80c:	d8c00517 	ldw	r3,20(sp)
    c810:	3808d43a 	srli	r4,r7,16
    c814:	1285883a 	add	r2,r2,r10
    c818:	d9800717 	ldw	r6,28(sp)
    c81c:	2085883a 	add	r2,r4,r2
    c820:	da000617 	ldw	r8,24(sp)
    c824:	da400417 	ldw	r9,16(sp)
    c828:	1280022e 	bgeu	r2,r10,c834 <__muldf3+0x584>
    c82c:	01000074 	movhi	r4,1
    c830:	8923883a 	add	r17,r17,r4
    c834:	1008943a 	slli	r4,r2,16
    c838:	39ffffcc 	andi	r7,r7,65535
    c83c:	e4b9883a 	add	fp,fp,r18
    c840:	21cf883a 	add	r7,r4,r7
    c844:	e4e7803a 	cmpltu	r19,fp,r19
    c848:	3d0f883a 	add	r7,r7,r20
    c84c:	bf39883a 	add	fp,r23,fp
    c850:	99c9883a 	add	r4,r19,r7
    c854:	e5ef803a 	cmpltu	r23,fp,r23
    c858:	490b883a 	add	r5,r9,r4
    c85c:	1004d43a 	srli	r2,r2,16
    c860:	b965883a 	add	r18,r23,r5
    c864:	24c9803a 	cmpltu	r4,r4,r19
    c868:	3d29803a 	cmpltu	r20,r7,r20
    c86c:	a128b03a 	or	r20,r20,r4
    c870:	95ef803a 	cmpltu	r23,r18,r23
    c874:	2a53803a 	cmpltu	r9,r5,r9
    c878:	a0a9883a 	add	r20,r20,r2
    c87c:	4deeb03a 	or	r23,r9,r23
    c880:	a5ef883a 	add	r23,r20,r23
    c884:	bc63883a 	add	r17,r23,r17
    c888:	e004927a 	slli	r2,fp,9
    c88c:	d9000117 	ldw	r4,4(sp)
    c890:	882e927a 	slli	r23,r17,9
    c894:	9022d5fa 	srli	r17,r18,23
    c898:	e038d5fa 	srli	fp,fp,23
    c89c:	1104b03a 	or	r2,r2,r4
    c8a0:	9024927a 	slli	r18,r18,9
    c8a4:	1004c03a 	cmpne	r2,r2,zero
    c8a8:	bc62b03a 	or	r17,r23,r17
    c8ac:	1738b03a 	or	fp,r2,fp
    c8b0:	8880402c 	andhi	r2,r17,256
    c8b4:	e4a4b03a 	or	r18,fp,r18
    c8b8:	10000726 	beq	r2,zero,c8d8 <__muldf3+0x628>
    c8bc:	9006d07a 	srli	r3,r18,1
    c8c0:	880497fa 	slli	r2,r17,31
    c8c4:	9480004c 	andi	r18,r18,1
    c8c8:	8822d07a 	srli	r17,r17,1
    c8cc:	1ca4b03a 	or	r18,r3,r18
    c8d0:	14a4b03a 	or	r18,r2,r18
    c8d4:	4007883a 	mov	r3,r8
    c8d8:	1880ffc4 	addi	r2,r3,1023
    c8dc:	0080460e 	bge	zero,r2,c9f8 <__muldf3+0x748>
    c8e0:	910001cc 	andi	r4,r18,7
    c8e4:	20000726 	beq	r4,zero,c904 <__muldf3+0x654>
    c8e8:	910003cc 	andi	r4,r18,15
    c8ec:	01400104 	movi	r5,4
    c8f0:	21400426 	beq	r4,r5,c904 <__muldf3+0x654>
    c8f4:	9149883a 	add	r4,r18,r5
    c8f8:	24a5803a 	cmpltu	r18,r4,r18
    c8fc:	8ca3883a 	add	r17,r17,r18
    c900:	2025883a 	mov	r18,r4
    c904:	8900402c 	andhi	r4,r17,256
    c908:	20000426 	beq	r4,zero,c91c <__muldf3+0x66c>
    c90c:	18810004 	addi	r2,r3,1024
    c910:	00ffc034 	movhi	r3,65280
    c914:	18ffffc4 	addi	r3,r3,-1
    c918:	88e2703a 	and	r17,r17,r3
    c91c:	00c1ff84 	movi	r3,2046
    c920:	18bf1316 	blt	r3,r2,c570 <__alt_data_end+0xfffc3190>
    c924:	882c977a 	slli	r22,r17,29
    c928:	9024d0fa 	srli	r18,r18,3
    c92c:	8822927a 	slli	r17,r17,9
    c930:	1081ffcc 	andi	r2,r2,2047
    c934:	b4acb03a 	or	r22,r22,r18
    c938:	8820d33a 	srli	r16,r17,12
    c93c:	3027883a 	mov	r19,r6
    c940:	003eba06 	br	c42c <__alt_data_end+0xfffc304c>
    c944:	8080022c 	andhi	r2,r16,8
    c948:	10000926 	beq	r2,zero,c970 <__muldf3+0x6c0>
    c94c:	8880022c 	andhi	r2,r17,8
    c950:	1000071e 	bne	r2,zero,c970 <__muldf3+0x6c0>
    c954:	00800434 	movhi	r2,16
    c958:	8c000234 	orhi	r16,r17,8
    c95c:	10bfffc4 	addi	r2,r2,-1
    c960:	e027883a 	mov	r19,fp
    c964:	80a0703a 	and	r16,r16,r2
    c968:	902d883a 	mov	r22,r18
    c96c:	003f1706 	br	c5cc <__alt_data_end+0xfffc31ec>
    c970:	00800434 	movhi	r2,16
    c974:	84000234 	orhi	r16,r16,8
    c978:	10bfffc4 	addi	r2,r2,-1
    c97c:	80a0703a 	and	r16,r16,r2
    c980:	003f1206 	br	c5cc <__alt_data_end+0xfffc31ec>
    c984:	147ff604 	addi	r17,r2,-40
    c988:	3462983a 	sll	r17,r6,r17
    c98c:	0025883a 	mov	r18,zero
    c990:	003ef306 	br	c560 <__alt_data_end+0xfffc3180>
    c994:	3009883a 	mov	r4,r6
    c998:	d9400215 	stw	r5,8(sp)
    c99c:	d9800715 	stw	r6,28(sp)
    c9a0:	da400415 	stw	r9,16(sp)
    c9a4:	da800315 	stw	r10,12(sp)
    c9a8:	000d61c0 	call	d61c <__clzsi2>
    c9ac:	10800804 	addi	r2,r2,32
    c9b0:	da800317 	ldw	r10,12(sp)
    c9b4:	da400417 	ldw	r9,16(sp)
    c9b8:	d9800717 	ldw	r6,28(sp)
    c9bc:	d9400217 	ldw	r5,8(sp)
    c9c0:	003edd06 	br	c538 <__alt_data_end+0xfffc3158>
    c9c4:	143ff604 	addi	r16,r2,-40
    c9c8:	ac20983a 	sll	r16,r21,r16
    c9cc:	002d883a 	mov	r22,zero
    c9d0:	003ec106 	br	c4d8 <__alt_data_end+0xfffc30f8>
    c9d4:	d9800715 	stw	r6,28(sp)
    c9d8:	d9c00215 	stw	r7,8(sp)
    c9dc:	da400415 	stw	r9,16(sp)
    c9e0:	000d61c0 	call	d61c <__clzsi2>
    c9e4:	10800804 	addi	r2,r2,32
    c9e8:	da400417 	ldw	r9,16(sp)
    c9ec:	d9c00217 	ldw	r7,8(sp)
    c9f0:	d9800717 	ldw	r6,28(sp)
    c9f4:	003eae06 	br	c4b0 <__alt_data_end+0xfffc30d0>
    c9f8:	00c00044 	movi	r3,1
    c9fc:	1887c83a 	sub	r3,r3,r2
    ca00:	01000e04 	movi	r4,56
    ca04:	20fe8516 	blt	r4,r3,c41c <__alt_data_end+0xfffc303c>
    ca08:	010007c4 	movi	r4,31
    ca0c:	20c01b16 	blt	r4,r3,ca7c <__muldf3+0x7cc>
    ca10:	00800804 	movi	r2,32
    ca14:	10c5c83a 	sub	r2,r2,r3
    ca18:	888a983a 	sll	r5,r17,r2
    ca1c:	90c8d83a 	srl	r4,r18,r3
    ca20:	9084983a 	sll	r2,r18,r2
    ca24:	88e2d83a 	srl	r17,r17,r3
    ca28:	2906b03a 	or	r3,r5,r4
    ca2c:	1004c03a 	cmpne	r2,r2,zero
    ca30:	1886b03a 	or	r3,r3,r2
    ca34:	188001cc 	andi	r2,r3,7
    ca38:	10000726 	beq	r2,zero,ca58 <__muldf3+0x7a8>
    ca3c:	188003cc 	andi	r2,r3,15
    ca40:	01000104 	movi	r4,4
    ca44:	11000426 	beq	r2,r4,ca58 <__muldf3+0x7a8>
    ca48:	1805883a 	mov	r2,r3
    ca4c:	10c00104 	addi	r3,r2,4
    ca50:	1885803a 	cmpltu	r2,r3,r2
    ca54:	88a3883a 	add	r17,r17,r2
    ca58:	8880202c 	andhi	r2,r17,128
    ca5c:	10001c26 	beq	r2,zero,cad0 <__muldf3+0x820>
    ca60:	3027883a 	mov	r19,r6
    ca64:	00800044 	movi	r2,1
    ca68:	0021883a 	mov	r16,zero
    ca6c:	002d883a 	mov	r22,zero
    ca70:	003e6e06 	br	c42c <__alt_data_end+0xfffc304c>
    ca74:	4007883a 	mov	r3,r8
    ca78:	003f9706 	br	c8d8 <__alt_data_end+0xfffc34f8>
    ca7c:	017ff844 	movi	r5,-31
    ca80:	2885c83a 	sub	r2,r5,r2
    ca84:	888ad83a 	srl	r5,r17,r2
    ca88:	00800804 	movi	r2,32
    ca8c:	18801a26 	beq	r3,r2,caf8 <__muldf3+0x848>
    ca90:	01001004 	movi	r4,64
    ca94:	20c7c83a 	sub	r3,r4,r3
    ca98:	88e2983a 	sll	r17,r17,r3
    ca9c:	8ca4b03a 	or	r18,r17,r18
    caa0:	9004c03a 	cmpne	r2,r18,zero
    caa4:	2884b03a 	or	r2,r5,r2
    caa8:	144001cc 	andi	r17,r2,7
    caac:	88000d1e 	bne	r17,zero,cae4 <__muldf3+0x834>
    cab0:	0021883a 	mov	r16,zero
    cab4:	102cd0fa 	srli	r22,r2,3
    cab8:	3027883a 	mov	r19,r6
    cabc:	0005883a 	mov	r2,zero
    cac0:	b46cb03a 	or	r22,r22,r17
    cac4:	003e5906 	br	c42c <__alt_data_end+0xfffc304c>
    cac8:	1007883a 	mov	r3,r2
    cacc:	0023883a 	mov	r17,zero
    cad0:	8820927a 	slli	r16,r17,9
    cad4:	1805883a 	mov	r2,r3
    cad8:	8822977a 	slli	r17,r17,29
    cadc:	8020d33a 	srli	r16,r16,12
    cae0:	003ff406 	br	cab4 <__alt_data_end+0xfffc36d4>
    cae4:	10c003cc 	andi	r3,r2,15
    cae8:	01000104 	movi	r4,4
    caec:	193ff626 	beq	r3,r4,cac8 <__alt_data_end+0xfffc36e8>
    caf0:	0023883a 	mov	r17,zero
    caf4:	003fd506 	br	ca4c <__alt_data_end+0xfffc366c>
    caf8:	0023883a 	mov	r17,zero
    cafc:	003fe706 	br	ca9c <__alt_data_end+0xfffc36bc>
    cb00:	00800434 	movhi	r2,16
    cb04:	8c000234 	orhi	r16,r17,8
    cb08:	10bfffc4 	addi	r2,r2,-1
    cb0c:	3027883a 	mov	r19,r6
    cb10:	80a0703a 	and	r16,r16,r2
    cb14:	902d883a 	mov	r22,r18
    cb18:	003eac06 	br	c5cc <__alt_data_end+0xfffc31ec>

0000cb1c <__subdf3>:
    cb1c:	02000434 	movhi	r8,16
    cb20:	423fffc4 	addi	r8,r8,-1
    cb24:	defffb04 	addi	sp,sp,-20
    cb28:	2a14703a 	and	r10,r5,r8
    cb2c:	3812d53a 	srli	r9,r7,20
    cb30:	3a10703a 	and	r8,r7,r8
    cb34:	2006d77a 	srli	r3,r4,29
    cb38:	3004d77a 	srli	r2,r6,29
    cb3c:	dc000015 	stw	r16,0(sp)
    cb40:	501490fa 	slli	r10,r10,3
    cb44:	2820d53a 	srli	r16,r5,20
    cb48:	401090fa 	slli	r8,r8,3
    cb4c:	dc800215 	stw	r18,8(sp)
    cb50:	dc400115 	stw	r17,4(sp)
    cb54:	dfc00415 	stw	ra,16(sp)
    cb58:	202290fa 	slli	r17,r4,3
    cb5c:	dcc00315 	stw	r19,12(sp)
    cb60:	4a41ffcc 	andi	r9,r9,2047
    cb64:	0101ffc4 	movi	r4,2047
    cb68:	2824d7fa 	srli	r18,r5,31
    cb6c:	8401ffcc 	andi	r16,r16,2047
    cb70:	50c6b03a 	or	r3,r10,r3
    cb74:	380ed7fa 	srli	r7,r7,31
    cb78:	408ab03a 	or	r5,r8,r2
    cb7c:	300c90fa 	slli	r6,r6,3
    cb80:	49009626 	beq	r9,r4,cddc <__subdf3+0x2c0>
    cb84:	39c0005c 	xori	r7,r7,1
    cb88:	8245c83a 	sub	r2,r16,r9
    cb8c:	3c807426 	beq	r7,r18,cd60 <__subdf3+0x244>
    cb90:	0080af0e 	bge	zero,r2,ce50 <__subdf3+0x334>
    cb94:	48002a1e 	bne	r9,zero,cc40 <__subdf3+0x124>
    cb98:	2988b03a 	or	r4,r5,r6
    cb9c:	20009a1e 	bne	r4,zero,ce08 <__subdf3+0x2ec>
    cba0:	888001cc 	andi	r2,r17,7
    cba4:	10000726 	beq	r2,zero,cbc4 <__subdf3+0xa8>
    cba8:	888003cc 	andi	r2,r17,15
    cbac:	01000104 	movi	r4,4
    cbb0:	11000426 	beq	r2,r4,cbc4 <__subdf3+0xa8>
    cbb4:	890b883a 	add	r5,r17,r4
    cbb8:	2c63803a 	cmpltu	r17,r5,r17
    cbbc:	1c47883a 	add	r3,r3,r17
    cbc0:	2823883a 	mov	r17,r5
    cbc4:	1880202c 	andhi	r2,r3,128
    cbc8:	10005926 	beq	r2,zero,cd30 <__subdf3+0x214>
    cbcc:	84000044 	addi	r16,r16,1
    cbd0:	0081ffc4 	movi	r2,2047
    cbd4:	8080be26 	beq	r16,r2,ced0 <__subdf3+0x3b4>
    cbd8:	017fe034 	movhi	r5,65408
    cbdc:	297fffc4 	addi	r5,r5,-1
    cbe0:	1946703a 	and	r3,r3,r5
    cbe4:	1804977a 	slli	r2,r3,29
    cbe8:	1806927a 	slli	r3,r3,9
    cbec:	8822d0fa 	srli	r17,r17,3
    cbf0:	8401ffcc 	andi	r16,r16,2047
    cbf4:	180ad33a 	srli	r5,r3,12
    cbf8:	9100004c 	andi	r4,r18,1
    cbfc:	1444b03a 	or	r2,r2,r17
    cc00:	80c1ffcc 	andi	r3,r16,2047
    cc04:	1820953a 	slli	r16,r3,20
    cc08:	20c03fcc 	andi	r3,r4,255
    cc0c:	180897fa 	slli	r4,r3,31
    cc10:	00c00434 	movhi	r3,16
    cc14:	18ffffc4 	addi	r3,r3,-1
    cc18:	28c6703a 	and	r3,r5,r3
    cc1c:	1c06b03a 	or	r3,r3,r16
    cc20:	1906b03a 	or	r3,r3,r4
    cc24:	dfc00417 	ldw	ra,16(sp)
    cc28:	dcc00317 	ldw	r19,12(sp)
    cc2c:	dc800217 	ldw	r18,8(sp)
    cc30:	dc400117 	ldw	r17,4(sp)
    cc34:	dc000017 	ldw	r16,0(sp)
    cc38:	dec00504 	addi	sp,sp,20
    cc3c:	f800283a 	ret
    cc40:	0101ffc4 	movi	r4,2047
    cc44:	813fd626 	beq	r16,r4,cba0 <__alt_data_end+0xfffc37c0>
    cc48:	29402034 	orhi	r5,r5,128
    cc4c:	01000e04 	movi	r4,56
    cc50:	2080a316 	blt	r4,r2,cee0 <__subdf3+0x3c4>
    cc54:	010007c4 	movi	r4,31
    cc58:	2080c616 	blt	r4,r2,cf74 <__subdf3+0x458>
    cc5c:	01000804 	movi	r4,32
    cc60:	2089c83a 	sub	r4,r4,r2
    cc64:	2910983a 	sll	r8,r5,r4
    cc68:	308ed83a 	srl	r7,r6,r2
    cc6c:	3108983a 	sll	r4,r6,r4
    cc70:	2884d83a 	srl	r2,r5,r2
    cc74:	41ccb03a 	or	r6,r8,r7
    cc78:	2008c03a 	cmpne	r4,r4,zero
    cc7c:	310cb03a 	or	r6,r6,r4
    cc80:	898dc83a 	sub	r6,r17,r6
    cc84:	89a3803a 	cmpltu	r17,r17,r6
    cc88:	1887c83a 	sub	r3,r3,r2
    cc8c:	1c47c83a 	sub	r3,r3,r17
    cc90:	3023883a 	mov	r17,r6
    cc94:	1880202c 	andhi	r2,r3,128
    cc98:	10002326 	beq	r2,zero,cd28 <__subdf3+0x20c>
    cc9c:	04c02034 	movhi	r19,128
    cca0:	9cffffc4 	addi	r19,r19,-1
    cca4:	1ce6703a 	and	r19,r3,r19
    cca8:	98007a26 	beq	r19,zero,ce94 <__subdf3+0x378>
    ccac:	9809883a 	mov	r4,r19
    ccb0:	000d61c0 	call	d61c <__clzsi2>
    ccb4:	113ffe04 	addi	r4,r2,-8
    ccb8:	00c007c4 	movi	r3,31
    ccbc:	19007b16 	blt	r3,r4,ceac <__subdf3+0x390>
    ccc0:	00800804 	movi	r2,32
    ccc4:	1105c83a 	sub	r2,r2,r4
    ccc8:	8884d83a 	srl	r2,r17,r2
    cccc:	9906983a 	sll	r3,r19,r4
    ccd0:	8922983a 	sll	r17,r17,r4
    ccd4:	10c4b03a 	or	r2,r2,r3
    ccd8:	24007816 	blt	r4,r16,cebc <__subdf3+0x3a0>
    ccdc:	2421c83a 	sub	r16,r4,r16
    cce0:	80c00044 	addi	r3,r16,1
    cce4:	010007c4 	movi	r4,31
    cce8:	20c09516 	blt	r4,r3,cf40 <__subdf3+0x424>
    ccec:	01400804 	movi	r5,32
    ccf0:	28cbc83a 	sub	r5,r5,r3
    ccf4:	88c8d83a 	srl	r4,r17,r3
    ccf8:	8962983a 	sll	r17,r17,r5
    ccfc:	114a983a 	sll	r5,r2,r5
    cd00:	10c6d83a 	srl	r3,r2,r3
    cd04:	8804c03a 	cmpne	r2,r17,zero
    cd08:	290ab03a 	or	r5,r5,r4
    cd0c:	28a2b03a 	or	r17,r5,r2
    cd10:	0021883a 	mov	r16,zero
    cd14:	003fa206 	br	cba0 <__alt_data_end+0xfffc37c0>
    cd18:	2090b03a 	or	r8,r4,r2
    cd1c:	40018e26 	beq	r8,zero,d358 <__subdf3+0x83c>
    cd20:	1007883a 	mov	r3,r2
    cd24:	2023883a 	mov	r17,r4
    cd28:	888001cc 	andi	r2,r17,7
    cd2c:	103f9e1e 	bne	r2,zero,cba8 <__alt_data_end+0xfffc37c8>
    cd30:	1804977a 	slli	r2,r3,29
    cd34:	8822d0fa 	srli	r17,r17,3
    cd38:	1810d0fa 	srli	r8,r3,3
    cd3c:	9100004c 	andi	r4,r18,1
    cd40:	1444b03a 	or	r2,r2,r17
    cd44:	00c1ffc4 	movi	r3,2047
    cd48:	80c02826 	beq	r16,r3,cdec <__subdf3+0x2d0>
    cd4c:	01400434 	movhi	r5,16
    cd50:	297fffc4 	addi	r5,r5,-1
    cd54:	80e0703a 	and	r16,r16,r3
    cd58:	414a703a 	and	r5,r8,r5
    cd5c:	003fa806 	br	cc00 <__alt_data_end+0xfffc3820>
    cd60:	0080630e 	bge	zero,r2,cef0 <__subdf3+0x3d4>
    cd64:	48003026 	beq	r9,zero,ce28 <__subdf3+0x30c>
    cd68:	0101ffc4 	movi	r4,2047
    cd6c:	813f8c26 	beq	r16,r4,cba0 <__alt_data_end+0xfffc37c0>
    cd70:	29402034 	orhi	r5,r5,128
    cd74:	01000e04 	movi	r4,56
    cd78:	2080a90e 	bge	r4,r2,d020 <__subdf3+0x504>
    cd7c:	298cb03a 	or	r6,r5,r6
    cd80:	3012c03a 	cmpne	r9,r6,zero
    cd84:	0005883a 	mov	r2,zero
    cd88:	4c53883a 	add	r9,r9,r17
    cd8c:	4c63803a 	cmpltu	r17,r9,r17
    cd90:	10c7883a 	add	r3,r2,r3
    cd94:	88c7883a 	add	r3,r17,r3
    cd98:	4823883a 	mov	r17,r9
    cd9c:	1880202c 	andhi	r2,r3,128
    cda0:	1000d026 	beq	r2,zero,d0e4 <__subdf3+0x5c8>
    cda4:	84000044 	addi	r16,r16,1
    cda8:	0081ffc4 	movi	r2,2047
    cdac:	8080fe26 	beq	r16,r2,d1a8 <__subdf3+0x68c>
    cdb0:	00bfe034 	movhi	r2,65408
    cdb4:	10bfffc4 	addi	r2,r2,-1
    cdb8:	1886703a 	and	r3,r3,r2
    cdbc:	880ad07a 	srli	r5,r17,1
    cdc0:	180497fa 	slli	r2,r3,31
    cdc4:	8900004c 	andi	r4,r17,1
    cdc8:	2922b03a 	or	r17,r5,r4
    cdcc:	1806d07a 	srli	r3,r3,1
    cdd0:	1462b03a 	or	r17,r2,r17
    cdd4:	3825883a 	mov	r18,r7
    cdd8:	003f7106 	br	cba0 <__alt_data_end+0xfffc37c0>
    cddc:	2984b03a 	or	r2,r5,r6
    cde0:	103f6826 	beq	r2,zero,cb84 <__alt_data_end+0xfffc37a4>
    cde4:	39c03fcc 	andi	r7,r7,255
    cde8:	003f6706 	br	cb88 <__alt_data_end+0xfffc37a8>
    cdec:	4086b03a 	or	r3,r8,r2
    cdf0:	18015226 	beq	r3,zero,d33c <__subdf3+0x820>
    cdf4:	00c00434 	movhi	r3,16
    cdf8:	41400234 	orhi	r5,r8,8
    cdfc:	18ffffc4 	addi	r3,r3,-1
    ce00:	28ca703a 	and	r5,r5,r3
    ce04:	003f7e06 	br	cc00 <__alt_data_end+0xfffc3820>
    ce08:	10bfffc4 	addi	r2,r2,-1
    ce0c:	1000491e 	bne	r2,zero,cf34 <__subdf3+0x418>
    ce10:	898fc83a 	sub	r7,r17,r6
    ce14:	89e3803a 	cmpltu	r17,r17,r7
    ce18:	1947c83a 	sub	r3,r3,r5
    ce1c:	1c47c83a 	sub	r3,r3,r17
    ce20:	3823883a 	mov	r17,r7
    ce24:	003f9b06 	br	cc94 <__alt_data_end+0xfffc38b4>
    ce28:	2988b03a 	or	r4,r5,r6
    ce2c:	203f5c26 	beq	r4,zero,cba0 <__alt_data_end+0xfffc37c0>
    ce30:	10bfffc4 	addi	r2,r2,-1
    ce34:	1000931e 	bne	r2,zero,d084 <__subdf3+0x568>
    ce38:	898d883a 	add	r6,r17,r6
    ce3c:	3463803a 	cmpltu	r17,r6,r17
    ce40:	1947883a 	add	r3,r3,r5
    ce44:	88c7883a 	add	r3,r17,r3
    ce48:	3023883a 	mov	r17,r6
    ce4c:	003fd306 	br	cd9c <__alt_data_end+0xfffc39bc>
    ce50:	1000541e 	bne	r2,zero,cfa4 <__subdf3+0x488>
    ce54:	80800044 	addi	r2,r16,1
    ce58:	1081ffcc 	andi	r2,r2,2047
    ce5c:	01000044 	movi	r4,1
    ce60:	2080a20e 	bge	r4,r2,d0ec <__subdf3+0x5d0>
    ce64:	8989c83a 	sub	r4,r17,r6
    ce68:	8905803a 	cmpltu	r2,r17,r4
    ce6c:	1967c83a 	sub	r19,r3,r5
    ce70:	98a7c83a 	sub	r19,r19,r2
    ce74:	9880202c 	andhi	r2,r19,128
    ce78:	10006326 	beq	r2,zero,d008 <__subdf3+0x4ec>
    ce7c:	3463c83a 	sub	r17,r6,r17
    ce80:	28c7c83a 	sub	r3,r5,r3
    ce84:	344d803a 	cmpltu	r6,r6,r17
    ce88:	19a7c83a 	sub	r19,r3,r6
    ce8c:	3825883a 	mov	r18,r7
    ce90:	983f861e 	bne	r19,zero,ccac <__alt_data_end+0xfffc38cc>
    ce94:	8809883a 	mov	r4,r17
    ce98:	000d61c0 	call	d61c <__clzsi2>
    ce9c:	10800804 	addi	r2,r2,32
    cea0:	113ffe04 	addi	r4,r2,-8
    cea4:	00c007c4 	movi	r3,31
    cea8:	193f850e 	bge	r3,r4,ccc0 <__alt_data_end+0xfffc38e0>
    ceac:	10bff604 	addi	r2,r2,-40
    ceb0:	8884983a 	sll	r2,r17,r2
    ceb4:	0023883a 	mov	r17,zero
    ceb8:	243f880e 	bge	r4,r16,ccdc <__alt_data_end+0xfffc38fc>
    cebc:	00ffe034 	movhi	r3,65408
    cec0:	18ffffc4 	addi	r3,r3,-1
    cec4:	8121c83a 	sub	r16,r16,r4
    cec8:	10c6703a 	and	r3,r2,r3
    cecc:	003f3406 	br	cba0 <__alt_data_end+0xfffc37c0>
    ced0:	9100004c 	andi	r4,r18,1
    ced4:	000b883a 	mov	r5,zero
    ced8:	0005883a 	mov	r2,zero
    cedc:	003f4806 	br	cc00 <__alt_data_end+0xfffc3820>
    cee0:	298cb03a 	or	r6,r5,r6
    cee4:	300cc03a 	cmpne	r6,r6,zero
    cee8:	0005883a 	mov	r2,zero
    ceec:	003f6406 	br	cc80 <__alt_data_end+0xfffc38a0>
    cef0:	10009a1e 	bne	r2,zero,d15c <__subdf3+0x640>
    cef4:	82400044 	addi	r9,r16,1
    cef8:	4881ffcc 	andi	r2,r9,2047
    cefc:	02800044 	movi	r10,1
    cf00:	5080670e 	bge	r10,r2,d0a0 <__subdf3+0x584>
    cf04:	0081ffc4 	movi	r2,2047
    cf08:	4880af26 	beq	r9,r2,d1c8 <__subdf3+0x6ac>
    cf0c:	898d883a 	add	r6,r17,r6
    cf10:	1945883a 	add	r2,r3,r5
    cf14:	3447803a 	cmpltu	r3,r6,r17
    cf18:	1887883a 	add	r3,r3,r2
    cf1c:	182297fa 	slli	r17,r3,31
    cf20:	300cd07a 	srli	r6,r6,1
    cf24:	1806d07a 	srli	r3,r3,1
    cf28:	4821883a 	mov	r16,r9
    cf2c:	89a2b03a 	or	r17,r17,r6
    cf30:	003f1b06 	br	cba0 <__alt_data_end+0xfffc37c0>
    cf34:	0101ffc4 	movi	r4,2047
    cf38:	813f441e 	bne	r16,r4,cc4c <__alt_data_end+0xfffc386c>
    cf3c:	003f1806 	br	cba0 <__alt_data_end+0xfffc37c0>
    cf40:	843ff844 	addi	r16,r16,-31
    cf44:	01400804 	movi	r5,32
    cf48:	1408d83a 	srl	r4,r2,r16
    cf4c:	19405026 	beq	r3,r5,d090 <__subdf3+0x574>
    cf50:	01401004 	movi	r5,64
    cf54:	28c7c83a 	sub	r3,r5,r3
    cf58:	10c4983a 	sll	r2,r2,r3
    cf5c:	88a2b03a 	or	r17,r17,r2
    cf60:	8822c03a 	cmpne	r17,r17,zero
    cf64:	2462b03a 	or	r17,r4,r17
    cf68:	0007883a 	mov	r3,zero
    cf6c:	0021883a 	mov	r16,zero
    cf70:	003f6d06 	br	cd28 <__alt_data_end+0xfffc3948>
    cf74:	11fff804 	addi	r7,r2,-32
    cf78:	01000804 	movi	r4,32
    cf7c:	29ced83a 	srl	r7,r5,r7
    cf80:	11004526 	beq	r2,r4,d098 <__subdf3+0x57c>
    cf84:	01001004 	movi	r4,64
    cf88:	2089c83a 	sub	r4,r4,r2
    cf8c:	2904983a 	sll	r2,r5,r4
    cf90:	118cb03a 	or	r6,r2,r6
    cf94:	300cc03a 	cmpne	r6,r6,zero
    cf98:	398cb03a 	or	r6,r7,r6
    cf9c:	0005883a 	mov	r2,zero
    cfa0:	003f3706 	br	cc80 <__alt_data_end+0xfffc38a0>
    cfa4:	80002a26 	beq	r16,zero,d050 <__subdf3+0x534>
    cfa8:	0101ffc4 	movi	r4,2047
    cfac:	49006626 	beq	r9,r4,d148 <__subdf3+0x62c>
    cfb0:	0085c83a 	sub	r2,zero,r2
    cfb4:	18c02034 	orhi	r3,r3,128
    cfb8:	01000e04 	movi	r4,56
    cfbc:	20807e16 	blt	r4,r2,d1b8 <__subdf3+0x69c>
    cfc0:	010007c4 	movi	r4,31
    cfc4:	2080e716 	blt	r4,r2,d364 <__subdf3+0x848>
    cfc8:	01000804 	movi	r4,32
    cfcc:	2089c83a 	sub	r4,r4,r2
    cfd0:	1914983a 	sll	r10,r3,r4
    cfd4:	8890d83a 	srl	r8,r17,r2
    cfd8:	8908983a 	sll	r4,r17,r4
    cfdc:	1884d83a 	srl	r2,r3,r2
    cfe0:	5222b03a 	or	r17,r10,r8
    cfe4:	2006c03a 	cmpne	r3,r4,zero
    cfe8:	88e2b03a 	or	r17,r17,r3
    cfec:	3463c83a 	sub	r17,r6,r17
    cff0:	2885c83a 	sub	r2,r5,r2
    cff4:	344d803a 	cmpltu	r6,r6,r17
    cff8:	1187c83a 	sub	r3,r2,r6
    cffc:	4821883a 	mov	r16,r9
    d000:	3825883a 	mov	r18,r7
    d004:	003f2306 	br	cc94 <__alt_data_end+0xfffc38b4>
    d008:	24d0b03a 	or	r8,r4,r19
    d00c:	40001b1e 	bne	r8,zero,d07c <__subdf3+0x560>
    d010:	0005883a 	mov	r2,zero
    d014:	0009883a 	mov	r4,zero
    d018:	0021883a 	mov	r16,zero
    d01c:	003f4906 	br	cd44 <__alt_data_end+0xfffc3964>
    d020:	010007c4 	movi	r4,31
    d024:	20803a16 	blt	r4,r2,d110 <__subdf3+0x5f4>
    d028:	01000804 	movi	r4,32
    d02c:	2089c83a 	sub	r4,r4,r2
    d030:	2912983a 	sll	r9,r5,r4
    d034:	3090d83a 	srl	r8,r6,r2
    d038:	3108983a 	sll	r4,r6,r4
    d03c:	2884d83a 	srl	r2,r5,r2
    d040:	4a12b03a 	or	r9,r9,r8
    d044:	2008c03a 	cmpne	r4,r4,zero
    d048:	4912b03a 	or	r9,r9,r4
    d04c:	003f4e06 	br	cd88 <__alt_data_end+0xfffc39a8>
    d050:	1c48b03a 	or	r4,r3,r17
    d054:	20003c26 	beq	r4,zero,d148 <__subdf3+0x62c>
    d058:	0084303a 	nor	r2,zero,r2
    d05c:	1000381e 	bne	r2,zero,d140 <__subdf3+0x624>
    d060:	3463c83a 	sub	r17,r6,r17
    d064:	28c5c83a 	sub	r2,r5,r3
    d068:	344d803a 	cmpltu	r6,r6,r17
    d06c:	1187c83a 	sub	r3,r2,r6
    d070:	4821883a 	mov	r16,r9
    d074:	3825883a 	mov	r18,r7
    d078:	003f0606 	br	cc94 <__alt_data_end+0xfffc38b4>
    d07c:	2023883a 	mov	r17,r4
    d080:	003f0906 	br	cca8 <__alt_data_end+0xfffc38c8>
    d084:	0101ffc4 	movi	r4,2047
    d088:	813f3a1e 	bne	r16,r4,cd74 <__alt_data_end+0xfffc3994>
    d08c:	003ec406 	br	cba0 <__alt_data_end+0xfffc37c0>
    d090:	0005883a 	mov	r2,zero
    d094:	003fb106 	br	cf5c <__alt_data_end+0xfffc3b7c>
    d098:	0005883a 	mov	r2,zero
    d09c:	003fbc06 	br	cf90 <__alt_data_end+0xfffc3bb0>
    d0a0:	1c44b03a 	or	r2,r3,r17
    d0a4:	80008e1e 	bne	r16,zero,d2e0 <__subdf3+0x7c4>
    d0a8:	1000c826 	beq	r2,zero,d3cc <__subdf3+0x8b0>
    d0ac:	2984b03a 	or	r2,r5,r6
    d0b0:	103ebb26 	beq	r2,zero,cba0 <__alt_data_end+0xfffc37c0>
    d0b4:	8989883a 	add	r4,r17,r6
    d0b8:	1945883a 	add	r2,r3,r5
    d0bc:	2447803a 	cmpltu	r3,r4,r17
    d0c0:	1887883a 	add	r3,r3,r2
    d0c4:	1880202c 	andhi	r2,r3,128
    d0c8:	2023883a 	mov	r17,r4
    d0cc:	103f1626 	beq	r2,zero,cd28 <__alt_data_end+0xfffc3948>
    d0d0:	00bfe034 	movhi	r2,65408
    d0d4:	10bfffc4 	addi	r2,r2,-1
    d0d8:	5021883a 	mov	r16,r10
    d0dc:	1886703a 	and	r3,r3,r2
    d0e0:	003eaf06 	br	cba0 <__alt_data_end+0xfffc37c0>
    d0e4:	3825883a 	mov	r18,r7
    d0e8:	003f0f06 	br	cd28 <__alt_data_end+0xfffc3948>
    d0ec:	1c44b03a 	or	r2,r3,r17
    d0f0:	8000251e 	bne	r16,zero,d188 <__subdf3+0x66c>
    d0f4:	1000661e 	bne	r2,zero,d290 <__subdf3+0x774>
    d0f8:	2990b03a 	or	r8,r5,r6
    d0fc:	40009626 	beq	r8,zero,d358 <__subdf3+0x83c>
    d100:	2807883a 	mov	r3,r5
    d104:	3023883a 	mov	r17,r6
    d108:	3825883a 	mov	r18,r7
    d10c:	003ea406 	br	cba0 <__alt_data_end+0xfffc37c0>
    d110:	127ff804 	addi	r9,r2,-32
    d114:	01000804 	movi	r4,32
    d118:	2a52d83a 	srl	r9,r5,r9
    d11c:	11008c26 	beq	r2,r4,d350 <__subdf3+0x834>
    d120:	01001004 	movi	r4,64
    d124:	2085c83a 	sub	r2,r4,r2
    d128:	2884983a 	sll	r2,r5,r2
    d12c:	118cb03a 	or	r6,r2,r6
    d130:	300cc03a 	cmpne	r6,r6,zero
    d134:	4992b03a 	or	r9,r9,r6
    d138:	0005883a 	mov	r2,zero
    d13c:	003f1206 	br	cd88 <__alt_data_end+0xfffc39a8>
    d140:	0101ffc4 	movi	r4,2047
    d144:	493f9c1e 	bne	r9,r4,cfb8 <__alt_data_end+0xfffc3bd8>
    d148:	2807883a 	mov	r3,r5
    d14c:	3023883a 	mov	r17,r6
    d150:	4821883a 	mov	r16,r9
    d154:	3825883a 	mov	r18,r7
    d158:	003e9106 	br	cba0 <__alt_data_end+0xfffc37c0>
    d15c:	80001f1e 	bne	r16,zero,d1dc <__subdf3+0x6c0>
    d160:	1c48b03a 	or	r4,r3,r17
    d164:	20005a26 	beq	r4,zero,d2d0 <__subdf3+0x7b4>
    d168:	0084303a 	nor	r2,zero,r2
    d16c:	1000561e 	bne	r2,zero,d2c8 <__subdf3+0x7ac>
    d170:	89a3883a 	add	r17,r17,r6
    d174:	1945883a 	add	r2,r3,r5
    d178:	898d803a 	cmpltu	r6,r17,r6
    d17c:	3087883a 	add	r3,r6,r2
    d180:	4821883a 	mov	r16,r9
    d184:	003f0506 	br	cd9c <__alt_data_end+0xfffc39bc>
    d188:	10002b1e 	bne	r2,zero,d238 <__subdf3+0x71c>
    d18c:	2984b03a 	or	r2,r5,r6
    d190:	10008026 	beq	r2,zero,d394 <__subdf3+0x878>
    d194:	2807883a 	mov	r3,r5
    d198:	3023883a 	mov	r17,r6
    d19c:	3825883a 	mov	r18,r7
    d1a0:	0401ffc4 	movi	r16,2047
    d1a4:	003e7e06 	br	cba0 <__alt_data_end+0xfffc37c0>
    d1a8:	3809883a 	mov	r4,r7
    d1ac:	0011883a 	mov	r8,zero
    d1b0:	0005883a 	mov	r2,zero
    d1b4:	003ee306 	br	cd44 <__alt_data_end+0xfffc3964>
    d1b8:	1c62b03a 	or	r17,r3,r17
    d1bc:	8822c03a 	cmpne	r17,r17,zero
    d1c0:	0005883a 	mov	r2,zero
    d1c4:	003f8906 	br	cfec <__alt_data_end+0xfffc3c0c>
    d1c8:	3809883a 	mov	r4,r7
    d1cc:	4821883a 	mov	r16,r9
    d1d0:	0011883a 	mov	r8,zero
    d1d4:	0005883a 	mov	r2,zero
    d1d8:	003eda06 	br	cd44 <__alt_data_end+0xfffc3964>
    d1dc:	0101ffc4 	movi	r4,2047
    d1e0:	49003b26 	beq	r9,r4,d2d0 <__subdf3+0x7b4>
    d1e4:	0085c83a 	sub	r2,zero,r2
    d1e8:	18c02034 	orhi	r3,r3,128
    d1ec:	01000e04 	movi	r4,56
    d1f0:	20806e16 	blt	r4,r2,d3ac <__subdf3+0x890>
    d1f4:	010007c4 	movi	r4,31
    d1f8:	20807716 	blt	r4,r2,d3d8 <__subdf3+0x8bc>
    d1fc:	01000804 	movi	r4,32
    d200:	2089c83a 	sub	r4,r4,r2
    d204:	1914983a 	sll	r10,r3,r4
    d208:	8890d83a 	srl	r8,r17,r2
    d20c:	8908983a 	sll	r4,r17,r4
    d210:	1884d83a 	srl	r2,r3,r2
    d214:	5222b03a 	or	r17,r10,r8
    d218:	2006c03a 	cmpne	r3,r4,zero
    d21c:	88e2b03a 	or	r17,r17,r3
    d220:	89a3883a 	add	r17,r17,r6
    d224:	1145883a 	add	r2,r2,r5
    d228:	898d803a 	cmpltu	r6,r17,r6
    d22c:	3087883a 	add	r3,r6,r2
    d230:	4821883a 	mov	r16,r9
    d234:	003ed906 	br	cd9c <__alt_data_end+0xfffc39bc>
    d238:	2984b03a 	or	r2,r5,r6
    d23c:	10004226 	beq	r2,zero,d348 <__subdf3+0x82c>
    d240:	1808d0fa 	srli	r4,r3,3
    d244:	8822d0fa 	srli	r17,r17,3
    d248:	1806977a 	slli	r3,r3,29
    d24c:	2080022c 	andhi	r2,r4,8
    d250:	1c62b03a 	or	r17,r3,r17
    d254:	10000826 	beq	r2,zero,d278 <__subdf3+0x75c>
    d258:	2812d0fa 	srli	r9,r5,3
    d25c:	4880022c 	andhi	r2,r9,8
    d260:	1000051e 	bne	r2,zero,d278 <__subdf3+0x75c>
    d264:	300cd0fa 	srli	r6,r6,3
    d268:	2804977a 	slli	r2,r5,29
    d26c:	4809883a 	mov	r4,r9
    d270:	3825883a 	mov	r18,r7
    d274:	11a2b03a 	or	r17,r2,r6
    d278:	8806d77a 	srli	r3,r17,29
    d27c:	200890fa 	slli	r4,r4,3
    d280:	882290fa 	slli	r17,r17,3
    d284:	0401ffc4 	movi	r16,2047
    d288:	1906b03a 	or	r3,r3,r4
    d28c:	003e4406 	br	cba0 <__alt_data_end+0xfffc37c0>
    d290:	2984b03a 	or	r2,r5,r6
    d294:	103e4226 	beq	r2,zero,cba0 <__alt_data_end+0xfffc37c0>
    d298:	8989c83a 	sub	r4,r17,r6
    d29c:	8911803a 	cmpltu	r8,r17,r4
    d2a0:	1945c83a 	sub	r2,r3,r5
    d2a4:	1205c83a 	sub	r2,r2,r8
    d2a8:	1200202c 	andhi	r8,r2,128
    d2ac:	403e9a26 	beq	r8,zero,cd18 <__alt_data_end+0xfffc3938>
    d2b0:	3463c83a 	sub	r17,r6,r17
    d2b4:	28c5c83a 	sub	r2,r5,r3
    d2b8:	344d803a 	cmpltu	r6,r6,r17
    d2bc:	1187c83a 	sub	r3,r2,r6
    d2c0:	3825883a 	mov	r18,r7
    d2c4:	003e3606 	br	cba0 <__alt_data_end+0xfffc37c0>
    d2c8:	0101ffc4 	movi	r4,2047
    d2cc:	493fc71e 	bne	r9,r4,d1ec <__alt_data_end+0xfffc3e0c>
    d2d0:	2807883a 	mov	r3,r5
    d2d4:	3023883a 	mov	r17,r6
    d2d8:	4821883a 	mov	r16,r9
    d2dc:	003e3006 	br	cba0 <__alt_data_end+0xfffc37c0>
    d2e0:	10003626 	beq	r2,zero,d3bc <__subdf3+0x8a0>
    d2e4:	2984b03a 	or	r2,r5,r6
    d2e8:	10001726 	beq	r2,zero,d348 <__subdf3+0x82c>
    d2ec:	1808d0fa 	srli	r4,r3,3
    d2f0:	8822d0fa 	srli	r17,r17,3
    d2f4:	1806977a 	slli	r3,r3,29
    d2f8:	2080022c 	andhi	r2,r4,8
    d2fc:	1c62b03a 	or	r17,r3,r17
    d300:	10000726 	beq	r2,zero,d320 <__subdf3+0x804>
    d304:	2812d0fa 	srli	r9,r5,3
    d308:	4880022c 	andhi	r2,r9,8
    d30c:	1000041e 	bne	r2,zero,d320 <__subdf3+0x804>
    d310:	300cd0fa 	srli	r6,r6,3
    d314:	2804977a 	slli	r2,r5,29
    d318:	4809883a 	mov	r4,r9
    d31c:	11a2b03a 	or	r17,r2,r6
    d320:	8806d77a 	srli	r3,r17,29
    d324:	200890fa 	slli	r4,r4,3
    d328:	882290fa 	slli	r17,r17,3
    d32c:	3825883a 	mov	r18,r7
    d330:	1906b03a 	or	r3,r3,r4
    d334:	0401ffc4 	movi	r16,2047
    d338:	003e1906 	br	cba0 <__alt_data_end+0xfffc37c0>
    d33c:	000b883a 	mov	r5,zero
    d340:	0005883a 	mov	r2,zero
    d344:	003e2e06 	br	cc00 <__alt_data_end+0xfffc3820>
    d348:	0401ffc4 	movi	r16,2047
    d34c:	003e1406 	br	cba0 <__alt_data_end+0xfffc37c0>
    d350:	0005883a 	mov	r2,zero
    d354:	003f7506 	br	d12c <__alt_data_end+0xfffc3d4c>
    d358:	0005883a 	mov	r2,zero
    d35c:	0009883a 	mov	r4,zero
    d360:	003e7806 	br	cd44 <__alt_data_end+0xfffc3964>
    d364:	123ff804 	addi	r8,r2,-32
    d368:	01000804 	movi	r4,32
    d36c:	1a10d83a 	srl	r8,r3,r8
    d370:	11002526 	beq	r2,r4,d408 <__subdf3+0x8ec>
    d374:	01001004 	movi	r4,64
    d378:	2085c83a 	sub	r2,r4,r2
    d37c:	1884983a 	sll	r2,r3,r2
    d380:	1444b03a 	or	r2,r2,r17
    d384:	1004c03a 	cmpne	r2,r2,zero
    d388:	40a2b03a 	or	r17,r8,r2
    d38c:	0005883a 	mov	r2,zero
    d390:	003f1606 	br	cfec <__alt_data_end+0xfffc3c0c>
    d394:	02000434 	movhi	r8,16
    d398:	0009883a 	mov	r4,zero
    d39c:	423fffc4 	addi	r8,r8,-1
    d3a0:	00bfffc4 	movi	r2,-1
    d3a4:	0401ffc4 	movi	r16,2047
    d3a8:	003e6606 	br	cd44 <__alt_data_end+0xfffc3964>
    d3ac:	1c62b03a 	or	r17,r3,r17
    d3b0:	8822c03a 	cmpne	r17,r17,zero
    d3b4:	0005883a 	mov	r2,zero
    d3b8:	003f9906 	br	d220 <__alt_data_end+0xfffc3e40>
    d3bc:	2807883a 	mov	r3,r5
    d3c0:	3023883a 	mov	r17,r6
    d3c4:	0401ffc4 	movi	r16,2047
    d3c8:	003df506 	br	cba0 <__alt_data_end+0xfffc37c0>
    d3cc:	2807883a 	mov	r3,r5
    d3d0:	3023883a 	mov	r17,r6
    d3d4:	003df206 	br	cba0 <__alt_data_end+0xfffc37c0>
    d3d8:	123ff804 	addi	r8,r2,-32
    d3dc:	01000804 	movi	r4,32
    d3e0:	1a10d83a 	srl	r8,r3,r8
    d3e4:	11000a26 	beq	r2,r4,d410 <__subdf3+0x8f4>
    d3e8:	01001004 	movi	r4,64
    d3ec:	2085c83a 	sub	r2,r4,r2
    d3f0:	1884983a 	sll	r2,r3,r2
    d3f4:	1444b03a 	or	r2,r2,r17
    d3f8:	1004c03a 	cmpne	r2,r2,zero
    d3fc:	40a2b03a 	or	r17,r8,r2
    d400:	0005883a 	mov	r2,zero
    d404:	003f8606 	br	d220 <__alt_data_end+0xfffc3e40>
    d408:	0005883a 	mov	r2,zero
    d40c:	003fdc06 	br	d380 <__alt_data_end+0xfffc3fa0>
    d410:	0005883a 	mov	r2,zero
    d414:	003ff706 	br	d3f4 <__alt_data_end+0xfffc4014>

0000d418 <__fixdfsi>:
    d418:	280cd53a 	srli	r6,r5,20
    d41c:	00c00434 	movhi	r3,16
    d420:	18ffffc4 	addi	r3,r3,-1
    d424:	3181ffcc 	andi	r6,r6,2047
    d428:	01c0ff84 	movi	r7,1022
    d42c:	28c6703a 	and	r3,r5,r3
    d430:	280ad7fa 	srli	r5,r5,31
    d434:	3980120e 	bge	r7,r6,d480 <__fixdfsi+0x68>
    d438:	00810744 	movi	r2,1053
    d43c:	11800c16 	blt	r2,r6,d470 <__fixdfsi+0x58>
    d440:	00810cc4 	movi	r2,1075
    d444:	1185c83a 	sub	r2,r2,r6
    d448:	01c007c4 	movi	r7,31
    d44c:	18c00434 	orhi	r3,r3,16
    d450:	38800d16 	blt	r7,r2,d488 <__fixdfsi+0x70>
    d454:	31befb44 	addi	r6,r6,-1043
    d458:	2084d83a 	srl	r2,r4,r2
    d45c:	1986983a 	sll	r3,r3,r6
    d460:	1884b03a 	or	r2,r3,r2
    d464:	28000726 	beq	r5,zero,d484 <__fixdfsi+0x6c>
    d468:	0085c83a 	sub	r2,zero,r2
    d46c:	f800283a 	ret
    d470:	00a00034 	movhi	r2,32768
    d474:	10bfffc4 	addi	r2,r2,-1
    d478:	2885883a 	add	r2,r5,r2
    d47c:	f800283a 	ret
    d480:	0005883a 	mov	r2,zero
    d484:	f800283a 	ret
    d488:	008104c4 	movi	r2,1043
    d48c:	1185c83a 	sub	r2,r2,r6
    d490:	1884d83a 	srl	r2,r3,r2
    d494:	003ff306 	br	d464 <__alt_data_end+0xfffc4084>

0000d498 <__floatsidf>:
    d498:	defffd04 	addi	sp,sp,-12
    d49c:	dfc00215 	stw	ra,8(sp)
    d4a0:	dc400115 	stw	r17,4(sp)
    d4a4:	dc000015 	stw	r16,0(sp)
    d4a8:	20002b26 	beq	r4,zero,d558 <__floatsidf+0xc0>
    d4ac:	2023883a 	mov	r17,r4
    d4b0:	2020d7fa 	srli	r16,r4,31
    d4b4:	20002d16 	blt	r4,zero,d56c <__floatsidf+0xd4>
    d4b8:	8809883a 	mov	r4,r17
    d4bc:	000d61c0 	call	d61c <__clzsi2>
    d4c0:	01410784 	movi	r5,1054
    d4c4:	288bc83a 	sub	r5,r5,r2
    d4c8:	01010cc4 	movi	r4,1075
    d4cc:	2149c83a 	sub	r4,r4,r5
    d4d0:	00c007c4 	movi	r3,31
    d4d4:	1900160e 	bge	r3,r4,d530 <__floatsidf+0x98>
    d4d8:	00c104c4 	movi	r3,1043
    d4dc:	1947c83a 	sub	r3,r3,r5
    d4e0:	88c6983a 	sll	r3,r17,r3
    d4e4:	00800434 	movhi	r2,16
    d4e8:	10bfffc4 	addi	r2,r2,-1
    d4ec:	1886703a 	and	r3,r3,r2
    d4f0:	2941ffcc 	andi	r5,r5,2047
    d4f4:	800d883a 	mov	r6,r16
    d4f8:	0005883a 	mov	r2,zero
    d4fc:	280a953a 	slli	r5,r5,20
    d500:	31803fcc 	andi	r6,r6,255
    d504:	01000434 	movhi	r4,16
    d508:	300c97fa 	slli	r6,r6,31
    d50c:	213fffc4 	addi	r4,r4,-1
    d510:	1906703a 	and	r3,r3,r4
    d514:	1946b03a 	or	r3,r3,r5
    d518:	1986b03a 	or	r3,r3,r6
    d51c:	dfc00217 	ldw	ra,8(sp)
    d520:	dc400117 	ldw	r17,4(sp)
    d524:	dc000017 	ldw	r16,0(sp)
    d528:	dec00304 	addi	sp,sp,12
    d52c:	f800283a 	ret
    d530:	00c002c4 	movi	r3,11
    d534:	1887c83a 	sub	r3,r3,r2
    d538:	88c6d83a 	srl	r3,r17,r3
    d53c:	8904983a 	sll	r2,r17,r4
    d540:	01000434 	movhi	r4,16
    d544:	213fffc4 	addi	r4,r4,-1
    d548:	2941ffcc 	andi	r5,r5,2047
    d54c:	1906703a 	and	r3,r3,r4
    d550:	800d883a 	mov	r6,r16
    d554:	003fe906 	br	d4fc <__alt_data_end+0xfffc411c>
    d558:	000d883a 	mov	r6,zero
    d55c:	000b883a 	mov	r5,zero
    d560:	0007883a 	mov	r3,zero
    d564:	0005883a 	mov	r2,zero
    d568:	003fe406 	br	d4fc <__alt_data_end+0xfffc411c>
    d56c:	0123c83a 	sub	r17,zero,r4
    d570:	003fd106 	br	d4b8 <__alt_data_end+0xfffc40d8>

0000d574 <__floatunsidf>:
    d574:	defffe04 	addi	sp,sp,-8
    d578:	dc000015 	stw	r16,0(sp)
    d57c:	dfc00115 	stw	ra,4(sp)
    d580:	2021883a 	mov	r16,r4
    d584:	20002226 	beq	r4,zero,d610 <__floatunsidf+0x9c>
    d588:	000d61c0 	call	d61c <__clzsi2>
    d58c:	01010784 	movi	r4,1054
    d590:	2089c83a 	sub	r4,r4,r2
    d594:	01810cc4 	movi	r6,1075
    d598:	310dc83a 	sub	r6,r6,r4
    d59c:	00c007c4 	movi	r3,31
    d5a0:	1980120e 	bge	r3,r6,d5ec <__floatunsidf+0x78>
    d5a4:	00c104c4 	movi	r3,1043
    d5a8:	1907c83a 	sub	r3,r3,r4
    d5ac:	80ca983a 	sll	r5,r16,r3
    d5b0:	00800434 	movhi	r2,16
    d5b4:	10bfffc4 	addi	r2,r2,-1
    d5b8:	2101ffcc 	andi	r4,r4,2047
    d5bc:	0021883a 	mov	r16,zero
    d5c0:	288a703a 	and	r5,r5,r2
    d5c4:	2008953a 	slli	r4,r4,20
    d5c8:	00c00434 	movhi	r3,16
    d5cc:	18ffffc4 	addi	r3,r3,-1
    d5d0:	28c6703a 	and	r3,r5,r3
    d5d4:	8005883a 	mov	r2,r16
    d5d8:	1906b03a 	or	r3,r3,r4
    d5dc:	dfc00117 	ldw	ra,4(sp)
    d5e0:	dc000017 	ldw	r16,0(sp)
    d5e4:	dec00204 	addi	sp,sp,8
    d5e8:	f800283a 	ret
    d5ec:	00c002c4 	movi	r3,11
    d5f0:	188bc83a 	sub	r5,r3,r2
    d5f4:	814ad83a 	srl	r5,r16,r5
    d5f8:	00c00434 	movhi	r3,16
    d5fc:	18ffffc4 	addi	r3,r3,-1
    d600:	81a0983a 	sll	r16,r16,r6
    d604:	2101ffcc 	andi	r4,r4,2047
    d608:	28ca703a 	and	r5,r5,r3
    d60c:	003fed06 	br	d5c4 <__alt_data_end+0xfffc41e4>
    d610:	0009883a 	mov	r4,zero
    d614:	000b883a 	mov	r5,zero
    d618:	003fea06 	br	d5c4 <__alt_data_end+0xfffc41e4>

0000d61c <__clzsi2>:
    d61c:	00bfffd4 	movui	r2,65535
    d620:	11000536 	bltu	r2,r4,d638 <__clzsi2+0x1c>
    d624:	00803fc4 	movi	r2,255
    d628:	11000f36 	bltu	r2,r4,d668 <__clzsi2+0x4c>
    d62c:	00800804 	movi	r2,32
    d630:	0007883a 	mov	r3,zero
    d634:	00000506 	br	d64c <__clzsi2+0x30>
    d638:	00804034 	movhi	r2,256
    d63c:	10bfffc4 	addi	r2,r2,-1
    d640:	11000c2e 	bgeu	r2,r4,d674 <__clzsi2+0x58>
    d644:	00800204 	movi	r2,8
    d648:	00c00604 	movi	r3,24
    d64c:	20c8d83a 	srl	r4,r4,r3
    d650:	00c00074 	movhi	r3,1
    d654:	18c1f504 	addi	r3,r3,2004
    d658:	1909883a 	add	r4,r3,r4
    d65c:	20c00003 	ldbu	r3,0(r4)
    d660:	10c5c83a 	sub	r2,r2,r3
    d664:	f800283a 	ret
    d668:	00800604 	movi	r2,24
    d66c:	00c00204 	movi	r3,8
    d670:	003ff606 	br	d64c <__alt_data_end+0xfffc426c>
    d674:	00800404 	movi	r2,16
    d678:	1007883a 	mov	r3,r2
    d67c:	003ff306 	br	d64c <__alt_data_end+0xfffc426c>

0000d680 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d680:	defffe04 	addi	sp,sp,-8
    d684:	dfc00115 	stw	ra,4(sp)
    d688:	df000015 	stw	fp,0(sp)
    d68c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d690:	00800074 	movhi	r2,1
    d694:	1088f804 	addi	r2,r2,9184
    d698:	10800017 	ldw	r2,0(r2)
    d69c:	10000526 	beq	r2,zero,d6b4 <alt_get_errno+0x34>
    d6a0:	00800074 	movhi	r2,1
    d6a4:	1088f804 	addi	r2,r2,9184
    d6a8:	10800017 	ldw	r2,0(r2)
    d6ac:	103ee83a 	callr	r2
    d6b0:	00000206 	br	d6bc <alt_get_errno+0x3c>
    d6b4:	00800074 	movhi	r2,1
    d6b8:	108fbe04 	addi	r2,r2,16120
}
    d6bc:	e037883a 	mov	sp,fp
    d6c0:	dfc00117 	ldw	ra,4(sp)
    d6c4:	df000017 	ldw	fp,0(sp)
    d6c8:	dec00204 	addi	sp,sp,8
    d6cc:	f800283a 	ret

0000d6d0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d6d0:	defffb04 	addi	sp,sp,-20
    d6d4:	dfc00415 	stw	ra,16(sp)
    d6d8:	df000315 	stw	fp,12(sp)
    d6dc:	df000304 	addi	fp,sp,12
    d6e0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d6e4:	e0bfff17 	ldw	r2,-4(fp)
    d6e8:	10000816 	blt	r2,zero,d70c <close+0x3c>
    d6ec:	01400304 	movi	r5,12
    d6f0:	e13fff17 	ldw	r4,-4(fp)
    d6f4:	000adb40 	call	adb4 <__mulsi3>
    d6f8:	1007883a 	mov	r3,r2
    d6fc:	00800074 	movhi	r2,1
    d700:	10847504 	addi	r2,r2,4564
    d704:	1885883a 	add	r2,r3,r2
    d708:	00000106 	br	d710 <close+0x40>
    d70c:	0005883a 	mov	r2,zero
    d710:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d714:	e0bffd17 	ldw	r2,-12(fp)
    d718:	10001926 	beq	r2,zero,d780 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d71c:	e0bffd17 	ldw	r2,-12(fp)
    d720:	10800017 	ldw	r2,0(r2)
    d724:	10800417 	ldw	r2,16(r2)
    d728:	10000626 	beq	r2,zero,d744 <close+0x74>
    d72c:	e0bffd17 	ldw	r2,-12(fp)
    d730:	10800017 	ldw	r2,0(r2)
    d734:	10800417 	ldw	r2,16(r2)
    d738:	e13ffd17 	ldw	r4,-12(fp)
    d73c:	103ee83a 	callr	r2
    d740:	00000106 	br	d748 <close+0x78>
    d744:	0005883a 	mov	r2,zero
    d748:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d74c:	e13fff17 	ldw	r4,-4(fp)
    d750:	000de080 	call	de08 <alt_release_fd>
    if (rval < 0)
    d754:	e0bffe17 	ldw	r2,-8(fp)
    d758:	1000070e 	bge	r2,zero,d778 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    d75c:	000d6800 	call	d680 <alt_get_errno>
    d760:	1007883a 	mov	r3,r2
    d764:	e0bffe17 	ldw	r2,-8(fp)
    d768:	0085c83a 	sub	r2,zero,r2
    d76c:	18800015 	stw	r2,0(r3)
      return -1;
    d770:	00bfffc4 	movi	r2,-1
    d774:	00000706 	br	d794 <close+0xc4>
    }
    return 0;
    d778:	0005883a 	mov	r2,zero
    d77c:	00000506 	br	d794 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d780:	000d6800 	call	d680 <alt_get_errno>
    d784:	1007883a 	mov	r3,r2
    d788:	00801444 	movi	r2,81
    d78c:	18800015 	stw	r2,0(r3)
    return -1;
    d790:	00bfffc4 	movi	r2,-1
  }
}
    d794:	e037883a 	mov	sp,fp
    d798:	dfc00117 	ldw	ra,4(sp)
    d79c:	df000017 	ldw	fp,0(sp)
    d7a0:	dec00204 	addi	sp,sp,8
    d7a4:	f800283a 	ret

0000d7a8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d7a8:	defffc04 	addi	sp,sp,-16
    d7ac:	df000315 	stw	fp,12(sp)
    d7b0:	df000304 	addi	fp,sp,12
    d7b4:	e13ffd15 	stw	r4,-12(fp)
    d7b8:	e17ffe15 	stw	r5,-8(fp)
    d7bc:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d7c0:	e0bfff17 	ldw	r2,-4(fp)
}
    d7c4:	e037883a 	mov	sp,fp
    d7c8:	df000017 	ldw	fp,0(sp)
    d7cc:	dec00104 	addi	sp,sp,4
    d7d0:	f800283a 	ret

0000d7d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d7d4:	defffe04 	addi	sp,sp,-8
    d7d8:	dfc00115 	stw	ra,4(sp)
    d7dc:	df000015 	stw	fp,0(sp)
    d7e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d7e4:	00800074 	movhi	r2,1
    d7e8:	1088f804 	addi	r2,r2,9184
    d7ec:	10800017 	ldw	r2,0(r2)
    d7f0:	10000526 	beq	r2,zero,d808 <alt_get_errno+0x34>
    d7f4:	00800074 	movhi	r2,1
    d7f8:	1088f804 	addi	r2,r2,9184
    d7fc:	10800017 	ldw	r2,0(r2)
    d800:	103ee83a 	callr	r2
    d804:	00000206 	br	d810 <alt_get_errno+0x3c>
    d808:	00800074 	movhi	r2,1
    d80c:	108fbe04 	addi	r2,r2,16120
}
    d810:	e037883a 	mov	sp,fp
    d814:	dfc00117 	ldw	ra,4(sp)
    d818:	df000017 	ldw	fp,0(sp)
    d81c:	dec00204 	addi	sp,sp,8
    d820:	f800283a 	ret

0000d824 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d824:	defffb04 	addi	sp,sp,-20
    d828:	dfc00415 	stw	ra,16(sp)
    d82c:	df000315 	stw	fp,12(sp)
    d830:	df000304 	addi	fp,sp,12
    d834:	e13ffe15 	stw	r4,-8(fp)
    d838:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d83c:	e0bffe17 	ldw	r2,-8(fp)
    d840:	10000816 	blt	r2,zero,d864 <fstat+0x40>
    d844:	01400304 	movi	r5,12
    d848:	e13ffe17 	ldw	r4,-8(fp)
    d84c:	000adb40 	call	adb4 <__mulsi3>
    d850:	1007883a 	mov	r3,r2
    d854:	00800074 	movhi	r2,1
    d858:	10847504 	addi	r2,r2,4564
    d85c:	1885883a 	add	r2,r3,r2
    d860:	00000106 	br	d868 <fstat+0x44>
    d864:	0005883a 	mov	r2,zero
    d868:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d86c:	e0bffd17 	ldw	r2,-12(fp)
    d870:	10001026 	beq	r2,zero,d8b4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d874:	e0bffd17 	ldw	r2,-12(fp)
    d878:	10800017 	ldw	r2,0(r2)
    d87c:	10800817 	ldw	r2,32(r2)
    d880:	10000726 	beq	r2,zero,d8a0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    d884:	e0bffd17 	ldw	r2,-12(fp)
    d888:	10800017 	ldw	r2,0(r2)
    d88c:	10800817 	ldw	r2,32(r2)
    d890:	e17fff17 	ldw	r5,-4(fp)
    d894:	e13ffd17 	ldw	r4,-12(fp)
    d898:	103ee83a 	callr	r2
    d89c:	00000a06 	br	d8c8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d8a0:	e0bfff17 	ldw	r2,-4(fp)
    d8a4:	00c80004 	movi	r3,8192
    d8a8:	10c00115 	stw	r3,4(r2)
      return 0;
    d8ac:	0005883a 	mov	r2,zero
    d8b0:	00000506 	br	d8c8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d8b4:	000d7d40 	call	d7d4 <alt_get_errno>
    d8b8:	1007883a 	mov	r3,r2
    d8bc:	00801444 	movi	r2,81
    d8c0:	18800015 	stw	r2,0(r3)
    return -1;
    d8c4:	00bfffc4 	movi	r2,-1
  }
}
    d8c8:	e037883a 	mov	sp,fp
    d8cc:	dfc00117 	ldw	ra,4(sp)
    d8d0:	df000017 	ldw	fp,0(sp)
    d8d4:	dec00204 	addi	sp,sp,8
    d8d8:	f800283a 	ret

0000d8dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d8dc:	defffe04 	addi	sp,sp,-8
    d8e0:	dfc00115 	stw	ra,4(sp)
    d8e4:	df000015 	stw	fp,0(sp)
    d8e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d8ec:	00800074 	movhi	r2,1
    d8f0:	1088f804 	addi	r2,r2,9184
    d8f4:	10800017 	ldw	r2,0(r2)
    d8f8:	10000526 	beq	r2,zero,d910 <alt_get_errno+0x34>
    d8fc:	00800074 	movhi	r2,1
    d900:	1088f804 	addi	r2,r2,9184
    d904:	10800017 	ldw	r2,0(r2)
    d908:	103ee83a 	callr	r2
    d90c:	00000206 	br	d918 <alt_get_errno+0x3c>
    d910:	00800074 	movhi	r2,1
    d914:	108fbe04 	addi	r2,r2,16120
}
    d918:	e037883a 	mov	sp,fp
    d91c:	dfc00117 	ldw	ra,4(sp)
    d920:	df000017 	ldw	fp,0(sp)
    d924:	dec00204 	addi	sp,sp,8
    d928:	f800283a 	ret

0000d92c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d92c:	deffed04 	addi	sp,sp,-76
    d930:	dfc01215 	stw	ra,72(sp)
    d934:	df001115 	stw	fp,68(sp)
    d938:	df001104 	addi	fp,sp,68
    d93c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d940:	e0bfff17 	ldw	r2,-4(fp)
    d944:	10000816 	blt	r2,zero,d968 <isatty+0x3c>
    d948:	01400304 	movi	r5,12
    d94c:	e13fff17 	ldw	r4,-4(fp)
    d950:	000adb40 	call	adb4 <__mulsi3>
    d954:	1007883a 	mov	r3,r2
    d958:	00800074 	movhi	r2,1
    d95c:	10847504 	addi	r2,r2,4564
    d960:	1885883a 	add	r2,r3,r2
    d964:	00000106 	br	d96c <isatty+0x40>
    d968:	0005883a 	mov	r2,zero
    d96c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d970:	e0bfef17 	ldw	r2,-68(fp)
    d974:	10000e26 	beq	r2,zero,d9b0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d978:	e0bfef17 	ldw	r2,-68(fp)
    d97c:	10800017 	ldw	r2,0(r2)
    d980:	10800817 	ldw	r2,32(r2)
    d984:	1000021e 	bne	r2,zero,d990 <isatty+0x64>
    {
      return 1;
    d988:	00800044 	movi	r2,1
    d98c:	00000d06 	br	d9c4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d990:	e0bff004 	addi	r2,fp,-64
    d994:	100b883a 	mov	r5,r2
    d998:	e13fff17 	ldw	r4,-4(fp)
    d99c:	000d8240 	call	d824 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d9a0:	e0bff117 	ldw	r2,-60(fp)
    d9a4:	10880020 	cmpeqi	r2,r2,8192
    d9a8:	10803fcc 	andi	r2,r2,255
    d9ac:	00000506 	br	d9c4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d9b0:	000d8dc0 	call	d8dc <alt_get_errno>
    d9b4:	1007883a 	mov	r3,r2
    d9b8:	00801444 	movi	r2,81
    d9bc:	18800015 	stw	r2,0(r3)
    return 0;
    d9c0:	0005883a 	mov	r2,zero
  }
}
    d9c4:	e037883a 	mov	sp,fp
    d9c8:	dfc00117 	ldw	ra,4(sp)
    d9cc:	df000017 	ldw	fp,0(sp)
    d9d0:	dec00204 	addi	sp,sp,8
    d9d4:	f800283a 	ret

0000d9d8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d9d8:	defffc04 	addi	sp,sp,-16
    d9dc:	df000315 	stw	fp,12(sp)
    d9e0:	df000304 	addi	fp,sp,12
    d9e4:	e13ffd15 	stw	r4,-12(fp)
    d9e8:	e17ffe15 	stw	r5,-8(fp)
    d9ec:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d9f0:	e0fffe17 	ldw	r3,-8(fp)
    d9f4:	e0bffd17 	ldw	r2,-12(fp)
    d9f8:	18800c26 	beq	r3,r2,da2c <alt_load_section+0x54>
  {
    while( to != end )
    d9fc:	00000806 	br	da20 <alt_load_section+0x48>
    {
      *to++ = *from++;
    da00:	e0bffe17 	ldw	r2,-8(fp)
    da04:	10c00104 	addi	r3,r2,4
    da08:	e0fffe15 	stw	r3,-8(fp)
    da0c:	e0fffd17 	ldw	r3,-12(fp)
    da10:	19000104 	addi	r4,r3,4
    da14:	e13ffd15 	stw	r4,-12(fp)
    da18:	18c00017 	ldw	r3,0(r3)
    da1c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    da20:	e0fffe17 	ldw	r3,-8(fp)
    da24:	e0bfff17 	ldw	r2,-4(fp)
    da28:	18bff51e 	bne	r3,r2,da00 <__alt_data_end+0xfffc4620>
    {
      *to++ = *from++;
    }
  }
}
    da2c:	0001883a 	nop
    da30:	e037883a 	mov	sp,fp
    da34:	df000017 	ldw	fp,0(sp)
    da38:	dec00104 	addi	sp,sp,4
    da3c:	f800283a 	ret

0000da40 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    da40:	defffe04 	addi	sp,sp,-8
    da44:	dfc00115 	stw	ra,4(sp)
    da48:	df000015 	stw	fp,0(sp)
    da4c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    da50:	01800074 	movhi	r6,1
    da54:	3188fd04 	addi	r6,r6,9204
    da58:	01400074 	movhi	r5,1
    da5c:	29424204 	addi	r5,r5,2312
    da60:	01000074 	movhi	r4,1
    da64:	2108fd04 	addi	r4,r4,9204
    da68:	000d9d80 	call	d9d8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    da6c:	01800034 	movhi	r6,0
    da70:	31808c04 	addi	r6,r6,560
    da74:	01400034 	movhi	r5,0
    da78:	29400804 	addi	r5,r5,32
    da7c:	01000034 	movhi	r4,0
    da80:	21000804 	addi	r4,r4,32
    da84:	000d9d80 	call	d9d8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    da88:	01800074 	movhi	r6,1
    da8c:	31824204 	addi	r6,r6,2312
    da90:	01400074 	movhi	r5,1
    da94:	29413204 	addi	r5,r5,1224
    da98:	01000074 	movhi	r4,1
    da9c:	21013204 	addi	r4,r4,1224
    daa0:	000d9d80 	call	d9d8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    daa4:	000f3900 	call	f390 <alt_dcache_flush_all>
  alt_icache_flush_all();
    daa8:	000f5640 	call	f564 <alt_icache_flush_all>
}
    daac:	0001883a 	nop
    dab0:	e037883a 	mov	sp,fp
    dab4:	dfc00117 	ldw	ra,4(sp)
    dab8:	df000017 	ldw	fp,0(sp)
    dabc:	dec00204 	addi	sp,sp,8
    dac0:	f800283a 	ret

0000dac4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dac4:	defffe04 	addi	sp,sp,-8
    dac8:	dfc00115 	stw	ra,4(sp)
    dacc:	df000015 	stw	fp,0(sp)
    dad0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dad4:	00800074 	movhi	r2,1
    dad8:	1088f804 	addi	r2,r2,9184
    dadc:	10800017 	ldw	r2,0(r2)
    dae0:	10000526 	beq	r2,zero,daf8 <alt_get_errno+0x34>
    dae4:	00800074 	movhi	r2,1
    dae8:	1088f804 	addi	r2,r2,9184
    daec:	10800017 	ldw	r2,0(r2)
    daf0:	103ee83a 	callr	r2
    daf4:	00000206 	br	db00 <alt_get_errno+0x3c>
    daf8:	00800074 	movhi	r2,1
    dafc:	108fbe04 	addi	r2,r2,16120
}
    db00:	e037883a 	mov	sp,fp
    db04:	dfc00117 	ldw	ra,4(sp)
    db08:	df000017 	ldw	fp,0(sp)
    db0c:	dec00204 	addi	sp,sp,8
    db10:	f800283a 	ret

0000db14 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    db14:	defff904 	addi	sp,sp,-28
    db18:	dfc00615 	stw	ra,24(sp)
    db1c:	df000515 	stw	fp,20(sp)
    db20:	df000504 	addi	fp,sp,20
    db24:	e13ffd15 	stw	r4,-12(fp)
    db28:	e17ffe15 	stw	r5,-8(fp)
    db2c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    db30:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    db34:	e0bffd17 	ldw	r2,-12(fp)
    db38:	10000816 	blt	r2,zero,db5c <lseek+0x48>
    db3c:	01400304 	movi	r5,12
    db40:	e13ffd17 	ldw	r4,-12(fp)
    db44:	000adb40 	call	adb4 <__mulsi3>
    db48:	1007883a 	mov	r3,r2
    db4c:	00800074 	movhi	r2,1
    db50:	10847504 	addi	r2,r2,4564
    db54:	1885883a 	add	r2,r3,r2
    db58:	00000106 	br	db60 <lseek+0x4c>
    db5c:	0005883a 	mov	r2,zero
    db60:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    db64:	e0bffc17 	ldw	r2,-16(fp)
    db68:	10001026 	beq	r2,zero,dbac <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    db6c:	e0bffc17 	ldw	r2,-16(fp)
    db70:	10800017 	ldw	r2,0(r2)
    db74:	10800717 	ldw	r2,28(r2)
    db78:	10000926 	beq	r2,zero,dba0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    db7c:	e0bffc17 	ldw	r2,-16(fp)
    db80:	10800017 	ldw	r2,0(r2)
    db84:	10800717 	ldw	r2,28(r2)
    db88:	e1bfff17 	ldw	r6,-4(fp)
    db8c:	e17ffe17 	ldw	r5,-8(fp)
    db90:	e13ffc17 	ldw	r4,-16(fp)
    db94:	103ee83a 	callr	r2
    db98:	e0bffb15 	stw	r2,-20(fp)
    db9c:	00000506 	br	dbb4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    dba0:	00bfde84 	movi	r2,-134
    dba4:	e0bffb15 	stw	r2,-20(fp)
    dba8:	00000206 	br	dbb4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    dbac:	00bfebc4 	movi	r2,-81
    dbb0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    dbb4:	e0bffb17 	ldw	r2,-20(fp)
    dbb8:	1000070e 	bge	r2,zero,dbd8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    dbbc:	000dac40 	call	dac4 <alt_get_errno>
    dbc0:	1007883a 	mov	r3,r2
    dbc4:	e0bffb17 	ldw	r2,-20(fp)
    dbc8:	0085c83a 	sub	r2,zero,r2
    dbcc:	18800015 	stw	r2,0(r3)
    rc = -1;
    dbd0:	00bfffc4 	movi	r2,-1
    dbd4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    dbd8:	e0bffb17 	ldw	r2,-20(fp)
}
    dbdc:	e037883a 	mov	sp,fp
    dbe0:	dfc00117 	ldw	ra,4(sp)
    dbe4:	df000017 	ldw	fp,0(sp)
    dbe8:	dec00204 	addi	sp,sp,8
    dbec:	f800283a 	ret

0000dbf0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    dbf0:	defffd04 	addi	sp,sp,-12
    dbf4:	dfc00215 	stw	ra,8(sp)
    dbf8:	df000115 	stw	fp,4(sp)
    dbfc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    dc00:	0009883a 	mov	r4,zero
    dc04:	000e0f40 	call	e0f4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    dc08:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    dc0c:	000e12c0 	call	e12c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    dc10:	01800074 	movhi	r6,1
    dc14:	31823804 	addi	r6,r6,2272
    dc18:	01400074 	movhi	r5,1
    dc1c:	29423804 	addi	r5,r5,2272
    dc20:	01000074 	movhi	r4,1
    dc24:	21023804 	addi	r4,r4,2272
    dc28:	000f9380 	call	f938 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    dc2c:	000f4a40 	call	f4a4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    dc30:	01000074 	movhi	r4,1
    dc34:	213d4104 	addi	r4,r4,-2812
    dc38:	00101340 	call	10134 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    dc3c:	d0a6d217 	ldw	r2,-25784(gp)
    dc40:	d0e6d317 	ldw	r3,-25780(gp)
    dc44:	d126d417 	ldw	r4,-25776(gp)
    dc48:	200d883a 	mov	r6,r4
    dc4c:	180b883a 	mov	r5,r3
    dc50:	1009883a 	mov	r4,r2
    dc54:	000026c0 	call	26c <main>
    dc58:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    dc5c:	01000044 	movi	r4,1
    dc60:	000d6d00 	call	d6d0 <close>
  exit (result);
    dc64:	e13fff17 	ldw	r4,-4(fp)
    dc68:	00101480 	call	10148 <exit>

0000dc6c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    dc6c:	defffe04 	addi	sp,sp,-8
    dc70:	df000115 	stw	fp,4(sp)
    dc74:	df000104 	addi	fp,sp,4
    dc78:	e13fff15 	stw	r4,-4(fp)
}
    dc7c:	0001883a 	nop
    dc80:	e037883a 	mov	sp,fp
    dc84:	df000017 	ldw	fp,0(sp)
    dc88:	dec00104 	addi	sp,sp,4
    dc8c:	f800283a 	ret

0000dc90 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    dc90:	defffe04 	addi	sp,sp,-8
    dc94:	df000115 	stw	fp,4(sp)
    dc98:	df000104 	addi	fp,sp,4
    dc9c:	e13fff15 	stw	r4,-4(fp)
}
    dca0:	0001883a 	nop
    dca4:	e037883a 	mov	sp,fp
    dca8:	df000017 	ldw	fp,0(sp)
    dcac:	dec00104 	addi	sp,sp,4
    dcb0:	f800283a 	ret

0000dcb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dcb4:	defffe04 	addi	sp,sp,-8
    dcb8:	dfc00115 	stw	ra,4(sp)
    dcbc:	df000015 	stw	fp,0(sp)
    dcc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dcc4:	00800074 	movhi	r2,1
    dcc8:	1088f804 	addi	r2,r2,9184
    dccc:	10800017 	ldw	r2,0(r2)
    dcd0:	10000526 	beq	r2,zero,dce8 <alt_get_errno+0x34>
    dcd4:	00800074 	movhi	r2,1
    dcd8:	1088f804 	addi	r2,r2,9184
    dcdc:	10800017 	ldw	r2,0(r2)
    dce0:	103ee83a 	callr	r2
    dce4:	00000206 	br	dcf0 <alt_get_errno+0x3c>
    dce8:	00800074 	movhi	r2,1
    dcec:	108fbe04 	addi	r2,r2,16120
}
    dcf0:	e037883a 	mov	sp,fp
    dcf4:	dfc00117 	ldw	ra,4(sp)
    dcf8:	df000017 	ldw	fp,0(sp)
    dcfc:	dec00204 	addi	sp,sp,8
    dd00:	f800283a 	ret

0000dd04 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    dd04:	defff904 	addi	sp,sp,-28
    dd08:	dfc00615 	stw	ra,24(sp)
    dd0c:	df000515 	stw	fp,20(sp)
    dd10:	df000504 	addi	fp,sp,20
    dd14:	e13ffd15 	stw	r4,-12(fp)
    dd18:	e17ffe15 	stw	r5,-8(fp)
    dd1c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dd20:	e0bffd17 	ldw	r2,-12(fp)
    dd24:	10000816 	blt	r2,zero,dd48 <read+0x44>
    dd28:	01400304 	movi	r5,12
    dd2c:	e13ffd17 	ldw	r4,-12(fp)
    dd30:	000adb40 	call	adb4 <__mulsi3>
    dd34:	1007883a 	mov	r3,r2
    dd38:	00800074 	movhi	r2,1
    dd3c:	10847504 	addi	r2,r2,4564
    dd40:	1885883a 	add	r2,r3,r2
    dd44:	00000106 	br	dd4c <read+0x48>
    dd48:	0005883a 	mov	r2,zero
    dd4c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    dd50:	e0bffb17 	ldw	r2,-20(fp)
    dd54:	10002226 	beq	r2,zero,dde0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    dd58:	e0bffb17 	ldw	r2,-20(fp)
    dd5c:	10800217 	ldw	r2,8(r2)
    dd60:	108000cc 	andi	r2,r2,3
    dd64:	10800060 	cmpeqi	r2,r2,1
    dd68:	1000181e 	bne	r2,zero,ddcc <read+0xc8>
        (fd->dev->read))
    dd6c:	e0bffb17 	ldw	r2,-20(fp)
    dd70:	10800017 	ldw	r2,0(r2)
    dd74:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    dd78:	10001426 	beq	r2,zero,ddcc <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    dd7c:	e0bffb17 	ldw	r2,-20(fp)
    dd80:	10800017 	ldw	r2,0(r2)
    dd84:	10800517 	ldw	r2,20(r2)
    dd88:	e0ffff17 	ldw	r3,-4(fp)
    dd8c:	180d883a 	mov	r6,r3
    dd90:	e17ffe17 	ldw	r5,-8(fp)
    dd94:	e13ffb17 	ldw	r4,-20(fp)
    dd98:	103ee83a 	callr	r2
    dd9c:	e0bffc15 	stw	r2,-16(fp)
    dda0:	e0bffc17 	ldw	r2,-16(fp)
    dda4:	1000070e 	bge	r2,zero,ddc4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    dda8:	000dcb40 	call	dcb4 <alt_get_errno>
    ddac:	1007883a 	mov	r3,r2
    ddb0:	e0bffc17 	ldw	r2,-16(fp)
    ddb4:	0085c83a 	sub	r2,zero,r2
    ddb8:	18800015 	stw	r2,0(r3)
          return -1;
    ddbc:	00bfffc4 	movi	r2,-1
    ddc0:	00000c06 	br	ddf4 <read+0xf0>
        }
        return rval;
    ddc4:	e0bffc17 	ldw	r2,-16(fp)
    ddc8:	00000a06 	br	ddf4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    ddcc:	000dcb40 	call	dcb4 <alt_get_errno>
    ddd0:	1007883a 	mov	r3,r2
    ddd4:	00800344 	movi	r2,13
    ddd8:	18800015 	stw	r2,0(r3)
    dddc:	00000406 	br	ddf0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    dde0:	000dcb40 	call	dcb4 <alt_get_errno>
    dde4:	1007883a 	mov	r3,r2
    dde8:	00801444 	movi	r2,81
    ddec:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ddf0:	00bfffc4 	movi	r2,-1
}
    ddf4:	e037883a 	mov	sp,fp
    ddf8:	dfc00117 	ldw	ra,4(sp)
    ddfc:	df000017 	ldw	fp,0(sp)
    de00:	dec00204 	addi	sp,sp,8
    de04:	f800283a 	ret

0000de08 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    de08:	defffc04 	addi	sp,sp,-16
    de0c:	dfc00315 	stw	ra,12(sp)
    de10:	df000215 	stw	fp,8(sp)
    de14:	dc000115 	stw	r16,4(sp)
    de18:	df000204 	addi	fp,sp,8
    de1c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    de20:	e0bffe17 	ldw	r2,-8(fp)
    de24:	108000d0 	cmplti	r2,r2,3
    de28:	1000111e 	bne	r2,zero,de70 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    de2c:	04000074 	movhi	r16,1
    de30:	84047504 	addi	r16,r16,4564
    de34:	e0bffe17 	ldw	r2,-8(fp)
    de38:	01400304 	movi	r5,12
    de3c:	1009883a 	mov	r4,r2
    de40:	000adb40 	call	adb4 <__mulsi3>
    de44:	8085883a 	add	r2,r16,r2
    de48:	10800204 	addi	r2,r2,8
    de4c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    de50:	04000074 	movhi	r16,1
    de54:	84047504 	addi	r16,r16,4564
    de58:	e0bffe17 	ldw	r2,-8(fp)
    de5c:	01400304 	movi	r5,12
    de60:	1009883a 	mov	r4,r2
    de64:	000adb40 	call	adb4 <__mulsi3>
    de68:	8085883a 	add	r2,r16,r2
    de6c:	10000015 	stw	zero,0(r2)
  }
}
    de70:	0001883a 	nop
    de74:	e6ffff04 	addi	sp,fp,-4
    de78:	dfc00217 	ldw	ra,8(sp)
    de7c:	df000117 	ldw	fp,4(sp)
    de80:	dc000017 	ldw	r16,0(sp)
    de84:	dec00304 	addi	sp,sp,12
    de88:	f800283a 	ret

0000de8c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    de8c:	defff904 	addi	sp,sp,-28
    de90:	df000615 	stw	fp,24(sp)
    de94:	df000604 	addi	fp,sp,24
    de98:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    de9c:	0005303a 	rdctl	r2,status
    dea0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dea4:	e0fffe17 	ldw	r3,-8(fp)
    dea8:	00bfff84 	movi	r2,-2
    deac:	1884703a 	and	r2,r3,r2
    deb0:	1001703a 	wrctl	status,r2
  
  return context;
    deb4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    deb8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    debc:	d0a00c17 	ldw	r2,-32720(gp)
    dec0:	10c000c4 	addi	r3,r2,3
    dec4:	00bfff04 	movi	r2,-4
    dec8:	1884703a 	and	r2,r3,r2
    decc:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ded0:	d0e00c17 	ldw	r3,-32720(gp)
    ded4:	e0bfff17 	ldw	r2,-4(fp)
    ded8:	1887883a 	add	r3,r3,r2
    dedc:	00800174 	movhi	r2,5
    dee0:	10a4f804 	addi	r2,r2,-27680
    dee4:	10c0062e 	bgeu	r2,r3,df00 <sbrk+0x74>
    dee8:	e0bffb17 	ldw	r2,-20(fp)
    deec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    def0:	e0bffa17 	ldw	r2,-24(fp)
    def4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    def8:	00bfffc4 	movi	r2,-1
    defc:	00000b06 	br	df2c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    df00:	d0a00c17 	ldw	r2,-32720(gp)
    df04:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    df08:	d0e00c17 	ldw	r3,-32720(gp)
    df0c:	e0bfff17 	ldw	r2,-4(fp)
    df10:	1885883a 	add	r2,r3,r2
    df14:	d0a00c15 	stw	r2,-32720(gp)
    df18:	e0bffb17 	ldw	r2,-20(fp)
    df1c:	e0bffc15 	stw	r2,-16(fp)
    df20:	e0bffc17 	ldw	r2,-16(fp)
    df24:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    df28:	e0bffd17 	ldw	r2,-12(fp)
} 
    df2c:	e037883a 	mov	sp,fp
    df30:	df000017 	ldw	fp,0(sp)
    df34:	dec00104 	addi	sp,sp,4
    df38:	f800283a 	ret

0000df3c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    df3c:	defffd04 	addi	sp,sp,-12
    df40:	dfc00215 	stw	ra,8(sp)
    df44:	df000115 	stw	fp,4(sp)
    df48:	df000104 	addi	fp,sp,4
    df4c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    df50:	e13fff17 	ldw	r4,-4(fp)
    df54:	000f2380 	call	f238 <alt_busy_sleep>
}
    df58:	e037883a 	mov	sp,fp
    df5c:	dfc00117 	ldw	ra,4(sp)
    df60:	df000017 	ldw	fp,0(sp)
    df64:	dec00204 	addi	sp,sp,8
    df68:	f800283a 	ret

0000df6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    df6c:	defffe04 	addi	sp,sp,-8
    df70:	dfc00115 	stw	ra,4(sp)
    df74:	df000015 	stw	fp,0(sp)
    df78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    df7c:	00800074 	movhi	r2,1
    df80:	1088f804 	addi	r2,r2,9184
    df84:	10800017 	ldw	r2,0(r2)
    df88:	10000526 	beq	r2,zero,dfa0 <alt_get_errno+0x34>
    df8c:	00800074 	movhi	r2,1
    df90:	1088f804 	addi	r2,r2,9184
    df94:	10800017 	ldw	r2,0(r2)
    df98:	103ee83a 	callr	r2
    df9c:	00000206 	br	dfa8 <alt_get_errno+0x3c>
    dfa0:	00800074 	movhi	r2,1
    dfa4:	108fbe04 	addi	r2,r2,16120
}
    dfa8:	e037883a 	mov	sp,fp
    dfac:	dfc00117 	ldw	ra,4(sp)
    dfb0:	df000017 	ldw	fp,0(sp)
    dfb4:	dec00204 	addi	sp,sp,8
    dfb8:	f800283a 	ret

0000dfbc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    dfbc:	defff904 	addi	sp,sp,-28
    dfc0:	dfc00615 	stw	ra,24(sp)
    dfc4:	df000515 	stw	fp,20(sp)
    dfc8:	df000504 	addi	fp,sp,20
    dfcc:	e13ffd15 	stw	r4,-12(fp)
    dfd0:	e17ffe15 	stw	r5,-8(fp)
    dfd4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dfd8:	e0bffd17 	ldw	r2,-12(fp)
    dfdc:	10000816 	blt	r2,zero,e000 <write+0x44>
    dfe0:	01400304 	movi	r5,12
    dfe4:	e13ffd17 	ldw	r4,-12(fp)
    dfe8:	000adb40 	call	adb4 <__mulsi3>
    dfec:	1007883a 	mov	r3,r2
    dff0:	00800074 	movhi	r2,1
    dff4:	10847504 	addi	r2,r2,4564
    dff8:	1885883a 	add	r2,r3,r2
    dffc:	00000106 	br	e004 <write+0x48>
    e000:	0005883a 	mov	r2,zero
    e004:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e008:	e0bffb17 	ldw	r2,-20(fp)
    e00c:	10002126 	beq	r2,zero,e094 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    e010:	e0bffb17 	ldw	r2,-20(fp)
    e014:	10800217 	ldw	r2,8(r2)
    e018:	108000cc 	andi	r2,r2,3
    e01c:	10001826 	beq	r2,zero,e080 <write+0xc4>
    e020:	e0bffb17 	ldw	r2,-20(fp)
    e024:	10800017 	ldw	r2,0(r2)
    e028:	10800617 	ldw	r2,24(r2)
    e02c:	10001426 	beq	r2,zero,e080 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    e030:	e0bffb17 	ldw	r2,-20(fp)
    e034:	10800017 	ldw	r2,0(r2)
    e038:	10800617 	ldw	r2,24(r2)
    e03c:	e0ffff17 	ldw	r3,-4(fp)
    e040:	180d883a 	mov	r6,r3
    e044:	e17ffe17 	ldw	r5,-8(fp)
    e048:	e13ffb17 	ldw	r4,-20(fp)
    e04c:	103ee83a 	callr	r2
    e050:	e0bffc15 	stw	r2,-16(fp)
    e054:	e0bffc17 	ldw	r2,-16(fp)
    e058:	1000070e 	bge	r2,zero,e078 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    e05c:	000df6c0 	call	df6c <alt_get_errno>
    e060:	1007883a 	mov	r3,r2
    e064:	e0bffc17 	ldw	r2,-16(fp)
    e068:	0085c83a 	sub	r2,zero,r2
    e06c:	18800015 	stw	r2,0(r3)
        return -1;
    e070:	00bfffc4 	movi	r2,-1
    e074:	00000c06 	br	e0a8 <write+0xec>
      }
      return rval;
    e078:	e0bffc17 	ldw	r2,-16(fp)
    e07c:	00000a06 	br	e0a8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    e080:	000df6c0 	call	df6c <alt_get_errno>
    e084:	1007883a 	mov	r3,r2
    e088:	00800344 	movi	r2,13
    e08c:	18800015 	stw	r2,0(r3)
    e090:	00000406 	br	e0a4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    e094:	000df6c0 	call	df6c <alt_get_errno>
    e098:	1007883a 	mov	r3,r2
    e09c:	00801444 	movi	r2,81
    e0a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e0a4:	00bfffc4 	movi	r2,-1
}
    e0a8:	e037883a 	mov	sp,fp
    e0ac:	dfc00117 	ldw	ra,4(sp)
    e0b0:	df000017 	ldw	fp,0(sp)
    e0b4:	dec00204 	addi	sp,sp,8
    e0b8:	f800283a 	ret

0000e0bc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    e0bc:	defffd04 	addi	sp,sp,-12
    e0c0:	dfc00215 	stw	ra,8(sp)
    e0c4:	df000115 	stw	fp,4(sp)
    e0c8:	df000104 	addi	fp,sp,4
    e0cc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    e0d0:	01400074 	movhi	r5,1
    e0d4:	2948f504 	addi	r5,r5,9172
    e0d8:	e13fff17 	ldw	r4,-4(fp)
    e0dc:	000f4000 	call	f400 <alt_dev_llist_insert>
}
    e0e0:	e037883a 	mov	sp,fp
    e0e4:	dfc00117 	ldw	ra,4(sp)
    e0e8:	df000017 	ldw	fp,0(sp)
    e0ec:	dec00204 	addi	sp,sp,8
    e0f0:	f800283a 	ret

0000e0f4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    e0f4:	defffd04 	addi	sp,sp,-12
    e0f8:	dfc00215 	stw	ra,8(sp)
    e0fc:	df000115 	stw	fp,4(sp)
    e100:	df000104 	addi	fp,sp,4
    e104:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    e108:	000fdfc0 	call	fdfc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    e10c:	00800044 	movi	r2,1
    e110:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    e114:	0001883a 	nop
    e118:	e037883a 	mov	sp,fp
    e11c:	dfc00117 	ldw	ra,4(sp)
    e120:	df000017 	ldw	fp,0(sp)
    e124:	dec00204 	addi	sp,sp,8
    e128:	f800283a 	ret

0000e12c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    e12c:	defffe04 	addi	sp,sp,-8
    e130:	dfc00115 	stw	ra,4(sp)
    e134:	df000015 	stw	fp,0(sp)
    e138:	d839883a 	mov	fp,sp
    ALTERA_AVALON_FIFO_INIT ( FIFO_0, fifo_0);
    e13c:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_1, fifo_1);
    e140:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    e144:	000d883a 	mov	r6,zero
    e148:	000b883a 	mov	r5,zero
    e14c:	01000074 	movhi	r4,1
    e150:	2104df04 	addi	r4,r4,4988
    e154:	000e7e40 	call	e7e4 <altera_avalon_jtag_uart_init>
    e158:	01000074 	movhi	r4,1
    e15c:	2104d504 	addi	r4,r4,4948
    e160:	000e0bc0 	call	e0bc <alt_dev_reg>
}
    e164:	0001883a 	nop
    e168:	e037883a 	mov	sp,fp
    e16c:	dfc00117 	ldw	ra,4(sp)
    e170:	df000017 	ldw	fp,0(sp)
    e174:	dec00204 	addi	sp,sp,8
    e178:	f800283a 	ret

0000e17c <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
    e17c:	defffa04 	addi	sp,sp,-24
    e180:	dfc00515 	stw	ra,20(sp)
    e184:	df000415 	stw	fp,16(sp)
    e188:	df000404 	addi	fp,sp,16
    e18c:	e13ffc15 	stw	r4,-16(fp)
    e190:	e17ffd15 	stw	r5,-12(fp)
    e194:	e1bffe15 	stw	r6,-8(fp)
    e198:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
    e19c:	01400fc4 	movi	r5,63
    e1a0:	e13ffc17 	ldw	r4,-16(fp)
    e1a4:	000e3480 	call	e348 <altera_avalon_fifo_clear_event>
    e1a8:	10000226 	beq	r2,zero,e1b4 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    e1ac:	00bfffc4 	movi	r2,-1
    e1b0:	00001306 	br	e200 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
    e1b4:	e17ffd17 	ldw	r5,-12(fp)
    e1b8:	e13ffc17 	ldw	r4,-16(fp)
    e1bc:	000e3a80 	call	e3a8 <altera_avalon_fifo_write_ienable>
    e1c0:	10000226 	beq	r2,zero,e1cc <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    e1c4:	00bfff84 	movi	r2,-2
    e1c8:	00000d06 	br	e200 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
    e1cc:	e17fff17 	ldw	r5,-4(fp)
    e1d0:	e13ffc17 	ldw	r4,-16(fp)
    e1d4:	000e4040 	call	e404 <altera_avalon_fifo_write_almostfull>
    e1d8:	10000226 	beq	r2,zero,e1e4 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    e1dc:	00bfff44 	movi	r2,-3
    e1e0:	00000706 	br	e200 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
    e1e4:	e17ffe17 	ldw	r5,-8(fp)
    e1e8:	e13ffc17 	ldw	r4,-16(fp)
    e1ec:	000e4600 	call	e460 <altera_avalon_fifo_write_almostempty>
    e1f0:	10000226 	beq	r2,zero,e1fc <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    e1f4:	00bfff44 	movi	r2,-3
    e1f8:	00000106 	br	e200 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
    e1fc:	0005883a 	mov	r2,zero
}
    e200:	e037883a 	mov	sp,fp
    e204:	dfc00117 	ldw	ra,4(sp)
    e208:	df000017 	ldw	fp,0(sp)
    e20c:	dec00204 	addi	sp,sp,8
    e210:	f800283a 	ret

0000e214 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    e214:	defffd04 	addi	sp,sp,-12
    e218:	df000215 	stw	fp,8(sp)
    e21c:	df000204 	addi	fp,sp,8
    e220:	e13ffe15 	stw	r4,-8(fp)
    e224:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
    e228:	e0bffe17 	ldw	r2,-8(fp)
    e22c:	10800104 	addi	r2,r2,4
    e230:	10800037 	ldwio	r2,0(r2)
    e234:	1007883a 	mov	r3,r2
    e238:	e0bfff17 	ldw	r2,-4(fp)
    e23c:	1884703a 	and	r2,r3,r2
}
    e240:	e037883a 	mov	sp,fp
    e244:	df000017 	ldw	fp,0(sp)
    e248:	dec00104 	addi	sp,sp,4
    e24c:	f800283a 	ret

0000e250 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
    e250:	defffd04 	addi	sp,sp,-12
    e254:	df000215 	stw	fp,8(sp)
    e258:	df000204 	addi	fp,sp,8
    e25c:	e13ffe15 	stw	r4,-8(fp)
    e260:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
    e264:	e0bffe17 	ldw	r2,-8(fp)
    e268:	10800304 	addi	r2,r2,12
    e26c:	10800037 	ldwio	r2,0(r2)
    e270:	1007883a 	mov	r3,r2
    e274:	e0bfff17 	ldw	r2,-4(fp)
    e278:	1884703a 	and	r2,r3,r2
}
    e27c:	e037883a 	mov	sp,fp
    e280:	df000017 	ldw	fp,0(sp)
    e284:	dec00104 	addi	sp,sp,4
    e288:	f800283a 	ret

0000e28c <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
    e28c:	defffe04 	addi	sp,sp,-8
    e290:	df000115 	stw	fp,4(sp)
    e294:	df000104 	addi	fp,sp,4
    e298:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
    e29c:	e0bfff17 	ldw	r2,-4(fp)
    e2a0:	10800404 	addi	r2,r2,16
    e2a4:	10800037 	ldwio	r2,0(r2)
}
    e2a8:	e037883a 	mov	sp,fp
    e2ac:	df000017 	ldw	fp,0(sp)
    e2b0:	dec00104 	addi	sp,sp,4
    e2b4:	f800283a 	ret

0000e2b8 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
    e2b8:	defffe04 	addi	sp,sp,-8
    e2bc:	df000115 	stw	fp,4(sp)
    e2c0:	df000104 	addi	fp,sp,4
    e2c4:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
    e2c8:	e0bfff17 	ldw	r2,-4(fp)
    e2cc:	10800504 	addi	r2,r2,20
    e2d0:	10800037 	ldwio	r2,0(r2)
}
    e2d4:	e037883a 	mov	sp,fp
    e2d8:	df000017 	ldw	fp,0(sp)
    e2dc:	dec00104 	addi	sp,sp,4
    e2e0:	f800283a 	ret

0000e2e4 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
    e2e4:	defffd04 	addi	sp,sp,-12
    e2e8:	df000215 	stw	fp,8(sp)
    e2ec:	df000204 	addi	fp,sp,8
    e2f0:	e13ffe15 	stw	r4,-8(fp)
    e2f4:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
    e2f8:	e0bffe17 	ldw	r2,-8(fp)
    e2fc:	10800204 	addi	r2,r2,8
    e300:	10800037 	ldwio	r2,0(r2)
    e304:	1007883a 	mov	r3,r2
    e308:	e0bfff17 	ldw	r2,-4(fp)
    e30c:	1884703a 	and	r2,r3,r2
}
    e310:	e037883a 	mov	sp,fp
    e314:	df000017 	ldw	fp,0(sp)
    e318:	dec00104 	addi	sp,sp,4
    e31c:	f800283a 	ret

0000e320 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
    e320:	defffe04 	addi	sp,sp,-8
    e324:	df000115 	stw	fp,4(sp)
    e328:	df000104 	addi	fp,sp,4
    e32c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
    e330:	e0bfff17 	ldw	r2,-4(fp)
    e334:	10800037 	ldwio	r2,0(r2)
}
    e338:	e037883a 	mov	sp,fp
    e33c:	df000017 	ldw	fp,0(sp)
    e340:	dec00104 	addi	sp,sp,4
    e344:	f800283a 	ret

0000e348 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
    e348:	defffd04 	addi	sp,sp,-12
    e34c:	df000215 	stw	fp,8(sp)
    e350:	df000204 	addi	fp,sp,8
    e354:	e13ffe15 	stw	r4,-8(fp)
    e358:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
    e35c:	e0bffe17 	ldw	r2,-8(fp)
    e360:	10800204 	addi	r2,r2,8
    e364:	1007883a 	mov	r3,r2
    e368:	e0bfff17 	ldw	r2,-4(fp)
    e36c:	18800035 	stwio	r2,0(r3)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
    e370:	e0bffe17 	ldw	r2,-8(fp)
    e374:	10800204 	addi	r2,r2,8
    e378:	10800037 	ldwio	r2,0(r2)
    e37c:	1007883a 	mov	r3,r2
    e380:	e0bfff17 	ldw	r2,-4(fp)
    e384:	1884703a 	and	r2,r3,r2
    e388:	1000021e 	bne	r2,zero,e394 <altera_avalon_fifo_clear_event+0x4c>
        return ALTERA_AVALON_FIFO_OK;
    e38c:	0005883a 	mov	r2,zero
    e390:	00000106 	br	e398 <altera_avalon_fifo_clear_event+0x50>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    e394:	00bfffc4 	movi	r2,-1
}
    e398:	e037883a 	mov	sp,fp
    e39c:	df000017 	ldw	fp,0(sp)
    e3a0:	dec00104 	addi	sp,sp,4
    e3a4:	f800283a 	ret

0000e3a8 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    e3a8:	defffd04 	addi	sp,sp,-12
    e3ac:	df000215 	stw	fp,8(sp)
    e3b0:	df000204 	addi	fp,sp,8
    e3b4:	e13ffe15 	stw	r4,-8(fp)
    e3b8:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
    e3bc:	e0bffe17 	ldw	r2,-8(fp)
    e3c0:	10800304 	addi	r2,r2,12
    e3c4:	1007883a 	mov	r3,r2
    e3c8:	e0bfff17 	ldw	r2,-4(fp)
    e3cc:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
    e3d0:	e0bffe17 	ldw	r2,-8(fp)
    e3d4:	10800304 	addi	r2,r2,12
    e3d8:	10800037 	ldwio	r2,0(r2)
    e3dc:	1007883a 	mov	r3,r2
    e3e0:	e0bfff17 	ldw	r2,-4(fp)
    e3e4:	1880021e 	bne	r3,r2,e3f0 <altera_avalon_fifo_write_ienable+0x48>
        return ALTERA_AVALON_FIFO_OK;
    e3e8:	0005883a 	mov	r2,zero
    e3ec:	00000106 	br	e3f4 <altera_avalon_fifo_write_ienable+0x4c>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    e3f0:	00bfff84 	movi	r2,-2
}
    e3f4:	e037883a 	mov	sp,fp
    e3f8:	df000017 	ldw	fp,0(sp)
    e3fc:	dec00104 	addi	sp,sp,4
    e400:	f800283a 	ret

0000e404 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    e404:	defffd04 	addi	sp,sp,-12
    e408:	df000215 	stw	fp,8(sp)
    e40c:	df000204 	addi	fp,sp,8
    e410:	e13ffe15 	stw	r4,-8(fp)
    e414:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
    e418:	e0bffe17 	ldw	r2,-8(fp)
    e41c:	10800404 	addi	r2,r2,16
    e420:	1007883a 	mov	r3,r2
    e424:	e0bfff17 	ldw	r2,-4(fp)
    e428:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
    e42c:	e0bffe17 	ldw	r2,-8(fp)
    e430:	10800404 	addi	r2,r2,16
    e434:	10800037 	ldwio	r2,0(r2)
    e438:	1007883a 	mov	r3,r2
    e43c:	e0bfff17 	ldw	r2,-4(fp)
    e440:	1880021e 	bne	r3,r2,e44c <altera_avalon_fifo_write_almostfull+0x48>
        return ALTERA_AVALON_FIFO_OK;
    e444:	0005883a 	mov	r2,zero
    e448:	00000106 	br	e450 <altera_avalon_fifo_write_almostfull+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    e44c:	00bfff44 	movi	r2,-3
}
    e450:	e037883a 	mov	sp,fp
    e454:	df000017 	ldw	fp,0(sp)
    e458:	dec00104 	addi	sp,sp,4
    e45c:	f800283a 	ret

0000e460 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    e460:	defffd04 	addi	sp,sp,-12
    e464:	df000215 	stw	fp,8(sp)
    e468:	df000204 	addi	fp,sp,8
    e46c:	e13ffe15 	stw	r4,-8(fp)
    e470:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
    e474:	e0bffe17 	ldw	r2,-8(fp)
    e478:	10800504 	addi	r2,r2,20
    e47c:	1007883a 	mov	r3,r2
    e480:	e0bfff17 	ldw	r2,-4(fp)
    e484:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
    e488:	e0bffe17 	ldw	r2,-8(fp)
    e48c:	10800504 	addi	r2,r2,20
    e490:	10800037 	ldwio	r2,0(r2)
    e494:	1007883a 	mov	r3,r2
    e498:	e0bfff17 	ldw	r2,-4(fp)
    e49c:	1880021e 	bne	r3,r2,e4a8 <altera_avalon_fifo_write_almostempty+0x48>
        return ALTERA_AVALON_FIFO_OK;
    e4a0:	0005883a 	mov	r2,zero
    e4a4:	00000106 	br	e4ac <altera_avalon_fifo_write_almostempty+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    e4a8:	00bfff44 	movi	r2,-3
}
    e4ac:	e037883a 	mov	sp,fp
    e4b0:	df000017 	ldw	fp,0(sp)
    e4b4:	dec00104 	addi	sp,sp,4
    e4b8:	f800283a 	ret

0000e4bc <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
    e4bc:	defffb04 	addi	sp,sp,-20
    e4c0:	dfc00415 	stw	ra,16(sp)
    e4c4:	df000315 	stw	fp,12(sp)
    e4c8:	df000304 	addi	fp,sp,12
    e4cc:	e13ffd15 	stw	r4,-12(fp)
    e4d0:	e17ffe15 	stw	r5,-8(fp)
    e4d4:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
    e4d8:	01400044 	movi	r5,1
    e4dc:	e13ffe17 	ldw	r4,-8(fp)
    e4e0:	000e2140 	call	e214 <altera_avalon_fifo_read_status>
    e4e4:	1000051e 	bne	r2,zero,e4fc <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
    e4e8:	e0bffd17 	ldw	r2,-12(fp)
    e4ec:	e0ffff17 	ldw	r3,-4(fp)
    e4f0:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
    e4f4:	0005883a 	mov	r2,zero
    e4f8:	00000106 	br	e500 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
    e4fc:	00bfff04 	movi	r2,-4
    }
}
    e500:	e037883a 	mov	sp,fp
    e504:	dfc00117 	ldw	ra,4(sp)
    e508:	df000017 	ldw	fp,0(sp)
    e50c:	dec00204 	addi	sp,sp,8
    e510:	f800283a 	ret

0000e514 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    e514:	defffa04 	addi	sp,sp,-24
    e518:	dfc00515 	stw	ra,20(sp)
    e51c:	df000415 	stw	fp,16(sp)
    e520:	df000404 	addi	fp,sp,16
    e524:	e13ffd15 	stw	r4,-12(fp)
    e528:	e17ffe15 	stw	r5,-8(fp)
    e52c:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
    e530:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
    e534:	e0bfff17 	ldw	r2,-4(fp)
    e538:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    e53c:	01400084 	movi	r5,2
    e540:	e13ffe17 	ldw	r4,-8(fp)
    e544:	000e2140 	call	e214 <altera_avalon_fifo_read_status>
    e548:	1000071e 	bne	r2,zero,e568 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
    e54c:	e13ffe17 	ldw	r4,-8(fp)
    e550:	000e3200 	call	e320 <altera_avalon_fifo_read_level>
    e554:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    e558:	e0bffd17 	ldw	r2,-12(fp)
    e55c:	10c00037 	ldwio	r3,0(r2)
    e560:	e0bfff17 	ldw	r2,-4(fp)
    e564:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
    e568:	e0bffc17 	ldw	r2,-16(fp)
}
    e56c:	e037883a 	mov	sp,fp
    e570:	dfc00117 	ldw	ra,4(sp)
    e574:	df000017 	ldw	fp,0(sp)
    e578:	dec00204 	addi	sp,sp,8
    e57c:	f800283a 	ret

0000e580 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
    e580:	defffc04 	addi	sp,sp,-16
    e584:	dfc00315 	stw	ra,12(sp)
    e588:	df000215 	stw	fp,8(sp)
    e58c:	df000204 	addi	fp,sp,8
    e590:	e13ffe15 	stw	r4,-8(fp)
    e594:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    e598:	01400084 	movi	r5,2
    e59c:	e13fff17 	ldw	r4,-4(fp)
    e5a0:	000e2140 	call	e214 <altera_avalon_fifo_read_status>
    e5a4:	1000031e 	bne	r2,zero,e5b4 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    e5a8:	e0bffe17 	ldw	r2,-8(fp)
    e5ac:	10800037 	ldwio	r2,0(r2)
    e5b0:	00000106 	br	e5b8 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
    e5b4:	0005883a 	mov	r2,zero
}
    e5b8:	e037883a 	mov	sp,fp
    e5bc:	dfc00117 	ldw	ra,4(sp)
    e5c0:	df000017 	ldw	fp,0(sp)
    e5c4:	dec00204 	addi	sp,sp,8
    e5c8:	f800283a 	ret

0000e5cc <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
    e5cc:	defffb04 	addi	sp,sp,-20
    e5d0:	dfc00415 	stw	ra,16(sp)
    e5d4:	df000315 	stw	fp,12(sp)
    e5d8:	df000304 	addi	fp,sp,12
    e5dc:	e13ffd15 	stw	r4,-12(fp)
    e5e0:	e17ffe15 	stw	r5,-8(fp)
    e5e4:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
    e5e8:	01400044 	movi	r5,1
    e5ec:	e13ffe17 	ldw	r4,-8(fp)
    e5f0:	000e2140 	call	e214 <altera_avalon_fifo_read_status>
    e5f4:	1000071e 	bne	r2,zero,e614 <altera_avalon_fifo_write_other_info+0x48>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
    e5f8:	e0bffd17 	ldw	r2,-12(fp)
    e5fc:	10800104 	addi	r2,r2,4
    e600:	1007883a 	mov	r3,r2
    e604:	e0bfff17 	ldw	r2,-4(fp)
    e608:	18800035 	stwio	r2,0(r3)
	return ALTERA_AVALON_FIFO_OK;
    e60c:	0005883a 	mov	r2,zero
    e610:	00000106 	br	e618 <altera_avalon_fifo_write_other_info+0x4c>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
    e614:	00bfff04 	movi	r2,-4
    }
}
    e618:	e037883a 	mov	sp,fp
    e61c:	dfc00117 	ldw	ra,4(sp)
    e620:	df000017 	ldw	fp,0(sp)
    e624:	dec00204 	addi	sp,sp,8
    e628:	f800283a 	ret

0000e62c <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
    e62c:	defffe04 	addi	sp,sp,-8
    e630:	df000115 	stw	fp,4(sp)
    e634:	df000104 	addi	fp,sp,4
    e638:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
    e63c:	e0bfff17 	ldw	r2,-4(fp)
    e640:	10800104 	addi	r2,r2,4
    e644:	10800037 	ldwio	r2,0(r2)
}
    e648:	e037883a 	mov	sp,fp
    e64c:	df000017 	ldw	fp,0(sp)
    e650:	dec00104 	addi	sp,sp,4
    e654:	f800283a 	ret

0000e658 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
    e658:	defffe04 	addi	sp,sp,-8
    e65c:	df000115 	stw	fp,4(sp)
    e660:	df000104 	addi	fp,sp,4
    e664:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
    e668:	e0bfff17 	ldw	r2,-4(fp)
    e66c:	10800037 	ldwio	r2,0(r2)
}
    e670:	e037883a 	mov	sp,fp
    e674:	df000017 	ldw	fp,0(sp)
    e678:	dec00104 	addi	sp,sp,4
    e67c:	f800283a 	ret

0000e680 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    e680:	defffa04 	addi	sp,sp,-24
    e684:	dfc00515 	stw	ra,20(sp)
    e688:	df000415 	stw	fp,16(sp)
    e68c:	df000404 	addi	fp,sp,16
    e690:	e13ffd15 	stw	r4,-12(fp)
    e694:	e17ffe15 	stw	r5,-8(fp)
    e698:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e69c:	e0bffd17 	ldw	r2,-12(fp)
    e6a0:	10800017 	ldw	r2,0(r2)
    e6a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    e6a8:	e0bffc17 	ldw	r2,-16(fp)
    e6ac:	10c00a04 	addi	r3,r2,40
    e6b0:	e0bffd17 	ldw	r2,-12(fp)
    e6b4:	10800217 	ldw	r2,8(r2)
    e6b8:	100f883a 	mov	r7,r2
    e6bc:	e1bfff17 	ldw	r6,-4(fp)
    e6c0:	e17ffe17 	ldw	r5,-8(fp)
    e6c4:	1809883a 	mov	r4,r3
    e6c8:	000ecb80 	call	ecb8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    e6cc:	e037883a 	mov	sp,fp
    e6d0:	dfc00117 	ldw	ra,4(sp)
    e6d4:	df000017 	ldw	fp,0(sp)
    e6d8:	dec00204 	addi	sp,sp,8
    e6dc:	f800283a 	ret

0000e6e0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    e6e0:	defffa04 	addi	sp,sp,-24
    e6e4:	dfc00515 	stw	ra,20(sp)
    e6e8:	df000415 	stw	fp,16(sp)
    e6ec:	df000404 	addi	fp,sp,16
    e6f0:	e13ffd15 	stw	r4,-12(fp)
    e6f4:	e17ffe15 	stw	r5,-8(fp)
    e6f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e6fc:	e0bffd17 	ldw	r2,-12(fp)
    e700:	10800017 	ldw	r2,0(r2)
    e704:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    e708:	e0bffc17 	ldw	r2,-16(fp)
    e70c:	10c00a04 	addi	r3,r2,40
    e710:	e0bffd17 	ldw	r2,-12(fp)
    e714:	10800217 	ldw	r2,8(r2)
    e718:	100f883a 	mov	r7,r2
    e71c:	e1bfff17 	ldw	r6,-4(fp)
    e720:	e17ffe17 	ldw	r5,-8(fp)
    e724:	1809883a 	mov	r4,r3
    e728:	000eed40 	call	eed4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    e72c:	e037883a 	mov	sp,fp
    e730:	dfc00117 	ldw	ra,4(sp)
    e734:	df000017 	ldw	fp,0(sp)
    e738:	dec00204 	addi	sp,sp,8
    e73c:	f800283a 	ret

0000e740 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    e740:	defffc04 	addi	sp,sp,-16
    e744:	dfc00315 	stw	ra,12(sp)
    e748:	df000215 	stw	fp,8(sp)
    e74c:	df000204 	addi	fp,sp,8
    e750:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e754:	e0bfff17 	ldw	r2,-4(fp)
    e758:	10800017 	ldw	r2,0(r2)
    e75c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    e760:	e0bffe17 	ldw	r2,-8(fp)
    e764:	10c00a04 	addi	r3,r2,40
    e768:	e0bfff17 	ldw	r2,-4(fp)
    e76c:	10800217 	ldw	r2,8(r2)
    e770:	100b883a 	mov	r5,r2
    e774:	1809883a 	mov	r4,r3
    e778:	000eb600 	call	eb60 <altera_avalon_jtag_uart_close>
}
    e77c:	e037883a 	mov	sp,fp
    e780:	dfc00117 	ldw	ra,4(sp)
    e784:	df000017 	ldw	fp,0(sp)
    e788:	dec00204 	addi	sp,sp,8
    e78c:	f800283a 	ret

0000e790 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    e790:	defffa04 	addi	sp,sp,-24
    e794:	dfc00515 	stw	ra,20(sp)
    e798:	df000415 	stw	fp,16(sp)
    e79c:	df000404 	addi	fp,sp,16
    e7a0:	e13ffd15 	stw	r4,-12(fp)
    e7a4:	e17ffe15 	stw	r5,-8(fp)
    e7a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    e7ac:	e0bffd17 	ldw	r2,-12(fp)
    e7b0:	10800017 	ldw	r2,0(r2)
    e7b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    e7b8:	e0bffc17 	ldw	r2,-16(fp)
    e7bc:	10800a04 	addi	r2,r2,40
    e7c0:	e1bfff17 	ldw	r6,-4(fp)
    e7c4:	e17ffe17 	ldw	r5,-8(fp)
    e7c8:	1009883a 	mov	r4,r2
    e7cc:	000ebc80 	call	ebc8 <altera_avalon_jtag_uart_ioctl>
}
    e7d0:	e037883a 	mov	sp,fp
    e7d4:	dfc00117 	ldw	ra,4(sp)
    e7d8:	df000017 	ldw	fp,0(sp)
    e7dc:	dec00204 	addi	sp,sp,8
    e7e0:	f800283a 	ret

0000e7e4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    e7e4:	defffa04 	addi	sp,sp,-24
    e7e8:	dfc00515 	stw	ra,20(sp)
    e7ec:	df000415 	stw	fp,16(sp)
    e7f0:	df000404 	addi	fp,sp,16
    e7f4:	e13ffd15 	stw	r4,-12(fp)
    e7f8:	e17ffe15 	stw	r5,-8(fp)
    e7fc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e800:	e0bffd17 	ldw	r2,-12(fp)
    e804:	00c00044 	movi	r3,1
    e808:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    e80c:	e0bffd17 	ldw	r2,-12(fp)
    e810:	10800017 	ldw	r2,0(r2)
    e814:	10800104 	addi	r2,r2,4
    e818:	1007883a 	mov	r3,r2
    e81c:	e0bffd17 	ldw	r2,-12(fp)
    e820:	10800817 	ldw	r2,32(r2)
    e824:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    e828:	e0bffe17 	ldw	r2,-8(fp)
    e82c:	e0ffff17 	ldw	r3,-4(fp)
    e830:	d8000015 	stw	zero,0(sp)
    e834:	e1fffd17 	ldw	r7,-12(fp)
    e838:	01800074 	movhi	r6,1
    e83c:	31ba2b04 	addi	r6,r6,-5972
    e840:	180b883a 	mov	r5,r3
    e844:	1009883a 	mov	r4,r2
    e848:	000f5840 	call	f584 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    e84c:	e0bffd17 	ldw	r2,-12(fp)
    e850:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    e854:	e0bffd17 	ldw	r2,-12(fp)
    e858:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e85c:	00800074 	movhi	r2,1
    e860:	108fc304 	addi	r2,r2,16140
    e864:	10800017 	ldw	r2,0(r2)
    e868:	e1fffd17 	ldw	r7,-12(fp)
    e86c:	01800074 	movhi	r6,1
    e870:	31baae04 	addi	r6,r6,-5448
    e874:	100b883a 	mov	r5,r2
    e878:	1809883a 	mov	r4,r3
    e87c:	000f0f80 	call	f0f8 <alt_alarm_start>
    e880:	1000040e 	bge	r2,zero,e894 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    e884:	e0fffd17 	ldw	r3,-12(fp)
    e888:	00a00034 	movhi	r2,32768
    e88c:	10bfffc4 	addi	r2,r2,-1
    e890:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    e894:	0001883a 	nop
    e898:	e037883a 	mov	sp,fp
    e89c:	dfc00117 	ldw	ra,4(sp)
    e8a0:	df000017 	ldw	fp,0(sp)
    e8a4:	dec00204 	addi	sp,sp,8
    e8a8:	f800283a 	ret

0000e8ac <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    e8ac:	defff804 	addi	sp,sp,-32
    e8b0:	df000715 	stw	fp,28(sp)
    e8b4:	df000704 	addi	fp,sp,28
    e8b8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    e8bc:	e0bfff17 	ldw	r2,-4(fp)
    e8c0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    e8c4:	e0bffb17 	ldw	r2,-20(fp)
    e8c8:	10800017 	ldw	r2,0(r2)
    e8cc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e8d0:	e0bffc17 	ldw	r2,-16(fp)
    e8d4:	10800104 	addi	r2,r2,4
    e8d8:	10800037 	ldwio	r2,0(r2)
    e8dc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    e8e0:	e0bffd17 	ldw	r2,-12(fp)
    e8e4:	1080c00c 	andi	r2,r2,768
    e8e8:	10006d26 	beq	r2,zero,eaa0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    e8ec:	e0bffd17 	ldw	r2,-12(fp)
    e8f0:	1080400c 	andi	r2,r2,256
    e8f4:	10003526 	beq	r2,zero,e9cc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    e8f8:	00800074 	movhi	r2,1
    e8fc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e900:	e0bffb17 	ldw	r2,-20(fp)
    e904:	10800a17 	ldw	r2,40(r2)
    e908:	10800044 	addi	r2,r2,1
    e90c:	1081ffcc 	andi	r2,r2,2047
    e910:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    e914:	e0bffb17 	ldw	r2,-20(fp)
    e918:	10c00b17 	ldw	r3,44(r2)
    e91c:	e0bffe17 	ldw	r2,-8(fp)
    e920:	18801526 	beq	r3,r2,e978 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    e924:	e0bffc17 	ldw	r2,-16(fp)
    e928:	10800037 	ldwio	r2,0(r2)
    e92c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    e930:	e0bff917 	ldw	r2,-28(fp)
    e934:	10a0000c 	andi	r2,r2,32768
    e938:	10001126 	beq	r2,zero,e980 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    e93c:	e0bffb17 	ldw	r2,-20(fp)
    e940:	10800a17 	ldw	r2,40(r2)
    e944:	e0fff917 	ldw	r3,-28(fp)
    e948:	1809883a 	mov	r4,r3
    e94c:	e0fffb17 	ldw	r3,-20(fp)
    e950:	1885883a 	add	r2,r3,r2
    e954:	10800e04 	addi	r2,r2,56
    e958:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e95c:	e0bffb17 	ldw	r2,-20(fp)
    e960:	10800a17 	ldw	r2,40(r2)
    e964:	10800044 	addi	r2,r2,1
    e968:	10c1ffcc 	andi	r3,r2,2047
    e96c:	e0bffb17 	ldw	r2,-20(fp)
    e970:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    e974:	003fe206 	br	e900 <__alt_data_end+0xfffc5520>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    e978:	0001883a 	nop
    e97c:	00000106 	br	e984 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    e980:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    e984:	e0bff917 	ldw	r2,-28(fp)
    e988:	10bfffec 	andhi	r2,r2,65535
    e98c:	10000f26 	beq	r2,zero,e9cc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e990:	e0bffb17 	ldw	r2,-20(fp)
    e994:	10c00817 	ldw	r3,32(r2)
    e998:	00bfff84 	movi	r2,-2
    e99c:	1886703a 	and	r3,r3,r2
    e9a0:	e0bffb17 	ldw	r2,-20(fp)
    e9a4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    e9a8:	e0bffc17 	ldw	r2,-16(fp)
    e9ac:	10800104 	addi	r2,r2,4
    e9b0:	1007883a 	mov	r3,r2
    e9b4:	e0bffb17 	ldw	r2,-20(fp)
    e9b8:	10800817 	ldw	r2,32(r2)
    e9bc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e9c0:	e0bffc17 	ldw	r2,-16(fp)
    e9c4:	10800104 	addi	r2,r2,4
    e9c8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    e9cc:	e0bffd17 	ldw	r2,-12(fp)
    e9d0:	1080800c 	andi	r2,r2,512
    e9d4:	103fbe26 	beq	r2,zero,e8d0 <__alt_data_end+0xfffc54f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    e9d8:	e0bffd17 	ldw	r2,-12(fp)
    e9dc:	1004d43a 	srli	r2,r2,16
    e9e0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    e9e4:	00001406 	br	ea38 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    e9e8:	e0bffc17 	ldw	r2,-16(fp)
    e9ec:	e0fffb17 	ldw	r3,-20(fp)
    e9f0:	18c00d17 	ldw	r3,52(r3)
    e9f4:	e13ffb17 	ldw	r4,-20(fp)
    e9f8:	20c7883a 	add	r3,r4,r3
    e9fc:	18c20e04 	addi	r3,r3,2104
    ea00:	18c00003 	ldbu	r3,0(r3)
    ea04:	18c03fcc 	andi	r3,r3,255
    ea08:	18c0201c 	xori	r3,r3,128
    ea0c:	18ffe004 	addi	r3,r3,-128
    ea10:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ea14:	e0bffb17 	ldw	r2,-20(fp)
    ea18:	10800d17 	ldw	r2,52(r2)
    ea1c:	10800044 	addi	r2,r2,1
    ea20:	10c1ffcc 	andi	r3,r2,2047
    ea24:	e0bffb17 	ldw	r2,-20(fp)
    ea28:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    ea2c:	e0bffa17 	ldw	r2,-24(fp)
    ea30:	10bfffc4 	addi	r2,r2,-1
    ea34:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    ea38:	e0bffa17 	ldw	r2,-24(fp)
    ea3c:	10000526 	beq	r2,zero,ea54 <altera_avalon_jtag_uart_irq+0x1a8>
    ea40:	e0bffb17 	ldw	r2,-20(fp)
    ea44:	10c00d17 	ldw	r3,52(r2)
    ea48:	e0bffb17 	ldw	r2,-20(fp)
    ea4c:	10800c17 	ldw	r2,48(r2)
    ea50:	18bfe51e 	bne	r3,r2,e9e8 <__alt_data_end+0xfffc5608>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    ea54:	e0bffa17 	ldw	r2,-24(fp)
    ea58:	103f9d26 	beq	r2,zero,e8d0 <__alt_data_end+0xfffc54f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ea5c:	e0bffb17 	ldw	r2,-20(fp)
    ea60:	10c00817 	ldw	r3,32(r2)
    ea64:	00bfff44 	movi	r2,-3
    ea68:	1886703a 	and	r3,r3,r2
    ea6c:	e0bffb17 	ldw	r2,-20(fp)
    ea70:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ea74:	e0bffb17 	ldw	r2,-20(fp)
    ea78:	10800017 	ldw	r2,0(r2)
    ea7c:	10800104 	addi	r2,r2,4
    ea80:	1007883a 	mov	r3,r2
    ea84:	e0bffb17 	ldw	r2,-20(fp)
    ea88:	10800817 	ldw	r2,32(r2)
    ea8c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ea90:	e0bffc17 	ldw	r2,-16(fp)
    ea94:	10800104 	addi	r2,r2,4
    ea98:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    ea9c:	003f8c06 	br	e8d0 <__alt_data_end+0xfffc54f0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    eaa0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    eaa4:	0001883a 	nop
    eaa8:	e037883a 	mov	sp,fp
    eaac:	df000017 	ldw	fp,0(sp)
    eab0:	dec00104 	addi	sp,sp,4
    eab4:	f800283a 	ret

0000eab8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    eab8:	defff804 	addi	sp,sp,-32
    eabc:	df000715 	stw	fp,28(sp)
    eac0:	df000704 	addi	fp,sp,28
    eac4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    eac8:	e0bffb17 	ldw	r2,-20(fp)
    eacc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    ead0:	e0bff917 	ldw	r2,-28(fp)
    ead4:	10800017 	ldw	r2,0(r2)
    ead8:	10800104 	addi	r2,r2,4
    eadc:	10800037 	ldwio	r2,0(r2)
    eae0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    eae4:	e0bffa17 	ldw	r2,-24(fp)
    eae8:	1081000c 	andi	r2,r2,1024
    eaec:	10000b26 	beq	r2,zero,eb1c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    eaf0:	e0bff917 	ldw	r2,-28(fp)
    eaf4:	10800017 	ldw	r2,0(r2)
    eaf8:	10800104 	addi	r2,r2,4
    eafc:	1007883a 	mov	r3,r2
    eb00:	e0bff917 	ldw	r2,-28(fp)
    eb04:	10800817 	ldw	r2,32(r2)
    eb08:	10810014 	ori	r2,r2,1024
    eb0c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    eb10:	e0bff917 	ldw	r2,-28(fp)
    eb14:	10000915 	stw	zero,36(r2)
    eb18:	00000a06 	br	eb44 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    eb1c:	e0bff917 	ldw	r2,-28(fp)
    eb20:	10c00917 	ldw	r3,36(r2)
    eb24:	00a00034 	movhi	r2,32768
    eb28:	10bfff04 	addi	r2,r2,-4
    eb2c:	10c00536 	bltu	r2,r3,eb44 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    eb30:	e0bff917 	ldw	r2,-28(fp)
    eb34:	10800917 	ldw	r2,36(r2)
    eb38:	10c00044 	addi	r3,r2,1
    eb3c:	e0bff917 	ldw	r2,-28(fp)
    eb40:	10c00915 	stw	r3,36(r2)
    eb44:	00800074 	movhi	r2,1
    eb48:	108fc304 	addi	r2,r2,16140
    eb4c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    eb50:	e037883a 	mov	sp,fp
    eb54:	df000017 	ldw	fp,0(sp)
    eb58:	dec00104 	addi	sp,sp,4
    eb5c:	f800283a 	ret

0000eb60 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    eb60:	defffd04 	addi	sp,sp,-12
    eb64:	df000215 	stw	fp,8(sp)
    eb68:	df000204 	addi	fp,sp,8
    eb6c:	e13ffe15 	stw	r4,-8(fp)
    eb70:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    eb74:	00000506 	br	eb8c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    eb78:	e0bfff17 	ldw	r2,-4(fp)
    eb7c:	1090000c 	andi	r2,r2,16384
    eb80:	10000226 	beq	r2,zero,eb8c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    eb84:	00bffd44 	movi	r2,-11
    eb88:	00000b06 	br	ebb8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    eb8c:	e0bffe17 	ldw	r2,-8(fp)
    eb90:	10c00d17 	ldw	r3,52(r2)
    eb94:	e0bffe17 	ldw	r2,-8(fp)
    eb98:	10800c17 	ldw	r2,48(r2)
    eb9c:	18800526 	beq	r3,r2,ebb4 <altera_avalon_jtag_uart_close+0x54>
    eba0:	e0bffe17 	ldw	r2,-8(fp)
    eba4:	10c00917 	ldw	r3,36(r2)
    eba8:	e0bffe17 	ldw	r2,-8(fp)
    ebac:	10800117 	ldw	r2,4(r2)
    ebb0:	18bff136 	bltu	r3,r2,eb78 <__alt_data_end+0xfffc5798>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    ebb4:	0005883a 	mov	r2,zero
}
    ebb8:	e037883a 	mov	sp,fp
    ebbc:	df000017 	ldw	fp,0(sp)
    ebc0:	dec00104 	addi	sp,sp,4
    ebc4:	f800283a 	ret

0000ebc8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    ebc8:	defffa04 	addi	sp,sp,-24
    ebcc:	df000515 	stw	fp,20(sp)
    ebd0:	df000504 	addi	fp,sp,20
    ebd4:	e13ffd15 	stw	r4,-12(fp)
    ebd8:	e17ffe15 	stw	r5,-8(fp)
    ebdc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    ebe0:	00bff9c4 	movi	r2,-25
    ebe4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    ebe8:	e0bffe17 	ldw	r2,-8(fp)
    ebec:	10da8060 	cmpeqi	r3,r2,27137
    ebf0:	1800031e 	bne	r3,zero,ec00 <altera_avalon_jtag_uart_ioctl+0x38>
    ebf4:	109a80a0 	cmpeqi	r2,r2,27138
    ebf8:	1000181e 	bne	r2,zero,ec5c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    ebfc:	00002906 	br	eca4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    ec00:	e0bffd17 	ldw	r2,-12(fp)
    ec04:	10c00117 	ldw	r3,4(r2)
    ec08:	00a00034 	movhi	r2,32768
    ec0c:	10bfffc4 	addi	r2,r2,-1
    ec10:	18802126 	beq	r3,r2,ec98 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    ec14:	e0bfff17 	ldw	r2,-4(fp)
    ec18:	10800017 	ldw	r2,0(r2)
    ec1c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    ec20:	e0bffc17 	ldw	r2,-16(fp)
    ec24:	10800090 	cmplti	r2,r2,2
    ec28:	1000061e 	bne	r2,zero,ec44 <altera_avalon_jtag_uart_ioctl+0x7c>
    ec2c:	e0fffc17 	ldw	r3,-16(fp)
    ec30:	00a00034 	movhi	r2,32768
    ec34:	10bfffc4 	addi	r2,r2,-1
    ec38:	18800226 	beq	r3,r2,ec44 <altera_avalon_jtag_uart_ioctl+0x7c>
    ec3c:	e0bffc17 	ldw	r2,-16(fp)
    ec40:	00000206 	br	ec4c <altera_avalon_jtag_uart_ioctl+0x84>
    ec44:	00a00034 	movhi	r2,32768
    ec48:	10bfff84 	addi	r2,r2,-2
    ec4c:	e0fffd17 	ldw	r3,-12(fp)
    ec50:	18800115 	stw	r2,4(r3)
      rc = 0;
    ec54:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    ec58:	00000f06 	br	ec98 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    ec5c:	e0bffd17 	ldw	r2,-12(fp)
    ec60:	10c00117 	ldw	r3,4(r2)
    ec64:	00a00034 	movhi	r2,32768
    ec68:	10bfffc4 	addi	r2,r2,-1
    ec6c:	18800c26 	beq	r3,r2,eca0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    ec70:	e0bffd17 	ldw	r2,-12(fp)
    ec74:	10c00917 	ldw	r3,36(r2)
    ec78:	e0bffd17 	ldw	r2,-12(fp)
    ec7c:	10800117 	ldw	r2,4(r2)
    ec80:	1885803a 	cmpltu	r2,r3,r2
    ec84:	10c03fcc 	andi	r3,r2,255
    ec88:	e0bfff17 	ldw	r2,-4(fp)
    ec8c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    ec90:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    ec94:	00000206 	br	eca0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    ec98:	0001883a 	nop
    ec9c:	00000106 	br	eca4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    eca0:	0001883a 	nop

  default:
    break;
  }

  return rc;
    eca4:	e0bffb17 	ldw	r2,-20(fp)
}
    eca8:	e037883a 	mov	sp,fp
    ecac:	df000017 	ldw	fp,0(sp)
    ecb0:	dec00104 	addi	sp,sp,4
    ecb4:	f800283a 	ret

0000ecb8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    ecb8:	defff304 	addi	sp,sp,-52
    ecbc:	dfc00c15 	stw	ra,48(sp)
    ecc0:	df000b15 	stw	fp,44(sp)
    ecc4:	df000b04 	addi	fp,sp,44
    ecc8:	e13ffc15 	stw	r4,-16(fp)
    eccc:	e17ffd15 	stw	r5,-12(fp)
    ecd0:	e1bffe15 	stw	r6,-8(fp)
    ecd4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    ecd8:	e0bffd17 	ldw	r2,-12(fp)
    ecdc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ece0:	00004706 	br	ee00 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    ece4:	e0bffc17 	ldw	r2,-16(fp)
    ece8:	10800a17 	ldw	r2,40(r2)
    ecec:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    ecf0:	e0bffc17 	ldw	r2,-16(fp)
    ecf4:	10800b17 	ldw	r2,44(r2)
    ecf8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    ecfc:	e0fff717 	ldw	r3,-36(fp)
    ed00:	e0bff817 	ldw	r2,-32(fp)
    ed04:	18800536 	bltu	r3,r2,ed1c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    ed08:	e0fff717 	ldw	r3,-36(fp)
    ed0c:	e0bff817 	ldw	r2,-32(fp)
    ed10:	1885c83a 	sub	r2,r3,r2
    ed14:	e0bff615 	stw	r2,-40(fp)
    ed18:	00000406 	br	ed2c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    ed1c:	00c20004 	movi	r3,2048
    ed20:	e0bff817 	ldw	r2,-32(fp)
    ed24:	1885c83a 	sub	r2,r3,r2
    ed28:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    ed2c:	e0bff617 	ldw	r2,-40(fp)
    ed30:	10001e26 	beq	r2,zero,edac <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    ed34:	e0fffe17 	ldw	r3,-8(fp)
    ed38:	e0bff617 	ldw	r2,-40(fp)
    ed3c:	1880022e 	bgeu	r3,r2,ed48 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    ed40:	e0bffe17 	ldw	r2,-8(fp)
    ed44:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    ed48:	e0bffc17 	ldw	r2,-16(fp)
    ed4c:	10c00e04 	addi	r3,r2,56
    ed50:	e0bff817 	ldw	r2,-32(fp)
    ed54:	1885883a 	add	r2,r3,r2
    ed58:	e1bff617 	ldw	r6,-40(fp)
    ed5c:	100b883a 	mov	r5,r2
    ed60:	e13ff517 	ldw	r4,-44(fp)
    ed64:	00061cc0 	call	61cc <memcpy>
      ptr   += n;
    ed68:	e0fff517 	ldw	r3,-44(fp)
    ed6c:	e0bff617 	ldw	r2,-40(fp)
    ed70:	1885883a 	add	r2,r3,r2
    ed74:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    ed78:	e0fffe17 	ldw	r3,-8(fp)
    ed7c:	e0bff617 	ldw	r2,-40(fp)
    ed80:	1885c83a 	sub	r2,r3,r2
    ed84:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ed88:	e0fff817 	ldw	r3,-32(fp)
    ed8c:	e0bff617 	ldw	r2,-40(fp)
    ed90:	1885883a 	add	r2,r3,r2
    ed94:	10c1ffcc 	andi	r3,r2,2047
    ed98:	e0bffc17 	ldw	r2,-16(fp)
    ed9c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    eda0:	e0bffe17 	ldw	r2,-8(fp)
    eda4:	00bfcf16 	blt	zero,r2,ece4 <__alt_data_end+0xfffc5904>
    eda8:	00000106 	br	edb0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    edac:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    edb0:	e0fff517 	ldw	r3,-44(fp)
    edb4:	e0bffd17 	ldw	r2,-12(fp)
    edb8:	1880141e 	bne	r3,r2,ee0c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    edbc:	e0bfff17 	ldw	r2,-4(fp)
    edc0:	1090000c 	andi	r2,r2,16384
    edc4:	1000131e 	bne	r2,zero,ee14 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    edc8:	0001883a 	nop
    edcc:	e0bffc17 	ldw	r2,-16(fp)
    edd0:	10c00a17 	ldw	r3,40(r2)
    edd4:	e0bff717 	ldw	r2,-36(fp)
    edd8:	1880051e 	bne	r3,r2,edf0 <altera_avalon_jtag_uart_read+0x138>
    eddc:	e0bffc17 	ldw	r2,-16(fp)
    ede0:	10c00917 	ldw	r3,36(r2)
    ede4:	e0bffc17 	ldw	r2,-16(fp)
    ede8:	10800117 	ldw	r2,4(r2)
    edec:	18bff736 	bltu	r3,r2,edcc <__alt_data_end+0xfffc59ec>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    edf0:	e0bffc17 	ldw	r2,-16(fp)
    edf4:	10c00a17 	ldw	r3,40(r2)
    edf8:	e0bff717 	ldw	r2,-36(fp)
    edfc:	18800726 	beq	r3,r2,ee1c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ee00:	e0bffe17 	ldw	r2,-8(fp)
    ee04:	00bfb716 	blt	zero,r2,ece4 <__alt_data_end+0xfffc5904>
    ee08:	00000506 	br	ee20 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    ee0c:	0001883a 	nop
    ee10:	00000306 	br	ee20 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    ee14:	0001883a 	nop
    ee18:	00000106 	br	ee20 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    ee1c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    ee20:	e0fff517 	ldw	r3,-44(fp)
    ee24:	e0bffd17 	ldw	r2,-12(fp)
    ee28:	18801826 	beq	r3,r2,ee8c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ee2c:	0005303a 	rdctl	r2,status
    ee30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ee34:	e0fffb17 	ldw	r3,-20(fp)
    ee38:	00bfff84 	movi	r2,-2
    ee3c:	1884703a 	and	r2,r3,r2
    ee40:	1001703a 	wrctl	status,r2
  
  return context;
    ee44:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    ee48:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ee4c:	e0bffc17 	ldw	r2,-16(fp)
    ee50:	10800817 	ldw	r2,32(r2)
    ee54:	10c00054 	ori	r3,r2,1
    ee58:	e0bffc17 	ldw	r2,-16(fp)
    ee5c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ee60:	e0bffc17 	ldw	r2,-16(fp)
    ee64:	10800017 	ldw	r2,0(r2)
    ee68:	10800104 	addi	r2,r2,4
    ee6c:	1007883a 	mov	r3,r2
    ee70:	e0bffc17 	ldw	r2,-16(fp)
    ee74:	10800817 	ldw	r2,32(r2)
    ee78:	18800035 	stwio	r2,0(r3)
    ee7c:	e0bffa17 	ldw	r2,-24(fp)
    ee80:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ee84:	e0bff917 	ldw	r2,-28(fp)
    ee88:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    ee8c:	e0fff517 	ldw	r3,-44(fp)
    ee90:	e0bffd17 	ldw	r2,-12(fp)
    ee94:	18800426 	beq	r3,r2,eea8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    ee98:	e0fff517 	ldw	r3,-44(fp)
    ee9c:	e0bffd17 	ldw	r2,-12(fp)
    eea0:	1885c83a 	sub	r2,r3,r2
    eea4:	00000606 	br	eec0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    eea8:	e0bfff17 	ldw	r2,-4(fp)
    eeac:	1090000c 	andi	r2,r2,16384
    eeb0:	10000226 	beq	r2,zero,eebc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    eeb4:	00bffd44 	movi	r2,-11
    eeb8:	00000106 	br	eec0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    eebc:	00bffec4 	movi	r2,-5
}
    eec0:	e037883a 	mov	sp,fp
    eec4:	dfc00117 	ldw	ra,4(sp)
    eec8:	df000017 	ldw	fp,0(sp)
    eecc:	dec00204 	addi	sp,sp,8
    eed0:	f800283a 	ret

0000eed4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    eed4:	defff304 	addi	sp,sp,-52
    eed8:	dfc00c15 	stw	ra,48(sp)
    eedc:	df000b15 	stw	fp,44(sp)
    eee0:	df000b04 	addi	fp,sp,44
    eee4:	e13ffc15 	stw	r4,-16(fp)
    eee8:	e17ffd15 	stw	r5,-12(fp)
    eeec:	e1bffe15 	stw	r6,-8(fp)
    eef0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    eef4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    eef8:	e0bffd17 	ldw	r2,-12(fp)
    eefc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    ef00:	00003706 	br	efe0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    ef04:	e0bffc17 	ldw	r2,-16(fp)
    ef08:	10800c17 	ldw	r2,48(r2)
    ef0c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    ef10:	e0bffc17 	ldw	r2,-16(fp)
    ef14:	10800d17 	ldw	r2,52(r2)
    ef18:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    ef1c:	e0fff917 	ldw	r3,-28(fp)
    ef20:	e0bff517 	ldw	r2,-44(fp)
    ef24:	1880062e 	bgeu	r3,r2,ef40 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    ef28:	e0fff517 	ldw	r3,-44(fp)
    ef2c:	e0bff917 	ldw	r2,-28(fp)
    ef30:	1885c83a 	sub	r2,r3,r2
    ef34:	10bfffc4 	addi	r2,r2,-1
    ef38:	e0bff615 	stw	r2,-40(fp)
    ef3c:	00000b06 	br	ef6c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    ef40:	e0bff517 	ldw	r2,-44(fp)
    ef44:	10000526 	beq	r2,zero,ef5c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    ef48:	00c20004 	movi	r3,2048
    ef4c:	e0bff917 	ldw	r2,-28(fp)
    ef50:	1885c83a 	sub	r2,r3,r2
    ef54:	e0bff615 	stw	r2,-40(fp)
    ef58:	00000406 	br	ef6c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    ef5c:	00c1ffc4 	movi	r3,2047
    ef60:	e0bff917 	ldw	r2,-28(fp)
    ef64:	1885c83a 	sub	r2,r3,r2
    ef68:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    ef6c:	e0bff617 	ldw	r2,-40(fp)
    ef70:	10001e26 	beq	r2,zero,efec <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    ef74:	e0fffe17 	ldw	r3,-8(fp)
    ef78:	e0bff617 	ldw	r2,-40(fp)
    ef7c:	1880022e 	bgeu	r3,r2,ef88 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    ef80:	e0bffe17 	ldw	r2,-8(fp)
    ef84:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    ef88:	e0bffc17 	ldw	r2,-16(fp)
    ef8c:	10c20e04 	addi	r3,r2,2104
    ef90:	e0bff917 	ldw	r2,-28(fp)
    ef94:	1885883a 	add	r2,r3,r2
    ef98:	e1bff617 	ldw	r6,-40(fp)
    ef9c:	e17ffd17 	ldw	r5,-12(fp)
    efa0:	1009883a 	mov	r4,r2
    efa4:	00061cc0 	call	61cc <memcpy>
      ptr   += n;
    efa8:	e0fffd17 	ldw	r3,-12(fp)
    efac:	e0bff617 	ldw	r2,-40(fp)
    efb0:	1885883a 	add	r2,r3,r2
    efb4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    efb8:	e0fffe17 	ldw	r3,-8(fp)
    efbc:	e0bff617 	ldw	r2,-40(fp)
    efc0:	1885c83a 	sub	r2,r3,r2
    efc4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    efc8:	e0fff917 	ldw	r3,-28(fp)
    efcc:	e0bff617 	ldw	r2,-40(fp)
    efd0:	1885883a 	add	r2,r3,r2
    efd4:	10c1ffcc 	andi	r3,r2,2047
    efd8:	e0bffc17 	ldw	r2,-16(fp)
    efdc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    efe0:	e0bffe17 	ldw	r2,-8(fp)
    efe4:	00bfc716 	blt	zero,r2,ef04 <__alt_data_end+0xfffc5b24>
    efe8:	00000106 	br	eff0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    efec:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eff0:	0005303a 	rdctl	r2,status
    eff4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eff8:	e0fffb17 	ldw	r3,-20(fp)
    effc:	00bfff84 	movi	r2,-2
    f000:	1884703a 	and	r2,r3,r2
    f004:	1001703a 	wrctl	status,r2
  
  return context;
    f008:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    f00c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f010:	e0bffc17 	ldw	r2,-16(fp)
    f014:	10800817 	ldw	r2,32(r2)
    f018:	10c00094 	ori	r3,r2,2
    f01c:	e0bffc17 	ldw	r2,-16(fp)
    f020:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f024:	e0bffc17 	ldw	r2,-16(fp)
    f028:	10800017 	ldw	r2,0(r2)
    f02c:	10800104 	addi	r2,r2,4
    f030:	1007883a 	mov	r3,r2
    f034:	e0bffc17 	ldw	r2,-16(fp)
    f038:	10800817 	ldw	r2,32(r2)
    f03c:	18800035 	stwio	r2,0(r3)
    f040:	e0bffa17 	ldw	r2,-24(fp)
    f044:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f048:	e0bff817 	ldw	r2,-32(fp)
    f04c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    f050:	e0bffe17 	ldw	r2,-8(fp)
    f054:	0080100e 	bge	zero,r2,f098 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    f058:	e0bfff17 	ldw	r2,-4(fp)
    f05c:	1090000c 	andi	r2,r2,16384
    f060:	1000101e 	bne	r2,zero,f0a4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f064:	0001883a 	nop
    f068:	e0bffc17 	ldw	r2,-16(fp)
    f06c:	10c00d17 	ldw	r3,52(r2)
    f070:	e0bff517 	ldw	r2,-44(fp)
    f074:	1880051e 	bne	r3,r2,f08c <altera_avalon_jtag_uart_write+0x1b8>
    f078:	e0bffc17 	ldw	r2,-16(fp)
    f07c:	10c00917 	ldw	r3,36(r2)
    f080:	e0bffc17 	ldw	r2,-16(fp)
    f084:	10800117 	ldw	r2,4(r2)
    f088:	18bff736 	bltu	r3,r2,f068 <__alt_data_end+0xfffc5c88>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    f08c:	e0bffc17 	ldw	r2,-16(fp)
    f090:	10800917 	ldw	r2,36(r2)
    f094:	1000051e 	bne	r2,zero,f0ac <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    f098:	e0bffe17 	ldw	r2,-8(fp)
    f09c:	00bfd016 	blt	zero,r2,efe0 <__alt_data_end+0xfffc5c00>
    f0a0:	00000306 	br	f0b0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    f0a4:	0001883a 	nop
    f0a8:	00000106 	br	f0b0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    f0ac:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f0b0:	e0fffd17 	ldw	r3,-12(fp)
    f0b4:	e0bff717 	ldw	r2,-36(fp)
    f0b8:	18800426 	beq	r3,r2,f0cc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    f0bc:	e0fffd17 	ldw	r3,-12(fp)
    f0c0:	e0bff717 	ldw	r2,-36(fp)
    f0c4:	1885c83a 	sub	r2,r3,r2
    f0c8:	00000606 	br	f0e4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    f0cc:	e0bfff17 	ldw	r2,-4(fp)
    f0d0:	1090000c 	andi	r2,r2,16384
    f0d4:	10000226 	beq	r2,zero,f0e0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    f0d8:	00bffd44 	movi	r2,-11
    f0dc:	00000106 	br	f0e4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    f0e0:	00bffec4 	movi	r2,-5
}
    f0e4:	e037883a 	mov	sp,fp
    f0e8:	dfc00117 	ldw	ra,4(sp)
    f0ec:	df000017 	ldw	fp,0(sp)
    f0f0:	dec00204 	addi	sp,sp,8
    f0f4:	f800283a 	ret

0000f0f8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    f0f8:	defff504 	addi	sp,sp,-44
    f0fc:	df000a15 	stw	fp,40(sp)
    f100:	df000a04 	addi	fp,sp,40
    f104:	e13ffc15 	stw	r4,-16(fp)
    f108:	e17ffd15 	stw	r5,-12(fp)
    f10c:	e1bffe15 	stw	r6,-8(fp)
    f110:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    f114:	e03ff615 	stw	zero,-40(fp)
    f118:	00800074 	movhi	r2,1
    f11c:	108fc304 	addi	r2,r2,16140
    f120:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    f124:	10003f26 	beq	r2,zero,f224 <alt_alarm_start+0x12c>
  {
    if (alarm)
    f128:	e0bffc17 	ldw	r2,-16(fp)
    f12c:	10003b26 	beq	r2,zero,f21c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    f130:	e0bffc17 	ldw	r2,-16(fp)
    f134:	e0fffe17 	ldw	r3,-8(fp)
    f138:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    f13c:	e0bffc17 	ldw	r2,-16(fp)
    f140:	e0ffff17 	ldw	r3,-4(fp)
    f144:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f148:	0005303a 	rdctl	r2,status
    f14c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f150:	e0fff917 	ldw	r3,-28(fp)
    f154:	00bfff84 	movi	r2,-2
    f158:	1884703a 	and	r2,r3,r2
    f15c:	1001703a 	wrctl	status,r2
  
  return context;
    f160:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    f164:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    f168:	00800074 	movhi	r2,1
    f16c:	108fc404 	addi	r2,r2,16144
    f170:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    f174:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    f178:	e0fffd17 	ldw	r3,-12(fp)
    f17c:	e0bff617 	ldw	r2,-40(fp)
    f180:	1885883a 	add	r2,r3,r2
    f184:	10c00044 	addi	r3,r2,1
    f188:	e0bffc17 	ldw	r2,-16(fp)
    f18c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    f190:	e0bffc17 	ldw	r2,-16(fp)
    f194:	10c00217 	ldw	r3,8(r2)
    f198:	e0bff617 	ldw	r2,-40(fp)
    f19c:	1880042e 	bgeu	r3,r2,f1b0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    f1a0:	e0bffc17 	ldw	r2,-16(fp)
    f1a4:	00c00044 	movi	r3,1
    f1a8:	10c00405 	stb	r3,16(r2)
    f1ac:	00000206 	br	f1b8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    f1b0:	e0bffc17 	ldw	r2,-16(fp)
    f1b4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    f1b8:	e0fffc17 	ldw	r3,-16(fp)
    f1bc:	00800074 	movhi	r2,1
    f1c0:	1088fb04 	addi	r2,r2,9196
    f1c4:	e0bffa15 	stw	r2,-24(fp)
    f1c8:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f1cc:	e0bffb17 	ldw	r2,-20(fp)
    f1d0:	e0fffa17 	ldw	r3,-24(fp)
    f1d4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    f1d8:	e0bffa17 	ldw	r2,-24(fp)
    f1dc:	10c00017 	ldw	r3,0(r2)
    f1e0:	e0bffb17 	ldw	r2,-20(fp)
    f1e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    f1e8:	e0bffa17 	ldw	r2,-24(fp)
    f1ec:	10800017 	ldw	r2,0(r2)
    f1f0:	e0fffb17 	ldw	r3,-20(fp)
    f1f4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    f1f8:	e0bffa17 	ldw	r2,-24(fp)
    f1fc:	e0fffb17 	ldw	r3,-20(fp)
    f200:	10c00015 	stw	r3,0(r2)
    f204:	e0bff817 	ldw	r2,-32(fp)
    f208:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f20c:	e0bff717 	ldw	r2,-36(fp)
    f210:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    f214:	0005883a 	mov	r2,zero
    f218:	00000306 	br	f228 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    f21c:	00bffa84 	movi	r2,-22
    f220:	00000106 	br	f228 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    f224:	00bfde84 	movi	r2,-134
  }
}
    f228:	e037883a 	mov	sp,fp
    f22c:	df000017 	ldw	fp,0(sp)
    f230:	dec00104 	addi	sp,sp,4
    f234:	f800283a 	ret

0000f238 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    f238:	defffa04 	addi	sp,sp,-24
    f23c:	dfc00515 	stw	ra,20(sp)
    f240:	df000415 	stw	fp,16(sp)
    f244:	df000404 	addi	fp,sp,16
    f248:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    f24c:	00800244 	movi	r2,9
    f250:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    f254:	014003f4 	movhi	r5,15
    f258:	29509004 	addi	r5,r5,16960
    f25c:	e13ffd17 	ldw	r4,-12(fp)
    f260:	000adb40 	call	adb4 <__mulsi3>
    f264:	100b883a 	mov	r5,r2
    f268:	01017db4 	movhi	r4,1526
    f26c:	21384004 	addi	r4,r4,-7936
    f270:	000acf80 	call	acf8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f274:	100b883a 	mov	r5,r2
    f278:	01200034 	movhi	r4,32768
    f27c:	213fffc4 	addi	r4,r4,-1
    f280:	000acf80 	call	acf8 <__udivsi3>
    f284:	100b883a 	mov	r5,r2
    f288:	e13fff17 	ldw	r4,-4(fp)
    f28c:	000acf80 	call	acf8 <__udivsi3>
    f290:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    f294:	e0bffe17 	ldw	r2,-8(fp)
    f298:	10002a26 	beq	r2,zero,f344 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    f29c:	e03ffc15 	stw	zero,-16(fp)
    f2a0:	00001706 	br	f300 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f2a4:	00a00034 	movhi	r2,32768
    f2a8:	10bfffc4 	addi	r2,r2,-1
    f2ac:	10bfffc4 	addi	r2,r2,-1
    f2b0:	103ffe1e 	bne	r2,zero,f2ac <__alt_data_end+0xfffc5ecc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    f2b4:	014003f4 	movhi	r5,15
    f2b8:	29509004 	addi	r5,r5,16960
    f2bc:	e13ffd17 	ldw	r4,-12(fp)
    f2c0:	000adb40 	call	adb4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f2c4:	100b883a 	mov	r5,r2
    f2c8:	01017db4 	movhi	r4,1526
    f2cc:	21384004 	addi	r4,r4,-7936
    f2d0:	000acf80 	call	acf8 <__udivsi3>
    f2d4:	100b883a 	mov	r5,r2
    f2d8:	01200034 	movhi	r4,32768
    f2dc:	213fffc4 	addi	r4,r4,-1
    f2e0:	000acf80 	call	acf8 <__udivsi3>
    f2e4:	1007883a 	mov	r3,r2
    f2e8:	e0bfff17 	ldw	r2,-4(fp)
    f2ec:	10c5c83a 	sub	r2,r2,r3
    f2f0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    f2f4:	e0bffc17 	ldw	r2,-16(fp)
    f2f8:	10800044 	addi	r2,r2,1
    f2fc:	e0bffc15 	stw	r2,-16(fp)
    f300:	e0fffc17 	ldw	r3,-16(fp)
    f304:	e0bffe17 	ldw	r2,-8(fp)
    f308:	18bfe616 	blt	r3,r2,f2a4 <__alt_data_end+0xfffc5ec4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    f30c:	014003f4 	movhi	r5,15
    f310:	29509004 	addi	r5,r5,16960
    f314:	e13ffd17 	ldw	r4,-12(fp)
    f318:	000adb40 	call	adb4 <__mulsi3>
    f31c:	100b883a 	mov	r5,r2
    f320:	01017db4 	movhi	r4,1526
    f324:	21384004 	addi	r4,r4,-7936
    f328:	000acf80 	call	acf8 <__udivsi3>
    f32c:	e17fff17 	ldw	r5,-4(fp)
    f330:	1009883a 	mov	r4,r2
    f334:	000adb40 	call	adb4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f338:	10bfffc4 	addi	r2,r2,-1
    f33c:	103ffe1e 	bne	r2,zero,f338 <__alt_data_end+0xfffc5f58>
    f340:	00000d06 	br	f378 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    f344:	014003f4 	movhi	r5,15
    f348:	29509004 	addi	r5,r5,16960
    f34c:	e13ffd17 	ldw	r4,-12(fp)
    f350:	000adb40 	call	adb4 <__mulsi3>
    f354:	100b883a 	mov	r5,r2
    f358:	01017db4 	movhi	r4,1526
    f35c:	21384004 	addi	r4,r4,-7936
    f360:	000acf80 	call	acf8 <__udivsi3>
    f364:	e17fff17 	ldw	r5,-4(fp)
    f368:	1009883a 	mov	r4,r2
    f36c:	000adb40 	call	adb4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f370:	10bfffc4 	addi	r2,r2,-1
    f374:	00bffe16 	blt	zero,r2,f370 <__alt_data_end+0xfffc5f90>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    f378:	0005883a 	mov	r2,zero
}
    f37c:	e037883a 	mov	sp,fp
    f380:	dfc00117 	ldw	ra,4(sp)
    f384:	df000017 	ldw	fp,0(sp)
    f388:	dec00204 	addi	sp,sp,8
    f38c:	f800283a 	ret

0000f390 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    f390:	deffff04 	addi	sp,sp,-4
    f394:	df000015 	stw	fp,0(sp)
    f398:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    f39c:	0001883a 	nop
    f3a0:	e037883a 	mov	sp,fp
    f3a4:	df000017 	ldw	fp,0(sp)
    f3a8:	dec00104 	addi	sp,sp,4
    f3ac:	f800283a 	ret

0000f3b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f3b0:	defffe04 	addi	sp,sp,-8
    f3b4:	dfc00115 	stw	ra,4(sp)
    f3b8:	df000015 	stw	fp,0(sp)
    f3bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f3c0:	00800074 	movhi	r2,1
    f3c4:	1088f804 	addi	r2,r2,9184
    f3c8:	10800017 	ldw	r2,0(r2)
    f3cc:	10000526 	beq	r2,zero,f3e4 <alt_get_errno+0x34>
    f3d0:	00800074 	movhi	r2,1
    f3d4:	1088f804 	addi	r2,r2,9184
    f3d8:	10800017 	ldw	r2,0(r2)
    f3dc:	103ee83a 	callr	r2
    f3e0:	00000206 	br	f3ec <alt_get_errno+0x3c>
    f3e4:	00800074 	movhi	r2,1
    f3e8:	108fbe04 	addi	r2,r2,16120
}
    f3ec:	e037883a 	mov	sp,fp
    f3f0:	dfc00117 	ldw	ra,4(sp)
    f3f4:	df000017 	ldw	fp,0(sp)
    f3f8:	dec00204 	addi	sp,sp,8
    f3fc:	f800283a 	ret

0000f400 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    f400:	defffa04 	addi	sp,sp,-24
    f404:	dfc00515 	stw	ra,20(sp)
    f408:	df000415 	stw	fp,16(sp)
    f40c:	df000404 	addi	fp,sp,16
    f410:	e13ffe15 	stw	r4,-8(fp)
    f414:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    f418:	e0bffe17 	ldw	r2,-8(fp)
    f41c:	10000326 	beq	r2,zero,f42c <alt_dev_llist_insert+0x2c>
    f420:	e0bffe17 	ldw	r2,-8(fp)
    f424:	10800217 	ldw	r2,8(r2)
    f428:	1000061e 	bne	r2,zero,f444 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    f42c:	000f3b00 	call	f3b0 <alt_get_errno>
    f430:	1007883a 	mov	r3,r2
    f434:	00800584 	movi	r2,22
    f438:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    f43c:	00bffa84 	movi	r2,-22
    f440:	00001306 	br	f490 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    f444:	e0bffe17 	ldw	r2,-8(fp)
    f448:	e0ffff17 	ldw	r3,-4(fp)
    f44c:	e0fffc15 	stw	r3,-16(fp)
    f450:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f454:	e0bffd17 	ldw	r2,-12(fp)
    f458:	e0fffc17 	ldw	r3,-16(fp)
    f45c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    f460:	e0bffc17 	ldw	r2,-16(fp)
    f464:	10c00017 	ldw	r3,0(r2)
    f468:	e0bffd17 	ldw	r2,-12(fp)
    f46c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    f470:	e0bffc17 	ldw	r2,-16(fp)
    f474:	10800017 	ldw	r2,0(r2)
    f478:	e0fffd17 	ldw	r3,-12(fp)
    f47c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    f480:	e0bffc17 	ldw	r2,-16(fp)
    f484:	e0fffd17 	ldw	r3,-12(fp)
    f488:	10c00015 	stw	r3,0(r2)

  return 0;  
    f48c:	0005883a 	mov	r2,zero
}
    f490:	e037883a 	mov	sp,fp
    f494:	dfc00117 	ldw	ra,4(sp)
    f498:	df000017 	ldw	fp,0(sp)
    f49c:	dec00204 	addi	sp,sp,8
    f4a0:	f800283a 	ret

0000f4a4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f4a4:	defffd04 	addi	sp,sp,-12
    f4a8:	dfc00215 	stw	ra,8(sp)
    f4ac:	df000115 	stw	fp,4(sp)
    f4b0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f4b4:	00800074 	movhi	r2,1
    f4b8:	10813104 	addi	r2,r2,1220
    f4bc:	e0bfff15 	stw	r2,-4(fp)
    f4c0:	00000606 	br	f4dc <_do_ctors+0x38>
        (*ctor) (); 
    f4c4:	e0bfff17 	ldw	r2,-4(fp)
    f4c8:	10800017 	ldw	r2,0(r2)
    f4cc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f4d0:	e0bfff17 	ldw	r2,-4(fp)
    f4d4:	10bfff04 	addi	r2,r2,-4
    f4d8:	e0bfff15 	stw	r2,-4(fp)
    f4dc:	e0ffff17 	ldw	r3,-4(fp)
    f4e0:	00800074 	movhi	r2,1
    f4e4:	10813204 	addi	r2,r2,1224
    f4e8:	18bff62e 	bgeu	r3,r2,f4c4 <__alt_data_end+0xfffc60e4>
        (*ctor) (); 
}
    f4ec:	0001883a 	nop
    f4f0:	e037883a 	mov	sp,fp
    f4f4:	dfc00117 	ldw	ra,4(sp)
    f4f8:	df000017 	ldw	fp,0(sp)
    f4fc:	dec00204 	addi	sp,sp,8
    f500:	f800283a 	ret

0000f504 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f504:	defffd04 	addi	sp,sp,-12
    f508:	dfc00215 	stw	ra,8(sp)
    f50c:	df000115 	stw	fp,4(sp)
    f510:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f514:	00800074 	movhi	r2,1
    f518:	10813104 	addi	r2,r2,1220
    f51c:	e0bfff15 	stw	r2,-4(fp)
    f520:	00000606 	br	f53c <_do_dtors+0x38>
        (*dtor) (); 
    f524:	e0bfff17 	ldw	r2,-4(fp)
    f528:	10800017 	ldw	r2,0(r2)
    f52c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f530:	e0bfff17 	ldw	r2,-4(fp)
    f534:	10bfff04 	addi	r2,r2,-4
    f538:	e0bfff15 	stw	r2,-4(fp)
    f53c:	e0ffff17 	ldw	r3,-4(fp)
    f540:	00800074 	movhi	r2,1
    f544:	10813204 	addi	r2,r2,1224
    f548:	18bff62e 	bgeu	r3,r2,f524 <__alt_data_end+0xfffc6144>
        (*dtor) (); 
}
    f54c:	0001883a 	nop
    f550:	e037883a 	mov	sp,fp
    f554:	dfc00117 	ldw	ra,4(sp)
    f558:	df000017 	ldw	fp,0(sp)
    f55c:	dec00204 	addi	sp,sp,8
    f560:	f800283a 	ret

0000f564 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    f564:	deffff04 	addi	sp,sp,-4
    f568:	df000015 	stw	fp,0(sp)
    f56c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    f570:	0001883a 	nop
    f574:	e037883a 	mov	sp,fp
    f578:	df000017 	ldw	fp,0(sp)
    f57c:	dec00104 	addi	sp,sp,4
    f580:	f800283a 	ret

0000f584 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    f584:	defff904 	addi	sp,sp,-28
    f588:	dfc00615 	stw	ra,24(sp)
    f58c:	df000515 	stw	fp,20(sp)
    f590:	df000504 	addi	fp,sp,20
    f594:	e13ffc15 	stw	r4,-16(fp)
    f598:	e17ffd15 	stw	r5,-12(fp)
    f59c:	e1bffe15 	stw	r6,-8(fp)
    f5a0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    f5a4:	e0800217 	ldw	r2,8(fp)
    f5a8:	d8800015 	stw	r2,0(sp)
    f5ac:	e1ffff17 	ldw	r7,-4(fp)
    f5b0:	e1bffe17 	ldw	r6,-8(fp)
    f5b4:	e17ffd17 	ldw	r5,-12(fp)
    f5b8:	e13ffc17 	ldw	r4,-16(fp)
    f5bc:	000f7640 	call	f764 <alt_iic_isr_register>
}  
    f5c0:	e037883a 	mov	sp,fp
    f5c4:	dfc00117 	ldw	ra,4(sp)
    f5c8:	df000017 	ldw	fp,0(sp)
    f5cc:	dec00204 	addi	sp,sp,8
    f5d0:	f800283a 	ret

0000f5d4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    f5d4:	defff904 	addi	sp,sp,-28
    f5d8:	df000615 	stw	fp,24(sp)
    f5dc:	df000604 	addi	fp,sp,24
    f5e0:	e13ffe15 	stw	r4,-8(fp)
    f5e4:	e17fff15 	stw	r5,-4(fp)
    f5e8:	e0bfff17 	ldw	r2,-4(fp)
    f5ec:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f5f0:	0005303a 	rdctl	r2,status
    f5f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f5f8:	e0fffb17 	ldw	r3,-20(fp)
    f5fc:	00bfff84 	movi	r2,-2
    f600:	1884703a 	and	r2,r3,r2
    f604:	1001703a 	wrctl	status,r2
  
  return context;
    f608:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    f60c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    f610:	00c00044 	movi	r3,1
    f614:	e0bffa17 	ldw	r2,-24(fp)
    f618:	1884983a 	sll	r2,r3,r2
    f61c:	1007883a 	mov	r3,r2
    f620:	00800074 	movhi	r2,1
    f624:	108fc204 	addi	r2,r2,16136
    f628:	10800017 	ldw	r2,0(r2)
    f62c:	1886b03a 	or	r3,r3,r2
    f630:	00800074 	movhi	r2,1
    f634:	108fc204 	addi	r2,r2,16136
    f638:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f63c:	00800074 	movhi	r2,1
    f640:	108fc204 	addi	r2,r2,16136
    f644:	10800017 	ldw	r2,0(r2)
    f648:	100170fa 	wrctl	ienable,r2
    f64c:	e0bffc17 	ldw	r2,-16(fp)
    f650:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f654:	e0bffd17 	ldw	r2,-12(fp)
    f658:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    f65c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    f660:	0001883a 	nop
}
    f664:	e037883a 	mov	sp,fp
    f668:	df000017 	ldw	fp,0(sp)
    f66c:	dec00104 	addi	sp,sp,4
    f670:	f800283a 	ret

0000f674 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    f674:	defff904 	addi	sp,sp,-28
    f678:	df000615 	stw	fp,24(sp)
    f67c:	df000604 	addi	fp,sp,24
    f680:	e13ffe15 	stw	r4,-8(fp)
    f684:	e17fff15 	stw	r5,-4(fp)
    f688:	e0bfff17 	ldw	r2,-4(fp)
    f68c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f690:	0005303a 	rdctl	r2,status
    f694:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f698:	e0fffb17 	ldw	r3,-20(fp)
    f69c:	00bfff84 	movi	r2,-2
    f6a0:	1884703a 	and	r2,r3,r2
    f6a4:	1001703a 	wrctl	status,r2
  
  return context;
    f6a8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    f6ac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    f6b0:	00c00044 	movi	r3,1
    f6b4:	e0bffa17 	ldw	r2,-24(fp)
    f6b8:	1884983a 	sll	r2,r3,r2
    f6bc:	0084303a 	nor	r2,zero,r2
    f6c0:	1007883a 	mov	r3,r2
    f6c4:	00800074 	movhi	r2,1
    f6c8:	108fc204 	addi	r2,r2,16136
    f6cc:	10800017 	ldw	r2,0(r2)
    f6d0:	1886703a 	and	r3,r3,r2
    f6d4:	00800074 	movhi	r2,1
    f6d8:	108fc204 	addi	r2,r2,16136
    f6dc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f6e0:	00800074 	movhi	r2,1
    f6e4:	108fc204 	addi	r2,r2,16136
    f6e8:	10800017 	ldw	r2,0(r2)
    f6ec:	100170fa 	wrctl	ienable,r2
    f6f0:	e0bffc17 	ldw	r2,-16(fp)
    f6f4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f6f8:	e0bffd17 	ldw	r2,-12(fp)
    f6fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    f700:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    f704:	0001883a 	nop
}
    f708:	e037883a 	mov	sp,fp
    f70c:	df000017 	ldw	fp,0(sp)
    f710:	dec00104 	addi	sp,sp,4
    f714:	f800283a 	ret

0000f718 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    f718:	defffc04 	addi	sp,sp,-16
    f71c:	df000315 	stw	fp,12(sp)
    f720:	df000304 	addi	fp,sp,12
    f724:	e13ffe15 	stw	r4,-8(fp)
    f728:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    f72c:	000530fa 	rdctl	r2,ienable
    f730:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    f734:	00c00044 	movi	r3,1
    f738:	e0bfff17 	ldw	r2,-4(fp)
    f73c:	1884983a 	sll	r2,r3,r2
    f740:	1007883a 	mov	r3,r2
    f744:	e0bffd17 	ldw	r2,-12(fp)
    f748:	1884703a 	and	r2,r3,r2
    f74c:	1004c03a 	cmpne	r2,r2,zero
    f750:	10803fcc 	andi	r2,r2,255
}
    f754:	e037883a 	mov	sp,fp
    f758:	df000017 	ldw	fp,0(sp)
    f75c:	dec00104 	addi	sp,sp,4
    f760:	f800283a 	ret

0000f764 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    f764:	defff504 	addi	sp,sp,-44
    f768:	dfc00a15 	stw	ra,40(sp)
    f76c:	df000915 	stw	fp,36(sp)
    f770:	df000904 	addi	fp,sp,36
    f774:	e13ffc15 	stw	r4,-16(fp)
    f778:	e17ffd15 	stw	r5,-12(fp)
    f77c:	e1bffe15 	stw	r6,-8(fp)
    f780:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    f784:	00bffa84 	movi	r2,-22
    f788:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    f78c:	e0bffd17 	ldw	r2,-12(fp)
    f790:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    f794:	e0bff817 	ldw	r2,-32(fp)
    f798:	10800808 	cmpgei	r2,r2,32
    f79c:	1000271e 	bne	r2,zero,f83c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f7a0:	0005303a 	rdctl	r2,status
    f7a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f7a8:	e0fffb17 	ldw	r3,-20(fp)
    f7ac:	00bfff84 	movi	r2,-2
    f7b0:	1884703a 	and	r2,r3,r2
    f7b4:	1001703a 	wrctl	status,r2
  
  return context;
    f7b8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    f7bc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    f7c0:	00800074 	movhi	r2,1
    f7c4:	108fd004 	addi	r2,r2,16192
    f7c8:	e0fff817 	ldw	r3,-32(fp)
    f7cc:	180690fa 	slli	r3,r3,3
    f7d0:	10c5883a 	add	r2,r2,r3
    f7d4:	e0fffe17 	ldw	r3,-8(fp)
    f7d8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    f7dc:	00800074 	movhi	r2,1
    f7e0:	108fd004 	addi	r2,r2,16192
    f7e4:	e0fff817 	ldw	r3,-32(fp)
    f7e8:	180690fa 	slli	r3,r3,3
    f7ec:	10c5883a 	add	r2,r2,r3
    f7f0:	10800104 	addi	r2,r2,4
    f7f4:	e0ffff17 	ldw	r3,-4(fp)
    f7f8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    f7fc:	e0bffe17 	ldw	r2,-8(fp)
    f800:	10000526 	beq	r2,zero,f818 <alt_iic_isr_register+0xb4>
    f804:	e0bff817 	ldw	r2,-32(fp)
    f808:	100b883a 	mov	r5,r2
    f80c:	e13ffc17 	ldw	r4,-16(fp)
    f810:	000f5d40 	call	f5d4 <alt_ic_irq_enable>
    f814:	00000406 	br	f828 <alt_iic_isr_register+0xc4>
    f818:	e0bff817 	ldw	r2,-32(fp)
    f81c:	100b883a 	mov	r5,r2
    f820:	e13ffc17 	ldw	r4,-16(fp)
    f824:	000f6740 	call	f674 <alt_ic_irq_disable>
    f828:	e0bff715 	stw	r2,-36(fp)
    f82c:	e0bffa17 	ldw	r2,-24(fp)
    f830:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f834:	e0bff917 	ldw	r2,-28(fp)
    f838:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    f83c:	e0bff717 	ldw	r2,-36(fp)
}
    f840:	e037883a 	mov	sp,fp
    f844:	dfc00117 	ldw	ra,4(sp)
    f848:	df000017 	ldw	fp,0(sp)
    f84c:	dec00204 	addi	sp,sp,8
    f850:	f800283a 	ret

0000f854 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    f854:	defff804 	addi	sp,sp,-32
    f858:	dfc00715 	stw	ra,28(sp)
    f85c:	df000615 	stw	fp,24(sp)
    f860:	dc000515 	stw	r16,20(sp)
    f864:	df000604 	addi	fp,sp,24
    f868:	e13ffb15 	stw	r4,-20(fp)
    f86c:	e17ffc15 	stw	r5,-16(fp)
    f870:	e1bffd15 	stw	r6,-12(fp)
    f874:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    f878:	e1bffe17 	ldw	r6,-8(fp)
    f87c:	e17ffd17 	ldw	r5,-12(fp)
    f880:	e13ffc17 	ldw	r4,-16(fp)
    f884:	000faf80 	call	faf8 <open>
    f888:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    f88c:	e0bffa17 	ldw	r2,-24(fp)
    f890:	10002216 	blt	r2,zero,f91c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    f894:	04000074 	movhi	r16,1
    f898:	84047504 	addi	r16,r16,4564
    f89c:	e0bffa17 	ldw	r2,-24(fp)
    f8a0:	01400304 	movi	r5,12
    f8a4:	1009883a 	mov	r4,r2
    f8a8:	000adb40 	call	adb4 <__mulsi3>
    f8ac:	8085883a 	add	r2,r16,r2
    f8b0:	10c00017 	ldw	r3,0(r2)
    f8b4:	e0bffb17 	ldw	r2,-20(fp)
    f8b8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    f8bc:	04000074 	movhi	r16,1
    f8c0:	84047504 	addi	r16,r16,4564
    f8c4:	e0bffa17 	ldw	r2,-24(fp)
    f8c8:	01400304 	movi	r5,12
    f8cc:	1009883a 	mov	r4,r2
    f8d0:	000adb40 	call	adb4 <__mulsi3>
    f8d4:	8085883a 	add	r2,r16,r2
    f8d8:	10800104 	addi	r2,r2,4
    f8dc:	10c00017 	ldw	r3,0(r2)
    f8e0:	e0bffb17 	ldw	r2,-20(fp)
    f8e4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f8e8:	04000074 	movhi	r16,1
    f8ec:	84047504 	addi	r16,r16,4564
    f8f0:	e0bffa17 	ldw	r2,-24(fp)
    f8f4:	01400304 	movi	r5,12
    f8f8:	1009883a 	mov	r4,r2
    f8fc:	000adb40 	call	adb4 <__mulsi3>
    f900:	8085883a 	add	r2,r16,r2
    f904:	10800204 	addi	r2,r2,8
    f908:	10c00017 	ldw	r3,0(r2)
    f90c:	e0bffb17 	ldw	r2,-20(fp)
    f910:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    f914:	e13ffa17 	ldw	r4,-24(fp)
    f918:	000de080 	call	de08 <alt_release_fd>
  }
} 
    f91c:	0001883a 	nop
    f920:	e6ffff04 	addi	sp,fp,-4
    f924:	dfc00217 	ldw	ra,8(sp)
    f928:	df000117 	ldw	fp,4(sp)
    f92c:	dc000017 	ldw	r16,0(sp)
    f930:	dec00304 	addi	sp,sp,12
    f934:	f800283a 	ret

0000f938 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f938:	defffb04 	addi	sp,sp,-20
    f93c:	dfc00415 	stw	ra,16(sp)
    f940:	df000315 	stw	fp,12(sp)
    f944:	df000304 	addi	fp,sp,12
    f948:	e13ffd15 	stw	r4,-12(fp)
    f94c:	e17ffe15 	stw	r5,-8(fp)
    f950:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    f954:	01c07fc4 	movi	r7,511
    f958:	01800044 	movi	r6,1
    f95c:	e17ffd17 	ldw	r5,-12(fp)
    f960:	01000074 	movhi	r4,1
    f964:	21047804 	addi	r4,r4,4576
    f968:	000f8540 	call	f854 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    f96c:	01c07fc4 	movi	r7,511
    f970:	000d883a 	mov	r6,zero
    f974:	e17ffe17 	ldw	r5,-8(fp)
    f978:	01000074 	movhi	r4,1
    f97c:	21047504 	addi	r4,r4,4564
    f980:	000f8540 	call	f854 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    f984:	01c07fc4 	movi	r7,511
    f988:	01800044 	movi	r6,1
    f98c:	e17fff17 	ldw	r5,-4(fp)
    f990:	01000074 	movhi	r4,1
    f994:	21047b04 	addi	r4,r4,4588
    f998:	000f8540 	call	f854 <alt_open_fd>
}  
    f99c:	0001883a 	nop
    f9a0:	e037883a 	mov	sp,fp
    f9a4:	dfc00117 	ldw	ra,4(sp)
    f9a8:	df000017 	ldw	fp,0(sp)
    f9ac:	dec00204 	addi	sp,sp,8
    f9b0:	f800283a 	ret

0000f9b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f9b4:	defffe04 	addi	sp,sp,-8
    f9b8:	dfc00115 	stw	ra,4(sp)
    f9bc:	df000015 	stw	fp,0(sp)
    f9c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f9c4:	00800074 	movhi	r2,1
    f9c8:	1088f804 	addi	r2,r2,9184
    f9cc:	10800017 	ldw	r2,0(r2)
    f9d0:	10000526 	beq	r2,zero,f9e8 <alt_get_errno+0x34>
    f9d4:	00800074 	movhi	r2,1
    f9d8:	1088f804 	addi	r2,r2,9184
    f9dc:	10800017 	ldw	r2,0(r2)
    f9e0:	103ee83a 	callr	r2
    f9e4:	00000206 	br	f9f0 <alt_get_errno+0x3c>
    f9e8:	00800074 	movhi	r2,1
    f9ec:	108fbe04 	addi	r2,r2,16120
}
    f9f0:	e037883a 	mov	sp,fp
    f9f4:	dfc00117 	ldw	ra,4(sp)
    f9f8:	df000017 	ldw	fp,0(sp)
    f9fc:	dec00204 	addi	sp,sp,8
    fa00:	f800283a 	ret

0000fa04 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    fa04:	defffb04 	addi	sp,sp,-20
    fa08:	dfc00415 	stw	ra,16(sp)
    fa0c:	df000315 	stw	fp,12(sp)
    fa10:	dc000215 	stw	r16,8(sp)
    fa14:	df000304 	addi	fp,sp,12
    fa18:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    fa1c:	e0bffe17 	ldw	r2,-8(fp)
    fa20:	10800217 	ldw	r2,8(r2)
    fa24:	10d00034 	orhi	r3,r2,16384
    fa28:	e0bffe17 	ldw	r2,-8(fp)
    fa2c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    fa30:	e03ffd15 	stw	zero,-12(fp)
    fa34:	00002306 	br	fac4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    fa38:	04000074 	movhi	r16,1
    fa3c:	84047504 	addi	r16,r16,4564
    fa40:	e0bffd17 	ldw	r2,-12(fp)
    fa44:	01400304 	movi	r5,12
    fa48:	1009883a 	mov	r4,r2
    fa4c:	000adb40 	call	adb4 <__mulsi3>
    fa50:	8085883a 	add	r2,r16,r2
    fa54:	10c00017 	ldw	r3,0(r2)
    fa58:	e0bffe17 	ldw	r2,-8(fp)
    fa5c:	10800017 	ldw	r2,0(r2)
    fa60:	1880151e 	bne	r3,r2,fab8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    fa64:	04000074 	movhi	r16,1
    fa68:	84047504 	addi	r16,r16,4564
    fa6c:	e0bffd17 	ldw	r2,-12(fp)
    fa70:	01400304 	movi	r5,12
    fa74:	1009883a 	mov	r4,r2
    fa78:	000adb40 	call	adb4 <__mulsi3>
    fa7c:	8085883a 	add	r2,r16,r2
    fa80:	10800204 	addi	r2,r2,8
    fa84:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    fa88:	10000b0e 	bge	r2,zero,fab8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    fa8c:	01400304 	movi	r5,12
    fa90:	e13ffd17 	ldw	r4,-12(fp)
    fa94:	000adb40 	call	adb4 <__mulsi3>
    fa98:	1007883a 	mov	r3,r2
    fa9c:	00800074 	movhi	r2,1
    faa0:	10847504 	addi	r2,r2,4564
    faa4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    faa8:	e0bffe17 	ldw	r2,-8(fp)
    faac:	18800226 	beq	r3,r2,fab8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    fab0:	00bffcc4 	movi	r2,-13
    fab4:	00000a06 	br	fae0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    fab8:	e0bffd17 	ldw	r2,-12(fp)
    fabc:	10800044 	addi	r2,r2,1
    fac0:	e0bffd15 	stw	r2,-12(fp)
    fac4:	00800074 	movhi	r2,1
    fac8:	1088f704 	addi	r2,r2,9180
    facc:	10800017 	ldw	r2,0(r2)
    fad0:	1007883a 	mov	r3,r2
    fad4:	e0bffd17 	ldw	r2,-12(fp)
    fad8:	18bfd72e 	bgeu	r3,r2,fa38 <__alt_data_end+0xfffc6658>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    fadc:	0005883a 	mov	r2,zero
}
    fae0:	e6ffff04 	addi	sp,fp,-4
    fae4:	dfc00217 	ldw	ra,8(sp)
    fae8:	df000117 	ldw	fp,4(sp)
    faec:	dc000017 	ldw	r16,0(sp)
    faf0:	dec00304 	addi	sp,sp,12
    faf4:	f800283a 	ret

0000faf8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    faf8:	defff604 	addi	sp,sp,-40
    fafc:	dfc00915 	stw	ra,36(sp)
    fb00:	df000815 	stw	fp,32(sp)
    fb04:	df000804 	addi	fp,sp,32
    fb08:	e13ffd15 	stw	r4,-12(fp)
    fb0c:	e17ffe15 	stw	r5,-8(fp)
    fb10:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    fb14:	00bfffc4 	movi	r2,-1
    fb18:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    fb1c:	00bffb44 	movi	r2,-19
    fb20:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    fb24:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    fb28:	01400074 	movhi	r5,1
    fb2c:	2948f504 	addi	r5,r5,9172
    fb30:	e13ffd17 	ldw	r4,-12(fp)
    fb34:	000fe200 	call	fe20 <alt_find_dev>
    fb38:	e0bff815 	stw	r2,-32(fp)
    fb3c:	e0bff817 	ldw	r2,-32(fp)
    fb40:	1000051e 	bne	r2,zero,fb58 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    fb44:	e13ffd17 	ldw	r4,-12(fp)
    fb48:	000feb00 	call	feb0 <alt_find_file>
    fb4c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    fb50:	00800044 	movi	r2,1
    fb54:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    fb58:	e0bff817 	ldw	r2,-32(fp)
    fb5c:	10002b26 	beq	r2,zero,fc0c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    fb60:	e13ff817 	ldw	r4,-32(fp)
    fb64:	000ffc40 	call	ffc4 <alt_get_fd>
    fb68:	e0bff915 	stw	r2,-28(fp)
    fb6c:	e0bff917 	ldw	r2,-28(fp)
    fb70:	1000030e 	bge	r2,zero,fb80 <open+0x88>
    {
      status = index;
    fb74:	e0bff917 	ldw	r2,-28(fp)
    fb78:	e0bffa15 	stw	r2,-24(fp)
    fb7c:	00002506 	br	fc14 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    fb80:	01400304 	movi	r5,12
    fb84:	e13ff917 	ldw	r4,-28(fp)
    fb88:	000adb40 	call	adb4 <__mulsi3>
    fb8c:	1007883a 	mov	r3,r2
    fb90:	00800074 	movhi	r2,1
    fb94:	10847504 	addi	r2,r2,4564
    fb98:	1885883a 	add	r2,r3,r2
    fb9c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    fba0:	e0fffe17 	ldw	r3,-8(fp)
    fba4:	00900034 	movhi	r2,16384
    fba8:	10bfffc4 	addi	r2,r2,-1
    fbac:	1886703a 	and	r3,r3,r2
    fbb0:	e0bffc17 	ldw	r2,-16(fp)
    fbb4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    fbb8:	e0bffb17 	ldw	r2,-20(fp)
    fbbc:	1000051e 	bne	r2,zero,fbd4 <open+0xdc>
    fbc0:	e13ffc17 	ldw	r4,-16(fp)
    fbc4:	000fa040 	call	fa04 <alt_file_locked>
    fbc8:	e0bffa15 	stw	r2,-24(fp)
    fbcc:	e0bffa17 	ldw	r2,-24(fp)
    fbd0:	10001016 	blt	r2,zero,fc14 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    fbd4:	e0bff817 	ldw	r2,-32(fp)
    fbd8:	10800317 	ldw	r2,12(r2)
    fbdc:	10000826 	beq	r2,zero,fc00 <open+0x108>
    fbe0:	e0bff817 	ldw	r2,-32(fp)
    fbe4:	10800317 	ldw	r2,12(r2)
    fbe8:	e1ffff17 	ldw	r7,-4(fp)
    fbec:	e1bffe17 	ldw	r6,-8(fp)
    fbf0:	e17ffd17 	ldw	r5,-12(fp)
    fbf4:	e13ffc17 	ldw	r4,-16(fp)
    fbf8:	103ee83a 	callr	r2
    fbfc:	00000106 	br	fc04 <open+0x10c>
    fc00:	0005883a 	mov	r2,zero
    fc04:	e0bffa15 	stw	r2,-24(fp)
    fc08:	00000206 	br	fc14 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    fc0c:	00bffb44 	movi	r2,-19
    fc10:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    fc14:	e0bffa17 	ldw	r2,-24(fp)
    fc18:	1000090e 	bge	r2,zero,fc40 <open+0x148>
  {
    alt_release_fd (index);  
    fc1c:	e13ff917 	ldw	r4,-28(fp)
    fc20:	000de080 	call	de08 <alt_release_fd>
    ALT_ERRNO = -status;
    fc24:	000f9b40 	call	f9b4 <alt_get_errno>
    fc28:	1007883a 	mov	r3,r2
    fc2c:	e0bffa17 	ldw	r2,-24(fp)
    fc30:	0085c83a 	sub	r2,zero,r2
    fc34:	18800015 	stw	r2,0(r3)
    return -1;
    fc38:	00bfffc4 	movi	r2,-1
    fc3c:	00000106 	br	fc44 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    fc40:	e0bff917 	ldw	r2,-28(fp)
}
    fc44:	e037883a 	mov	sp,fp
    fc48:	dfc00117 	ldw	ra,4(sp)
    fc4c:	df000017 	ldw	fp,0(sp)
    fc50:	dec00204 	addi	sp,sp,8
    fc54:	f800283a 	ret

0000fc58 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    fc58:	defffa04 	addi	sp,sp,-24
    fc5c:	df000515 	stw	fp,20(sp)
    fc60:	df000504 	addi	fp,sp,20
    fc64:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fc68:	0005303a 	rdctl	r2,status
    fc6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fc70:	e0fffc17 	ldw	r3,-16(fp)
    fc74:	00bfff84 	movi	r2,-2
    fc78:	1884703a 	and	r2,r3,r2
    fc7c:	1001703a 	wrctl	status,r2
  
  return context;
    fc80:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    fc84:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    fc88:	e0bfff17 	ldw	r2,-4(fp)
    fc8c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    fc90:	e0bffd17 	ldw	r2,-12(fp)
    fc94:	10800017 	ldw	r2,0(r2)
    fc98:	e0fffd17 	ldw	r3,-12(fp)
    fc9c:	18c00117 	ldw	r3,4(r3)
    fca0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    fca4:	e0bffd17 	ldw	r2,-12(fp)
    fca8:	10800117 	ldw	r2,4(r2)
    fcac:	e0fffd17 	ldw	r3,-12(fp)
    fcb0:	18c00017 	ldw	r3,0(r3)
    fcb4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    fcb8:	e0bffd17 	ldw	r2,-12(fp)
    fcbc:	e0fffd17 	ldw	r3,-12(fp)
    fcc0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    fcc4:	e0bffd17 	ldw	r2,-12(fp)
    fcc8:	e0fffd17 	ldw	r3,-12(fp)
    fccc:	10c00015 	stw	r3,0(r2)
    fcd0:	e0bffb17 	ldw	r2,-20(fp)
    fcd4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fcd8:	e0bffe17 	ldw	r2,-8(fp)
    fcdc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    fce0:	0001883a 	nop
    fce4:	e037883a 	mov	sp,fp
    fce8:	df000017 	ldw	fp,0(sp)
    fcec:	dec00104 	addi	sp,sp,4
    fcf0:	f800283a 	ret

0000fcf4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    fcf4:	defffb04 	addi	sp,sp,-20
    fcf8:	dfc00415 	stw	ra,16(sp)
    fcfc:	df000315 	stw	fp,12(sp)
    fd00:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    fd04:	d0a00e17 	ldw	r2,-32712(gp)
    fd08:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    fd0c:	d0a6d717 	ldw	r2,-25764(gp)
    fd10:	10800044 	addi	r2,r2,1
    fd14:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    fd18:	00002e06 	br	fdd4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    fd1c:	e0bffd17 	ldw	r2,-12(fp)
    fd20:	10800017 	ldw	r2,0(r2)
    fd24:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    fd28:	e0bffd17 	ldw	r2,-12(fp)
    fd2c:	10800403 	ldbu	r2,16(r2)
    fd30:	10803fcc 	andi	r2,r2,255
    fd34:	10000426 	beq	r2,zero,fd48 <alt_tick+0x54>
    fd38:	d0a6d717 	ldw	r2,-25764(gp)
    fd3c:	1000021e 	bne	r2,zero,fd48 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    fd40:	e0bffd17 	ldw	r2,-12(fp)
    fd44:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    fd48:	e0bffd17 	ldw	r2,-12(fp)
    fd4c:	10800217 	ldw	r2,8(r2)
    fd50:	d0e6d717 	ldw	r3,-25764(gp)
    fd54:	18801d36 	bltu	r3,r2,fdcc <alt_tick+0xd8>
    fd58:	e0bffd17 	ldw	r2,-12(fp)
    fd5c:	10800403 	ldbu	r2,16(r2)
    fd60:	10803fcc 	andi	r2,r2,255
    fd64:	1000191e 	bne	r2,zero,fdcc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    fd68:	e0bffd17 	ldw	r2,-12(fp)
    fd6c:	10800317 	ldw	r2,12(r2)
    fd70:	e0fffd17 	ldw	r3,-12(fp)
    fd74:	18c00517 	ldw	r3,20(r3)
    fd78:	1809883a 	mov	r4,r3
    fd7c:	103ee83a 	callr	r2
    fd80:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    fd84:	e0bfff17 	ldw	r2,-4(fp)
    fd88:	1000031e 	bne	r2,zero,fd98 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    fd8c:	e13ffd17 	ldw	r4,-12(fp)
    fd90:	000fc580 	call	fc58 <alt_alarm_stop>
    fd94:	00000d06 	br	fdcc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    fd98:	e0bffd17 	ldw	r2,-12(fp)
    fd9c:	10c00217 	ldw	r3,8(r2)
    fda0:	e0bfff17 	ldw	r2,-4(fp)
    fda4:	1887883a 	add	r3,r3,r2
    fda8:	e0bffd17 	ldw	r2,-12(fp)
    fdac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    fdb0:	e0bffd17 	ldw	r2,-12(fp)
    fdb4:	10c00217 	ldw	r3,8(r2)
    fdb8:	d0a6d717 	ldw	r2,-25764(gp)
    fdbc:	1880032e 	bgeu	r3,r2,fdcc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    fdc0:	e0bffd17 	ldw	r2,-12(fp)
    fdc4:	00c00044 	movi	r3,1
    fdc8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    fdcc:	e0bffe17 	ldw	r2,-8(fp)
    fdd0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    fdd4:	e0fffd17 	ldw	r3,-12(fp)
    fdd8:	d0a00e04 	addi	r2,gp,-32712
    fddc:	18bfcf1e 	bne	r3,r2,fd1c <__alt_data_end+0xfffc693c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    fde0:	0001883a 	nop
}
    fde4:	0001883a 	nop
    fde8:	e037883a 	mov	sp,fp
    fdec:	dfc00117 	ldw	ra,4(sp)
    fdf0:	df000017 	ldw	fp,0(sp)
    fdf4:	dec00204 	addi	sp,sp,8
    fdf8:	f800283a 	ret

0000fdfc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    fdfc:	deffff04 	addi	sp,sp,-4
    fe00:	df000015 	stw	fp,0(sp)
    fe04:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    fe08:	000170fa 	wrctl	ienable,zero
}
    fe0c:	0001883a 	nop
    fe10:	e037883a 	mov	sp,fp
    fe14:	df000017 	ldw	fp,0(sp)
    fe18:	dec00104 	addi	sp,sp,4
    fe1c:	f800283a 	ret

0000fe20 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    fe20:	defffa04 	addi	sp,sp,-24
    fe24:	dfc00515 	stw	ra,20(sp)
    fe28:	df000415 	stw	fp,16(sp)
    fe2c:	df000404 	addi	fp,sp,16
    fe30:	e13ffe15 	stw	r4,-8(fp)
    fe34:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    fe38:	e0bfff17 	ldw	r2,-4(fp)
    fe3c:	10800017 	ldw	r2,0(r2)
    fe40:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    fe44:	e13ffe17 	ldw	r4,-8(fp)
    fe48:	00007180 	call	718 <strlen>
    fe4c:	10800044 	addi	r2,r2,1
    fe50:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    fe54:	00000d06 	br	fe8c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    fe58:	e0bffc17 	ldw	r2,-16(fp)
    fe5c:	10800217 	ldw	r2,8(r2)
    fe60:	e0fffd17 	ldw	r3,-12(fp)
    fe64:	180d883a 	mov	r6,r3
    fe68:	e17ffe17 	ldw	r5,-8(fp)
    fe6c:	1009883a 	mov	r4,r2
    fe70:	00101800 	call	10180 <memcmp>
    fe74:	1000021e 	bne	r2,zero,fe80 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    fe78:	e0bffc17 	ldw	r2,-16(fp)
    fe7c:	00000706 	br	fe9c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    fe80:	e0bffc17 	ldw	r2,-16(fp)
    fe84:	10800017 	ldw	r2,0(r2)
    fe88:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    fe8c:	e0fffc17 	ldw	r3,-16(fp)
    fe90:	e0bfff17 	ldw	r2,-4(fp)
    fe94:	18bff01e 	bne	r3,r2,fe58 <__alt_data_end+0xfffc6a78>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    fe98:	0005883a 	mov	r2,zero
}
    fe9c:	e037883a 	mov	sp,fp
    fea0:	dfc00117 	ldw	ra,4(sp)
    fea4:	df000017 	ldw	fp,0(sp)
    fea8:	dec00204 	addi	sp,sp,8
    feac:	f800283a 	ret

0000feb0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    feb0:	defffb04 	addi	sp,sp,-20
    feb4:	dfc00415 	stw	ra,16(sp)
    feb8:	df000315 	stw	fp,12(sp)
    febc:	df000304 	addi	fp,sp,12
    fec0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    fec4:	00800074 	movhi	r2,1
    fec8:	1088f304 	addi	r2,r2,9164
    fecc:	10800017 	ldw	r2,0(r2)
    fed0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    fed4:	00003106 	br	ff9c <alt_find_file+0xec>
  {
    len = strlen(next->name);
    fed8:	e0bffd17 	ldw	r2,-12(fp)
    fedc:	10800217 	ldw	r2,8(r2)
    fee0:	1009883a 	mov	r4,r2
    fee4:	00007180 	call	718 <strlen>
    fee8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    feec:	e0bffd17 	ldw	r2,-12(fp)
    fef0:	10c00217 	ldw	r3,8(r2)
    fef4:	e0bffe17 	ldw	r2,-8(fp)
    fef8:	10bfffc4 	addi	r2,r2,-1
    fefc:	1885883a 	add	r2,r3,r2
    ff00:	10800003 	ldbu	r2,0(r2)
    ff04:	10803fcc 	andi	r2,r2,255
    ff08:	1080201c 	xori	r2,r2,128
    ff0c:	10bfe004 	addi	r2,r2,-128
    ff10:	10800bd8 	cmpnei	r2,r2,47
    ff14:	1000031e 	bne	r2,zero,ff24 <alt_find_file+0x74>
    {
      len -= 1;
    ff18:	e0bffe17 	ldw	r2,-8(fp)
    ff1c:	10bfffc4 	addi	r2,r2,-1
    ff20:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ff24:	e0bffe17 	ldw	r2,-8(fp)
    ff28:	e0ffff17 	ldw	r3,-4(fp)
    ff2c:	1885883a 	add	r2,r3,r2
    ff30:	10800003 	ldbu	r2,0(r2)
    ff34:	10803fcc 	andi	r2,r2,255
    ff38:	1080201c 	xori	r2,r2,128
    ff3c:	10bfe004 	addi	r2,r2,-128
    ff40:	10800be0 	cmpeqi	r2,r2,47
    ff44:	1000081e 	bne	r2,zero,ff68 <alt_find_file+0xb8>
    ff48:	e0bffe17 	ldw	r2,-8(fp)
    ff4c:	e0ffff17 	ldw	r3,-4(fp)
    ff50:	1885883a 	add	r2,r3,r2
    ff54:	10800003 	ldbu	r2,0(r2)
    ff58:	10803fcc 	andi	r2,r2,255
    ff5c:	1080201c 	xori	r2,r2,128
    ff60:	10bfe004 	addi	r2,r2,-128
    ff64:	10000a1e 	bne	r2,zero,ff90 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    ff68:	e0bffd17 	ldw	r2,-12(fp)
    ff6c:	10800217 	ldw	r2,8(r2)
    ff70:	e0fffe17 	ldw	r3,-8(fp)
    ff74:	180d883a 	mov	r6,r3
    ff78:	e17fff17 	ldw	r5,-4(fp)
    ff7c:	1009883a 	mov	r4,r2
    ff80:	00101800 	call	10180 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ff84:	1000021e 	bne	r2,zero,ff90 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    ff88:	e0bffd17 	ldw	r2,-12(fp)
    ff8c:	00000806 	br	ffb0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    ff90:	e0bffd17 	ldw	r2,-12(fp)
    ff94:	10800017 	ldw	r2,0(r2)
    ff98:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ff9c:	e0fffd17 	ldw	r3,-12(fp)
    ffa0:	00800074 	movhi	r2,1
    ffa4:	1088f304 	addi	r2,r2,9164
    ffa8:	18bfcb1e 	bne	r3,r2,fed8 <__alt_data_end+0xfffc6af8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    ffac:	0005883a 	mov	r2,zero
}
    ffb0:	e037883a 	mov	sp,fp
    ffb4:	dfc00117 	ldw	ra,4(sp)
    ffb8:	df000017 	ldw	fp,0(sp)
    ffbc:	dec00204 	addi	sp,sp,8
    ffc0:	f800283a 	ret

0000ffc4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    ffc4:	defffa04 	addi	sp,sp,-24
    ffc8:	dfc00515 	stw	ra,20(sp)
    ffcc:	df000415 	stw	fp,16(sp)
    ffd0:	dc000315 	stw	r16,12(sp)
    ffd4:	df000404 	addi	fp,sp,16
    ffd8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    ffdc:	00bffa04 	movi	r2,-24
    ffe0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    ffe4:	e03ffc15 	stw	zero,-16(fp)
    ffe8:	00002106 	br	10070 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    ffec:	04000074 	movhi	r16,1
    fff0:	84047504 	addi	r16,r16,4564
    fff4:	e0bffc17 	ldw	r2,-16(fp)
    fff8:	01400304 	movi	r5,12
    fffc:	1009883a 	mov	r4,r2
   10000:	000adb40 	call	adb4 <__mulsi3>
   10004:	8085883a 	add	r2,r16,r2
   10008:	10800017 	ldw	r2,0(r2)
   1000c:	1000151e 	bne	r2,zero,10064 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   10010:	04000074 	movhi	r16,1
   10014:	84047504 	addi	r16,r16,4564
   10018:	e0bffc17 	ldw	r2,-16(fp)
   1001c:	01400304 	movi	r5,12
   10020:	1009883a 	mov	r4,r2
   10024:	000adb40 	call	adb4 <__mulsi3>
   10028:	8085883a 	add	r2,r16,r2
   1002c:	e0fffe17 	ldw	r3,-8(fp)
   10030:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   10034:	00800074 	movhi	r2,1
   10038:	1088f704 	addi	r2,r2,9180
   1003c:	10c00017 	ldw	r3,0(r2)
   10040:	e0bffc17 	ldw	r2,-16(fp)
   10044:	1880040e 	bge	r3,r2,10058 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   10048:	00800074 	movhi	r2,1
   1004c:	1088f704 	addi	r2,r2,9180
   10050:	e0fffc17 	ldw	r3,-16(fp)
   10054:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   10058:	e0bffc17 	ldw	r2,-16(fp)
   1005c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   10060:	00000606 	br	1007c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10064:	e0bffc17 	ldw	r2,-16(fp)
   10068:	10800044 	addi	r2,r2,1
   1006c:	e0bffc15 	stw	r2,-16(fp)
   10070:	e0bffc17 	ldw	r2,-16(fp)
   10074:	10800810 	cmplti	r2,r2,32
   10078:	103fdc1e 	bne	r2,zero,ffec <__alt_data_end+0xfffc6c0c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1007c:	e0bffd17 	ldw	r2,-12(fp)
}
   10080:	e6ffff04 	addi	sp,fp,-4
   10084:	dfc00217 	ldw	ra,8(sp)
   10088:	df000117 	ldw	fp,4(sp)
   1008c:	dc000017 	ldw	r16,0(sp)
   10090:	dec00304 	addi	sp,sp,12
   10094:	f800283a 	ret

00010098 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   10098:	defffe04 	addi	sp,sp,-8
   1009c:	df000115 	stw	fp,4(sp)
   100a0:	df000104 	addi	fp,sp,4
   100a4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   100a8:	e0bfff17 	ldw	r2,-4(fp)
   100ac:	10bffe84 	addi	r2,r2,-6
   100b0:	10c00428 	cmpgeui	r3,r2,16
   100b4:	18001a1e 	bne	r3,zero,10120 <alt_exception_cause_generated_bad_addr+0x88>
   100b8:	100690ba 	slli	r3,r2,2
   100bc:	00800074 	movhi	r2,1
   100c0:	10803404 	addi	r2,r2,208
   100c4:	1885883a 	add	r2,r3,r2
   100c8:	10800017 	ldw	r2,0(r2)
   100cc:	1000683a 	jmp	r2
   100d0:	00010110 	cmplti	zero,zero,1028
   100d4:	00010110 	cmplti	zero,zero,1028
   100d8:	00010120 	cmpeqi	zero,zero,1028
   100dc:	00010120 	cmpeqi	zero,zero,1028
   100e0:	00010120 	cmpeqi	zero,zero,1028
   100e4:	00010110 	cmplti	zero,zero,1028
   100e8:	00010118 	cmpnei	zero,zero,1028
   100ec:	00010120 	cmpeqi	zero,zero,1028
   100f0:	00010110 	cmplti	zero,zero,1028
   100f4:	00010110 	cmplti	zero,zero,1028
   100f8:	00010120 	cmpeqi	zero,zero,1028
   100fc:	00010110 	cmplti	zero,zero,1028
   10100:	00010118 	cmpnei	zero,zero,1028
   10104:	00010120 	cmpeqi	zero,zero,1028
   10108:	00010120 	cmpeqi	zero,zero,1028
   1010c:	00010110 	cmplti	zero,zero,1028
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10110:	00800044 	movi	r2,1
   10114:	00000306 	br	10124 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10118:	0005883a 	mov	r2,zero
   1011c:	00000106 	br	10124 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   10120:	0005883a 	mov	r2,zero
  }
}
   10124:	e037883a 	mov	sp,fp
   10128:	df000017 	ldw	fp,0(sp)
   1012c:	dec00104 	addi	sp,sp,4
   10130:	f800283a 	ret

00010134 <atexit>:
   10134:	200b883a 	mov	r5,r4
   10138:	000f883a 	mov	r7,zero
   1013c:	000d883a 	mov	r6,zero
   10140:	0009883a 	mov	r4,zero
   10144:	00101fc1 	jmpi	101fc <__register_exitproc>

00010148 <exit>:
   10148:	defffe04 	addi	sp,sp,-8
   1014c:	000b883a 	mov	r5,zero
   10150:	dc000015 	stw	r16,0(sp)
   10154:	dfc00115 	stw	ra,4(sp)
   10158:	2021883a 	mov	r16,r4
   1015c:	00103140 	call	10314 <__call_exitprocs>
   10160:	00800074 	movhi	r2,1
   10164:	1088ed04 	addi	r2,r2,9140
   10168:	11000017 	ldw	r4,0(r2)
   1016c:	20800f17 	ldw	r2,60(r4)
   10170:	10000126 	beq	r2,zero,10178 <exit+0x30>
   10174:	103ee83a 	callr	r2
   10178:	8009883a 	mov	r4,r16
   1017c:	00104940 	call	10494 <_exit>

00010180 <memcmp>:
   10180:	01c000c4 	movi	r7,3
   10184:	3980192e 	bgeu	r7,r6,101ec <memcmp+0x6c>
   10188:	2144b03a 	or	r2,r4,r5
   1018c:	11c4703a 	and	r2,r2,r7
   10190:	10000f26 	beq	r2,zero,101d0 <memcmp+0x50>
   10194:	20800003 	ldbu	r2,0(r4)
   10198:	28c00003 	ldbu	r3,0(r5)
   1019c:	10c0151e 	bne	r2,r3,101f4 <memcmp+0x74>
   101a0:	31bfff84 	addi	r6,r6,-2
   101a4:	01ffffc4 	movi	r7,-1
   101a8:	00000406 	br	101bc <memcmp+0x3c>
   101ac:	20800003 	ldbu	r2,0(r4)
   101b0:	28c00003 	ldbu	r3,0(r5)
   101b4:	31bfffc4 	addi	r6,r6,-1
   101b8:	10c00e1e 	bne	r2,r3,101f4 <memcmp+0x74>
   101bc:	21000044 	addi	r4,r4,1
   101c0:	29400044 	addi	r5,r5,1
   101c4:	31fff91e 	bne	r6,r7,101ac <__alt_data_end+0xfffc6dcc>
   101c8:	0005883a 	mov	r2,zero
   101cc:	f800283a 	ret
   101d0:	20c00017 	ldw	r3,0(r4)
   101d4:	28800017 	ldw	r2,0(r5)
   101d8:	18bfee1e 	bne	r3,r2,10194 <__alt_data_end+0xfffc6db4>
   101dc:	31bfff04 	addi	r6,r6,-4
   101e0:	21000104 	addi	r4,r4,4
   101e4:	29400104 	addi	r5,r5,4
   101e8:	39bff936 	bltu	r7,r6,101d0 <__alt_data_end+0xfffc6df0>
   101ec:	303fe91e 	bne	r6,zero,10194 <__alt_data_end+0xfffc6db4>
   101f0:	003ff506 	br	101c8 <__alt_data_end+0xfffc6de8>
   101f4:	10c5c83a 	sub	r2,r2,r3
   101f8:	f800283a 	ret

000101fc <__register_exitproc>:
   101fc:	defffa04 	addi	sp,sp,-24
   10200:	dc000315 	stw	r16,12(sp)
   10204:	04000074 	movhi	r16,1
   10208:	8408ed04 	addi	r16,r16,9140
   1020c:	80c00017 	ldw	r3,0(r16)
   10210:	dc400415 	stw	r17,16(sp)
   10214:	dfc00515 	stw	ra,20(sp)
   10218:	18805217 	ldw	r2,328(r3)
   1021c:	2023883a 	mov	r17,r4
   10220:	10003726 	beq	r2,zero,10300 <__register_exitproc+0x104>
   10224:	10c00117 	ldw	r3,4(r2)
   10228:	010007c4 	movi	r4,31
   1022c:	20c00e16 	blt	r4,r3,10268 <__register_exitproc+0x6c>
   10230:	1a000044 	addi	r8,r3,1
   10234:	8800221e 	bne	r17,zero,102c0 <__register_exitproc+0xc4>
   10238:	18c00084 	addi	r3,r3,2
   1023c:	18c7883a 	add	r3,r3,r3
   10240:	18c7883a 	add	r3,r3,r3
   10244:	12000115 	stw	r8,4(r2)
   10248:	10c7883a 	add	r3,r2,r3
   1024c:	19400015 	stw	r5,0(r3)
   10250:	0005883a 	mov	r2,zero
   10254:	dfc00517 	ldw	ra,20(sp)
   10258:	dc400417 	ldw	r17,16(sp)
   1025c:	dc000317 	ldw	r16,12(sp)
   10260:	dec00604 	addi	sp,sp,24
   10264:	f800283a 	ret
   10268:	00800034 	movhi	r2,0
   1026c:	10800004 	addi	r2,r2,0
   10270:	10002626 	beq	r2,zero,1030c <__register_exitproc+0x110>
   10274:	01006404 	movi	r4,400
   10278:	d9400015 	stw	r5,0(sp)
   1027c:	d9800115 	stw	r6,4(sp)
   10280:	d9c00215 	stw	r7,8(sp)
   10284:	00000000 	call	0 <__reset>
   10288:	d9400017 	ldw	r5,0(sp)
   1028c:	d9800117 	ldw	r6,4(sp)
   10290:	d9c00217 	ldw	r7,8(sp)
   10294:	10001d26 	beq	r2,zero,1030c <__register_exitproc+0x110>
   10298:	81000017 	ldw	r4,0(r16)
   1029c:	10000115 	stw	zero,4(r2)
   102a0:	02000044 	movi	r8,1
   102a4:	22405217 	ldw	r9,328(r4)
   102a8:	0007883a 	mov	r3,zero
   102ac:	12400015 	stw	r9,0(r2)
   102b0:	20805215 	stw	r2,328(r4)
   102b4:	10006215 	stw	zero,392(r2)
   102b8:	10006315 	stw	zero,396(r2)
   102bc:	883fde26 	beq	r17,zero,10238 <__alt_data_end+0xfffc6e58>
   102c0:	18c9883a 	add	r4,r3,r3
   102c4:	2109883a 	add	r4,r4,r4
   102c8:	1109883a 	add	r4,r2,r4
   102cc:	21802215 	stw	r6,136(r4)
   102d0:	01800044 	movi	r6,1
   102d4:	12406217 	ldw	r9,392(r2)
   102d8:	30cc983a 	sll	r6,r6,r3
   102dc:	4992b03a 	or	r9,r9,r6
   102e0:	12406215 	stw	r9,392(r2)
   102e4:	21c04215 	stw	r7,264(r4)
   102e8:	01000084 	movi	r4,2
   102ec:	893fd21e 	bne	r17,r4,10238 <__alt_data_end+0xfffc6e58>
   102f0:	11006317 	ldw	r4,396(r2)
   102f4:	218cb03a 	or	r6,r4,r6
   102f8:	11806315 	stw	r6,396(r2)
   102fc:	003fce06 	br	10238 <__alt_data_end+0xfffc6e58>
   10300:	18805304 	addi	r2,r3,332
   10304:	18805215 	stw	r2,328(r3)
   10308:	003fc606 	br	10224 <__alt_data_end+0xfffc6e44>
   1030c:	00bfffc4 	movi	r2,-1
   10310:	003fd006 	br	10254 <__alt_data_end+0xfffc6e74>

00010314 <__call_exitprocs>:
   10314:	defff504 	addi	sp,sp,-44
   10318:	df000915 	stw	fp,36(sp)
   1031c:	dd400615 	stw	r21,24(sp)
   10320:	dc800315 	stw	r18,12(sp)
   10324:	dfc00a15 	stw	ra,40(sp)
   10328:	ddc00815 	stw	r23,32(sp)
   1032c:	dd800715 	stw	r22,28(sp)
   10330:	dd000515 	stw	r20,20(sp)
   10334:	dcc00415 	stw	r19,16(sp)
   10338:	dc400215 	stw	r17,8(sp)
   1033c:	dc000115 	stw	r16,4(sp)
   10340:	d9000015 	stw	r4,0(sp)
   10344:	2839883a 	mov	fp,r5
   10348:	04800044 	movi	r18,1
   1034c:	057fffc4 	movi	r21,-1
   10350:	00800074 	movhi	r2,1
   10354:	1088ed04 	addi	r2,r2,9140
   10358:	12000017 	ldw	r8,0(r2)
   1035c:	45005217 	ldw	r20,328(r8)
   10360:	44c05204 	addi	r19,r8,328
   10364:	a0001c26 	beq	r20,zero,103d8 <__call_exitprocs+0xc4>
   10368:	a0800117 	ldw	r2,4(r20)
   1036c:	15ffffc4 	addi	r23,r2,-1
   10370:	b8000d16 	blt	r23,zero,103a8 <__call_exitprocs+0x94>
   10374:	14000044 	addi	r16,r2,1
   10378:	8421883a 	add	r16,r16,r16
   1037c:	8421883a 	add	r16,r16,r16
   10380:	84402004 	addi	r17,r16,128
   10384:	a463883a 	add	r17,r20,r17
   10388:	a421883a 	add	r16,r20,r16
   1038c:	e0001e26 	beq	fp,zero,10408 <__call_exitprocs+0xf4>
   10390:	80804017 	ldw	r2,256(r16)
   10394:	e0801c26 	beq	fp,r2,10408 <__call_exitprocs+0xf4>
   10398:	bdffffc4 	addi	r23,r23,-1
   1039c:	843fff04 	addi	r16,r16,-4
   103a0:	8c7fff04 	addi	r17,r17,-4
   103a4:	bd7ff91e 	bne	r23,r21,1038c <__alt_data_end+0xfffc6fac>
   103a8:	00800034 	movhi	r2,0
   103ac:	10800004 	addi	r2,r2,0
   103b0:	10000926 	beq	r2,zero,103d8 <__call_exitprocs+0xc4>
   103b4:	a0800117 	ldw	r2,4(r20)
   103b8:	1000301e 	bne	r2,zero,1047c <__call_exitprocs+0x168>
   103bc:	a0800017 	ldw	r2,0(r20)
   103c0:	10003226 	beq	r2,zero,1048c <__call_exitprocs+0x178>
   103c4:	a009883a 	mov	r4,r20
   103c8:	98800015 	stw	r2,0(r19)
   103cc:	00000000 	call	0 <__reset>
   103d0:	9d000017 	ldw	r20,0(r19)
   103d4:	a03fe41e 	bne	r20,zero,10368 <__alt_data_end+0xfffc6f88>
   103d8:	dfc00a17 	ldw	ra,40(sp)
   103dc:	df000917 	ldw	fp,36(sp)
   103e0:	ddc00817 	ldw	r23,32(sp)
   103e4:	dd800717 	ldw	r22,28(sp)
   103e8:	dd400617 	ldw	r21,24(sp)
   103ec:	dd000517 	ldw	r20,20(sp)
   103f0:	dcc00417 	ldw	r19,16(sp)
   103f4:	dc800317 	ldw	r18,12(sp)
   103f8:	dc400217 	ldw	r17,8(sp)
   103fc:	dc000117 	ldw	r16,4(sp)
   10400:	dec00b04 	addi	sp,sp,44
   10404:	f800283a 	ret
   10408:	a0800117 	ldw	r2,4(r20)
   1040c:	80c00017 	ldw	r3,0(r16)
   10410:	10bfffc4 	addi	r2,r2,-1
   10414:	15c01426 	beq	r2,r23,10468 <__call_exitprocs+0x154>
   10418:	80000015 	stw	zero,0(r16)
   1041c:	183fde26 	beq	r3,zero,10398 <__alt_data_end+0xfffc6fb8>
   10420:	95c8983a 	sll	r4,r18,r23
   10424:	a0806217 	ldw	r2,392(r20)
   10428:	a5800117 	ldw	r22,4(r20)
   1042c:	2084703a 	and	r2,r4,r2
   10430:	10000b26 	beq	r2,zero,10460 <__call_exitprocs+0x14c>
   10434:	a0806317 	ldw	r2,396(r20)
   10438:	2088703a 	and	r4,r4,r2
   1043c:	20000c1e 	bne	r4,zero,10470 <__call_exitprocs+0x15c>
   10440:	89400017 	ldw	r5,0(r17)
   10444:	d9000017 	ldw	r4,0(sp)
   10448:	183ee83a 	callr	r3
   1044c:	a0800117 	ldw	r2,4(r20)
   10450:	15bfbf1e 	bne	r2,r22,10350 <__alt_data_end+0xfffc6f70>
   10454:	98800017 	ldw	r2,0(r19)
   10458:	153fcf26 	beq	r2,r20,10398 <__alt_data_end+0xfffc6fb8>
   1045c:	003fbc06 	br	10350 <__alt_data_end+0xfffc6f70>
   10460:	183ee83a 	callr	r3
   10464:	003ff906 	br	1044c <__alt_data_end+0xfffc706c>
   10468:	a5c00115 	stw	r23,4(r20)
   1046c:	003feb06 	br	1041c <__alt_data_end+0xfffc703c>
   10470:	89000017 	ldw	r4,0(r17)
   10474:	183ee83a 	callr	r3
   10478:	003ff406 	br	1044c <__alt_data_end+0xfffc706c>
   1047c:	a0800017 	ldw	r2,0(r20)
   10480:	a027883a 	mov	r19,r20
   10484:	1029883a 	mov	r20,r2
   10488:	003fb606 	br	10364 <__alt_data_end+0xfffc6f84>
   1048c:	0005883a 	mov	r2,zero
   10490:	003ffb06 	br	10480 <__alt_data_end+0xfffc70a0>

00010494 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   10494:	defffd04 	addi	sp,sp,-12
   10498:	df000215 	stw	fp,8(sp)
   1049c:	df000204 	addi	fp,sp,8
   104a0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   104a4:	0001883a 	nop
   104a8:	e0bfff17 	ldw	r2,-4(fp)
   104ac:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   104b0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   104b4:	10000226 	beq	r2,zero,104c0 <_exit+0x2c>
    ALT_SIM_FAIL();
   104b8:	002af070 	cmpltui	zero,zero,43969
   104bc:	00000106 	br	104c4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   104c0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   104c4:	003fff06 	br	104c4 <__alt_data_end+0xfffc70e4>
