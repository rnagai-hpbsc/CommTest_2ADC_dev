
testreadout.elf:     file format elf32-littlenios2
testreadout.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00010914 memsz 0x00010914 flags r-x
    LOAD off    0x00011934 vaddr 0x00010934 paddr 0x00012420 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00013f0c vaddr 0x00013f0c paddr 0x00013f0c align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000102c4  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000440  000104f4  000104f4  000114f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  00010934  00012420  00011934  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00013f0c  00013f0c  00013f0c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0001406c  0001406c  00013420  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013420  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f48  00000000  00000000  00013448  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024b6f  00000000  00000000  00014390  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000941a  00000000  00000000  00038eff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ba60  00000000  00000000  00042319  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000023d4  00000000  00000000  0004dd7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003c1f  00000000  00000000  00050150  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017b11  00000000  00000000  00053d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006b880  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001930  00000000  00000000  0006b8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007060e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00070611  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007061d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007061e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0007061f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0007062a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00070635  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  00070640  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003c  00000000  00000000  00070646  2**0
                  CONTENTS, READONLY
 26 .jdi          000051e6  00000000  00000000  00070682  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00070062  00000000  00000000  00075868  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
000104f4 l    d  .rodata	00000000 .rodata
00010934 l    d  .rwdata	00000000 .rwdata
00013f0c l    d  .bss	00000000 .bss
0001406c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../testreadout_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 testreadout.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001067a l     O .rodata	00000010 zeroes.4404
00002ad4 l     F .text	000000bc __sbprintf
0001068a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002ce4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000483c l     F .text	00000008 __fp_unlock
00004850 l     F .text	0000019c __sinit.part.1
000049ec l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010934 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00010d78 l     O .rwdata	00000020 lc_ctype_charset
00010d58 l     O .rwdata	00000020 lc_message_charset
00010d98 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000106bc l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008028 l     F .text	000000fc __sprint_r.part.0
000107e0 l     O .rodata	00000010 zeroes.4349
00009664 l     F .text	000000bc __sbprintf
000107f0 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000d6ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000d7d4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d800 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d908 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000da04 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000daf0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000dce0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00012410 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000df98 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000e0e8 l     F .text	00000038 alt_dev_reg
00011380 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000e8d8 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000eae4 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000f3dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000f880 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000f9e0 l     F .text	00000050 alt_get_errno
0000fa30 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00013f40 g     O .bss	00000004 alt_instruction_exception_handler
00000658 g     F .text	00000018 putchar
00007504 g     F .text	00000074 _mprec_log10
000075f0 g     F .text	0000008c __any_on
00009d70 g     F .text	00000054 _isatty_r
000106c8 g     O .rodata	00000028 __mprec_tinytens
0000dc1c g     F .text	0000007c alt_main
00000670 g     F .text	000000c0 _puts_r
00013f6c g     O .bss	00000100 alt_irq
00009dc4 g     F .text	00000060 _lseek_r
0000e430 g     F .text	0000005c altera_avalon_fifo_write_almostfull
00012420 g       *ABS*	00000000 __flash_rwdata_start
0000c084 g     F .text	00000088 .hidden __eqdf2
0001406c g       *ABS*	00000000 __alt_heap_start
00000614 g     F .text	0000003c printf
00009e84 g     F .text	0000009c _wcrtomb_r
00007ee8 g     F .text	0000005c __sseek
00004b9c g     F .text	00000010 __sinit
00009720 g     F .text	00000140 __swbuf_r
00005670 g     F .text	0000007c _setlocale_r
000049f4 g     F .text	00000078 __sfmoreglue
0000dcbc g     F .text	00000024 __malloc_unlock
00006340 g     F .text	0000015c memmove
0000e1a8 g     F .text	00000098 altera_avalon_fifo_init
00004b84 g     F .text	00000018 _cleanup
0000e4e8 g     F .text	00000058 altera_avalon_fifo_write_fifo
000065c4 g     F .text	000000a8 _Balloc
0000c10c g     F .text	000000dc .hidden __gtdf2
0000fe28 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
0000e684 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00000020 g       *ABS*	00000000 __flash_exceptions_start
00009d14 g     F .text	0000005c _fstat_r
00013f24 g     O .bss	00000004 errno
00007e64 g     F .text	00000008 __seofread
00013f2c g     O .bss	00000004 alt_argv
0001a3e0 g       *ABS*	00000000 _gp
0000df68 g     F .text	00000030 usleep
0000e374 g     F .text	00000060 altera_avalon_fifo_clear_event
00011200 g     O .rwdata	00000180 alt_fd_list
00000650 g     F .text	00000008 _putchar_r
0000fe4c g     F .text	00000090 alt_find_dev
000061f8 g     F .text	00000148 memcpy
00004844 g     F .text	0000000c _cleanup_r
0000d4c4 g     F .text	000000dc .hidden __floatsidf
0000f964 g     F .text	0000007c alt_io_redirect
0000c1e8 g     F .text	000000f4 .hidden __ltdf2
000104f4 g       *ABS*	00000000 __DTOR_END__
00000730 g     F .text	00000014 puts
000100c4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00007d48 g     F .text	00000074 __fpclassifyd
00007460 g     F .text	000000a4 __ratio
00009648 g     F .text	0000001c __vfiprintf_internal
0000ece4 g     F .text	0000021c altera_avalon_jtag_uart_read
000005e4 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000ad24 g     F .text	00000064 .hidden __udivsi3
0000d958 g     F .text	000000ac isatty
00010718 g     O .rodata	000000c8 __mprec_tens
000056ec g     F .text	0000000c __locale_charset
00013f20 g     O .bss	00000004 __malloc_top_pad
000123e8 g     O .rwdata	00000004 __mb_cur_max
0000571c g     F .text	0000000c _localeconv_r
000069f8 g     F .text	0000003c __i2b
00005020 g     F .text	000004c8 __sfvwrite_r
00007dbc g     F .text	00000054 _sbrk_r
00009e24 g     F .text	00000060 _read_r
00012408 g     O .rwdata	00000004 alt_max_fd
00009a08 g     F .text	000000f0 _fclose_r
0000480c g     F .text	00000030 fflush
00013f1c g     O .bss	00000004 __malloc_max_sbrked_mem
0000ae08 g     F .text	000008ac .hidden __adddf3
00007208 g     F .text	0000010c __b2d
0000a668 g     F .text	000005c4 .hidden __umoddi3
0000db40 g     F .text	000000dc lseek
000123e0 g     O .rwdata	00000004 _global_impure_ptr
000077e4 g     F .text	00000564 _realloc_r
0001406c g       *ABS*	00000000 __bss_end
0000f790 g     F .text	000000f0 alt_iic_isr_register
0000fd20 g     F .text	00000108 alt_tick
0000a06c g     F .text	000005fc .hidden __udivdi3
00009c70 g     F .text	00000024 _fputwc_r
000106f0 g     O .rodata	00000028 __mprec_bigtens
000067dc g     F .text	00000104 __s2b
0000d5a0 g     F .text	000000a8 .hidden __floatunsidf
00006f48 g     F .text	00000060 __mcmp
00004bbc g     F .text	00000018 __fp_lock_all
0000f744 g     F .text	0000004c alt_ic_irq_enabled
0000fc84 g     F .text	0000009c alt_alarm_stop
00013f34 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
000111d8 g     O .rwdata	00000028 alt_dev_null
0000f3bc g     F .text	00000020 alt_dcache_flush_all
000068e0 g     F .text	00000068 __hi0bits
0000d444 g     F .text	00000080 .hidden __fixdfsi
0000e3d4 g     F .text	0000005c altera_avalon_fifo_write_ienable
00012420 g       *ABS*	00000000 __ram_rwdata_end
0000e2e4 g     F .text	0000002c altera_avalon_fifo_read_almostempty
00012400 g     O .rwdata	00000008 alt_dev_list
0000dfe8 g     F .text	00000100 write
0000767c g     F .text	000000a0 _putc_r
00010934 g       *ABS*	00000000 __ram_rodata_end
0000d850 g     F .text	000000b8 fstat
0000c1e8 g     F .text	000000f4 .hidden __ledf2
00006cc0 g     F .text	00000140 __pow5mult
0000813c g     F .text	0000150c ___vfiprintf_internal_r
00013f14 g     O .bss	00000004 __nlocale_changed
0000ad88 g     F .text	00000058 .hidden __umodsi3
0001406c g       *ABS*	00000000 end
0000e810 g     F .text	000000c8 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0000e310 g     F .text	0000003c altera_avalon_fifo_read_event
000104f4 g       *ABS*	00000000 __CTOR_LIST__
000493e0 g       *ABS*	00000000 __alt_stack_pointer
0000d648 g     F .text	00000064 .hidden __clzsi2
0000ef00 g     F .text	00000224 altera_avalon_jtag_uart_write
0000e5ac g     F .text	0000004c altera_avalon_fifo_read_fifo
00004bac g     F .text	00000004 __sfp_lock_acquire
00006114 g     F .text	000000e4 memchr
000007dc g     F .text	000022dc ___vfprintf_internal_r
00004d10 g     F .text	00000310 _free_r
000056f8 g     F .text	00000010 __locale_mb_cur_max
00010340 g     F .text	00000180 __call_exitprocs
00013f10 g     O .bss	00000004 __mlocale_changed
000123ec g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00013f38 g     O .bss	00000004 _alt_tick_rate
00006e00 g     F .text	00000148 __lshift
00013f3c g     O .bss	00000004 _alt_nticks
0000dd30 g     F .text	00000104 read
0000e158 g     F .text	00000050 alt_sys_init
00010228 g     F .text	00000118 __register_exitproc
00006a34 g     F .text	0000028c __multiply
0000eb8c g     F .text	00000068 altera_avalon_jtag_uart_close
0000ade0 g     F .text	00000028 .hidden __mulsi3
00010934 g       *ABS*	00000000 __ram_rwdata_start
000104f4 g       *ABS*	00000000 __ram_rodata_start
00013f44 g     O .bss	00000028 __malloc_current_mallinfo
00007314 g     F .text	0000014c __d2b
0000e6ac g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000fff0 g     F .text	000000d4 alt_get_fd
0000f264 g     F .text	00000158 alt_busy_sleep
000098d8 g     F .text	00000054 _close_r
000101ac g     F .text	0000007c memcmp
0000e76c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001406c g       *ABS*	00000000 __alt_stack_base
0000e7bc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002b90 g     F .text	00000154 __swsetup_r
0000e240 g     F .text	0000003c altera_avalon_fifo_read_status
0000b6b4 g     F .text	000009d0 .hidden __divdf3
00004a6c g     F .text	00000118 __sfp
00007578 g     F .text	00000078 __copybits
00010dd0 g     O .rwdata	00000408 __malloc_av_
00004bb8 g     F .text	00000004 __sinit_lock_release
0000c2dc g     F .text	0000086c .hidden __muldf3
00007e10 g     F .text	00000054 __sread
0000e658 g     F .text	0000002c altera_avalon_fifo_read_other_info
0000fedc g     F .text	00000114 alt_find_file
0000f42c g     F .text	000000a4 alt_dev_llist_insert
0000dc98 g     F .text	00000024 __malloc_lock
0000deb8 g     F .text	000000b0 sbrk
000047b0 g     F .text	0000005c _fflush_r
0000992c g     F .text	000000dc _calloc_r
00013f0c g       *ABS*	00000000 __bss_start
0000649c g     F .text	00000128 memset
0000026c g     F .text	00000378 main
00013f30 g     O .bss	00000004 alt_envp
00013f18 g     O .bss	00000004 __malloc_max_total_mem
0000e70c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000e34c g     F .text	00000028 altera_avalon_fifo_read_level
00009860 g     F .text	00000018 __swbuf
00007f44 g     F .text	00000008 __sclose
000493e0 g       *ABS*	00000000 __alt_heap_limit
00009af8 g     F .text	00000014 fclose
00002f0c g     F .text	00001688 _dtoa_r
00005908 g     F .text	0000080c _malloc_r
00009fe0 g     F .text	00000030 __ascii_wctomb
0001240c g     O .rwdata	00000004 alt_errno
000054e8 g     F .text	000000c4 _fwalk
0000771c g     F .text	000000c8 putc
0000ac2c g     F .text	00000084 .hidden __divsi3
00004bec g     F .text	00000124 _malloc_trim_r
000104f4 g       *ABS*	00000000 __CTOR_END__
00007f4c g     F .text	000000dc strcmp
000104f4 g       *ABS*	00000000 __flash_rodata_start
000104f4 g       *ABS*	00000000 __DTOR_LIST__
0000c084 g     F .text	00000088 .hidden __nedf2
0000e120 g     F .text	00000038 alt_irq_init
0000de34 g     F .text	00000084 alt_release_fd
00010800 g     O .rodata	00000100 .hidden __clz_tab
00013f0c g     O .bss	00000004 _PathLocale
00010160 g     F .text	00000014 atexit
00009878 g     F .text	00000060 _write_r
00005728 g     F .text	00000018 setlocale
000123e4 g     O .rwdata	00000004 _impure_ptr
00013f28 g     O .bss	00000004 alt_argc
00004594 g     F .text	0000021c __sflush_r
0000f530 g     F .text	00000060 _do_dtors
00005714 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
000071a4 g     F .text	00000064 __ulp
00004bd4 g     F .text	00000018 __fp_unlock_all
000123f8 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005740 g     F .text	0000000c localeconv
0000e5f8 g     F .text	00000060 altera_avalon_fifo_write_other_info
0000f5b0 g     F .text	00000050 alt_ic_isr_register
00012420 g       *ABS*	00000000 _edata
0001406c g       *ABS*	00000000 _end
00009b0c g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000ebf4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000f6a0 g     F .text	000000a4 alt_ic_irq_disable
00007e6c g     F .text	0000007c __swrite
000123f0 g     O .rwdata	00000004 __malloc_trim_threshold
00005708 g     F .text	0000000c __locale_msgcharset
00010174 g     F .text	00000038 exit
000055ac g     F .text	000000c4 _fwalk_reent
00006fa8 g     F .text	000001fc __mdiff
0000acb0 g     F .text	00000074 .hidden __modsi3
0000e27c g     F .text	0000003c altera_avalon_fifo_read_ienable
000493e0 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004bb0 g     F .text	00000004 __sfp_lock_release
000104c0 g     F .text	00000034 _exit
0000f124 g     F .text	00000140 alt_alarm_start
0000e2b8 g     F .text	0000002c altera_avalon_fifo_read_almostfull
0000574c g     F .text	000001bc __smakebuf_r
00000744 g     F .text	00000098 strlen
0000fb24 g     F .text	00000160 open
0000e540 g     F .text	0000006c altera_avalon_read_fifo
0000c10c g     F .text	000000dc .hidden __gedf2
000123f4 g     O .rwdata	00000004 __wctomb
00008124 g     F .text	00000018 __sprint_r
0000f590 g     F .text	00000020 alt_icache_flush_all
00012414 g     O .rwdata	00000004 alt_priority_mask
0000f600 g     F .text	000000a0 alt_ic_irq_enable
00002ab8 g     F .text	0000001c __vfprintf_internal
0000a010 g     F .text	0000005c _wctomb_r
0000cb48 g     F .text	000008fc .hidden __subdf3
00006948 g     F .text	000000b0 __lo0bits
0000e48c g     F .text	0000005c altera_avalon_fifo_write_almostempty
00012418 g     O .rwdata	00000008 alt_alarm_list
0000f4d0 g     F .text	00000060 _do_ctors
00009f20 g     F .text	000000c0 wcrtomb
0000d6fc g     F .text	000000d8 close
0000da6c g     F .text	00000084 alt_load
00009c94 g     F .text	00000080 fputwc
00004bb4 g     F .text	00000004 __sinit_lock_acquire
00006694 g     F .text	00000148 __multadd
0000666c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	108fdb04 	addi	r2,r2,16236
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	108fdb04 	addi	r2,r2,16236
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffb6d4c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffb6d40>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a6d817 	ldw	r2,-25760(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a6d817 	ldw	r2,-25760(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dee4f814 	ori	sp,sp,37856
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d6a8f814 	ori	gp,gp,41952
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	108fc314 	ori	r2,r2,16140

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18d01b14 	ori	r3,r3,16492

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfffb6e74>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	000da6c0 	call	da6c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	000dc1c0 	call	dc1c <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfffb6e88>

0000026c <main>:
#include "altera_avalon_pio_regs.h"
#include "altera_avalon_fifo_regs.h"
#include "altera_avalon_fifo_util.h"

int main()
{
     26c:	defff104 	addi	sp,sp,-60
     270:	dfc00e15 	stw	ra,56(sp)
     274:	df000d15 	stw	fp,52(sp)
     278:	df000d04 	addi	fp,sp,52
	printf("Hello world!\n");
     27c:	01000074 	movhi	r4,1
     280:	21013d04 	addi	r4,r4,1268
     284:	00007300 	call	730 <puts>

	int index = 0;
     288:	e03ff415 	stw	zero,-48(fp)
	int data, data2;

	int version = IORD_ALTERA_AVALON_JTAG_UART_DATA(VERSION_INFO_BASE);
     28c:	00844034 	movhi	r2,4352
     290:	10800037 	ldwio	r2,0(r2)
     294:	e0bff615 	stw	r2,-40(fp)
	printf ("\n ** Version: %x ** \n\n",version);
     298:	e17ff617 	ldw	r5,-40(fp)
     29c:	01000074 	movhi	r4,1
     2a0:	21014104 	addi	r4,r4,1284
     2a4:	00006140 	call	614 <printf>

	printf("Resetting...\n");
     2a8:	01000074 	movhi	r4,1
     2ac:	21014704 	addi	r4,r4,1308
     2b0:	00007300 	call	730 <puts>
	IOWR_ALTERA_AVALON_PIO_DATA(EXT_RST_BASE,1);
     2b4:	00c00044 	movi	r3,1
     2b8:	00848034 	movhi	r2,4608
     2bc:	10c00035 	stwio	r3,0(r2)
	//usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(EXT_RST_BASE,0);
     2c0:	0007883a 	mov	r3,zero
     2c4:	00848034 	movhi	r2,4608
     2c8:	10c00035 	stwio	r3,0(r2)
	//usleep(1000000);
	printf("\n");
     2cc:	01000284 	movi	r4,10
     2d0:	00006580 	call	658 <putchar>

	int initvalue =4293918720; // 0xFFF00000;
     2d4:	00bffc34 	movhi	r2,65520
     2d8:	e0bff715 	stw	r2,-36(fp)

	int addr, value, sendvalue, sentvalue, baseline_1, baseline_2;

	printf("Address : ");
     2dc:	01000074 	movhi	r4,1
     2e0:	21014b04 	addi	r4,r4,1324
     2e4:	00006140 	call	614 <printf>
	//scanf("%d",&addr);
	addr = 4;
     2e8:	00800104 	movi	r2,4
     2ec:	e0bff815 	stw	r2,-32(fp)
	printf("%d\n",addr);
     2f0:	e17ff817 	ldw	r5,-32(fp)
     2f4:	01000074 	movhi	r4,1
     2f8:	21014e04 	addi	r4,r4,1336
     2fc:	00006140 	call	614 <printf>
	printf("Input value : ");
     300:	01000074 	movhi	r4,1
     304:	21014f04 	addi	r4,r4,1340
     308:	00006140 	call	614 <printf>
	//scanf("%d",&value);
	value = 32768;
     30c:	00a00014 	movui	r2,32768
     310:	e0bff915 	stw	r2,-28(fp)
	printf("%d\n",value);
     314:	e17ff917 	ldw	r5,-28(fp)
     318:	01000074 	movhi	r4,1
     31c:	21014e04 	addi	r4,r4,1336
     320:	00006140 	call	614 <printf>
	sendvalue = initvalue + addr*256*256 + value;
     324:	e0bff817 	ldw	r2,-32(fp)
     328:	1006943a 	slli	r3,r2,16
     32c:	e0bff717 	ldw	r2,-36(fp)
     330:	1887883a 	add	r3,r3,r2
     334:	e0bff917 	ldw	r2,-28(fp)
     338:	1885883a 	add	r2,r3,r2
     33c:	e0bffa15 	stw	r2,-24(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(DACCTRL_BASE,sendvalue);
     340:	00888034 	movhi	r2,8704
     344:	e0fffa17 	ldw	r3,-24(fp)
     348:	10c00035 	stwio	r3,0(r2)
	printf("writing DACCTRL_BASE : %x\n",sendvalue);
     34c:	e17ffa17 	ldw	r5,-24(fp)
     350:	01000074 	movhi	r4,1
     354:	21015304 	addi	r4,r4,1356
     358:	00006140 	call	614 <printf>
	usleep(1000000);
     35c:	010003f4 	movhi	r4,15
     360:	21109004 	addi	r4,r4,16960
     364:	000df680 	call	df68 <usleep>
	sentvalue = IORD_ALTERA_AVALON_PIO_DATA(DACCTRL_BASE);
     368:	00888034 	movhi	r2,8704
     36c:	10800037 	ldwio	r2,0(r2)
     370:	e0bffb15 	stw	r2,-20(fp)
	printf("Wrote value is %x\n",sentvalue);
     374:	e17ffb17 	ldw	r5,-20(fp)
     378:	01000074 	movhi	r4,1
     37c:	21015a04 	addi	r4,r4,1384
     380:	00006140 	call	614 <printf>
	usleep(1000000);
     384:	010003f4 	movhi	r4,15
     388:	21109004 	addi	r4,r4,16960
     38c:	000df680 	call	df68 <usleep>
	baseline_1 = IORD_ALTERA_AVALON_PIO_DATA(BS_1_BASE);
     390:	0084c034 	movhi	r2,4864
     394:	10800037 	ldwio	r2,0(r2)
     398:	e0bffc15 	stw	r2,-16(fp)
	baseline_2 = IORD_ALTERA_AVALON_PIO_DATA(BS_2_BASE);
     39c:	00850034 	movhi	r2,5120
     3a0:	10800037 	ldwio	r2,0(r2)
     3a4:	e0bffd15 	stw	r2,-12(fp)
	printf("Actual Baseline value is : %d %d.\n",baseline_1,baseline_2);
     3a8:	e1bffd17 	ldw	r6,-12(fp)
     3ac:	e17ffc17 	ldw	r5,-16(fp)
     3b0:	01000074 	movhi	r4,1
     3b4:	21015f04 	addi	r4,r4,1404
     3b8:	00006140 	call	614 <printf>

	printf("\n");
     3bc:	01000284 	movi	r4,10
     3c0:	00006580 	call	658 <putchar>

	printf("Address : ");
     3c4:	01000074 	movhi	r4,1
     3c8:	21014b04 	addi	r4,r4,1324
     3cc:	00006140 	call	614 <printf>
	//scanf("%d",&addr);
	addr = 0;
     3d0:	e03ff815 	stw	zero,-32(fp)
	printf("%d\n",addr);
     3d4:	e17ff817 	ldw	r5,-32(fp)
     3d8:	01000074 	movhi	r4,1
     3dc:	21014e04 	addi	r4,r4,1336
     3e0:	00006140 	call	614 <printf>
	printf("Input value : ");
     3e4:	01000074 	movhi	r4,1
     3e8:	21014f04 	addi	r4,r4,1340
     3ec:	00006140 	call	614 <printf>
	//scanf("%d",&value);
	value = 32768;
     3f0:	00a00014 	movui	r2,32768
     3f4:	e0bff915 	stw	r2,-28(fp)
	printf("%d\n",value);
     3f8:	e17ff917 	ldw	r5,-28(fp)
     3fc:	01000074 	movhi	r4,1
     400:	21014e04 	addi	r4,r4,1336
     404:	00006140 	call	614 <printf>
	sendvalue = initvalue + addr*256*256 + value;
     408:	e0bff817 	ldw	r2,-32(fp)
     40c:	1006943a 	slli	r3,r2,16
     410:	e0bff717 	ldw	r2,-36(fp)
     414:	1887883a 	add	r3,r3,r2
     418:	e0bff917 	ldw	r2,-28(fp)
     41c:	1885883a 	add	r2,r3,r2
     420:	e0bffa15 	stw	r2,-24(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(DACCTRL_BASE,sendvalue);
     424:	00888034 	movhi	r2,8704
     428:	e0fffa17 	ldw	r3,-24(fp)
     42c:	10c00035 	stwio	r3,0(r2)
	printf("writing DACCTRL_BASE : %x\n",sendvalue);
     430:	e17ffa17 	ldw	r5,-24(fp)
     434:	01000074 	movhi	r4,1
     438:	21015304 	addi	r4,r4,1356
     43c:	00006140 	call	614 <printf>
	usleep(1000000);
     440:	010003f4 	movhi	r4,15
     444:	21109004 	addi	r4,r4,16960
     448:	000df680 	call	df68 <usleep>
	sentvalue = IORD_ALTERA_AVALON_PIO_DATA(DACCTRL_BASE);
     44c:	00888034 	movhi	r2,8704
     450:	10800037 	ldwio	r2,0(r2)
     454:	e0bffb15 	stw	r2,-20(fp)
	printf("Wrote value is %x\n",sentvalue);
     458:	e17ffb17 	ldw	r5,-20(fp)
     45c:	01000074 	movhi	r4,1
     460:	21015a04 	addi	r4,r4,1384
     464:	00006140 	call	614 <printf>
	usleep(1000000);
     468:	010003f4 	movhi	r4,15
     46c:	21109004 	addi	r4,r4,16960
     470:	000df680 	call	df68 <usleep>
	baseline_1 = IORD_ALTERA_AVALON_PIO_DATA(BS_1_BASE);
     474:	0084c034 	movhi	r2,4864
     478:	10800037 	ldwio	r2,0(r2)
     47c:	e0bffc15 	stw	r2,-16(fp)
	baseline_2 = IORD_ALTERA_AVALON_PIO_DATA(BS_2_BASE);
     480:	00850034 	movhi	r2,5120
     484:	10800037 	ldwio	r2,0(r2)
     488:	e0bffd15 	stw	r2,-12(fp)
	printf("Actual Baseline value is : %d %d.\n",baseline_1, baseline_2);
     48c:	e1bffd17 	ldw	r6,-12(fp)
     490:	e17ffc17 	ldw	r5,-16(fp)
     494:	01000074 	movhi	r4,1
     498:	21015f04 	addi	r4,r4,1404
     49c:	00006140 	call	614 <printf>

	printf("\nIf want to start data-taking, press enter...\n");
     4a0:	01000074 	movhi	r4,1
     4a4:	21016804 	addi	r4,r4,1440
     4a8:	00007300 	call	730 <puts>

	printf("\n *** Start data-taking *** \n\n");
     4ac:	01000074 	movhi	r4,1
     4b0:	21017404 	addi	r4,r4,1488
     4b4:	00007300 	call	730 <puts>

	IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_PIO_BASE,1);
     4b8:	00c00044 	movi	r3,1
     4bc:	00880034 	movhi	r2,8192
     4c0:	10c00035 	stwio	r3,0(r2)

	int eventnumber = 0;
     4c4:	e03ff515 	stw	zero,-44(fp)
	printf("Event#0\n");
     4c8:	01000074 	movhi	r4,1
     4cc:	21017c04 	addi	r4,r4,1520
     4d0:	00007300 	call	730 <puts>

	while (1) {
		++index;
     4d4:	e0bff417 	ldw	r2,-48(fp)
     4d8:	10800044 	addi	r2,r2,1
     4dc:	e0bff415 	stw	r2,-48(fp)
		data = IORD_ALTERA_AVALON_FIFO_DATA(FIFO_0_OUT_BASE);
     4e0:	00840074 	movhi	r2,4097
     4e4:	10a04004 	addi	r2,r2,-32512
     4e8:	10800037 	ldwio	r2,0(r2)
     4ec:	e0bffe15 	stw	r2,-8(fp)
		data2 = IORD_ALTERA_AVALON_FIFO_DATA(FIFO_1_OUT_BASE);
     4f0:	00840074 	movhi	r2,4097
     4f4:	10a44004 	addi	r2,r2,-28416
     4f8:	10800037 	ldwio	r2,0(r2)
     4fc:	e0bfff15 	stw	r2,-4(fp)
		baseline_1 = IORD_ALTERA_AVALON_PIO_DATA(BS_1_BASE);
     500:	0084c034 	movhi	r2,4864
     504:	10800037 	ldwio	r2,0(r2)
     508:	e0bffc15 	stw	r2,-16(fp)
		baseline_2 = IORD_ALTERA_AVALON_PIO_DATA(BS_2_BASE);
     50c:	00850034 	movhi	r2,5120
     510:	10800037 	ldwio	r2,0(r2)
     514:	e0bffd15 	stw	r2,-12(fp)
		printf("%d,%d,%d,%d",index,data,data2,baseline_1);
     518:	e0bffc17 	ldw	r2,-16(fp)
     51c:	d8800015 	stw	r2,0(sp)
     520:	e1ffff17 	ldw	r7,-4(fp)
     524:	e1bffe17 	ldw	r6,-8(fp)
     528:	e17ff417 	ldw	r5,-48(fp)
     52c:	01000074 	movhi	r4,1
     530:	21017e04 	addi	r4,r4,1528
     534:	00006140 	call	614 <printf>
		printf(",%d\n",baseline_2);
     538:	e17ffd17 	ldw	r5,-12(fp)
     53c:	01000074 	movhi	r4,1
     540:	21018104 	addi	r4,r4,1540
     544:	00006140 	call	614 <printf>
		if (altera_avalon_fifo_read_level(FIFO_0_OUT_CSR_BASE)==0) {
     548:	01040074 	movhi	r4,4097
     54c:	21208004 	addi	r4,r4,-32256
     550:	000e34c0 	call	e34c <altera_avalon_fifo_read_level>
     554:	10000b1e 	bne	r2,zero,584 <main+0x318>
			//break;
			index=0;
     558:	e03ff415 	stw	zero,-48(fp)
			++eventnumber;
     55c:	e0bff517 	ldw	r2,-44(fp)
     560:	10800044 	addi	r2,r2,1
     564:	e0bff515 	stw	r2,-44(fp)
			printf("\nEvent # %d\n",eventnumber);
     568:	e17ff517 	ldw	r5,-44(fp)
     56c:	01000074 	movhi	r4,1
     570:	21018304 	addi	r4,r4,1548
     574:	00006140 	call	614 <printf>
			IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_PIO_BASE,1);
     578:	00c00044 	movi	r3,1
     57c:	00880034 	movhi	r2,8192
     580:	10c00035 	stwio	r3,0(r2)
		}
		if (index==1) {
     584:	e0bff417 	ldw	r2,-48(fp)
     588:	10800058 	cmpnei	r2,r2,1
     58c:	1000031e 	bne	r2,zero,59c <main+0x330>
			IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_PIO_BASE,0);
     590:	0007883a 	mov	r3,zero
     594:	00880034 	movhi	r2,8192
     598:	10c00035 	stwio	r3,0(r2)
		}
		if (eventnumber==10) break;
     59c:	e0bff517 	ldw	r2,-44(fp)
     5a0:	10800298 	cmpnei	r2,r2,10
     5a4:	10000126 	beq	r2,zero,5ac <main+0x340>
	}
     5a8:	003fca06 	br	4d4 <__alt_data_end+0xfffb70f4>
			IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_PIO_BASE,1);
		}
		if (index==1) {
			IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_PIO_BASE,0);
		}
		if (eventnumber==10) break;
     5ac:	0001883a 	nop
	}
	IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_PIO_BASE,0);
     5b0:	0007883a 	mov	r3,zero
     5b4:	00880034 	movhi	r2,8192
     5b8:	10c00035 	stwio	r3,0(r2)

	printf("End of the code. %c\n",0x04); // exit
     5bc:	01400104 	movi	r5,4
     5c0:	01000074 	movhi	r4,1
     5c4:	21018704 	addi	r4,r4,1564
     5c8:	00006140 	call	614 <printf>
	return 0;
     5cc:	0005883a 	mov	r2,zero
}
     5d0:	e037883a 	mov	sp,fp
     5d4:	dfc00117 	ldw	ra,4(sp)
     5d8:	df000017 	ldw	fp,0(sp)
     5dc:	dec00204 	addi	sp,sp,8
     5e0:	f800283a 	ret

000005e4 <_printf_r>:
     5e4:	defffd04 	addi	sp,sp,-12
     5e8:	2805883a 	mov	r2,r5
     5ec:	dfc00015 	stw	ra,0(sp)
     5f0:	d9800115 	stw	r6,4(sp)
     5f4:	d9c00215 	stw	r7,8(sp)
     5f8:	21400217 	ldw	r5,8(r4)
     5fc:	d9c00104 	addi	r7,sp,4
     600:	100d883a 	mov	r6,r2
     604:	00007dc0 	call	7dc <___vfprintf_internal_r>
     608:	dfc00017 	ldw	ra,0(sp)
     60c:	dec00304 	addi	sp,sp,12
     610:	f800283a 	ret

00000614 <printf>:
     614:	defffc04 	addi	sp,sp,-16
     618:	dfc00015 	stw	ra,0(sp)
     61c:	d9400115 	stw	r5,4(sp)
     620:	d9800215 	stw	r6,8(sp)
     624:	d9c00315 	stw	r7,12(sp)
     628:	00800074 	movhi	r2,1
     62c:	1088f904 	addi	r2,r2,9188
     630:	10800017 	ldw	r2,0(r2)
     634:	200b883a 	mov	r5,r4
     638:	d9800104 	addi	r6,sp,4
     63c:	11000217 	ldw	r4,8(r2)
     640:	0002ab80 	call	2ab8 <__vfprintf_internal>
     644:	dfc00017 	ldw	ra,0(sp)
     648:	dec00404 	addi	sp,sp,16
     64c:	f800283a 	ret

00000650 <_putchar_r>:
     650:	21800217 	ldw	r6,8(r4)
     654:	000767c1 	jmpi	767c <_putc_r>

00000658 <putchar>:
     658:	00800074 	movhi	r2,1
     65c:	1088f904 	addi	r2,r2,9188
     660:	200b883a 	mov	r5,r4
     664:	11000017 	ldw	r4,0(r2)
     668:	21800217 	ldw	r6,8(r4)
     66c:	000767c1 	jmpi	767c <_putc_r>

00000670 <_puts_r>:
     670:	defff604 	addi	sp,sp,-40
     674:	dc000715 	stw	r16,28(sp)
     678:	2021883a 	mov	r16,r4
     67c:	2809883a 	mov	r4,r5
     680:	dc400815 	stw	r17,32(sp)
     684:	dfc00915 	stw	ra,36(sp)
     688:	2823883a 	mov	r17,r5
     68c:	00007440 	call	744 <strlen>
     690:	10c00044 	addi	r3,r2,1
     694:	d8800115 	stw	r2,4(sp)
     698:	00800074 	movhi	r2,1
     69c:	10818d04 	addi	r2,r2,1588
     6a0:	d8800215 	stw	r2,8(sp)
     6a4:	00800044 	movi	r2,1
     6a8:	d8800315 	stw	r2,12(sp)
     6ac:	00800084 	movi	r2,2
     6b0:	dc400015 	stw	r17,0(sp)
     6b4:	d8c00615 	stw	r3,24(sp)
     6b8:	dec00415 	stw	sp,16(sp)
     6bc:	d8800515 	stw	r2,20(sp)
     6c0:	80000226 	beq	r16,zero,6cc <_puts_r+0x5c>
     6c4:	80800e17 	ldw	r2,56(r16)
     6c8:	10001426 	beq	r2,zero,71c <_puts_r+0xac>
     6cc:	81400217 	ldw	r5,8(r16)
     6d0:	2880030b 	ldhu	r2,12(r5)
     6d4:	10c8000c 	andi	r3,r2,8192
     6d8:	1800061e 	bne	r3,zero,6f4 <_puts_r+0x84>
     6dc:	29001917 	ldw	r4,100(r5)
     6e0:	00f7ffc4 	movi	r3,-8193
     6e4:	10880014 	ori	r2,r2,8192
     6e8:	20c6703a 	and	r3,r4,r3
     6ec:	2880030d 	sth	r2,12(r5)
     6f0:	28c01915 	stw	r3,100(r5)
     6f4:	d9800404 	addi	r6,sp,16
     6f8:	8009883a 	mov	r4,r16
     6fc:	00050200 	call	5020 <__sfvwrite_r>
     700:	1000091e 	bne	r2,zero,728 <_puts_r+0xb8>
     704:	00800284 	movi	r2,10
     708:	dfc00917 	ldw	ra,36(sp)
     70c:	dc400817 	ldw	r17,32(sp)
     710:	dc000717 	ldw	r16,28(sp)
     714:	dec00a04 	addi	sp,sp,40
     718:	f800283a 	ret
     71c:	8009883a 	mov	r4,r16
     720:	0004b9c0 	call	4b9c <__sinit>
     724:	003fe906 	br	6cc <__alt_data_end+0xfffb72ec>
     728:	00bfffc4 	movi	r2,-1
     72c:	003ff606 	br	708 <__alt_data_end+0xfffb7328>

00000730 <puts>:
     730:	00800074 	movhi	r2,1
     734:	1088f904 	addi	r2,r2,9188
     738:	200b883a 	mov	r5,r4
     73c:	11000017 	ldw	r4,0(r2)
     740:	00006701 	jmpi	670 <_puts_r>

00000744 <strlen>:
     744:	208000cc 	andi	r2,r4,3
     748:	10002026 	beq	r2,zero,7cc <strlen+0x88>
     74c:	20800007 	ldb	r2,0(r4)
     750:	10002026 	beq	r2,zero,7d4 <strlen+0x90>
     754:	2005883a 	mov	r2,r4
     758:	00000206 	br	764 <strlen+0x20>
     75c:	10c00007 	ldb	r3,0(r2)
     760:	18001826 	beq	r3,zero,7c4 <strlen+0x80>
     764:	10800044 	addi	r2,r2,1
     768:	10c000cc 	andi	r3,r2,3
     76c:	183ffb1e 	bne	r3,zero,75c <__alt_data_end+0xfffb737c>
     770:	10c00017 	ldw	r3,0(r2)
     774:	01ffbff4 	movhi	r7,65279
     778:	39ffbfc4 	addi	r7,r7,-257
     77c:	00ca303a 	nor	r5,zero,r3
     780:	01a02074 	movhi	r6,32897
     784:	19c7883a 	add	r3,r3,r7
     788:	31a02004 	addi	r6,r6,-32640
     78c:	1946703a 	and	r3,r3,r5
     790:	1986703a 	and	r3,r3,r6
     794:	1800091e 	bne	r3,zero,7bc <strlen+0x78>
     798:	10800104 	addi	r2,r2,4
     79c:	10c00017 	ldw	r3,0(r2)
     7a0:	19cb883a 	add	r5,r3,r7
     7a4:	00c6303a 	nor	r3,zero,r3
     7a8:	28c6703a 	and	r3,r5,r3
     7ac:	1986703a 	and	r3,r3,r6
     7b0:	183ff926 	beq	r3,zero,798 <__alt_data_end+0xfffb73b8>
     7b4:	00000106 	br	7bc <strlen+0x78>
     7b8:	10800044 	addi	r2,r2,1
     7bc:	10c00007 	ldb	r3,0(r2)
     7c0:	183ffd1e 	bne	r3,zero,7b8 <__alt_data_end+0xfffb73d8>
     7c4:	1105c83a 	sub	r2,r2,r4
     7c8:	f800283a 	ret
     7cc:	2005883a 	mov	r2,r4
     7d0:	003fe706 	br	770 <__alt_data_end+0xfffb7390>
     7d4:	0005883a 	mov	r2,zero
     7d8:	f800283a 	ret

000007dc <___vfprintf_internal_r>:
     7dc:	deffb804 	addi	sp,sp,-288
     7e0:	dfc04715 	stw	ra,284(sp)
     7e4:	ddc04515 	stw	r23,276(sp)
     7e8:	dd404315 	stw	r21,268(sp)
     7ec:	d9002d15 	stw	r4,180(sp)
     7f0:	282f883a 	mov	r23,r5
     7f4:	302b883a 	mov	r21,r6
     7f8:	d9c02e15 	stw	r7,184(sp)
     7fc:	df004615 	stw	fp,280(sp)
     800:	dd804415 	stw	r22,272(sp)
     804:	dd004215 	stw	r20,264(sp)
     808:	dcc04115 	stw	r19,260(sp)
     80c:	dc804015 	stw	r18,256(sp)
     810:	dc403f15 	stw	r17,252(sp)
     814:	dc003e15 	stw	r16,248(sp)
     818:	000571c0 	call	571c <_localeconv_r>
     81c:	10800017 	ldw	r2,0(r2)
     820:	1009883a 	mov	r4,r2
     824:	d8803415 	stw	r2,208(sp)
     828:	00007440 	call	744 <strlen>
     82c:	d8803715 	stw	r2,220(sp)
     830:	d8802d17 	ldw	r2,180(sp)
     834:	10000226 	beq	r2,zero,840 <___vfprintf_internal_r+0x64>
     838:	10800e17 	ldw	r2,56(r2)
     83c:	1000fb26 	beq	r2,zero,c2c <___vfprintf_internal_r+0x450>
     840:	b880030b 	ldhu	r2,12(r23)
     844:	10c8000c 	andi	r3,r2,8192
     848:	1800061e 	bne	r3,zero,864 <___vfprintf_internal_r+0x88>
     84c:	b9001917 	ldw	r4,100(r23)
     850:	00f7ffc4 	movi	r3,-8193
     854:	10880014 	ori	r2,r2,8192
     858:	20c6703a 	and	r3,r4,r3
     85c:	b880030d 	sth	r2,12(r23)
     860:	b8c01915 	stw	r3,100(r23)
     864:	10c0020c 	andi	r3,r2,8
     868:	1800c326 	beq	r3,zero,b78 <___vfprintf_internal_r+0x39c>
     86c:	b8c00417 	ldw	r3,16(r23)
     870:	1800c126 	beq	r3,zero,b78 <___vfprintf_internal_r+0x39c>
     874:	1080068c 	andi	r2,r2,26
     878:	00c00284 	movi	r3,10
     87c:	10c0c626 	beq	r2,r3,b98 <___vfprintf_internal_r+0x3bc>
     880:	d8c00404 	addi	r3,sp,16
     884:	05000074 	movhi	r20,1
     888:	d9001e04 	addi	r4,sp,120
     88c:	a5019e84 	addi	r20,r20,1658
     890:	d8c01e15 	stw	r3,120(sp)
     894:	d8002015 	stw	zero,128(sp)
     898:	d8001f15 	stw	zero,124(sp)
     89c:	d8003315 	stw	zero,204(sp)
     8a0:	d8003615 	stw	zero,216(sp)
     8a4:	d8003815 	stw	zero,224(sp)
     8a8:	1811883a 	mov	r8,r3
     8ac:	d8003915 	stw	zero,228(sp)
     8b0:	d8003a15 	stw	zero,232(sp)
     8b4:	d8002f15 	stw	zero,188(sp)
     8b8:	d9002815 	stw	r4,160(sp)
     8bc:	a8800007 	ldb	r2,0(r21)
     8c0:	10028b26 	beq	r2,zero,12f0 <___vfprintf_internal_r+0xb14>
     8c4:	00c00944 	movi	r3,37
     8c8:	a823883a 	mov	r17,r21
     8cc:	10c0021e 	bne	r2,r3,8d8 <___vfprintf_internal_r+0xfc>
     8d0:	00001406 	br	924 <___vfprintf_internal_r+0x148>
     8d4:	10c00326 	beq	r2,r3,8e4 <___vfprintf_internal_r+0x108>
     8d8:	8c400044 	addi	r17,r17,1
     8dc:	88800007 	ldb	r2,0(r17)
     8e0:	103ffc1e 	bne	r2,zero,8d4 <__alt_data_end+0xfffb74f4>
     8e4:	8d61c83a 	sub	r16,r17,r21
     8e8:	80000e26 	beq	r16,zero,924 <___vfprintf_internal_r+0x148>
     8ec:	d8c02017 	ldw	r3,128(sp)
     8f0:	d8801f17 	ldw	r2,124(sp)
     8f4:	45400015 	stw	r21,0(r8)
     8f8:	1c07883a 	add	r3,r3,r16
     8fc:	10800044 	addi	r2,r2,1
     900:	d8c02015 	stw	r3,128(sp)
     904:	44000115 	stw	r16,4(r8)
     908:	d8801f15 	stw	r2,124(sp)
     90c:	00c001c4 	movi	r3,7
     910:	1880a916 	blt	r3,r2,bb8 <___vfprintf_internal_r+0x3dc>
     914:	42000204 	addi	r8,r8,8
     918:	d9402f17 	ldw	r5,188(sp)
     91c:	2c0b883a 	add	r5,r5,r16
     920:	d9402f15 	stw	r5,188(sp)
     924:	88800007 	ldb	r2,0(r17)
     928:	1000aa26 	beq	r2,zero,bd4 <___vfprintf_internal_r+0x3f8>
     92c:	8d400044 	addi	r21,r17,1
     930:	8c400047 	ldb	r17,1(r17)
     934:	0021883a 	mov	r16,zero
     938:	00bfffc4 	movi	r2,-1
     93c:	0025883a 	mov	r18,zero
     940:	dc002905 	stb	r16,164(sp)
     944:	d8002785 	stb	zero,158(sp)
     948:	d8002b05 	stb	zero,172(sp)
     94c:	d8802a15 	stw	r2,168(sp)
     950:	d8003115 	stw	zero,196(sp)
     954:	04c01604 	movi	r19,88
     958:	05800244 	movi	r22,9
     95c:	9021883a 	mov	r16,r18
     960:	4039883a 	mov	fp,r8
     964:	ad400044 	addi	r21,r21,1
     968:	88bff804 	addi	r2,r17,-32
     96c:	98833236 	bltu	r19,r2,1638 <___vfprintf_internal_r+0xe5c>
     970:	100490ba 	slli	r2,r2,2
     974:	00c00034 	movhi	r3,0
     978:	18c26204 	addi	r3,r3,2440
     97c:	10c5883a 	add	r2,r2,r3
     980:	10800017 	ldw	r2,0(r2)
     984:	1000683a 	jmp	r2
     988:	00001530 	cmpltui	zero,zero,84
     98c:	00001638 	rdprs	zero,zero,88
     990:	00001638 	rdprs	zero,zero,88
     994:	00001550 	cmplti	zero,zero,85
     998:	00001638 	rdprs	zero,zero,88
     99c:	00001638 	rdprs	zero,zero,88
     9a0:	00001638 	rdprs	zero,zero,88
     9a4:	00001638 	rdprs	zero,zero,88
     9a8:	00001638 	rdprs	zero,zero,88
     9ac:	00001638 	rdprs	zero,zero,88
     9b0:	00000c38 	rdprs	zero,zero,48
     9b4:	00001440 	call	144 <alt_irq_handler+0x48>
     9b8:	00001638 	rdprs	zero,zero,88
     9bc:	00000afc 	xorhi	zero,zero,43
     9c0:	00000c5c 	xori	zero,zero,49
     9c4:	00001638 	rdprs	zero,zero,88
     9c8:	00000cac 	andhi	zero,zero,50
     9cc:	00000cb8 	rdprs	zero,zero,50
     9d0:	00000cb8 	rdprs	zero,zero,50
     9d4:	00000cb8 	rdprs	zero,zero,50
     9d8:	00000cb8 	rdprs	zero,zero,50
     9dc:	00000cb8 	rdprs	zero,zero,50
     9e0:	00000cb8 	rdprs	zero,zero,50
     9e4:	00000cb8 	rdprs	zero,zero,50
     9e8:	00000cb8 	rdprs	zero,zero,50
     9ec:	00000cb8 	rdprs	zero,zero,50
     9f0:	00001638 	rdprs	zero,zero,88
     9f4:	00001638 	rdprs	zero,zero,88
     9f8:	00001638 	rdprs	zero,zero,88
     9fc:	00001638 	rdprs	zero,zero,88
     a00:	00001638 	rdprs	zero,zero,88
     a04:	00001638 	rdprs	zero,zero,88
     a08:	00001638 	rdprs	zero,zero,88
     a0c:	00001638 	rdprs	zero,zero,88
     a10:	00001638 	rdprs	zero,zero,88
     a14:	00001638 	rdprs	zero,zero,88
     a18:	00000cf4 	movhi	zero,51
     a1c:	00000dbc 	xorhi	zero,zero,54
     a20:	00001638 	rdprs	zero,zero,88
     a24:	00000dbc 	xorhi	zero,zero,54
     a28:	00001638 	rdprs	zero,zero,88
     a2c:	00001638 	rdprs	zero,zero,88
     a30:	00001638 	rdprs	zero,zero,88
     a34:	00001638 	rdprs	zero,zero,88
     a38:	00000e68 	cmpgeui	zero,zero,57
     a3c:	00001638 	rdprs	zero,zero,88
     a40:	00001638 	rdprs	zero,zero,88
     a44:	00000e74 	movhi	zero,57
     a48:	00001638 	rdprs	zero,zero,88
     a4c:	00001638 	rdprs	zero,zero,88
     a50:	00001638 	rdprs	zero,zero,88
     a54:	00001638 	rdprs	zero,zero,88
     a58:	00001638 	rdprs	zero,zero,88
     a5c:	000012f8 	rdprs	zero,zero,75
     a60:	00001638 	rdprs	zero,zero,88
     a64:	00001638 	rdprs	zero,zero,88
     a68:	00001364 	muli	zero,zero,77
     a6c:	00001638 	rdprs	zero,zero,88
     a70:	00001638 	rdprs	zero,zero,88
     a74:	00001638 	rdprs	zero,zero,88
     a78:	00001638 	rdprs	zero,zero,88
     a7c:	00001638 	rdprs	zero,zero,88
     a80:	00001638 	rdprs	zero,zero,88
     a84:	00001638 	rdprs	zero,zero,88
     a88:	00001638 	rdprs	zero,zero,88
     a8c:	00001638 	rdprs	zero,zero,88
     a90:	00001638 	rdprs	zero,zero,88
     a94:	000015dc 	xori	zero,zero,87
     a98:	0000155c 	xori	zero,zero,85
     a9c:	00000dbc 	xorhi	zero,zero,54
     aa0:	00000dbc 	xorhi	zero,zero,54
     aa4:	00000dbc 	xorhi	zero,zero,54
     aa8:	0000157c 	xorhi	zero,zero,85
     aac:	0000155c 	xori	zero,zero,85
     ab0:	00001638 	rdprs	zero,zero,88
     ab4:	00001638 	rdprs	zero,zero,88
     ab8:	00001588 	cmpgei	zero,zero,86
     abc:	00001638 	rdprs	zero,zero,88
     ac0:	0000159c 	xori	zero,zero,86
     ac4:	00001420 	cmpeqi	zero,zero,80
     ac8:	00000b08 	cmpgei	zero,zero,44
     acc:	00001458 	cmpnei	zero,zero,81
     ad0:	00001638 	rdprs	zero,zero,88
     ad4:	00001464 	muli	zero,zero,81
     ad8:	00001638 	rdprs	zero,zero,88
     adc:	000014c8 	cmpgei	zero,zero,83
     ae0:	00001638 	rdprs	zero,zero,88
     ae4:	00001638 	rdprs	zero,zero,88
     ae8:	000014e8 	cmpgeui	zero,zero,83
     aec:	d8c03117 	ldw	r3,196(sp)
     af0:	d8802e15 	stw	r2,184(sp)
     af4:	00c7c83a 	sub	r3,zero,r3
     af8:	d8c03115 	stw	r3,196(sp)
     afc:	84000114 	ori	r16,r16,4
     b00:	ac400007 	ldb	r17,0(r21)
     b04:	003f9706 	br	964 <__alt_data_end+0xfffb7584>
     b08:	00800c04 	movi	r2,48
     b0c:	d8802705 	stb	r2,156(sp)
     b10:	00801e04 	movi	r2,120
     b14:	d8802745 	stb	r2,157(sp)
     b18:	d9002a17 	ldw	r4,168(sp)
     b1c:	d8802e17 	ldw	r2,184(sp)
     b20:	d8002785 	stb	zero,158(sp)
     b24:	e011883a 	mov	r8,fp
     b28:	10c00104 	addi	r3,r2,4
     b2c:	14c00017 	ldw	r19,0(r2)
     b30:	002d883a 	mov	r22,zero
     b34:	80800094 	ori	r2,r16,2
     b38:	2002ca16 	blt	r4,zero,1664 <___vfprintf_internal_r+0xe88>
     b3c:	00bfdfc4 	movi	r2,-129
     b40:	80a4703a 	and	r18,r16,r2
     b44:	d8c02e15 	stw	r3,184(sp)
     b48:	94800094 	ori	r18,r18,2
     b4c:	9802b41e 	bne	r19,zero,1620 <___vfprintf_internal_r+0xe44>
     b50:	01400074 	movhi	r5,1
     b54:	29419704 	addi	r5,r5,1628
     b58:	d9403915 	stw	r5,228(sp)
     b5c:	04401e04 	movi	r17,120
     b60:	d8802a17 	ldw	r2,168(sp)
     b64:	0039883a 	mov	fp,zero
     b68:	1001fa26 	beq	r2,zero,1354 <___vfprintf_internal_r+0xb78>
     b6c:	0027883a 	mov	r19,zero
     b70:	002d883a 	mov	r22,zero
     b74:	00021906 	br	13dc <___vfprintf_internal_r+0xc00>
     b78:	d9002d17 	ldw	r4,180(sp)
     b7c:	b80b883a 	mov	r5,r23
     b80:	0002b900 	call	2b90 <__swsetup_r>
     b84:	1005dc1e 	bne	r2,zero,22f8 <___vfprintf_internal_r+0x1b1c>
     b88:	b880030b 	ldhu	r2,12(r23)
     b8c:	00c00284 	movi	r3,10
     b90:	1080068c 	andi	r2,r2,26
     b94:	10ff3a1e 	bne	r2,r3,880 <__alt_data_end+0xfffb74a0>
     b98:	b880038f 	ldh	r2,14(r23)
     b9c:	103f3816 	blt	r2,zero,880 <__alt_data_end+0xfffb74a0>
     ba0:	d9c02e17 	ldw	r7,184(sp)
     ba4:	d9002d17 	ldw	r4,180(sp)
     ba8:	a80d883a 	mov	r6,r21
     bac:	b80b883a 	mov	r5,r23
     bb0:	0002ad40 	call	2ad4 <__sbprintf>
     bb4:	00001106 	br	bfc <___vfprintf_internal_r+0x420>
     bb8:	d9002d17 	ldw	r4,180(sp)
     bbc:	d9801e04 	addi	r6,sp,120
     bc0:	b80b883a 	mov	r5,r23
     bc4:	00081240 	call	8124 <__sprint_r>
     bc8:	1000081e 	bne	r2,zero,bec <___vfprintf_internal_r+0x410>
     bcc:	da000404 	addi	r8,sp,16
     bd0:	003f5106 	br	918 <__alt_data_end+0xfffb7538>
     bd4:	d8802017 	ldw	r2,128(sp)
     bd8:	10000426 	beq	r2,zero,bec <___vfprintf_internal_r+0x410>
     bdc:	d9002d17 	ldw	r4,180(sp)
     be0:	d9801e04 	addi	r6,sp,120
     be4:	b80b883a 	mov	r5,r23
     be8:	00081240 	call	8124 <__sprint_r>
     bec:	b880030b 	ldhu	r2,12(r23)
     bf0:	1080100c 	andi	r2,r2,64
     bf4:	1005c01e 	bne	r2,zero,22f8 <___vfprintf_internal_r+0x1b1c>
     bf8:	d8802f17 	ldw	r2,188(sp)
     bfc:	dfc04717 	ldw	ra,284(sp)
     c00:	df004617 	ldw	fp,280(sp)
     c04:	ddc04517 	ldw	r23,276(sp)
     c08:	dd804417 	ldw	r22,272(sp)
     c0c:	dd404317 	ldw	r21,268(sp)
     c10:	dd004217 	ldw	r20,264(sp)
     c14:	dcc04117 	ldw	r19,260(sp)
     c18:	dc804017 	ldw	r18,256(sp)
     c1c:	dc403f17 	ldw	r17,252(sp)
     c20:	dc003e17 	ldw	r16,248(sp)
     c24:	dec04804 	addi	sp,sp,288
     c28:	f800283a 	ret
     c2c:	d9002d17 	ldw	r4,180(sp)
     c30:	0004b9c0 	call	4b9c <__sinit>
     c34:	003f0206 	br	840 <__alt_data_end+0xfffb7460>
     c38:	d9002e17 	ldw	r4,184(sp)
     c3c:	d9402e17 	ldw	r5,184(sp)
     c40:	21000017 	ldw	r4,0(r4)
     c44:	28800104 	addi	r2,r5,4
     c48:	d9003115 	stw	r4,196(sp)
     c4c:	203fa716 	blt	r4,zero,aec <__alt_data_end+0xfffb770c>
     c50:	d8802e15 	stw	r2,184(sp)
     c54:	ac400007 	ldb	r17,0(r21)
     c58:	003f4206 	br	964 <__alt_data_end+0xfffb7584>
     c5c:	ac400007 	ldb	r17,0(r21)
     c60:	01000a84 	movi	r4,42
     c64:	a8c00044 	addi	r3,r21,1
     c68:	89075826 	beq	r17,r4,29cc <___vfprintf_internal_r+0x21f0>
     c6c:	8cbff404 	addi	r18,r17,-48
     c70:	b486ae36 	bltu	r22,r18,272c <___vfprintf_internal_r+0x1f50>
     c74:	0009883a 	mov	r4,zero
     c78:	1823883a 	mov	r17,r3
     c7c:	01400284 	movi	r5,10
     c80:	000ade00 	call	ade0 <__mulsi3>
     c84:	88c00007 	ldb	r3,0(r17)
     c88:	1489883a 	add	r4,r2,r18
     c8c:	8d400044 	addi	r21,r17,1
     c90:	1cbff404 	addi	r18,r3,-48
     c94:	a823883a 	mov	r17,r21
     c98:	b4bff82e 	bgeu	r22,r18,c7c <__alt_data_end+0xfffb789c>
     c9c:	1823883a 	mov	r17,r3
     ca0:	2005f616 	blt	r4,zero,247c <___vfprintf_internal_r+0x1ca0>
     ca4:	d9002a15 	stw	r4,168(sp)
     ca8:	003f2f06 	br	968 <__alt_data_end+0xfffb7588>
     cac:	84002014 	ori	r16,r16,128
     cb0:	ac400007 	ldb	r17,0(r21)
     cb4:	003f2b06 	br	964 <__alt_data_end+0xfffb7584>
     cb8:	8cbff404 	addi	r18,r17,-48
     cbc:	d8003115 	stw	zero,196(sp)
     cc0:	0009883a 	mov	r4,zero
     cc4:	a823883a 	mov	r17,r21
     cc8:	01400284 	movi	r5,10
     ccc:	000ade00 	call	ade0 <__mulsi3>
     cd0:	88c00007 	ldb	r3,0(r17)
     cd4:	9089883a 	add	r4,r18,r2
     cd8:	ad400044 	addi	r21,r21,1
     cdc:	1cbff404 	addi	r18,r3,-48
     ce0:	a823883a 	mov	r17,r21
     ce4:	b4bff82e 	bgeu	r22,r18,cc8 <__alt_data_end+0xfffb78e8>
     ce8:	1823883a 	mov	r17,r3
     cec:	d9003115 	stw	r4,196(sp)
     cf0:	003f1d06 	br	968 <__alt_data_end+0xfffb7588>
     cf4:	8025883a 	mov	r18,r16
     cf8:	dc002903 	ldbu	r16,164(sp)
     cfc:	e011883a 	mov	r8,fp
     d00:	84003fcc 	andi	r16,r16,255
     d04:	8007531e 	bne	r16,zero,2a54 <___vfprintf_internal_r+0x2278>
     d08:	94800414 	ori	r18,r18,16
     d0c:	9080080c 	andi	r2,r18,32
     d10:	1003a326 	beq	r2,zero,1ba0 <___vfprintf_internal_r+0x13c4>
     d14:	d9002e17 	ldw	r4,184(sp)
     d18:	20800117 	ldw	r2,4(r4)
     d1c:	24c00017 	ldw	r19,0(r4)
     d20:	21000204 	addi	r4,r4,8
     d24:	d9002e15 	stw	r4,184(sp)
     d28:	102d883a 	mov	r22,r2
     d2c:	10047316 	blt	r2,zero,1efc <___vfprintf_internal_r+0x1720>
     d30:	d9002a17 	ldw	r4,168(sp)
     d34:	df002783 	ldbu	fp,158(sp)
     d38:	2003e416 	blt	r4,zero,1ccc <___vfprintf_internal_r+0x14f0>
     d3c:	00ffdfc4 	movi	r3,-129
     d40:	9d84b03a 	or	r2,r19,r22
     d44:	90e4703a 	and	r18,r18,r3
     d48:	10018026 	beq	r2,zero,134c <___vfprintf_internal_r+0xb70>
     d4c:	b003ab26 	beq	r22,zero,1bfc <___vfprintf_internal_r+0x1420>
     d50:	dc402915 	stw	r17,164(sp)
     d54:	dc001e04 	addi	r16,sp,120
     d58:	b023883a 	mov	r17,r22
     d5c:	402d883a 	mov	r22,r8
     d60:	9809883a 	mov	r4,r19
     d64:	880b883a 	mov	r5,r17
     d68:	01800284 	movi	r6,10
     d6c:	000f883a 	mov	r7,zero
     d70:	000a6680 	call	a668 <__umoddi3>
     d74:	10800c04 	addi	r2,r2,48
     d78:	843fffc4 	addi	r16,r16,-1
     d7c:	9809883a 	mov	r4,r19
     d80:	880b883a 	mov	r5,r17
     d84:	80800005 	stb	r2,0(r16)
     d88:	01800284 	movi	r6,10
     d8c:	000f883a 	mov	r7,zero
     d90:	000a06c0 	call	a06c <__udivdi3>
     d94:	1027883a 	mov	r19,r2
     d98:	10c4b03a 	or	r2,r2,r3
     d9c:	1823883a 	mov	r17,r3
     da0:	103fef1e 	bne	r2,zero,d60 <__alt_data_end+0xfffb7980>
     da4:	d8c02817 	ldw	r3,160(sp)
     da8:	dc402917 	ldw	r17,164(sp)
     dac:	b011883a 	mov	r8,r22
     db0:	1c07c83a 	sub	r3,r3,r16
     db4:	d8c02b15 	stw	r3,172(sp)
     db8:	00005f06 	br	f38 <___vfprintf_internal_r+0x75c>
     dbc:	8025883a 	mov	r18,r16
     dc0:	dc002903 	ldbu	r16,164(sp)
     dc4:	e011883a 	mov	r8,fp
     dc8:	84003fcc 	andi	r16,r16,255
     dcc:	80071e1e 	bne	r16,zero,2a48 <___vfprintf_internal_r+0x226c>
     dd0:	9080020c 	andi	r2,r18,8
     dd4:	1004af26 	beq	r2,zero,2094 <___vfprintf_internal_r+0x18b8>
     dd8:	d9002e17 	ldw	r4,184(sp)
     ddc:	d9402e17 	ldw	r5,184(sp)
     de0:	d8802e17 	ldw	r2,184(sp)
     de4:	21000017 	ldw	r4,0(r4)
     de8:	29400117 	ldw	r5,4(r5)
     dec:	10800204 	addi	r2,r2,8
     df0:	d9003615 	stw	r4,216(sp)
     df4:	d9403815 	stw	r5,224(sp)
     df8:	d8802e15 	stw	r2,184(sp)
     dfc:	d9003617 	ldw	r4,216(sp)
     e00:	d9403817 	ldw	r5,224(sp)
     e04:	da003d15 	stw	r8,244(sp)
     e08:	04000044 	movi	r16,1
     e0c:	0007d480 	call	7d48 <__fpclassifyd>
     e10:	da003d17 	ldw	r8,244(sp)
     e14:	1404441e 	bne	r2,r16,1f28 <___vfprintf_internal_r+0x174c>
     e18:	d9003617 	ldw	r4,216(sp)
     e1c:	d9403817 	ldw	r5,224(sp)
     e20:	000d883a 	mov	r6,zero
     e24:	000f883a 	mov	r7,zero
     e28:	000c1e80 	call	c1e8 <__ledf2>
     e2c:	da003d17 	ldw	r8,244(sp)
     e30:	1005e316 	blt	r2,zero,25c0 <___vfprintf_internal_r+0x1de4>
     e34:	df002783 	ldbu	fp,158(sp)
     e38:	008011c4 	movi	r2,71
     e3c:	1445580e 	bge	r2,r17,23a0 <___vfprintf_internal_r+0x1bc4>
     e40:	04000074 	movhi	r16,1
     e44:	84018f04 	addi	r16,r16,1596
     e48:	00c000c4 	movi	r3,3
     e4c:	00bfdfc4 	movi	r2,-129
     e50:	d8c02915 	stw	r3,164(sp)
     e54:	90a4703a 	and	r18,r18,r2
     e58:	d8c02b15 	stw	r3,172(sp)
     e5c:	d8002a15 	stw	zero,168(sp)
     e60:	d8003215 	stw	zero,200(sp)
     e64:	00003a06 	br	f50 <___vfprintf_internal_r+0x774>
     e68:	84000214 	ori	r16,r16,8
     e6c:	ac400007 	ldb	r17,0(r21)
     e70:	003ebc06 	br	964 <__alt_data_end+0xfffb7584>
     e74:	8025883a 	mov	r18,r16
     e78:	dc002903 	ldbu	r16,164(sp)
     e7c:	e011883a 	mov	r8,fp
     e80:	84003fcc 	andi	r16,r16,255
     e84:	8007001e 	bne	r16,zero,2a88 <___vfprintf_internal_r+0x22ac>
     e88:	94800414 	ori	r18,r18,16
     e8c:	9080080c 	andi	r2,r18,32
     e90:	1002fa26 	beq	r2,zero,1a7c <___vfprintf_internal_r+0x12a0>
     e94:	d9002e17 	ldw	r4,184(sp)
     e98:	d9402a17 	ldw	r5,168(sp)
     e9c:	d8002785 	stb	zero,158(sp)
     ea0:	20800204 	addi	r2,r4,8
     ea4:	24c00017 	ldw	r19,0(r4)
     ea8:	25800117 	ldw	r22,4(r4)
     eac:	2804b116 	blt	r5,zero,2174 <___vfprintf_internal_r+0x1998>
     eb0:	013fdfc4 	movi	r4,-129
     eb4:	9d86b03a 	or	r3,r19,r22
     eb8:	d8802e15 	stw	r2,184(sp)
     ebc:	9124703a 	and	r18,r18,r4
     ec0:	1802fb1e 	bne	r3,zero,1ab0 <___vfprintf_internal_r+0x12d4>
     ec4:	d8c02a17 	ldw	r3,168(sp)
     ec8:	0039883a 	mov	fp,zero
     ecc:	1805e526 	beq	r3,zero,2664 <___vfprintf_internal_r+0x1e88>
     ed0:	0027883a 	mov	r19,zero
     ed4:	002d883a 	mov	r22,zero
     ed8:	dc001e04 	addi	r16,sp,120
     edc:	9806d0fa 	srli	r3,r19,3
     ee0:	b008977a 	slli	r4,r22,29
     ee4:	b02cd0fa 	srli	r22,r22,3
     ee8:	9cc001cc 	andi	r19,r19,7
     eec:	98800c04 	addi	r2,r19,48
     ef0:	843fffc4 	addi	r16,r16,-1
     ef4:	20e6b03a 	or	r19,r4,r3
     ef8:	80800005 	stb	r2,0(r16)
     efc:	9d86b03a 	or	r3,r19,r22
     f00:	183ff61e 	bne	r3,zero,edc <__alt_data_end+0xfffb7afc>
     f04:	90c0004c 	andi	r3,r18,1
     f08:	18014126 	beq	r3,zero,1410 <___vfprintf_internal_r+0xc34>
     f0c:	10803fcc 	andi	r2,r2,255
     f10:	1080201c 	xori	r2,r2,128
     f14:	10bfe004 	addi	r2,r2,-128
     f18:	00c00c04 	movi	r3,48
     f1c:	10c13c26 	beq	r2,r3,1410 <___vfprintf_internal_r+0xc34>
     f20:	80ffffc5 	stb	r3,-1(r16)
     f24:	d8c02817 	ldw	r3,160(sp)
     f28:	80bfffc4 	addi	r2,r16,-1
     f2c:	1021883a 	mov	r16,r2
     f30:	1887c83a 	sub	r3,r3,r2
     f34:	d8c02b15 	stw	r3,172(sp)
     f38:	d8802b17 	ldw	r2,172(sp)
     f3c:	d9002a17 	ldw	r4,168(sp)
     f40:	1100010e 	bge	r2,r4,f48 <___vfprintf_internal_r+0x76c>
     f44:	2005883a 	mov	r2,r4
     f48:	d8802915 	stw	r2,164(sp)
     f4c:	d8003215 	stw	zero,200(sp)
     f50:	e7003fcc 	andi	fp,fp,255
     f54:	e700201c 	xori	fp,fp,128
     f58:	e73fe004 	addi	fp,fp,-128
     f5c:	e0000326 	beq	fp,zero,f6c <___vfprintf_internal_r+0x790>
     f60:	d8c02917 	ldw	r3,164(sp)
     f64:	18c00044 	addi	r3,r3,1
     f68:	d8c02915 	stw	r3,164(sp)
     f6c:	90c0008c 	andi	r3,r18,2
     f70:	d8c02c15 	stw	r3,176(sp)
     f74:	18000326 	beq	r3,zero,f84 <___vfprintf_internal_r+0x7a8>
     f78:	d8c02917 	ldw	r3,164(sp)
     f7c:	18c00084 	addi	r3,r3,2
     f80:	d8c02915 	stw	r3,164(sp)
     f84:	90c0210c 	andi	r3,r18,132
     f88:	d8c03015 	stw	r3,192(sp)
     f8c:	1801c51e 	bne	r3,zero,16a4 <___vfprintf_internal_r+0xec8>
     f90:	d9003117 	ldw	r4,196(sp)
     f94:	d8c02917 	ldw	r3,164(sp)
     f98:	20e7c83a 	sub	r19,r4,r3
     f9c:	04c1c10e 	bge	zero,r19,16a4 <___vfprintf_internal_r+0xec8>
     fa0:	02400404 	movi	r9,16
     fa4:	d8c02017 	ldw	r3,128(sp)
     fa8:	d8801f17 	ldw	r2,124(sp)
     fac:	4cc52f0e 	bge	r9,r19,246c <___vfprintf_internal_r+0x1c90>
     fb0:	01400074 	movhi	r5,1
     fb4:	2941a284 	addi	r5,r5,1674
     fb8:	dc403b15 	stw	r17,236(sp)
     fbc:	d9403515 	stw	r5,212(sp)
     fc0:	9823883a 	mov	r17,r19
     fc4:	482d883a 	mov	r22,r9
     fc8:	9027883a 	mov	r19,r18
     fcc:	070001c4 	movi	fp,7
     fd0:	8025883a 	mov	r18,r16
     fd4:	dc002d17 	ldw	r16,180(sp)
     fd8:	00000306 	br	fe8 <___vfprintf_internal_r+0x80c>
     fdc:	8c7ffc04 	addi	r17,r17,-16
     fe0:	42000204 	addi	r8,r8,8
     fe4:	b440130e 	bge	r22,r17,1034 <___vfprintf_internal_r+0x858>
     fe8:	01000074 	movhi	r4,1
     fec:	18c00404 	addi	r3,r3,16
     ff0:	10800044 	addi	r2,r2,1
     ff4:	2101a284 	addi	r4,r4,1674
     ff8:	41000015 	stw	r4,0(r8)
     ffc:	45800115 	stw	r22,4(r8)
    1000:	d8c02015 	stw	r3,128(sp)
    1004:	d8801f15 	stw	r2,124(sp)
    1008:	e0bff40e 	bge	fp,r2,fdc <__alt_data_end+0xfffb7bfc>
    100c:	d9801e04 	addi	r6,sp,120
    1010:	b80b883a 	mov	r5,r23
    1014:	8009883a 	mov	r4,r16
    1018:	00081240 	call	8124 <__sprint_r>
    101c:	103ef31e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    1020:	8c7ffc04 	addi	r17,r17,-16
    1024:	d8c02017 	ldw	r3,128(sp)
    1028:	d8801f17 	ldw	r2,124(sp)
    102c:	da000404 	addi	r8,sp,16
    1030:	b47fed16 	blt	r22,r17,fe8 <__alt_data_end+0xfffb7c08>
    1034:	9021883a 	mov	r16,r18
    1038:	9825883a 	mov	r18,r19
    103c:	8827883a 	mov	r19,r17
    1040:	dc403b17 	ldw	r17,236(sp)
    1044:	d9403517 	ldw	r5,212(sp)
    1048:	98c7883a 	add	r3,r19,r3
    104c:	10800044 	addi	r2,r2,1
    1050:	41400015 	stw	r5,0(r8)
    1054:	44c00115 	stw	r19,4(r8)
    1058:	d8c02015 	stw	r3,128(sp)
    105c:	d8801f15 	stw	r2,124(sp)
    1060:	010001c4 	movi	r4,7
    1064:	2082c516 	blt	r4,r2,1b7c <___vfprintf_internal_r+0x13a0>
    1068:	df002787 	ldb	fp,158(sp)
    106c:	42000204 	addi	r8,r8,8
    1070:	e0000c26 	beq	fp,zero,10a4 <___vfprintf_internal_r+0x8c8>
    1074:	d8801f17 	ldw	r2,124(sp)
    1078:	d9002784 	addi	r4,sp,158
    107c:	18c00044 	addi	r3,r3,1
    1080:	10800044 	addi	r2,r2,1
    1084:	41000015 	stw	r4,0(r8)
    1088:	01000044 	movi	r4,1
    108c:	41000115 	stw	r4,4(r8)
    1090:	d8c02015 	stw	r3,128(sp)
    1094:	d8801f15 	stw	r2,124(sp)
    1098:	010001c4 	movi	r4,7
    109c:	20825e16 	blt	r4,r2,1a18 <___vfprintf_internal_r+0x123c>
    10a0:	42000204 	addi	r8,r8,8
    10a4:	d8802c17 	ldw	r2,176(sp)
    10a8:	10000c26 	beq	r2,zero,10dc <___vfprintf_internal_r+0x900>
    10ac:	d8801f17 	ldw	r2,124(sp)
    10b0:	d9002704 	addi	r4,sp,156
    10b4:	18c00084 	addi	r3,r3,2
    10b8:	10800044 	addi	r2,r2,1
    10bc:	41000015 	stw	r4,0(r8)
    10c0:	01000084 	movi	r4,2
    10c4:	41000115 	stw	r4,4(r8)
    10c8:	d8c02015 	stw	r3,128(sp)
    10cc:	d8801f15 	stw	r2,124(sp)
    10d0:	010001c4 	movi	r4,7
    10d4:	20825816 	blt	r4,r2,1a38 <___vfprintf_internal_r+0x125c>
    10d8:	42000204 	addi	r8,r8,8
    10dc:	d9003017 	ldw	r4,192(sp)
    10e0:	00802004 	movi	r2,128
    10e4:	2081bb26 	beq	r4,r2,17d4 <___vfprintf_internal_r+0xff8>
    10e8:	d9402a17 	ldw	r5,168(sp)
    10ec:	d8802b17 	ldw	r2,172(sp)
    10f0:	28adc83a 	sub	r22,r5,r2
    10f4:	0580310e 	bge	zero,r22,11bc <___vfprintf_internal_r+0x9e0>
    10f8:	07000404 	movi	fp,16
    10fc:	d8801f17 	ldw	r2,124(sp)
    1100:	e584360e 	bge	fp,r22,21dc <___vfprintf_internal_r+0x1a00>
    1104:	01400074 	movhi	r5,1
    1108:	29419e84 	addi	r5,r5,1658
    110c:	dc402a15 	stw	r17,168(sp)
    1110:	d9402c15 	stw	r5,176(sp)
    1114:	b023883a 	mov	r17,r22
    1118:	04c001c4 	movi	r19,7
    111c:	a82d883a 	mov	r22,r21
    1120:	902b883a 	mov	r21,r18
    1124:	8025883a 	mov	r18,r16
    1128:	dc002d17 	ldw	r16,180(sp)
    112c:	00000306 	br	113c <___vfprintf_internal_r+0x960>
    1130:	8c7ffc04 	addi	r17,r17,-16
    1134:	42000204 	addi	r8,r8,8
    1138:	e440110e 	bge	fp,r17,1180 <___vfprintf_internal_r+0x9a4>
    113c:	18c00404 	addi	r3,r3,16
    1140:	10800044 	addi	r2,r2,1
    1144:	45000015 	stw	r20,0(r8)
    1148:	47000115 	stw	fp,4(r8)
    114c:	d8c02015 	stw	r3,128(sp)
    1150:	d8801f15 	stw	r2,124(sp)
    1154:	98bff60e 	bge	r19,r2,1130 <__alt_data_end+0xfffb7d50>
    1158:	d9801e04 	addi	r6,sp,120
    115c:	b80b883a 	mov	r5,r23
    1160:	8009883a 	mov	r4,r16
    1164:	00081240 	call	8124 <__sprint_r>
    1168:	103ea01e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    116c:	8c7ffc04 	addi	r17,r17,-16
    1170:	d8c02017 	ldw	r3,128(sp)
    1174:	d8801f17 	ldw	r2,124(sp)
    1178:	da000404 	addi	r8,sp,16
    117c:	e47fef16 	blt	fp,r17,113c <__alt_data_end+0xfffb7d5c>
    1180:	9021883a 	mov	r16,r18
    1184:	a825883a 	mov	r18,r21
    1188:	b02b883a 	mov	r21,r22
    118c:	882d883a 	mov	r22,r17
    1190:	dc402a17 	ldw	r17,168(sp)
    1194:	d9002c17 	ldw	r4,176(sp)
    1198:	1d87883a 	add	r3,r3,r22
    119c:	10800044 	addi	r2,r2,1
    11a0:	41000015 	stw	r4,0(r8)
    11a4:	45800115 	stw	r22,4(r8)
    11a8:	d8c02015 	stw	r3,128(sp)
    11ac:	d8801f15 	stw	r2,124(sp)
    11b0:	010001c4 	movi	r4,7
    11b4:	20821016 	blt	r4,r2,19f8 <___vfprintf_internal_r+0x121c>
    11b8:	42000204 	addi	r8,r8,8
    11bc:	9080400c 	andi	r2,r18,256
    11c0:	10013a1e 	bne	r2,zero,16ac <___vfprintf_internal_r+0xed0>
    11c4:	d9402b17 	ldw	r5,172(sp)
    11c8:	d8801f17 	ldw	r2,124(sp)
    11cc:	44000015 	stw	r16,0(r8)
    11d0:	1947883a 	add	r3,r3,r5
    11d4:	10800044 	addi	r2,r2,1
    11d8:	41400115 	stw	r5,4(r8)
    11dc:	d8c02015 	stw	r3,128(sp)
    11e0:	d8801f15 	stw	r2,124(sp)
    11e4:	010001c4 	movi	r4,7
    11e8:	2081f516 	blt	r4,r2,19c0 <___vfprintf_internal_r+0x11e4>
    11ec:	42000204 	addi	r8,r8,8
    11f0:	9480010c 	andi	r18,r18,4
    11f4:	90003226 	beq	r18,zero,12c0 <___vfprintf_internal_r+0xae4>
    11f8:	d9403117 	ldw	r5,196(sp)
    11fc:	d8802917 	ldw	r2,164(sp)
    1200:	28a1c83a 	sub	r16,r5,r2
    1204:	04002e0e 	bge	zero,r16,12c0 <___vfprintf_internal_r+0xae4>
    1208:	04400404 	movi	r17,16
    120c:	d8801f17 	ldw	r2,124(sp)
    1210:	8c04c40e 	bge	r17,r16,2524 <___vfprintf_internal_r+0x1d48>
    1214:	01400074 	movhi	r5,1
    1218:	2941a284 	addi	r5,r5,1674
    121c:	d9403515 	stw	r5,212(sp)
    1220:	048001c4 	movi	r18,7
    1224:	dcc02d17 	ldw	r19,180(sp)
    1228:	00000306 	br	1238 <___vfprintf_internal_r+0xa5c>
    122c:	843ffc04 	addi	r16,r16,-16
    1230:	42000204 	addi	r8,r8,8
    1234:	8c00130e 	bge	r17,r16,1284 <___vfprintf_internal_r+0xaa8>
    1238:	01000074 	movhi	r4,1
    123c:	18c00404 	addi	r3,r3,16
    1240:	10800044 	addi	r2,r2,1
    1244:	2101a284 	addi	r4,r4,1674
    1248:	41000015 	stw	r4,0(r8)
    124c:	44400115 	stw	r17,4(r8)
    1250:	d8c02015 	stw	r3,128(sp)
    1254:	d8801f15 	stw	r2,124(sp)
    1258:	90bff40e 	bge	r18,r2,122c <__alt_data_end+0xfffb7e4c>
    125c:	d9801e04 	addi	r6,sp,120
    1260:	b80b883a 	mov	r5,r23
    1264:	9809883a 	mov	r4,r19
    1268:	00081240 	call	8124 <__sprint_r>
    126c:	103e5f1e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    1270:	843ffc04 	addi	r16,r16,-16
    1274:	d8c02017 	ldw	r3,128(sp)
    1278:	d8801f17 	ldw	r2,124(sp)
    127c:	da000404 	addi	r8,sp,16
    1280:	8c3fed16 	blt	r17,r16,1238 <__alt_data_end+0xfffb7e58>
    1284:	d9403517 	ldw	r5,212(sp)
    1288:	1c07883a 	add	r3,r3,r16
    128c:	10800044 	addi	r2,r2,1
    1290:	41400015 	stw	r5,0(r8)
    1294:	44000115 	stw	r16,4(r8)
    1298:	d8c02015 	stw	r3,128(sp)
    129c:	d8801f15 	stw	r2,124(sp)
    12a0:	010001c4 	movi	r4,7
    12a4:	2080060e 	bge	r4,r2,12c0 <___vfprintf_internal_r+0xae4>
    12a8:	d9002d17 	ldw	r4,180(sp)
    12ac:	d9801e04 	addi	r6,sp,120
    12b0:	b80b883a 	mov	r5,r23
    12b4:	00081240 	call	8124 <__sprint_r>
    12b8:	103e4c1e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    12bc:	d8c02017 	ldw	r3,128(sp)
    12c0:	d8803117 	ldw	r2,196(sp)
    12c4:	d9002917 	ldw	r4,164(sp)
    12c8:	1100010e 	bge	r2,r4,12d0 <___vfprintf_internal_r+0xaf4>
    12cc:	2005883a 	mov	r2,r4
    12d0:	d9402f17 	ldw	r5,188(sp)
    12d4:	288b883a 	add	r5,r5,r2
    12d8:	d9402f15 	stw	r5,188(sp)
    12dc:	1801c01e 	bne	r3,zero,19e0 <___vfprintf_internal_r+0x1204>
    12e0:	a8800007 	ldb	r2,0(r21)
    12e4:	d8001f15 	stw	zero,124(sp)
    12e8:	da000404 	addi	r8,sp,16
    12ec:	103d751e 	bne	r2,zero,8c4 <__alt_data_end+0xfffb74e4>
    12f0:	a823883a 	mov	r17,r21
    12f4:	003d8b06 	br	924 <__alt_data_end+0xfffb7544>
    12f8:	8025883a 	mov	r18,r16
    12fc:	dc002903 	ldbu	r16,164(sp)
    1300:	e011883a 	mov	r8,fp
    1304:	84003fcc 	andi	r16,r16,255
    1308:	8005e51e 	bne	r16,zero,2aa0 <___vfprintf_internal_r+0x22c4>
    130c:	94800414 	ori	r18,r18,16
    1310:	9080080c 	andi	r2,r18,32
    1314:	10022b26 	beq	r2,zero,1bc4 <___vfprintf_internal_r+0x13e8>
    1318:	d9002e17 	ldw	r4,184(sp)
    131c:	d9402a17 	ldw	r5,168(sp)
    1320:	d8002785 	stb	zero,158(sp)
    1324:	20c00204 	addi	r3,r4,8
    1328:	24c00017 	ldw	r19,0(r4)
    132c:	25800117 	ldw	r22,4(r4)
    1330:	28042e16 	blt	r5,zero,23ec <___vfprintf_internal_r+0x1c10>
    1334:	013fdfc4 	movi	r4,-129
    1338:	9d84b03a 	or	r2,r19,r22
    133c:	d8c02e15 	stw	r3,184(sp)
    1340:	9124703a 	and	r18,r18,r4
    1344:	0039883a 	mov	fp,zero
    1348:	103e801e 	bne	r2,zero,d4c <__alt_data_end+0xfffb796c>
    134c:	d9002a17 	ldw	r4,168(sp)
    1350:	2002e01e 	bne	r4,zero,1ed4 <___vfprintf_internal_r+0x16f8>
    1354:	d8002a15 	stw	zero,168(sp)
    1358:	d8002b15 	stw	zero,172(sp)
    135c:	dc001e04 	addi	r16,sp,120
    1360:	003ef506 	br	f38 <__alt_data_end+0xfffb7b58>
    1364:	8025883a 	mov	r18,r16
    1368:	dc002903 	ldbu	r16,164(sp)
    136c:	e011883a 	mov	r8,fp
    1370:	84003fcc 	andi	r16,r16,255
    1374:	8005ba1e 	bne	r16,zero,2a60 <___vfprintf_internal_r+0x2284>
    1378:	01000074 	movhi	r4,1
    137c:	21019204 	addi	r4,r4,1608
    1380:	d9003915 	stw	r4,228(sp)
    1384:	9080080c 	andi	r2,r18,32
    1388:	10006126 	beq	r2,zero,1510 <___vfprintf_internal_r+0xd34>
    138c:	d9402e17 	ldw	r5,184(sp)
    1390:	2cc00017 	ldw	r19,0(r5)
    1394:	2d800117 	ldw	r22,4(r5)
    1398:	29400204 	addi	r5,r5,8
    139c:	d9402e15 	stw	r5,184(sp)
    13a0:	9080004c 	andi	r2,r18,1
    13a4:	1001ac26 	beq	r2,zero,1a58 <___vfprintf_internal_r+0x127c>
    13a8:	9d84b03a 	or	r2,r19,r22
    13ac:	10038526 	beq	r2,zero,21c4 <___vfprintf_internal_r+0x19e8>
    13b0:	d8c02a17 	ldw	r3,168(sp)
    13b4:	00800c04 	movi	r2,48
    13b8:	d8802705 	stb	r2,156(sp)
    13bc:	dc402745 	stb	r17,157(sp)
    13c0:	d8002785 	stb	zero,158(sp)
    13c4:	90800094 	ori	r2,r18,2
    13c8:	18047916 	blt	r3,zero,25b0 <___vfprintf_internal_r+0x1dd4>
    13cc:	00bfdfc4 	movi	r2,-129
    13d0:	90a4703a 	and	r18,r18,r2
    13d4:	94800094 	ori	r18,r18,2
    13d8:	0039883a 	mov	fp,zero
    13dc:	d9003917 	ldw	r4,228(sp)
    13e0:	dc001e04 	addi	r16,sp,120
    13e4:	988003cc 	andi	r2,r19,15
    13e8:	b006973a 	slli	r3,r22,28
    13ec:	2085883a 	add	r2,r4,r2
    13f0:	9826d13a 	srli	r19,r19,4
    13f4:	10800003 	ldbu	r2,0(r2)
    13f8:	b02cd13a 	srli	r22,r22,4
    13fc:	843fffc4 	addi	r16,r16,-1
    1400:	1ce6b03a 	or	r19,r3,r19
    1404:	80800005 	stb	r2,0(r16)
    1408:	9d84b03a 	or	r2,r19,r22
    140c:	103ff51e 	bne	r2,zero,13e4 <__alt_data_end+0xfffb8004>
    1410:	d8c02817 	ldw	r3,160(sp)
    1414:	1c07c83a 	sub	r3,r3,r16
    1418:	d8c02b15 	stw	r3,172(sp)
    141c:	003ec606 	br	f38 <__alt_data_end+0xfffb7b58>
    1420:	8025883a 	mov	r18,r16
    1424:	dc002903 	ldbu	r16,164(sp)
    1428:	e011883a 	mov	r8,fp
    142c:	84003fcc 	andi	r16,r16,255
    1430:	803e9626 	beq	r16,zero,e8c <__alt_data_end+0xfffb7aac>
    1434:	d8c02b03 	ldbu	r3,172(sp)
    1438:	d8c02785 	stb	r3,158(sp)
    143c:	003e9306 	br	e8c <__alt_data_end+0xfffb7aac>
    1440:	00c00044 	movi	r3,1
    1444:	d8c02905 	stb	r3,164(sp)
    1448:	00c00ac4 	movi	r3,43
    144c:	d8c02b05 	stb	r3,172(sp)
    1450:	ac400007 	ldb	r17,0(r21)
    1454:	003d4306 	br	964 <__alt_data_end+0xfffb7584>
    1458:	84000814 	ori	r16,r16,32
    145c:	ac400007 	ldb	r17,0(r21)
    1460:	003d4006 	br	964 <__alt_data_end+0xfffb7584>
    1464:	d8802e17 	ldw	r2,184(sp)
    1468:	8025883a 	mov	r18,r16
    146c:	d8002785 	stb	zero,158(sp)
    1470:	14000017 	ldw	r16,0(r2)
    1474:	e011883a 	mov	r8,fp
    1478:	14c00104 	addi	r19,r2,4
    147c:	80042d26 	beq	r16,zero,2534 <___vfprintf_internal_r+0x1d58>
    1480:	d8c02a17 	ldw	r3,168(sp)
    1484:	1803e416 	blt	r3,zero,2418 <___vfprintf_internal_r+0x1c3c>
    1488:	180d883a 	mov	r6,r3
    148c:	000b883a 	mov	r5,zero
    1490:	8009883a 	mov	r4,r16
    1494:	df003d15 	stw	fp,244(sp)
    1498:	00061140 	call	6114 <memchr>
    149c:	da003d17 	ldw	r8,244(sp)
    14a0:	10046826 	beq	r2,zero,2644 <___vfprintf_internal_r+0x1e68>
    14a4:	1405c83a 	sub	r2,r2,r16
    14a8:	d8802b15 	stw	r2,172(sp)
    14ac:	1003e016 	blt	r2,zero,2430 <___vfprintf_internal_r+0x1c54>
    14b0:	df002783 	ldbu	fp,158(sp)
    14b4:	d8802915 	stw	r2,164(sp)
    14b8:	dcc02e15 	stw	r19,184(sp)
    14bc:	d8002a15 	stw	zero,168(sp)
    14c0:	d8003215 	stw	zero,200(sp)
    14c4:	003ea206 	br	f50 <__alt_data_end+0xfffb7b70>
    14c8:	8025883a 	mov	r18,r16
    14cc:	dc002903 	ldbu	r16,164(sp)
    14d0:	e011883a 	mov	r8,fp
    14d4:	84003fcc 	andi	r16,r16,255
    14d8:	803f8d26 	beq	r16,zero,1310 <__alt_data_end+0xfffb7f30>
    14dc:	d8c02b03 	ldbu	r3,172(sp)
    14e0:	d8c02785 	stb	r3,158(sp)
    14e4:	003f8a06 	br	1310 <__alt_data_end+0xfffb7f30>
    14e8:	8025883a 	mov	r18,r16
    14ec:	dc002903 	ldbu	r16,164(sp)
    14f0:	e011883a 	mov	r8,fp
    14f4:	84003fcc 	andi	r16,r16,255
    14f8:	8005661e 	bne	r16,zero,2a94 <___vfprintf_internal_r+0x22b8>
    14fc:	01000074 	movhi	r4,1
    1500:	21019704 	addi	r4,r4,1628
    1504:	d9003915 	stw	r4,228(sp)
    1508:	9080080c 	andi	r2,r18,32
    150c:	103f9f1e 	bne	r2,zero,138c <__alt_data_end+0xfffb7fac>
    1510:	9080040c 	andi	r2,r18,16
    1514:	1002eb26 	beq	r2,zero,20c4 <___vfprintf_internal_r+0x18e8>
    1518:	d8802e17 	ldw	r2,184(sp)
    151c:	002d883a 	mov	r22,zero
    1520:	14c00017 	ldw	r19,0(r2)
    1524:	10800104 	addi	r2,r2,4
    1528:	d8802e15 	stw	r2,184(sp)
    152c:	003f9c06 	br	13a0 <__alt_data_end+0xfffb7fc0>
    1530:	d8802b07 	ldb	r2,172(sp)
    1534:	1002e11e 	bne	r2,zero,20bc <___vfprintf_internal_r+0x18e0>
    1538:	00c00044 	movi	r3,1
    153c:	d8c02905 	stb	r3,164(sp)
    1540:	00c00804 	movi	r3,32
    1544:	d8c02b05 	stb	r3,172(sp)
    1548:	ac400007 	ldb	r17,0(r21)
    154c:	003d0506 	br	964 <__alt_data_end+0xfffb7584>
    1550:	84000054 	ori	r16,r16,1
    1554:	ac400007 	ldb	r17,0(r21)
    1558:	003d0206 	br	964 <__alt_data_end+0xfffb7584>
    155c:	8025883a 	mov	r18,r16
    1560:	dc002903 	ldbu	r16,164(sp)
    1564:	e011883a 	mov	r8,fp
    1568:	84003fcc 	andi	r16,r16,255
    156c:	803de726 	beq	r16,zero,d0c <__alt_data_end+0xfffb792c>
    1570:	d8c02b03 	ldbu	r3,172(sp)
    1574:	d8c02785 	stb	r3,158(sp)
    1578:	003de406 	br	d0c <__alt_data_end+0xfffb792c>
    157c:	84001014 	ori	r16,r16,64
    1580:	ac400007 	ldb	r17,0(r21)
    1584:	003cf706 	br	964 <__alt_data_end+0xfffb7584>
    1588:	ac400007 	ldb	r17,0(r21)
    158c:	00801b04 	movi	r2,108
    1590:	88838f26 	beq	r17,r2,23d0 <___vfprintf_internal_r+0x1bf4>
    1594:	84000414 	ori	r16,r16,16
    1598:	003cf206 	br	964 <__alt_data_end+0xfffb7584>
    159c:	8025883a 	mov	r18,r16
    15a0:	dc002903 	ldbu	r16,164(sp)
    15a4:	e011883a 	mov	r8,fp
    15a8:	84003fcc 	andi	r16,r16,255
    15ac:	80053f1e 	bne	r16,zero,2aac <___vfprintf_internal_r+0x22d0>
    15b0:	9080080c 	andi	r2,r18,32
    15b4:	1002d226 	beq	r2,zero,2100 <___vfprintf_internal_r+0x1924>
    15b8:	d9002e17 	ldw	r4,184(sp)
    15bc:	d9402f17 	ldw	r5,188(sp)
    15c0:	20800017 	ldw	r2,0(r4)
    15c4:	2807d7fa 	srai	r3,r5,31
    15c8:	21000104 	addi	r4,r4,4
    15cc:	d9002e15 	stw	r4,184(sp)
    15d0:	11400015 	stw	r5,0(r2)
    15d4:	10c00115 	stw	r3,4(r2)
    15d8:	003cb806 	br	8bc <__alt_data_end+0xfffb74dc>
    15dc:	d8c02e17 	ldw	r3,184(sp)
    15e0:	d9002e17 	ldw	r4,184(sp)
    15e4:	8025883a 	mov	r18,r16
    15e8:	18800017 	ldw	r2,0(r3)
    15ec:	21000104 	addi	r4,r4,4
    15f0:	00c00044 	movi	r3,1
    15f4:	e011883a 	mov	r8,fp
    15f8:	d8c02915 	stw	r3,164(sp)
    15fc:	d8002785 	stb	zero,158(sp)
    1600:	d8801405 	stb	r2,80(sp)
    1604:	d9002e15 	stw	r4,184(sp)
    1608:	d8c02b15 	stw	r3,172(sp)
    160c:	d8002a15 	stw	zero,168(sp)
    1610:	d8003215 	stw	zero,200(sp)
    1614:	dc001404 	addi	r16,sp,80
    1618:	0039883a 	mov	fp,zero
    161c:	003e5306 	br	f6c <__alt_data_end+0xfffb7b8c>
    1620:	01000074 	movhi	r4,1
    1624:	21019704 	addi	r4,r4,1628
    1628:	0039883a 	mov	fp,zero
    162c:	d9003915 	stw	r4,228(sp)
    1630:	04401e04 	movi	r17,120
    1634:	003f6906 	br	13dc <__alt_data_end+0xfffb7ffc>
    1638:	8025883a 	mov	r18,r16
    163c:	dc002903 	ldbu	r16,164(sp)
    1640:	e011883a 	mov	r8,fp
    1644:	84003fcc 	andi	r16,r16,255
    1648:	8005081e 	bne	r16,zero,2a6c <___vfprintf_internal_r+0x2290>
    164c:	883d6126 	beq	r17,zero,bd4 <__alt_data_end+0xfffb77f4>
    1650:	00c00044 	movi	r3,1
    1654:	d8c02915 	stw	r3,164(sp)
    1658:	dc401405 	stb	r17,80(sp)
    165c:	d8002785 	stb	zero,158(sp)
    1660:	003fe906 	br	1608 <__alt_data_end+0xfffb8228>
    1664:	01400074 	movhi	r5,1
    1668:	29419704 	addi	r5,r5,1628
    166c:	d9403915 	stw	r5,228(sp)
    1670:	d8c02e15 	stw	r3,184(sp)
    1674:	1025883a 	mov	r18,r2
    1678:	04401e04 	movi	r17,120
    167c:	9d84b03a 	or	r2,r19,r22
    1680:	1000fc1e 	bne	r2,zero,1a74 <___vfprintf_internal_r+0x1298>
    1684:	0039883a 	mov	fp,zero
    1688:	00800084 	movi	r2,2
    168c:	10803fcc 	andi	r2,r2,255
    1690:	00c00044 	movi	r3,1
    1694:	10c20f26 	beq	r2,r3,1ed4 <___vfprintf_internal_r+0x16f8>
    1698:	00c00084 	movi	r3,2
    169c:	10fd3326 	beq	r2,r3,b6c <__alt_data_end+0xfffb778c>
    16a0:	003e0b06 	br	ed0 <__alt_data_end+0xfffb7af0>
    16a4:	d8c02017 	ldw	r3,128(sp)
    16a8:	003e7106 	br	1070 <__alt_data_end+0xfffb7c90>
    16ac:	00801944 	movi	r2,101
    16b0:	14407e0e 	bge	r2,r17,18ac <___vfprintf_internal_r+0x10d0>
    16b4:	d9003617 	ldw	r4,216(sp)
    16b8:	d9403817 	ldw	r5,224(sp)
    16bc:	000d883a 	mov	r6,zero
    16c0:	000f883a 	mov	r7,zero
    16c4:	d8c03c15 	stw	r3,240(sp)
    16c8:	da003d15 	stw	r8,244(sp)
    16cc:	000c0840 	call	c084 <__eqdf2>
    16d0:	d8c03c17 	ldw	r3,240(sp)
    16d4:	da003d17 	ldw	r8,244(sp)
    16d8:	1000f71e 	bne	r2,zero,1ab8 <___vfprintf_internal_r+0x12dc>
    16dc:	d8801f17 	ldw	r2,124(sp)
    16e0:	01000074 	movhi	r4,1
    16e4:	21019e04 	addi	r4,r4,1656
    16e8:	18c00044 	addi	r3,r3,1
    16ec:	10800044 	addi	r2,r2,1
    16f0:	41000015 	stw	r4,0(r8)
    16f4:	01000044 	movi	r4,1
    16f8:	41000115 	stw	r4,4(r8)
    16fc:	d8c02015 	stw	r3,128(sp)
    1700:	d8801f15 	stw	r2,124(sp)
    1704:	010001c4 	movi	r4,7
    1708:	2082b816 	blt	r4,r2,21ec <___vfprintf_internal_r+0x1a10>
    170c:	42000204 	addi	r8,r8,8
    1710:	d8802617 	ldw	r2,152(sp)
    1714:	d9403317 	ldw	r5,204(sp)
    1718:	11400216 	blt	r2,r5,1724 <___vfprintf_internal_r+0xf48>
    171c:	9080004c 	andi	r2,r18,1
    1720:	103eb326 	beq	r2,zero,11f0 <__alt_data_end+0xfffb7e10>
    1724:	d8803717 	ldw	r2,220(sp)
    1728:	d9003417 	ldw	r4,208(sp)
    172c:	d9403717 	ldw	r5,220(sp)
    1730:	1887883a 	add	r3,r3,r2
    1734:	d8801f17 	ldw	r2,124(sp)
    1738:	41000015 	stw	r4,0(r8)
    173c:	41400115 	stw	r5,4(r8)
    1740:	10800044 	addi	r2,r2,1
    1744:	d8c02015 	stw	r3,128(sp)
    1748:	d8801f15 	stw	r2,124(sp)
    174c:	010001c4 	movi	r4,7
    1750:	20832916 	blt	r4,r2,23f8 <___vfprintf_internal_r+0x1c1c>
    1754:	42000204 	addi	r8,r8,8
    1758:	d8803317 	ldw	r2,204(sp)
    175c:	143fffc4 	addi	r16,r2,-1
    1760:	043ea30e 	bge	zero,r16,11f0 <__alt_data_end+0xfffb7e10>
    1764:	04400404 	movi	r17,16
    1768:	d8801f17 	ldw	r2,124(sp)
    176c:	8c00880e 	bge	r17,r16,1990 <___vfprintf_internal_r+0x11b4>
    1770:	01400074 	movhi	r5,1
    1774:	29419e84 	addi	r5,r5,1658
    1778:	d9402c15 	stw	r5,176(sp)
    177c:	058001c4 	movi	r22,7
    1780:	dcc02d17 	ldw	r19,180(sp)
    1784:	00000306 	br	1794 <___vfprintf_internal_r+0xfb8>
    1788:	42000204 	addi	r8,r8,8
    178c:	843ffc04 	addi	r16,r16,-16
    1790:	8c00820e 	bge	r17,r16,199c <___vfprintf_internal_r+0x11c0>
    1794:	18c00404 	addi	r3,r3,16
    1798:	10800044 	addi	r2,r2,1
    179c:	45000015 	stw	r20,0(r8)
    17a0:	44400115 	stw	r17,4(r8)
    17a4:	d8c02015 	stw	r3,128(sp)
    17a8:	d8801f15 	stw	r2,124(sp)
    17ac:	b0bff60e 	bge	r22,r2,1788 <__alt_data_end+0xfffb83a8>
    17b0:	d9801e04 	addi	r6,sp,120
    17b4:	b80b883a 	mov	r5,r23
    17b8:	9809883a 	mov	r4,r19
    17bc:	00081240 	call	8124 <__sprint_r>
    17c0:	103d0a1e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    17c4:	d8c02017 	ldw	r3,128(sp)
    17c8:	d8801f17 	ldw	r2,124(sp)
    17cc:	da000404 	addi	r8,sp,16
    17d0:	003fee06 	br	178c <__alt_data_end+0xfffb83ac>
    17d4:	d9403117 	ldw	r5,196(sp)
    17d8:	d8802917 	ldw	r2,164(sp)
    17dc:	28adc83a 	sub	r22,r5,r2
    17e0:	05be410e 	bge	zero,r22,10e8 <__alt_data_end+0xfffb7d08>
    17e4:	07000404 	movi	fp,16
    17e8:	d8801f17 	ldw	r2,124(sp)
    17ec:	e5838f0e 	bge	fp,r22,262c <___vfprintf_internal_r+0x1e50>
    17f0:	01400074 	movhi	r5,1
    17f4:	29419e84 	addi	r5,r5,1658
    17f8:	dc403015 	stw	r17,192(sp)
    17fc:	d9402c15 	stw	r5,176(sp)
    1800:	b023883a 	mov	r17,r22
    1804:	04c001c4 	movi	r19,7
    1808:	a82d883a 	mov	r22,r21
    180c:	902b883a 	mov	r21,r18
    1810:	8025883a 	mov	r18,r16
    1814:	dc002d17 	ldw	r16,180(sp)
    1818:	00000306 	br	1828 <___vfprintf_internal_r+0x104c>
    181c:	8c7ffc04 	addi	r17,r17,-16
    1820:	42000204 	addi	r8,r8,8
    1824:	e440110e 	bge	fp,r17,186c <___vfprintf_internal_r+0x1090>
    1828:	18c00404 	addi	r3,r3,16
    182c:	10800044 	addi	r2,r2,1
    1830:	45000015 	stw	r20,0(r8)
    1834:	47000115 	stw	fp,4(r8)
    1838:	d8c02015 	stw	r3,128(sp)
    183c:	d8801f15 	stw	r2,124(sp)
    1840:	98bff60e 	bge	r19,r2,181c <__alt_data_end+0xfffb843c>
    1844:	d9801e04 	addi	r6,sp,120
    1848:	b80b883a 	mov	r5,r23
    184c:	8009883a 	mov	r4,r16
    1850:	00081240 	call	8124 <__sprint_r>
    1854:	103ce51e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    1858:	8c7ffc04 	addi	r17,r17,-16
    185c:	d8c02017 	ldw	r3,128(sp)
    1860:	d8801f17 	ldw	r2,124(sp)
    1864:	da000404 	addi	r8,sp,16
    1868:	e47fef16 	blt	fp,r17,1828 <__alt_data_end+0xfffb8448>
    186c:	9021883a 	mov	r16,r18
    1870:	a825883a 	mov	r18,r21
    1874:	b02b883a 	mov	r21,r22
    1878:	882d883a 	mov	r22,r17
    187c:	dc403017 	ldw	r17,192(sp)
    1880:	d9002c17 	ldw	r4,176(sp)
    1884:	1d87883a 	add	r3,r3,r22
    1888:	10800044 	addi	r2,r2,1
    188c:	41000015 	stw	r4,0(r8)
    1890:	45800115 	stw	r22,4(r8)
    1894:	d8c02015 	stw	r3,128(sp)
    1898:	d8801f15 	stw	r2,124(sp)
    189c:	010001c4 	movi	r4,7
    18a0:	20818e16 	blt	r4,r2,1edc <___vfprintf_internal_r+0x1700>
    18a4:	42000204 	addi	r8,r8,8
    18a8:	003e0f06 	br	10e8 <__alt_data_end+0xfffb7d08>
    18ac:	d9403317 	ldw	r5,204(sp)
    18b0:	00800044 	movi	r2,1
    18b4:	18c00044 	addi	r3,r3,1
    18b8:	1141530e 	bge	r2,r5,1e08 <___vfprintf_internal_r+0x162c>
    18bc:	dc401f17 	ldw	r17,124(sp)
    18c0:	00800044 	movi	r2,1
    18c4:	40800115 	stw	r2,4(r8)
    18c8:	8c400044 	addi	r17,r17,1
    18cc:	44000015 	stw	r16,0(r8)
    18d0:	d8c02015 	stw	r3,128(sp)
    18d4:	dc401f15 	stw	r17,124(sp)
    18d8:	008001c4 	movi	r2,7
    18dc:	14416b16 	blt	r2,r17,1e8c <___vfprintf_internal_r+0x16b0>
    18e0:	42000204 	addi	r8,r8,8
    18e4:	d8803717 	ldw	r2,220(sp)
    18e8:	d9003417 	ldw	r4,208(sp)
    18ec:	8c400044 	addi	r17,r17,1
    18f0:	10c7883a 	add	r3,r2,r3
    18f4:	40800115 	stw	r2,4(r8)
    18f8:	41000015 	stw	r4,0(r8)
    18fc:	d8c02015 	stw	r3,128(sp)
    1900:	dc401f15 	stw	r17,124(sp)
    1904:	008001c4 	movi	r2,7
    1908:	14416916 	blt	r2,r17,1eb0 <___vfprintf_internal_r+0x16d4>
    190c:	45800204 	addi	r22,r8,8
    1910:	d9003617 	ldw	r4,216(sp)
    1914:	d9403817 	ldw	r5,224(sp)
    1918:	000d883a 	mov	r6,zero
    191c:	000f883a 	mov	r7,zero
    1920:	d8c03c15 	stw	r3,240(sp)
    1924:	000c0840 	call	c084 <__eqdf2>
    1928:	d8c03c17 	ldw	r3,240(sp)
    192c:	1000bc26 	beq	r2,zero,1c20 <___vfprintf_internal_r+0x1444>
    1930:	d9403317 	ldw	r5,204(sp)
    1934:	84000044 	addi	r16,r16,1
    1938:	8c400044 	addi	r17,r17,1
    193c:	28bfffc4 	addi	r2,r5,-1
    1940:	1887883a 	add	r3,r3,r2
    1944:	b0800115 	stw	r2,4(r22)
    1948:	b4000015 	stw	r16,0(r22)
    194c:	d8c02015 	stw	r3,128(sp)
    1950:	dc401f15 	stw	r17,124(sp)
    1954:	008001c4 	movi	r2,7
    1958:	14414316 	blt	r2,r17,1e68 <___vfprintf_internal_r+0x168c>
    195c:	b5800204 	addi	r22,r22,8
    1960:	d9003a17 	ldw	r4,232(sp)
    1964:	df0022c4 	addi	fp,sp,139
    1968:	8c400044 	addi	r17,r17,1
    196c:	20c7883a 	add	r3,r4,r3
    1970:	b7000015 	stw	fp,0(r22)
    1974:	b1000115 	stw	r4,4(r22)
    1978:	d8c02015 	stw	r3,128(sp)
    197c:	dc401f15 	stw	r17,124(sp)
    1980:	008001c4 	movi	r2,7
    1984:	14400e16 	blt	r2,r17,19c0 <___vfprintf_internal_r+0x11e4>
    1988:	b2000204 	addi	r8,r22,8
    198c:	003e1806 	br	11f0 <__alt_data_end+0xfffb7e10>
    1990:	01000074 	movhi	r4,1
    1994:	21019e84 	addi	r4,r4,1658
    1998:	d9002c15 	stw	r4,176(sp)
    199c:	d9002c17 	ldw	r4,176(sp)
    19a0:	1c07883a 	add	r3,r3,r16
    19a4:	44000115 	stw	r16,4(r8)
    19a8:	41000015 	stw	r4,0(r8)
    19ac:	10800044 	addi	r2,r2,1
    19b0:	d8c02015 	stw	r3,128(sp)
    19b4:	d8801f15 	stw	r2,124(sp)
    19b8:	010001c4 	movi	r4,7
    19bc:	20be0b0e 	bge	r4,r2,11ec <__alt_data_end+0xfffb7e0c>
    19c0:	d9002d17 	ldw	r4,180(sp)
    19c4:	d9801e04 	addi	r6,sp,120
    19c8:	b80b883a 	mov	r5,r23
    19cc:	00081240 	call	8124 <__sprint_r>
    19d0:	103c861e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    19d4:	d8c02017 	ldw	r3,128(sp)
    19d8:	da000404 	addi	r8,sp,16
    19dc:	003e0406 	br	11f0 <__alt_data_end+0xfffb7e10>
    19e0:	d9002d17 	ldw	r4,180(sp)
    19e4:	d9801e04 	addi	r6,sp,120
    19e8:	b80b883a 	mov	r5,r23
    19ec:	00081240 	call	8124 <__sprint_r>
    19f0:	103e3b26 	beq	r2,zero,12e0 <__alt_data_end+0xfffb7f00>
    19f4:	003c7d06 	br	bec <__alt_data_end+0xfffb780c>
    19f8:	d9002d17 	ldw	r4,180(sp)
    19fc:	d9801e04 	addi	r6,sp,120
    1a00:	b80b883a 	mov	r5,r23
    1a04:	00081240 	call	8124 <__sprint_r>
    1a08:	103c781e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    1a0c:	d8c02017 	ldw	r3,128(sp)
    1a10:	da000404 	addi	r8,sp,16
    1a14:	003de906 	br	11bc <__alt_data_end+0xfffb7ddc>
    1a18:	d9002d17 	ldw	r4,180(sp)
    1a1c:	d9801e04 	addi	r6,sp,120
    1a20:	b80b883a 	mov	r5,r23
    1a24:	00081240 	call	8124 <__sprint_r>
    1a28:	103c701e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    1a2c:	d8c02017 	ldw	r3,128(sp)
    1a30:	da000404 	addi	r8,sp,16
    1a34:	003d9b06 	br	10a4 <__alt_data_end+0xfffb7cc4>
    1a38:	d9002d17 	ldw	r4,180(sp)
    1a3c:	d9801e04 	addi	r6,sp,120
    1a40:	b80b883a 	mov	r5,r23
    1a44:	00081240 	call	8124 <__sprint_r>
    1a48:	103c681e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    1a4c:	d8c02017 	ldw	r3,128(sp)
    1a50:	da000404 	addi	r8,sp,16
    1a54:	003da106 	br	10dc <__alt_data_end+0xfffb7cfc>
    1a58:	d9402a17 	ldw	r5,168(sp)
    1a5c:	d8002785 	stb	zero,158(sp)
    1a60:	283f0616 	blt	r5,zero,167c <__alt_data_end+0xfffb829c>
    1a64:	00ffdfc4 	movi	r3,-129
    1a68:	9d84b03a 	or	r2,r19,r22
    1a6c:	90e4703a 	and	r18,r18,r3
    1a70:	103c3b26 	beq	r2,zero,b60 <__alt_data_end+0xfffb7780>
    1a74:	0039883a 	mov	fp,zero
    1a78:	003e5806 	br	13dc <__alt_data_end+0xfffb7ffc>
    1a7c:	9080040c 	andi	r2,r18,16
    1a80:	1001b326 	beq	r2,zero,2150 <___vfprintf_internal_r+0x1974>
    1a84:	d8c02e17 	ldw	r3,184(sp)
    1a88:	d9002a17 	ldw	r4,168(sp)
    1a8c:	d8002785 	stb	zero,158(sp)
    1a90:	18800104 	addi	r2,r3,4
    1a94:	1cc00017 	ldw	r19,0(r3)
    1a98:	002d883a 	mov	r22,zero
    1a9c:	2001b516 	blt	r4,zero,2174 <___vfprintf_internal_r+0x1998>
    1aa0:	00ffdfc4 	movi	r3,-129
    1aa4:	d8802e15 	stw	r2,184(sp)
    1aa8:	90e4703a 	and	r18,r18,r3
    1aac:	983d0526 	beq	r19,zero,ec4 <__alt_data_end+0xfffb7ae4>
    1ab0:	0039883a 	mov	fp,zero
    1ab4:	003d0806 	br	ed8 <__alt_data_end+0xfffb7af8>
    1ab8:	dc402617 	ldw	r17,152(sp)
    1abc:	0441d30e 	bge	zero,r17,220c <___vfprintf_internal_r+0x1a30>
    1ac0:	dc403217 	ldw	r17,200(sp)
    1ac4:	d8803317 	ldw	r2,204(sp)
    1ac8:	1440010e 	bge	r2,r17,1ad0 <___vfprintf_internal_r+0x12f4>
    1acc:	1023883a 	mov	r17,r2
    1ad0:	04400a0e 	bge	zero,r17,1afc <___vfprintf_internal_r+0x1320>
    1ad4:	d8801f17 	ldw	r2,124(sp)
    1ad8:	1c47883a 	add	r3,r3,r17
    1adc:	44000015 	stw	r16,0(r8)
    1ae0:	10800044 	addi	r2,r2,1
    1ae4:	44400115 	stw	r17,4(r8)
    1ae8:	d8c02015 	stw	r3,128(sp)
    1aec:	d8801f15 	stw	r2,124(sp)
    1af0:	010001c4 	movi	r4,7
    1af4:	20826516 	blt	r4,r2,248c <___vfprintf_internal_r+0x1cb0>
    1af8:	42000204 	addi	r8,r8,8
    1afc:	88026116 	blt	r17,zero,2484 <___vfprintf_internal_r+0x1ca8>
    1b00:	d9003217 	ldw	r4,200(sp)
    1b04:	2463c83a 	sub	r17,r4,r17
    1b08:	04407b0e 	bge	zero,r17,1cf8 <___vfprintf_internal_r+0x151c>
    1b0c:	05800404 	movi	r22,16
    1b10:	d8801f17 	ldw	r2,124(sp)
    1b14:	b4419d0e 	bge	r22,r17,218c <___vfprintf_internal_r+0x19b0>
    1b18:	01000074 	movhi	r4,1
    1b1c:	21019e84 	addi	r4,r4,1658
    1b20:	d9002c15 	stw	r4,176(sp)
    1b24:	070001c4 	movi	fp,7
    1b28:	dcc02d17 	ldw	r19,180(sp)
    1b2c:	00000306 	br	1b3c <___vfprintf_internal_r+0x1360>
    1b30:	42000204 	addi	r8,r8,8
    1b34:	8c7ffc04 	addi	r17,r17,-16
    1b38:	b441970e 	bge	r22,r17,2198 <___vfprintf_internal_r+0x19bc>
    1b3c:	18c00404 	addi	r3,r3,16
    1b40:	10800044 	addi	r2,r2,1
    1b44:	45000015 	stw	r20,0(r8)
    1b48:	45800115 	stw	r22,4(r8)
    1b4c:	d8c02015 	stw	r3,128(sp)
    1b50:	d8801f15 	stw	r2,124(sp)
    1b54:	e0bff60e 	bge	fp,r2,1b30 <__alt_data_end+0xfffb8750>
    1b58:	d9801e04 	addi	r6,sp,120
    1b5c:	b80b883a 	mov	r5,r23
    1b60:	9809883a 	mov	r4,r19
    1b64:	00081240 	call	8124 <__sprint_r>
    1b68:	103c201e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    1b6c:	d8c02017 	ldw	r3,128(sp)
    1b70:	d8801f17 	ldw	r2,124(sp)
    1b74:	da000404 	addi	r8,sp,16
    1b78:	003fee06 	br	1b34 <__alt_data_end+0xfffb8754>
    1b7c:	d9002d17 	ldw	r4,180(sp)
    1b80:	d9801e04 	addi	r6,sp,120
    1b84:	b80b883a 	mov	r5,r23
    1b88:	00081240 	call	8124 <__sprint_r>
    1b8c:	103c171e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    1b90:	d8c02017 	ldw	r3,128(sp)
    1b94:	df002787 	ldb	fp,158(sp)
    1b98:	da000404 	addi	r8,sp,16
    1b9c:	003d3406 	br	1070 <__alt_data_end+0xfffb7c90>
    1ba0:	9080040c 	andi	r2,r18,16
    1ba4:	10016126 	beq	r2,zero,212c <___vfprintf_internal_r+0x1950>
    1ba8:	d9402e17 	ldw	r5,184(sp)
    1bac:	2cc00017 	ldw	r19,0(r5)
    1bb0:	29400104 	addi	r5,r5,4
    1bb4:	d9402e15 	stw	r5,184(sp)
    1bb8:	982dd7fa 	srai	r22,r19,31
    1bbc:	b005883a 	mov	r2,r22
    1bc0:	003c5a06 	br	d2c <__alt_data_end+0xfffb794c>
    1bc4:	9080040c 	andi	r2,r18,16
    1bc8:	10003526 	beq	r2,zero,1ca0 <___vfprintf_internal_r+0x14c4>
    1bcc:	d8c02e17 	ldw	r3,184(sp)
    1bd0:	d9002a17 	ldw	r4,168(sp)
    1bd4:	d8002785 	stb	zero,158(sp)
    1bd8:	18800104 	addi	r2,r3,4
    1bdc:	1cc00017 	ldw	r19,0(r3)
    1be0:	002d883a 	mov	r22,zero
    1be4:	20003716 	blt	r4,zero,1cc4 <___vfprintf_internal_r+0x14e8>
    1be8:	00ffdfc4 	movi	r3,-129
    1bec:	d8802e15 	stw	r2,184(sp)
    1bf0:	90e4703a 	and	r18,r18,r3
    1bf4:	0039883a 	mov	fp,zero
    1bf8:	983dd426 	beq	r19,zero,134c <__alt_data_end+0xfffb7f6c>
    1bfc:	00800244 	movi	r2,9
    1c00:	14fc5336 	bltu	r2,r19,d50 <__alt_data_end+0xfffb7970>
    1c04:	d8c02817 	ldw	r3,160(sp)
    1c08:	dc001dc4 	addi	r16,sp,119
    1c0c:	9cc00c04 	addi	r19,r19,48
    1c10:	1c07c83a 	sub	r3,r3,r16
    1c14:	dcc01dc5 	stb	r19,119(sp)
    1c18:	d8c02b15 	stw	r3,172(sp)
    1c1c:	003cc606 	br	f38 <__alt_data_end+0xfffb7b58>
    1c20:	d8803317 	ldw	r2,204(sp)
    1c24:	143fffc4 	addi	r16,r2,-1
    1c28:	043f4d0e 	bge	zero,r16,1960 <__alt_data_end+0xfffb8580>
    1c2c:	07000404 	movi	fp,16
    1c30:	e400810e 	bge	fp,r16,1e38 <___vfprintf_internal_r+0x165c>
    1c34:	01400074 	movhi	r5,1
    1c38:	29419e84 	addi	r5,r5,1658
    1c3c:	d9402c15 	stw	r5,176(sp)
    1c40:	01c001c4 	movi	r7,7
    1c44:	dcc02d17 	ldw	r19,180(sp)
    1c48:	00000306 	br	1c58 <___vfprintf_internal_r+0x147c>
    1c4c:	b5800204 	addi	r22,r22,8
    1c50:	843ffc04 	addi	r16,r16,-16
    1c54:	e4007b0e 	bge	fp,r16,1e44 <___vfprintf_internal_r+0x1668>
    1c58:	18c00404 	addi	r3,r3,16
    1c5c:	8c400044 	addi	r17,r17,1
    1c60:	b5000015 	stw	r20,0(r22)
    1c64:	b7000115 	stw	fp,4(r22)
    1c68:	d8c02015 	stw	r3,128(sp)
    1c6c:	dc401f15 	stw	r17,124(sp)
    1c70:	3c7ff60e 	bge	r7,r17,1c4c <__alt_data_end+0xfffb886c>
    1c74:	d9801e04 	addi	r6,sp,120
    1c78:	b80b883a 	mov	r5,r23
    1c7c:	9809883a 	mov	r4,r19
    1c80:	d9c03c15 	stw	r7,240(sp)
    1c84:	00081240 	call	8124 <__sprint_r>
    1c88:	d9c03c17 	ldw	r7,240(sp)
    1c8c:	103bd71e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    1c90:	d8c02017 	ldw	r3,128(sp)
    1c94:	dc401f17 	ldw	r17,124(sp)
    1c98:	dd800404 	addi	r22,sp,16
    1c9c:	003fec06 	br	1c50 <__alt_data_end+0xfffb8870>
    1ca0:	9080100c 	andi	r2,r18,64
    1ca4:	d8002785 	stb	zero,158(sp)
    1ca8:	10010e26 	beq	r2,zero,20e4 <___vfprintf_internal_r+0x1908>
    1cac:	d9402e17 	ldw	r5,184(sp)
    1cb0:	d8c02a17 	ldw	r3,168(sp)
    1cb4:	002d883a 	mov	r22,zero
    1cb8:	28800104 	addi	r2,r5,4
    1cbc:	2cc0000b 	ldhu	r19,0(r5)
    1cc0:	183fc90e 	bge	r3,zero,1be8 <__alt_data_end+0xfffb8808>
    1cc4:	d8802e15 	stw	r2,184(sp)
    1cc8:	0039883a 	mov	fp,zero
    1ccc:	9d84b03a 	or	r2,r19,r22
    1cd0:	103c1e1e 	bne	r2,zero,d4c <__alt_data_end+0xfffb796c>
    1cd4:	00800044 	movi	r2,1
    1cd8:	003e6c06 	br	168c <__alt_data_end+0xfffb82ac>
    1cdc:	d9002d17 	ldw	r4,180(sp)
    1ce0:	d9801e04 	addi	r6,sp,120
    1ce4:	b80b883a 	mov	r5,r23
    1ce8:	00081240 	call	8124 <__sprint_r>
    1cec:	103bbf1e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    1cf0:	d8c02017 	ldw	r3,128(sp)
    1cf4:	da000404 	addi	r8,sp,16
    1cf8:	d9003217 	ldw	r4,200(sp)
    1cfc:	d8802617 	ldw	r2,152(sp)
    1d00:	d9403317 	ldw	r5,204(sp)
    1d04:	8123883a 	add	r17,r16,r4
    1d08:	11400216 	blt	r2,r5,1d14 <___vfprintf_internal_r+0x1538>
    1d0c:	9100004c 	andi	r4,r18,1
    1d10:	20000d26 	beq	r4,zero,1d48 <___vfprintf_internal_r+0x156c>
    1d14:	d9003717 	ldw	r4,220(sp)
    1d18:	d9403417 	ldw	r5,208(sp)
    1d1c:	1907883a 	add	r3,r3,r4
    1d20:	d9001f17 	ldw	r4,124(sp)
    1d24:	41400015 	stw	r5,0(r8)
    1d28:	d9403717 	ldw	r5,220(sp)
    1d2c:	21000044 	addi	r4,r4,1
    1d30:	d8c02015 	stw	r3,128(sp)
    1d34:	41400115 	stw	r5,4(r8)
    1d38:	d9001f15 	stw	r4,124(sp)
    1d3c:	014001c4 	movi	r5,7
    1d40:	2901e816 	blt	r5,r4,24e4 <___vfprintf_internal_r+0x1d08>
    1d44:	42000204 	addi	r8,r8,8
    1d48:	d9003317 	ldw	r4,204(sp)
    1d4c:	8121883a 	add	r16,r16,r4
    1d50:	2085c83a 	sub	r2,r4,r2
    1d54:	8461c83a 	sub	r16,r16,r17
    1d58:	1400010e 	bge	r2,r16,1d60 <___vfprintf_internal_r+0x1584>
    1d5c:	1021883a 	mov	r16,r2
    1d60:	04000a0e 	bge	zero,r16,1d8c <___vfprintf_internal_r+0x15b0>
    1d64:	d9001f17 	ldw	r4,124(sp)
    1d68:	1c07883a 	add	r3,r3,r16
    1d6c:	44400015 	stw	r17,0(r8)
    1d70:	21000044 	addi	r4,r4,1
    1d74:	44000115 	stw	r16,4(r8)
    1d78:	d8c02015 	stw	r3,128(sp)
    1d7c:	d9001f15 	stw	r4,124(sp)
    1d80:	014001c4 	movi	r5,7
    1d84:	2901fb16 	blt	r5,r4,2574 <___vfprintf_internal_r+0x1d98>
    1d88:	42000204 	addi	r8,r8,8
    1d8c:	8001f716 	blt	r16,zero,256c <___vfprintf_internal_r+0x1d90>
    1d90:	1421c83a 	sub	r16,r2,r16
    1d94:	043d160e 	bge	zero,r16,11f0 <__alt_data_end+0xfffb7e10>
    1d98:	04400404 	movi	r17,16
    1d9c:	d8801f17 	ldw	r2,124(sp)
    1da0:	8c3efb0e 	bge	r17,r16,1990 <__alt_data_end+0xfffb85b0>
    1da4:	01400074 	movhi	r5,1
    1da8:	29419e84 	addi	r5,r5,1658
    1dac:	d9402c15 	stw	r5,176(sp)
    1db0:	058001c4 	movi	r22,7
    1db4:	dcc02d17 	ldw	r19,180(sp)
    1db8:	00000306 	br	1dc8 <___vfprintf_internal_r+0x15ec>
    1dbc:	42000204 	addi	r8,r8,8
    1dc0:	843ffc04 	addi	r16,r16,-16
    1dc4:	8c3ef50e 	bge	r17,r16,199c <__alt_data_end+0xfffb85bc>
    1dc8:	18c00404 	addi	r3,r3,16
    1dcc:	10800044 	addi	r2,r2,1
    1dd0:	45000015 	stw	r20,0(r8)
    1dd4:	44400115 	stw	r17,4(r8)
    1dd8:	d8c02015 	stw	r3,128(sp)
    1ddc:	d8801f15 	stw	r2,124(sp)
    1de0:	b0bff60e 	bge	r22,r2,1dbc <__alt_data_end+0xfffb89dc>
    1de4:	d9801e04 	addi	r6,sp,120
    1de8:	b80b883a 	mov	r5,r23
    1dec:	9809883a 	mov	r4,r19
    1df0:	00081240 	call	8124 <__sprint_r>
    1df4:	103b7d1e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    1df8:	d8c02017 	ldw	r3,128(sp)
    1dfc:	d8801f17 	ldw	r2,124(sp)
    1e00:	da000404 	addi	r8,sp,16
    1e04:	003fee06 	br	1dc0 <__alt_data_end+0xfffb89e0>
    1e08:	9088703a 	and	r4,r18,r2
    1e0c:	203eab1e 	bne	r4,zero,18bc <__alt_data_end+0xfffb84dc>
    1e10:	dc401f17 	ldw	r17,124(sp)
    1e14:	40800115 	stw	r2,4(r8)
    1e18:	44000015 	stw	r16,0(r8)
    1e1c:	8c400044 	addi	r17,r17,1
    1e20:	d8c02015 	stw	r3,128(sp)
    1e24:	dc401f15 	stw	r17,124(sp)
    1e28:	008001c4 	movi	r2,7
    1e2c:	14400e16 	blt	r2,r17,1e68 <___vfprintf_internal_r+0x168c>
    1e30:	45800204 	addi	r22,r8,8
    1e34:	003eca06 	br	1960 <__alt_data_end+0xfffb8580>
    1e38:	01000074 	movhi	r4,1
    1e3c:	21019e84 	addi	r4,r4,1658
    1e40:	d9002c15 	stw	r4,176(sp)
    1e44:	d8802c17 	ldw	r2,176(sp)
    1e48:	1c07883a 	add	r3,r3,r16
    1e4c:	8c400044 	addi	r17,r17,1
    1e50:	b0800015 	stw	r2,0(r22)
    1e54:	b4000115 	stw	r16,4(r22)
    1e58:	d8c02015 	stw	r3,128(sp)
    1e5c:	dc401f15 	stw	r17,124(sp)
    1e60:	008001c4 	movi	r2,7
    1e64:	147ebd0e 	bge	r2,r17,195c <__alt_data_end+0xfffb857c>
    1e68:	d9002d17 	ldw	r4,180(sp)
    1e6c:	d9801e04 	addi	r6,sp,120
    1e70:	b80b883a 	mov	r5,r23
    1e74:	00081240 	call	8124 <__sprint_r>
    1e78:	103b5c1e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    1e7c:	d8c02017 	ldw	r3,128(sp)
    1e80:	dc401f17 	ldw	r17,124(sp)
    1e84:	dd800404 	addi	r22,sp,16
    1e88:	003eb506 	br	1960 <__alt_data_end+0xfffb8580>
    1e8c:	d9002d17 	ldw	r4,180(sp)
    1e90:	d9801e04 	addi	r6,sp,120
    1e94:	b80b883a 	mov	r5,r23
    1e98:	00081240 	call	8124 <__sprint_r>
    1e9c:	103b531e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    1ea0:	d8c02017 	ldw	r3,128(sp)
    1ea4:	dc401f17 	ldw	r17,124(sp)
    1ea8:	da000404 	addi	r8,sp,16
    1eac:	003e8d06 	br	18e4 <__alt_data_end+0xfffb8504>
    1eb0:	d9002d17 	ldw	r4,180(sp)
    1eb4:	d9801e04 	addi	r6,sp,120
    1eb8:	b80b883a 	mov	r5,r23
    1ebc:	00081240 	call	8124 <__sprint_r>
    1ec0:	103b4a1e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    1ec4:	d8c02017 	ldw	r3,128(sp)
    1ec8:	dc401f17 	ldw	r17,124(sp)
    1ecc:	dd800404 	addi	r22,sp,16
    1ed0:	003e8f06 	br	1910 <__alt_data_end+0xfffb8530>
    1ed4:	0027883a 	mov	r19,zero
    1ed8:	003f4a06 	br	1c04 <__alt_data_end+0xfffb8824>
    1edc:	d9002d17 	ldw	r4,180(sp)
    1ee0:	d9801e04 	addi	r6,sp,120
    1ee4:	b80b883a 	mov	r5,r23
    1ee8:	00081240 	call	8124 <__sprint_r>
    1eec:	103b3f1e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    1ef0:	d8c02017 	ldw	r3,128(sp)
    1ef4:	da000404 	addi	r8,sp,16
    1ef8:	003c7b06 	br	10e8 <__alt_data_end+0xfffb7d08>
    1efc:	d9402a17 	ldw	r5,168(sp)
    1f00:	04e7c83a 	sub	r19,zero,r19
    1f04:	07000b44 	movi	fp,45
    1f08:	9804c03a 	cmpne	r2,r19,zero
    1f0c:	05adc83a 	sub	r22,zero,r22
    1f10:	df002785 	stb	fp,158(sp)
    1f14:	b0adc83a 	sub	r22,r22,r2
    1f18:	28017b16 	blt	r5,zero,2508 <___vfprintf_internal_r+0x1d2c>
    1f1c:	00bfdfc4 	movi	r2,-129
    1f20:	90a4703a 	and	r18,r18,r2
    1f24:	003b8906 	br	d4c <__alt_data_end+0xfffb796c>
    1f28:	d9003617 	ldw	r4,216(sp)
    1f2c:	d9403817 	ldw	r5,224(sp)
    1f30:	da003d15 	stw	r8,244(sp)
    1f34:	0007d480 	call	7d48 <__fpclassifyd>
    1f38:	da003d17 	ldw	r8,244(sp)
    1f3c:	1000f026 	beq	r2,zero,2300 <___vfprintf_internal_r+0x1b24>
    1f40:	d9002a17 	ldw	r4,168(sp)
    1f44:	05bff7c4 	movi	r22,-33
    1f48:	00bfffc4 	movi	r2,-1
    1f4c:	8dac703a 	and	r22,r17,r22
    1f50:	20820026 	beq	r4,r2,2754 <___vfprintf_internal_r+0x1f78>
    1f54:	008011c4 	movi	r2,71
    1f58:	b081f726 	beq	r22,r2,2738 <___vfprintf_internal_r+0x1f5c>
    1f5c:	d9003817 	ldw	r4,224(sp)
    1f60:	90c04014 	ori	r3,r18,256
    1f64:	d8c02c15 	stw	r3,176(sp)
    1f68:	20021516 	blt	r4,zero,27c0 <___vfprintf_internal_r+0x1fe4>
    1f6c:	dcc03817 	ldw	r19,224(sp)
    1f70:	d8002905 	stb	zero,164(sp)
    1f74:	00801984 	movi	r2,102
    1f78:	8881f926 	beq	r17,r2,2760 <___vfprintf_internal_r+0x1f84>
    1f7c:	00801184 	movi	r2,70
    1f80:	88821c26 	beq	r17,r2,27f4 <___vfprintf_internal_r+0x2018>
    1f84:	00801144 	movi	r2,69
    1f88:	b081ef26 	beq	r22,r2,2748 <___vfprintf_internal_r+0x1f6c>
    1f8c:	d8c02a17 	ldw	r3,168(sp)
    1f90:	d8802104 	addi	r2,sp,132
    1f94:	d8800315 	stw	r2,12(sp)
    1f98:	d9403617 	ldw	r5,216(sp)
    1f9c:	d8802504 	addi	r2,sp,148
    1fa0:	d9002d17 	ldw	r4,180(sp)
    1fa4:	d8800215 	stw	r2,8(sp)
    1fa8:	d8802604 	addi	r2,sp,152
    1fac:	d8c00015 	stw	r3,0(sp)
    1fb0:	d8800115 	stw	r2,4(sp)
    1fb4:	01c00084 	movi	r7,2
    1fb8:	980d883a 	mov	r6,r19
    1fbc:	d8c03c15 	stw	r3,240(sp)
    1fc0:	da003d15 	stw	r8,244(sp)
    1fc4:	0002f0c0 	call	2f0c <_dtoa_r>
    1fc8:	1021883a 	mov	r16,r2
    1fcc:	008019c4 	movi	r2,103
    1fd0:	d8c03c17 	ldw	r3,240(sp)
    1fd4:	da003d17 	ldw	r8,244(sp)
    1fd8:	88817126 	beq	r17,r2,25a0 <___vfprintf_internal_r+0x1dc4>
    1fdc:	008011c4 	movi	r2,71
    1fe0:	88829126 	beq	r17,r2,2a28 <___vfprintf_internal_r+0x224c>
    1fe4:	80f9883a 	add	fp,r16,r3
    1fe8:	d9003617 	ldw	r4,216(sp)
    1fec:	000d883a 	mov	r6,zero
    1ff0:	000f883a 	mov	r7,zero
    1ff4:	980b883a 	mov	r5,r19
    1ff8:	da003d15 	stw	r8,244(sp)
    1ffc:	000c0840 	call	c084 <__eqdf2>
    2000:	da003d17 	ldw	r8,244(sp)
    2004:	10018d26 	beq	r2,zero,263c <___vfprintf_internal_r+0x1e60>
    2008:	d8802117 	ldw	r2,132(sp)
    200c:	1700062e 	bgeu	r2,fp,2028 <___vfprintf_internal_r+0x184c>
    2010:	01000c04 	movi	r4,48
    2014:	10c00044 	addi	r3,r2,1
    2018:	d8c02115 	stw	r3,132(sp)
    201c:	11000005 	stb	r4,0(r2)
    2020:	d8802117 	ldw	r2,132(sp)
    2024:	173ffb36 	bltu	r2,fp,2014 <__alt_data_end+0xfffb8c34>
    2028:	1405c83a 	sub	r2,r2,r16
    202c:	d8803315 	stw	r2,204(sp)
    2030:	008011c4 	movi	r2,71
    2034:	b0817626 	beq	r22,r2,2610 <___vfprintf_internal_r+0x1e34>
    2038:	00801944 	movi	r2,101
    203c:	1442800e 	bge	r2,r17,2a40 <___vfprintf_internal_r+0x2264>
    2040:	d8c02617 	ldw	r3,152(sp)
    2044:	00801984 	movi	r2,102
    2048:	d8c03215 	stw	r3,200(sp)
    204c:	8881fe26 	beq	r17,r2,2848 <___vfprintf_internal_r+0x206c>
    2050:	d8c03217 	ldw	r3,200(sp)
    2054:	d9003317 	ldw	r4,204(sp)
    2058:	1901dd16 	blt	r3,r4,27d0 <___vfprintf_internal_r+0x1ff4>
    205c:	9480004c 	andi	r18,r18,1
    2060:	90022b1e 	bne	r18,zero,2910 <___vfprintf_internal_r+0x2134>
    2064:	1805883a 	mov	r2,r3
    2068:	18028316 	blt	r3,zero,2a78 <___vfprintf_internal_r+0x229c>
    206c:	d8c03217 	ldw	r3,200(sp)
    2070:	044019c4 	movi	r17,103
    2074:	d8c02b15 	stw	r3,172(sp)
    2078:	df002907 	ldb	fp,164(sp)
    207c:	e001531e 	bne	fp,zero,25cc <___vfprintf_internal_r+0x1df0>
    2080:	df002783 	ldbu	fp,158(sp)
    2084:	d8802915 	stw	r2,164(sp)
    2088:	dc802c17 	ldw	r18,176(sp)
    208c:	d8002a15 	stw	zero,168(sp)
    2090:	003baf06 	br	f50 <__alt_data_end+0xfffb7b70>
    2094:	d8c02e17 	ldw	r3,184(sp)
    2098:	d9002e17 	ldw	r4,184(sp)
    209c:	d9402e17 	ldw	r5,184(sp)
    20a0:	18c00017 	ldw	r3,0(r3)
    20a4:	21000117 	ldw	r4,4(r4)
    20a8:	29400204 	addi	r5,r5,8
    20ac:	d8c03615 	stw	r3,216(sp)
    20b0:	d9003815 	stw	r4,224(sp)
    20b4:	d9402e15 	stw	r5,184(sp)
    20b8:	003b5006 	br	dfc <__alt_data_end+0xfffb7a1c>
    20bc:	ac400007 	ldb	r17,0(r21)
    20c0:	003a2806 	br	964 <__alt_data_end+0xfffb7584>
    20c4:	9080100c 	andi	r2,r18,64
    20c8:	1000a826 	beq	r2,zero,236c <___vfprintf_internal_r+0x1b90>
    20cc:	d8c02e17 	ldw	r3,184(sp)
    20d0:	002d883a 	mov	r22,zero
    20d4:	1cc0000b 	ldhu	r19,0(r3)
    20d8:	18c00104 	addi	r3,r3,4
    20dc:	d8c02e15 	stw	r3,184(sp)
    20e0:	003caf06 	br	13a0 <__alt_data_end+0xfffb7fc0>
    20e4:	d9002e17 	ldw	r4,184(sp)
    20e8:	d9402a17 	ldw	r5,168(sp)
    20ec:	002d883a 	mov	r22,zero
    20f0:	20800104 	addi	r2,r4,4
    20f4:	24c00017 	ldw	r19,0(r4)
    20f8:	283ebb0e 	bge	r5,zero,1be8 <__alt_data_end+0xfffb8808>
    20fc:	003ef106 	br	1cc4 <__alt_data_end+0xfffb88e4>
    2100:	9080040c 	andi	r2,r18,16
    2104:	1000921e 	bne	r2,zero,2350 <___vfprintf_internal_r+0x1b74>
    2108:	9480100c 	andi	r18,r18,64
    210c:	90013926 	beq	r18,zero,25f4 <___vfprintf_internal_r+0x1e18>
    2110:	d9402e17 	ldw	r5,184(sp)
    2114:	d8c02f17 	ldw	r3,188(sp)
    2118:	28800017 	ldw	r2,0(r5)
    211c:	29400104 	addi	r5,r5,4
    2120:	d9402e15 	stw	r5,184(sp)
    2124:	10c0000d 	sth	r3,0(r2)
    2128:	0039e406 	br	8bc <__alt_data_end+0xfffb74dc>
    212c:	9080100c 	andi	r2,r18,64
    2130:	10008026 	beq	r2,zero,2334 <___vfprintf_internal_r+0x1b58>
    2134:	d8802e17 	ldw	r2,184(sp)
    2138:	14c0000f 	ldh	r19,0(r2)
    213c:	10800104 	addi	r2,r2,4
    2140:	d8802e15 	stw	r2,184(sp)
    2144:	982dd7fa 	srai	r22,r19,31
    2148:	b005883a 	mov	r2,r22
    214c:	003af706 	br	d2c <__alt_data_end+0xfffb794c>
    2150:	9080100c 	andi	r2,r18,64
    2154:	d8002785 	stb	zero,158(sp)
    2158:	10008a1e 	bne	r2,zero,2384 <___vfprintf_internal_r+0x1ba8>
    215c:	d9002e17 	ldw	r4,184(sp)
    2160:	d9402a17 	ldw	r5,168(sp)
    2164:	002d883a 	mov	r22,zero
    2168:	20800104 	addi	r2,r4,4
    216c:	24c00017 	ldw	r19,0(r4)
    2170:	283e4b0e 	bge	r5,zero,1aa0 <__alt_data_end+0xfffb86c0>
    2174:	9d86b03a 	or	r3,r19,r22
    2178:	d8802e15 	stw	r2,184(sp)
    217c:	183e4c1e 	bne	r3,zero,1ab0 <__alt_data_end+0xfffb86d0>
    2180:	0039883a 	mov	fp,zero
    2184:	0005883a 	mov	r2,zero
    2188:	003d4006 	br	168c <__alt_data_end+0xfffb82ac>
    218c:	01400074 	movhi	r5,1
    2190:	29419e84 	addi	r5,r5,1658
    2194:	d9402c15 	stw	r5,176(sp)
    2198:	d9402c17 	ldw	r5,176(sp)
    219c:	1c47883a 	add	r3,r3,r17
    21a0:	10800044 	addi	r2,r2,1
    21a4:	41400015 	stw	r5,0(r8)
    21a8:	44400115 	stw	r17,4(r8)
    21ac:	d8c02015 	stw	r3,128(sp)
    21b0:	d8801f15 	stw	r2,124(sp)
    21b4:	010001c4 	movi	r4,7
    21b8:	20bec816 	blt	r4,r2,1cdc <__alt_data_end+0xfffb88fc>
    21bc:	42000204 	addi	r8,r8,8
    21c0:	003ecd06 	br	1cf8 <__alt_data_end+0xfffb8918>
    21c4:	d9002a17 	ldw	r4,168(sp)
    21c8:	d8002785 	stb	zero,158(sp)
    21cc:	203d2d16 	blt	r4,zero,1684 <__alt_data_end+0xfffb82a4>
    21d0:	00bfdfc4 	movi	r2,-129
    21d4:	90a4703a 	and	r18,r18,r2
    21d8:	003a6106 	br	b60 <__alt_data_end+0xfffb7780>
    21dc:	01000074 	movhi	r4,1
    21e0:	21019e84 	addi	r4,r4,1658
    21e4:	d9002c15 	stw	r4,176(sp)
    21e8:	003bea06 	br	1194 <__alt_data_end+0xfffb7db4>
    21ec:	d9002d17 	ldw	r4,180(sp)
    21f0:	d9801e04 	addi	r6,sp,120
    21f4:	b80b883a 	mov	r5,r23
    21f8:	00081240 	call	8124 <__sprint_r>
    21fc:	103a7b1e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    2200:	d8c02017 	ldw	r3,128(sp)
    2204:	da000404 	addi	r8,sp,16
    2208:	003d4106 	br	1710 <__alt_data_end+0xfffb8330>
    220c:	d8801f17 	ldw	r2,124(sp)
    2210:	01400074 	movhi	r5,1
    2214:	01000044 	movi	r4,1
    2218:	18c00044 	addi	r3,r3,1
    221c:	10800044 	addi	r2,r2,1
    2220:	29419e04 	addi	r5,r5,1656
    2224:	41000115 	stw	r4,4(r8)
    2228:	41400015 	stw	r5,0(r8)
    222c:	d8c02015 	stw	r3,128(sp)
    2230:	d8801f15 	stw	r2,124(sp)
    2234:	010001c4 	movi	r4,7
    2238:	20805c16 	blt	r4,r2,23ac <___vfprintf_internal_r+0x1bd0>
    223c:	42000204 	addi	r8,r8,8
    2240:	8800041e 	bne	r17,zero,2254 <___vfprintf_internal_r+0x1a78>
    2244:	d8803317 	ldw	r2,204(sp)
    2248:	1000021e 	bne	r2,zero,2254 <___vfprintf_internal_r+0x1a78>
    224c:	9080004c 	andi	r2,r18,1
    2250:	103be726 	beq	r2,zero,11f0 <__alt_data_end+0xfffb7e10>
    2254:	d9003717 	ldw	r4,220(sp)
    2258:	d8801f17 	ldw	r2,124(sp)
    225c:	d9403417 	ldw	r5,208(sp)
    2260:	20c7883a 	add	r3,r4,r3
    2264:	10800044 	addi	r2,r2,1
    2268:	41000115 	stw	r4,4(r8)
    226c:	41400015 	stw	r5,0(r8)
    2270:	d8c02015 	stw	r3,128(sp)
    2274:	d8801f15 	stw	r2,124(sp)
    2278:	010001c4 	movi	r4,7
    227c:	20812116 	blt	r4,r2,2704 <___vfprintf_internal_r+0x1f28>
    2280:	42000204 	addi	r8,r8,8
    2284:	0463c83a 	sub	r17,zero,r17
    2288:	0440730e 	bge	zero,r17,2458 <___vfprintf_internal_r+0x1c7c>
    228c:	05800404 	movi	r22,16
    2290:	b440860e 	bge	r22,r17,24ac <___vfprintf_internal_r+0x1cd0>
    2294:	01400074 	movhi	r5,1
    2298:	29419e84 	addi	r5,r5,1658
    229c:	d9402c15 	stw	r5,176(sp)
    22a0:	070001c4 	movi	fp,7
    22a4:	dcc02d17 	ldw	r19,180(sp)
    22a8:	00000306 	br	22b8 <___vfprintf_internal_r+0x1adc>
    22ac:	42000204 	addi	r8,r8,8
    22b0:	8c7ffc04 	addi	r17,r17,-16
    22b4:	b440800e 	bge	r22,r17,24b8 <___vfprintf_internal_r+0x1cdc>
    22b8:	18c00404 	addi	r3,r3,16
    22bc:	10800044 	addi	r2,r2,1
    22c0:	45000015 	stw	r20,0(r8)
    22c4:	45800115 	stw	r22,4(r8)
    22c8:	d8c02015 	stw	r3,128(sp)
    22cc:	d8801f15 	stw	r2,124(sp)
    22d0:	e0bff60e 	bge	fp,r2,22ac <__alt_data_end+0xfffb8ecc>
    22d4:	d9801e04 	addi	r6,sp,120
    22d8:	b80b883a 	mov	r5,r23
    22dc:	9809883a 	mov	r4,r19
    22e0:	00081240 	call	8124 <__sprint_r>
    22e4:	103a411e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    22e8:	d8c02017 	ldw	r3,128(sp)
    22ec:	d8801f17 	ldw	r2,124(sp)
    22f0:	da000404 	addi	r8,sp,16
    22f4:	003fee06 	br	22b0 <__alt_data_end+0xfffb8ed0>
    22f8:	00bfffc4 	movi	r2,-1
    22fc:	003a3f06 	br	bfc <__alt_data_end+0xfffb781c>
    2300:	008011c4 	movi	r2,71
    2304:	1440b816 	blt	r2,r17,25e8 <___vfprintf_internal_r+0x1e0c>
    2308:	04000074 	movhi	r16,1
    230c:	84019004 	addi	r16,r16,1600
    2310:	00c000c4 	movi	r3,3
    2314:	00bfdfc4 	movi	r2,-129
    2318:	d8c02915 	stw	r3,164(sp)
    231c:	90a4703a 	and	r18,r18,r2
    2320:	df002783 	ldbu	fp,158(sp)
    2324:	d8c02b15 	stw	r3,172(sp)
    2328:	d8002a15 	stw	zero,168(sp)
    232c:	d8003215 	stw	zero,200(sp)
    2330:	003b0706 	br	f50 <__alt_data_end+0xfffb7b70>
    2334:	d8c02e17 	ldw	r3,184(sp)
    2338:	1cc00017 	ldw	r19,0(r3)
    233c:	18c00104 	addi	r3,r3,4
    2340:	d8c02e15 	stw	r3,184(sp)
    2344:	982dd7fa 	srai	r22,r19,31
    2348:	b005883a 	mov	r2,r22
    234c:	003a7706 	br	d2c <__alt_data_end+0xfffb794c>
    2350:	d8c02e17 	ldw	r3,184(sp)
    2354:	d9002f17 	ldw	r4,188(sp)
    2358:	18800017 	ldw	r2,0(r3)
    235c:	18c00104 	addi	r3,r3,4
    2360:	d8c02e15 	stw	r3,184(sp)
    2364:	11000015 	stw	r4,0(r2)
    2368:	00395406 	br	8bc <__alt_data_end+0xfffb74dc>
    236c:	d9002e17 	ldw	r4,184(sp)
    2370:	002d883a 	mov	r22,zero
    2374:	24c00017 	ldw	r19,0(r4)
    2378:	21000104 	addi	r4,r4,4
    237c:	d9002e15 	stw	r4,184(sp)
    2380:	003c0706 	br	13a0 <__alt_data_end+0xfffb7fc0>
    2384:	d9402e17 	ldw	r5,184(sp)
    2388:	d8c02a17 	ldw	r3,168(sp)
    238c:	002d883a 	mov	r22,zero
    2390:	28800104 	addi	r2,r5,4
    2394:	2cc0000b 	ldhu	r19,0(r5)
    2398:	183dc10e 	bge	r3,zero,1aa0 <__alt_data_end+0xfffb86c0>
    239c:	003f7506 	br	2174 <__alt_data_end+0xfffb8d94>
    23a0:	04000074 	movhi	r16,1
    23a4:	84018e04 	addi	r16,r16,1592
    23a8:	003aa706 	br	e48 <__alt_data_end+0xfffb7a68>
    23ac:	d9002d17 	ldw	r4,180(sp)
    23b0:	d9801e04 	addi	r6,sp,120
    23b4:	b80b883a 	mov	r5,r23
    23b8:	00081240 	call	8124 <__sprint_r>
    23bc:	103a0b1e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    23c0:	dc402617 	ldw	r17,152(sp)
    23c4:	d8c02017 	ldw	r3,128(sp)
    23c8:	da000404 	addi	r8,sp,16
    23cc:	003f9c06 	br	2240 <__alt_data_end+0xfffb8e60>
    23d0:	ac400043 	ldbu	r17,1(r21)
    23d4:	84000814 	ori	r16,r16,32
    23d8:	ad400044 	addi	r21,r21,1
    23dc:	8c403fcc 	andi	r17,r17,255
    23e0:	8c40201c 	xori	r17,r17,128
    23e4:	8c7fe004 	addi	r17,r17,-128
    23e8:	00395e06 	br	964 <__alt_data_end+0xfffb7584>
    23ec:	d8c02e15 	stw	r3,184(sp)
    23f0:	0039883a 	mov	fp,zero
    23f4:	003e3506 	br	1ccc <__alt_data_end+0xfffb88ec>
    23f8:	d9002d17 	ldw	r4,180(sp)
    23fc:	d9801e04 	addi	r6,sp,120
    2400:	b80b883a 	mov	r5,r23
    2404:	00081240 	call	8124 <__sprint_r>
    2408:	1039f81e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    240c:	d8c02017 	ldw	r3,128(sp)
    2410:	da000404 	addi	r8,sp,16
    2414:	003cd006 	br	1758 <__alt_data_end+0xfffb8378>
    2418:	8009883a 	mov	r4,r16
    241c:	df003d15 	stw	fp,244(sp)
    2420:	00007440 	call	744 <strlen>
    2424:	d8802b15 	stw	r2,172(sp)
    2428:	da003d17 	ldw	r8,244(sp)
    242c:	103c200e 	bge	r2,zero,14b0 <__alt_data_end+0xfffb80d0>
    2430:	0005883a 	mov	r2,zero
    2434:	003c1e06 	br	14b0 <__alt_data_end+0xfffb80d0>
    2438:	d9002d17 	ldw	r4,180(sp)
    243c:	d9801e04 	addi	r6,sp,120
    2440:	b80b883a 	mov	r5,r23
    2444:	00081240 	call	8124 <__sprint_r>
    2448:	1039e81e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    244c:	d8c02017 	ldw	r3,128(sp)
    2450:	d8801f17 	ldw	r2,124(sp)
    2454:	da000404 	addi	r8,sp,16
    2458:	d9403317 	ldw	r5,204(sp)
    245c:	10800044 	addi	r2,r2,1
    2460:	44000015 	stw	r16,0(r8)
    2464:	28c7883a 	add	r3,r5,r3
    2468:	003b5b06 	br	11d8 <__alt_data_end+0xfffb7df8>
    246c:	01000074 	movhi	r4,1
    2470:	2101a284 	addi	r4,r4,1674
    2474:	d9003515 	stw	r4,212(sp)
    2478:	003af206 	br	1044 <__alt_data_end+0xfffb7c64>
    247c:	013fffc4 	movi	r4,-1
    2480:	003a0806 	br	ca4 <__alt_data_end+0xfffb78c4>
    2484:	0023883a 	mov	r17,zero
    2488:	003d9d06 	br	1b00 <__alt_data_end+0xfffb8720>
    248c:	d9002d17 	ldw	r4,180(sp)
    2490:	d9801e04 	addi	r6,sp,120
    2494:	b80b883a 	mov	r5,r23
    2498:	00081240 	call	8124 <__sprint_r>
    249c:	1039d31e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    24a0:	d8c02017 	ldw	r3,128(sp)
    24a4:	da000404 	addi	r8,sp,16
    24a8:	003d9406 	br	1afc <__alt_data_end+0xfffb871c>
    24ac:	01000074 	movhi	r4,1
    24b0:	21019e84 	addi	r4,r4,1658
    24b4:	d9002c15 	stw	r4,176(sp)
    24b8:	d9002c17 	ldw	r4,176(sp)
    24bc:	1c47883a 	add	r3,r3,r17
    24c0:	10800044 	addi	r2,r2,1
    24c4:	41000015 	stw	r4,0(r8)
    24c8:	44400115 	stw	r17,4(r8)
    24cc:	d8c02015 	stw	r3,128(sp)
    24d0:	d8801f15 	stw	r2,124(sp)
    24d4:	010001c4 	movi	r4,7
    24d8:	20bfd716 	blt	r4,r2,2438 <__alt_data_end+0xfffb9058>
    24dc:	42000204 	addi	r8,r8,8
    24e0:	003fdd06 	br	2458 <__alt_data_end+0xfffb9078>
    24e4:	d9002d17 	ldw	r4,180(sp)
    24e8:	d9801e04 	addi	r6,sp,120
    24ec:	b80b883a 	mov	r5,r23
    24f0:	00081240 	call	8124 <__sprint_r>
    24f4:	1039bd1e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    24f8:	d8802617 	ldw	r2,152(sp)
    24fc:	d8c02017 	ldw	r3,128(sp)
    2500:	da000404 	addi	r8,sp,16
    2504:	003e1006 	br	1d48 <__alt_data_end+0xfffb8968>
    2508:	00800044 	movi	r2,1
    250c:	10803fcc 	andi	r2,r2,255
    2510:	00c00044 	movi	r3,1
    2514:	10fa0d26 	beq	r2,r3,d4c <__alt_data_end+0xfffb796c>
    2518:	00c00084 	movi	r3,2
    251c:	10fbaf26 	beq	r2,r3,13dc <__alt_data_end+0xfffb7ffc>
    2520:	003a6d06 	br	ed8 <__alt_data_end+0xfffb7af8>
    2524:	01000074 	movhi	r4,1
    2528:	2101a284 	addi	r4,r4,1674
    252c:	d9003515 	stw	r4,212(sp)
    2530:	003b5406 	br	1284 <__alt_data_end+0xfffb7ea4>
    2534:	d8802a17 	ldw	r2,168(sp)
    2538:	00c00184 	movi	r3,6
    253c:	1880012e 	bgeu	r3,r2,2544 <___vfprintf_internal_r+0x1d68>
    2540:	1805883a 	mov	r2,r3
    2544:	d8802b15 	stw	r2,172(sp)
    2548:	1000ef16 	blt	r2,zero,2908 <___vfprintf_internal_r+0x212c>
    254c:	04000074 	movhi	r16,1
    2550:	d8802915 	stw	r2,164(sp)
    2554:	dcc02e15 	stw	r19,184(sp)
    2558:	d8002a15 	stw	zero,168(sp)
    255c:	d8003215 	stw	zero,200(sp)
    2560:	84019c04 	addi	r16,r16,1648
    2564:	0039883a 	mov	fp,zero
    2568:	003a8006 	br	f6c <__alt_data_end+0xfffb7b8c>
    256c:	0021883a 	mov	r16,zero
    2570:	003e0706 	br	1d90 <__alt_data_end+0xfffb89b0>
    2574:	d9002d17 	ldw	r4,180(sp)
    2578:	d9801e04 	addi	r6,sp,120
    257c:	b80b883a 	mov	r5,r23
    2580:	00081240 	call	8124 <__sprint_r>
    2584:	1039991e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    2588:	d8802617 	ldw	r2,152(sp)
    258c:	d9403317 	ldw	r5,204(sp)
    2590:	d8c02017 	ldw	r3,128(sp)
    2594:	da000404 	addi	r8,sp,16
    2598:	2885c83a 	sub	r2,r5,r2
    259c:	003dfb06 	br	1d8c <__alt_data_end+0xfffb89ac>
    25a0:	9080004c 	andi	r2,r18,1
    25a4:	103e8f1e 	bne	r2,zero,1fe4 <__alt_data_end+0xfffb8c04>
    25a8:	d8802117 	ldw	r2,132(sp)
    25ac:	003e9e06 	br	2028 <__alt_data_end+0xfffb8c48>
    25b0:	1025883a 	mov	r18,r2
    25b4:	0039883a 	mov	fp,zero
    25b8:	00800084 	movi	r2,2
    25bc:	003fd306 	br	250c <__alt_data_end+0xfffb912c>
    25c0:	07000b44 	movi	fp,45
    25c4:	df002785 	stb	fp,158(sp)
    25c8:	003a1b06 	br	e38 <__alt_data_end+0xfffb7a58>
    25cc:	00c00b44 	movi	r3,45
    25d0:	d8c02785 	stb	r3,158(sp)
    25d4:	d8802915 	stw	r2,164(sp)
    25d8:	dc802c17 	ldw	r18,176(sp)
    25dc:	d8002a15 	stw	zero,168(sp)
    25e0:	07000b44 	movi	fp,45
    25e4:	003a5e06 	br	f60 <__alt_data_end+0xfffb7b80>
    25e8:	04000074 	movhi	r16,1
    25ec:	84019104 	addi	r16,r16,1604
    25f0:	003f4706 	br	2310 <__alt_data_end+0xfffb8f30>
    25f4:	d9002e17 	ldw	r4,184(sp)
    25f8:	d9402f17 	ldw	r5,188(sp)
    25fc:	20800017 	ldw	r2,0(r4)
    2600:	21000104 	addi	r4,r4,4
    2604:	d9002e15 	stw	r4,184(sp)
    2608:	11400015 	stw	r5,0(r2)
    260c:	0038ab06 	br	8bc <__alt_data_end+0xfffb74dc>
    2610:	dd802617 	ldw	r22,152(sp)
    2614:	00bfff44 	movi	r2,-3
    2618:	b0801c16 	blt	r22,r2,268c <___vfprintf_internal_r+0x1eb0>
    261c:	d9402a17 	ldw	r5,168(sp)
    2620:	2d801a16 	blt	r5,r22,268c <___vfprintf_internal_r+0x1eb0>
    2624:	dd803215 	stw	r22,200(sp)
    2628:	003e8906 	br	2050 <__alt_data_end+0xfffb8c70>
    262c:	01000074 	movhi	r4,1
    2630:	21019e84 	addi	r4,r4,1658
    2634:	d9002c15 	stw	r4,176(sp)
    2638:	003c9106 	br	1880 <__alt_data_end+0xfffb84a0>
    263c:	e005883a 	mov	r2,fp
    2640:	003e7906 	br	2028 <__alt_data_end+0xfffb8c48>
    2644:	d9002a17 	ldw	r4,168(sp)
    2648:	df002783 	ldbu	fp,158(sp)
    264c:	dcc02e15 	stw	r19,184(sp)
    2650:	d9002915 	stw	r4,164(sp)
    2654:	d9002b15 	stw	r4,172(sp)
    2658:	d8002a15 	stw	zero,168(sp)
    265c:	d8003215 	stw	zero,200(sp)
    2660:	003a3b06 	br	f50 <__alt_data_end+0xfffb7b70>
    2664:	9080004c 	andi	r2,r18,1
    2668:	0039883a 	mov	fp,zero
    266c:	10000426 	beq	r2,zero,2680 <___vfprintf_internal_r+0x1ea4>
    2670:	00800c04 	movi	r2,48
    2674:	dc001dc4 	addi	r16,sp,119
    2678:	d8801dc5 	stb	r2,119(sp)
    267c:	003b6406 	br	1410 <__alt_data_end+0xfffb8030>
    2680:	d8002b15 	stw	zero,172(sp)
    2684:	dc001e04 	addi	r16,sp,120
    2688:	003a2b06 	br	f38 <__alt_data_end+0xfffb7b58>
    268c:	8c7fff84 	addi	r17,r17,-2
    2690:	b5bfffc4 	addi	r22,r22,-1
    2694:	dd802615 	stw	r22,152(sp)
    2698:	dc4022c5 	stb	r17,139(sp)
    269c:	b000bf16 	blt	r22,zero,299c <___vfprintf_internal_r+0x21c0>
    26a0:	00800ac4 	movi	r2,43
    26a4:	d8802305 	stb	r2,140(sp)
    26a8:	00800244 	movi	r2,9
    26ac:	15807016 	blt	r2,r22,2870 <___vfprintf_internal_r+0x2094>
    26b0:	00800c04 	movi	r2,48
    26b4:	b5800c04 	addi	r22,r22,48
    26b8:	d8802345 	stb	r2,141(sp)
    26bc:	dd802385 	stb	r22,142(sp)
    26c0:	d88023c4 	addi	r2,sp,143
    26c4:	df0022c4 	addi	fp,sp,139
    26c8:	d8c03317 	ldw	r3,204(sp)
    26cc:	1739c83a 	sub	fp,r2,fp
    26d0:	d9003317 	ldw	r4,204(sp)
    26d4:	e0c7883a 	add	r3,fp,r3
    26d8:	df003a15 	stw	fp,232(sp)
    26dc:	d8c02b15 	stw	r3,172(sp)
    26e0:	00800044 	movi	r2,1
    26e4:	1100b30e 	bge	r2,r4,29b4 <___vfprintf_internal_r+0x21d8>
    26e8:	d8c02b17 	ldw	r3,172(sp)
    26ec:	18c00044 	addi	r3,r3,1
    26f0:	d8c02b15 	stw	r3,172(sp)
    26f4:	1805883a 	mov	r2,r3
    26f8:	1800ac16 	blt	r3,zero,29ac <___vfprintf_internal_r+0x21d0>
    26fc:	d8003215 	stw	zero,200(sp)
    2700:	003e5d06 	br	2078 <__alt_data_end+0xfffb8c98>
    2704:	d9002d17 	ldw	r4,180(sp)
    2708:	d9801e04 	addi	r6,sp,120
    270c:	b80b883a 	mov	r5,r23
    2710:	00081240 	call	8124 <__sprint_r>
    2714:	1039351e 	bne	r2,zero,bec <__alt_data_end+0xfffb780c>
    2718:	dc402617 	ldw	r17,152(sp)
    271c:	d8c02017 	ldw	r3,128(sp)
    2720:	d8801f17 	ldw	r2,124(sp)
    2724:	da000404 	addi	r8,sp,16
    2728:	003ed606 	br	2284 <__alt_data_end+0xfffb8ea4>
    272c:	182b883a 	mov	r21,r3
    2730:	d8002a15 	stw	zero,168(sp)
    2734:	00388c06 	br	968 <__alt_data_end+0xfffb7588>
    2738:	d8802a17 	ldw	r2,168(sp)
    273c:	103e071e 	bne	r2,zero,1f5c <__alt_data_end+0xfffb8b7c>
    2740:	dc002a15 	stw	r16,168(sp)
    2744:	003e0506 	br	1f5c <__alt_data_end+0xfffb8b7c>
    2748:	d9002a17 	ldw	r4,168(sp)
    274c:	20c00044 	addi	r3,r4,1
    2750:	003e0f06 	br	1f90 <__alt_data_end+0xfffb8bb0>
    2754:	01400184 	movi	r5,6
    2758:	d9402a15 	stw	r5,168(sp)
    275c:	003dff06 	br	1f5c <__alt_data_end+0xfffb8b7c>
    2760:	d8802104 	addi	r2,sp,132
    2764:	d8800315 	stw	r2,12(sp)
    2768:	d8802504 	addi	r2,sp,148
    276c:	d8800215 	stw	r2,8(sp)
    2770:	d8802604 	addi	r2,sp,152
    2774:	d8800115 	stw	r2,4(sp)
    2778:	d8802a17 	ldw	r2,168(sp)
    277c:	d9403617 	ldw	r5,216(sp)
    2780:	d9002d17 	ldw	r4,180(sp)
    2784:	d8800015 	stw	r2,0(sp)
    2788:	01c000c4 	movi	r7,3
    278c:	980d883a 	mov	r6,r19
    2790:	da003d15 	stw	r8,244(sp)
    2794:	0002f0c0 	call	2f0c <_dtoa_r>
    2798:	d8c02a17 	ldw	r3,168(sp)
    279c:	da003d17 	ldw	r8,244(sp)
    27a0:	1021883a 	mov	r16,r2
    27a4:	10f9883a 	add	fp,r2,r3
    27a8:	81000007 	ldb	r4,0(r16)
    27ac:	00800c04 	movi	r2,48
    27b0:	20805e26 	beq	r4,r2,292c <___vfprintf_internal_r+0x2150>
    27b4:	d8c02617 	ldw	r3,152(sp)
    27b8:	e0f9883a 	add	fp,fp,r3
    27bc:	003e0a06 	br	1fe8 <__alt_data_end+0xfffb8c08>
    27c0:	00c00b44 	movi	r3,45
    27c4:	24e0003c 	xorhi	r19,r4,32768
    27c8:	d8c02905 	stb	r3,164(sp)
    27cc:	003de906 	br	1f74 <__alt_data_end+0xfffb8b94>
    27d0:	d8c03217 	ldw	r3,200(sp)
    27d4:	00c07a0e 	bge	zero,r3,29c0 <___vfprintf_internal_r+0x21e4>
    27d8:	00800044 	movi	r2,1
    27dc:	d9003317 	ldw	r4,204(sp)
    27e0:	1105883a 	add	r2,r2,r4
    27e4:	d8802b15 	stw	r2,172(sp)
    27e8:	10004e16 	blt	r2,zero,2924 <___vfprintf_internal_r+0x2148>
    27ec:	044019c4 	movi	r17,103
    27f0:	003e2106 	br	2078 <__alt_data_end+0xfffb8c98>
    27f4:	d9002a17 	ldw	r4,168(sp)
    27f8:	d8802104 	addi	r2,sp,132
    27fc:	d8800315 	stw	r2,12(sp)
    2800:	d9000015 	stw	r4,0(sp)
    2804:	d8802504 	addi	r2,sp,148
    2808:	d9403617 	ldw	r5,216(sp)
    280c:	d9002d17 	ldw	r4,180(sp)
    2810:	d8800215 	stw	r2,8(sp)
    2814:	d8802604 	addi	r2,sp,152
    2818:	d8800115 	stw	r2,4(sp)
    281c:	01c000c4 	movi	r7,3
    2820:	980d883a 	mov	r6,r19
    2824:	da003d15 	stw	r8,244(sp)
    2828:	0002f0c0 	call	2f0c <_dtoa_r>
    282c:	d8c02a17 	ldw	r3,168(sp)
    2830:	da003d17 	ldw	r8,244(sp)
    2834:	1021883a 	mov	r16,r2
    2838:	00801184 	movi	r2,70
    283c:	80f9883a 	add	fp,r16,r3
    2840:	88bfd926 	beq	r17,r2,27a8 <__alt_data_end+0xfffb93c8>
    2844:	003de806 	br	1fe8 <__alt_data_end+0xfffb8c08>
    2848:	d9002a17 	ldw	r4,168(sp)
    284c:	00c04d0e 	bge	zero,r3,2984 <___vfprintf_internal_r+0x21a8>
    2850:	2000441e 	bne	r4,zero,2964 <___vfprintf_internal_r+0x2188>
    2854:	9480004c 	andi	r18,r18,1
    2858:	9000421e 	bne	r18,zero,2964 <___vfprintf_internal_r+0x2188>
    285c:	1805883a 	mov	r2,r3
    2860:	18006f16 	blt	r3,zero,2a20 <___vfprintf_internal_r+0x2244>
    2864:	d8c03217 	ldw	r3,200(sp)
    2868:	d8c02b15 	stw	r3,172(sp)
    286c:	003e0206 	br	2078 <__alt_data_end+0xfffb8c98>
    2870:	df0022c4 	addi	fp,sp,139
    2874:	dc002a15 	stw	r16,168(sp)
    2878:	4027883a 	mov	r19,r8
    287c:	e021883a 	mov	r16,fp
    2880:	b009883a 	mov	r4,r22
    2884:	01400284 	movi	r5,10
    2888:	000acb00 	call	acb0 <__modsi3>
    288c:	10800c04 	addi	r2,r2,48
    2890:	843fffc4 	addi	r16,r16,-1
    2894:	b009883a 	mov	r4,r22
    2898:	01400284 	movi	r5,10
    289c:	80800005 	stb	r2,0(r16)
    28a0:	000ac2c0 	call	ac2c <__divsi3>
    28a4:	102d883a 	mov	r22,r2
    28a8:	00800244 	movi	r2,9
    28ac:	15bff416 	blt	r2,r22,2880 <__alt_data_end+0xfffb94a0>
    28b0:	9811883a 	mov	r8,r19
    28b4:	b0800c04 	addi	r2,r22,48
    28b8:	8027883a 	mov	r19,r16
    28bc:	997fffc4 	addi	r5,r19,-1
    28c0:	98bfffc5 	stb	r2,-1(r19)
    28c4:	dc002a17 	ldw	r16,168(sp)
    28c8:	2f006d2e 	bgeu	r5,fp,2a80 <___vfprintf_internal_r+0x22a4>
    28cc:	d9c02384 	addi	r7,sp,142
    28d0:	3ccfc83a 	sub	r7,r7,r19
    28d4:	d9002344 	addi	r4,sp,141
    28d8:	e1cf883a 	add	r7,fp,r7
    28dc:	00000106 	br	28e4 <___vfprintf_internal_r+0x2108>
    28e0:	28800003 	ldbu	r2,0(r5)
    28e4:	20800005 	stb	r2,0(r4)
    28e8:	21000044 	addi	r4,r4,1
    28ec:	29400044 	addi	r5,r5,1
    28f0:	393ffb1e 	bne	r7,r4,28e0 <__alt_data_end+0xfffb9500>
    28f4:	d8802304 	addi	r2,sp,140
    28f8:	14c5c83a 	sub	r2,r2,r19
    28fc:	d8c02344 	addi	r3,sp,141
    2900:	1885883a 	add	r2,r3,r2
    2904:	003f7006 	br	26c8 <__alt_data_end+0xfffb92e8>
    2908:	0005883a 	mov	r2,zero
    290c:	003f0f06 	br	254c <__alt_data_end+0xfffb916c>
    2910:	d8c03217 	ldw	r3,200(sp)
    2914:	18c00044 	addi	r3,r3,1
    2918:	d8c02b15 	stw	r3,172(sp)
    291c:	1805883a 	mov	r2,r3
    2920:	183fb20e 	bge	r3,zero,27ec <__alt_data_end+0xfffb940c>
    2924:	0005883a 	mov	r2,zero
    2928:	003fb006 	br	27ec <__alt_data_end+0xfffb940c>
    292c:	d9003617 	ldw	r4,216(sp)
    2930:	000d883a 	mov	r6,zero
    2934:	000f883a 	mov	r7,zero
    2938:	980b883a 	mov	r5,r19
    293c:	d8c03c15 	stw	r3,240(sp)
    2940:	da003d15 	stw	r8,244(sp)
    2944:	000c0840 	call	c084 <__eqdf2>
    2948:	d8c03c17 	ldw	r3,240(sp)
    294c:	da003d17 	ldw	r8,244(sp)
    2950:	103f9826 	beq	r2,zero,27b4 <__alt_data_end+0xfffb93d4>
    2954:	00800044 	movi	r2,1
    2958:	10c7c83a 	sub	r3,r2,r3
    295c:	d8c02615 	stw	r3,152(sp)
    2960:	003f9506 	br	27b8 <__alt_data_end+0xfffb93d8>
    2964:	d9002a17 	ldw	r4,168(sp)
    2968:	d8c03217 	ldw	r3,200(sp)
    296c:	20800044 	addi	r2,r4,1
    2970:	1885883a 	add	r2,r3,r2
    2974:	d8802b15 	stw	r2,172(sp)
    2978:	103dbf0e 	bge	r2,zero,2078 <__alt_data_end+0xfffb8c98>
    297c:	0005883a 	mov	r2,zero
    2980:	003dbd06 	br	2078 <__alt_data_end+0xfffb8c98>
    2984:	2000201e 	bne	r4,zero,2a08 <___vfprintf_internal_r+0x222c>
    2988:	9480004c 	andi	r18,r18,1
    298c:	90001e1e 	bne	r18,zero,2a08 <___vfprintf_internal_r+0x222c>
    2990:	00800044 	movi	r2,1
    2994:	d8802b15 	stw	r2,172(sp)
    2998:	003db706 	br	2078 <__alt_data_end+0xfffb8c98>
    299c:	00800b44 	movi	r2,45
    29a0:	05adc83a 	sub	r22,zero,r22
    29a4:	d8802305 	stb	r2,140(sp)
    29a8:	003f3f06 	br	26a8 <__alt_data_end+0xfffb92c8>
    29ac:	0005883a 	mov	r2,zero
    29b0:	003f5206 	br	26fc <__alt_data_end+0xfffb931c>
    29b4:	90a4703a 	and	r18,r18,r2
    29b8:	903f4e26 	beq	r18,zero,26f4 <__alt_data_end+0xfffb9314>
    29bc:	003f4a06 	br	26e8 <__alt_data_end+0xfffb9308>
    29c0:	00800084 	movi	r2,2
    29c4:	10c5c83a 	sub	r2,r2,r3
    29c8:	003f8406 	br	27dc <__alt_data_end+0xfffb93fc>
    29cc:	d9402e17 	ldw	r5,184(sp)
    29d0:	d9002e17 	ldw	r4,184(sp)
    29d4:	ac400043 	ldbu	r17,1(r21)
    29d8:	29400017 	ldw	r5,0(r5)
    29dc:	20800104 	addi	r2,r4,4
    29e0:	d8802e15 	stw	r2,184(sp)
    29e4:	d9402a15 	stw	r5,168(sp)
    29e8:	182b883a 	mov	r21,r3
    29ec:	283e7b0e 	bge	r5,zero,23dc <__alt_data_end+0xfffb8ffc>
    29f0:	8c403fcc 	andi	r17,r17,255
    29f4:	017fffc4 	movi	r5,-1
    29f8:	8c40201c 	xori	r17,r17,128
    29fc:	d9402a15 	stw	r5,168(sp)
    2a00:	8c7fe004 	addi	r17,r17,-128
    2a04:	0037d706 	br	964 <__alt_data_end+0xfffb7584>
    2a08:	d8c02a17 	ldw	r3,168(sp)
    2a0c:	18c00084 	addi	r3,r3,2
    2a10:	d8c02b15 	stw	r3,172(sp)
    2a14:	1805883a 	mov	r2,r3
    2a18:	183d970e 	bge	r3,zero,2078 <__alt_data_end+0xfffb8c98>
    2a1c:	003fd706 	br	297c <__alt_data_end+0xfffb959c>
    2a20:	0005883a 	mov	r2,zero
    2a24:	003f8f06 	br	2864 <__alt_data_end+0xfffb9484>
    2a28:	9080004c 	andi	r2,r18,1
    2a2c:	103f821e 	bne	r2,zero,2838 <__alt_data_end+0xfffb9458>
    2a30:	d8802117 	ldw	r2,132(sp)
    2a34:	1405c83a 	sub	r2,r2,r16
    2a38:	d8803315 	stw	r2,204(sp)
    2a3c:	b47ef426 	beq	r22,r17,2610 <__alt_data_end+0xfffb9230>
    2a40:	dd802617 	ldw	r22,152(sp)
    2a44:	003f1206 	br	2690 <__alt_data_end+0xfffb92b0>
    2a48:	d8c02b03 	ldbu	r3,172(sp)
    2a4c:	d8c02785 	stb	r3,158(sp)
    2a50:	0038df06 	br	dd0 <__alt_data_end+0xfffb79f0>
    2a54:	d8c02b03 	ldbu	r3,172(sp)
    2a58:	d8c02785 	stb	r3,158(sp)
    2a5c:	0038aa06 	br	d08 <__alt_data_end+0xfffb7928>
    2a60:	d8c02b03 	ldbu	r3,172(sp)
    2a64:	d8c02785 	stb	r3,158(sp)
    2a68:	003a4306 	br	1378 <__alt_data_end+0xfffb7f98>
    2a6c:	d8c02b03 	ldbu	r3,172(sp)
    2a70:	d8c02785 	stb	r3,158(sp)
    2a74:	003af506 	br	164c <__alt_data_end+0xfffb826c>
    2a78:	0005883a 	mov	r2,zero
    2a7c:	003d7b06 	br	206c <__alt_data_end+0xfffb8c8c>
    2a80:	d8802344 	addi	r2,sp,141
    2a84:	003f1006 	br	26c8 <__alt_data_end+0xfffb92e8>
    2a88:	d8c02b03 	ldbu	r3,172(sp)
    2a8c:	d8c02785 	stb	r3,158(sp)
    2a90:	0038fd06 	br	e88 <__alt_data_end+0xfffb7aa8>
    2a94:	d8c02b03 	ldbu	r3,172(sp)
    2a98:	d8c02785 	stb	r3,158(sp)
    2a9c:	003a9706 	br	14fc <__alt_data_end+0xfffb811c>
    2aa0:	d8c02b03 	ldbu	r3,172(sp)
    2aa4:	d8c02785 	stb	r3,158(sp)
    2aa8:	003a1806 	br	130c <__alt_data_end+0xfffb7f2c>
    2aac:	d8c02b03 	ldbu	r3,172(sp)
    2ab0:	d8c02785 	stb	r3,158(sp)
    2ab4:	003abe06 	br	15b0 <__alt_data_end+0xfffb81d0>

00002ab8 <__vfprintf_internal>:
    2ab8:	00800074 	movhi	r2,1
    2abc:	1088f904 	addi	r2,r2,9188
    2ac0:	300f883a 	mov	r7,r6
    2ac4:	280d883a 	mov	r6,r5
    2ac8:	200b883a 	mov	r5,r4
    2acc:	11000017 	ldw	r4,0(r2)
    2ad0:	00007dc1 	jmpi	7dc <___vfprintf_internal_r>

00002ad4 <__sbprintf>:
    2ad4:	2880030b 	ldhu	r2,12(r5)
    2ad8:	2ac01917 	ldw	r11,100(r5)
    2adc:	2a80038b 	ldhu	r10,14(r5)
    2ae0:	2a400717 	ldw	r9,28(r5)
    2ae4:	2a000917 	ldw	r8,36(r5)
    2ae8:	defee204 	addi	sp,sp,-1144
    2aec:	00c10004 	movi	r3,1024
    2af0:	dc011a15 	stw	r16,1128(sp)
    2af4:	10bfff4c 	andi	r2,r2,65533
    2af8:	2821883a 	mov	r16,r5
    2afc:	d8cb883a 	add	r5,sp,r3
    2b00:	dc811c15 	stw	r18,1136(sp)
    2b04:	dc411b15 	stw	r17,1132(sp)
    2b08:	dfc11d15 	stw	ra,1140(sp)
    2b0c:	2025883a 	mov	r18,r4
    2b10:	d881030d 	sth	r2,1036(sp)
    2b14:	dac11915 	stw	r11,1124(sp)
    2b18:	da81038d 	sth	r10,1038(sp)
    2b1c:	da410715 	stw	r9,1052(sp)
    2b20:	da010915 	stw	r8,1060(sp)
    2b24:	dec10015 	stw	sp,1024(sp)
    2b28:	dec10415 	stw	sp,1040(sp)
    2b2c:	d8c10215 	stw	r3,1032(sp)
    2b30:	d8c10515 	stw	r3,1044(sp)
    2b34:	d8010615 	stw	zero,1048(sp)
    2b38:	00007dc0 	call	7dc <___vfprintf_internal_r>
    2b3c:	1023883a 	mov	r17,r2
    2b40:	10000416 	blt	r2,zero,2b54 <__sbprintf+0x80>
    2b44:	d9410004 	addi	r5,sp,1024
    2b48:	9009883a 	mov	r4,r18
    2b4c:	00047b00 	call	47b0 <_fflush_r>
    2b50:	10000d1e 	bne	r2,zero,2b88 <__sbprintf+0xb4>
    2b54:	d881030b 	ldhu	r2,1036(sp)
    2b58:	1080100c 	andi	r2,r2,64
    2b5c:	10000326 	beq	r2,zero,2b6c <__sbprintf+0x98>
    2b60:	8080030b 	ldhu	r2,12(r16)
    2b64:	10801014 	ori	r2,r2,64
    2b68:	8080030d 	sth	r2,12(r16)
    2b6c:	8805883a 	mov	r2,r17
    2b70:	dfc11d17 	ldw	ra,1140(sp)
    2b74:	dc811c17 	ldw	r18,1136(sp)
    2b78:	dc411b17 	ldw	r17,1132(sp)
    2b7c:	dc011a17 	ldw	r16,1128(sp)
    2b80:	dec11e04 	addi	sp,sp,1144
    2b84:	f800283a 	ret
    2b88:	047fffc4 	movi	r17,-1
    2b8c:	003ff106 	br	2b54 <__alt_data_end+0xfffb9774>

00002b90 <__swsetup_r>:
    2b90:	00800074 	movhi	r2,1
    2b94:	defffd04 	addi	sp,sp,-12
    2b98:	1088f904 	addi	r2,r2,9188
    2b9c:	dc400115 	stw	r17,4(sp)
    2ba0:	2023883a 	mov	r17,r4
    2ba4:	11000017 	ldw	r4,0(r2)
    2ba8:	dc000015 	stw	r16,0(sp)
    2bac:	dfc00215 	stw	ra,8(sp)
    2bb0:	2821883a 	mov	r16,r5
    2bb4:	20000226 	beq	r4,zero,2bc0 <__swsetup_r+0x30>
    2bb8:	20800e17 	ldw	r2,56(r4)
    2bbc:	10003126 	beq	r2,zero,2c84 <__swsetup_r+0xf4>
    2bc0:	8080030b 	ldhu	r2,12(r16)
    2bc4:	10c0020c 	andi	r3,r2,8
    2bc8:	1009883a 	mov	r4,r2
    2bcc:	18000f26 	beq	r3,zero,2c0c <__swsetup_r+0x7c>
    2bd0:	80c00417 	ldw	r3,16(r16)
    2bd4:	18001526 	beq	r3,zero,2c2c <__swsetup_r+0x9c>
    2bd8:	1100004c 	andi	r4,r2,1
    2bdc:	20001c1e 	bne	r4,zero,2c50 <__swsetup_r+0xc0>
    2be0:	1080008c 	andi	r2,r2,2
    2be4:	1000291e 	bne	r2,zero,2c8c <__swsetup_r+0xfc>
    2be8:	80800517 	ldw	r2,20(r16)
    2bec:	80800215 	stw	r2,8(r16)
    2bf0:	18001c26 	beq	r3,zero,2c64 <__swsetup_r+0xd4>
    2bf4:	0005883a 	mov	r2,zero
    2bf8:	dfc00217 	ldw	ra,8(sp)
    2bfc:	dc400117 	ldw	r17,4(sp)
    2c00:	dc000017 	ldw	r16,0(sp)
    2c04:	dec00304 	addi	sp,sp,12
    2c08:	f800283a 	ret
    2c0c:	2080040c 	andi	r2,r4,16
    2c10:	10002e26 	beq	r2,zero,2ccc <__swsetup_r+0x13c>
    2c14:	2080010c 	andi	r2,r4,4
    2c18:	10001e1e 	bne	r2,zero,2c94 <__swsetup_r+0x104>
    2c1c:	80c00417 	ldw	r3,16(r16)
    2c20:	20800214 	ori	r2,r4,8
    2c24:	8080030d 	sth	r2,12(r16)
    2c28:	183feb1e 	bne	r3,zero,2bd8 <__alt_data_end+0xfffb97f8>
    2c2c:	1100a00c 	andi	r4,r2,640
    2c30:	01408004 	movi	r5,512
    2c34:	217fe826 	beq	r4,r5,2bd8 <__alt_data_end+0xfffb97f8>
    2c38:	800b883a 	mov	r5,r16
    2c3c:	8809883a 	mov	r4,r17
    2c40:	000574c0 	call	574c <__smakebuf_r>
    2c44:	8080030b 	ldhu	r2,12(r16)
    2c48:	80c00417 	ldw	r3,16(r16)
    2c4c:	003fe206 	br	2bd8 <__alt_data_end+0xfffb97f8>
    2c50:	80800517 	ldw	r2,20(r16)
    2c54:	80000215 	stw	zero,8(r16)
    2c58:	0085c83a 	sub	r2,zero,r2
    2c5c:	80800615 	stw	r2,24(r16)
    2c60:	183fe41e 	bne	r3,zero,2bf4 <__alt_data_end+0xfffb9814>
    2c64:	80c0030b 	ldhu	r3,12(r16)
    2c68:	0005883a 	mov	r2,zero
    2c6c:	1900200c 	andi	r4,r3,128
    2c70:	203fe126 	beq	r4,zero,2bf8 <__alt_data_end+0xfffb9818>
    2c74:	18c01014 	ori	r3,r3,64
    2c78:	80c0030d 	sth	r3,12(r16)
    2c7c:	00bfffc4 	movi	r2,-1
    2c80:	003fdd06 	br	2bf8 <__alt_data_end+0xfffb9818>
    2c84:	0004b9c0 	call	4b9c <__sinit>
    2c88:	003fcd06 	br	2bc0 <__alt_data_end+0xfffb97e0>
    2c8c:	0005883a 	mov	r2,zero
    2c90:	003fd606 	br	2bec <__alt_data_end+0xfffb980c>
    2c94:	81400c17 	ldw	r5,48(r16)
    2c98:	28000626 	beq	r5,zero,2cb4 <__swsetup_r+0x124>
    2c9c:	80801004 	addi	r2,r16,64
    2ca0:	28800326 	beq	r5,r2,2cb0 <__swsetup_r+0x120>
    2ca4:	8809883a 	mov	r4,r17
    2ca8:	0004d100 	call	4d10 <_free_r>
    2cac:	8100030b 	ldhu	r4,12(r16)
    2cb0:	80000c15 	stw	zero,48(r16)
    2cb4:	80c00417 	ldw	r3,16(r16)
    2cb8:	00bff6c4 	movi	r2,-37
    2cbc:	1108703a 	and	r4,r2,r4
    2cc0:	80000115 	stw	zero,4(r16)
    2cc4:	80c00015 	stw	r3,0(r16)
    2cc8:	003fd506 	br	2c20 <__alt_data_end+0xfffb9840>
    2ccc:	00800244 	movi	r2,9
    2cd0:	88800015 	stw	r2,0(r17)
    2cd4:	20801014 	ori	r2,r4,64
    2cd8:	8080030d 	sth	r2,12(r16)
    2cdc:	00bfffc4 	movi	r2,-1
    2ce0:	003fc506 	br	2bf8 <__alt_data_end+0xfffb9818>

00002ce4 <quorem>:
    2ce4:	defff204 	addi	sp,sp,-56
    2ce8:	ddc00b15 	stw	r23,44(sp)
    2cec:	20800417 	ldw	r2,16(r4)
    2cf0:	2dc00417 	ldw	r23,16(r5)
    2cf4:	dfc00d15 	stw	ra,52(sp)
    2cf8:	df000c15 	stw	fp,48(sp)
    2cfc:	dd800a15 	stw	r22,40(sp)
    2d00:	dd400915 	stw	r21,36(sp)
    2d04:	dd000815 	stw	r20,32(sp)
    2d08:	dcc00715 	stw	r19,28(sp)
    2d0c:	dc800615 	stw	r18,24(sp)
    2d10:	dc400515 	stw	r17,20(sp)
    2d14:	dc000415 	stw	r16,16(sp)
    2d18:	15c07a16 	blt	r2,r23,2f04 <quorem+0x220>
    2d1c:	bdffffc4 	addi	r23,r23,-1
    2d20:	bde9883a 	add	r20,r23,r23
    2d24:	28c00504 	addi	r3,r5,20
    2d28:	a529883a 	add	r20,r20,r20
    2d2c:	1d39883a 	add	fp,r3,r20
    2d30:	24c00504 	addi	r19,r4,20
    2d34:	d9400215 	stw	r5,8(sp)
    2d38:	9d29883a 	add	r20,r19,r20
    2d3c:	e1400017 	ldw	r5,0(fp)
    2d40:	d9000015 	stw	r4,0(sp)
    2d44:	a1000017 	ldw	r4,0(r20)
    2d48:	29400044 	addi	r5,r5,1
    2d4c:	d8c00115 	stw	r3,4(sp)
    2d50:	dd000315 	stw	r20,12(sp)
    2d54:	000ad240 	call	ad24 <__udivsi3>
    2d58:	1025883a 	mov	r18,r2
    2d5c:	10003026 	beq	r2,zero,2e20 <quorem+0x13c>
    2d60:	dc400117 	ldw	r17,4(sp)
    2d64:	9829883a 	mov	r20,r19
    2d68:	002d883a 	mov	r22,zero
    2d6c:	0021883a 	mov	r16,zero
    2d70:	8d400017 	ldw	r21,0(r17)
    2d74:	900b883a 	mov	r5,r18
    2d78:	8c400104 	addi	r17,r17,4
    2d7c:	a93fffcc 	andi	r4,r21,65535
    2d80:	000ade00 	call	ade0 <__mulsi3>
    2d84:	a808d43a 	srli	r4,r21,16
    2d88:	900b883a 	mov	r5,r18
    2d8c:	15ad883a 	add	r22,r2,r22
    2d90:	000ade00 	call	ade0 <__mulsi3>
    2d94:	a1000017 	ldw	r4,0(r20)
    2d98:	b00cd43a 	srli	r6,r22,16
    2d9c:	b0ffffcc 	andi	r3,r22,65535
    2da0:	217fffcc 	andi	r5,r4,65535
    2da4:	2c21883a 	add	r16,r5,r16
    2da8:	80c7c83a 	sub	r3,r16,r3
    2dac:	2008d43a 	srli	r4,r4,16
    2db0:	1185883a 	add	r2,r2,r6
    2db4:	1821d43a 	srai	r16,r3,16
    2db8:	117fffcc 	andi	r5,r2,65535
    2dbc:	2149c83a 	sub	r4,r4,r5
    2dc0:	2421883a 	add	r16,r4,r16
    2dc4:	8008943a 	slli	r4,r16,16
    2dc8:	18ffffcc 	andi	r3,r3,65535
    2dcc:	102cd43a 	srli	r22,r2,16
    2dd0:	20c8b03a 	or	r4,r4,r3
    2dd4:	a1000015 	stw	r4,0(r20)
    2dd8:	8021d43a 	srai	r16,r16,16
    2ddc:	a5000104 	addi	r20,r20,4
    2de0:	e47fe32e 	bgeu	fp,r17,2d70 <__alt_data_end+0xfffb9990>
    2de4:	d8c00317 	ldw	r3,12(sp)
    2de8:	18800017 	ldw	r2,0(r3)
    2dec:	10000c1e 	bne	r2,zero,2e20 <quorem+0x13c>
    2df0:	18bfff04 	addi	r2,r3,-4
    2df4:	9880082e 	bgeu	r19,r2,2e18 <quorem+0x134>
    2df8:	18ffff17 	ldw	r3,-4(r3)
    2dfc:	18000326 	beq	r3,zero,2e0c <quorem+0x128>
    2e00:	00000506 	br	2e18 <quorem+0x134>
    2e04:	10c00017 	ldw	r3,0(r2)
    2e08:	1800031e 	bne	r3,zero,2e18 <quorem+0x134>
    2e0c:	10bfff04 	addi	r2,r2,-4
    2e10:	bdffffc4 	addi	r23,r23,-1
    2e14:	98bffb36 	bltu	r19,r2,2e04 <__alt_data_end+0xfffb9a24>
    2e18:	d8c00017 	ldw	r3,0(sp)
    2e1c:	1dc00415 	stw	r23,16(r3)
    2e20:	d9400217 	ldw	r5,8(sp)
    2e24:	d9000017 	ldw	r4,0(sp)
    2e28:	0006f480 	call	6f48 <__mcmp>
    2e2c:	10002816 	blt	r2,zero,2ed0 <quorem+0x1ec>
    2e30:	dc400117 	ldw	r17,4(sp)
    2e34:	94800044 	addi	r18,r18,1
    2e38:	980d883a 	mov	r6,r19
    2e3c:	0007883a 	mov	r3,zero
    2e40:	31000017 	ldw	r4,0(r6)
    2e44:	89400017 	ldw	r5,0(r17)
    2e48:	31800104 	addi	r6,r6,4
    2e4c:	20bfffcc 	andi	r2,r4,65535
    2e50:	10c7883a 	add	r3,r2,r3
    2e54:	28bfffcc 	andi	r2,r5,65535
    2e58:	1885c83a 	sub	r2,r3,r2
    2e5c:	280ad43a 	srli	r5,r5,16
    2e60:	2008d43a 	srli	r4,r4,16
    2e64:	1007d43a 	srai	r3,r2,16
    2e68:	10bfffcc 	andi	r2,r2,65535
    2e6c:	2149c83a 	sub	r4,r4,r5
    2e70:	20c9883a 	add	r4,r4,r3
    2e74:	200a943a 	slli	r5,r4,16
    2e78:	8c400104 	addi	r17,r17,4
    2e7c:	2007d43a 	srai	r3,r4,16
    2e80:	2884b03a 	or	r2,r5,r2
    2e84:	30bfff15 	stw	r2,-4(r6)
    2e88:	e47fed2e 	bgeu	fp,r17,2e40 <__alt_data_end+0xfffb9a60>
    2e8c:	bdc5883a 	add	r2,r23,r23
    2e90:	1085883a 	add	r2,r2,r2
    2e94:	9887883a 	add	r3,r19,r2
    2e98:	18800017 	ldw	r2,0(r3)
    2e9c:	10000c1e 	bne	r2,zero,2ed0 <quorem+0x1ec>
    2ea0:	18bfff04 	addi	r2,r3,-4
    2ea4:	9880082e 	bgeu	r19,r2,2ec8 <quorem+0x1e4>
    2ea8:	18ffff17 	ldw	r3,-4(r3)
    2eac:	18000326 	beq	r3,zero,2ebc <quorem+0x1d8>
    2eb0:	00000506 	br	2ec8 <quorem+0x1e4>
    2eb4:	10c00017 	ldw	r3,0(r2)
    2eb8:	1800031e 	bne	r3,zero,2ec8 <quorem+0x1e4>
    2ebc:	10bfff04 	addi	r2,r2,-4
    2ec0:	bdffffc4 	addi	r23,r23,-1
    2ec4:	98bffb36 	bltu	r19,r2,2eb4 <__alt_data_end+0xfffb9ad4>
    2ec8:	d8c00017 	ldw	r3,0(sp)
    2ecc:	1dc00415 	stw	r23,16(r3)
    2ed0:	9005883a 	mov	r2,r18
    2ed4:	dfc00d17 	ldw	ra,52(sp)
    2ed8:	df000c17 	ldw	fp,48(sp)
    2edc:	ddc00b17 	ldw	r23,44(sp)
    2ee0:	dd800a17 	ldw	r22,40(sp)
    2ee4:	dd400917 	ldw	r21,36(sp)
    2ee8:	dd000817 	ldw	r20,32(sp)
    2eec:	dcc00717 	ldw	r19,28(sp)
    2ef0:	dc800617 	ldw	r18,24(sp)
    2ef4:	dc400517 	ldw	r17,20(sp)
    2ef8:	dc000417 	ldw	r16,16(sp)
    2efc:	dec00e04 	addi	sp,sp,56
    2f00:	f800283a 	ret
    2f04:	0005883a 	mov	r2,zero
    2f08:	003ff206 	br	2ed4 <__alt_data_end+0xfffb9af4>

00002f0c <_dtoa_r>:
    2f0c:	20801017 	ldw	r2,64(r4)
    2f10:	deffde04 	addi	sp,sp,-136
    2f14:	df002015 	stw	fp,128(sp)
    2f18:	dcc01b15 	stw	r19,108(sp)
    2f1c:	dc801a15 	stw	r18,104(sp)
    2f20:	dc401915 	stw	r17,100(sp)
    2f24:	dc001815 	stw	r16,96(sp)
    2f28:	dfc02115 	stw	ra,132(sp)
    2f2c:	ddc01f15 	stw	r23,124(sp)
    2f30:	dd801e15 	stw	r22,120(sp)
    2f34:	dd401d15 	stw	r21,116(sp)
    2f38:	dd001c15 	stw	r20,112(sp)
    2f3c:	d9c00315 	stw	r7,12(sp)
    2f40:	2039883a 	mov	fp,r4
    2f44:	3023883a 	mov	r17,r6
    2f48:	2825883a 	mov	r18,r5
    2f4c:	dc002417 	ldw	r16,144(sp)
    2f50:	3027883a 	mov	r19,r6
    2f54:	10000826 	beq	r2,zero,2f78 <_dtoa_r+0x6c>
    2f58:	21801117 	ldw	r6,68(r4)
    2f5c:	00c00044 	movi	r3,1
    2f60:	100b883a 	mov	r5,r2
    2f64:	1986983a 	sll	r3,r3,r6
    2f68:	11800115 	stw	r6,4(r2)
    2f6c:	10c00215 	stw	r3,8(r2)
    2f70:	000666c0 	call	666c <_Bfree>
    2f74:	e0001015 	stw	zero,64(fp)
    2f78:	88002e16 	blt	r17,zero,3034 <_dtoa_r+0x128>
    2f7c:	80000015 	stw	zero,0(r16)
    2f80:	889ffc2c 	andhi	r2,r17,32752
    2f84:	00dffc34 	movhi	r3,32752
    2f88:	10c01c26 	beq	r2,r3,2ffc <_dtoa_r+0xf0>
    2f8c:	000d883a 	mov	r6,zero
    2f90:	000f883a 	mov	r7,zero
    2f94:	9009883a 	mov	r4,r18
    2f98:	980b883a 	mov	r5,r19
    2f9c:	000c0840 	call	c084 <__eqdf2>
    2fa0:	10002b1e 	bne	r2,zero,3050 <_dtoa_r+0x144>
    2fa4:	d9c02317 	ldw	r7,140(sp)
    2fa8:	00800044 	movi	r2,1
    2fac:	38800015 	stw	r2,0(r7)
    2fb0:	d8802517 	ldw	r2,148(sp)
    2fb4:	10019e26 	beq	r2,zero,3630 <_dtoa_r+0x724>
    2fb8:	d8c02517 	ldw	r3,148(sp)
    2fbc:	00800074 	movhi	r2,1
    2fc0:	10819e44 	addi	r2,r2,1657
    2fc4:	18800015 	stw	r2,0(r3)
    2fc8:	10bfffc4 	addi	r2,r2,-1
    2fcc:	dfc02117 	ldw	ra,132(sp)
    2fd0:	df002017 	ldw	fp,128(sp)
    2fd4:	ddc01f17 	ldw	r23,124(sp)
    2fd8:	dd801e17 	ldw	r22,120(sp)
    2fdc:	dd401d17 	ldw	r21,116(sp)
    2fe0:	dd001c17 	ldw	r20,112(sp)
    2fe4:	dcc01b17 	ldw	r19,108(sp)
    2fe8:	dc801a17 	ldw	r18,104(sp)
    2fec:	dc401917 	ldw	r17,100(sp)
    2ff0:	dc001817 	ldw	r16,96(sp)
    2ff4:	dec02204 	addi	sp,sp,136
    2ff8:	f800283a 	ret
    2ffc:	d8c02317 	ldw	r3,140(sp)
    3000:	0089c3c4 	movi	r2,9999
    3004:	18800015 	stw	r2,0(r3)
    3008:	90017726 	beq	r18,zero,35e8 <_dtoa_r+0x6dc>
    300c:	00800074 	movhi	r2,1
    3010:	1081aa04 	addi	r2,r2,1704
    3014:	d9002517 	ldw	r4,148(sp)
    3018:	203fec26 	beq	r4,zero,2fcc <__alt_data_end+0xfffb9bec>
    301c:	10c000c7 	ldb	r3,3(r2)
    3020:	1801781e 	bne	r3,zero,3604 <_dtoa_r+0x6f8>
    3024:	10c000c4 	addi	r3,r2,3
    3028:	d9802517 	ldw	r6,148(sp)
    302c:	30c00015 	stw	r3,0(r6)
    3030:	003fe606 	br	2fcc <__alt_data_end+0xfffb9bec>
    3034:	04e00034 	movhi	r19,32768
    3038:	9cffffc4 	addi	r19,r19,-1
    303c:	00800044 	movi	r2,1
    3040:	8ce6703a 	and	r19,r17,r19
    3044:	80800015 	stw	r2,0(r16)
    3048:	9823883a 	mov	r17,r19
    304c:	003fcc06 	br	2f80 <__alt_data_end+0xfffb9ba0>
    3050:	d8800204 	addi	r2,sp,8
    3054:	d8800015 	stw	r2,0(sp)
    3058:	d9c00104 	addi	r7,sp,4
    305c:	900b883a 	mov	r5,r18
    3060:	980d883a 	mov	r6,r19
    3064:	e009883a 	mov	r4,fp
    3068:	8820d53a 	srli	r16,r17,20
    306c:	00073140 	call	7314 <__d2b>
    3070:	d8800915 	stw	r2,36(sp)
    3074:	8001651e 	bne	r16,zero,360c <_dtoa_r+0x700>
    3078:	dd800217 	ldw	r22,8(sp)
    307c:	dc000117 	ldw	r16,4(sp)
    3080:	00800804 	movi	r2,32
    3084:	b421883a 	add	r16,r22,r16
    3088:	80c10c84 	addi	r3,r16,1074
    308c:	10c2d10e 	bge	r2,r3,3bd4 <_dtoa_r+0xcc8>
    3090:	00801004 	movi	r2,64
    3094:	81010484 	addi	r4,r16,1042
    3098:	10c7c83a 	sub	r3,r2,r3
    309c:	9108d83a 	srl	r4,r18,r4
    30a0:	88e2983a 	sll	r17,r17,r3
    30a4:	2448b03a 	or	r4,r4,r17
    30a8:	000d5a00 	call	d5a0 <__floatunsidf>
    30ac:	017f8434 	movhi	r5,65040
    30b0:	01800044 	movi	r6,1
    30b4:	1009883a 	mov	r4,r2
    30b8:	194b883a 	add	r5,r3,r5
    30bc:	843fffc4 	addi	r16,r16,-1
    30c0:	d9801115 	stw	r6,68(sp)
    30c4:	000d883a 	mov	r6,zero
    30c8:	01cffe34 	movhi	r7,16376
    30cc:	000cb480 	call	cb48 <__subdf3>
    30d0:	0198dbf4 	movhi	r6,25455
    30d4:	01cff4f4 	movhi	r7,16339
    30d8:	3190d844 	addi	r6,r6,17249
    30dc:	39e1e9c4 	addi	r7,r7,-30809
    30e0:	1009883a 	mov	r4,r2
    30e4:	180b883a 	mov	r5,r3
    30e8:	000c2dc0 	call	c2dc <__muldf3>
    30ec:	01a2d874 	movhi	r6,35681
    30f0:	01cff1f4 	movhi	r7,16327
    30f4:	31b22cc4 	addi	r6,r6,-14157
    30f8:	39e28a04 	addi	r7,r7,-30168
    30fc:	180b883a 	mov	r5,r3
    3100:	1009883a 	mov	r4,r2
    3104:	000ae080 	call	ae08 <__adddf3>
    3108:	8009883a 	mov	r4,r16
    310c:	1029883a 	mov	r20,r2
    3110:	1823883a 	mov	r17,r3
    3114:	000d4c40 	call	d4c4 <__floatsidf>
    3118:	019427f4 	movhi	r6,20639
    311c:	01cff4f4 	movhi	r7,16339
    3120:	319e7ec4 	addi	r6,r6,31227
    3124:	39d104c4 	addi	r7,r7,17427
    3128:	1009883a 	mov	r4,r2
    312c:	180b883a 	mov	r5,r3
    3130:	000c2dc0 	call	c2dc <__muldf3>
    3134:	100d883a 	mov	r6,r2
    3138:	180f883a 	mov	r7,r3
    313c:	a009883a 	mov	r4,r20
    3140:	880b883a 	mov	r5,r17
    3144:	000ae080 	call	ae08 <__adddf3>
    3148:	1009883a 	mov	r4,r2
    314c:	180b883a 	mov	r5,r3
    3150:	1029883a 	mov	r20,r2
    3154:	1823883a 	mov	r17,r3
    3158:	000d4440 	call	d444 <__fixdfsi>
    315c:	000d883a 	mov	r6,zero
    3160:	000f883a 	mov	r7,zero
    3164:	a009883a 	mov	r4,r20
    3168:	880b883a 	mov	r5,r17
    316c:	d8800515 	stw	r2,20(sp)
    3170:	000c1e80 	call	c1e8 <__ledf2>
    3174:	10028716 	blt	r2,zero,3b94 <_dtoa_r+0xc88>
    3178:	d8c00517 	ldw	r3,20(sp)
    317c:	00800584 	movi	r2,22
    3180:	10c27536 	bltu	r2,r3,3b58 <_dtoa_r+0xc4c>
    3184:	180490fa 	slli	r2,r3,3
    3188:	00c00074 	movhi	r3,1
    318c:	18c1c604 	addi	r3,r3,1816
    3190:	1885883a 	add	r2,r3,r2
    3194:	11000017 	ldw	r4,0(r2)
    3198:	11400117 	ldw	r5,4(r2)
    319c:	900d883a 	mov	r6,r18
    31a0:	980f883a 	mov	r7,r19
    31a4:	000c10c0 	call	c10c <__gedf2>
    31a8:	00828d0e 	bge	zero,r2,3be0 <_dtoa_r+0xcd4>
    31ac:	d9000517 	ldw	r4,20(sp)
    31b0:	d8000e15 	stw	zero,56(sp)
    31b4:	213fffc4 	addi	r4,r4,-1
    31b8:	d9000515 	stw	r4,20(sp)
    31bc:	b42dc83a 	sub	r22,r22,r16
    31c0:	b5bfffc4 	addi	r22,r22,-1
    31c4:	b0026f16 	blt	r22,zero,3b84 <_dtoa_r+0xc78>
    31c8:	d8000815 	stw	zero,32(sp)
    31cc:	d9c00517 	ldw	r7,20(sp)
    31d0:	38026416 	blt	r7,zero,3b64 <_dtoa_r+0xc58>
    31d4:	b1ed883a 	add	r22,r22,r7
    31d8:	d9c00d15 	stw	r7,52(sp)
    31dc:	d8000a15 	stw	zero,40(sp)
    31e0:	d9800317 	ldw	r6,12(sp)
    31e4:	00800244 	movi	r2,9
    31e8:	11811436 	bltu	r2,r6,363c <_dtoa_r+0x730>
    31ec:	00800144 	movi	r2,5
    31f0:	1184e10e 	bge	r2,r6,4578 <_dtoa_r+0x166c>
    31f4:	31bfff04 	addi	r6,r6,-4
    31f8:	d9800315 	stw	r6,12(sp)
    31fc:	0023883a 	mov	r17,zero
    3200:	d9800317 	ldw	r6,12(sp)
    3204:	008000c4 	movi	r2,3
    3208:	30836726 	beq	r6,r2,3fa8 <_dtoa_r+0x109c>
    320c:	1183410e 	bge	r2,r6,3f14 <_dtoa_r+0x1008>
    3210:	d9c00317 	ldw	r7,12(sp)
    3214:	00800104 	movi	r2,4
    3218:	38827c26 	beq	r7,r2,3c0c <_dtoa_r+0xd00>
    321c:	00800144 	movi	r2,5
    3220:	3884c41e 	bne	r7,r2,4534 <_dtoa_r+0x1628>
    3224:	00800044 	movi	r2,1
    3228:	d8800b15 	stw	r2,44(sp)
    322c:	d8c00517 	ldw	r3,20(sp)
    3230:	d9002217 	ldw	r4,136(sp)
    3234:	1907883a 	add	r3,r3,r4
    3238:	19800044 	addi	r6,r3,1
    323c:	d8c00c15 	stw	r3,48(sp)
    3240:	d9800615 	stw	r6,24(sp)
    3244:	0183a40e 	bge	zero,r6,40d8 <_dtoa_r+0x11cc>
    3248:	d9800617 	ldw	r6,24(sp)
    324c:	3021883a 	mov	r16,r6
    3250:	e0001115 	stw	zero,68(fp)
    3254:	008005c4 	movi	r2,23
    3258:	1184c92e 	bgeu	r2,r6,4580 <_dtoa_r+0x1674>
    325c:	00c00044 	movi	r3,1
    3260:	00800104 	movi	r2,4
    3264:	1085883a 	add	r2,r2,r2
    3268:	11000504 	addi	r4,r2,20
    326c:	180b883a 	mov	r5,r3
    3270:	18c00044 	addi	r3,r3,1
    3274:	313ffb2e 	bgeu	r6,r4,3264 <__alt_data_end+0xfffb9e84>
    3278:	e1401115 	stw	r5,68(fp)
    327c:	e009883a 	mov	r4,fp
    3280:	00065c40 	call	65c4 <_Balloc>
    3284:	d8800715 	stw	r2,28(sp)
    3288:	e0801015 	stw	r2,64(fp)
    328c:	00800384 	movi	r2,14
    3290:	1400f736 	bltu	r2,r16,3670 <_dtoa_r+0x764>
    3294:	8800f626 	beq	r17,zero,3670 <_dtoa_r+0x764>
    3298:	d9c00517 	ldw	r7,20(sp)
    329c:	01c39a0e 	bge	zero,r7,4108 <_dtoa_r+0x11fc>
    32a0:	388003cc 	andi	r2,r7,15
    32a4:	100490fa 	slli	r2,r2,3
    32a8:	382bd13a 	srai	r21,r7,4
    32ac:	00c00074 	movhi	r3,1
    32b0:	18c1c604 	addi	r3,r3,1816
    32b4:	1885883a 	add	r2,r3,r2
    32b8:	a8c0040c 	andi	r3,r21,16
    32bc:	12400017 	ldw	r9,0(r2)
    32c0:	12000117 	ldw	r8,4(r2)
    32c4:	18037926 	beq	r3,zero,40ac <_dtoa_r+0x11a0>
    32c8:	00800074 	movhi	r2,1
    32cc:	1081bc04 	addi	r2,r2,1776
    32d0:	11800817 	ldw	r6,32(r2)
    32d4:	11c00917 	ldw	r7,36(r2)
    32d8:	9009883a 	mov	r4,r18
    32dc:	980b883a 	mov	r5,r19
    32e0:	da001715 	stw	r8,92(sp)
    32e4:	da401615 	stw	r9,88(sp)
    32e8:	000b6b40 	call	b6b4 <__divdf3>
    32ec:	da001717 	ldw	r8,92(sp)
    32f0:	da401617 	ldw	r9,88(sp)
    32f4:	ad4003cc 	andi	r21,r21,15
    32f8:	040000c4 	movi	r16,3
    32fc:	1023883a 	mov	r17,r2
    3300:	1829883a 	mov	r20,r3
    3304:	a8001126 	beq	r21,zero,334c <_dtoa_r+0x440>
    3308:	05c00074 	movhi	r23,1
    330c:	bdc1bc04 	addi	r23,r23,1776
    3310:	4805883a 	mov	r2,r9
    3314:	4007883a 	mov	r3,r8
    3318:	a980004c 	andi	r6,r21,1
    331c:	1009883a 	mov	r4,r2
    3320:	a82bd07a 	srai	r21,r21,1
    3324:	180b883a 	mov	r5,r3
    3328:	30000426 	beq	r6,zero,333c <_dtoa_r+0x430>
    332c:	b9800017 	ldw	r6,0(r23)
    3330:	b9c00117 	ldw	r7,4(r23)
    3334:	84000044 	addi	r16,r16,1
    3338:	000c2dc0 	call	c2dc <__muldf3>
    333c:	bdc00204 	addi	r23,r23,8
    3340:	a83ff51e 	bne	r21,zero,3318 <__alt_data_end+0xfffb9f38>
    3344:	1013883a 	mov	r9,r2
    3348:	1811883a 	mov	r8,r3
    334c:	480d883a 	mov	r6,r9
    3350:	400f883a 	mov	r7,r8
    3354:	8809883a 	mov	r4,r17
    3358:	a00b883a 	mov	r5,r20
    335c:	000b6b40 	call	b6b4 <__divdf3>
    3360:	d8800f15 	stw	r2,60(sp)
    3364:	d8c01015 	stw	r3,64(sp)
    3368:	d8c00e17 	ldw	r3,56(sp)
    336c:	18000626 	beq	r3,zero,3388 <_dtoa_r+0x47c>
    3370:	d9000f17 	ldw	r4,60(sp)
    3374:	d9401017 	ldw	r5,64(sp)
    3378:	000d883a 	mov	r6,zero
    337c:	01cffc34 	movhi	r7,16368
    3380:	000c1e80 	call	c1e8 <__ledf2>
    3384:	10040b16 	blt	r2,zero,43b4 <_dtoa_r+0x14a8>
    3388:	8009883a 	mov	r4,r16
    338c:	000d4c40 	call	d4c4 <__floatsidf>
    3390:	d9800f17 	ldw	r6,60(sp)
    3394:	d9c01017 	ldw	r7,64(sp)
    3398:	1009883a 	mov	r4,r2
    339c:	180b883a 	mov	r5,r3
    33a0:	000c2dc0 	call	c2dc <__muldf3>
    33a4:	000d883a 	mov	r6,zero
    33a8:	01d00734 	movhi	r7,16412
    33ac:	1009883a 	mov	r4,r2
    33b0:	180b883a 	mov	r5,r3
    33b4:	000ae080 	call	ae08 <__adddf3>
    33b8:	1021883a 	mov	r16,r2
    33bc:	d8800617 	ldw	r2,24(sp)
    33c0:	047f3034 	movhi	r17,64704
    33c4:	1c63883a 	add	r17,r3,r17
    33c8:	10031826 	beq	r2,zero,402c <_dtoa_r+0x1120>
    33cc:	d8c00517 	ldw	r3,20(sp)
    33d0:	db000617 	ldw	r12,24(sp)
    33d4:	d8c01315 	stw	r3,76(sp)
    33d8:	d9000b17 	ldw	r4,44(sp)
    33dc:	20038f26 	beq	r4,zero,421c <_dtoa_r+0x1310>
    33e0:	60bfffc4 	addi	r2,r12,-1
    33e4:	100490fa 	slli	r2,r2,3
    33e8:	00c00074 	movhi	r3,1
    33ec:	18c1c604 	addi	r3,r3,1816
    33f0:	1885883a 	add	r2,r3,r2
    33f4:	11800017 	ldw	r6,0(r2)
    33f8:	11c00117 	ldw	r7,4(r2)
    33fc:	d8800717 	ldw	r2,28(sp)
    3400:	0009883a 	mov	r4,zero
    3404:	014ff834 	movhi	r5,16352
    3408:	db001615 	stw	r12,88(sp)
    340c:	15c00044 	addi	r23,r2,1
    3410:	000b6b40 	call	b6b4 <__divdf3>
    3414:	800d883a 	mov	r6,r16
    3418:	880f883a 	mov	r7,r17
    341c:	1009883a 	mov	r4,r2
    3420:	180b883a 	mov	r5,r3
    3424:	000cb480 	call	cb48 <__subdf3>
    3428:	d9401017 	ldw	r5,64(sp)
    342c:	d9000f17 	ldw	r4,60(sp)
    3430:	102b883a 	mov	r21,r2
    3434:	d8c01215 	stw	r3,72(sp)
    3438:	000d4440 	call	d444 <__fixdfsi>
    343c:	1009883a 	mov	r4,r2
    3440:	1029883a 	mov	r20,r2
    3444:	000d4c40 	call	d4c4 <__floatsidf>
    3448:	d9000f17 	ldw	r4,60(sp)
    344c:	d9401017 	ldw	r5,64(sp)
    3450:	100d883a 	mov	r6,r2
    3454:	180f883a 	mov	r7,r3
    3458:	000cb480 	call	cb48 <__subdf3>
    345c:	1823883a 	mov	r17,r3
    3460:	d8c00717 	ldw	r3,28(sp)
    3464:	d9401217 	ldw	r5,72(sp)
    3468:	a2000c04 	addi	r8,r20,48
    346c:	1021883a 	mov	r16,r2
    3470:	1a000005 	stb	r8,0(r3)
    3474:	800d883a 	mov	r6,r16
    3478:	880f883a 	mov	r7,r17
    347c:	a809883a 	mov	r4,r21
    3480:	4029883a 	mov	r20,r8
    3484:	000c10c0 	call	c10c <__gedf2>
    3488:	00841d16 	blt	zero,r2,4500 <_dtoa_r+0x15f4>
    348c:	800d883a 	mov	r6,r16
    3490:	880f883a 	mov	r7,r17
    3494:	0009883a 	mov	r4,zero
    3498:	014ffc34 	movhi	r5,16368
    349c:	000cb480 	call	cb48 <__subdf3>
    34a0:	d9401217 	ldw	r5,72(sp)
    34a4:	100d883a 	mov	r6,r2
    34a8:	180f883a 	mov	r7,r3
    34ac:	a809883a 	mov	r4,r21
    34b0:	000c10c0 	call	c10c <__gedf2>
    34b4:	db001617 	ldw	r12,88(sp)
    34b8:	00840e16 	blt	zero,r2,44f4 <_dtoa_r+0x15e8>
    34bc:	00800044 	movi	r2,1
    34c0:	13006b0e 	bge	r2,r12,3670 <_dtoa_r+0x764>
    34c4:	d9000717 	ldw	r4,28(sp)
    34c8:	dd800f15 	stw	r22,60(sp)
    34cc:	dcc01015 	stw	r19,64(sp)
    34d0:	2319883a 	add	r12,r4,r12
    34d4:	dcc01217 	ldw	r19,72(sp)
    34d8:	602d883a 	mov	r22,r12
    34dc:	dc801215 	stw	r18,72(sp)
    34e0:	b825883a 	mov	r18,r23
    34e4:	00000906 	br	350c <_dtoa_r+0x600>
    34e8:	000cb480 	call	cb48 <__subdf3>
    34ec:	a80d883a 	mov	r6,r21
    34f0:	980f883a 	mov	r7,r19
    34f4:	1009883a 	mov	r4,r2
    34f8:	180b883a 	mov	r5,r3
    34fc:	000c1e80 	call	c1e8 <__ledf2>
    3500:	1003e816 	blt	r2,zero,44a4 <_dtoa_r+0x1598>
    3504:	b825883a 	mov	r18,r23
    3508:	bd83e926 	beq	r23,r22,44b0 <_dtoa_r+0x15a4>
    350c:	a809883a 	mov	r4,r21
    3510:	980b883a 	mov	r5,r19
    3514:	000d883a 	mov	r6,zero
    3518:	01d00934 	movhi	r7,16420
    351c:	000c2dc0 	call	c2dc <__muldf3>
    3520:	000d883a 	mov	r6,zero
    3524:	01d00934 	movhi	r7,16420
    3528:	8009883a 	mov	r4,r16
    352c:	880b883a 	mov	r5,r17
    3530:	102b883a 	mov	r21,r2
    3534:	1827883a 	mov	r19,r3
    3538:	000c2dc0 	call	c2dc <__muldf3>
    353c:	180b883a 	mov	r5,r3
    3540:	1009883a 	mov	r4,r2
    3544:	1821883a 	mov	r16,r3
    3548:	1023883a 	mov	r17,r2
    354c:	000d4440 	call	d444 <__fixdfsi>
    3550:	1009883a 	mov	r4,r2
    3554:	1029883a 	mov	r20,r2
    3558:	000d4c40 	call	d4c4 <__floatsidf>
    355c:	8809883a 	mov	r4,r17
    3560:	800b883a 	mov	r5,r16
    3564:	100d883a 	mov	r6,r2
    3568:	180f883a 	mov	r7,r3
    356c:	000cb480 	call	cb48 <__subdf3>
    3570:	a5000c04 	addi	r20,r20,48
    3574:	a80d883a 	mov	r6,r21
    3578:	980f883a 	mov	r7,r19
    357c:	1009883a 	mov	r4,r2
    3580:	180b883a 	mov	r5,r3
    3584:	95000005 	stb	r20,0(r18)
    3588:	1021883a 	mov	r16,r2
    358c:	1823883a 	mov	r17,r3
    3590:	000c1e80 	call	c1e8 <__ledf2>
    3594:	bdc00044 	addi	r23,r23,1
    3598:	800d883a 	mov	r6,r16
    359c:	880f883a 	mov	r7,r17
    35a0:	0009883a 	mov	r4,zero
    35a4:	014ffc34 	movhi	r5,16368
    35a8:	103fcf0e 	bge	r2,zero,34e8 <__alt_data_end+0xfffba108>
    35ac:	d8c01317 	ldw	r3,76(sp)
    35b0:	d8c00515 	stw	r3,20(sp)
    35b4:	d9400917 	ldw	r5,36(sp)
    35b8:	e009883a 	mov	r4,fp
    35bc:	000666c0 	call	666c <_Bfree>
    35c0:	d9000517 	ldw	r4,20(sp)
    35c4:	d9802317 	ldw	r6,140(sp)
    35c8:	d9c02517 	ldw	r7,148(sp)
    35cc:	b8000005 	stb	zero,0(r23)
    35d0:	20800044 	addi	r2,r4,1
    35d4:	30800015 	stw	r2,0(r6)
    35d8:	3802aa26 	beq	r7,zero,4084 <_dtoa_r+0x1178>
    35dc:	3dc00015 	stw	r23,0(r7)
    35e0:	d8800717 	ldw	r2,28(sp)
    35e4:	003e7906 	br	2fcc <__alt_data_end+0xfffb9bec>
    35e8:	00800434 	movhi	r2,16
    35ec:	10bfffc4 	addi	r2,r2,-1
    35f0:	88a2703a 	and	r17,r17,r2
    35f4:	883e851e 	bne	r17,zero,300c <__alt_data_end+0xfffb9c2c>
    35f8:	00800074 	movhi	r2,1
    35fc:	1081a704 	addi	r2,r2,1692
    3600:	003e8406 	br	3014 <__alt_data_end+0xfffb9c34>
    3604:	10c00204 	addi	r3,r2,8
    3608:	003e8706 	br	3028 <__alt_data_end+0xfffb9c48>
    360c:	01400434 	movhi	r5,16
    3610:	297fffc4 	addi	r5,r5,-1
    3614:	994a703a 	and	r5,r19,r5
    3618:	9009883a 	mov	r4,r18
    361c:	843f0044 	addi	r16,r16,-1023
    3620:	294ffc34 	orhi	r5,r5,16368
    3624:	dd800217 	ldw	r22,8(sp)
    3628:	d8001115 	stw	zero,68(sp)
    362c:	003ea506 	br	30c4 <__alt_data_end+0xfffb9ce4>
    3630:	00800074 	movhi	r2,1
    3634:	10819e04 	addi	r2,r2,1656
    3638:	003e6406 	br	2fcc <__alt_data_end+0xfffb9bec>
    363c:	e0001115 	stw	zero,68(fp)
    3640:	000b883a 	mov	r5,zero
    3644:	e009883a 	mov	r4,fp
    3648:	00065c40 	call	65c4 <_Balloc>
    364c:	01bfffc4 	movi	r6,-1
    3650:	01c00044 	movi	r7,1
    3654:	d8800715 	stw	r2,28(sp)
    3658:	d9800c15 	stw	r6,48(sp)
    365c:	e0801015 	stw	r2,64(fp)
    3660:	d8000315 	stw	zero,12(sp)
    3664:	d9c00b15 	stw	r7,44(sp)
    3668:	d9800615 	stw	r6,24(sp)
    366c:	d8002215 	stw	zero,136(sp)
    3670:	d8800117 	ldw	r2,4(sp)
    3674:	10008916 	blt	r2,zero,389c <_dtoa_r+0x990>
    3678:	d9000517 	ldw	r4,20(sp)
    367c:	00c00384 	movi	r3,14
    3680:	19008616 	blt	r3,r4,389c <_dtoa_r+0x990>
    3684:	200490fa 	slli	r2,r4,3
    3688:	00c00074 	movhi	r3,1
    368c:	d9802217 	ldw	r6,136(sp)
    3690:	18c1c604 	addi	r3,r3,1816
    3694:	1885883a 	add	r2,r3,r2
    3698:	14000017 	ldw	r16,0(r2)
    369c:	14400117 	ldw	r17,4(r2)
    36a0:	30016316 	blt	r6,zero,3c30 <_dtoa_r+0xd24>
    36a4:	800d883a 	mov	r6,r16
    36a8:	880f883a 	mov	r7,r17
    36ac:	9009883a 	mov	r4,r18
    36b0:	980b883a 	mov	r5,r19
    36b4:	000b6b40 	call	b6b4 <__divdf3>
    36b8:	180b883a 	mov	r5,r3
    36bc:	1009883a 	mov	r4,r2
    36c0:	000d4440 	call	d444 <__fixdfsi>
    36c4:	1009883a 	mov	r4,r2
    36c8:	102b883a 	mov	r21,r2
    36cc:	000d4c40 	call	d4c4 <__floatsidf>
    36d0:	800d883a 	mov	r6,r16
    36d4:	880f883a 	mov	r7,r17
    36d8:	1009883a 	mov	r4,r2
    36dc:	180b883a 	mov	r5,r3
    36e0:	000c2dc0 	call	c2dc <__muldf3>
    36e4:	100d883a 	mov	r6,r2
    36e8:	180f883a 	mov	r7,r3
    36ec:	9009883a 	mov	r4,r18
    36f0:	980b883a 	mov	r5,r19
    36f4:	000cb480 	call	cb48 <__subdf3>
    36f8:	d9c00717 	ldw	r7,28(sp)
    36fc:	1009883a 	mov	r4,r2
    3700:	a8800c04 	addi	r2,r21,48
    3704:	38800005 	stb	r2,0(r7)
    3708:	3dc00044 	addi	r23,r7,1
    370c:	d9c00617 	ldw	r7,24(sp)
    3710:	01800044 	movi	r6,1
    3714:	180b883a 	mov	r5,r3
    3718:	2005883a 	mov	r2,r4
    371c:	39803826 	beq	r7,r6,3800 <_dtoa_r+0x8f4>
    3720:	000d883a 	mov	r6,zero
    3724:	01d00934 	movhi	r7,16420
    3728:	000c2dc0 	call	c2dc <__muldf3>
    372c:	000d883a 	mov	r6,zero
    3730:	000f883a 	mov	r7,zero
    3734:	1009883a 	mov	r4,r2
    3738:	180b883a 	mov	r5,r3
    373c:	1025883a 	mov	r18,r2
    3740:	1827883a 	mov	r19,r3
    3744:	000c0840 	call	c084 <__eqdf2>
    3748:	103f9a26 	beq	r2,zero,35b4 <__alt_data_end+0xfffba1d4>
    374c:	d9c00617 	ldw	r7,24(sp)
    3750:	d8c00717 	ldw	r3,28(sp)
    3754:	b829883a 	mov	r20,r23
    3758:	38bfffc4 	addi	r2,r7,-1
    375c:	18ad883a 	add	r22,r3,r2
    3760:	00000a06 	br	378c <_dtoa_r+0x880>
    3764:	000c2dc0 	call	c2dc <__muldf3>
    3768:	000d883a 	mov	r6,zero
    376c:	000f883a 	mov	r7,zero
    3770:	1009883a 	mov	r4,r2
    3774:	180b883a 	mov	r5,r3
    3778:	1025883a 	mov	r18,r2
    377c:	1827883a 	mov	r19,r3
    3780:	b829883a 	mov	r20,r23
    3784:	000c0840 	call	c084 <__eqdf2>
    3788:	103f8a26 	beq	r2,zero,35b4 <__alt_data_end+0xfffba1d4>
    378c:	800d883a 	mov	r6,r16
    3790:	880f883a 	mov	r7,r17
    3794:	9009883a 	mov	r4,r18
    3798:	980b883a 	mov	r5,r19
    379c:	000b6b40 	call	b6b4 <__divdf3>
    37a0:	180b883a 	mov	r5,r3
    37a4:	1009883a 	mov	r4,r2
    37a8:	000d4440 	call	d444 <__fixdfsi>
    37ac:	1009883a 	mov	r4,r2
    37b0:	102b883a 	mov	r21,r2
    37b4:	000d4c40 	call	d4c4 <__floatsidf>
    37b8:	800d883a 	mov	r6,r16
    37bc:	880f883a 	mov	r7,r17
    37c0:	1009883a 	mov	r4,r2
    37c4:	180b883a 	mov	r5,r3
    37c8:	000c2dc0 	call	c2dc <__muldf3>
    37cc:	100d883a 	mov	r6,r2
    37d0:	180f883a 	mov	r7,r3
    37d4:	9009883a 	mov	r4,r18
    37d8:	980b883a 	mov	r5,r19
    37dc:	000cb480 	call	cb48 <__subdf3>
    37e0:	aa000c04 	addi	r8,r21,48
    37e4:	a2000005 	stb	r8,0(r20)
    37e8:	000d883a 	mov	r6,zero
    37ec:	01d00934 	movhi	r7,16420
    37f0:	1009883a 	mov	r4,r2
    37f4:	180b883a 	mov	r5,r3
    37f8:	a5c00044 	addi	r23,r20,1
    37fc:	b53fd91e 	bne	r22,r20,3764 <__alt_data_end+0xfffba384>
    3800:	100d883a 	mov	r6,r2
    3804:	180f883a 	mov	r7,r3
    3808:	1009883a 	mov	r4,r2
    380c:	180b883a 	mov	r5,r3
    3810:	000ae080 	call	ae08 <__adddf3>
    3814:	100d883a 	mov	r6,r2
    3818:	180f883a 	mov	r7,r3
    381c:	8009883a 	mov	r4,r16
    3820:	880b883a 	mov	r5,r17
    3824:	1027883a 	mov	r19,r2
    3828:	1825883a 	mov	r18,r3
    382c:	000c1e80 	call	c1e8 <__ledf2>
    3830:	10000816 	blt	r2,zero,3854 <_dtoa_r+0x948>
    3834:	980d883a 	mov	r6,r19
    3838:	900f883a 	mov	r7,r18
    383c:	8009883a 	mov	r4,r16
    3840:	880b883a 	mov	r5,r17
    3844:	000c0840 	call	c084 <__eqdf2>
    3848:	103f5a1e 	bne	r2,zero,35b4 <__alt_data_end+0xfffba1d4>
    384c:	ad40004c 	andi	r21,r21,1
    3850:	a83f5826 	beq	r21,zero,35b4 <__alt_data_end+0xfffba1d4>
    3854:	bd3fffc3 	ldbu	r20,-1(r23)
    3858:	b8bfffc4 	addi	r2,r23,-1
    385c:	1007883a 	mov	r3,r2
    3860:	01400e44 	movi	r5,57
    3864:	d9800717 	ldw	r6,28(sp)
    3868:	00000506 	br	3880 <_dtoa_r+0x974>
    386c:	18ffffc4 	addi	r3,r3,-1
    3870:	11824726 	beq	r2,r6,4190 <_dtoa_r+0x1284>
    3874:	1d000003 	ldbu	r20,0(r3)
    3878:	102f883a 	mov	r23,r2
    387c:	10bfffc4 	addi	r2,r2,-1
    3880:	a1003fcc 	andi	r4,r20,255
    3884:	2100201c 	xori	r4,r4,128
    3888:	213fe004 	addi	r4,r4,-128
    388c:	217ff726 	beq	r4,r5,386c <__alt_data_end+0xfffba48c>
    3890:	a2000044 	addi	r8,r20,1
    3894:	12000005 	stb	r8,0(r2)
    3898:	003f4606 	br	35b4 <__alt_data_end+0xfffba1d4>
    389c:	d9000b17 	ldw	r4,44(sp)
    38a0:	2000c826 	beq	r4,zero,3bc4 <_dtoa_r+0xcb8>
    38a4:	d9800317 	ldw	r6,12(sp)
    38a8:	00c00044 	movi	r3,1
    38ac:	1980f90e 	bge	r3,r6,3c94 <_dtoa_r+0xd88>
    38b0:	d8800617 	ldw	r2,24(sp)
    38b4:	d8c00a17 	ldw	r3,40(sp)
    38b8:	157fffc4 	addi	r21,r2,-1
    38bc:	1d41f316 	blt	r3,r21,408c <_dtoa_r+0x1180>
    38c0:	1d6bc83a 	sub	r21,r3,r21
    38c4:	d9c00617 	ldw	r7,24(sp)
    38c8:	3802aa16 	blt	r7,zero,4374 <_dtoa_r+0x1468>
    38cc:	dd000817 	ldw	r20,32(sp)
    38d0:	d8800617 	ldw	r2,24(sp)
    38d4:	d8c00817 	ldw	r3,32(sp)
    38d8:	01400044 	movi	r5,1
    38dc:	e009883a 	mov	r4,fp
    38e0:	1887883a 	add	r3,r3,r2
    38e4:	d8c00815 	stw	r3,32(sp)
    38e8:	b0ad883a 	add	r22,r22,r2
    38ec:	00069f80 	call	69f8 <__i2b>
    38f0:	1023883a 	mov	r17,r2
    38f4:	a0000826 	beq	r20,zero,3918 <_dtoa_r+0xa0c>
    38f8:	0580070e 	bge	zero,r22,3918 <_dtoa_r+0xa0c>
    38fc:	a005883a 	mov	r2,r20
    3900:	b500b916 	blt	r22,r20,3be8 <_dtoa_r+0xcdc>
    3904:	d9000817 	ldw	r4,32(sp)
    3908:	a0a9c83a 	sub	r20,r20,r2
    390c:	b0adc83a 	sub	r22,r22,r2
    3910:	2089c83a 	sub	r4,r4,r2
    3914:	d9000815 	stw	r4,32(sp)
    3918:	d9800a17 	ldw	r6,40(sp)
    391c:	0181810e 	bge	zero,r6,3f24 <_dtoa_r+0x1018>
    3920:	d9c00b17 	ldw	r7,44(sp)
    3924:	3800b326 	beq	r7,zero,3bf4 <_dtoa_r+0xce8>
    3928:	a800b226 	beq	r21,zero,3bf4 <_dtoa_r+0xce8>
    392c:	880b883a 	mov	r5,r17
    3930:	a80d883a 	mov	r6,r21
    3934:	e009883a 	mov	r4,fp
    3938:	0006cc00 	call	6cc0 <__pow5mult>
    393c:	d9800917 	ldw	r6,36(sp)
    3940:	100b883a 	mov	r5,r2
    3944:	e009883a 	mov	r4,fp
    3948:	1023883a 	mov	r17,r2
    394c:	0006a340 	call	6a34 <__multiply>
    3950:	1021883a 	mov	r16,r2
    3954:	d8800a17 	ldw	r2,40(sp)
    3958:	d9400917 	ldw	r5,36(sp)
    395c:	e009883a 	mov	r4,fp
    3960:	1545c83a 	sub	r2,r2,r21
    3964:	d8800a15 	stw	r2,40(sp)
    3968:	000666c0 	call	666c <_Bfree>
    396c:	d8c00a17 	ldw	r3,40(sp)
    3970:	18009f1e 	bne	r3,zero,3bf0 <_dtoa_r+0xce4>
    3974:	05c00044 	movi	r23,1
    3978:	e009883a 	mov	r4,fp
    397c:	b80b883a 	mov	r5,r23
    3980:	00069f80 	call	69f8 <__i2b>
    3984:	d9000d17 	ldw	r4,52(sp)
    3988:	102b883a 	mov	r21,r2
    398c:	2000ce26 	beq	r4,zero,3cc8 <_dtoa_r+0xdbc>
    3990:	200d883a 	mov	r6,r4
    3994:	100b883a 	mov	r5,r2
    3998:	e009883a 	mov	r4,fp
    399c:	0006cc00 	call	6cc0 <__pow5mult>
    39a0:	d9800317 	ldw	r6,12(sp)
    39a4:	102b883a 	mov	r21,r2
    39a8:	b981810e 	bge	r23,r6,3fb0 <_dtoa_r+0x10a4>
    39ac:	0027883a 	mov	r19,zero
    39b0:	a8800417 	ldw	r2,16(r21)
    39b4:	05c00804 	movi	r23,32
    39b8:	10800104 	addi	r2,r2,4
    39bc:	1085883a 	add	r2,r2,r2
    39c0:	1085883a 	add	r2,r2,r2
    39c4:	a885883a 	add	r2,r21,r2
    39c8:	11000017 	ldw	r4,0(r2)
    39cc:	00068e00 	call	68e0 <__hi0bits>
    39d0:	b885c83a 	sub	r2,r23,r2
    39d4:	1585883a 	add	r2,r2,r22
    39d8:	108007cc 	andi	r2,r2,31
    39dc:	1000b326 	beq	r2,zero,3cac <_dtoa_r+0xda0>
    39e0:	00c00804 	movi	r3,32
    39e4:	1887c83a 	sub	r3,r3,r2
    39e8:	01000104 	movi	r4,4
    39ec:	20c2cd0e 	bge	r4,r3,4524 <_dtoa_r+0x1618>
    39f0:	00c00704 	movi	r3,28
    39f4:	1885c83a 	sub	r2,r3,r2
    39f8:	d8c00817 	ldw	r3,32(sp)
    39fc:	a0a9883a 	add	r20,r20,r2
    3a00:	b0ad883a 	add	r22,r22,r2
    3a04:	1887883a 	add	r3,r3,r2
    3a08:	d8c00815 	stw	r3,32(sp)
    3a0c:	d9800817 	ldw	r6,32(sp)
    3a10:	0180040e 	bge	zero,r6,3a24 <_dtoa_r+0xb18>
    3a14:	800b883a 	mov	r5,r16
    3a18:	e009883a 	mov	r4,fp
    3a1c:	0006e000 	call	6e00 <__lshift>
    3a20:	1021883a 	mov	r16,r2
    3a24:	0580050e 	bge	zero,r22,3a3c <_dtoa_r+0xb30>
    3a28:	a80b883a 	mov	r5,r21
    3a2c:	b00d883a 	mov	r6,r22
    3a30:	e009883a 	mov	r4,fp
    3a34:	0006e000 	call	6e00 <__lshift>
    3a38:	102b883a 	mov	r21,r2
    3a3c:	d9c00e17 	ldw	r7,56(sp)
    3a40:	3801211e 	bne	r7,zero,3ec8 <_dtoa_r+0xfbc>
    3a44:	d9800617 	ldw	r6,24(sp)
    3a48:	0181380e 	bge	zero,r6,3f2c <_dtoa_r+0x1020>
    3a4c:	d8c00b17 	ldw	r3,44(sp)
    3a50:	1800ab1e 	bne	r3,zero,3d00 <_dtoa_r+0xdf4>
    3a54:	dc800717 	ldw	r18,28(sp)
    3a58:	dcc00617 	ldw	r19,24(sp)
    3a5c:	9029883a 	mov	r20,r18
    3a60:	00000206 	br	3a6c <_dtoa_r+0xb60>
    3a64:	00066940 	call	6694 <__multadd>
    3a68:	1021883a 	mov	r16,r2
    3a6c:	a80b883a 	mov	r5,r21
    3a70:	8009883a 	mov	r4,r16
    3a74:	0002ce40 	call	2ce4 <quorem>
    3a78:	10800c04 	addi	r2,r2,48
    3a7c:	90800005 	stb	r2,0(r18)
    3a80:	94800044 	addi	r18,r18,1
    3a84:	9507c83a 	sub	r3,r18,r20
    3a88:	000f883a 	mov	r7,zero
    3a8c:	01800284 	movi	r6,10
    3a90:	800b883a 	mov	r5,r16
    3a94:	e009883a 	mov	r4,fp
    3a98:	1cfff216 	blt	r3,r19,3a64 <__alt_data_end+0xfffba684>
    3a9c:	1011883a 	mov	r8,r2
    3aa0:	d8800617 	ldw	r2,24(sp)
    3aa4:	0082370e 	bge	zero,r2,4384 <_dtoa_r+0x1478>
    3aa8:	d9000717 	ldw	r4,28(sp)
    3aac:	0025883a 	mov	r18,zero
    3ab0:	20af883a 	add	r23,r4,r2
    3ab4:	01800044 	movi	r6,1
    3ab8:	800b883a 	mov	r5,r16
    3abc:	e009883a 	mov	r4,fp
    3ac0:	da001715 	stw	r8,92(sp)
    3ac4:	0006e000 	call	6e00 <__lshift>
    3ac8:	a80b883a 	mov	r5,r21
    3acc:	1009883a 	mov	r4,r2
    3ad0:	d8800915 	stw	r2,36(sp)
    3ad4:	0006f480 	call	6f48 <__mcmp>
    3ad8:	da001717 	ldw	r8,92(sp)
    3adc:	0081800e 	bge	zero,r2,40e0 <_dtoa_r+0x11d4>
    3ae0:	b93fffc3 	ldbu	r4,-1(r23)
    3ae4:	b8bfffc4 	addi	r2,r23,-1
    3ae8:	1007883a 	mov	r3,r2
    3aec:	01800e44 	movi	r6,57
    3af0:	d9c00717 	ldw	r7,28(sp)
    3af4:	00000506 	br	3b0c <_dtoa_r+0xc00>
    3af8:	18ffffc4 	addi	r3,r3,-1
    3afc:	11c12326 	beq	r2,r7,3f8c <_dtoa_r+0x1080>
    3b00:	19000003 	ldbu	r4,0(r3)
    3b04:	102f883a 	mov	r23,r2
    3b08:	10bfffc4 	addi	r2,r2,-1
    3b0c:	21403fcc 	andi	r5,r4,255
    3b10:	2940201c 	xori	r5,r5,128
    3b14:	297fe004 	addi	r5,r5,-128
    3b18:	29bff726 	beq	r5,r6,3af8 <__alt_data_end+0xfffba718>
    3b1c:	21000044 	addi	r4,r4,1
    3b20:	11000005 	stb	r4,0(r2)
    3b24:	a80b883a 	mov	r5,r21
    3b28:	e009883a 	mov	r4,fp
    3b2c:	000666c0 	call	666c <_Bfree>
    3b30:	883ea026 	beq	r17,zero,35b4 <__alt_data_end+0xfffba1d4>
    3b34:	90000426 	beq	r18,zero,3b48 <_dtoa_r+0xc3c>
    3b38:	94400326 	beq	r18,r17,3b48 <_dtoa_r+0xc3c>
    3b3c:	900b883a 	mov	r5,r18
    3b40:	e009883a 	mov	r4,fp
    3b44:	000666c0 	call	666c <_Bfree>
    3b48:	880b883a 	mov	r5,r17
    3b4c:	e009883a 	mov	r4,fp
    3b50:	000666c0 	call	666c <_Bfree>
    3b54:	003e9706 	br	35b4 <__alt_data_end+0xfffba1d4>
    3b58:	01800044 	movi	r6,1
    3b5c:	d9800e15 	stw	r6,56(sp)
    3b60:	003d9606 	br	31bc <__alt_data_end+0xfffb9ddc>
    3b64:	d8800817 	ldw	r2,32(sp)
    3b68:	d8c00517 	ldw	r3,20(sp)
    3b6c:	d8000d15 	stw	zero,52(sp)
    3b70:	10c5c83a 	sub	r2,r2,r3
    3b74:	00c9c83a 	sub	r4,zero,r3
    3b78:	d8800815 	stw	r2,32(sp)
    3b7c:	d9000a15 	stw	r4,40(sp)
    3b80:	003d9706 	br	31e0 <__alt_data_end+0xfffb9e00>
    3b84:	05adc83a 	sub	r22,zero,r22
    3b88:	dd800815 	stw	r22,32(sp)
    3b8c:	002d883a 	mov	r22,zero
    3b90:	003d8e06 	br	31cc <__alt_data_end+0xfffb9dec>
    3b94:	d9000517 	ldw	r4,20(sp)
    3b98:	000d4c40 	call	d4c4 <__floatsidf>
    3b9c:	100d883a 	mov	r6,r2
    3ba0:	180f883a 	mov	r7,r3
    3ba4:	a009883a 	mov	r4,r20
    3ba8:	880b883a 	mov	r5,r17
    3bac:	000c0840 	call	c084 <__eqdf2>
    3bb0:	103d7126 	beq	r2,zero,3178 <__alt_data_end+0xfffb9d98>
    3bb4:	d9c00517 	ldw	r7,20(sp)
    3bb8:	39ffffc4 	addi	r7,r7,-1
    3bbc:	d9c00515 	stw	r7,20(sp)
    3bc0:	003d6d06 	br	3178 <__alt_data_end+0xfffb9d98>
    3bc4:	dd400a17 	ldw	r21,40(sp)
    3bc8:	dd000817 	ldw	r20,32(sp)
    3bcc:	0023883a 	mov	r17,zero
    3bd0:	003f4806 	br	38f4 <__alt_data_end+0xfffba514>
    3bd4:	10e3c83a 	sub	r17,r2,r3
    3bd8:	9448983a 	sll	r4,r18,r17
    3bdc:	003d3206 	br	30a8 <__alt_data_end+0xfffb9cc8>
    3be0:	d8000e15 	stw	zero,56(sp)
    3be4:	003d7506 	br	31bc <__alt_data_end+0xfffb9ddc>
    3be8:	b005883a 	mov	r2,r22
    3bec:	003f4506 	br	3904 <__alt_data_end+0xfffba524>
    3bf0:	dc000915 	stw	r16,36(sp)
    3bf4:	d9800a17 	ldw	r6,40(sp)
    3bf8:	d9400917 	ldw	r5,36(sp)
    3bfc:	e009883a 	mov	r4,fp
    3c00:	0006cc00 	call	6cc0 <__pow5mult>
    3c04:	1021883a 	mov	r16,r2
    3c08:	003f5a06 	br	3974 <__alt_data_end+0xfffba594>
    3c0c:	01c00044 	movi	r7,1
    3c10:	d9c00b15 	stw	r7,44(sp)
    3c14:	d8802217 	ldw	r2,136(sp)
    3c18:	0081280e 	bge	zero,r2,40bc <_dtoa_r+0x11b0>
    3c1c:	100d883a 	mov	r6,r2
    3c20:	1021883a 	mov	r16,r2
    3c24:	d8800c15 	stw	r2,48(sp)
    3c28:	d8800615 	stw	r2,24(sp)
    3c2c:	003d8806 	br	3250 <__alt_data_end+0xfffb9e70>
    3c30:	d8800617 	ldw	r2,24(sp)
    3c34:	00be9b16 	blt	zero,r2,36a4 <__alt_data_end+0xfffba2c4>
    3c38:	10010f1e 	bne	r2,zero,4078 <_dtoa_r+0x116c>
    3c3c:	880b883a 	mov	r5,r17
    3c40:	000d883a 	mov	r6,zero
    3c44:	01d00534 	movhi	r7,16404
    3c48:	8009883a 	mov	r4,r16
    3c4c:	000c2dc0 	call	c2dc <__muldf3>
    3c50:	900d883a 	mov	r6,r18
    3c54:	980f883a 	mov	r7,r19
    3c58:	1009883a 	mov	r4,r2
    3c5c:	180b883a 	mov	r5,r3
    3c60:	000c10c0 	call	c10c <__gedf2>
    3c64:	002b883a 	mov	r21,zero
    3c68:	0023883a 	mov	r17,zero
    3c6c:	1000bf16 	blt	r2,zero,3f6c <_dtoa_r+0x1060>
    3c70:	d9802217 	ldw	r6,136(sp)
    3c74:	ddc00717 	ldw	r23,28(sp)
    3c78:	018c303a 	nor	r6,zero,r6
    3c7c:	d9800515 	stw	r6,20(sp)
    3c80:	a80b883a 	mov	r5,r21
    3c84:	e009883a 	mov	r4,fp
    3c88:	000666c0 	call	666c <_Bfree>
    3c8c:	883e4926 	beq	r17,zero,35b4 <__alt_data_end+0xfffba1d4>
    3c90:	003fad06 	br	3b48 <__alt_data_end+0xfffba768>
    3c94:	d9c01117 	ldw	r7,68(sp)
    3c98:	3801bc26 	beq	r7,zero,438c <_dtoa_r+0x1480>
    3c9c:	10810cc4 	addi	r2,r2,1075
    3ca0:	dd400a17 	ldw	r21,40(sp)
    3ca4:	dd000817 	ldw	r20,32(sp)
    3ca8:	003f0a06 	br	38d4 <__alt_data_end+0xfffba4f4>
    3cac:	00800704 	movi	r2,28
    3cb0:	d9000817 	ldw	r4,32(sp)
    3cb4:	a0a9883a 	add	r20,r20,r2
    3cb8:	b0ad883a 	add	r22,r22,r2
    3cbc:	2089883a 	add	r4,r4,r2
    3cc0:	d9000815 	stw	r4,32(sp)
    3cc4:	003f5106 	br	3a0c <__alt_data_end+0xfffba62c>
    3cc8:	d8c00317 	ldw	r3,12(sp)
    3ccc:	b8c1fc0e 	bge	r23,r3,44c0 <_dtoa_r+0x15b4>
    3cd0:	0027883a 	mov	r19,zero
    3cd4:	b805883a 	mov	r2,r23
    3cd8:	003f3e06 	br	39d4 <__alt_data_end+0xfffba5f4>
    3cdc:	880b883a 	mov	r5,r17
    3ce0:	e009883a 	mov	r4,fp
    3ce4:	000f883a 	mov	r7,zero
    3ce8:	01800284 	movi	r6,10
    3cec:	00066940 	call	6694 <__multadd>
    3cf0:	d9000c17 	ldw	r4,48(sp)
    3cf4:	1023883a 	mov	r17,r2
    3cf8:	0102040e 	bge	zero,r4,450c <_dtoa_r+0x1600>
    3cfc:	d9000615 	stw	r4,24(sp)
    3d00:	0500050e 	bge	zero,r20,3d18 <_dtoa_r+0xe0c>
    3d04:	880b883a 	mov	r5,r17
    3d08:	a00d883a 	mov	r6,r20
    3d0c:	e009883a 	mov	r4,fp
    3d10:	0006e000 	call	6e00 <__lshift>
    3d14:	1023883a 	mov	r17,r2
    3d18:	9801241e 	bne	r19,zero,41ac <_dtoa_r+0x12a0>
    3d1c:	8829883a 	mov	r20,r17
    3d20:	d9000617 	ldw	r4,24(sp)
    3d24:	dcc00717 	ldw	r19,28(sp)
    3d28:	9480004c 	andi	r18,r18,1
    3d2c:	20bfffc4 	addi	r2,r4,-1
    3d30:	9885883a 	add	r2,r19,r2
    3d34:	d8800415 	stw	r2,16(sp)
    3d38:	dc800615 	stw	r18,24(sp)
    3d3c:	a80b883a 	mov	r5,r21
    3d40:	8009883a 	mov	r4,r16
    3d44:	0002ce40 	call	2ce4 <quorem>
    3d48:	880b883a 	mov	r5,r17
    3d4c:	8009883a 	mov	r4,r16
    3d50:	102f883a 	mov	r23,r2
    3d54:	0006f480 	call	6f48 <__mcmp>
    3d58:	a80b883a 	mov	r5,r21
    3d5c:	a00d883a 	mov	r6,r20
    3d60:	e009883a 	mov	r4,fp
    3d64:	102d883a 	mov	r22,r2
    3d68:	0006fa80 	call	6fa8 <__mdiff>
    3d6c:	1007883a 	mov	r3,r2
    3d70:	10800317 	ldw	r2,12(r2)
    3d74:	bc800c04 	addi	r18,r23,48
    3d78:	180b883a 	mov	r5,r3
    3d7c:	10004e1e 	bne	r2,zero,3eb8 <_dtoa_r+0xfac>
    3d80:	8009883a 	mov	r4,r16
    3d84:	d8c01615 	stw	r3,88(sp)
    3d88:	0006f480 	call	6f48 <__mcmp>
    3d8c:	d8c01617 	ldw	r3,88(sp)
    3d90:	e009883a 	mov	r4,fp
    3d94:	d8801615 	stw	r2,88(sp)
    3d98:	180b883a 	mov	r5,r3
    3d9c:	000666c0 	call	666c <_Bfree>
    3da0:	d8801617 	ldw	r2,88(sp)
    3da4:	1000041e 	bne	r2,zero,3db8 <_dtoa_r+0xeac>
    3da8:	d9800317 	ldw	r6,12(sp)
    3dac:	3000021e 	bne	r6,zero,3db8 <_dtoa_r+0xeac>
    3db0:	d8c00617 	ldw	r3,24(sp)
    3db4:	18003726 	beq	r3,zero,3e94 <_dtoa_r+0xf88>
    3db8:	b0002016 	blt	r22,zero,3e3c <_dtoa_r+0xf30>
    3dbc:	b000041e 	bne	r22,zero,3dd0 <_dtoa_r+0xec4>
    3dc0:	d9000317 	ldw	r4,12(sp)
    3dc4:	2000021e 	bne	r4,zero,3dd0 <_dtoa_r+0xec4>
    3dc8:	d8c00617 	ldw	r3,24(sp)
    3dcc:	18001b26 	beq	r3,zero,3e3c <_dtoa_r+0xf30>
    3dd0:	00810716 	blt	zero,r2,41f0 <_dtoa_r+0x12e4>
    3dd4:	d8c00417 	ldw	r3,16(sp)
    3dd8:	9d800044 	addi	r22,r19,1
    3ddc:	9c800005 	stb	r18,0(r19)
    3de0:	b02f883a 	mov	r23,r22
    3de4:	98c10626 	beq	r19,r3,4200 <_dtoa_r+0x12f4>
    3de8:	800b883a 	mov	r5,r16
    3dec:	000f883a 	mov	r7,zero
    3df0:	01800284 	movi	r6,10
    3df4:	e009883a 	mov	r4,fp
    3df8:	00066940 	call	6694 <__multadd>
    3dfc:	1021883a 	mov	r16,r2
    3e00:	000f883a 	mov	r7,zero
    3e04:	01800284 	movi	r6,10
    3e08:	880b883a 	mov	r5,r17
    3e0c:	e009883a 	mov	r4,fp
    3e10:	8d002526 	beq	r17,r20,3ea8 <_dtoa_r+0xf9c>
    3e14:	00066940 	call	6694 <__multadd>
    3e18:	a00b883a 	mov	r5,r20
    3e1c:	000f883a 	mov	r7,zero
    3e20:	01800284 	movi	r6,10
    3e24:	e009883a 	mov	r4,fp
    3e28:	1023883a 	mov	r17,r2
    3e2c:	00066940 	call	6694 <__multadd>
    3e30:	1029883a 	mov	r20,r2
    3e34:	b027883a 	mov	r19,r22
    3e38:	003fc006 	br	3d3c <__alt_data_end+0xfffba95c>
    3e3c:	9011883a 	mov	r8,r18
    3e40:	00800e0e 	bge	zero,r2,3e7c <_dtoa_r+0xf70>
    3e44:	800b883a 	mov	r5,r16
    3e48:	01800044 	movi	r6,1
    3e4c:	e009883a 	mov	r4,fp
    3e50:	da001715 	stw	r8,92(sp)
    3e54:	0006e000 	call	6e00 <__lshift>
    3e58:	a80b883a 	mov	r5,r21
    3e5c:	1009883a 	mov	r4,r2
    3e60:	1021883a 	mov	r16,r2
    3e64:	0006f480 	call	6f48 <__mcmp>
    3e68:	da001717 	ldw	r8,92(sp)
    3e6c:	0081960e 	bge	zero,r2,44c8 <_dtoa_r+0x15bc>
    3e70:	00800e44 	movi	r2,57
    3e74:	40817026 	beq	r8,r2,4438 <_dtoa_r+0x152c>
    3e78:	ba000c44 	addi	r8,r23,49
    3e7c:	8825883a 	mov	r18,r17
    3e80:	9dc00044 	addi	r23,r19,1
    3e84:	9a000005 	stb	r8,0(r19)
    3e88:	a023883a 	mov	r17,r20
    3e8c:	dc000915 	stw	r16,36(sp)
    3e90:	003f2406 	br	3b24 <__alt_data_end+0xfffba744>
    3e94:	00800e44 	movi	r2,57
    3e98:	9011883a 	mov	r8,r18
    3e9c:	90816626 	beq	r18,r2,4438 <_dtoa_r+0x152c>
    3ea0:	05bff516 	blt	zero,r22,3e78 <__alt_data_end+0xfffbaa98>
    3ea4:	003ff506 	br	3e7c <__alt_data_end+0xfffbaa9c>
    3ea8:	00066940 	call	6694 <__multadd>
    3eac:	1023883a 	mov	r17,r2
    3eb0:	1029883a 	mov	r20,r2
    3eb4:	003fdf06 	br	3e34 <__alt_data_end+0xfffbaa54>
    3eb8:	e009883a 	mov	r4,fp
    3ebc:	000666c0 	call	666c <_Bfree>
    3ec0:	00800044 	movi	r2,1
    3ec4:	003fbc06 	br	3db8 <__alt_data_end+0xfffba9d8>
    3ec8:	a80b883a 	mov	r5,r21
    3ecc:	8009883a 	mov	r4,r16
    3ed0:	0006f480 	call	6f48 <__mcmp>
    3ed4:	103edb0e 	bge	r2,zero,3a44 <__alt_data_end+0xfffba664>
    3ed8:	800b883a 	mov	r5,r16
    3edc:	000f883a 	mov	r7,zero
    3ee0:	01800284 	movi	r6,10
    3ee4:	e009883a 	mov	r4,fp
    3ee8:	00066940 	call	6694 <__multadd>
    3eec:	1021883a 	mov	r16,r2
    3ef0:	d8800517 	ldw	r2,20(sp)
    3ef4:	d8c00b17 	ldw	r3,44(sp)
    3ef8:	10bfffc4 	addi	r2,r2,-1
    3efc:	d8800515 	stw	r2,20(sp)
    3f00:	183f761e 	bne	r3,zero,3cdc <__alt_data_end+0xfffba8fc>
    3f04:	d9000c17 	ldw	r4,48(sp)
    3f08:	0101730e 	bge	zero,r4,44d8 <_dtoa_r+0x15cc>
    3f0c:	d9000615 	stw	r4,24(sp)
    3f10:	003ed006 	br	3a54 <__alt_data_end+0xfffba674>
    3f14:	00800084 	movi	r2,2
    3f18:	3081861e 	bne	r6,r2,4534 <_dtoa_r+0x1628>
    3f1c:	d8000b15 	stw	zero,44(sp)
    3f20:	003f3c06 	br	3c14 <__alt_data_end+0xfffba834>
    3f24:	dc000917 	ldw	r16,36(sp)
    3f28:	003e9206 	br	3974 <__alt_data_end+0xfffba594>
    3f2c:	d9c00317 	ldw	r7,12(sp)
    3f30:	00800084 	movi	r2,2
    3f34:	11fec50e 	bge	r2,r7,3a4c <__alt_data_end+0xfffba66c>
    3f38:	d9000617 	ldw	r4,24(sp)
    3f3c:	20013c1e 	bne	r4,zero,4430 <_dtoa_r+0x1524>
    3f40:	a80b883a 	mov	r5,r21
    3f44:	000f883a 	mov	r7,zero
    3f48:	01800144 	movi	r6,5
    3f4c:	e009883a 	mov	r4,fp
    3f50:	00066940 	call	6694 <__multadd>
    3f54:	100b883a 	mov	r5,r2
    3f58:	8009883a 	mov	r4,r16
    3f5c:	102b883a 	mov	r21,r2
    3f60:	0006f480 	call	6f48 <__mcmp>
    3f64:	dc000915 	stw	r16,36(sp)
    3f68:	00bf410e 	bge	zero,r2,3c70 <__alt_data_end+0xfffba890>
    3f6c:	d9c00717 	ldw	r7,28(sp)
    3f70:	00800c44 	movi	r2,49
    3f74:	38800005 	stb	r2,0(r7)
    3f78:	d8800517 	ldw	r2,20(sp)
    3f7c:	3dc00044 	addi	r23,r7,1
    3f80:	10800044 	addi	r2,r2,1
    3f84:	d8800515 	stw	r2,20(sp)
    3f88:	003f3d06 	br	3c80 <__alt_data_end+0xfffba8a0>
    3f8c:	d9800517 	ldw	r6,20(sp)
    3f90:	d9c00717 	ldw	r7,28(sp)
    3f94:	00800c44 	movi	r2,49
    3f98:	31800044 	addi	r6,r6,1
    3f9c:	d9800515 	stw	r6,20(sp)
    3fa0:	38800005 	stb	r2,0(r7)
    3fa4:	003edf06 	br	3b24 <__alt_data_end+0xfffba744>
    3fa8:	d8000b15 	stw	zero,44(sp)
    3fac:	003c9f06 	br	322c <__alt_data_end+0xfffb9e4c>
    3fb0:	903e7e1e 	bne	r18,zero,39ac <__alt_data_end+0xfffba5cc>
    3fb4:	00800434 	movhi	r2,16
    3fb8:	10bfffc4 	addi	r2,r2,-1
    3fbc:	9884703a 	and	r2,r19,r2
    3fc0:	1000ea1e 	bne	r2,zero,436c <_dtoa_r+0x1460>
    3fc4:	9cdffc2c 	andhi	r19,r19,32752
    3fc8:	9800e826 	beq	r19,zero,436c <_dtoa_r+0x1460>
    3fcc:	d9c00817 	ldw	r7,32(sp)
    3fd0:	b5800044 	addi	r22,r22,1
    3fd4:	04c00044 	movi	r19,1
    3fd8:	39c00044 	addi	r7,r7,1
    3fdc:	d9c00815 	stw	r7,32(sp)
    3fe0:	d8800d17 	ldw	r2,52(sp)
    3fe4:	103e721e 	bne	r2,zero,39b0 <__alt_data_end+0xfffba5d0>
    3fe8:	00800044 	movi	r2,1
    3fec:	003e7906 	br	39d4 <__alt_data_end+0xfffba5f4>
    3ff0:	8009883a 	mov	r4,r16
    3ff4:	000d4c40 	call	d4c4 <__floatsidf>
    3ff8:	d9800f17 	ldw	r6,60(sp)
    3ffc:	d9c01017 	ldw	r7,64(sp)
    4000:	1009883a 	mov	r4,r2
    4004:	180b883a 	mov	r5,r3
    4008:	000c2dc0 	call	c2dc <__muldf3>
    400c:	000d883a 	mov	r6,zero
    4010:	01d00734 	movhi	r7,16412
    4014:	1009883a 	mov	r4,r2
    4018:	180b883a 	mov	r5,r3
    401c:	000ae080 	call	ae08 <__adddf3>
    4020:	047f3034 	movhi	r17,64704
    4024:	1021883a 	mov	r16,r2
    4028:	1c63883a 	add	r17,r3,r17
    402c:	d9000f17 	ldw	r4,60(sp)
    4030:	d9401017 	ldw	r5,64(sp)
    4034:	000d883a 	mov	r6,zero
    4038:	01d00534 	movhi	r7,16404
    403c:	000cb480 	call	cb48 <__subdf3>
    4040:	800d883a 	mov	r6,r16
    4044:	880f883a 	mov	r7,r17
    4048:	1009883a 	mov	r4,r2
    404c:	180b883a 	mov	r5,r3
    4050:	102b883a 	mov	r21,r2
    4054:	1829883a 	mov	r20,r3
    4058:	000c10c0 	call	c10c <__gedf2>
    405c:	00806c16 	blt	zero,r2,4210 <_dtoa_r+0x1304>
    4060:	89e0003c 	xorhi	r7,r17,32768
    4064:	800d883a 	mov	r6,r16
    4068:	a809883a 	mov	r4,r21
    406c:	a00b883a 	mov	r5,r20
    4070:	000c1e80 	call	c1e8 <__ledf2>
    4074:	103d7e0e 	bge	r2,zero,3670 <__alt_data_end+0xfffba290>
    4078:	002b883a 	mov	r21,zero
    407c:	0023883a 	mov	r17,zero
    4080:	003efb06 	br	3c70 <__alt_data_end+0xfffba890>
    4084:	d8800717 	ldw	r2,28(sp)
    4088:	003bd006 	br	2fcc <__alt_data_end+0xfffb9bec>
    408c:	d9000a17 	ldw	r4,40(sp)
    4090:	d9800d17 	ldw	r6,52(sp)
    4094:	dd400a15 	stw	r21,40(sp)
    4098:	a905c83a 	sub	r2,r21,r4
    409c:	308d883a 	add	r6,r6,r2
    40a0:	d9800d15 	stw	r6,52(sp)
    40a4:	002b883a 	mov	r21,zero
    40a8:	003e0606 	br	38c4 <__alt_data_end+0xfffba4e4>
    40ac:	9023883a 	mov	r17,r18
    40b0:	9829883a 	mov	r20,r19
    40b4:	04000084 	movi	r16,2
    40b8:	003c9206 	br	3304 <__alt_data_end+0xfffb9f24>
    40bc:	04000044 	movi	r16,1
    40c0:	dc000c15 	stw	r16,48(sp)
    40c4:	dc000615 	stw	r16,24(sp)
    40c8:	dc002215 	stw	r16,136(sp)
    40cc:	e0001115 	stw	zero,68(fp)
    40d0:	000b883a 	mov	r5,zero
    40d4:	003c6906 	br	327c <__alt_data_end+0xfffb9e9c>
    40d8:	3021883a 	mov	r16,r6
    40dc:	003ffb06 	br	40cc <__alt_data_end+0xfffbacec>
    40e0:	1000021e 	bne	r2,zero,40ec <_dtoa_r+0x11e0>
    40e4:	4200004c 	andi	r8,r8,1
    40e8:	403e7d1e 	bne	r8,zero,3ae0 <__alt_data_end+0xfffba700>
    40ec:	01000c04 	movi	r4,48
    40f0:	00000106 	br	40f8 <_dtoa_r+0x11ec>
    40f4:	102f883a 	mov	r23,r2
    40f8:	b8bfffc4 	addi	r2,r23,-1
    40fc:	10c00007 	ldb	r3,0(r2)
    4100:	193ffc26 	beq	r3,r4,40f4 <__alt_data_end+0xfffbad14>
    4104:	003e8706 	br	3b24 <__alt_data_end+0xfffba744>
    4108:	d8800517 	ldw	r2,20(sp)
    410c:	00a3c83a 	sub	r17,zero,r2
    4110:	8800a426 	beq	r17,zero,43a4 <_dtoa_r+0x1498>
    4114:	888003cc 	andi	r2,r17,15
    4118:	100490fa 	slli	r2,r2,3
    411c:	00c00074 	movhi	r3,1
    4120:	18c1c604 	addi	r3,r3,1816
    4124:	1885883a 	add	r2,r3,r2
    4128:	11800017 	ldw	r6,0(r2)
    412c:	11c00117 	ldw	r7,4(r2)
    4130:	9009883a 	mov	r4,r18
    4134:	980b883a 	mov	r5,r19
    4138:	8823d13a 	srai	r17,r17,4
    413c:	000c2dc0 	call	c2dc <__muldf3>
    4140:	d8800f15 	stw	r2,60(sp)
    4144:	d8c01015 	stw	r3,64(sp)
    4148:	8800e826 	beq	r17,zero,44ec <_dtoa_r+0x15e0>
    414c:	05000074 	movhi	r20,1
    4150:	a501bc04 	addi	r20,r20,1776
    4154:	04000084 	movi	r16,2
    4158:	8980004c 	andi	r6,r17,1
    415c:	1009883a 	mov	r4,r2
    4160:	8823d07a 	srai	r17,r17,1
    4164:	180b883a 	mov	r5,r3
    4168:	30000426 	beq	r6,zero,417c <_dtoa_r+0x1270>
    416c:	a1800017 	ldw	r6,0(r20)
    4170:	a1c00117 	ldw	r7,4(r20)
    4174:	84000044 	addi	r16,r16,1
    4178:	000c2dc0 	call	c2dc <__muldf3>
    417c:	a5000204 	addi	r20,r20,8
    4180:	883ff51e 	bne	r17,zero,4158 <__alt_data_end+0xfffbad78>
    4184:	d8800f15 	stw	r2,60(sp)
    4188:	d8c01015 	stw	r3,64(sp)
    418c:	003c7606 	br	3368 <__alt_data_end+0xfffb9f88>
    4190:	00c00c04 	movi	r3,48
    4194:	10c00005 	stb	r3,0(r2)
    4198:	d8c00517 	ldw	r3,20(sp)
    419c:	bd3fffc3 	ldbu	r20,-1(r23)
    41a0:	18c00044 	addi	r3,r3,1
    41a4:	d8c00515 	stw	r3,20(sp)
    41a8:	003db906 	br	3890 <__alt_data_end+0xfffba4b0>
    41ac:	89400117 	ldw	r5,4(r17)
    41b0:	e009883a 	mov	r4,fp
    41b4:	00065c40 	call	65c4 <_Balloc>
    41b8:	89800417 	ldw	r6,16(r17)
    41bc:	89400304 	addi	r5,r17,12
    41c0:	11000304 	addi	r4,r2,12
    41c4:	31800084 	addi	r6,r6,2
    41c8:	318d883a 	add	r6,r6,r6
    41cc:	318d883a 	add	r6,r6,r6
    41d0:	1027883a 	mov	r19,r2
    41d4:	00061f80 	call	61f8 <memcpy>
    41d8:	01800044 	movi	r6,1
    41dc:	980b883a 	mov	r5,r19
    41e0:	e009883a 	mov	r4,fp
    41e4:	0006e000 	call	6e00 <__lshift>
    41e8:	1029883a 	mov	r20,r2
    41ec:	003ecc06 	br	3d20 <__alt_data_end+0xfffba940>
    41f0:	00800e44 	movi	r2,57
    41f4:	90809026 	beq	r18,r2,4438 <_dtoa_r+0x152c>
    41f8:	92000044 	addi	r8,r18,1
    41fc:	003f1f06 	br	3e7c <__alt_data_end+0xfffbaa9c>
    4200:	9011883a 	mov	r8,r18
    4204:	8825883a 	mov	r18,r17
    4208:	a023883a 	mov	r17,r20
    420c:	003e2906 	br	3ab4 <__alt_data_end+0xfffba6d4>
    4210:	002b883a 	mov	r21,zero
    4214:	0023883a 	mov	r17,zero
    4218:	003f5406 	br	3f6c <__alt_data_end+0xfffbab8c>
    421c:	61bfffc4 	addi	r6,r12,-1
    4220:	300490fa 	slli	r2,r6,3
    4224:	00c00074 	movhi	r3,1
    4228:	18c1c604 	addi	r3,r3,1816
    422c:	1885883a 	add	r2,r3,r2
    4230:	11000017 	ldw	r4,0(r2)
    4234:	11400117 	ldw	r5,4(r2)
    4238:	d8800717 	ldw	r2,28(sp)
    423c:	880f883a 	mov	r7,r17
    4240:	d9801215 	stw	r6,72(sp)
    4244:	800d883a 	mov	r6,r16
    4248:	db001615 	stw	r12,88(sp)
    424c:	15c00044 	addi	r23,r2,1
    4250:	000c2dc0 	call	c2dc <__muldf3>
    4254:	d9401017 	ldw	r5,64(sp)
    4258:	d9000f17 	ldw	r4,60(sp)
    425c:	d8c01515 	stw	r3,84(sp)
    4260:	d8801415 	stw	r2,80(sp)
    4264:	000d4440 	call	d444 <__fixdfsi>
    4268:	1009883a 	mov	r4,r2
    426c:	1021883a 	mov	r16,r2
    4270:	000d4c40 	call	d4c4 <__floatsidf>
    4274:	d9000f17 	ldw	r4,60(sp)
    4278:	d9401017 	ldw	r5,64(sp)
    427c:	100d883a 	mov	r6,r2
    4280:	180f883a 	mov	r7,r3
    4284:	000cb480 	call	cb48 <__subdf3>
    4288:	1829883a 	mov	r20,r3
    428c:	d8c00717 	ldw	r3,28(sp)
    4290:	84000c04 	addi	r16,r16,48
    4294:	1023883a 	mov	r17,r2
    4298:	1c000005 	stb	r16,0(r3)
    429c:	db001617 	ldw	r12,88(sp)
    42a0:	00800044 	movi	r2,1
    42a4:	60802226 	beq	r12,r2,4330 <_dtoa_r+0x1424>
    42a8:	d9c00717 	ldw	r7,28(sp)
    42ac:	8805883a 	mov	r2,r17
    42b0:	b82b883a 	mov	r21,r23
    42b4:	3b19883a 	add	r12,r7,r12
    42b8:	6023883a 	mov	r17,r12
    42bc:	a007883a 	mov	r3,r20
    42c0:	dc800f15 	stw	r18,60(sp)
    42c4:	000d883a 	mov	r6,zero
    42c8:	01d00934 	movhi	r7,16420
    42cc:	1009883a 	mov	r4,r2
    42d0:	180b883a 	mov	r5,r3
    42d4:	000c2dc0 	call	c2dc <__muldf3>
    42d8:	180b883a 	mov	r5,r3
    42dc:	1009883a 	mov	r4,r2
    42e0:	1829883a 	mov	r20,r3
    42e4:	1025883a 	mov	r18,r2
    42e8:	000d4440 	call	d444 <__fixdfsi>
    42ec:	1009883a 	mov	r4,r2
    42f0:	1021883a 	mov	r16,r2
    42f4:	000d4c40 	call	d4c4 <__floatsidf>
    42f8:	100d883a 	mov	r6,r2
    42fc:	180f883a 	mov	r7,r3
    4300:	9009883a 	mov	r4,r18
    4304:	a00b883a 	mov	r5,r20
    4308:	84000c04 	addi	r16,r16,48
    430c:	000cb480 	call	cb48 <__subdf3>
    4310:	ad400044 	addi	r21,r21,1
    4314:	ac3fffc5 	stb	r16,-1(r21)
    4318:	ac7fea1e 	bne	r21,r17,42c4 <__alt_data_end+0xfffbaee4>
    431c:	1023883a 	mov	r17,r2
    4320:	d8801217 	ldw	r2,72(sp)
    4324:	dc800f17 	ldw	r18,60(sp)
    4328:	1829883a 	mov	r20,r3
    432c:	b8af883a 	add	r23,r23,r2
    4330:	d9001417 	ldw	r4,80(sp)
    4334:	d9401517 	ldw	r5,84(sp)
    4338:	000d883a 	mov	r6,zero
    433c:	01cff834 	movhi	r7,16352
    4340:	000ae080 	call	ae08 <__adddf3>
    4344:	880d883a 	mov	r6,r17
    4348:	a00f883a 	mov	r7,r20
    434c:	1009883a 	mov	r4,r2
    4350:	180b883a 	mov	r5,r3
    4354:	000c1e80 	call	c1e8 <__ledf2>
    4358:	10003e0e 	bge	r2,zero,4454 <_dtoa_r+0x1548>
    435c:	d9001317 	ldw	r4,76(sp)
    4360:	bd3fffc3 	ldbu	r20,-1(r23)
    4364:	d9000515 	stw	r4,20(sp)
    4368:	003d3b06 	br	3858 <__alt_data_end+0xfffba478>
    436c:	0027883a 	mov	r19,zero
    4370:	003f1b06 	br	3fe0 <__alt_data_end+0xfffbac00>
    4374:	d8800817 	ldw	r2,32(sp)
    4378:	11e9c83a 	sub	r20,r2,r7
    437c:	0005883a 	mov	r2,zero
    4380:	003d5406 	br	38d4 <__alt_data_end+0xfffba4f4>
    4384:	00800044 	movi	r2,1
    4388:	003dc706 	br	3aa8 <__alt_data_end+0xfffba6c8>
    438c:	d8c00217 	ldw	r3,8(sp)
    4390:	00800d84 	movi	r2,54
    4394:	dd400a17 	ldw	r21,40(sp)
    4398:	10c5c83a 	sub	r2,r2,r3
    439c:	dd000817 	ldw	r20,32(sp)
    43a0:	003d4c06 	br	38d4 <__alt_data_end+0xfffba4f4>
    43a4:	dc800f15 	stw	r18,60(sp)
    43a8:	dcc01015 	stw	r19,64(sp)
    43ac:	04000084 	movi	r16,2
    43b0:	003bed06 	br	3368 <__alt_data_end+0xfffb9f88>
    43b4:	d9000617 	ldw	r4,24(sp)
    43b8:	203f0d26 	beq	r4,zero,3ff0 <__alt_data_end+0xfffbac10>
    43bc:	d9800c17 	ldw	r6,48(sp)
    43c0:	01bcab0e 	bge	zero,r6,3670 <__alt_data_end+0xfffba290>
    43c4:	d9401017 	ldw	r5,64(sp)
    43c8:	d9000f17 	ldw	r4,60(sp)
    43cc:	000d883a 	mov	r6,zero
    43d0:	01d00934 	movhi	r7,16420
    43d4:	000c2dc0 	call	c2dc <__muldf3>
    43d8:	81000044 	addi	r4,r16,1
    43dc:	d8800f15 	stw	r2,60(sp)
    43e0:	d8c01015 	stw	r3,64(sp)
    43e4:	000d4c40 	call	d4c4 <__floatsidf>
    43e8:	d9800f17 	ldw	r6,60(sp)
    43ec:	d9c01017 	ldw	r7,64(sp)
    43f0:	1009883a 	mov	r4,r2
    43f4:	180b883a 	mov	r5,r3
    43f8:	000c2dc0 	call	c2dc <__muldf3>
    43fc:	01d00734 	movhi	r7,16412
    4400:	000d883a 	mov	r6,zero
    4404:	1009883a 	mov	r4,r2
    4408:	180b883a 	mov	r5,r3
    440c:	000ae080 	call	ae08 <__adddf3>
    4410:	d9c00517 	ldw	r7,20(sp)
    4414:	047f3034 	movhi	r17,64704
    4418:	1021883a 	mov	r16,r2
    441c:	39ffffc4 	addi	r7,r7,-1
    4420:	d9c01315 	stw	r7,76(sp)
    4424:	1c63883a 	add	r17,r3,r17
    4428:	db000c17 	ldw	r12,48(sp)
    442c:	003bea06 	br	33d8 <__alt_data_end+0xfffb9ff8>
    4430:	dc000915 	stw	r16,36(sp)
    4434:	003e0e06 	br	3c70 <__alt_data_end+0xfffba890>
    4438:	01000e44 	movi	r4,57
    443c:	8825883a 	mov	r18,r17
    4440:	9dc00044 	addi	r23,r19,1
    4444:	99000005 	stb	r4,0(r19)
    4448:	a023883a 	mov	r17,r20
    444c:	dc000915 	stw	r16,36(sp)
    4450:	003da406 	br	3ae4 <__alt_data_end+0xfffba704>
    4454:	d9801417 	ldw	r6,80(sp)
    4458:	d9c01517 	ldw	r7,84(sp)
    445c:	0009883a 	mov	r4,zero
    4460:	014ff834 	movhi	r5,16352
    4464:	000cb480 	call	cb48 <__subdf3>
    4468:	880d883a 	mov	r6,r17
    446c:	a00f883a 	mov	r7,r20
    4470:	1009883a 	mov	r4,r2
    4474:	180b883a 	mov	r5,r3
    4478:	000c10c0 	call	c10c <__gedf2>
    447c:	00bc7c0e 	bge	zero,r2,3670 <__alt_data_end+0xfffba290>
    4480:	01000c04 	movi	r4,48
    4484:	00000106 	br	448c <_dtoa_r+0x1580>
    4488:	102f883a 	mov	r23,r2
    448c:	b8bfffc4 	addi	r2,r23,-1
    4490:	10c00007 	ldb	r3,0(r2)
    4494:	193ffc26 	beq	r3,r4,4488 <__alt_data_end+0xfffbb0a8>
    4498:	d9801317 	ldw	r6,76(sp)
    449c:	d9800515 	stw	r6,20(sp)
    44a0:	003c4406 	br	35b4 <__alt_data_end+0xfffba1d4>
    44a4:	d9801317 	ldw	r6,76(sp)
    44a8:	d9800515 	stw	r6,20(sp)
    44ac:	003cea06 	br	3858 <__alt_data_end+0xfffba478>
    44b0:	dd800f17 	ldw	r22,60(sp)
    44b4:	dcc01017 	ldw	r19,64(sp)
    44b8:	dc801217 	ldw	r18,72(sp)
    44bc:	003c6c06 	br	3670 <__alt_data_end+0xfffba290>
    44c0:	903e031e 	bne	r18,zero,3cd0 <__alt_data_end+0xfffba8f0>
    44c4:	003ebb06 	br	3fb4 <__alt_data_end+0xfffbabd4>
    44c8:	103e6c1e 	bne	r2,zero,3e7c <__alt_data_end+0xfffbaa9c>
    44cc:	4080004c 	andi	r2,r8,1
    44d0:	103e6a26 	beq	r2,zero,3e7c <__alt_data_end+0xfffbaa9c>
    44d4:	003e6606 	br	3e70 <__alt_data_end+0xfffbaa90>
    44d8:	d8c00317 	ldw	r3,12(sp)
    44dc:	00800084 	movi	r2,2
    44e0:	10c02916 	blt	r2,r3,4588 <_dtoa_r+0x167c>
    44e4:	d9000c17 	ldw	r4,48(sp)
    44e8:	003e8806 	br	3f0c <__alt_data_end+0xfffbab2c>
    44ec:	04000084 	movi	r16,2
    44f0:	003b9d06 	br	3368 <__alt_data_end+0xfffb9f88>
    44f4:	d9001317 	ldw	r4,76(sp)
    44f8:	d9000515 	stw	r4,20(sp)
    44fc:	003cd606 	br	3858 <__alt_data_end+0xfffba478>
    4500:	d8801317 	ldw	r2,76(sp)
    4504:	d8800515 	stw	r2,20(sp)
    4508:	003c2a06 	br	35b4 <__alt_data_end+0xfffba1d4>
    450c:	d9800317 	ldw	r6,12(sp)
    4510:	00800084 	movi	r2,2
    4514:	11801516 	blt	r2,r6,456c <_dtoa_r+0x1660>
    4518:	d9c00c17 	ldw	r7,48(sp)
    451c:	d9c00615 	stw	r7,24(sp)
    4520:	003df706 	br	3d00 <__alt_data_end+0xfffba920>
    4524:	193d3926 	beq	r3,r4,3a0c <__alt_data_end+0xfffba62c>
    4528:	00c00f04 	movi	r3,60
    452c:	1885c83a 	sub	r2,r3,r2
    4530:	003ddf06 	br	3cb0 <__alt_data_end+0xfffba8d0>
    4534:	e009883a 	mov	r4,fp
    4538:	e0001115 	stw	zero,68(fp)
    453c:	000b883a 	mov	r5,zero
    4540:	00065c40 	call	65c4 <_Balloc>
    4544:	d8800715 	stw	r2,28(sp)
    4548:	d8c00717 	ldw	r3,28(sp)
    454c:	00bfffc4 	movi	r2,-1
    4550:	01000044 	movi	r4,1
    4554:	d8800c15 	stw	r2,48(sp)
    4558:	e0c01015 	stw	r3,64(fp)
    455c:	d9000b15 	stw	r4,44(sp)
    4560:	d8800615 	stw	r2,24(sp)
    4564:	d8002215 	stw	zero,136(sp)
    4568:	003c4106 	br	3670 <__alt_data_end+0xfffba290>
    456c:	d8c00c17 	ldw	r3,48(sp)
    4570:	d8c00615 	stw	r3,24(sp)
    4574:	003e7006 	br	3f38 <__alt_data_end+0xfffbab58>
    4578:	04400044 	movi	r17,1
    457c:	003b2006 	br	3200 <__alt_data_end+0xfffb9e20>
    4580:	000b883a 	mov	r5,zero
    4584:	003b3d06 	br	327c <__alt_data_end+0xfffb9e9c>
    4588:	d8800c17 	ldw	r2,48(sp)
    458c:	d8800615 	stw	r2,24(sp)
    4590:	003e6906 	br	3f38 <__alt_data_end+0xfffbab58>

00004594 <__sflush_r>:
    4594:	2880030b 	ldhu	r2,12(r5)
    4598:	defffb04 	addi	sp,sp,-20
    459c:	dcc00315 	stw	r19,12(sp)
    45a0:	dc400115 	stw	r17,4(sp)
    45a4:	dfc00415 	stw	ra,16(sp)
    45a8:	dc800215 	stw	r18,8(sp)
    45ac:	dc000015 	stw	r16,0(sp)
    45b0:	10c0020c 	andi	r3,r2,8
    45b4:	2823883a 	mov	r17,r5
    45b8:	2027883a 	mov	r19,r4
    45bc:	1800311e 	bne	r3,zero,4684 <__sflush_r+0xf0>
    45c0:	28c00117 	ldw	r3,4(r5)
    45c4:	10820014 	ori	r2,r2,2048
    45c8:	2880030d 	sth	r2,12(r5)
    45cc:	00c04b0e 	bge	zero,r3,46fc <__sflush_r+0x168>
    45d0:	8a000a17 	ldw	r8,40(r17)
    45d4:	40002326 	beq	r8,zero,4664 <__sflush_r+0xd0>
    45d8:	9c000017 	ldw	r16,0(r19)
    45dc:	10c4000c 	andi	r3,r2,4096
    45e0:	98000015 	stw	zero,0(r19)
    45e4:	18004826 	beq	r3,zero,4708 <__sflush_r+0x174>
    45e8:	89801417 	ldw	r6,80(r17)
    45ec:	10c0010c 	andi	r3,r2,4
    45f0:	18000626 	beq	r3,zero,460c <__sflush_r+0x78>
    45f4:	88c00117 	ldw	r3,4(r17)
    45f8:	88800c17 	ldw	r2,48(r17)
    45fc:	30cdc83a 	sub	r6,r6,r3
    4600:	10000226 	beq	r2,zero,460c <__sflush_r+0x78>
    4604:	88800f17 	ldw	r2,60(r17)
    4608:	308dc83a 	sub	r6,r6,r2
    460c:	89400717 	ldw	r5,28(r17)
    4610:	000f883a 	mov	r7,zero
    4614:	9809883a 	mov	r4,r19
    4618:	403ee83a 	callr	r8
    461c:	00ffffc4 	movi	r3,-1
    4620:	10c04426 	beq	r2,r3,4734 <__sflush_r+0x1a0>
    4624:	88c0030b 	ldhu	r3,12(r17)
    4628:	89000417 	ldw	r4,16(r17)
    462c:	88000115 	stw	zero,4(r17)
    4630:	197dffcc 	andi	r5,r3,63487
    4634:	8940030d 	sth	r5,12(r17)
    4638:	89000015 	stw	r4,0(r17)
    463c:	18c4000c 	andi	r3,r3,4096
    4640:	18002c1e 	bne	r3,zero,46f4 <__sflush_r+0x160>
    4644:	89400c17 	ldw	r5,48(r17)
    4648:	9c000015 	stw	r16,0(r19)
    464c:	28000526 	beq	r5,zero,4664 <__sflush_r+0xd0>
    4650:	88801004 	addi	r2,r17,64
    4654:	28800226 	beq	r5,r2,4660 <__sflush_r+0xcc>
    4658:	9809883a 	mov	r4,r19
    465c:	0004d100 	call	4d10 <_free_r>
    4660:	88000c15 	stw	zero,48(r17)
    4664:	0005883a 	mov	r2,zero
    4668:	dfc00417 	ldw	ra,16(sp)
    466c:	dcc00317 	ldw	r19,12(sp)
    4670:	dc800217 	ldw	r18,8(sp)
    4674:	dc400117 	ldw	r17,4(sp)
    4678:	dc000017 	ldw	r16,0(sp)
    467c:	dec00504 	addi	sp,sp,20
    4680:	f800283a 	ret
    4684:	2c800417 	ldw	r18,16(r5)
    4688:	903ff626 	beq	r18,zero,4664 <__alt_data_end+0xfffbb284>
    468c:	2c000017 	ldw	r16,0(r5)
    4690:	108000cc 	andi	r2,r2,3
    4694:	2c800015 	stw	r18,0(r5)
    4698:	84a1c83a 	sub	r16,r16,r18
    469c:	1000131e 	bne	r2,zero,46ec <__sflush_r+0x158>
    46a0:	28800517 	ldw	r2,20(r5)
    46a4:	88800215 	stw	r2,8(r17)
    46a8:	04000316 	blt	zero,r16,46b8 <__sflush_r+0x124>
    46ac:	003fed06 	br	4664 <__alt_data_end+0xfffbb284>
    46b0:	90a5883a 	add	r18,r18,r2
    46b4:	043feb0e 	bge	zero,r16,4664 <__alt_data_end+0xfffbb284>
    46b8:	88800917 	ldw	r2,36(r17)
    46bc:	89400717 	ldw	r5,28(r17)
    46c0:	800f883a 	mov	r7,r16
    46c4:	900d883a 	mov	r6,r18
    46c8:	9809883a 	mov	r4,r19
    46cc:	103ee83a 	callr	r2
    46d0:	80a1c83a 	sub	r16,r16,r2
    46d4:	00bff616 	blt	zero,r2,46b0 <__alt_data_end+0xfffbb2d0>
    46d8:	88c0030b 	ldhu	r3,12(r17)
    46dc:	00bfffc4 	movi	r2,-1
    46e0:	18c01014 	ori	r3,r3,64
    46e4:	88c0030d 	sth	r3,12(r17)
    46e8:	003fdf06 	br	4668 <__alt_data_end+0xfffbb288>
    46ec:	0005883a 	mov	r2,zero
    46f0:	003fec06 	br	46a4 <__alt_data_end+0xfffbb2c4>
    46f4:	88801415 	stw	r2,80(r17)
    46f8:	003fd206 	br	4644 <__alt_data_end+0xfffbb264>
    46fc:	28c00f17 	ldw	r3,60(r5)
    4700:	00ffb316 	blt	zero,r3,45d0 <__alt_data_end+0xfffbb1f0>
    4704:	003fd706 	br	4664 <__alt_data_end+0xfffbb284>
    4708:	89400717 	ldw	r5,28(r17)
    470c:	000d883a 	mov	r6,zero
    4710:	01c00044 	movi	r7,1
    4714:	9809883a 	mov	r4,r19
    4718:	403ee83a 	callr	r8
    471c:	100d883a 	mov	r6,r2
    4720:	00bfffc4 	movi	r2,-1
    4724:	30801426 	beq	r6,r2,4778 <__sflush_r+0x1e4>
    4728:	8880030b 	ldhu	r2,12(r17)
    472c:	8a000a17 	ldw	r8,40(r17)
    4730:	003fae06 	br	45ec <__alt_data_end+0xfffbb20c>
    4734:	98c00017 	ldw	r3,0(r19)
    4738:	183fba26 	beq	r3,zero,4624 <__alt_data_end+0xfffbb244>
    473c:	01000744 	movi	r4,29
    4740:	19000626 	beq	r3,r4,475c <__sflush_r+0x1c8>
    4744:	01000584 	movi	r4,22
    4748:	19000426 	beq	r3,r4,475c <__sflush_r+0x1c8>
    474c:	88c0030b 	ldhu	r3,12(r17)
    4750:	18c01014 	ori	r3,r3,64
    4754:	88c0030d 	sth	r3,12(r17)
    4758:	003fc306 	br	4668 <__alt_data_end+0xfffbb288>
    475c:	8880030b 	ldhu	r2,12(r17)
    4760:	88c00417 	ldw	r3,16(r17)
    4764:	88000115 	stw	zero,4(r17)
    4768:	10bdffcc 	andi	r2,r2,63487
    476c:	8880030d 	sth	r2,12(r17)
    4770:	88c00015 	stw	r3,0(r17)
    4774:	003fb306 	br	4644 <__alt_data_end+0xfffbb264>
    4778:	98800017 	ldw	r2,0(r19)
    477c:	103fea26 	beq	r2,zero,4728 <__alt_data_end+0xfffbb348>
    4780:	00c00744 	movi	r3,29
    4784:	10c00226 	beq	r2,r3,4790 <__sflush_r+0x1fc>
    4788:	00c00584 	movi	r3,22
    478c:	10c0031e 	bne	r2,r3,479c <__sflush_r+0x208>
    4790:	9c000015 	stw	r16,0(r19)
    4794:	0005883a 	mov	r2,zero
    4798:	003fb306 	br	4668 <__alt_data_end+0xfffbb288>
    479c:	88c0030b 	ldhu	r3,12(r17)
    47a0:	3005883a 	mov	r2,r6
    47a4:	18c01014 	ori	r3,r3,64
    47a8:	88c0030d 	sth	r3,12(r17)
    47ac:	003fae06 	br	4668 <__alt_data_end+0xfffbb288>

000047b0 <_fflush_r>:
    47b0:	defffd04 	addi	sp,sp,-12
    47b4:	dc000115 	stw	r16,4(sp)
    47b8:	dfc00215 	stw	ra,8(sp)
    47bc:	2021883a 	mov	r16,r4
    47c0:	20000226 	beq	r4,zero,47cc <_fflush_r+0x1c>
    47c4:	20800e17 	ldw	r2,56(r4)
    47c8:	10000c26 	beq	r2,zero,47fc <_fflush_r+0x4c>
    47cc:	2880030f 	ldh	r2,12(r5)
    47d0:	1000051e 	bne	r2,zero,47e8 <_fflush_r+0x38>
    47d4:	0005883a 	mov	r2,zero
    47d8:	dfc00217 	ldw	ra,8(sp)
    47dc:	dc000117 	ldw	r16,4(sp)
    47e0:	dec00304 	addi	sp,sp,12
    47e4:	f800283a 	ret
    47e8:	8009883a 	mov	r4,r16
    47ec:	dfc00217 	ldw	ra,8(sp)
    47f0:	dc000117 	ldw	r16,4(sp)
    47f4:	dec00304 	addi	sp,sp,12
    47f8:	00045941 	jmpi	4594 <__sflush_r>
    47fc:	d9400015 	stw	r5,0(sp)
    4800:	0004b9c0 	call	4b9c <__sinit>
    4804:	d9400017 	ldw	r5,0(sp)
    4808:	003ff006 	br	47cc <__alt_data_end+0xfffbb3ec>

0000480c <fflush>:
    480c:	20000526 	beq	r4,zero,4824 <fflush+0x18>
    4810:	00800074 	movhi	r2,1
    4814:	1088f904 	addi	r2,r2,9188
    4818:	200b883a 	mov	r5,r4
    481c:	11000017 	ldw	r4,0(r2)
    4820:	00047b01 	jmpi	47b0 <_fflush_r>
    4824:	00800074 	movhi	r2,1
    4828:	1088f804 	addi	r2,r2,9184
    482c:	11000017 	ldw	r4,0(r2)
    4830:	01400034 	movhi	r5,0
    4834:	2951ec04 	addi	r5,r5,18352
    4838:	00055ac1 	jmpi	55ac <_fwalk_reent>

0000483c <__fp_unlock>:
    483c:	0005883a 	mov	r2,zero
    4840:	f800283a 	ret

00004844 <_cleanup_r>:
    4844:	01400074 	movhi	r5,1
    4848:	29668204 	addi	r5,r5,-26104
    484c:	00055ac1 	jmpi	55ac <_fwalk_reent>

00004850 <__sinit.part.1>:
    4850:	defff704 	addi	sp,sp,-36
    4854:	00c00034 	movhi	r3,0
    4858:	dfc00815 	stw	ra,32(sp)
    485c:	ddc00715 	stw	r23,28(sp)
    4860:	dd800615 	stw	r22,24(sp)
    4864:	dd400515 	stw	r21,20(sp)
    4868:	dd000415 	stw	r20,16(sp)
    486c:	dcc00315 	stw	r19,12(sp)
    4870:	dc800215 	stw	r18,8(sp)
    4874:	dc400115 	stw	r17,4(sp)
    4878:	dc000015 	stw	r16,0(sp)
    487c:	18d21104 	addi	r3,r3,18500
    4880:	24000117 	ldw	r16,4(r4)
    4884:	20c00f15 	stw	r3,60(r4)
    4888:	2080bb04 	addi	r2,r4,748
    488c:	00c000c4 	movi	r3,3
    4890:	20c0b915 	stw	r3,740(r4)
    4894:	2080ba15 	stw	r2,744(r4)
    4898:	2000b815 	stw	zero,736(r4)
    489c:	05c00204 	movi	r23,8
    48a0:	00800104 	movi	r2,4
    48a4:	2025883a 	mov	r18,r4
    48a8:	b80d883a 	mov	r6,r23
    48ac:	81001704 	addi	r4,r16,92
    48b0:	000b883a 	mov	r5,zero
    48b4:	80000015 	stw	zero,0(r16)
    48b8:	80000115 	stw	zero,4(r16)
    48bc:	80000215 	stw	zero,8(r16)
    48c0:	8080030d 	sth	r2,12(r16)
    48c4:	80001915 	stw	zero,100(r16)
    48c8:	8000038d 	sth	zero,14(r16)
    48cc:	80000415 	stw	zero,16(r16)
    48d0:	80000515 	stw	zero,20(r16)
    48d4:	80000615 	stw	zero,24(r16)
    48d8:	000649c0 	call	649c <memset>
    48dc:	05800034 	movhi	r22,0
    48e0:	94400217 	ldw	r17,8(r18)
    48e4:	05400034 	movhi	r21,0
    48e8:	05000034 	movhi	r20,0
    48ec:	04c00034 	movhi	r19,0
    48f0:	b59f8404 	addi	r22,r22,32272
    48f4:	ad5f9b04 	addi	r21,r21,32364
    48f8:	a51fba04 	addi	r20,r20,32488
    48fc:	9cdfd104 	addi	r19,r19,32580
    4900:	85800815 	stw	r22,32(r16)
    4904:	85400915 	stw	r21,36(r16)
    4908:	85000a15 	stw	r20,40(r16)
    490c:	84c00b15 	stw	r19,44(r16)
    4910:	84000715 	stw	r16,28(r16)
    4914:	00800284 	movi	r2,10
    4918:	8880030d 	sth	r2,12(r17)
    491c:	00800044 	movi	r2,1
    4920:	b80d883a 	mov	r6,r23
    4924:	89001704 	addi	r4,r17,92
    4928:	000b883a 	mov	r5,zero
    492c:	88000015 	stw	zero,0(r17)
    4930:	88000115 	stw	zero,4(r17)
    4934:	88000215 	stw	zero,8(r17)
    4938:	88001915 	stw	zero,100(r17)
    493c:	8880038d 	sth	r2,14(r17)
    4940:	88000415 	stw	zero,16(r17)
    4944:	88000515 	stw	zero,20(r17)
    4948:	88000615 	stw	zero,24(r17)
    494c:	000649c0 	call	649c <memset>
    4950:	94000317 	ldw	r16,12(r18)
    4954:	00800484 	movi	r2,18
    4958:	8c400715 	stw	r17,28(r17)
    495c:	8d800815 	stw	r22,32(r17)
    4960:	8d400915 	stw	r21,36(r17)
    4964:	8d000a15 	stw	r20,40(r17)
    4968:	8cc00b15 	stw	r19,44(r17)
    496c:	8080030d 	sth	r2,12(r16)
    4970:	00800084 	movi	r2,2
    4974:	80000015 	stw	zero,0(r16)
    4978:	80000115 	stw	zero,4(r16)
    497c:	80000215 	stw	zero,8(r16)
    4980:	80001915 	stw	zero,100(r16)
    4984:	8080038d 	sth	r2,14(r16)
    4988:	80000415 	stw	zero,16(r16)
    498c:	80000515 	stw	zero,20(r16)
    4990:	80000615 	stw	zero,24(r16)
    4994:	b80d883a 	mov	r6,r23
    4998:	000b883a 	mov	r5,zero
    499c:	81001704 	addi	r4,r16,92
    49a0:	000649c0 	call	649c <memset>
    49a4:	00800044 	movi	r2,1
    49a8:	84000715 	stw	r16,28(r16)
    49ac:	85800815 	stw	r22,32(r16)
    49b0:	85400915 	stw	r21,36(r16)
    49b4:	85000a15 	stw	r20,40(r16)
    49b8:	84c00b15 	stw	r19,44(r16)
    49bc:	90800e15 	stw	r2,56(r18)
    49c0:	dfc00817 	ldw	ra,32(sp)
    49c4:	ddc00717 	ldw	r23,28(sp)
    49c8:	dd800617 	ldw	r22,24(sp)
    49cc:	dd400517 	ldw	r21,20(sp)
    49d0:	dd000417 	ldw	r20,16(sp)
    49d4:	dcc00317 	ldw	r19,12(sp)
    49d8:	dc800217 	ldw	r18,8(sp)
    49dc:	dc400117 	ldw	r17,4(sp)
    49e0:	dc000017 	ldw	r16,0(sp)
    49e4:	dec00904 	addi	sp,sp,36
    49e8:	f800283a 	ret

000049ec <__fp_lock>:
    49ec:	0005883a 	mov	r2,zero
    49f0:	f800283a 	ret

000049f4 <__sfmoreglue>:
    49f4:	defffc04 	addi	sp,sp,-16
    49f8:	dc800215 	stw	r18,8(sp)
    49fc:	2825883a 	mov	r18,r5
    4a00:	dc000015 	stw	r16,0(sp)
    4a04:	01401a04 	movi	r5,104
    4a08:	2021883a 	mov	r16,r4
    4a0c:	913fffc4 	addi	r4,r18,-1
    4a10:	dfc00315 	stw	ra,12(sp)
    4a14:	dc400115 	stw	r17,4(sp)
    4a18:	000ade00 	call	ade0 <__mulsi3>
    4a1c:	8009883a 	mov	r4,r16
    4a20:	11401d04 	addi	r5,r2,116
    4a24:	1023883a 	mov	r17,r2
    4a28:	00059080 	call	5908 <_malloc_r>
    4a2c:	1021883a 	mov	r16,r2
    4a30:	10000726 	beq	r2,zero,4a50 <__sfmoreglue+0x5c>
    4a34:	11000304 	addi	r4,r2,12
    4a38:	10000015 	stw	zero,0(r2)
    4a3c:	14800115 	stw	r18,4(r2)
    4a40:	11000215 	stw	r4,8(r2)
    4a44:	89801a04 	addi	r6,r17,104
    4a48:	000b883a 	mov	r5,zero
    4a4c:	000649c0 	call	649c <memset>
    4a50:	8005883a 	mov	r2,r16
    4a54:	dfc00317 	ldw	ra,12(sp)
    4a58:	dc800217 	ldw	r18,8(sp)
    4a5c:	dc400117 	ldw	r17,4(sp)
    4a60:	dc000017 	ldw	r16,0(sp)
    4a64:	dec00404 	addi	sp,sp,16
    4a68:	f800283a 	ret

00004a6c <__sfp>:
    4a6c:	defffb04 	addi	sp,sp,-20
    4a70:	dc000015 	stw	r16,0(sp)
    4a74:	04000074 	movhi	r16,1
    4a78:	8408f804 	addi	r16,r16,9184
    4a7c:	dcc00315 	stw	r19,12(sp)
    4a80:	2027883a 	mov	r19,r4
    4a84:	81000017 	ldw	r4,0(r16)
    4a88:	dfc00415 	stw	ra,16(sp)
    4a8c:	dc800215 	stw	r18,8(sp)
    4a90:	20800e17 	ldw	r2,56(r4)
    4a94:	dc400115 	stw	r17,4(sp)
    4a98:	1000021e 	bne	r2,zero,4aa4 <__sfp+0x38>
    4a9c:	00048500 	call	4850 <__sinit.part.1>
    4aa0:	81000017 	ldw	r4,0(r16)
    4aa4:	2480b804 	addi	r18,r4,736
    4aa8:	047fffc4 	movi	r17,-1
    4aac:	91000117 	ldw	r4,4(r18)
    4ab0:	94000217 	ldw	r16,8(r18)
    4ab4:	213fffc4 	addi	r4,r4,-1
    4ab8:	20000a16 	blt	r4,zero,4ae4 <__sfp+0x78>
    4abc:	8080030f 	ldh	r2,12(r16)
    4ac0:	10000c26 	beq	r2,zero,4af4 <__sfp+0x88>
    4ac4:	80c01d04 	addi	r3,r16,116
    4ac8:	00000206 	br	4ad4 <__sfp+0x68>
    4acc:	18bfe60f 	ldh	r2,-104(r3)
    4ad0:	10000826 	beq	r2,zero,4af4 <__sfp+0x88>
    4ad4:	213fffc4 	addi	r4,r4,-1
    4ad8:	1c3ffd04 	addi	r16,r3,-12
    4adc:	18c01a04 	addi	r3,r3,104
    4ae0:	247ffa1e 	bne	r4,r17,4acc <__alt_data_end+0xfffbb6ec>
    4ae4:	90800017 	ldw	r2,0(r18)
    4ae8:	10001d26 	beq	r2,zero,4b60 <__sfp+0xf4>
    4aec:	1025883a 	mov	r18,r2
    4af0:	003fee06 	br	4aac <__alt_data_end+0xfffbb6cc>
    4af4:	00bfffc4 	movi	r2,-1
    4af8:	8080038d 	sth	r2,14(r16)
    4afc:	00800044 	movi	r2,1
    4b00:	8080030d 	sth	r2,12(r16)
    4b04:	80001915 	stw	zero,100(r16)
    4b08:	80000015 	stw	zero,0(r16)
    4b0c:	80000215 	stw	zero,8(r16)
    4b10:	80000115 	stw	zero,4(r16)
    4b14:	80000415 	stw	zero,16(r16)
    4b18:	80000515 	stw	zero,20(r16)
    4b1c:	80000615 	stw	zero,24(r16)
    4b20:	01800204 	movi	r6,8
    4b24:	000b883a 	mov	r5,zero
    4b28:	81001704 	addi	r4,r16,92
    4b2c:	000649c0 	call	649c <memset>
    4b30:	8005883a 	mov	r2,r16
    4b34:	80000c15 	stw	zero,48(r16)
    4b38:	80000d15 	stw	zero,52(r16)
    4b3c:	80001115 	stw	zero,68(r16)
    4b40:	80001215 	stw	zero,72(r16)
    4b44:	dfc00417 	ldw	ra,16(sp)
    4b48:	dcc00317 	ldw	r19,12(sp)
    4b4c:	dc800217 	ldw	r18,8(sp)
    4b50:	dc400117 	ldw	r17,4(sp)
    4b54:	dc000017 	ldw	r16,0(sp)
    4b58:	dec00504 	addi	sp,sp,20
    4b5c:	f800283a 	ret
    4b60:	01400104 	movi	r5,4
    4b64:	9809883a 	mov	r4,r19
    4b68:	00049f40 	call	49f4 <__sfmoreglue>
    4b6c:	90800015 	stw	r2,0(r18)
    4b70:	103fde1e 	bne	r2,zero,4aec <__alt_data_end+0xfffbb70c>
    4b74:	00800304 	movi	r2,12
    4b78:	98800015 	stw	r2,0(r19)
    4b7c:	0005883a 	mov	r2,zero
    4b80:	003ff006 	br	4b44 <__alt_data_end+0xfffbb764>

00004b84 <_cleanup>:
    4b84:	00800074 	movhi	r2,1
    4b88:	1088f804 	addi	r2,r2,9184
    4b8c:	11000017 	ldw	r4,0(r2)
    4b90:	01400074 	movhi	r5,1
    4b94:	29668204 	addi	r5,r5,-26104
    4b98:	00055ac1 	jmpi	55ac <_fwalk_reent>

00004b9c <__sinit>:
    4b9c:	20800e17 	ldw	r2,56(r4)
    4ba0:	10000126 	beq	r2,zero,4ba8 <__sinit+0xc>
    4ba4:	f800283a 	ret
    4ba8:	00048501 	jmpi	4850 <__sinit.part.1>

00004bac <__sfp_lock_acquire>:
    4bac:	f800283a 	ret

00004bb0 <__sfp_lock_release>:
    4bb0:	f800283a 	ret

00004bb4 <__sinit_lock_acquire>:
    4bb4:	f800283a 	ret

00004bb8 <__sinit_lock_release>:
    4bb8:	f800283a 	ret

00004bbc <__fp_lock_all>:
    4bbc:	00800074 	movhi	r2,1
    4bc0:	1088f904 	addi	r2,r2,9188
    4bc4:	11000017 	ldw	r4,0(r2)
    4bc8:	01400034 	movhi	r5,0
    4bcc:	29527b04 	addi	r5,r5,18924
    4bd0:	00054e81 	jmpi	54e8 <_fwalk>

00004bd4 <__fp_unlock_all>:
    4bd4:	00800074 	movhi	r2,1
    4bd8:	1088f904 	addi	r2,r2,9188
    4bdc:	11000017 	ldw	r4,0(r2)
    4be0:	01400034 	movhi	r5,0
    4be4:	29520f04 	addi	r5,r5,18492
    4be8:	00054e81 	jmpi	54e8 <_fwalk>

00004bec <_malloc_trim_r>:
    4bec:	defffb04 	addi	sp,sp,-20
    4bf0:	dcc00315 	stw	r19,12(sp)
    4bf4:	04c00074 	movhi	r19,1
    4bf8:	dc800215 	stw	r18,8(sp)
    4bfc:	dc400115 	stw	r17,4(sp)
    4c00:	dc000015 	stw	r16,0(sp)
    4c04:	dfc00415 	stw	ra,16(sp)
    4c08:	2821883a 	mov	r16,r5
    4c0c:	9cc37404 	addi	r19,r19,3536
    4c10:	2025883a 	mov	r18,r4
    4c14:	000dc980 	call	dc98 <__malloc_lock>
    4c18:	98800217 	ldw	r2,8(r19)
    4c1c:	14400117 	ldw	r17,4(r2)
    4c20:	00bfff04 	movi	r2,-4
    4c24:	88a2703a 	and	r17,r17,r2
    4c28:	8c21c83a 	sub	r16,r17,r16
    4c2c:	8403fbc4 	addi	r16,r16,4079
    4c30:	8020d33a 	srli	r16,r16,12
    4c34:	0083ffc4 	movi	r2,4095
    4c38:	843fffc4 	addi	r16,r16,-1
    4c3c:	8020933a 	slli	r16,r16,12
    4c40:	1400060e 	bge	r2,r16,4c5c <_malloc_trim_r+0x70>
    4c44:	000b883a 	mov	r5,zero
    4c48:	9009883a 	mov	r4,r18
    4c4c:	0007dbc0 	call	7dbc <_sbrk_r>
    4c50:	98c00217 	ldw	r3,8(r19)
    4c54:	1c47883a 	add	r3,r3,r17
    4c58:	10c00a26 	beq	r2,r3,4c84 <_malloc_trim_r+0x98>
    4c5c:	9009883a 	mov	r4,r18
    4c60:	000dcbc0 	call	dcbc <__malloc_unlock>
    4c64:	0005883a 	mov	r2,zero
    4c68:	dfc00417 	ldw	ra,16(sp)
    4c6c:	dcc00317 	ldw	r19,12(sp)
    4c70:	dc800217 	ldw	r18,8(sp)
    4c74:	dc400117 	ldw	r17,4(sp)
    4c78:	dc000017 	ldw	r16,0(sp)
    4c7c:	dec00504 	addi	sp,sp,20
    4c80:	f800283a 	ret
    4c84:	040bc83a 	sub	r5,zero,r16
    4c88:	9009883a 	mov	r4,r18
    4c8c:	0007dbc0 	call	7dbc <_sbrk_r>
    4c90:	00ffffc4 	movi	r3,-1
    4c94:	10c00d26 	beq	r2,r3,4ccc <_malloc_trim_r+0xe0>
    4c98:	00c00074 	movhi	r3,1
    4c9c:	18cfd104 	addi	r3,r3,16196
    4ca0:	18800017 	ldw	r2,0(r3)
    4ca4:	99000217 	ldw	r4,8(r19)
    4ca8:	8c23c83a 	sub	r17,r17,r16
    4cac:	8c400054 	ori	r17,r17,1
    4cb0:	1421c83a 	sub	r16,r2,r16
    4cb4:	24400115 	stw	r17,4(r4)
    4cb8:	9009883a 	mov	r4,r18
    4cbc:	1c000015 	stw	r16,0(r3)
    4cc0:	000dcbc0 	call	dcbc <__malloc_unlock>
    4cc4:	00800044 	movi	r2,1
    4cc8:	003fe706 	br	4c68 <__alt_data_end+0xfffbb888>
    4ccc:	000b883a 	mov	r5,zero
    4cd0:	9009883a 	mov	r4,r18
    4cd4:	0007dbc0 	call	7dbc <_sbrk_r>
    4cd8:	99000217 	ldw	r4,8(r19)
    4cdc:	014003c4 	movi	r5,15
    4ce0:	1107c83a 	sub	r3,r2,r4
    4ce4:	28ffdd0e 	bge	r5,r3,4c5c <__alt_data_end+0xfffbb87c>
    4ce8:	01400074 	movhi	r5,1
    4cec:	2948fb04 	addi	r5,r5,9196
    4cf0:	29400017 	ldw	r5,0(r5)
    4cf4:	18c00054 	ori	r3,r3,1
    4cf8:	20c00115 	stw	r3,4(r4)
    4cfc:	00c00074 	movhi	r3,1
    4d00:	1145c83a 	sub	r2,r2,r5
    4d04:	18cfd104 	addi	r3,r3,16196
    4d08:	18800015 	stw	r2,0(r3)
    4d0c:	003fd306 	br	4c5c <__alt_data_end+0xfffbb87c>

00004d10 <_free_r>:
    4d10:	28004126 	beq	r5,zero,4e18 <_free_r+0x108>
    4d14:	defffd04 	addi	sp,sp,-12
    4d18:	dc400115 	stw	r17,4(sp)
    4d1c:	dc000015 	stw	r16,0(sp)
    4d20:	2023883a 	mov	r17,r4
    4d24:	2821883a 	mov	r16,r5
    4d28:	dfc00215 	stw	ra,8(sp)
    4d2c:	000dc980 	call	dc98 <__malloc_lock>
    4d30:	81ffff17 	ldw	r7,-4(r16)
    4d34:	00bfff84 	movi	r2,-2
    4d38:	01000074 	movhi	r4,1
    4d3c:	81bffe04 	addi	r6,r16,-8
    4d40:	3884703a 	and	r2,r7,r2
    4d44:	21037404 	addi	r4,r4,3536
    4d48:	308b883a 	add	r5,r6,r2
    4d4c:	2a400117 	ldw	r9,4(r5)
    4d50:	22000217 	ldw	r8,8(r4)
    4d54:	00ffff04 	movi	r3,-4
    4d58:	48c6703a 	and	r3,r9,r3
    4d5c:	2a005726 	beq	r5,r8,4ebc <_free_r+0x1ac>
    4d60:	28c00115 	stw	r3,4(r5)
    4d64:	39c0004c 	andi	r7,r7,1
    4d68:	3800091e 	bne	r7,zero,4d90 <_free_r+0x80>
    4d6c:	823ffe17 	ldw	r8,-8(r16)
    4d70:	22400204 	addi	r9,r4,8
    4d74:	320dc83a 	sub	r6,r6,r8
    4d78:	31c00217 	ldw	r7,8(r6)
    4d7c:	1205883a 	add	r2,r2,r8
    4d80:	3a406526 	beq	r7,r9,4f18 <_free_r+0x208>
    4d84:	32000317 	ldw	r8,12(r6)
    4d88:	3a000315 	stw	r8,12(r7)
    4d8c:	41c00215 	stw	r7,8(r8)
    4d90:	28cf883a 	add	r7,r5,r3
    4d94:	39c00117 	ldw	r7,4(r7)
    4d98:	39c0004c 	andi	r7,r7,1
    4d9c:	38003a26 	beq	r7,zero,4e88 <_free_r+0x178>
    4da0:	10c00054 	ori	r3,r2,1
    4da4:	30c00115 	stw	r3,4(r6)
    4da8:	3087883a 	add	r3,r6,r2
    4dac:	18800015 	stw	r2,0(r3)
    4db0:	00c07fc4 	movi	r3,511
    4db4:	18801936 	bltu	r3,r2,4e1c <_free_r+0x10c>
    4db8:	1004d0fa 	srli	r2,r2,3
    4dbc:	01c00044 	movi	r7,1
    4dc0:	21400117 	ldw	r5,4(r4)
    4dc4:	10c00044 	addi	r3,r2,1
    4dc8:	18c7883a 	add	r3,r3,r3
    4dcc:	1005d0ba 	srai	r2,r2,2
    4dd0:	18c7883a 	add	r3,r3,r3
    4dd4:	18c7883a 	add	r3,r3,r3
    4dd8:	1907883a 	add	r3,r3,r4
    4ddc:	3884983a 	sll	r2,r7,r2
    4de0:	19c00017 	ldw	r7,0(r3)
    4de4:	1a3ffe04 	addi	r8,r3,-8
    4de8:	1144b03a 	or	r2,r2,r5
    4dec:	32000315 	stw	r8,12(r6)
    4df0:	31c00215 	stw	r7,8(r6)
    4df4:	20800115 	stw	r2,4(r4)
    4df8:	19800015 	stw	r6,0(r3)
    4dfc:	39800315 	stw	r6,12(r7)
    4e00:	8809883a 	mov	r4,r17
    4e04:	dfc00217 	ldw	ra,8(sp)
    4e08:	dc400117 	ldw	r17,4(sp)
    4e0c:	dc000017 	ldw	r16,0(sp)
    4e10:	dec00304 	addi	sp,sp,12
    4e14:	000dcbc1 	jmpi	dcbc <__malloc_unlock>
    4e18:	f800283a 	ret
    4e1c:	100ad27a 	srli	r5,r2,9
    4e20:	00c00104 	movi	r3,4
    4e24:	19404a36 	bltu	r3,r5,4f50 <_free_r+0x240>
    4e28:	100ad1ba 	srli	r5,r2,6
    4e2c:	28c00e44 	addi	r3,r5,57
    4e30:	18c7883a 	add	r3,r3,r3
    4e34:	29400e04 	addi	r5,r5,56
    4e38:	18c7883a 	add	r3,r3,r3
    4e3c:	18c7883a 	add	r3,r3,r3
    4e40:	1909883a 	add	r4,r3,r4
    4e44:	20c00017 	ldw	r3,0(r4)
    4e48:	01c00074 	movhi	r7,1
    4e4c:	213ffe04 	addi	r4,r4,-8
    4e50:	39c37404 	addi	r7,r7,3536
    4e54:	20c04426 	beq	r4,r3,4f68 <_free_r+0x258>
    4e58:	01ffff04 	movi	r7,-4
    4e5c:	19400117 	ldw	r5,4(r3)
    4e60:	29ca703a 	and	r5,r5,r7
    4e64:	1140022e 	bgeu	r2,r5,4e70 <_free_r+0x160>
    4e68:	18c00217 	ldw	r3,8(r3)
    4e6c:	20fffb1e 	bne	r4,r3,4e5c <__alt_data_end+0xfffbba7c>
    4e70:	19000317 	ldw	r4,12(r3)
    4e74:	31000315 	stw	r4,12(r6)
    4e78:	30c00215 	stw	r3,8(r6)
    4e7c:	21800215 	stw	r6,8(r4)
    4e80:	19800315 	stw	r6,12(r3)
    4e84:	003fde06 	br	4e00 <__alt_data_end+0xfffbba20>
    4e88:	29c00217 	ldw	r7,8(r5)
    4e8c:	10c5883a 	add	r2,r2,r3
    4e90:	00c00074 	movhi	r3,1
    4e94:	18c37604 	addi	r3,r3,3544
    4e98:	38c03b26 	beq	r7,r3,4f88 <_free_r+0x278>
    4e9c:	2a000317 	ldw	r8,12(r5)
    4ea0:	11400054 	ori	r5,r2,1
    4ea4:	3087883a 	add	r3,r6,r2
    4ea8:	3a000315 	stw	r8,12(r7)
    4eac:	41c00215 	stw	r7,8(r8)
    4eb0:	31400115 	stw	r5,4(r6)
    4eb4:	18800015 	stw	r2,0(r3)
    4eb8:	003fbd06 	br	4db0 <__alt_data_end+0xfffbb9d0>
    4ebc:	39c0004c 	andi	r7,r7,1
    4ec0:	10c5883a 	add	r2,r2,r3
    4ec4:	3800071e 	bne	r7,zero,4ee4 <_free_r+0x1d4>
    4ec8:	81fffe17 	ldw	r7,-8(r16)
    4ecc:	31cdc83a 	sub	r6,r6,r7
    4ed0:	30c00317 	ldw	r3,12(r6)
    4ed4:	31400217 	ldw	r5,8(r6)
    4ed8:	11c5883a 	add	r2,r2,r7
    4edc:	28c00315 	stw	r3,12(r5)
    4ee0:	19400215 	stw	r5,8(r3)
    4ee4:	10c00054 	ori	r3,r2,1
    4ee8:	30c00115 	stw	r3,4(r6)
    4eec:	00c00074 	movhi	r3,1
    4ef0:	18c8fc04 	addi	r3,r3,9200
    4ef4:	18c00017 	ldw	r3,0(r3)
    4ef8:	21800215 	stw	r6,8(r4)
    4efc:	10ffc036 	bltu	r2,r3,4e00 <__alt_data_end+0xfffbba20>
    4f00:	00800074 	movhi	r2,1
    4f04:	108fc804 	addi	r2,r2,16160
    4f08:	11400017 	ldw	r5,0(r2)
    4f0c:	8809883a 	mov	r4,r17
    4f10:	0004bec0 	call	4bec <_malloc_trim_r>
    4f14:	003fba06 	br	4e00 <__alt_data_end+0xfffbba20>
    4f18:	28c9883a 	add	r4,r5,r3
    4f1c:	21000117 	ldw	r4,4(r4)
    4f20:	2100004c 	andi	r4,r4,1
    4f24:	2000391e 	bne	r4,zero,500c <_free_r+0x2fc>
    4f28:	29c00217 	ldw	r7,8(r5)
    4f2c:	29000317 	ldw	r4,12(r5)
    4f30:	1885883a 	add	r2,r3,r2
    4f34:	10c00054 	ori	r3,r2,1
    4f38:	39000315 	stw	r4,12(r7)
    4f3c:	21c00215 	stw	r7,8(r4)
    4f40:	30c00115 	stw	r3,4(r6)
    4f44:	308d883a 	add	r6,r6,r2
    4f48:	30800015 	stw	r2,0(r6)
    4f4c:	003fac06 	br	4e00 <__alt_data_end+0xfffbba20>
    4f50:	00c00504 	movi	r3,20
    4f54:	19401536 	bltu	r3,r5,4fac <_free_r+0x29c>
    4f58:	28c01704 	addi	r3,r5,92
    4f5c:	18c7883a 	add	r3,r3,r3
    4f60:	294016c4 	addi	r5,r5,91
    4f64:	003fb406 	br	4e38 <__alt_data_end+0xfffbba58>
    4f68:	280bd0ba 	srai	r5,r5,2
    4f6c:	00c00044 	movi	r3,1
    4f70:	38800117 	ldw	r2,4(r7)
    4f74:	194a983a 	sll	r5,r3,r5
    4f78:	2007883a 	mov	r3,r4
    4f7c:	2884b03a 	or	r2,r5,r2
    4f80:	38800115 	stw	r2,4(r7)
    4f84:	003fbb06 	br	4e74 <__alt_data_end+0xfffbba94>
    4f88:	21800515 	stw	r6,20(r4)
    4f8c:	21800415 	stw	r6,16(r4)
    4f90:	10c00054 	ori	r3,r2,1
    4f94:	31c00315 	stw	r7,12(r6)
    4f98:	31c00215 	stw	r7,8(r6)
    4f9c:	30c00115 	stw	r3,4(r6)
    4fa0:	308d883a 	add	r6,r6,r2
    4fa4:	30800015 	stw	r2,0(r6)
    4fa8:	003f9506 	br	4e00 <__alt_data_end+0xfffbba20>
    4fac:	00c01504 	movi	r3,84
    4fb0:	19400536 	bltu	r3,r5,4fc8 <_free_r+0x2b8>
    4fb4:	100ad33a 	srli	r5,r2,12
    4fb8:	28c01bc4 	addi	r3,r5,111
    4fbc:	18c7883a 	add	r3,r3,r3
    4fc0:	29401b84 	addi	r5,r5,110
    4fc4:	003f9c06 	br	4e38 <__alt_data_end+0xfffbba58>
    4fc8:	00c05504 	movi	r3,340
    4fcc:	19400536 	bltu	r3,r5,4fe4 <_free_r+0x2d4>
    4fd0:	100ad3fa 	srli	r5,r2,15
    4fd4:	28c01e04 	addi	r3,r5,120
    4fd8:	18c7883a 	add	r3,r3,r3
    4fdc:	29401dc4 	addi	r5,r5,119
    4fe0:	003f9506 	br	4e38 <__alt_data_end+0xfffbba58>
    4fe4:	00c15504 	movi	r3,1364
    4fe8:	19400536 	bltu	r3,r5,5000 <_free_r+0x2f0>
    4fec:	100ad4ba 	srli	r5,r2,18
    4ff0:	28c01f44 	addi	r3,r5,125
    4ff4:	18c7883a 	add	r3,r3,r3
    4ff8:	29401f04 	addi	r5,r5,124
    4ffc:	003f8e06 	br	4e38 <__alt_data_end+0xfffbba58>
    5000:	00c03f84 	movi	r3,254
    5004:	01401f84 	movi	r5,126
    5008:	003f8b06 	br	4e38 <__alt_data_end+0xfffbba58>
    500c:	10c00054 	ori	r3,r2,1
    5010:	30c00115 	stw	r3,4(r6)
    5014:	308d883a 	add	r6,r6,r2
    5018:	30800015 	stw	r2,0(r6)
    501c:	003f7806 	br	4e00 <__alt_data_end+0xfffbba20>

00005020 <__sfvwrite_r>:
    5020:	30800217 	ldw	r2,8(r6)
    5024:	10006726 	beq	r2,zero,51c4 <__sfvwrite_r+0x1a4>
    5028:	28c0030b 	ldhu	r3,12(r5)
    502c:	defff404 	addi	sp,sp,-48
    5030:	dd400715 	stw	r21,28(sp)
    5034:	dd000615 	stw	r20,24(sp)
    5038:	dc000215 	stw	r16,8(sp)
    503c:	dfc00b15 	stw	ra,44(sp)
    5040:	df000a15 	stw	fp,40(sp)
    5044:	ddc00915 	stw	r23,36(sp)
    5048:	dd800815 	stw	r22,32(sp)
    504c:	dcc00515 	stw	r19,20(sp)
    5050:	dc800415 	stw	r18,16(sp)
    5054:	dc400315 	stw	r17,12(sp)
    5058:	1880020c 	andi	r2,r3,8
    505c:	2821883a 	mov	r16,r5
    5060:	202b883a 	mov	r21,r4
    5064:	3029883a 	mov	r20,r6
    5068:	10002726 	beq	r2,zero,5108 <__sfvwrite_r+0xe8>
    506c:	28800417 	ldw	r2,16(r5)
    5070:	10002526 	beq	r2,zero,5108 <__sfvwrite_r+0xe8>
    5074:	1880008c 	andi	r2,r3,2
    5078:	a4400017 	ldw	r17,0(r20)
    507c:	10002a26 	beq	r2,zero,5128 <__sfvwrite_r+0x108>
    5080:	05a00034 	movhi	r22,32768
    5084:	0027883a 	mov	r19,zero
    5088:	0025883a 	mov	r18,zero
    508c:	b5bf0004 	addi	r22,r22,-1024
    5090:	980d883a 	mov	r6,r19
    5094:	a809883a 	mov	r4,r21
    5098:	90004626 	beq	r18,zero,51b4 <__sfvwrite_r+0x194>
    509c:	900f883a 	mov	r7,r18
    50a0:	b480022e 	bgeu	r22,r18,50ac <__sfvwrite_r+0x8c>
    50a4:	01e00034 	movhi	r7,32768
    50a8:	39ff0004 	addi	r7,r7,-1024
    50ac:	80800917 	ldw	r2,36(r16)
    50b0:	81400717 	ldw	r5,28(r16)
    50b4:	103ee83a 	callr	r2
    50b8:	00805a0e 	bge	zero,r2,5224 <__sfvwrite_r+0x204>
    50bc:	a0c00217 	ldw	r3,8(r20)
    50c0:	98a7883a 	add	r19,r19,r2
    50c4:	90a5c83a 	sub	r18,r18,r2
    50c8:	1885c83a 	sub	r2,r3,r2
    50cc:	a0800215 	stw	r2,8(r20)
    50d0:	103fef1e 	bne	r2,zero,5090 <__alt_data_end+0xfffbbcb0>
    50d4:	0005883a 	mov	r2,zero
    50d8:	dfc00b17 	ldw	ra,44(sp)
    50dc:	df000a17 	ldw	fp,40(sp)
    50e0:	ddc00917 	ldw	r23,36(sp)
    50e4:	dd800817 	ldw	r22,32(sp)
    50e8:	dd400717 	ldw	r21,28(sp)
    50ec:	dd000617 	ldw	r20,24(sp)
    50f0:	dcc00517 	ldw	r19,20(sp)
    50f4:	dc800417 	ldw	r18,16(sp)
    50f8:	dc400317 	ldw	r17,12(sp)
    50fc:	dc000217 	ldw	r16,8(sp)
    5100:	dec00c04 	addi	sp,sp,48
    5104:	f800283a 	ret
    5108:	800b883a 	mov	r5,r16
    510c:	a809883a 	mov	r4,r21
    5110:	0002b900 	call	2b90 <__swsetup_r>
    5114:	1000ee1e 	bne	r2,zero,54d0 <__sfvwrite_r+0x4b0>
    5118:	80c0030b 	ldhu	r3,12(r16)
    511c:	a4400017 	ldw	r17,0(r20)
    5120:	1880008c 	andi	r2,r3,2
    5124:	103fd61e 	bne	r2,zero,5080 <__alt_data_end+0xfffbbca0>
    5128:	1880004c 	andi	r2,r3,1
    512c:	1000421e 	bne	r2,zero,5238 <__sfvwrite_r+0x218>
    5130:	0039883a 	mov	fp,zero
    5134:	0025883a 	mov	r18,zero
    5138:	90001a26 	beq	r18,zero,51a4 <__sfvwrite_r+0x184>
    513c:	1880800c 	andi	r2,r3,512
    5140:	84c00217 	ldw	r19,8(r16)
    5144:	10002126 	beq	r2,zero,51cc <__sfvwrite_r+0x1ac>
    5148:	982f883a 	mov	r23,r19
    514c:	94c09636 	bltu	r18,r19,53a8 <__sfvwrite_r+0x388>
    5150:	1881200c 	andi	r2,r3,1152
    5154:	1000a11e 	bne	r2,zero,53dc <__sfvwrite_r+0x3bc>
    5158:	81000017 	ldw	r4,0(r16)
    515c:	b80d883a 	mov	r6,r23
    5160:	e00b883a 	mov	r5,fp
    5164:	00063400 	call	6340 <memmove>
    5168:	80c00217 	ldw	r3,8(r16)
    516c:	81000017 	ldw	r4,0(r16)
    5170:	9005883a 	mov	r2,r18
    5174:	1ce7c83a 	sub	r19,r3,r19
    5178:	25cf883a 	add	r7,r4,r23
    517c:	84c00215 	stw	r19,8(r16)
    5180:	81c00015 	stw	r7,0(r16)
    5184:	a0c00217 	ldw	r3,8(r20)
    5188:	e0b9883a 	add	fp,fp,r2
    518c:	90a5c83a 	sub	r18,r18,r2
    5190:	18a7c83a 	sub	r19,r3,r2
    5194:	a4c00215 	stw	r19,8(r20)
    5198:	983fce26 	beq	r19,zero,50d4 <__alt_data_end+0xfffbbcf4>
    519c:	80c0030b 	ldhu	r3,12(r16)
    51a0:	903fe61e 	bne	r18,zero,513c <__alt_data_end+0xfffbbd5c>
    51a4:	8f000017 	ldw	fp,0(r17)
    51a8:	8c800117 	ldw	r18,4(r17)
    51ac:	8c400204 	addi	r17,r17,8
    51b0:	003fe106 	br	5138 <__alt_data_end+0xfffbbd58>
    51b4:	8cc00017 	ldw	r19,0(r17)
    51b8:	8c800117 	ldw	r18,4(r17)
    51bc:	8c400204 	addi	r17,r17,8
    51c0:	003fb306 	br	5090 <__alt_data_end+0xfffbbcb0>
    51c4:	0005883a 	mov	r2,zero
    51c8:	f800283a 	ret
    51cc:	81000017 	ldw	r4,0(r16)
    51d0:	80800417 	ldw	r2,16(r16)
    51d4:	11005a36 	bltu	r2,r4,5340 <__sfvwrite_r+0x320>
    51d8:	85c00517 	ldw	r23,20(r16)
    51dc:	95c05836 	bltu	r18,r23,5340 <__sfvwrite_r+0x320>
    51e0:	00a00034 	movhi	r2,32768
    51e4:	10bfffc4 	addi	r2,r2,-1
    51e8:	9009883a 	mov	r4,r18
    51ec:	1480012e 	bgeu	r2,r18,51f4 <__sfvwrite_r+0x1d4>
    51f0:	1009883a 	mov	r4,r2
    51f4:	b80b883a 	mov	r5,r23
    51f8:	000ac2c0 	call	ac2c <__divsi3>
    51fc:	b80b883a 	mov	r5,r23
    5200:	1009883a 	mov	r4,r2
    5204:	000ade00 	call	ade0 <__mulsi3>
    5208:	81400717 	ldw	r5,28(r16)
    520c:	80c00917 	ldw	r3,36(r16)
    5210:	100f883a 	mov	r7,r2
    5214:	e00d883a 	mov	r6,fp
    5218:	a809883a 	mov	r4,r21
    521c:	183ee83a 	callr	r3
    5220:	00bfd816 	blt	zero,r2,5184 <__alt_data_end+0xfffbbda4>
    5224:	8080030b 	ldhu	r2,12(r16)
    5228:	10801014 	ori	r2,r2,64
    522c:	8080030d 	sth	r2,12(r16)
    5230:	00bfffc4 	movi	r2,-1
    5234:	003fa806 	br	50d8 <__alt_data_end+0xfffbbcf8>
    5238:	0027883a 	mov	r19,zero
    523c:	0011883a 	mov	r8,zero
    5240:	0039883a 	mov	fp,zero
    5244:	0025883a 	mov	r18,zero
    5248:	90001f26 	beq	r18,zero,52c8 <__sfvwrite_r+0x2a8>
    524c:	40005a26 	beq	r8,zero,53b8 <__sfvwrite_r+0x398>
    5250:	982d883a 	mov	r22,r19
    5254:	94c0012e 	bgeu	r18,r19,525c <__sfvwrite_r+0x23c>
    5258:	902d883a 	mov	r22,r18
    525c:	81000017 	ldw	r4,0(r16)
    5260:	80800417 	ldw	r2,16(r16)
    5264:	b02f883a 	mov	r23,r22
    5268:	81c00517 	ldw	r7,20(r16)
    526c:	1100032e 	bgeu	r2,r4,527c <__sfvwrite_r+0x25c>
    5270:	80c00217 	ldw	r3,8(r16)
    5274:	38c7883a 	add	r3,r7,r3
    5278:	1d801816 	blt	r3,r22,52dc <__sfvwrite_r+0x2bc>
    527c:	b1c03e16 	blt	r22,r7,5378 <__sfvwrite_r+0x358>
    5280:	80800917 	ldw	r2,36(r16)
    5284:	81400717 	ldw	r5,28(r16)
    5288:	e00d883a 	mov	r6,fp
    528c:	da000115 	stw	r8,4(sp)
    5290:	a809883a 	mov	r4,r21
    5294:	103ee83a 	callr	r2
    5298:	102f883a 	mov	r23,r2
    529c:	da000117 	ldw	r8,4(sp)
    52a0:	00bfe00e 	bge	zero,r2,5224 <__alt_data_end+0xfffbbe44>
    52a4:	9de7c83a 	sub	r19,r19,r23
    52a8:	98001f26 	beq	r19,zero,5328 <__sfvwrite_r+0x308>
    52ac:	a0800217 	ldw	r2,8(r20)
    52b0:	e5f9883a 	add	fp,fp,r23
    52b4:	95e5c83a 	sub	r18,r18,r23
    52b8:	15efc83a 	sub	r23,r2,r23
    52bc:	a5c00215 	stw	r23,8(r20)
    52c0:	b83f8426 	beq	r23,zero,50d4 <__alt_data_end+0xfffbbcf4>
    52c4:	903fe11e 	bne	r18,zero,524c <__alt_data_end+0xfffbbe6c>
    52c8:	8f000017 	ldw	fp,0(r17)
    52cc:	8c800117 	ldw	r18,4(r17)
    52d0:	0011883a 	mov	r8,zero
    52d4:	8c400204 	addi	r17,r17,8
    52d8:	003fdb06 	br	5248 <__alt_data_end+0xfffbbe68>
    52dc:	180d883a 	mov	r6,r3
    52e0:	e00b883a 	mov	r5,fp
    52e4:	da000115 	stw	r8,4(sp)
    52e8:	d8c00015 	stw	r3,0(sp)
    52ec:	00063400 	call	6340 <memmove>
    52f0:	d8c00017 	ldw	r3,0(sp)
    52f4:	80800017 	ldw	r2,0(r16)
    52f8:	800b883a 	mov	r5,r16
    52fc:	a809883a 	mov	r4,r21
    5300:	10c5883a 	add	r2,r2,r3
    5304:	80800015 	stw	r2,0(r16)
    5308:	d8c00015 	stw	r3,0(sp)
    530c:	00047b00 	call	47b0 <_fflush_r>
    5310:	d8c00017 	ldw	r3,0(sp)
    5314:	da000117 	ldw	r8,4(sp)
    5318:	103fc21e 	bne	r2,zero,5224 <__alt_data_end+0xfffbbe44>
    531c:	182f883a 	mov	r23,r3
    5320:	9de7c83a 	sub	r19,r19,r23
    5324:	983fe11e 	bne	r19,zero,52ac <__alt_data_end+0xfffbbecc>
    5328:	800b883a 	mov	r5,r16
    532c:	a809883a 	mov	r4,r21
    5330:	00047b00 	call	47b0 <_fflush_r>
    5334:	103fbb1e 	bne	r2,zero,5224 <__alt_data_end+0xfffbbe44>
    5338:	0011883a 	mov	r8,zero
    533c:	003fdb06 	br	52ac <__alt_data_end+0xfffbbecc>
    5340:	94c0012e 	bgeu	r18,r19,5348 <__sfvwrite_r+0x328>
    5344:	9027883a 	mov	r19,r18
    5348:	980d883a 	mov	r6,r19
    534c:	e00b883a 	mov	r5,fp
    5350:	00063400 	call	6340 <memmove>
    5354:	80800217 	ldw	r2,8(r16)
    5358:	80c00017 	ldw	r3,0(r16)
    535c:	14c5c83a 	sub	r2,r2,r19
    5360:	1cc7883a 	add	r3,r3,r19
    5364:	80800215 	stw	r2,8(r16)
    5368:	80c00015 	stw	r3,0(r16)
    536c:	10004326 	beq	r2,zero,547c <__sfvwrite_r+0x45c>
    5370:	9805883a 	mov	r2,r19
    5374:	003f8306 	br	5184 <__alt_data_end+0xfffbbda4>
    5378:	b00d883a 	mov	r6,r22
    537c:	e00b883a 	mov	r5,fp
    5380:	da000115 	stw	r8,4(sp)
    5384:	00063400 	call	6340 <memmove>
    5388:	80800217 	ldw	r2,8(r16)
    538c:	80c00017 	ldw	r3,0(r16)
    5390:	da000117 	ldw	r8,4(sp)
    5394:	1585c83a 	sub	r2,r2,r22
    5398:	1dad883a 	add	r22,r3,r22
    539c:	80800215 	stw	r2,8(r16)
    53a0:	85800015 	stw	r22,0(r16)
    53a4:	003fbf06 	br	52a4 <__alt_data_end+0xfffbbec4>
    53a8:	81000017 	ldw	r4,0(r16)
    53ac:	9027883a 	mov	r19,r18
    53b0:	902f883a 	mov	r23,r18
    53b4:	003f6906 	br	515c <__alt_data_end+0xfffbbd7c>
    53b8:	900d883a 	mov	r6,r18
    53bc:	01400284 	movi	r5,10
    53c0:	e009883a 	mov	r4,fp
    53c4:	00061140 	call	6114 <memchr>
    53c8:	10003e26 	beq	r2,zero,54c4 <__sfvwrite_r+0x4a4>
    53cc:	10800044 	addi	r2,r2,1
    53d0:	1727c83a 	sub	r19,r2,fp
    53d4:	02000044 	movi	r8,1
    53d8:	003f9d06 	br	5250 <__alt_data_end+0xfffbbe70>
    53dc:	80800517 	ldw	r2,20(r16)
    53e0:	81400417 	ldw	r5,16(r16)
    53e4:	81c00017 	ldw	r7,0(r16)
    53e8:	10a7883a 	add	r19,r2,r2
    53ec:	9885883a 	add	r2,r19,r2
    53f0:	1026d7fa 	srli	r19,r2,31
    53f4:	396dc83a 	sub	r22,r7,r5
    53f8:	b1000044 	addi	r4,r22,1
    53fc:	9885883a 	add	r2,r19,r2
    5400:	1027d07a 	srai	r19,r2,1
    5404:	2485883a 	add	r2,r4,r18
    5408:	980d883a 	mov	r6,r19
    540c:	9880022e 	bgeu	r19,r2,5418 <__sfvwrite_r+0x3f8>
    5410:	1027883a 	mov	r19,r2
    5414:	100d883a 	mov	r6,r2
    5418:	18c1000c 	andi	r3,r3,1024
    541c:	18001c26 	beq	r3,zero,5490 <__sfvwrite_r+0x470>
    5420:	300b883a 	mov	r5,r6
    5424:	a809883a 	mov	r4,r21
    5428:	00059080 	call	5908 <_malloc_r>
    542c:	102f883a 	mov	r23,r2
    5430:	10002926 	beq	r2,zero,54d8 <__sfvwrite_r+0x4b8>
    5434:	81400417 	ldw	r5,16(r16)
    5438:	b00d883a 	mov	r6,r22
    543c:	1009883a 	mov	r4,r2
    5440:	00061f80 	call	61f8 <memcpy>
    5444:	8080030b 	ldhu	r2,12(r16)
    5448:	00fedfc4 	movi	r3,-1153
    544c:	10c4703a 	and	r2,r2,r3
    5450:	10802014 	ori	r2,r2,128
    5454:	8080030d 	sth	r2,12(r16)
    5458:	bd89883a 	add	r4,r23,r22
    545c:	9d8fc83a 	sub	r7,r19,r22
    5460:	85c00415 	stw	r23,16(r16)
    5464:	84c00515 	stw	r19,20(r16)
    5468:	81000015 	stw	r4,0(r16)
    546c:	9027883a 	mov	r19,r18
    5470:	81c00215 	stw	r7,8(r16)
    5474:	902f883a 	mov	r23,r18
    5478:	003f3806 	br	515c <__alt_data_end+0xfffbbd7c>
    547c:	800b883a 	mov	r5,r16
    5480:	a809883a 	mov	r4,r21
    5484:	00047b00 	call	47b0 <_fflush_r>
    5488:	103fb926 	beq	r2,zero,5370 <__alt_data_end+0xfffbbf90>
    548c:	003f6506 	br	5224 <__alt_data_end+0xfffbbe44>
    5490:	a809883a 	mov	r4,r21
    5494:	00077e40 	call	77e4 <_realloc_r>
    5498:	102f883a 	mov	r23,r2
    549c:	103fee1e 	bne	r2,zero,5458 <__alt_data_end+0xfffbc078>
    54a0:	81400417 	ldw	r5,16(r16)
    54a4:	a809883a 	mov	r4,r21
    54a8:	0004d100 	call	4d10 <_free_r>
    54ac:	8080030b 	ldhu	r2,12(r16)
    54b0:	00ffdfc4 	movi	r3,-129
    54b4:	1884703a 	and	r2,r3,r2
    54b8:	00c00304 	movi	r3,12
    54bc:	a8c00015 	stw	r3,0(r21)
    54c0:	003f5906 	br	5228 <__alt_data_end+0xfffbbe48>
    54c4:	94c00044 	addi	r19,r18,1
    54c8:	02000044 	movi	r8,1
    54cc:	003f6006 	br	5250 <__alt_data_end+0xfffbbe70>
    54d0:	00bfffc4 	movi	r2,-1
    54d4:	003f0006 	br	50d8 <__alt_data_end+0xfffbbcf8>
    54d8:	00800304 	movi	r2,12
    54dc:	a8800015 	stw	r2,0(r21)
    54e0:	8080030b 	ldhu	r2,12(r16)
    54e4:	003f5006 	br	5228 <__alt_data_end+0xfffbbe48>

000054e8 <_fwalk>:
    54e8:	defff704 	addi	sp,sp,-36
    54ec:	dd000415 	stw	r20,16(sp)
    54f0:	dfc00815 	stw	ra,32(sp)
    54f4:	ddc00715 	stw	r23,28(sp)
    54f8:	dd800615 	stw	r22,24(sp)
    54fc:	dd400515 	stw	r21,20(sp)
    5500:	dcc00315 	stw	r19,12(sp)
    5504:	dc800215 	stw	r18,8(sp)
    5508:	dc400115 	stw	r17,4(sp)
    550c:	dc000015 	stw	r16,0(sp)
    5510:	2500b804 	addi	r20,r4,736
    5514:	a0002326 	beq	r20,zero,55a4 <_fwalk+0xbc>
    5518:	282b883a 	mov	r21,r5
    551c:	002f883a 	mov	r23,zero
    5520:	05800044 	movi	r22,1
    5524:	04ffffc4 	movi	r19,-1
    5528:	a4400117 	ldw	r17,4(r20)
    552c:	a4800217 	ldw	r18,8(r20)
    5530:	8c7fffc4 	addi	r17,r17,-1
    5534:	88000d16 	blt	r17,zero,556c <_fwalk+0x84>
    5538:	94000304 	addi	r16,r18,12
    553c:	94800384 	addi	r18,r18,14
    5540:	8080000b 	ldhu	r2,0(r16)
    5544:	8c7fffc4 	addi	r17,r17,-1
    5548:	813ffd04 	addi	r4,r16,-12
    554c:	b080042e 	bgeu	r22,r2,5560 <_fwalk+0x78>
    5550:	9080000f 	ldh	r2,0(r18)
    5554:	14c00226 	beq	r2,r19,5560 <_fwalk+0x78>
    5558:	a83ee83a 	callr	r21
    555c:	b8aeb03a 	or	r23,r23,r2
    5560:	84001a04 	addi	r16,r16,104
    5564:	94801a04 	addi	r18,r18,104
    5568:	8cfff51e 	bne	r17,r19,5540 <__alt_data_end+0xfffbc160>
    556c:	a5000017 	ldw	r20,0(r20)
    5570:	a03fed1e 	bne	r20,zero,5528 <__alt_data_end+0xfffbc148>
    5574:	b805883a 	mov	r2,r23
    5578:	dfc00817 	ldw	ra,32(sp)
    557c:	ddc00717 	ldw	r23,28(sp)
    5580:	dd800617 	ldw	r22,24(sp)
    5584:	dd400517 	ldw	r21,20(sp)
    5588:	dd000417 	ldw	r20,16(sp)
    558c:	dcc00317 	ldw	r19,12(sp)
    5590:	dc800217 	ldw	r18,8(sp)
    5594:	dc400117 	ldw	r17,4(sp)
    5598:	dc000017 	ldw	r16,0(sp)
    559c:	dec00904 	addi	sp,sp,36
    55a0:	f800283a 	ret
    55a4:	002f883a 	mov	r23,zero
    55a8:	003ff206 	br	5574 <__alt_data_end+0xfffbc194>

000055ac <_fwalk_reent>:
    55ac:	defff704 	addi	sp,sp,-36
    55b0:	dd000415 	stw	r20,16(sp)
    55b4:	dfc00815 	stw	ra,32(sp)
    55b8:	ddc00715 	stw	r23,28(sp)
    55bc:	dd800615 	stw	r22,24(sp)
    55c0:	dd400515 	stw	r21,20(sp)
    55c4:	dcc00315 	stw	r19,12(sp)
    55c8:	dc800215 	stw	r18,8(sp)
    55cc:	dc400115 	stw	r17,4(sp)
    55d0:	dc000015 	stw	r16,0(sp)
    55d4:	2500b804 	addi	r20,r4,736
    55d8:	a0002326 	beq	r20,zero,5668 <_fwalk_reent+0xbc>
    55dc:	282b883a 	mov	r21,r5
    55e0:	2027883a 	mov	r19,r4
    55e4:	002f883a 	mov	r23,zero
    55e8:	05800044 	movi	r22,1
    55ec:	04bfffc4 	movi	r18,-1
    55f0:	a4400117 	ldw	r17,4(r20)
    55f4:	a4000217 	ldw	r16,8(r20)
    55f8:	8c7fffc4 	addi	r17,r17,-1
    55fc:	88000c16 	blt	r17,zero,5630 <_fwalk_reent+0x84>
    5600:	84000304 	addi	r16,r16,12
    5604:	8080000b 	ldhu	r2,0(r16)
    5608:	8c7fffc4 	addi	r17,r17,-1
    560c:	817ffd04 	addi	r5,r16,-12
    5610:	b080052e 	bgeu	r22,r2,5628 <_fwalk_reent+0x7c>
    5614:	8080008f 	ldh	r2,2(r16)
    5618:	9809883a 	mov	r4,r19
    561c:	14800226 	beq	r2,r18,5628 <_fwalk_reent+0x7c>
    5620:	a83ee83a 	callr	r21
    5624:	b8aeb03a 	or	r23,r23,r2
    5628:	84001a04 	addi	r16,r16,104
    562c:	8cbff51e 	bne	r17,r18,5604 <__alt_data_end+0xfffbc224>
    5630:	a5000017 	ldw	r20,0(r20)
    5634:	a03fee1e 	bne	r20,zero,55f0 <__alt_data_end+0xfffbc210>
    5638:	b805883a 	mov	r2,r23
    563c:	dfc00817 	ldw	ra,32(sp)
    5640:	ddc00717 	ldw	r23,28(sp)
    5644:	dd800617 	ldw	r22,24(sp)
    5648:	dd400517 	ldw	r21,20(sp)
    564c:	dd000417 	ldw	r20,16(sp)
    5650:	dcc00317 	ldw	r19,12(sp)
    5654:	dc800217 	ldw	r18,8(sp)
    5658:	dc400117 	ldw	r17,4(sp)
    565c:	dc000017 	ldw	r16,0(sp)
    5660:	dec00904 	addi	sp,sp,36
    5664:	f800283a 	ret
    5668:	002f883a 	mov	r23,zero
    566c:	003ff206 	br	5638 <__alt_data_end+0xfffbc258>

00005670 <_setlocale_r>:
    5670:	30001b26 	beq	r6,zero,56e0 <_setlocale_r+0x70>
    5674:	01400074 	movhi	r5,1
    5678:	defffe04 	addi	sp,sp,-8
    567c:	2941ac04 	addi	r5,r5,1712
    5680:	3009883a 	mov	r4,r6
    5684:	dc000015 	stw	r16,0(sp)
    5688:	dfc00115 	stw	ra,4(sp)
    568c:	3021883a 	mov	r16,r6
    5690:	0007f4c0 	call	7f4c <strcmp>
    5694:	1000061e 	bne	r2,zero,56b0 <_setlocale_r+0x40>
    5698:	00800074 	movhi	r2,1
    569c:	1081ab04 	addi	r2,r2,1708
    56a0:	dfc00117 	ldw	ra,4(sp)
    56a4:	dc000017 	ldw	r16,0(sp)
    56a8:	dec00204 	addi	sp,sp,8
    56ac:	f800283a 	ret
    56b0:	01400074 	movhi	r5,1
    56b4:	2941ab04 	addi	r5,r5,1708
    56b8:	8009883a 	mov	r4,r16
    56bc:	0007f4c0 	call	7f4c <strcmp>
    56c0:	103ff526 	beq	r2,zero,5698 <__alt_data_end+0xfffbc2b8>
    56c4:	01400074 	movhi	r5,1
    56c8:	29419604 	addi	r5,r5,1624
    56cc:	8009883a 	mov	r4,r16
    56d0:	0007f4c0 	call	7f4c <strcmp>
    56d4:	103ff026 	beq	r2,zero,5698 <__alt_data_end+0xfffbc2b8>
    56d8:	0005883a 	mov	r2,zero
    56dc:	003ff006 	br	56a0 <__alt_data_end+0xfffbc2c0>
    56e0:	00800074 	movhi	r2,1
    56e4:	1081ab04 	addi	r2,r2,1708
    56e8:	f800283a 	ret

000056ec <__locale_charset>:
    56ec:	00800074 	movhi	r2,1
    56f0:	10835e04 	addi	r2,r2,3448
    56f4:	f800283a 	ret

000056f8 <__locale_mb_cur_max>:
    56f8:	00800074 	movhi	r2,1
    56fc:	1088fa04 	addi	r2,r2,9192
    5700:	10800017 	ldw	r2,0(r2)
    5704:	f800283a 	ret

00005708 <__locale_msgcharset>:
    5708:	00800074 	movhi	r2,1
    570c:	10835604 	addi	r2,r2,3416
    5710:	f800283a 	ret

00005714 <__locale_cjk_lang>:
    5714:	0005883a 	mov	r2,zero
    5718:	f800283a 	ret

0000571c <_localeconv_r>:
    571c:	00800074 	movhi	r2,1
    5720:	10836604 	addi	r2,r2,3480
    5724:	f800283a 	ret

00005728 <setlocale>:
    5728:	00800074 	movhi	r2,1
    572c:	1088f904 	addi	r2,r2,9188
    5730:	280d883a 	mov	r6,r5
    5734:	200b883a 	mov	r5,r4
    5738:	11000017 	ldw	r4,0(r2)
    573c:	00056701 	jmpi	5670 <_setlocale_r>

00005740 <localeconv>:
    5740:	00800074 	movhi	r2,1
    5744:	10836604 	addi	r2,r2,3480
    5748:	f800283a 	ret

0000574c <__smakebuf_r>:
    574c:	2880030b 	ldhu	r2,12(r5)
    5750:	10c0008c 	andi	r3,r2,2
    5754:	1800411e 	bne	r3,zero,585c <__smakebuf_r+0x110>
    5758:	deffec04 	addi	sp,sp,-80
    575c:	dc000f15 	stw	r16,60(sp)
    5760:	2821883a 	mov	r16,r5
    5764:	2940038f 	ldh	r5,14(r5)
    5768:	dc401015 	stw	r17,64(sp)
    576c:	dfc01315 	stw	ra,76(sp)
    5770:	dcc01215 	stw	r19,72(sp)
    5774:	dc801115 	stw	r18,68(sp)
    5778:	2023883a 	mov	r17,r4
    577c:	28001c16 	blt	r5,zero,57f0 <__smakebuf_r+0xa4>
    5780:	d80d883a 	mov	r6,sp
    5784:	0009d140 	call	9d14 <_fstat_r>
    5788:	10001816 	blt	r2,zero,57ec <__smakebuf_r+0xa0>
    578c:	d8800117 	ldw	r2,4(sp)
    5790:	00e00014 	movui	r3,32768
    5794:	10bc000c 	andi	r2,r2,61440
    5798:	14c80020 	cmpeqi	r19,r2,8192
    579c:	10c03726 	beq	r2,r3,587c <__smakebuf_r+0x130>
    57a0:	80c0030b 	ldhu	r3,12(r16)
    57a4:	18c20014 	ori	r3,r3,2048
    57a8:	80c0030d 	sth	r3,12(r16)
    57ac:	00c80004 	movi	r3,8192
    57b0:	10c0521e 	bne	r2,r3,58fc <__smakebuf_r+0x1b0>
    57b4:	8140038f 	ldh	r5,14(r16)
    57b8:	8809883a 	mov	r4,r17
    57bc:	0009d700 	call	9d70 <_isatty_r>
    57c0:	10004c26 	beq	r2,zero,58f4 <__smakebuf_r+0x1a8>
    57c4:	8080030b 	ldhu	r2,12(r16)
    57c8:	80c010c4 	addi	r3,r16,67
    57cc:	80c00015 	stw	r3,0(r16)
    57d0:	10800054 	ori	r2,r2,1
    57d4:	8080030d 	sth	r2,12(r16)
    57d8:	00800044 	movi	r2,1
    57dc:	80c00415 	stw	r3,16(r16)
    57e0:	80800515 	stw	r2,20(r16)
    57e4:	04810004 	movi	r18,1024
    57e8:	00000706 	br	5808 <__smakebuf_r+0xbc>
    57ec:	8080030b 	ldhu	r2,12(r16)
    57f0:	10c0200c 	andi	r3,r2,128
    57f4:	18001f1e 	bne	r3,zero,5874 <__smakebuf_r+0x128>
    57f8:	04810004 	movi	r18,1024
    57fc:	10820014 	ori	r2,r2,2048
    5800:	8080030d 	sth	r2,12(r16)
    5804:	0027883a 	mov	r19,zero
    5808:	900b883a 	mov	r5,r18
    580c:	8809883a 	mov	r4,r17
    5810:	00059080 	call	5908 <_malloc_r>
    5814:	10002c26 	beq	r2,zero,58c8 <__smakebuf_r+0x17c>
    5818:	80c0030b 	ldhu	r3,12(r16)
    581c:	01000034 	movhi	r4,0
    5820:	21121104 	addi	r4,r4,18500
    5824:	89000f15 	stw	r4,60(r17)
    5828:	18c02014 	ori	r3,r3,128
    582c:	80c0030d 	sth	r3,12(r16)
    5830:	80800015 	stw	r2,0(r16)
    5834:	80800415 	stw	r2,16(r16)
    5838:	84800515 	stw	r18,20(r16)
    583c:	98001a1e 	bne	r19,zero,58a8 <__smakebuf_r+0x15c>
    5840:	dfc01317 	ldw	ra,76(sp)
    5844:	dcc01217 	ldw	r19,72(sp)
    5848:	dc801117 	ldw	r18,68(sp)
    584c:	dc401017 	ldw	r17,64(sp)
    5850:	dc000f17 	ldw	r16,60(sp)
    5854:	dec01404 	addi	sp,sp,80
    5858:	f800283a 	ret
    585c:	288010c4 	addi	r2,r5,67
    5860:	28800015 	stw	r2,0(r5)
    5864:	28800415 	stw	r2,16(r5)
    5868:	00800044 	movi	r2,1
    586c:	28800515 	stw	r2,20(r5)
    5870:	f800283a 	ret
    5874:	04801004 	movi	r18,64
    5878:	003fe006 	br	57fc <__alt_data_end+0xfffbc41c>
    587c:	81000a17 	ldw	r4,40(r16)
    5880:	00c00034 	movhi	r3,0
    5884:	18dfba04 	addi	r3,r3,32488
    5888:	20ffc51e 	bne	r4,r3,57a0 <__alt_data_end+0xfffbc3c0>
    588c:	8080030b 	ldhu	r2,12(r16)
    5890:	04810004 	movi	r18,1024
    5894:	84801315 	stw	r18,76(r16)
    5898:	1484b03a 	or	r2,r2,r18
    589c:	8080030d 	sth	r2,12(r16)
    58a0:	0027883a 	mov	r19,zero
    58a4:	003fd806 	br	5808 <__alt_data_end+0xfffbc428>
    58a8:	8140038f 	ldh	r5,14(r16)
    58ac:	8809883a 	mov	r4,r17
    58b0:	0009d700 	call	9d70 <_isatty_r>
    58b4:	103fe226 	beq	r2,zero,5840 <__alt_data_end+0xfffbc460>
    58b8:	8080030b 	ldhu	r2,12(r16)
    58bc:	10800054 	ori	r2,r2,1
    58c0:	8080030d 	sth	r2,12(r16)
    58c4:	003fde06 	br	5840 <__alt_data_end+0xfffbc460>
    58c8:	8080030b 	ldhu	r2,12(r16)
    58cc:	10c0800c 	andi	r3,r2,512
    58d0:	183fdb1e 	bne	r3,zero,5840 <__alt_data_end+0xfffbc460>
    58d4:	10800094 	ori	r2,r2,2
    58d8:	80c010c4 	addi	r3,r16,67
    58dc:	8080030d 	sth	r2,12(r16)
    58e0:	00800044 	movi	r2,1
    58e4:	80c00015 	stw	r3,0(r16)
    58e8:	80c00415 	stw	r3,16(r16)
    58ec:	80800515 	stw	r2,20(r16)
    58f0:	003fd306 	br	5840 <__alt_data_end+0xfffbc460>
    58f4:	04810004 	movi	r18,1024
    58f8:	003fc306 	br	5808 <__alt_data_end+0xfffbc428>
    58fc:	0027883a 	mov	r19,zero
    5900:	04810004 	movi	r18,1024
    5904:	003fc006 	br	5808 <__alt_data_end+0xfffbc428>

00005908 <_malloc_r>:
    5908:	defff504 	addi	sp,sp,-44
    590c:	dc800315 	stw	r18,12(sp)
    5910:	dfc00a15 	stw	ra,40(sp)
    5914:	df000915 	stw	fp,36(sp)
    5918:	ddc00815 	stw	r23,32(sp)
    591c:	dd800715 	stw	r22,28(sp)
    5920:	dd400615 	stw	r21,24(sp)
    5924:	dd000515 	stw	r20,20(sp)
    5928:	dcc00415 	stw	r19,16(sp)
    592c:	dc400215 	stw	r17,8(sp)
    5930:	dc000115 	stw	r16,4(sp)
    5934:	288002c4 	addi	r2,r5,11
    5938:	00c00584 	movi	r3,22
    593c:	2025883a 	mov	r18,r4
    5940:	18807f2e 	bgeu	r3,r2,5b40 <_malloc_r+0x238>
    5944:	047ffe04 	movi	r17,-8
    5948:	1462703a 	and	r17,r2,r17
    594c:	8800a316 	blt	r17,zero,5bdc <_malloc_r+0x2d4>
    5950:	8940a236 	bltu	r17,r5,5bdc <_malloc_r+0x2d4>
    5954:	000dc980 	call	dc98 <__malloc_lock>
    5958:	00807dc4 	movi	r2,503
    595c:	1441e92e 	bgeu	r2,r17,6104 <_malloc_r+0x7fc>
    5960:	8804d27a 	srli	r2,r17,9
    5964:	1000a126 	beq	r2,zero,5bec <_malloc_r+0x2e4>
    5968:	00c00104 	movi	r3,4
    596c:	18811e36 	bltu	r3,r2,5de8 <_malloc_r+0x4e0>
    5970:	8804d1ba 	srli	r2,r17,6
    5974:	12000e44 	addi	r8,r2,57
    5978:	11c00e04 	addi	r7,r2,56
    597c:	4209883a 	add	r4,r8,r8
    5980:	04c00074 	movhi	r19,1
    5984:	2109883a 	add	r4,r4,r4
    5988:	9cc37404 	addi	r19,r19,3536
    598c:	2109883a 	add	r4,r4,r4
    5990:	9909883a 	add	r4,r19,r4
    5994:	24000117 	ldw	r16,4(r4)
    5998:	213ffe04 	addi	r4,r4,-8
    599c:	24009726 	beq	r4,r16,5bfc <_malloc_r+0x2f4>
    59a0:	80800117 	ldw	r2,4(r16)
    59a4:	01bfff04 	movi	r6,-4
    59a8:	014003c4 	movi	r5,15
    59ac:	1184703a 	and	r2,r2,r6
    59b0:	1447c83a 	sub	r3,r2,r17
    59b4:	28c00716 	blt	r5,r3,59d4 <_malloc_r+0xcc>
    59b8:	1800920e 	bge	r3,zero,5c04 <_malloc_r+0x2fc>
    59bc:	84000317 	ldw	r16,12(r16)
    59c0:	24008e26 	beq	r4,r16,5bfc <_malloc_r+0x2f4>
    59c4:	80800117 	ldw	r2,4(r16)
    59c8:	1184703a 	and	r2,r2,r6
    59cc:	1447c83a 	sub	r3,r2,r17
    59d0:	28fff90e 	bge	r5,r3,59b8 <__alt_data_end+0xfffbc5d8>
    59d4:	3809883a 	mov	r4,r7
    59d8:	01800074 	movhi	r6,1
    59dc:	9c000417 	ldw	r16,16(r19)
    59e0:	31837404 	addi	r6,r6,3536
    59e4:	32000204 	addi	r8,r6,8
    59e8:	82013426 	beq	r16,r8,5ebc <_malloc_r+0x5b4>
    59ec:	80c00117 	ldw	r3,4(r16)
    59f0:	00bfff04 	movi	r2,-4
    59f4:	188e703a 	and	r7,r3,r2
    59f8:	3c45c83a 	sub	r2,r7,r17
    59fc:	00c003c4 	movi	r3,15
    5a00:	18811f16 	blt	r3,r2,5e80 <_malloc_r+0x578>
    5a04:	32000515 	stw	r8,20(r6)
    5a08:	32000415 	stw	r8,16(r6)
    5a0c:	10007f0e 	bge	r2,zero,5c0c <_malloc_r+0x304>
    5a10:	00807fc4 	movi	r2,511
    5a14:	11c0fd36 	bltu	r2,r7,5e0c <_malloc_r+0x504>
    5a18:	3806d0fa 	srli	r3,r7,3
    5a1c:	01c00044 	movi	r7,1
    5a20:	30800117 	ldw	r2,4(r6)
    5a24:	19400044 	addi	r5,r3,1
    5a28:	294b883a 	add	r5,r5,r5
    5a2c:	1807d0ba 	srai	r3,r3,2
    5a30:	294b883a 	add	r5,r5,r5
    5a34:	294b883a 	add	r5,r5,r5
    5a38:	298b883a 	add	r5,r5,r6
    5a3c:	38c6983a 	sll	r3,r7,r3
    5a40:	29c00017 	ldw	r7,0(r5)
    5a44:	2a7ffe04 	addi	r9,r5,-8
    5a48:	1886b03a 	or	r3,r3,r2
    5a4c:	82400315 	stw	r9,12(r16)
    5a50:	81c00215 	stw	r7,8(r16)
    5a54:	30c00115 	stw	r3,4(r6)
    5a58:	2c000015 	stw	r16,0(r5)
    5a5c:	3c000315 	stw	r16,12(r7)
    5a60:	2005d0ba 	srai	r2,r4,2
    5a64:	01400044 	movi	r5,1
    5a68:	288a983a 	sll	r5,r5,r2
    5a6c:	19406f36 	bltu	r3,r5,5c2c <_malloc_r+0x324>
    5a70:	28c4703a 	and	r2,r5,r3
    5a74:	10000a1e 	bne	r2,zero,5aa0 <_malloc_r+0x198>
    5a78:	00bfff04 	movi	r2,-4
    5a7c:	294b883a 	add	r5,r5,r5
    5a80:	2088703a 	and	r4,r4,r2
    5a84:	28c4703a 	and	r2,r5,r3
    5a88:	21000104 	addi	r4,r4,4
    5a8c:	1000041e 	bne	r2,zero,5aa0 <_malloc_r+0x198>
    5a90:	294b883a 	add	r5,r5,r5
    5a94:	28c4703a 	and	r2,r5,r3
    5a98:	21000104 	addi	r4,r4,4
    5a9c:	103ffc26 	beq	r2,zero,5a90 <__alt_data_end+0xfffbc6b0>
    5aa0:	02bfff04 	movi	r10,-4
    5aa4:	024003c4 	movi	r9,15
    5aa8:	21800044 	addi	r6,r4,1
    5aac:	318d883a 	add	r6,r6,r6
    5ab0:	318d883a 	add	r6,r6,r6
    5ab4:	318d883a 	add	r6,r6,r6
    5ab8:	998d883a 	add	r6,r19,r6
    5abc:	333ffe04 	addi	r12,r6,-8
    5ac0:	2017883a 	mov	r11,r4
    5ac4:	31800104 	addi	r6,r6,4
    5ac8:	34000017 	ldw	r16,0(r6)
    5acc:	31fffd04 	addi	r7,r6,-12
    5ad0:	81c0041e 	bne	r16,r7,5ae4 <_malloc_r+0x1dc>
    5ad4:	0000fb06 	br	5ec4 <_malloc_r+0x5bc>
    5ad8:	1801030e 	bge	r3,zero,5ee8 <_malloc_r+0x5e0>
    5adc:	84000317 	ldw	r16,12(r16)
    5ae0:	81c0f826 	beq	r16,r7,5ec4 <_malloc_r+0x5bc>
    5ae4:	80800117 	ldw	r2,4(r16)
    5ae8:	1284703a 	and	r2,r2,r10
    5aec:	1447c83a 	sub	r3,r2,r17
    5af0:	48fff90e 	bge	r9,r3,5ad8 <__alt_data_end+0xfffbc6f8>
    5af4:	80800317 	ldw	r2,12(r16)
    5af8:	81000217 	ldw	r4,8(r16)
    5afc:	89400054 	ori	r5,r17,1
    5b00:	81400115 	stw	r5,4(r16)
    5b04:	20800315 	stw	r2,12(r4)
    5b08:	11000215 	stw	r4,8(r2)
    5b0c:	8463883a 	add	r17,r16,r17
    5b10:	9c400515 	stw	r17,20(r19)
    5b14:	9c400415 	stw	r17,16(r19)
    5b18:	18800054 	ori	r2,r3,1
    5b1c:	88800115 	stw	r2,4(r17)
    5b20:	8a000315 	stw	r8,12(r17)
    5b24:	8a000215 	stw	r8,8(r17)
    5b28:	88e3883a 	add	r17,r17,r3
    5b2c:	88c00015 	stw	r3,0(r17)
    5b30:	9009883a 	mov	r4,r18
    5b34:	000dcbc0 	call	dcbc <__malloc_unlock>
    5b38:	80800204 	addi	r2,r16,8
    5b3c:	00001b06 	br	5bac <_malloc_r+0x2a4>
    5b40:	04400404 	movi	r17,16
    5b44:	89402536 	bltu	r17,r5,5bdc <_malloc_r+0x2d4>
    5b48:	000dc980 	call	dc98 <__malloc_lock>
    5b4c:	00800184 	movi	r2,6
    5b50:	01000084 	movi	r4,2
    5b54:	04c00074 	movhi	r19,1
    5b58:	1085883a 	add	r2,r2,r2
    5b5c:	9cc37404 	addi	r19,r19,3536
    5b60:	1085883a 	add	r2,r2,r2
    5b64:	9885883a 	add	r2,r19,r2
    5b68:	14000117 	ldw	r16,4(r2)
    5b6c:	10fffe04 	addi	r3,r2,-8
    5b70:	80c0d926 	beq	r16,r3,5ed8 <_malloc_r+0x5d0>
    5b74:	80c00117 	ldw	r3,4(r16)
    5b78:	81000317 	ldw	r4,12(r16)
    5b7c:	00bfff04 	movi	r2,-4
    5b80:	1884703a 	and	r2,r3,r2
    5b84:	81400217 	ldw	r5,8(r16)
    5b88:	8085883a 	add	r2,r16,r2
    5b8c:	10c00117 	ldw	r3,4(r2)
    5b90:	29000315 	stw	r4,12(r5)
    5b94:	21400215 	stw	r5,8(r4)
    5b98:	18c00054 	ori	r3,r3,1
    5b9c:	10c00115 	stw	r3,4(r2)
    5ba0:	9009883a 	mov	r4,r18
    5ba4:	000dcbc0 	call	dcbc <__malloc_unlock>
    5ba8:	80800204 	addi	r2,r16,8
    5bac:	dfc00a17 	ldw	ra,40(sp)
    5bb0:	df000917 	ldw	fp,36(sp)
    5bb4:	ddc00817 	ldw	r23,32(sp)
    5bb8:	dd800717 	ldw	r22,28(sp)
    5bbc:	dd400617 	ldw	r21,24(sp)
    5bc0:	dd000517 	ldw	r20,20(sp)
    5bc4:	dcc00417 	ldw	r19,16(sp)
    5bc8:	dc800317 	ldw	r18,12(sp)
    5bcc:	dc400217 	ldw	r17,8(sp)
    5bd0:	dc000117 	ldw	r16,4(sp)
    5bd4:	dec00b04 	addi	sp,sp,44
    5bd8:	f800283a 	ret
    5bdc:	00800304 	movi	r2,12
    5be0:	90800015 	stw	r2,0(r18)
    5be4:	0005883a 	mov	r2,zero
    5be8:	003ff006 	br	5bac <__alt_data_end+0xfffbc7cc>
    5bec:	01002004 	movi	r4,128
    5bf0:	02001004 	movi	r8,64
    5bf4:	01c00fc4 	movi	r7,63
    5bf8:	003f6106 	br	5980 <__alt_data_end+0xfffbc5a0>
    5bfc:	4009883a 	mov	r4,r8
    5c00:	003f7506 	br	59d8 <__alt_data_end+0xfffbc5f8>
    5c04:	81000317 	ldw	r4,12(r16)
    5c08:	003fde06 	br	5b84 <__alt_data_end+0xfffbc7a4>
    5c0c:	81c5883a 	add	r2,r16,r7
    5c10:	11400117 	ldw	r5,4(r2)
    5c14:	9009883a 	mov	r4,r18
    5c18:	29400054 	ori	r5,r5,1
    5c1c:	11400115 	stw	r5,4(r2)
    5c20:	000dcbc0 	call	dcbc <__malloc_unlock>
    5c24:	80800204 	addi	r2,r16,8
    5c28:	003fe006 	br	5bac <__alt_data_end+0xfffbc7cc>
    5c2c:	9c000217 	ldw	r16,8(r19)
    5c30:	00bfff04 	movi	r2,-4
    5c34:	85800117 	ldw	r22,4(r16)
    5c38:	b0ac703a 	and	r22,r22,r2
    5c3c:	b4400336 	bltu	r22,r17,5c4c <_malloc_r+0x344>
    5c40:	b445c83a 	sub	r2,r22,r17
    5c44:	00c003c4 	movi	r3,15
    5c48:	18805d16 	blt	r3,r2,5dc0 <_malloc_r+0x4b8>
    5c4c:	05c00074 	movhi	r23,1
    5c50:	00800074 	movhi	r2,1
    5c54:	108fc804 	addi	r2,r2,16160
    5c58:	bdc8fb04 	addi	r23,r23,9196
    5c5c:	15400017 	ldw	r21,0(r2)
    5c60:	b8c00017 	ldw	r3,0(r23)
    5c64:	00bfffc4 	movi	r2,-1
    5c68:	858d883a 	add	r6,r16,r22
    5c6c:	8d6b883a 	add	r21,r17,r21
    5c70:	1880ea26 	beq	r3,r2,601c <_malloc_r+0x714>
    5c74:	ad4403c4 	addi	r21,r21,4111
    5c78:	00bc0004 	movi	r2,-4096
    5c7c:	a8aa703a 	and	r21,r21,r2
    5c80:	a80b883a 	mov	r5,r21
    5c84:	9009883a 	mov	r4,r18
    5c88:	d9800015 	stw	r6,0(sp)
    5c8c:	0007dbc0 	call	7dbc <_sbrk_r>
    5c90:	1029883a 	mov	r20,r2
    5c94:	00bfffc4 	movi	r2,-1
    5c98:	d9800017 	ldw	r6,0(sp)
    5c9c:	a080e826 	beq	r20,r2,6040 <_malloc_r+0x738>
    5ca0:	a180a636 	bltu	r20,r6,5f3c <_malloc_r+0x634>
    5ca4:	07000074 	movhi	fp,1
    5ca8:	e70fd104 	addi	fp,fp,16196
    5cac:	e0800017 	ldw	r2,0(fp)
    5cb0:	a887883a 	add	r3,r21,r2
    5cb4:	e0c00015 	stw	r3,0(fp)
    5cb8:	3500e626 	beq	r6,r20,6054 <_malloc_r+0x74c>
    5cbc:	b9000017 	ldw	r4,0(r23)
    5cc0:	00bfffc4 	movi	r2,-1
    5cc4:	2080ee26 	beq	r4,r2,6080 <_malloc_r+0x778>
    5cc8:	a185c83a 	sub	r2,r20,r6
    5ccc:	10c5883a 	add	r2,r2,r3
    5cd0:	e0800015 	stw	r2,0(fp)
    5cd4:	a0c001cc 	andi	r3,r20,7
    5cd8:	1800bc26 	beq	r3,zero,5fcc <_malloc_r+0x6c4>
    5cdc:	a0e9c83a 	sub	r20,r20,r3
    5ce0:	00840204 	movi	r2,4104
    5ce4:	a5000204 	addi	r20,r20,8
    5ce8:	10c7c83a 	sub	r3,r2,r3
    5cec:	a545883a 	add	r2,r20,r21
    5cf0:	1083ffcc 	andi	r2,r2,4095
    5cf4:	18abc83a 	sub	r21,r3,r2
    5cf8:	a80b883a 	mov	r5,r21
    5cfc:	9009883a 	mov	r4,r18
    5d00:	0007dbc0 	call	7dbc <_sbrk_r>
    5d04:	00ffffc4 	movi	r3,-1
    5d08:	10c0e126 	beq	r2,r3,6090 <_malloc_r+0x788>
    5d0c:	1505c83a 	sub	r2,r2,r20
    5d10:	1545883a 	add	r2,r2,r21
    5d14:	10800054 	ori	r2,r2,1
    5d18:	e0c00017 	ldw	r3,0(fp)
    5d1c:	9d000215 	stw	r20,8(r19)
    5d20:	a0800115 	stw	r2,4(r20)
    5d24:	a8c7883a 	add	r3,r21,r3
    5d28:	e0c00015 	stw	r3,0(fp)
    5d2c:	84c00e26 	beq	r16,r19,5d68 <_malloc_r+0x460>
    5d30:	018003c4 	movi	r6,15
    5d34:	3580a72e 	bgeu	r6,r22,5fd4 <_malloc_r+0x6cc>
    5d38:	81400117 	ldw	r5,4(r16)
    5d3c:	013ffe04 	movi	r4,-8
    5d40:	b0bffd04 	addi	r2,r22,-12
    5d44:	1104703a 	and	r2,r2,r4
    5d48:	2900004c 	andi	r4,r5,1
    5d4c:	2088b03a 	or	r4,r4,r2
    5d50:	81000115 	stw	r4,4(r16)
    5d54:	01400144 	movi	r5,5
    5d58:	8089883a 	add	r4,r16,r2
    5d5c:	21400115 	stw	r5,4(r4)
    5d60:	21400215 	stw	r5,8(r4)
    5d64:	3080cd36 	bltu	r6,r2,609c <_malloc_r+0x794>
    5d68:	00800074 	movhi	r2,1
    5d6c:	108fc704 	addi	r2,r2,16156
    5d70:	11000017 	ldw	r4,0(r2)
    5d74:	20c0012e 	bgeu	r4,r3,5d7c <_malloc_r+0x474>
    5d78:	10c00015 	stw	r3,0(r2)
    5d7c:	00800074 	movhi	r2,1
    5d80:	108fc604 	addi	r2,r2,16152
    5d84:	11000017 	ldw	r4,0(r2)
    5d88:	9c000217 	ldw	r16,8(r19)
    5d8c:	20c0012e 	bgeu	r4,r3,5d94 <_malloc_r+0x48c>
    5d90:	10c00015 	stw	r3,0(r2)
    5d94:	80c00117 	ldw	r3,4(r16)
    5d98:	00bfff04 	movi	r2,-4
    5d9c:	1886703a 	and	r3,r3,r2
    5da0:	1c45c83a 	sub	r2,r3,r17
    5da4:	1c400236 	bltu	r3,r17,5db0 <_malloc_r+0x4a8>
    5da8:	00c003c4 	movi	r3,15
    5dac:	18800416 	blt	r3,r2,5dc0 <_malloc_r+0x4b8>
    5db0:	9009883a 	mov	r4,r18
    5db4:	000dcbc0 	call	dcbc <__malloc_unlock>
    5db8:	0005883a 	mov	r2,zero
    5dbc:	003f7b06 	br	5bac <__alt_data_end+0xfffbc7cc>
    5dc0:	88c00054 	ori	r3,r17,1
    5dc4:	80c00115 	stw	r3,4(r16)
    5dc8:	8463883a 	add	r17,r16,r17
    5dcc:	10800054 	ori	r2,r2,1
    5dd0:	9c400215 	stw	r17,8(r19)
    5dd4:	88800115 	stw	r2,4(r17)
    5dd8:	9009883a 	mov	r4,r18
    5ddc:	000dcbc0 	call	dcbc <__malloc_unlock>
    5de0:	80800204 	addi	r2,r16,8
    5de4:	003f7106 	br	5bac <__alt_data_end+0xfffbc7cc>
    5de8:	00c00504 	movi	r3,20
    5dec:	18804a2e 	bgeu	r3,r2,5f18 <_malloc_r+0x610>
    5df0:	00c01504 	movi	r3,84
    5df4:	18806e36 	bltu	r3,r2,5fb0 <_malloc_r+0x6a8>
    5df8:	8804d33a 	srli	r2,r17,12
    5dfc:	12001bc4 	addi	r8,r2,111
    5e00:	11c01b84 	addi	r7,r2,110
    5e04:	4209883a 	add	r4,r8,r8
    5e08:	003edd06 	br	5980 <__alt_data_end+0xfffbc5a0>
    5e0c:	3804d27a 	srli	r2,r7,9
    5e10:	00c00104 	movi	r3,4
    5e14:	1880442e 	bgeu	r3,r2,5f28 <_malloc_r+0x620>
    5e18:	00c00504 	movi	r3,20
    5e1c:	18808136 	bltu	r3,r2,6024 <_malloc_r+0x71c>
    5e20:	11401704 	addi	r5,r2,92
    5e24:	10c016c4 	addi	r3,r2,91
    5e28:	294b883a 	add	r5,r5,r5
    5e2c:	294b883a 	add	r5,r5,r5
    5e30:	294b883a 	add	r5,r5,r5
    5e34:	994b883a 	add	r5,r19,r5
    5e38:	28800017 	ldw	r2,0(r5)
    5e3c:	01800074 	movhi	r6,1
    5e40:	297ffe04 	addi	r5,r5,-8
    5e44:	31837404 	addi	r6,r6,3536
    5e48:	28806526 	beq	r5,r2,5fe0 <_malloc_r+0x6d8>
    5e4c:	01bfff04 	movi	r6,-4
    5e50:	10c00117 	ldw	r3,4(r2)
    5e54:	1986703a 	and	r3,r3,r6
    5e58:	38c0022e 	bgeu	r7,r3,5e64 <_malloc_r+0x55c>
    5e5c:	10800217 	ldw	r2,8(r2)
    5e60:	28bffb1e 	bne	r5,r2,5e50 <__alt_data_end+0xfffbca70>
    5e64:	11400317 	ldw	r5,12(r2)
    5e68:	98c00117 	ldw	r3,4(r19)
    5e6c:	81400315 	stw	r5,12(r16)
    5e70:	80800215 	stw	r2,8(r16)
    5e74:	2c000215 	stw	r16,8(r5)
    5e78:	14000315 	stw	r16,12(r2)
    5e7c:	003ef806 	br	5a60 <__alt_data_end+0xfffbc680>
    5e80:	88c00054 	ori	r3,r17,1
    5e84:	80c00115 	stw	r3,4(r16)
    5e88:	8463883a 	add	r17,r16,r17
    5e8c:	34400515 	stw	r17,20(r6)
    5e90:	34400415 	stw	r17,16(r6)
    5e94:	10c00054 	ori	r3,r2,1
    5e98:	8a000315 	stw	r8,12(r17)
    5e9c:	8a000215 	stw	r8,8(r17)
    5ea0:	88c00115 	stw	r3,4(r17)
    5ea4:	88a3883a 	add	r17,r17,r2
    5ea8:	88800015 	stw	r2,0(r17)
    5eac:	9009883a 	mov	r4,r18
    5eb0:	000dcbc0 	call	dcbc <__malloc_unlock>
    5eb4:	80800204 	addi	r2,r16,8
    5eb8:	003f3c06 	br	5bac <__alt_data_end+0xfffbc7cc>
    5ebc:	30c00117 	ldw	r3,4(r6)
    5ec0:	003ee706 	br	5a60 <__alt_data_end+0xfffbc680>
    5ec4:	5ac00044 	addi	r11,r11,1
    5ec8:	588000cc 	andi	r2,r11,3
    5ecc:	31800204 	addi	r6,r6,8
    5ed0:	103efd1e 	bne	r2,zero,5ac8 <__alt_data_end+0xfffbc6e8>
    5ed4:	00002406 	br	5f68 <_malloc_r+0x660>
    5ed8:	14000317 	ldw	r16,12(r2)
    5edc:	143f251e 	bne	r2,r16,5b74 <__alt_data_end+0xfffbc794>
    5ee0:	21000084 	addi	r4,r4,2
    5ee4:	003ebc06 	br	59d8 <__alt_data_end+0xfffbc5f8>
    5ee8:	8085883a 	add	r2,r16,r2
    5eec:	10c00117 	ldw	r3,4(r2)
    5ef0:	81000317 	ldw	r4,12(r16)
    5ef4:	81400217 	ldw	r5,8(r16)
    5ef8:	18c00054 	ori	r3,r3,1
    5efc:	10c00115 	stw	r3,4(r2)
    5f00:	29000315 	stw	r4,12(r5)
    5f04:	21400215 	stw	r5,8(r4)
    5f08:	9009883a 	mov	r4,r18
    5f0c:	000dcbc0 	call	dcbc <__malloc_unlock>
    5f10:	80800204 	addi	r2,r16,8
    5f14:	003f2506 	br	5bac <__alt_data_end+0xfffbc7cc>
    5f18:	12001704 	addi	r8,r2,92
    5f1c:	11c016c4 	addi	r7,r2,91
    5f20:	4209883a 	add	r4,r8,r8
    5f24:	003e9606 	br	5980 <__alt_data_end+0xfffbc5a0>
    5f28:	3804d1ba 	srli	r2,r7,6
    5f2c:	11400e44 	addi	r5,r2,57
    5f30:	10c00e04 	addi	r3,r2,56
    5f34:	294b883a 	add	r5,r5,r5
    5f38:	003fbc06 	br	5e2c <__alt_data_end+0xfffbca4c>
    5f3c:	84ff5926 	beq	r16,r19,5ca4 <__alt_data_end+0xfffbc8c4>
    5f40:	00800074 	movhi	r2,1
    5f44:	10837404 	addi	r2,r2,3536
    5f48:	14000217 	ldw	r16,8(r2)
    5f4c:	00bfff04 	movi	r2,-4
    5f50:	80c00117 	ldw	r3,4(r16)
    5f54:	1886703a 	and	r3,r3,r2
    5f58:	003f9106 	br	5da0 <__alt_data_end+0xfffbc9c0>
    5f5c:	60800217 	ldw	r2,8(r12)
    5f60:	213fffc4 	addi	r4,r4,-1
    5f64:	1300651e 	bne	r2,r12,60fc <_malloc_r+0x7f4>
    5f68:	208000cc 	andi	r2,r4,3
    5f6c:	633ffe04 	addi	r12,r12,-8
    5f70:	103ffa1e 	bne	r2,zero,5f5c <__alt_data_end+0xfffbcb7c>
    5f74:	98800117 	ldw	r2,4(r19)
    5f78:	0146303a 	nor	r3,zero,r5
    5f7c:	1884703a 	and	r2,r3,r2
    5f80:	98800115 	stw	r2,4(r19)
    5f84:	294b883a 	add	r5,r5,r5
    5f88:	117f2836 	bltu	r2,r5,5c2c <__alt_data_end+0xfffbc84c>
    5f8c:	283f2726 	beq	r5,zero,5c2c <__alt_data_end+0xfffbc84c>
    5f90:	2886703a 	and	r3,r5,r2
    5f94:	5809883a 	mov	r4,r11
    5f98:	183ec31e 	bne	r3,zero,5aa8 <__alt_data_end+0xfffbc6c8>
    5f9c:	294b883a 	add	r5,r5,r5
    5fa0:	2886703a 	and	r3,r5,r2
    5fa4:	21000104 	addi	r4,r4,4
    5fa8:	183ffc26 	beq	r3,zero,5f9c <__alt_data_end+0xfffbcbbc>
    5fac:	003ebe06 	br	5aa8 <__alt_data_end+0xfffbc6c8>
    5fb0:	00c05504 	movi	r3,340
    5fb4:	18801236 	bltu	r3,r2,6000 <_malloc_r+0x6f8>
    5fb8:	8804d3fa 	srli	r2,r17,15
    5fbc:	12001e04 	addi	r8,r2,120
    5fc0:	11c01dc4 	addi	r7,r2,119
    5fc4:	4209883a 	add	r4,r8,r8
    5fc8:	003e6d06 	br	5980 <__alt_data_end+0xfffbc5a0>
    5fcc:	00c40004 	movi	r3,4096
    5fd0:	003f4606 	br	5cec <__alt_data_end+0xfffbc90c>
    5fd4:	00800044 	movi	r2,1
    5fd8:	a0800115 	stw	r2,4(r20)
    5fdc:	003f7406 	br	5db0 <__alt_data_end+0xfffbc9d0>
    5fe0:	1805d0ba 	srai	r2,r3,2
    5fe4:	01c00044 	movi	r7,1
    5fe8:	30c00117 	ldw	r3,4(r6)
    5fec:	388e983a 	sll	r7,r7,r2
    5ff0:	2805883a 	mov	r2,r5
    5ff4:	38c6b03a 	or	r3,r7,r3
    5ff8:	30c00115 	stw	r3,4(r6)
    5ffc:	003f9b06 	br	5e6c <__alt_data_end+0xfffbca8c>
    6000:	00c15504 	movi	r3,1364
    6004:	18801a36 	bltu	r3,r2,6070 <_malloc_r+0x768>
    6008:	8804d4ba 	srli	r2,r17,18
    600c:	12001f44 	addi	r8,r2,125
    6010:	11c01f04 	addi	r7,r2,124
    6014:	4209883a 	add	r4,r8,r8
    6018:	003e5906 	br	5980 <__alt_data_end+0xfffbc5a0>
    601c:	ad400404 	addi	r21,r21,16
    6020:	003f1706 	br	5c80 <__alt_data_end+0xfffbc8a0>
    6024:	00c01504 	movi	r3,84
    6028:	18802336 	bltu	r3,r2,60b8 <_malloc_r+0x7b0>
    602c:	3804d33a 	srli	r2,r7,12
    6030:	11401bc4 	addi	r5,r2,111
    6034:	10c01b84 	addi	r3,r2,110
    6038:	294b883a 	add	r5,r5,r5
    603c:	003f7b06 	br	5e2c <__alt_data_end+0xfffbca4c>
    6040:	9c000217 	ldw	r16,8(r19)
    6044:	00bfff04 	movi	r2,-4
    6048:	80c00117 	ldw	r3,4(r16)
    604c:	1886703a 	and	r3,r3,r2
    6050:	003f5306 	br	5da0 <__alt_data_end+0xfffbc9c0>
    6054:	3083ffcc 	andi	r2,r6,4095
    6058:	103f181e 	bne	r2,zero,5cbc <__alt_data_end+0xfffbc8dc>
    605c:	99000217 	ldw	r4,8(r19)
    6060:	b545883a 	add	r2,r22,r21
    6064:	10800054 	ori	r2,r2,1
    6068:	20800115 	stw	r2,4(r4)
    606c:	003f3e06 	br	5d68 <__alt_data_end+0xfffbc988>
    6070:	01003f84 	movi	r4,254
    6074:	02001fc4 	movi	r8,127
    6078:	01c01f84 	movi	r7,126
    607c:	003e4006 	br	5980 <__alt_data_end+0xfffbc5a0>
    6080:	00800074 	movhi	r2,1
    6084:	1088fb04 	addi	r2,r2,9196
    6088:	15000015 	stw	r20,0(r2)
    608c:	003f1106 	br	5cd4 <__alt_data_end+0xfffbc8f4>
    6090:	00800044 	movi	r2,1
    6094:	002b883a 	mov	r21,zero
    6098:	003f1f06 	br	5d18 <__alt_data_end+0xfffbc938>
    609c:	81400204 	addi	r5,r16,8
    60a0:	9009883a 	mov	r4,r18
    60a4:	0004d100 	call	4d10 <_free_r>
    60a8:	00800074 	movhi	r2,1
    60ac:	108fd104 	addi	r2,r2,16196
    60b0:	10c00017 	ldw	r3,0(r2)
    60b4:	003f2c06 	br	5d68 <__alt_data_end+0xfffbc988>
    60b8:	00c05504 	movi	r3,340
    60bc:	18800536 	bltu	r3,r2,60d4 <_malloc_r+0x7cc>
    60c0:	3804d3fa 	srli	r2,r7,15
    60c4:	11401e04 	addi	r5,r2,120
    60c8:	10c01dc4 	addi	r3,r2,119
    60cc:	294b883a 	add	r5,r5,r5
    60d0:	003f5606 	br	5e2c <__alt_data_end+0xfffbca4c>
    60d4:	00c15504 	movi	r3,1364
    60d8:	18800536 	bltu	r3,r2,60f0 <_malloc_r+0x7e8>
    60dc:	3804d4ba 	srli	r2,r7,18
    60e0:	11401f44 	addi	r5,r2,125
    60e4:	10c01f04 	addi	r3,r2,124
    60e8:	294b883a 	add	r5,r5,r5
    60ec:	003f4f06 	br	5e2c <__alt_data_end+0xfffbca4c>
    60f0:	01403f84 	movi	r5,254
    60f4:	00c01f84 	movi	r3,126
    60f8:	003f4c06 	br	5e2c <__alt_data_end+0xfffbca4c>
    60fc:	98800117 	ldw	r2,4(r19)
    6100:	003fa006 	br	5f84 <__alt_data_end+0xfffbcba4>
    6104:	8808d0fa 	srli	r4,r17,3
    6108:	20800044 	addi	r2,r4,1
    610c:	1085883a 	add	r2,r2,r2
    6110:	003e9006 	br	5b54 <__alt_data_end+0xfffbc774>

00006114 <memchr>:
    6114:	208000cc 	andi	r2,r4,3
    6118:	280f883a 	mov	r7,r5
    611c:	10003426 	beq	r2,zero,61f0 <memchr+0xdc>
    6120:	30bfffc4 	addi	r2,r6,-1
    6124:	30001a26 	beq	r6,zero,6190 <memchr+0x7c>
    6128:	20c00003 	ldbu	r3,0(r4)
    612c:	29803fcc 	andi	r6,r5,255
    6130:	30c0051e 	bne	r6,r3,6148 <memchr+0x34>
    6134:	00001806 	br	6198 <memchr+0x84>
    6138:	10001526 	beq	r2,zero,6190 <memchr+0x7c>
    613c:	20c00003 	ldbu	r3,0(r4)
    6140:	10bfffc4 	addi	r2,r2,-1
    6144:	30c01426 	beq	r6,r3,6198 <memchr+0x84>
    6148:	21000044 	addi	r4,r4,1
    614c:	20c000cc 	andi	r3,r4,3
    6150:	183ff91e 	bne	r3,zero,6138 <__alt_data_end+0xfffbcd58>
    6154:	020000c4 	movi	r8,3
    6158:	40801136 	bltu	r8,r2,61a0 <memchr+0x8c>
    615c:	10000c26 	beq	r2,zero,6190 <memchr+0x7c>
    6160:	20c00003 	ldbu	r3,0(r4)
    6164:	29403fcc 	andi	r5,r5,255
    6168:	28c00b26 	beq	r5,r3,6198 <memchr+0x84>
    616c:	20c00044 	addi	r3,r4,1
    6170:	39803fcc 	andi	r6,r7,255
    6174:	2089883a 	add	r4,r4,r2
    6178:	00000306 	br	6188 <memchr+0x74>
    617c:	18c00044 	addi	r3,r3,1
    6180:	197fffc3 	ldbu	r5,-1(r3)
    6184:	31400526 	beq	r6,r5,619c <memchr+0x88>
    6188:	1805883a 	mov	r2,r3
    618c:	20fffb1e 	bne	r4,r3,617c <__alt_data_end+0xfffbcd9c>
    6190:	0005883a 	mov	r2,zero
    6194:	f800283a 	ret
    6198:	2005883a 	mov	r2,r4
    619c:	f800283a 	ret
    61a0:	28c03fcc 	andi	r3,r5,255
    61a4:	1812923a 	slli	r9,r3,8
    61a8:	02ffbff4 	movhi	r11,65279
    61ac:	02a02074 	movhi	r10,32897
    61b0:	48d2b03a 	or	r9,r9,r3
    61b4:	4806943a 	slli	r3,r9,16
    61b8:	5affbfc4 	addi	r11,r11,-257
    61bc:	52a02004 	addi	r10,r10,-32640
    61c0:	48d2b03a 	or	r9,r9,r3
    61c4:	20c00017 	ldw	r3,0(r4)
    61c8:	48c6f03a 	xor	r3,r9,r3
    61cc:	1acd883a 	add	r6,r3,r11
    61d0:	00c6303a 	nor	r3,zero,r3
    61d4:	30c6703a 	and	r3,r6,r3
    61d8:	1a86703a 	and	r3,r3,r10
    61dc:	183fe01e 	bne	r3,zero,6160 <__alt_data_end+0xfffbcd80>
    61e0:	10bfff04 	addi	r2,r2,-4
    61e4:	21000104 	addi	r4,r4,4
    61e8:	40bff636 	bltu	r8,r2,61c4 <__alt_data_end+0xfffbcde4>
    61ec:	003fdb06 	br	615c <__alt_data_end+0xfffbcd7c>
    61f0:	3005883a 	mov	r2,r6
    61f4:	003fd706 	br	6154 <__alt_data_end+0xfffbcd74>

000061f8 <memcpy>:
    61f8:	defffd04 	addi	sp,sp,-12
    61fc:	dfc00215 	stw	ra,8(sp)
    6200:	dc400115 	stw	r17,4(sp)
    6204:	dc000015 	stw	r16,0(sp)
    6208:	00c003c4 	movi	r3,15
    620c:	2005883a 	mov	r2,r4
    6210:	1980452e 	bgeu	r3,r6,6328 <memcpy+0x130>
    6214:	2906b03a 	or	r3,r5,r4
    6218:	18c000cc 	andi	r3,r3,3
    621c:	1800441e 	bne	r3,zero,6330 <memcpy+0x138>
    6220:	347ffc04 	addi	r17,r6,-16
    6224:	8822d13a 	srli	r17,r17,4
    6228:	28c00104 	addi	r3,r5,4
    622c:	23400104 	addi	r13,r4,4
    6230:	8820913a 	slli	r16,r17,4
    6234:	2b000204 	addi	r12,r5,8
    6238:	22c00204 	addi	r11,r4,8
    623c:	84000504 	addi	r16,r16,20
    6240:	2a800304 	addi	r10,r5,12
    6244:	22400304 	addi	r9,r4,12
    6248:	2c21883a 	add	r16,r5,r16
    624c:	2811883a 	mov	r8,r5
    6250:	200f883a 	mov	r7,r4
    6254:	41000017 	ldw	r4,0(r8)
    6258:	1fc00017 	ldw	ra,0(r3)
    625c:	63c00017 	ldw	r15,0(r12)
    6260:	39000015 	stw	r4,0(r7)
    6264:	53800017 	ldw	r14,0(r10)
    6268:	6fc00015 	stw	ra,0(r13)
    626c:	5bc00015 	stw	r15,0(r11)
    6270:	4b800015 	stw	r14,0(r9)
    6274:	18c00404 	addi	r3,r3,16
    6278:	39c00404 	addi	r7,r7,16
    627c:	42000404 	addi	r8,r8,16
    6280:	6b400404 	addi	r13,r13,16
    6284:	63000404 	addi	r12,r12,16
    6288:	5ac00404 	addi	r11,r11,16
    628c:	52800404 	addi	r10,r10,16
    6290:	4a400404 	addi	r9,r9,16
    6294:	1c3fef1e 	bne	r3,r16,6254 <__alt_data_end+0xfffbce74>
    6298:	89c00044 	addi	r7,r17,1
    629c:	380e913a 	slli	r7,r7,4
    62a0:	310003cc 	andi	r4,r6,15
    62a4:	02c000c4 	movi	r11,3
    62a8:	11c7883a 	add	r3,r2,r7
    62ac:	29cb883a 	add	r5,r5,r7
    62b0:	5900212e 	bgeu	r11,r4,6338 <memcpy+0x140>
    62b4:	1813883a 	mov	r9,r3
    62b8:	2811883a 	mov	r8,r5
    62bc:	200f883a 	mov	r7,r4
    62c0:	42800017 	ldw	r10,0(r8)
    62c4:	4a400104 	addi	r9,r9,4
    62c8:	39ffff04 	addi	r7,r7,-4
    62cc:	4abfff15 	stw	r10,-4(r9)
    62d0:	42000104 	addi	r8,r8,4
    62d4:	59fffa36 	bltu	r11,r7,62c0 <__alt_data_end+0xfffbcee0>
    62d8:	213fff04 	addi	r4,r4,-4
    62dc:	2008d0ba 	srli	r4,r4,2
    62e0:	318000cc 	andi	r6,r6,3
    62e4:	21000044 	addi	r4,r4,1
    62e8:	2109883a 	add	r4,r4,r4
    62ec:	2109883a 	add	r4,r4,r4
    62f0:	1907883a 	add	r3,r3,r4
    62f4:	290b883a 	add	r5,r5,r4
    62f8:	30000626 	beq	r6,zero,6314 <memcpy+0x11c>
    62fc:	198d883a 	add	r6,r3,r6
    6300:	29c00003 	ldbu	r7,0(r5)
    6304:	18c00044 	addi	r3,r3,1
    6308:	29400044 	addi	r5,r5,1
    630c:	19ffffc5 	stb	r7,-1(r3)
    6310:	19bffb1e 	bne	r3,r6,6300 <__alt_data_end+0xfffbcf20>
    6314:	dfc00217 	ldw	ra,8(sp)
    6318:	dc400117 	ldw	r17,4(sp)
    631c:	dc000017 	ldw	r16,0(sp)
    6320:	dec00304 	addi	sp,sp,12
    6324:	f800283a 	ret
    6328:	2007883a 	mov	r3,r4
    632c:	003ff206 	br	62f8 <__alt_data_end+0xfffbcf18>
    6330:	2007883a 	mov	r3,r4
    6334:	003ff106 	br	62fc <__alt_data_end+0xfffbcf1c>
    6338:	200d883a 	mov	r6,r4
    633c:	003fee06 	br	62f8 <__alt_data_end+0xfffbcf18>

00006340 <memmove>:
    6340:	2005883a 	mov	r2,r4
    6344:	29000b2e 	bgeu	r5,r4,6374 <memmove+0x34>
    6348:	298f883a 	add	r7,r5,r6
    634c:	21c0092e 	bgeu	r4,r7,6374 <memmove+0x34>
    6350:	2187883a 	add	r3,r4,r6
    6354:	198bc83a 	sub	r5,r3,r6
    6358:	30004826 	beq	r6,zero,647c <memmove+0x13c>
    635c:	39ffffc4 	addi	r7,r7,-1
    6360:	39000003 	ldbu	r4,0(r7)
    6364:	18ffffc4 	addi	r3,r3,-1
    6368:	19000005 	stb	r4,0(r3)
    636c:	28fffb1e 	bne	r5,r3,635c <__alt_data_end+0xfffbcf7c>
    6370:	f800283a 	ret
    6374:	00c003c4 	movi	r3,15
    6378:	1980412e 	bgeu	r3,r6,6480 <memmove+0x140>
    637c:	2886b03a 	or	r3,r5,r2
    6380:	18c000cc 	andi	r3,r3,3
    6384:	1800401e 	bne	r3,zero,6488 <memmove+0x148>
    6388:	33fffc04 	addi	r15,r6,-16
    638c:	781ed13a 	srli	r15,r15,4
    6390:	28c00104 	addi	r3,r5,4
    6394:	13400104 	addi	r13,r2,4
    6398:	781c913a 	slli	r14,r15,4
    639c:	2b000204 	addi	r12,r5,8
    63a0:	12c00204 	addi	r11,r2,8
    63a4:	73800504 	addi	r14,r14,20
    63a8:	2a800304 	addi	r10,r5,12
    63ac:	12400304 	addi	r9,r2,12
    63b0:	2b9d883a 	add	r14,r5,r14
    63b4:	2811883a 	mov	r8,r5
    63b8:	100f883a 	mov	r7,r2
    63bc:	41000017 	ldw	r4,0(r8)
    63c0:	39c00404 	addi	r7,r7,16
    63c4:	18c00404 	addi	r3,r3,16
    63c8:	393ffc15 	stw	r4,-16(r7)
    63cc:	193ffc17 	ldw	r4,-16(r3)
    63d0:	6b400404 	addi	r13,r13,16
    63d4:	5ac00404 	addi	r11,r11,16
    63d8:	693ffc15 	stw	r4,-16(r13)
    63dc:	61000017 	ldw	r4,0(r12)
    63e0:	4a400404 	addi	r9,r9,16
    63e4:	42000404 	addi	r8,r8,16
    63e8:	593ffc15 	stw	r4,-16(r11)
    63ec:	51000017 	ldw	r4,0(r10)
    63f0:	63000404 	addi	r12,r12,16
    63f4:	52800404 	addi	r10,r10,16
    63f8:	493ffc15 	stw	r4,-16(r9)
    63fc:	1bbfef1e 	bne	r3,r14,63bc <__alt_data_end+0xfffbcfdc>
    6400:	79000044 	addi	r4,r15,1
    6404:	2008913a 	slli	r4,r4,4
    6408:	328003cc 	andi	r10,r6,15
    640c:	02c000c4 	movi	r11,3
    6410:	1107883a 	add	r3,r2,r4
    6414:	290b883a 	add	r5,r5,r4
    6418:	5a801e2e 	bgeu	r11,r10,6494 <memmove+0x154>
    641c:	1813883a 	mov	r9,r3
    6420:	2811883a 	mov	r8,r5
    6424:	500f883a 	mov	r7,r10
    6428:	41000017 	ldw	r4,0(r8)
    642c:	4a400104 	addi	r9,r9,4
    6430:	39ffff04 	addi	r7,r7,-4
    6434:	493fff15 	stw	r4,-4(r9)
    6438:	42000104 	addi	r8,r8,4
    643c:	59fffa36 	bltu	r11,r7,6428 <__alt_data_end+0xfffbd048>
    6440:	513fff04 	addi	r4,r10,-4
    6444:	2008d0ba 	srli	r4,r4,2
    6448:	318000cc 	andi	r6,r6,3
    644c:	21000044 	addi	r4,r4,1
    6450:	2109883a 	add	r4,r4,r4
    6454:	2109883a 	add	r4,r4,r4
    6458:	1907883a 	add	r3,r3,r4
    645c:	290b883a 	add	r5,r5,r4
    6460:	30000b26 	beq	r6,zero,6490 <memmove+0x150>
    6464:	198d883a 	add	r6,r3,r6
    6468:	29c00003 	ldbu	r7,0(r5)
    646c:	18c00044 	addi	r3,r3,1
    6470:	29400044 	addi	r5,r5,1
    6474:	19ffffc5 	stb	r7,-1(r3)
    6478:	19bffb1e 	bne	r3,r6,6468 <__alt_data_end+0xfffbd088>
    647c:	f800283a 	ret
    6480:	1007883a 	mov	r3,r2
    6484:	003ff606 	br	6460 <__alt_data_end+0xfffbd080>
    6488:	1007883a 	mov	r3,r2
    648c:	003ff506 	br	6464 <__alt_data_end+0xfffbd084>
    6490:	f800283a 	ret
    6494:	500d883a 	mov	r6,r10
    6498:	003ff106 	br	6460 <__alt_data_end+0xfffbd080>

0000649c <memset>:
    649c:	20c000cc 	andi	r3,r4,3
    64a0:	2005883a 	mov	r2,r4
    64a4:	18004426 	beq	r3,zero,65b8 <memset+0x11c>
    64a8:	31ffffc4 	addi	r7,r6,-1
    64ac:	30004026 	beq	r6,zero,65b0 <memset+0x114>
    64b0:	2813883a 	mov	r9,r5
    64b4:	200d883a 	mov	r6,r4
    64b8:	2007883a 	mov	r3,r4
    64bc:	00000406 	br	64d0 <memset+0x34>
    64c0:	3a3fffc4 	addi	r8,r7,-1
    64c4:	31800044 	addi	r6,r6,1
    64c8:	38003926 	beq	r7,zero,65b0 <memset+0x114>
    64cc:	400f883a 	mov	r7,r8
    64d0:	18c00044 	addi	r3,r3,1
    64d4:	32400005 	stb	r9,0(r6)
    64d8:	1a0000cc 	andi	r8,r3,3
    64dc:	403ff81e 	bne	r8,zero,64c0 <__alt_data_end+0xfffbd0e0>
    64e0:	010000c4 	movi	r4,3
    64e4:	21c02d2e 	bgeu	r4,r7,659c <memset+0x100>
    64e8:	29003fcc 	andi	r4,r5,255
    64ec:	200c923a 	slli	r6,r4,8
    64f0:	3108b03a 	or	r4,r6,r4
    64f4:	200c943a 	slli	r6,r4,16
    64f8:	218cb03a 	or	r6,r4,r6
    64fc:	010003c4 	movi	r4,15
    6500:	21c0182e 	bgeu	r4,r7,6564 <memset+0xc8>
    6504:	3b3ffc04 	addi	r12,r7,-16
    6508:	6018d13a 	srli	r12,r12,4
    650c:	1a000104 	addi	r8,r3,4
    6510:	1ac00204 	addi	r11,r3,8
    6514:	6008913a 	slli	r4,r12,4
    6518:	1a800304 	addi	r10,r3,12
    651c:	1813883a 	mov	r9,r3
    6520:	21000504 	addi	r4,r4,20
    6524:	1909883a 	add	r4,r3,r4
    6528:	49800015 	stw	r6,0(r9)
    652c:	41800015 	stw	r6,0(r8)
    6530:	59800015 	stw	r6,0(r11)
    6534:	51800015 	stw	r6,0(r10)
    6538:	42000404 	addi	r8,r8,16
    653c:	4a400404 	addi	r9,r9,16
    6540:	5ac00404 	addi	r11,r11,16
    6544:	52800404 	addi	r10,r10,16
    6548:	413ff71e 	bne	r8,r4,6528 <__alt_data_end+0xfffbd148>
    654c:	63000044 	addi	r12,r12,1
    6550:	6018913a 	slli	r12,r12,4
    6554:	39c003cc 	andi	r7,r7,15
    6558:	010000c4 	movi	r4,3
    655c:	1b07883a 	add	r3,r3,r12
    6560:	21c00e2e 	bgeu	r4,r7,659c <memset+0x100>
    6564:	1813883a 	mov	r9,r3
    6568:	3811883a 	mov	r8,r7
    656c:	010000c4 	movi	r4,3
    6570:	49800015 	stw	r6,0(r9)
    6574:	423fff04 	addi	r8,r8,-4
    6578:	4a400104 	addi	r9,r9,4
    657c:	223ffc36 	bltu	r4,r8,6570 <__alt_data_end+0xfffbd190>
    6580:	393fff04 	addi	r4,r7,-4
    6584:	2008d0ba 	srli	r4,r4,2
    6588:	39c000cc 	andi	r7,r7,3
    658c:	21000044 	addi	r4,r4,1
    6590:	2109883a 	add	r4,r4,r4
    6594:	2109883a 	add	r4,r4,r4
    6598:	1907883a 	add	r3,r3,r4
    659c:	38000526 	beq	r7,zero,65b4 <memset+0x118>
    65a0:	19cf883a 	add	r7,r3,r7
    65a4:	19400005 	stb	r5,0(r3)
    65a8:	18c00044 	addi	r3,r3,1
    65ac:	38fffd1e 	bne	r7,r3,65a4 <__alt_data_end+0xfffbd1c4>
    65b0:	f800283a 	ret
    65b4:	f800283a 	ret
    65b8:	2007883a 	mov	r3,r4
    65bc:	300f883a 	mov	r7,r6
    65c0:	003fc706 	br	64e0 <__alt_data_end+0xfffbd100>

000065c4 <_Balloc>:
    65c4:	20801317 	ldw	r2,76(r4)
    65c8:	defffc04 	addi	sp,sp,-16
    65cc:	dc400115 	stw	r17,4(sp)
    65d0:	dc000015 	stw	r16,0(sp)
    65d4:	dfc00315 	stw	ra,12(sp)
    65d8:	dc800215 	stw	r18,8(sp)
    65dc:	2023883a 	mov	r17,r4
    65e0:	2821883a 	mov	r16,r5
    65e4:	10000f26 	beq	r2,zero,6624 <_Balloc+0x60>
    65e8:	8407883a 	add	r3,r16,r16
    65ec:	18c7883a 	add	r3,r3,r3
    65f0:	10c7883a 	add	r3,r2,r3
    65f4:	18800017 	ldw	r2,0(r3)
    65f8:	10001126 	beq	r2,zero,6640 <_Balloc+0x7c>
    65fc:	11000017 	ldw	r4,0(r2)
    6600:	19000015 	stw	r4,0(r3)
    6604:	10000415 	stw	zero,16(r2)
    6608:	10000315 	stw	zero,12(r2)
    660c:	dfc00317 	ldw	ra,12(sp)
    6610:	dc800217 	ldw	r18,8(sp)
    6614:	dc400117 	ldw	r17,4(sp)
    6618:	dc000017 	ldw	r16,0(sp)
    661c:	dec00404 	addi	sp,sp,16
    6620:	f800283a 	ret
    6624:	01800844 	movi	r6,33
    6628:	01400104 	movi	r5,4
    662c:	000992c0 	call	992c <_calloc_r>
    6630:	88801315 	stw	r2,76(r17)
    6634:	103fec1e 	bne	r2,zero,65e8 <__alt_data_end+0xfffbd208>
    6638:	0005883a 	mov	r2,zero
    663c:	003ff306 	br	660c <__alt_data_end+0xfffbd22c>
    6640:	01400044 	movi	r5,1
    6644:	2c24983a 	sll	r18,r5,r16
    6648:	8809883a 	mov	r4,r17
    664c:	91800144 	addi	r6,r18,5
    6650:	318d883a 	add	r6,r6,r6
    6654:	318d883a 	add	r6,r6,r6
    6658:	000992c0 	call	992c <_calloc_r>
    665c:	103ff626 	beq	r2,zero,6638 <__alt_data_end+0xfffbd258>
    6660:	14000115 	stw	r16,4(r2)
    6664:	14800215 	stw	r18,8(r2)
    6668:	003fe606 	br	6604 <__alt_data_end+0xfffbd224>

0000666c <_Bfree>:
    666c:	28000826 	beq	r5,zero,6690 <_Bfree+0x24>
    6670:	28c00117 	ldw	r3,4(r5)
    6674:	20801317 	ldw	r2,76(r4)
    6678:	18c7883a 	add	r3,r3,r3
    667c:	18c7883a 	add	r3,r3,r3
    6680:	10c5883a 	add	r2,r2,r3
    6684:	10c00017 	ldw	r3,0(r2)
    6688:	28c00015 	stw	r3,0(r5)
    668c:	11400015 	stw	r5,0(r2)
    6690:	f800283a 	ret

00006694 <__multadd>:
    6694:	defff704 	addi	sp,sp,-36
    6698:	dc800215 	stw	r18,8(sp)
    669c:	2c800417 	ldw	r18,16(r5)
    66a0:	dd800615 	stw	r22,24(sp)
    66a4:	dd400515 	stw	r21,20(sp)
    66a8:	dd000415 	stw	r20,16(sp)
    66ac:	dcc00315 	stw	r19,12(sp)
    66b0:	dc400115 	stw	r17,4(sp)
    66b4:	dc000015 	stw	r16,0(sp)
    66b8:	dfc00815 	stw	ra,32(sp)
    66bc:	ddc00715 	stw	r23,28(sp)
    66c0:	2827883a 	mov	r19,r5
    66c4:	2029883a 	mov	r20,r4
    66c8:	3023883a 	mov	r17,r6
    66cc:	3821883a 	mov	r16,r7
    66d0:	2d400504 	addi	r21,r5,20
    66d4:	002d883a 	mov	r22,zero
    66d8:	adc00017 	ldw	r23,0(r21)
    66dc:	880b883a 	mov	r5,r17
    66e0:	ad400104 	addi	r21,r21,4
    66e4:	b93fffcc 	andi	r4,r23,65535
    66e8:	000ade00 	call	ade0 <__mulsi3>
    66ec:	b808d43a 	srli	r4,r23,16
    66f0:	880b883a 	mov	r5,r17
    66f4:	1421883a 	add	r16,r2,r16
    66f8:	000ade00 	call	ade0 <__mulsi3>
    66fc:	800ed43a 	srli	r7,r16,16
    6700:	80ffffcc 	andi	r3,r16,65535
    6704:	b5800044 	addi	r22,r22,1
    6708:	11c5883a 	add	r2,r2,r7
    670c:	100e943a 	slli	r7,r2,16
    6710:	1020d43a 	srli	r16,r2,16
    6714:	38c7883a 	add	r3,r7,r3
    6718:	a8ffff15 	stw	r3,-4(r21)
    671c:	b4bfee16 	blt	r22,r18,66d8 <__alt_data_end+0xfffbd2f8>
    6720:	80000926 	beq	r16,zero,6748 <__multadd+0xb4>
    6724:	98800217 	ldw	r2,8(r19)
    6728:	9080130e 	bge	r18,r2,6778 <__multadd+0xe4>
    672c:	90800144 	addi	r2,r18,5
    6730:	1085883a 	add	r2,r2,r2
    6734:	1085883a 	add	r2,r2,r2
    6738:	9885883a 	add	r2,r19,r2
    673c:	14000015 	stw	r16,0(r2)
    6740:	94800044 	addi	r18,r18,1
    6744:	9c800415 	stw	r18,16(r19)
    6748:	9805883a 	mov	r2,r19
    674c:	dfc00817 	ldw	ra,32(sp)
    6750:	ddc00717 	ldw	r23,28(sp)
    6754:	dd800617 	ldw	r22,24(sp)
    6758:	dd400517 	ldw	r21,20(sp)
    675c:	dd000417 	ldw	r20,16(sp)
    6760:	dcc00317 	ldw	r19,12(sp)
    6764:	dc800217 	ldw	r18,8(sp)
    6768:	dc400117 	ldw	r17,4(sp)
    676c:	dc000017 	ldw	r16,0(sp)
    6770:	dec00904 	addi	sp,sp,36
    6774:	f800283a 	ret
    6778:	99400117 	ldw	r5,4(r19)
    677c:	a009883a 	mov	r4,r20
    6780:	29400044 	addi	r5,r5,1
    6784:	00065c40 	call	65c4 <_Balloc>
    6788:	99800417 	ldw	r6,16(r19)
    678c:	99400304 	addi	r5,r19,12
    6790:	11000304 	addi	r4,r2,12
    6794:	31800084 	addi	r6,r6,2
    6798:	318d883a 	add	r6,r6,r6
    679c:	318d883a 	add	r6,r6,r6
    67a0:	1023883a 	mov	r17,r2
    67a4:	00061f80 	call	61f8 <memcpy>
    67a8:	98000a26 	beq	r19,zero,67d4 <__multadd+0x140>
    67ac:	98c00117 	ldw	r3,4(r19)
    67b0:	a0801317 	ldw	r2,76(r20)
    67b4:	18c7883a 	add	r3,r3,r3
    67b8:	18c7883a 	add	r3,r3,r3
    67bc:	10c5883a 	add	r2,r2,r3
    67c0:	10c00017 	ldw	r3,0(r2)
    67c4:	98c00015 	stw	r3,0(r19)
    67c8:	14c00015 	stw	r19,0(r2)
    67cc:	8827883a 	mov	r19,r17
    67d0:	003fd606 	br	672c <__alt_data_end+0xfffbd34c>
    67d4:	8827883a 	mov	r19,r17
    67d8:	003fd406 	br	672c <__alt_data_end+0xfffbd34c>

000067dc <__s2b>:
    67dc:	defff904 	addi	sp,sp,-28
    67e0:	dc400115 	stw	r17,4(sp)
    67e4:	dc000015 	stw	r16,0(sp)
    67e8:	2023883a 	mov	r17,r4
    67ec:	2821883a 	mov	r16,r5
    67f0:	39000204 	addi	r4,r7,8
    67f4:	01400244 	movi	r5,9
    67f8:	dcc00315 	stw	r19,12(sp)
    67fc:	dc800215 	stw	r18,8(sp)
    6800:	dfc00615 	stw	ra,24(sp)
    6804:	dd400515 	stw	r21,20(sp)
    6808:	dd000415 	stw	r20,16(sp)
    680c:	3825883a 	mov	r18,r7
    6810:	3027883a 	mov	r19,r6
    6814:	000ac2c0 	call	ac2c <__divsi3>
    6818:	00c00044 	movi	r3,1
    681c:	000b883a 	mov	r5,zero
    6820:	1880030e 	bge	r3,r2,6830 <__s2b+0x54>
    6824:	18c7883a 	add	r3,r3,r3
    6828:	29400044 	addi	r5,r5,1
    682c:	18bffd16 	blt	r3,r2,6824 <__alt_data_end+0xfffbd444>
    6830:	8809883a 	mov	r4,r17
    6834:	00065c40 	call	65c4 <_Balloc>
    6838:	d8c00717 	ldw	r3,28(sp)
    683c:	10c00515 	stw	r3,20(r2)
    6840:	00c00044 	movi	r3,1
    6844:	10c00415 	stw	r3,16(r2)
    6848:	00c00244 	movi	r3,9
    684c:	1cc0210e 	bge	r3,r19,68d4 <__s2b+0xf8>
    6850:	80eb883a 	add	r21,r16,r3
    6854:	a829883a 	mov	r20,r21
    6858:	84e1883a 	add	r16,r16,r19
    685c:	a1c00007 	ldb	r7,0(r20)
    6860:	01800284 	movi	r6,10
    6864:	a5000044 	addi	r20,r20,1
    6868:	100b883a 	mov	r5,r2
    686c:	39fff404 	addi	r7,r7,-48
    6870:	8809883a 	mov	r4,r17
    6874:	00066940 	call	6694 <__multadd>
    6878:	a43ff81e 	bne	r20,r16,685c <__alt_data_end+0xfffbd47c>
    687c:	ace1883a 	add	r16,r21,r19
    6880:	843ffe04 	addi	r16,r16,-8
    6884:	9c800a0e 	bge	r19,r18,68b0 <__s2b+0xd4>
    6888:	94e5c83a 	sub	r18,r18,r19
    688c:	84a5883a 	add	r18,r16,r18
    6890:	81c00007 	ldb	r7,0(r16)
    6894:	01800284 	movi	r6,10
    6898:	84000044 	addi	r16,r16,1
    689c:	100b883a 	mov	r5,r2
    68a0:	39fff404 	addi	r7,r7,-48
    68a4:	8809883a 	mov	r4,r17
    68a8:	00066940 	call	6694 <__multadd>
    68ac:	84bff81e 	bne	r16,r18,6890 <__alt_data_end+0xfffbd4b0>
    68b0:	dfc00617 	ldw	ra,24(sp)
    68b4:	dd400517 	ldw	r21,20(sp)
    68b8:	dd000417 	ldw	r20,16(sp)
    68bc:	dcc00317 	ldw	r19,12(sp)
    68c0:	dc800217 	ldw	r18,8(sp)
    68c4:	dc400117 	ldw	r17,4(sp)
    68c8:	dc000017 	ldw	r16,0(sp)
    68cc:	dec00704 	addi	sp,sp,28
    68d0:	f800283a 	ret
    68d4:	84000284 	addi	r16,r16,10
    68d8:	1827883a 	mov	r19,r3
    68dc:	003fe906 	br	6884 <__alt_data_end+0xfffbd4a4>

000068e0 <__hi0bits>:
    68e0:	20bfffec 	andhi	r2,r4,65535
    68e4:	1000141e 	bne	r2,zero,6938 <__hi0bits+0x58>
    68e8:	2008943a 	slli	r4,r4,16
    68ec:	00800404 	movi	r2,16
    68f0:	20ffc02c 	andhi	r3,r4,65280
    68f4:	1800021e 	bne	r3,zero,6900 <__hi0bits+0x20>
    68f8:	2008923a 	slli	r4,r4,8
    68fc:	10800204 	addi	r2,r2,8
    6900:	20fc002c 	andhi	r3,r4,61440
    6904:	1800021e 	bne	r3,zero,6910 <__hi0bits+0x30>
    6908:	2008913a 	slli	r4,r4,4
    690c:	10800104 	addi	r2,r2,4
    6910:	20f0002c 	andhi	r3,r4,49152
    6914:	1800031e 	bne	r3,zero,6924 <__hi0bits+0x44>
    6918:	2109883a 	add	r4,r4,r4
    691c:	10800084 	addi	r2,r2,2
    6920:	2109883a 	add	r4,r4,r4
    6924:	20000316 	blt	r4,zero,6934 <__hi0bits+0x54>
    6928:	2110002c 	andhi	r4,r4,16384
    692c:	2000041e 	bne	r4,zero,6940 <__hi0bits+0x60>
    6930:	00800804 	movi	r2,32
    6934:	f800283a 	ret
    6938:	0005883a 	mov	r2,zero
    693c:	003fec06 	br	68f0 <__alt_data_end+0xfffbd510>
    6940:	10800044 	addi	r2,r2,1
    6944:	f800283a 	ret

00006948 <__lo0bits>:
    6948:	20c00017 	ldw	r3,0(r4)
    694c:	188001cc 	andi	r2,r3,7
    6950:	10000826 	beq	r2,zero,6974 <__lo0bits+0x2c>
    6954:	1880004c 	andi	r2,r3,1
    6958:	1000211e 	bne	r2,zero,69e0 <__lo0bits+0x98>
    695c:	1880008c 	andi	r2,r3,2
    6960:	1000211e 	bne	r2,zero,69e8 <__lo0bits+0xa0>
    6964:	1806d0ba 	srli	r3,r3,2
    6968:	00800084 	movi	r2,2
    696c:	20c00015 	stw	r3,0(r4)
    6970:	f800283a 	ret
    6974:	18bfffcc 	andi	r2,r3,65535
    6978:	10001326 	beq	r2,zero,69c8 <__lo0bits+0x80>
    697c:	0005883a 	mov	r2,zero
    6980:	19403fcc 	andi	r5,r3,255
    6984:	2800021e 	bne	r5,zero,6990 <__lo0bits+0x48>
    6988:	1806d23a 	srli	r3,r3,8
    698c:	10800204 	addi	r2,r2,8
    6990:	194003cc 	andi	r5,r3,15
    6994:	2800021e 	bne	r5,zero,69a0 <__lo0bits+0x58>
    6998:	1806d13a 	srli	r3,r3,4
    699c:	10800104 	addi	r2,r2,4
    69a0:	194000cc 	andi	r5,r3,3
    69a4:	2800021e 	bne	r5,zero,69b0 <__lo0bits+0x68>
    69a8:	1806d0ba 	srli	r3,r3,2
    69ac:	10800084 	addi	r2,r2,2
    69b0:	1940004c 	andi	r5,r3,1
    69b4:	2800081e 	bne	r5,zero,69d8 <__lo0bits+0x90>
    69b8:	1806d07a 	srli	r3,r3,1
    69bc:	1800051e 	bne	r3,zero,69d4 <__lo0bits+0x8c>
    69c0:	00800804 	movi	r2,32
    69c4:	f800283a 	ret
    69c8:	1806d43a 	srli	r3,r3,16
    69cc:	00800404 	movi	r2,16
    69d0:	003feb06 	br	6980 <__alt_data_end+0xfffbd5a0>
    69d4:	10800044 	addi	r2,r2,1
    69d8:	20c00015 	stw	r3,0(r4)
    69dc:	f800283a 	ret
    69e0:	0005883a 	mov	r2,zero
    69e4:	f800283a 	ret
    69e8:	1806d07a 	srli	r3,r3,1
    69ec:	00800044 	movi	r2,1
    69f0:	20c00015 	stw	r3,0(r4)
    69f4:	f800283a 	ret

000069f8 <__i2b>:
    69f8:	defffd04 	addi	sp,sp,-12
    69fc:	dc000015 	stw	r16,0(sp)
    6a00:	04000044 	movi	r16,1
    6a04:	dc400115 	stw	r17,4(sp)
    6a08:	2823883a 	mov	r17,r5
    6a0c:	800b883a 	mov	r5,r16
    6a10:	dfc00215 	stw	ra,8(sp)
    6a14:	00065c40 	call	65c4 <_Balloc>
    6a18:	14400515 	stw	r17,20(r2)
    6a1c:	14000415 	stw	r16,16(r2)
    6a20:	dfc00217 	ldw	ra,8(sp)
    6a24:	dc400117 	ldw	r17,4(sp)
    6a28:	dc000017 	ldw	r16,0(sp)
    6a2c:	dec00304 	addi	sp,sp,12
    6a30:	f800283a 	ret

00006a34 <__multiply>:
    6a34:	deffef04 	addi	sp,sp,-68
    6a38:	dc400815 	stw	r17,32(sp)
    6a3c:	dc000715 	stw	r16,28(sp)
    6a40:	34400417 	ldw	r17,16(r6)
    6a44:	2c000417 	ldw	r16,16(r5)
    6a48:	dd800d15 	stw	r22,52(sp)
    6a4c:	dc800915 	stw	r18,36(sp)
    6a50:	dfc01015 	stw	ra,64(sp)
    6a54:	df000f15 	stw	fp,60(sp)
    6a58:	ddc00e15 	stw	r23,56(sp)
    6a5c:	dd400c15 	stw	r21,48(sp)
    6a60:	dd000b15 	stw	r20,44(sp)
    6a64:	dcc00a15 	stw	r19,40(sp)
    6a68:	2825883a 	mov	r18,r5
    6a6c:	302d883a 	mov	r22,r6
    6a70:	8440050e 	bge	r16,r17,6a88 <__multiply+0x54>
    6a74:	8007883a 	mov	r3,r16
    6a78:	3025883a 	mov	r18,r6
    6a7c:	8821883a 	mov	r16,r17
    6a80:	282d883a 	mov	r22,r5
    6a84:	1823883a 	mov	r17,r3
    6a88:	90800217 	ldw	r2,8(r18)
    6a8c:	8447883a 	add	r3,r16,r17
    6a90:	d8c00215 	stw	r3,8(sp)
    6a94:	91400117 	ldw	r5,4(r18)
    6a98:	10c0010e 	bge	r2,r3,6aa0 <__multiply+0x6c>
    6a9c:	29400044 	addi	r5,r5,1
    6aa0:	00065c40 	call	65c4 <_Balloc>
    6aa4:	d8c00217 	ldw	r3,8(sp)
    6aa8:	d8800615 	stw	r2,24(sp)
    6aac:	18eb883a 	add	r21,r3,r3
    6ab0:	ad6b883a 	add	r21,r21,r21
    6ab4:	10c00504 	addi	r3,r2,20
    6ab8:	1d6b883a 	add	r21,r3,r21
    6abc:	d8c00115 	stw	r3,4(sp)
    6ac0:	dd400315 	stw	r21,12(sp)
    6ac4:	1805883a 	mov	r2,r3
    6ac8:	1d40042e 	bgeu	r3,r21,6adc <__multiply+0xa8>
    6acc:	d8c00317 	ldw	r3,12(sp)
    6ad0:	10000015 	stw	zero,0(r2)
    6ad4:	10800104 	addi	r2,r2,4
    6ad8:	10fffc36 	bltu	r2,r3,6acc <__alt_data_end+0xfffbd6ec>
    6adc:	8c63883a 	add	r17,r17,r17
    6ae0:	b5800504 	addi	r22,r22,20
    6ae4:	8c63883a 	add	r17,r17,r17
    6ae8:	94800504 	addi	r18,r18,20
    6aec:	8421883a 	add	r16,r16,r16
    6af0:	b463883a 	add	r17,r22,r17
    6af4:	8421883a 	add	r16,r16,r16
    6af8:	dd800015 	stw	r22,0(sp)
    6afc:	dc800415 	stw	r18,16(sp)
    6b00:	dc400515 	stw	r17,20(sp)
    6b04:	9429883a 	add	r20,r18,r16
    6b08:	b4404f2e 	bgeu	r22,r17,6c48 <__multiply+0x214>
    6b0c:	d8c00017 	ldw	r3,0(sp)
    6b10:	1c800017 	ldw	r18,0(r3)
    6b14:	947fffcc 	andi	r17,r18,65535
    6b18:	88001e26 	beq	r17,zero,6b94 <__multiply+0x160>
    6b1c:	dd800117 	ldw	r22,4(sp)
    6b20:	dd400417 	ldw	r21,16(sp)
    6b24:	0027883a 	mov	r19,zero
    6b28:	ac800017 	ldw	r18,0(r21)
    6b2c:	b4000017 	ldw	r16,0(r22)
    6b30:	880b883a 	mov	r5,r17
    6b34:	913fffcc 	andi	r4,r18,65535
    6b38:	000ade00 	call	ade0 <__mulsi3>
    6b3c:	9008d43a 	srli	r4,r18,16
    6b40:	84bfffcc 	andi	r18,r16,65535
    6b44:	1485883a 	add	r2,r2,r18
    6b48:	14e5883a 	add	r18,r2,r19
    6b4c:	8020d43a 	srli	r16,r16,16
    6b50:	9026d43a 	srli	r19,r18,16
    6b54:	880b883a 	mov	r5,r17
    6b58:	000ade00 	call	ade0 <__mulsi3>
    6b5c:	1405883a 	add	r2,r2,r16
    6b60:	14e1883a 	add	r16,r2,r19
    6b64:	90ffffcc 	andi	r3,r18,65535
    6b68:	8024943a 	slli	r18,r16,16
    6b6c:	ad400104 	addi	r21,r21,4
    6b70:	b005883a 	mov	r2,r22
    6b74:	90c6b03a 	or	r3,r18,r3
    6b78:	b0c00015 	stw	r3,0(r22)
    6b7c:	8026d43a 	srli	r19,r16,16
    6b80:	b5800104 	addi	r22,r22,4
    6b84:	ad3fe836 	bltu	r21,r20,6b28 <__alt_data_end+0xfffbd748>
    6b88:	d8c00017 	ldw	r3,0(sp)
    6b8c:	14c00115 	stw	r19,4(r2)
    6b90:	1c800017 	ldw	r18,0(r3)
    6b94:	9024d43a 	srli	r18,r18,16
    6b98:	90002226 	beq	r18,zero,6c24 <__multiply+0x1f0>
    6b9c:	d8c00117 	ldw	r3,4(sp)
    6ba0:	dd800417 	ldw	r22,16(sp)
    6ba4:	002f883a 	mov	r23,zero
    6ba8:	1f000017 	ldw	fp,0(r3)
    6bac:	1823883a 	mov	r17,r3
    6bb0:	182b883a 	mov	r21,r3
    6bb4:	e021883a 	mov	r16,fp
    6bb8:	00000106 	br	6bc0 <__multiply+0x18c>
    6bbc:	982b883a 	mov	r21,r19
    6bc0:	b100000b 	ldhu	r4,0(r22)
    6bc4:	8020d43a 	srli	r16,r16,16
    6bc8:	900b883a 	mov	r5,r18
    6bcc:	000ade00 	call	ade0 <__mulsi3>
    6bd0:	1405883a 	add	r2,r2,r16
    6bd4:	15ef883a 	add	r23,r2,r23
    6bd8:	b804943a 	slli	r2,r23,16
    6bdc:	e0ffffcc 	andi	r3,fp,65535
    6be0:	8c400104 	addi	r17,r17,4
    6be4:	10c6b03a 	or	r3,r2,r3
    6be8:	88ffff15 	stw	r3,-4(r17)
    6bec:	b5800104 	addi	r22,r22,4
    6bf0:	b13fff17 	ldw	r4,-4(r22)
    6bf4:	acc00104 	addi	r19,r21,4
    6bf8:	900b883a 	mov	r5,r18
    6bfc:	2008d43a 	srli	r4,r4,16
    6c00:	9c000017 	ldw	r16,0(r19)
    6c04:	000ade00 	call	ade0 <__mulsi3>
    6c08:	b806d43a 	srli	r3,r23,16
    6c0c:	813fffcc 	andi	r4,r16,65535
    6c10:	1105883a 	add	r2,r2,r4
    6c14:	10f9883a 	add	fp,r2,r3
    6c18:	e02ed43a 	srli	r23,fp,16
    6c1c:	b53fe736 	bltu	r22,r20,6bbc <__alt_data_end+0xfffbd7dc>
    6c20:	af000115 	stw	fp,4(r21)
    6c24:	d8c00017 	ldw	r3,0(sp)
    6c28:	d9000517 	ldw	r4,20(sp)
    6c2c:	18c00104 	addi	r3,r3,4
    6c30:	d8c00015 	stw	r3,0(sp)
    6c34:	d8c00117 	ldw	r3,4(sp)
    6c38:	18c00104 	addi	r3,r3,4
    6c3c:	d8c00115 	stw	r3,4(sp)
    6c40:	d8c00017 	ldw	r3,0(sp)
    6c44:	193fb136 	bltu	r3,r4,6b0c <__alt_data_end+0xfffbd72c>
    6c48:	d8c00217 	ldw	r3,8(sp)
    6c4c:	00c00c0e 	bge	zero,r3,6c80 <__multiply+0x24c>
    6c50:	d8c00317 	ldw	r3,12(sp)
    6c54:	18bfff17 	ldw	r2,-4(r3)
    6c58:	1d7fff04 	addi	r21,r3,-4
    6c5c:	10000326 	beq	r2,zero,6c6c <__multiply+0x238>
    6c60:	00000706 	br	6c80 <__multiply+0x24c>
    6c64:	a8800017 	ldw	r2,0(r21)
    6c68:	1000051e 	bne	r2,zero,6c80 <__multiply+0x24c>
    6c6c:	d8c00217 	ldw	r3,8(sp)
    6c70:	ad7fff04 	addi	r21,r21,-4
    6c74:	18ffffc4 	addi	r3,r3,-1
    6c78:	d8c00215 	stw	r3,8(sp)
    6c7c:	183ff91e 	bne	r3,zero,6c64 <__alt_data_end+0xfffbd884>
    6c80:	d8c00617 	ldw	r3,24(sp)
    6c84:	d9000217 	ldw	r4,8(sp)
    6c88:	1805883a 	mov	r2,r3
    6c8c:	19000415 	stw	r4,16(r3)
    6c90:	dfc01017 	ldw	ra,64(sp)
    6c94:	df000f17 	ldw	fp,60(sp)
    6c98:	ddc00e17 	ldw	r23,56(sp)
    6c9c:	dd800d17 	ldw	r22,52(sp)
    6ca0:	dd400c17 	ldw	r21,48(sp)
    6ca4:	dd000b17 	ldw	r20,44(sp)
    6ca8:	dcc00a17 	ldw	r19,40(sp)
    6cac:	dc800917 	ldw	r18,36(sp)
    6cb0:	dc400817 	ldw	r17,32(sp)
    6cb4:	dc000717 	ldw	r16,28(sp)
    6cb8:	dec01104 	addi	sp,sp,68
    6cbc:	f800283a 	ret

00006cc0 <__pow5mult>:
    6cc0:	defffa04 	addi	sp,sp,-24
    6cc4:	dcc00315 	stw	r19,12(sp)
    6cc8:	dc000015 	stw	r16,0(sp)
    6ccc:	dfc00515 	stw	ra,20(sp)
    6cd0:	dd000415 	stw	r20,16(sp)
    6cd4:	dc800215 	stw	r18,8(sp)
    6cd8:	dc400115 	stw	r17,4(sp)
    6cdc:	308000cc 	andi	r2,r6,3
    6ce0:	3021883a 	mov	r16,r6
    6ce4:	2027883a 	mov	r19,r4
    6ce8:	10002f1e 	bne	r2,zero,6da8 <__pow5mult+0xe8>
    6cec:	2825883a 	mov	r18,r5
    6cf0:	8021d0ba 	srai	r16,r16,2
    6cf4:	80001a26 	beq	r16,zero,6d60 <__pow5mult+0xa0>
    6cf8:	9c401217 	ldw	r17,72(r19)
    6cfc:	8800061e 	bne	r17,zero,6d18 <__pow5mult+0x58>
    6d00:	00003406 	br	6dd4 <__pow5mult+0x114>
    6d04:	8021d07a 	srai	r16,r16,1
    6d08:	80001526 	beq	r16,zero,6d60 <__pow5mult+0xa0>
    6d0c:	88800017 	ldw	r2,0(r17)
    6d10:	10001c26 	beq	r2,zero,6d84 <__pow5mult+0xc4>
    6d14:	1023883a 	mov	r17,r2
    6d18:	8080004c 	andi	r2,r16,1
    6d1c:	103ff926 	beq	r2,zero,6d04 <__alt_data_end+0xfffbd924>
    6d20:	880d883a 	mov	r6,r17
    6d24:	900b883a 	mov	r5,r18
    6d28:	9809883a 	mov	r4,r19
    6d2c:	0006a340 	call	6a34 <__multiply>
    6d30:	90001b26 	beq	r18,zero,6da0 <__pow5mult+0xe0>
    6d34:	91000117 	ldw	r4,4(r18)
    6d38:	98c01317 	ldw	r3,76(r19)
    6d3c:	8021d07a 	srai	r16,r16,1
    6d40:	2109883a 	add	r4,r4,r4
    6d44:	2109883a 	add	r4,r4,r4
    6d48:	1907883a 	add	r3,r3,r4
    6d4c:	19000017 	ldw	r4,0(r3)
    6d50:	91000015 	stw	r4,0(r18)
    6d54:	1c800015 	stw	r18,0(r3)
    6d58:	1025883a 	mov	r18,r2
    6d5c:	803feb1e 	bne	r16,zero,6d0c <__alt_data_end+0xfffbd92c>
    6d60:	9005883a 	mov	r2,r18
    6d64:	dfc00517 	ldw	ra,20(sp)
    6d68:	dd000417 	ldw	r20,16(sp)
    6d6c:	dcc00317 	ldw	r19,12(sp)
    6d70:	dc800217 	ldw	r18,8(sp)
    6d74:	dc400117 	ldw	r17,4(sp)
    6d78:	dc000017 	ldw	r16,0(sp)
    6d7c:	dec00604 	addi	sp,sp,24
    6d80:	f800283a 	ret
    6d84:	880d883a 	mov	r6,r17
    6d88:	880b883a 	mov	r5,r17
    6d8c:	9809883a 	mov	r4,r19
    6d90:	0006a340 	call	6a34 <__multiply>
    6d94:	88800015 	stw	r2,0(r17)
    6d98:	10000015 	stw	zero,0(r2)
    6d9c:	003fdd06 	br	6d14 <__alt_data_end+0xfffbd934>
    6da0:	1025883a 	mov	r18,r2
    6da4:	003fd706 	br	6d04 <__alt_data_end+0xfffbd924>
    6da8:	10bfffc4 	addi	r2,r2,-1
    6dac:	1085883a 	add	r2,r2,r2
    6db0:	00c00074 	movhi	r3,1
    6db4:	18c1af04 	addi	r3,r3,1724
    6db8:	1085883a 	add	r2,r2,r2
    6dbc:	1885883a 	add	r2,r3,r2
    6dc0:	11800017 	ldw	r6,0(r2)
    6dc4:	000f883a 	mov	r7,zero
    6dc8:	00066940 	call	6694 <__multadd>
    6dcc:	1025883a 	mov	r18,r2
    6dd0:	003fc706 	br	6cf0 <__alt_data_end+0xfffbd910>
    6dd4:	05000044 	movi	r20,1
    6dd8:	a00b883a 	mov	r5,r20
    6ddc:	9809883a 	mov	r4,r19
    6de0:	00065c40 	call	65c4 <_Balloc>
    6de4:	1023883a 	mov	r17,r2
    6de8:	00809c44 	movi	r2,625
    6dec:	88800515 	stw	r2,20(r17)
    6df0:	8d000415 	stw	r20,16(r17)
    6df4:	9c401215 	stw	r17,72(r19)
    6df8:	88000015 	stw	zero,0(r17)
    6dfc:	003fc606 	br	6d18 <__alt_data_end+0xfffbd938>

00006e00 <__lshift>:
    6e00:	defff904 	addi	sp,sp,-28
    6e04:	dd400515 	stw	r21,20(sp)
    6e08:	dcc00315 	stw	r19,12(sp)
    6e0c:	302bd17a 	srai	r21,r6,5
    6e10:	2cc00417 	ldw	r19,16(r5)
    6e14:	28800217 	ldw	r2,8(r5)
    6e18:	dd000415 	stw	r20,16(sp)
    6e1c:	ace7883a 	add	r19,r21,r19
    6e20:	dc800215 	stw	r18,8(sp)
    6e24:	dc400115 	stw	r17,4(sp)
    6e28:	dc000015 	stw	r16,0(sp)
    6e2c:	dfc00615 	stw	ra,24(sp)
    6e30:	9c000044 	addi	r16,r19,1
    6e34:	2823883a 	mov	r17,r5
    6e38:	3029883a 	mov	r20,r6
    6e3c:	2025883a 	mov	r18,r4
    6e40:	29400117 	ldw	r5,4(r5)
    6e44:	1400030e 	bge	r2,r16,6e54 <__lshift+0x54>
    6e48:	1085883a 	add	r2,r2,r2
    6e4c:	29400044 	addi	r5,r5,1
    6e50:	143ffd16 	blt	r2,r16,6e48 <__alt_data_end+0xfffbda68>
    6e54:	9009883a 	mov	r4,r18
    6e58:	00065c40 	call	65c4 <_Balloc>
    6e5c:	10c00504 	addi	r3,r2,20
    6e60:	0540070e 	bge	zero,r21,6e80 <__lshift+0x80>
    6e64:	ad6b883a 	add	r21,r21,r21
    6e68:	ad6b883a 	add	r21,r21,r21
    6e6c:	1809883a 	mov	r4,r3
    6e70:	1d47883a 	add	r3,r3,r21
    6e74:	20000015 	stw	zero,0(r4)
    6e78:	21000104 	addi	r4,r4,4
    6e7c:	193ffd1e 	bne	r3,r4,6e74 <__alt_data_end+0xfffbda94>
    6e80:	8a000417 	ldw	r8,16(r17)
    6e84:	89000504 	addi	r4,r17,20
    6e88:	a18007cc 	andi	r6,r20,31
    6e8c:	4211883a 	add	r8,r8,r8
    6e90:	4211883a 	add	r8,r8,r8
    6e94:	2211883a 	add	r8,r4,r8
    6e98:	30002326 	beq	r6,zero,6f28 <__lshift+0x128>
    6e9c:	02400804 	movi	r9,32
    6ea0:	4993c83a 	sub	r9,r9,r6
    6ea4:	000b883a 	mov	r5,zero
    6ea8:	21c00017 	ldw	r7,0(r4)
    6eac:	1815883a 	mov	r10,r3
    6eb0:	18c00104 	addi	r3,r3,4
    6eb4:	398e983a 	sll	r7,r7,r6
    6eb8:	21000104 	addi	r4,r4,4
    6ebc:	394ab03a 	or	r5,r7,r5
    6ec0:	197fff15 	stw	r5,-4(r3)
    6ec4:	217fff17 	ldw	r5,-4(r4)
    6ec8:	2a4ad83a 	srl	r5,r5,r9
    6ecc:	223ff636 	bltu	r4,r8,6ea8 <__alt_data_end+0xfffbdac8>
    6ed0:	51400115 	stw	r5,4(r10)
    6ed4:	28001a1e 	bne	r5,zero,6f40 <__lshift+0x140>
    6ed8:	843fffc4 	addi	r16,r16,-1
    6edc:	14000415 	stw	r16,16(r2)
    6ee0:	88000826 	beq	r17,zero,6f04 <__lshift+0x104>
    6ee4:	89000117 	ldw	r4,4(r17)
    6ee8:	90c01317 	ldw	r3,76(r18)
    6eec:	2109883a 	add	r4,r4,r4
    6ef0:	2109883a 	add	r4,r4,r4
    6ef4:	1907883a 	add	r3,r3,r4
    6ef8:	19000017 	ldw	r4,0(r3)
    6efc:	89000015 	stw	r4,0(r17)
    6f00:	1c400015 	stw	r17,0(r3)
    6f04:	dfc00617 	ldw	ra,24(sp)
    6f08:	dd400517 	ldw	r21,20(sp)
    6f0c:	dd000417 	ldw	r20,16(sp)
    6f10:	dcc00317 	ldw	r19,12(sp)
    6f14:	dc800217 	ldw	r18,8(sp)
    6f18:	dc400117 	ldw	r17,4(sp)
    6f1c:	dc000017 	ldw	r16,0(sp)
    6f20:	dec00704 	addi	sp,sp,28
    6f24:	f800283a 	ret
    6f28:	21400017 	ldw	r5,0(r4)
    6f2c:	18c00104 	addi	r3,r3,4
    6f30:	21000104 	addi	r4,r4,4
    6f34:	197fff15 	stw	r5,-4(r3)
    6f38:	223ffb36 	bltu	r4,r8,6f28 <__alt_data_end+0xfffbdb48>
    6f3c:	003fe606 	br	6ed8 <__alt_data_end+0xfffbdaf8>
    6f40:	9c000084 	addi	r16,r19,2
    6f44:	003fe406 	br	6ed8 <__alt_data_end+0xfffbdaf8>

00006f48 <__mcmp>:
    6f48:	20800417 	ldw	r2,16(r4)
    6f4c:	28c00417 	ldw	r3,16(r5)
    6f50:	10c5c83a 	sub	r2,r2,r3
    6f54:	1000111e 	bne	r2,zero,6f9c <__mcmp+0x54>
    6f58:	18c7883a 	add	r3,r3,r3
    6f5c:	18c7883a 	add	r3,r3,r3
    6f60:	21000504 	addi	r4,r4,20
    6f64:	29400504 	addi	r5,r5,20
    6f68:	20c5883a 	add	r2,r4,r3
    6f6c:	28cb883a 	add	r5,r5,r3
    6f70:	00000106 	br	6f78 <__mcmp+0x30>
    6f74:	20800a2e 	bgeu	r4,r2,6fa0 <__mcmp+0x58>
    6f78:	10bfff04 	addi	r2,r2,-4
    6f7c:	297fff04 	addi	r5,r5,-4
    6f80:	11800017 	ldw	r6,0(r2)
    6f84:	28c00017 	ldw	r3,0(r5)
    6f88:	30fffa26 	beq	r6,r3,6f74 <__alt_data_end+0xfffbdb94>
    6f8c:	30c00236 	bltu	r6,r3,6f98 <__mcmp+0x50>
    6f90:	00800044 	movi	r2,1
    6f94:	f800283a 	ret
    6f98:	00bfffc4 	movi	r2,-1
    6f9c:	f800283a 	ret
    6fa0:	0005883a 	mov	r2,zero
    6fa4:	f800283a 	ret

00006fa8 <__mdiff>:
    6fa8:	28c00417 	ldw	r3,16(r5)
    6fac:	30800417 	ldw	r2,16(r6)
    6fb0:	defffa04 	addi	sp,sp,-24
    6fb4:	dcc00315 	stw	r19,12(sp)
    6fb8:	dc800215 	stw	r18,8(sp)
    6fbc:	dfc00515 	stw	ra,20(sp)
    6fc0:	dd000415 	stw	r20,16(sp)
    6fc4:	dc400115 	stw	r17,4(sp)
    6fc8:	dc000015 	stw	r16,0(sp)
    6fcc:	1887c83a 	sub	r3,r3,r2
    6fd0:	2825883a 	mov	r18,r5
    6fd4:	3027883a 	mov	r19,r6
    6fd8:	1800141e 	bne	r3,zero,702c <__mdiff+0x84>
    6fdc:	1085883a 	add	r2,r2,r2
    6fe0:	1085883a 	add	r2,r2,r2
    6fe4:	2a000504 	addi	r8,r5,20
    6fe8:	34000504 	addi	r16,r6,20
    6fec:	4087883a 	add	r3,r8,r2
    6ff0:	8085883a 	add	r2,r16,r2
    6ff4:	00000106 	br	6ffc <__mdiff+0x54>
    6ff8:	40c0592e 	bgeu	r8,r3,7160 <__mdiff+0x1b8>
    6ffc:	18ffff04 	addi	r3,r3,-4
    7000:	10bfff04 	addi	r2,r2,-4
    7004:	19c00017 	ldw	r7,0(r3)
    7008:	11400017 	ldw	r5,0(r2)
    700c:	397ffa26 	beq	r7,r5,6ff8 <__alt_data_end+0xfffbdc18>
    7010:	3940592e 	bgeu	r7,r5,7178 <__mdiff+0x1d0>
    7014:	9005883a 	mov	r2,r18
    7018:	4023883a 	mov	r17,r8
    701c:	9825883a 	mov	r18,r19
    7020:	05000044 	movi	r20,1
    7024:	1027883a 	mov	r19,r2
    7028:	00000406 	br	703c <__mdiff+0x94>
    702c:	18005616 	blt	r3,zero,7188 <__mdiff+0x1e0>
    7030:	34400504 	addi	r17,r6,20
    7034:	2c000504 	addi	r16,r5,20
    7038:	0029883a 	mov	r20,zero
    703c:	91400117 	ldw	r5,4(r18)
    7040:	00065c40 	call	65c4 <_Balloc>
    7044:	92400417 	ldw	r9,16(r18)
    7048:	9b000417 	ldw	r12,16(r19)
    704c:	12c00504 	addi	r11,r2,20
    7050:	4a51883a 	add	r8,r9,r9
    7054:	6319883a 	add	r12,r12,r12
    7058:	4211883a 	add	r8,r8,r8
    705c:	6319883a 	add	r12,r12,r12
    7060:	15000315 	stw	r20,12(r2)
    7064:	8211883a 	add	r8,r16,r8
    7068:	8b19883a 	add	r12,r17,r12
    706c:	0007883a 	mov	r3,zero
    7070:	81400017 	ldw	r5,0(r16)
    7074:	89c00017 	ldw	r7,0(r17)
    7078:	59800104 	addi	r6,r11,4
    707c:	293fffcc 	andi	r4,r5,65535
    7080:	20c7883a 	add	r3,r4,r3
    7084:	393fffcc 	andi	r4,r7,65535
    7088:	1909c83a 	sub	r4,r3,r4
    708c:	280ad43a 	srli	r5,r5,16
    7090:	380ed43a 	srli	r7,r7,16
    7094:	2007d43a 	srai	r3,r4,16
    7098:	213fffcc 	andi	r4,r4,65535
    709c:	29cbc83a 	sub	r5,r5,r7
    70a0:	28c7883a 	add	r3,r5,r3
    70a4:	180a943a 	slli	r5,r3,16
    70a8:	8c400104 	addi	r17,r17,4
    70ac:	84000104 	addi	r16,r16,4
    70b0:	2908b03a 	or	r4,r5,r4
    70b4:	59000015 	stw	r4,0(r11)
    70b8:	1807d43a 	srai	r3,r3,16
    70bc:	3015883a 	mov	r10,r6
    70c0:	3017883a 	mov	r11,r6
    70c4:	8b3fea36 	bltu	r17,r12,7070 <__alt_data_end+0xfffbdc90>
    70c8:	8200162e 	bgeu	r16,r8,7124 <__mdiff+0x17c>
    70cc:	8017883a 	mov	r11,r16
    70d0:	59400017 	ldw	r5,0(r11)
    70d4:	31800104 	addi	r6,r6,4
    70d8:	5ac00104 	addi	r11,r11,4
    70dc:	293fffcc 	andi	r4,r5,65535
    70e0:	20c7883a 	add	r3,r4,r3
    70e4:	280ed43a 	srli	r7,r5,16
    70e8:	180bd43a 	srai	r5,r3,16
    70ec:	193fffcc 	andi	r4,r3,65535
    70f0:	3947883a 	add	r3,r7,r5
    70f4:	180a943a 	slli	r5,r3,16
    70f8:	1807d43a 	srai	r3,r3,16
    70fc:	2908b03a 	or	r4,r5,r4
    7100:	313fff15 	stw	r4,-4(r6)
    7104:	5a3ff236 	bltu	r11,r8,70d0 <__alt_data_end+0xfffbdcf0>
    7108:	0406303a 	nor	r3,zero,r16
    710c:	1a07883a 	add	r3,r3,r8
    7110:	1806d0ba 	srli	r3,r3,2
    7114:	18c00044 	addi	r3,r3,1
    7118:	18c7883a 	add	r3,r3,r3
    711c:	18c7883a 	add	r3,r3,r3
    7120:	50d5883a 	add	r10,r10,r3
    7124:	50ffff04 	addi	r3,r10,-4
    7128:	2000041e 	bne	r4,zero,713c <__mdiff+0x194>
    712c:	18ffff04 	addi	r3,r3,-4
    7130:	19000017 	ldw	r4,0(r3)
    7134:	4a7fffc4 	addi	r9,r9,-1
    7138:	203ffc26 	beq	r4,zero,712c <__alt_data_end+0xfffbdd4c>
    713c:	12400415 	stw	r9,16(r2)
    7140:	dfc00517 	ldw	ra,20(sp)
    7144:	dd000417 	ldw	r20,16(sp)
    7148:	dcc00317 	ldw	r19,12(sp)
    714c:	dc800217 	ldw	r18,8(sp)
    7150:	dc400117 	ldw	r17,4(sp)
    7154:	dc000017 	ldw	r16,0(sp)
    7158:	dec00604 	addi	sp,sp,24
    715c:	f800283a 	ret
    7160:	000b883a 	mov	r5,zero
    7164:	00065c40 	call	65c4 <_Balloc>
    7168:	00c00044 	movi	r3,1
    716c:	10c00415 	stw	r3,16(r2)
    7170:	10000515 	stw	zero,20(r2)
    7174:	003ff206 	br	7140 <__alt_data_end+0xfffbdd60>
    7178:	8023883a 	mov	r17,r16
    717c:	0029883a 	mov	r20,zero
    7180:	4021883a 	mov	r16,r8
    7184:	003fad06 	br	703c <__alt_data_end+0xfffbdc5c>
    7188:	9005883a 	mov	r2,r18
    718c:	94400504 	addi	r17,r18,20
    7190:	9c000504 	addi	r16,r19,20
    7194:	9825883a 	mov	r18,r19
    7198:	05000044 	movi	r20,1
    719c:	1027883a 	mov	r19,r2
    71a0:	003fa606 	br	703c <__alt_data_end+0xfffbdc5c>

000071a4 <__ulp>:
    71a4:	295ffc2c 	andhi	r5,r5,32752
    71a8:	00bf3034 	movhi	r2,64704
    71ac:	2887883a 	add	r3,r5,r2
    71b0:	00c0020e 	bge	zero,r3,71bc <__ulp+0x18>
    71b4:	0005883a 	mov	r2,zero
    71b8:	f800283a 	ret
    71bc:	00c7c83a 	sub	r3,zero,r3
    71c0:	1807d53a 	srai	r3,r3,20
    71c4:	008004c4 	movi	r2,19
    71c8:	10c00b0e 	bge	r2,r3,71f8 <__ulp+0x54>
    71cc:	18bffb04 	addi	r2,r3,-20
    71d0:	01000784 	movi	r4,30
    71d4:	0007883a 	mov	r3,zero
    71d8:	20800516 	blt	r4,r2,71f0 <__ulp+0x4c>
    71dc:	010007c4 	movi	r4,31
    71e0:	2089c83a 	sub	r4,r4,r2
    71e4:	00800044 	movi	r2,1
    71e8:	1104983a 	sll	r2,r2,r4
    71ec:	f800283a 	ret
    71f0:	00800044 	movi	r2,1
    71f4:	f800283a 	ret
    71f8:	01400234 	movhi	r5,8
    71fc:	28c7d83a 	sra	r3,r5,r3
    7200:	0005883a 	mov	r2,zero
    7204:	f800283a 	ret

00007208 <__b2d>:
    7208:	defffa04 	addi	sp,sp,-24
    720c:	dc000015 	stw	r16,0(sp)
    7210:	24000417 	ldw	r16,16(r4)
    7214:	dc400115 	stw	r17,4(sp)
    7218:	24400504 	addi	r17,r4,20
    721c:	8421883a 	add	r16,r16,r16
    7220:	8421883a 	add	r16,r16,r16
    7224:	8c21883a 	add	r16,r17,r16
    7228:	dc800215 	stw	r18,8(sp)
    722c:	84bfff17 	ldw	r18,-4(r16)
    7230:	dd000415 	stw	r20,16(sp)
    7234:	dcc00315 	stw	r19,12(sp)
    7238:	9009883a 	mov	r4,r18
    723c:	2829883a 	mov	r20,r5
    7240:	dfc00515 	stw	ra,20(sp)
    7244:	00068e00 	call	68e0 <__hi0bits>
    7248:	00c00804 	movi	r3,32
    724c:	1889c83a 	sub	r4,r3,r2
    7250:	a1000015 	stw	r4,0(r20)
    7254:	01000284 	movi	r4,10
    7258:	84ffff04 	addi	r19,r16,-4
    725c:	20801216 	blt	r4,r2,72a8 <__b2d+0xa0>
    7260:	018002c4 	movi	r6,11
    7264:	308dc83a 	sub	r6,r6,r2
    7268:	9186d83a 	srl	r3,r18,r6
    726c:	18cffc34 	orhi	r3,r3,16368
    7270:	8cc0212e 	bgeu	r17,r19,72f8 <__b2d+0xf0>
    7274:	813ffe17 	ldw	r4,-8(r16)
    7278:	218cd83a 	srl	r6,r4,r6
    727c:	10800544 	addi	r2,r2,21
    7280:	9084983a 	sll	r2,r18,r2
    7284:	1184b03a 	or	r2,r2,r6
    7288:	dfc00517 	ldw	ra,20(sp)
    728c:	dd000417 	ldw	r20,16(sp)
    7290:	dcc00317 	ldw	r19,12(sp)
    7294:	dc800217 	ldw	r18,8(sp)
    7298:	dc400117 	ldw	r17,4(sp)
    729c:	dc000017 	ldw	r16,0(sp)
    72a0:	dec00604 	addi	sp,sp,24
    72a4:	f800283a 	ret
    72a8:	8cc00f2e 	bgeu	r17,r19,72e8 <__b2d+0xe0>
    72ac:	117ffd44 	addi	r5,r2,-11
    72b0:	80bffe17 	ldw	r2,-8(r16)
    72b4:	28000e26 	beq	r5,zero,72f0 <__b2d+0xe8>
    72b8:	1949c83a 	sub	r4,r3,r5
    72bc:	9164983a 	sll	r18,r18,r5
    72c0:	1106d83a 	srl	r3,r2,r4
    72c4:	81bffe04 	addi	r6,r16,-8
    72c8:	948ffc34 	orhi	r18,r18,16368
    72cc:	90c6b03a 	or	r3,r18,r3
    72d0:	89800e2e 	bgeu	r17,r6,730c <__b2d+0x104>
    72d4:	81bffd17 	ldw	r6,-12(r16)
    72d8:	1144983a 	sll	r2,r2,r5
    72dc:	310ad83a 	srl	r5,r6,r4
    72e0:	2884b03a 	or	r2,r5,r2
    72e4:	003fe806 	br	7288 <__alt_data_end+0xfffbdea8>
    72e8:	10bffd44 	addi	r2,r2,-11
    72ec:	1000041e 	bne	r2,zero,7300 <__b2d+0xf8>
    72f0:	90cffc34 	orhi	r3,r18,16368
    72f4:	003fe406 	br	7288 <__alt_data_end+0xfffbdea8>
    72f8:	000d883a 	mov	r6,zero
    72fc:	003fdf06 	br	727c <__alt_data_end+0xfffbde9c>
    7300:	90a4983a 	sll	r18,r18,r2
    7304:	0005883a 	mov	r2,zero
    7308:	003ff906 	br	72f0 <__alt_data_end+0xfffbdf10>
    730c:	1144983a 	sll	r2,r2,r5
    7310:	003fdd06 	br	7288 <__alt_data_end+0xfffbdea8>

00007314 <__d2b>:
    7314:	defff804 	addi	sp,sp,-32
    7318:	dc000215 	stw	r16,8(sp)
    731c:	3021883a 	mov	r16,r6
    7320:	dc400315 	stw	r17,12(sp)
    7324:	8022907a 	slli	r17,r16,1
    7328:	dd000615 	stw	r20,24(sp)
    732c:	2829883a 	mov	r20,r5
    7330:	01400044 	movi	r5,1
    7334:	dcc00515 	stw	r19,20(sp)
    7338:	dc800415 	stw	r18,16(sp)
    733c:	dfc00715 	stw	ra,28(sp)
    7340:	3825883a 	mov	r18,r7
    7344:	8822d57a 	srli	r17,r17,21
    7348:	00065c40 	call	65c4 <_Balloc>
    734c:	1027883a 	mov	r19,r2
    7350:	00800434 	movhi	r2,16
    7354:	10bfffc4 	addi	r2,r2,-1
    7358:	808c703a 	and	r6,r16,r2
    735c:	88000126 	beq	r17,zero,7364 <__d2b+0x50>
    7360:	31800434 	orhi	r6,r6,16
    7364:	d9800015 	stw	r6,0(sp)
    7368:	a0002426 	beq	r20,zero,73fc <__d2b+0xe8>
    736c:	d9000104 	addi	r4,sp,4
    7370:	dd000115 	stw	r20,4(sp)
    7374:	00069480 	call	6948 <__lo0bits>
    7378:	d8c00017 	ldw	r3,0(sp)
    737c:	10002f1e 	bne	r2,zero,743c <__d2b+0x128>
    7380:	d9000117 	ldw	r4,4(sp)
    7384:	99000515 	stw	r4,20(r19)
    7388:	1821003a 	cmpeq	r16,r3,zero
    738c:	01000084 	movi	r4,2
    7390:	2421c83a 	sub	r16,r4,r16
    7394:	98c00615 	stw	r3,24(r19)
    7398:	9c000415 	stw	r16,16(r19)
    739c:	88001f1e 	bne	r17,zero,741c <__d2b+0x108>
    73a0:	10bef384 	addi	r2,r2,-1074
    73a4:	90800015 	stw	r2,0(r18)
    73a8:	00900034 	movhi	r2,16384
    73ac:	10bfffc4 	addi	r2,r2,-1
    73b0:	8085883a 	add	r2,r16,r2
    73b4:	1085883a 	add	r2,r2,r2
    73b8:	1085883a 	add	r2,r2,r2
    73bc:	9885883a 	add	r2,r19,r2
    73c0:	11000517 	ldw	r4,20(r2)
    73c4:	8020917a 	slli	r16,r16,5
    73c8:	00068e00 	call	68e0 <__hi0bits>
    73cc:	d8c00817 	ldw	r3,32(sp)
    73d0:	8085c83a 	sub	r2,r16,r2
    73d4:	18800015 	stw	r2,0(r3)
    73d8:	9805883a 	mov	r2,r19
    73dc:	dfc00717 	ldw	ra,28(sp)
    73e0:	dd000617 	ldw	r20,24(sp)
    73e4:	dcc00517 	ldw	r19,20(sp)
    73e8:	dc800417 	ldw	r18,16(sp)
    73ec:	dc400317 	ldw	r17,12(sp)
    73f0:	dc000217 	ldw	r16,8(sp)
    73f4:	dec00804 	addi	sp,sp,32
    73f8:	f800283a 	ret
    73fc:	d809883a 	mov	r4,sp
    7400:	00069480 	call	6948 <__lo0bits>
    7404:	d8c00017 	ldw	r3,0(sp)
    7408:	04000044 	movi	r16,1
    740c:	9c000415 	stw	r16,16(r19)
    7410:	98c00515 	stw	r3,20(r19)
    7414:	10800804 	addi	r2,r2,32
    7418:	883fe126 	beq	r17,zero,73a0 <__alt_data_end+0xfffbdfc0>
    741c:	00c00d44 	movi	r3,53
    7420:	8c7ef344 	addi	r17,r17,-1075
    7424:	88a3883a 	add	r17,r17,r2
    7428:	1885c83a 	sub	r2,r3,r2
    742c:	d8c00817 	ldw	r3,32(sp)
    7430:	94400015 	stw	r17,0(r18)
    7434:	18800015 	stw	r2,0(r3)
    7438:	003fe706 	br	73d8 <__alt_data_end+0xfffbdff8>
    743c:	01000804 	movi	r4,32
    7440:	2089c83a 	sub	r4,r4,r2
    7444:	1908983a 	sll	r4,r3,r4
    7448:	d9400117 	ldw	r5,4(sp)
    744c:	1886d83a 	srl	r3,r3,r2
    7450:	2148b03a 	or	r4,r4,r5
    7454:	99000515 	stw	r4,20(r19)
    7458:	d8c00015 	stw	r3,0(sp)
    745c:	003fca06 	br	7388 <__alt_data_end+0xfffbdfa8>

00007460 <__ratio>:
    7460:	defff904 	addi	sp,sp,-28
    7464:	dc400315 	stw	r17,12(sp)
    7468:	2823883a 	mov	r17,r5
    746c:	d9400104 	addi	r5,sp,4
    7470:	dfc00615 	stw	ra,24(sp)
    7474:	dcc00515 	stw	r19,20(sp)
    7478:	dc800415 	stw	r18,16(sp)
    747c:	2027883a 	mov	r19,r4
    7480:	dc000215 	stw	r16,8(sp)
    7484:	00072080 	call	7208 <__b2d>
    7488:	d80b883a 	mov	r5,sp
    748c:	8809883a 	mov	r4,r17
    7490:	1025883a 	mov	r18,r2
    7494:	1821883a 	mov	r16,r3
    7498:	00072080 	call	7208 <__b2d>
    749c:	8a000417 	ldw	r8,16(r17)
    74a0:	99000417 	ldw	r4,16(r19)
    74a4:	d9400117 	ldw	r5,4(sp)
    74a8:	2209c83a 	sub	r4,r4,r8
    74ac:	2010917a 	slli	r8,r4,5
    74b0:	d9000017 	ldw	r4,0(sp)
    74b4:	2909c83a 	sub	r4,r5,r4
    74b8:	4109883a 	add	r4,r8,r4
    74bc:	01000e0e 	bge	zero,r4,74f8 <__ratio+0x98>
    74c0:	2008953a 	slli	r4,r4,20
    74c4:	2421883a 	add	r16,r4,r16
    74c8:	100d883a 	mov	r6,r2
    74cc:	180f883a 	mov	r7,r3
    74d0:	9009883a 	mov	r4,r18
    74d4:	800b883a 	mov	r5,r16
    74d8:	000b6b40 	call	b6b4 <__divdf3>
    74dc:	dfc00617 	ldw	ra,24(sp)
    74e0:	dcc00517 	ldw	r19,20(sp)
    74e4:	dc800417 	ldw	r18,16(sp)
    74e8:	dc400317 	ldw	r17,12(sp)
    74ec:	dc000217 	ldw	r16,8(sp)
    74f0:	dec00704 	addi	sp,sp,28
    74f4:	f800283a 	ret
    74f8:	2008953a 	slli	r4,r4,20
    74fc:	1907c83a 	sub	r3,r3,r4
    7500:	003ff106 	br	74c8 <__alt_data_end+0xfffbe0e8>

00007504 <_mprec_log10>:
    7504:	defffe04 	addi	sp,sp,-8
    7508:	dc000015 	stw	r16,0(sp)
    750c:	dfc00115 	stw	ra,4(sp)
    7510:	008005c4 	movi	r2,23
    7514:	2021883a 	mov	r16,r4
    7518:	11000d0e 	bge	r2,r4,7550 <_mprec_log10+0x4c>
    751c:	0005883a 	mov	r2,zero
    7520:	00cffc34 	movhi	r3,16368
    7524:	843fffc4 	addi	r16,r16,-1
    7528:	000d883a 	mov	r6,zero
    752c:	01d00934 	movhi	r7,16420
    7530:	1009883a 	mov	r4,r2
    7534:	180b883a 	mov	r5,r3
    7538:	000c2dc0 	call	c2dc <__muldf3>
    753c:	803ff91e 	bne	r16,zero,7524 <__alt_data_end+0xfffbe144>
    7540:	dfc00117 	ldw	ra,4(sp)
    7544:	dc000017 	ldw	r16,0(sp)
    7548:	dec00204 	addi	sp,sp,8
    754c:	f800283a 	ret
    7550:	202090fa 	slli	r16,r4,3
    7554:	00800074 	movhi	r2,1
    7558:	1081c604 	addi	r2,r2,1816
    755c:	1421883a 	add	r16,r2,r16
    7560:	80800017 	ldw	r2,0(r16)
    7564:	80c00117 	ldw	r3,4(r16)
    7568:	dfc00117 	ldw	ra,4(sp)
    756c:	dc000017 	ldw	r16,0(sp)
    7570:	dec00204 	addi	sp,sp,8
    7574:	f800283a 	ret

00007578 <__copybits>:
    7578:	297fffc4 	addi	r5,r5,-1
    757c:	280fd17a 	srai	r7,r5,5
    7580:	30c00417 	ldw	r3,16(r6)
    7584:	30800504 	addi	r2,r6,20
    7588:	39c00044 	addi	r7,r7,1
    758c:	18c7883a 	add	r3,r3,r3
    7590:	39cf883a 	add	r7,r7,r7
    7594:	18c7883a 	add	r3,r3,r3
    7598:	39cf883a 	add	r7,r7,r7
    759c:	10c7883a 	add	r3,r2,r3
    75a0:	21cf883a 	add	r7,r4,r7
    75a4:	10c00d2e 	bgeu	r2,r3,75dc <__copybits+0x64>
    75a8:	200b883a 	mov	r5,r4
    75ac:	12000017 	ldw	r8,0(r2)
    75b0:	29400104 	addi	r5,r5,4
    75b4:	10800104 	addi	r2,r2,4
    75b8:	2a3fff15 	stw	r8,-4(r5)
    75bc:	10fffb36 	bltu	r2,r3,75ac <__alt_data_end+0xfffbe1cc>
    75c0:	1985c83a 	sub	r2,r3,r6
    75c4:	10bffac4 	addi	r2,r2,-21
    75c8:	1004d0ba 	srli	r2,r2,2
    75cc:	10800044 	addi	r2,r2,1
    75d0:	1085883a 	add	r2,r2,r2
    75d4:	1085883a 	add	r2,r2,r2
    75d8:	2089883a 	add	r4,r4,r2
    75dc:	21c0032e 	bgeu	r4,r7,75ec <__copybits+0x74>
    75e0:	20000015 	stw	zero,0(r4)
    75e4:	21000104 	addi	r4,r4,4
    75e8:	21fffd36 	bltu	r4,r7,75e0 <__alt_data_end+0xfffbe200>
    75ec:	f800283a 	ret

000075f0 <__any_on>:
    75f0:	20c00417 	ldw	r3,16(r4)
    75f4:	2805d17a 	srai	r2,r5,5
    75f8:	21000504 	addi	r4,r4,20
    75fc:	18800d0e 	bge	r3,r2,7634 <__any_on+0x44>
    7600:	18c7883a 	add	r3,r3,r3
    7604:	18c7883a 	add	r3,r3,r3
    7608:	20c7883a 	add	r3,r4,r3
    760c:	20c0192e 	bgeu	r4,r3,7674 <__any_on+0x84>
    7610:	18bfff17 	ldw	r2,-4(r3)
    7614:	18ffff04 	addi	r3,r3,-4
    7618:	1000041e 	bne	r2,zero,762c <__any_on+0x3c>
    761c:	20c0142e 	bgeu	r4,r3,7670 <__any_on+0x80>
    7620:	18ffff04 	addi	r3,r3,-4
    7624:	19400017 	ldw	r5,0(r3)
    7628:	283ffc26 	beq	r5,zero,761c <__alt_data_end+0xfffbe23c>
    762c:	00800044 	movi	r2,1
    7630:	f800283a 	ret
    7634:	10c00a0e 	bge	r2,r3,7660 <__any_on+0x70>
    7638:	1085883a 	add	r2,r2,r2
    763c:	1085883a 	add	r2,r2,r2
    7640:	294007cc 	andi	r5,r5,31
    7644:	2087883a 	add	r3,r4,r2
    7648:	283ff026 	beq	r5,zero,760c <__alt_data_end+0xfffbe22c>
    764c:	19800017 	ldw	r6,0(r3)
    7650:	3144d83a 	srl	r2,r6,r5
    7654:	114a983a 	sll	r5,r2,r5
    7658:	317ff41e 	bne	r6,r5,762c <__alt_data_end+0xfffbe24c>
    765c:	003feb06 	br	760c <__alt_data_end+0xfffbe22c>
    7660:	1085883a 	add	r2,r2,r2
    7664:	1085883a 	add	r2,r2,r2
    7668:	2087883a 	add	r3,r4,r2
    766c:	003fe706 	br	760c <__alt_data_end+0xfffbe22c>
    7670:	f800283a 	ret
    7674:	0005883a 	mov	r2,zero
    7678:	f800283a 	ret

0000767c <_putc_r>:
    767c:	defffc04 	addi	sp,sp,-16
    7680:	dc000215 	stw	r16,8(sp)
    7684:	dfc00315 	stw	ra,12(sp)
    7688:	2021883a 	mov	r16,r4
    768c:	20000226 	beq	r4,zero,7698 <_putc_r+0x1c>
    7690:	20800e17 	ldw	r2,56(r4)
    7694:	10001b26 	beq	r2,zero,7704 <_putc_r+0x88>
    7698:	30800217 	ldw	r2,8(r6)
    769c:	10bfffc4 	addi	r2,r2,-1
    76a0:	30800215 	stw	r2,8(r6)
    76a4:	10000a16 	blt	r2,zero,76d0 <_putc_r+0x54>
    76a8:	30800017 	ldw	r2,0(r6)
    76ac:	11400005 	stb	r5,0(r2)
    76b0:	30800017 	ldw	r2,0(r6)
    76b4:	10c00044 	addi	r3,r2,1
    76b8:	30c00015 	stw	r3,0(r6)
    76bc:	10800003 	ldbu	r2,0(r2)
    76c0:	dfc00317 	ldw	ra,12(sp)
    76c4:	dc000217 	ldw	r16,8(sp)
    76c8:	dec00404 	addi	sp,sp,16
    76cc:	f800283a 	ret
    76d0:	30c00617 	ldw	r3,24(r6)
    76d4:	10c00616 	blt	r2,r3,76f0 <_putc_r+0x74>
    76d8:	30800017 	ldw	r2,0(r6)
    76dc:	00c00284 	movi	r3,10
    76e0:	11400005 	stb	r5,0(r2)
    76e4:	30800017 	ldw	r2,0(r6)
    76e8:	11400003 	ldbu	r5,0(r2)
    76ec:	28fff11e 	bne	r5,r3,76b4 <__alt_data_end+0xfffbe2d4>
    76f0:	8009883a 	mov	r4,r16
    76f4:	dfc00317 	ldw	ra,12(sp)
    76f8:	dc000217 	ldw	r16,8(sp)
    76fc:	dec00404 	addi	sp,sp,16
    7700:	00097201 	jmpi	9720 <__swbuf_r>
    7704:	d9400015 	stw	r5,0(sp)
    7708:	d9800115 	stw	r6,4(sp)
    770c:	0004b9c0 	call	4b9c <__sinit>
    7710:	d9800117 	ldw	r6,4(sp)
    7714:	d9400017 	ldw	r5,0(sp)
    7718:	003fdf06 	br	7698 <__alt_data_end+0xfffbe2b8>

0000771c <putc>:
    771c:	00800074 	movhi	r2,1
    7720:	defffc04 	addi	sp,sp,-16
    7724:	1088f904 	addi	r2,r2,9188
    7728:	dc000115 	stw	r16,4(sp)
    772c:	14000017 	ldw	r16,0(r2)
    7730:	dc400215 	stw	r17,8(sp)
    7734:	dfc00315 	stw	ra,12(sp)
    7738:	2023883a 	mov	r17,r4
    773c:	80000226 	beq	r16,zero,7748 <putc+0x2c>
    7740:	80800e17 	ldw	r2,56(r16)
    7744:	10001a26 	beq	r2,zero,77b0 <putc+0x94>
    7748:	28800217 	ldw	r2,8(r5)
    774c:	10bfffc4 	addi	r2,r2,-1
    7750:	28800215 	stw	r2,8(r5)
    7754:	10000b16 	blt	r2,zero,7784 <putc+0x68>
    7758:	28800017 	ldw	r2,0(r5)
    775c:	14400005 	stb	r17,0(r2)
    7760:	28800017 	ldw	r2,0(r5)
    7764:	10c00044 	addi	r3,r2,1
    7768:	28c00015 	stw	r3,0(r5)
    776c:	10800003 	ldbu	r2,0(r2)
    7770:	dfc00317 	ldw	ra,12(sp)
    7774:	dc400217 	ldw	r17,8(sp)
    7778:	dc000117 	ldw	r16,4(sp)
    777c:	dec00404 	addi	sp,sp,16
    7780:	f800283a 	ret
    7784:	28c00617 	ldw	r3,24(r5)
    7788:	10c00e16 	blt	r2,r3,77c4 <putc+0xa8>
    778c:	28800017 	ldw	r2,0(r5)
    7790:	01000284 	movi	r4,10
    7794:	14400005 	stb	r17,0(r2)
    7798:	28800017 	ldw	r2,0(r5)
    779c:	10c00003 	ldbu	r3,0(r2)
    77a0:	193ff01e 	bne	r3,r4,7764 <__alt_data_end+0xfffbe384>
    77a4:	280d883a 	mov	r6,r5
    77a8:	180b883a 	mov	r5,r3
    77ac:	00000706 	br	77cc <putc+0xb0>
    77b0:	8009883a 	mov	r4,r16
    77b4:	d9400015 	stw	r5,0(sp)
    77b8:	0004b9c0 	call	4b9c <__sinit>
    77bc:	d9400017 	ldw	r5,0(sp)
    77c0:	003fe106 	br	7748 <__alt_data_end+0xfffbe368>
    77c4:	280d883a 	mov	r6,r5
    77c8:	880b883a 	mov	r5,r17
    77cc:	8009883a 	mov	r4,r16
    77d0:	dfc00317 	ldw	ra,12(sp)
    77d4:	dc400217 	ldw	r17,8(sp)
    77d8:	dc000117 	ldw	r16,4(sp)
    77dc:	dec00404 	addi	sp,sp,16
    77e0:	00097201 	jmpi	9720 <__swbuf_r>

000077e4 <_realloc_r>:
    77e4:	defff604 	addi	sp,sp,-40
    77e8:	dc800215 	stw	r18,8(sp)
    77ec:	dfc00915 	stw	ra,36(sp)
    77f0:	df000815 	stw	fp,32(sp)
    77f4:	ddc00715 	stw	r23,28(sp)
    77f8:	dd800615 	stw	r22,24(sp)
    77fc:	dd400515 	stw	r21,20(sp)
    7800:	dd000415 	stw	r20,16(sp)
    7804:	dcc00315 	stw	r19,12(sp)
    7808:	dc400115 	stw	r17,4(sp)
    780c:	dc000015 	stw	r16,0(sp)
    7810:	3025883a 	mov	r18,r6
    7814:	2800b726 	beq	r5,zero,7af4 <_realloc_r+0x310>
    7818:	282b883a 	mov	r21,r5
    781c:	2029883a 	mov	r20,r4
    7820:	000dc980 	call	dc98 <__malloc_lock>
    7824:	a8bfff17 	ldw	r2,-4(r21)
    7828:	043fff04 	movi	r16,-4
    782c:	90c002c4 	addi	r3,r18,11
    7830:	01000584 	movi	r4,22
    7834:	acfffe04 	addi	r19,r21,-8
    7838:	1420703a 	and	r16,r2,r16
    783c:	20c0332e 	bgeu	r4,r3,790c <_realloc_r+0x128>
    7840:	047ffe04 	movi	r17,-8
    7844:	1c62703a 	and	r17,r3,r17
    7848:	8807883a 	mov	r3,r17
    784c:	88005816 	blt	r17,zero,79b0 <_realloc_r+0x1cc>
    7850:	8c805736 	bltu	r17,r18,79b0 <_realloc_r+0x1cc>
    7854:	80c0300e 	bge	r16,r3,7918 <_realloc_r+0x134>
    7858:	07000074 	movhi	fp,1
    785c:	e7037404 	addi	fp,fp,3536
    7860:	e1c00217 	ldw	r7,8(fp)
    7864:	9c09883a 	add	r4,r19,r16
    7868:	22000117 	ldw	r8,4(r4)
    786c:	21c06326 	beq	r4,r7,79fc <_realloc_r+0x218>
    7870:	017fff84 	movi	r5,-2
    7874:	414a703a 	and	r5,r8,r5
    7878:	214b883a 	add	r5,r4,r5
    787c:	29800117 	ldw	r6,4(r5)
    7880:	3180004c 	andi	r6,r6,1
    7884:	30003f26 	beq	r6,zero,7984 <_realloc_r+0x1a0>
    7888:	1080004c 	andi	r2,r2,1
    788c:	10008326 	beq	r2,zero,7a9c <_realloc_r+0x2b8>
    7890:	900b883a 	mov	r5,r18
    7894:	a009883a 	mov	r4,r20
    7898:	00059080 	call	5908 <_malloc_r>
    789c:	1025883a 	mov	r18,r2
    78a0:	10011e26 	beq	r2,zero,7d1c <_realloc_r+0x538>
    78a4:	a93fff17 	ldw	r4,-4(r21)
    78a8:	10fffe04 	addi	r3,r2,-8
    78ac:	00bfff84 	movi	r2,-2
    78b0:	2084703a 	and	r2,r4,r2
    78b4:	9885883a 	add	r2,r19,r2
    78b8:	1880ee26 	beq	r3,r2,7c74 <_realloc_r+0x490>
    78bc:	81bfff04 	addi	r6,r16,-4
    78c0:	00800904 	movi	r2,36
    78c4:	1180b836 	bltu	r2,r6,7ba8 <_realloc_r+0x3c4>
    78c8:	00c004c4 	movi	r3,19
    78cc:	19809636 	bltu	r3,r6,7b28 <_realloc_r+0x344>
    78d0:	9005883a 	mov	r2,r18
    78d4:	a807883a 	mov	r3,r21
    78d8:	19000017 	ldw	r4,0(r3)
    78dc:	11000015 	stw	r4,0(r2)
    78e0:	19000117 	ldw	r4,4(r3)
    78e4:	11000115 	stw	r4,4(r2)
    78e8:	18c00217 	ldw	r3,8(r3)
    78ec:	10c00215 	stw	r3,8(r2)
    78f0:	a80b883a 	mov	r5,r21
    78f4:	a009883a 	mov	r4,r20
    78f8:	0004d100 	call	4d10 <_free_r>
    78fc:	a009883a 	mov	r4,r20
    7900:	000dcbc0 	call	dcbc <__malloc_unlock>
    7904:	9005883a 	mov	r2,r18
    7908:	00001206 	br	7954 <_realloc_r+0x170>
    790c:	00c00404 	movi	r3,16
    7910:	1823883a 	mov	r17,r3
    7914:	003fce06 	br	7850 <__alt_data_end+0xfffbe470>
    7918:	a825883a 	mov	r18,r21
    791c:	8445c83a 	sub	r2,r16,r17
    7920:	00c003c4 	movi	r3,15
    7924:	18802636 	bltu	r3,r2,79c0 <_realloc_r+0x1dc>
    7928:	99800117 	ldw	r6,4(r19)
    792c:	9c07883a 	add	r3,r19,r16
    7930:	3180004c 	andi	r6,r6,1
    7934:	3420b03a 	or	r16,r6,r16
    7938:	9c000115 	stw	r16,4(r19)
    793c:	18800117 	ldw	r2,4(r3)
    7940:	10800054 	ori	r2,r2,1
    7944:	18800115 	stw	r2,4(r3)
    7948:	a009883a 	mov	r4,r20
    794c:	000dcbc0 	call	dcbc <__malloc_unlock>
    7950:	9005883a 	mov	r2,r18
    7954:	dfc00917 	ldw	ra,36(sp)
    7958:	df000817 	ldw	fp,32(sp)
    795c:	ddc00717 	ldw	r23,28(sp)
    7960:	dd800617 	ldw	r22,24(sp)
    7964:	dd400517 	ldw	r21,20(sp)
    7968:	dd000417 	ldw	r20,16(sp)
    796c:	dcc00317 	ldw	r19,12(sp)
    7970:	dc800217 	ldw	r18,8(sp)
    7974:	dc400117 	ldw	r17,4(sp)
    7978:	dc000017 	ldw	r16,0(sp)
    797c:	dec00a04 	addi	sp,sp,40
    7980:	f800283a 	ret
    7984:	017fff04 	movi	r5,-4
    7988:	414a703a 	and	r5,r8,r5
    798c:	814d883a 	add	r6,r16,r5
    7990:	30c01f16 	blt	r6,r3,7a10 <_realloc_r+0x22c>
    7994:	20800317 	ldw	r2,12(r4)
    7998:	20c00217 	ldw	r3,8(r4)
    799c:	a825883a 	mov	r18,r21
    79a0:	3021883a 	mov	r16,r6
    79a4:	18800315 	stw	r2,12(r3)
    79a8:	10c00215 	stw	r3,8(r2)
    79ac:	003fdb06 	br	791c <__alt_data_end+0xfffbe53c>
    79b0:	00800304 	movi	r2,12
    79b4:	a0800015 	stw	r2,0(r20)
    79b8:	0005883a 	mov	r2,zero
    79bc:	003fe506 	br	7954 <__alt_data_end+0xfffbe574>
    79c0:	98c00117 	ldw	r3,4(r19)
    79c4:	9c4b883a 	add	r5,r19,r17
    79c8:	11000054 	ori	r4,r2,1
    79cc:	18c0004c 	andi	r3,r3,1
    79d0:	1c62b03a 	or	r17,r3,r17
    79d4:	9c400115 	stw	r17,4(r19)
    79d8:	29000115 	stw	r4,4(r5)
    79dc:	2885883a 	add	r2,r5,r2
    79e0:	10c00117 	ldw	r3,4(r2)
    79e4:	29400204 	addi	r5,r5,8
    79e8:	a009883a 	mov	r4,r20
    79ec:	18c00054 	ori	r3,r3,1
    79f0:	10c00115 	stw	r3,4(r2)
    79f4:	0004d100 	call	4d10 <_free_r>
    79f8:	003fd306 	br	7948 <__alt_data_end+0xfffbe568>
    79fc:	017fff04 	movi	r5,-4
    7a00:	414a703a 	and	r5,r8,r5
    7a04:	89800404 	addi	r6,r17,16
    7a08:	8151883a 	add	r8,r16,r5
    7a0c:	4180590e 	bge	r8,r6,7b74 <_realloc_r+0x390>
    7a10:	1080004c 	andi	r2,r2,1
    7a14:	103f9e1e 	bne	r2,zero,7890 <__alt_data_end+0xfffbe4b0>
    7a18:	adbffe17 	ldw	r22,-8(r21)
    7a1c:	00bfff04 	movi	r2,-4
    7a20:	9dadc83a 	sub	r22,r19,r22
    7a24:	b1800117 	ldw	r6,4(r22)
    7a28:	3084703a 	and	r2,r6,r2
    7a2c:	20002026 	beq	r4,zero,7ab0 <_realloc_r+0x2cc>
    7a30:	80af883a 	add	r23,r16,r2
    7a34:	b96f883a 	add	r23,r23,r5
    7a38:	21c05f26 	beq	r4,r7,7bb8 <_realloc_r+0x3d4>
    7a3c:	b8c01c16 	blt	r23,r3,7ab0 <_realloc_r+0x2cc>
    7a40:	20800317 	ldw	r2,12(r4)
    7a44:	20c00217 	ldw	r3,8(r4)
    7a48:	81bfff04 	addi	r6,r16,-4
    7a4c:	01000904 	movi	r4,36
    7a50:	18800315 	stw	r2,12(r3)
    7a54:	10c00215 	stw	r3,8(r2)
    7a58:	b0c00217 	ldw	r3,8(r22)
    7a5c:	b0800317 	ldw	r2,12(r22)
    7a60:	b4800204 	addi	r18,r22,8
    7a64:	18800315 	stw	r2,12(r3)
    7a68:	10c00215 	stw	r3,8(r2)
    7a6c:	21801b36 	bltu	r4,r6,7adc <_realloc_r+0x2f8>
    7a70:	008004c4 	movi	r2,19
    7a74:	1180352e 	bgeu	r2,r6,7b4c <_realloc_r+0x368>
    7a78:	a8800017 	ldw	r2,0(r21)
    7a7c:	b0800215 	stw	r2,8(r22)
    7a80:	a8800117 	ldw	r2,4(r21)
    7a84:	b0800315 	stw	r2,12(r22)
    7a88:	008006c4 	movi	r2,27
    7a8c:	11807f36 	bltu	r2,r6,7c8c <_realloc_r+0x4a8>
    7a90:	b0800404 	addi	r2,r22,16
    7a94:	ad400204 	addi	r21,r21,8
    7a98:	00002d06 	br	7b50 <_realloc_r+0x36c>
    7a9c:	adbffe17 	ldw	r22,-8(r21)
    7aa0:	00bfff04 	movi	r2,-4
    7aa4:	9dadc83a 	sub	r22,r19,r22
    7aa8:	b1000117 	ldw	r4,4(r22)
    7aac:	2084703a 	and	r2,r4,r2
    7ab0:	b03f7726 	beq	r22,zero,7890 <__alt_data_end+0xfffbe4b0>
    7ab4:	80af883a 	add	r23,r16,r2
    7ab8:	b8ff7516 	blt	r23,r3,7890 <__alt_data_end+0xfffbe4b0>
    7abc:	b0800317 	ldw	r2,12(r22)
    7ac0:	b0c00217 	ldw	r3,8(r22)
    7ac4:	81bfff04 	addi	r6,r16,-4
    7ac8:	01000904 	movi	r4,36
    7acc:	18800315 	stw	r2,12(r3)
    7ad0:	10c00215 	stw	r3,8(r2)
    7ad4:	b4800204 	addi	r18,r22,8
    7ad8:	21bfe52e 	bgeu	r4,r6,7a70 <__alt_data_end+0xfffbe690>
    7adc:	a80b883a 	mov	r5,r21
    7ae0:	9009883a 	mov	r4,r18
    7ae4:	00063400 	call	6340 <memmove>
    7ae8:	b821883a 	mov	r16,r23
    7aec:	b027883a 	mov	r19,r22
    7af0:	003f8a06 	br	791c <__alt_data_end+0xfffbe53c>
    7af4:	300b883a 	mov	r5,r6
    7af8:	dfc00917 	ldw	ra,36(sp)
    7afc:	df000817 	ldw	fp,32(sp)
    7b00:	ddc00717 	ldw	r23,28(sp)
    7b04:	dd800617 	ldw	r22,24(sp)
    7b08:	dd400517 	ldw	r21,20(sp)
    7b0c:	dd000417 	ldw	r20,16(sp)
    7b10:	dcc00317 	ldw	r19,12(sp)
    7b14:	dc800217 	ldw	r18,8(sp)
    7b18:	dc400117 	ldw	r17,4(sp)
    7b1c:	dc000017 	ldw	r16,0(sp)
    7b20:	dec00a04 	addi	sp,sp,40
    7b24:	00059081 	jmpi	5908 <_malloc_r>
    7b28:	a8c00017 	ldw	r3,0(r21)
    7b2c:	90c00015 	stw	r3,0(r18)
    7b30:	a8c00117 	ldw	r3,4(r21)
    7b34:	90c00115 	stw	r3,4(r18)
    7b38:	00c006c4 	movi	r3,27
    7b3c:	19804536 	bltu	r3,r6,7c54 <_realloc_r+0x470>
    7b40:	90800204 	addi	r2,r18,8
    7b44:	a8c00204 	addi	r3,r21,8
    7b48:	003f6306 	br	78d8 <__alt_data_end+0xfffbe4f8>
    7b4c:	9005883a 	mov	r2,r18
    7b50:	a8c00017 	ldw	r3,0(r21)
    7b54:	b821883a 	mov	r16,r23
    7b58:	b027883a 	mov	r19,r22
    7b5c:	10c00015 	stw	r3,0(r2)
    7b60:	a8c00117 	ldw	r3,4(r21)
    7b64:	10c00115 	stw	r3,4(r2)
    7b68:	a8c00217 	ldw	r3,8(r21)
    7b6c:	10c00215 	stw	r3,8(r2)
    7b70:	003f6a06 	br	791c <__alt_data_end+0xfffbe53c>
    7b74:	9c67883a 	add	r19,r19,r17
    7b78:	4445c83a 	sub	r2,r8,r17
    7b7c:	e4c00215 	stw	r19,8(fp)
    7b80:	10800054 	ori	r2,r2,1
    7b84:	98800115 	stw	r2,4(r19)
    7b88:	a8bfff17 	ldw	r2,-4(r21)
    7b8c:	a009883a 	mov	r4,r20
    7b90:	1080004c 	andi	r2,r2,1
    7b94:	1462b03a 	or	r17,r2,r17
    7b98:	ac7fff15 	stw	r17,-4(r21)
    7b9c:	000dcbc0 	call	dcbc <__malloc_unlock>
    7ba0:	a805883a 	mov	r2,r21
    7ba4:	003f6b06 	br	7954 <__alt_data_end+0xfffbe574>
    7ba8:	a80b883a 	mov	r5,r21
    7bac:	9009883a 	mov	r4,r18
    7bb0:	00063400 	call	6340 <memmove>
    7bb4:	003f4e06 	br	78f0 <__alt_data_end+0xfffbe510>
    7bb8:	89000404 	addi	r4,r17,16
    7bbc:	b93fbc16 	blt	r23,r4,7ab0 <__alt_data_end+0xfffbe6d0>
    7bc0:	b0800317 	ldw	r2,12(r22)
    7bc4:	b0c00217 	ldw	r3,8(r22)
    7bc8:	81bfff04 	addi	r6,r16,-4
    7bcc:	01000904 	movi	r4,36
    7bd0:	18800315 	stw	r2,12(r3)
    7bd4:	10c00215 	stw	r3,8(r2)
    7bd8:	b4800204 	addi	r18,r22,8
    7bdc:	21804336 	bltu	r4,r6,7cec <_realloc_r+0x508>
    7be0:	008004c4 	movi	r2,19
    7be4:	11803f2e 	bgeu	r2,r6,7ce4 <_realloc_r+0x500>
    7be8:	a8800017 	ldw	r2,0(r21)
    7bec:	b0800215 	stw	r2,8(r22)
    7bf0:	a8800117 	ldw	r2,4(r21)
    7bf4:	b0800315 	stw	r2,12(r22)
    7bf8:	008006c4 	movi	r2,27
    7bfc:	11803f36 	bltu	r2,r6,7cfc <_realloc_r+0x518>
    7c00:	b0800404 	addi	r2,r22,16
    7c04:	ad400204 	addi	r21,r21,8
    7c08:	a8c00017 	ldw	r3,0(r21)
    7c0c:	10c00015 	stw	r3,0(r2)
    7c10:	a8c00117 	ldw	r3,4(r21)
    7c14:	10c00115 	stw	r3,4(r2)
    7c18:	a8c00217 	ldw	r3,8(r21)
    7c1c:	10c00215 	stw	r3,8(r2)
    7c20:	b447883a 	add	r3,r22,r17
    7c24:	bc45c83a 	sub	r2,r23,r17
    7c28:	e0c00215 	stw	r3,8(fp)
    7c2c:	10800054 	ori	r2,r2,1
    7c30:	18800115 	stw	r2,4(r3)
    7c34:	b0800117 	ldw	r2,4(r22)
    7c38:	a009883a 	mov	r4,r20
    7c3c:	1080004c 	andi	r2,r2,1
    7c40:	1462b03a 	or	r17,r2,r17
    7c44:	b4400115 	stw	r17,4(r22)
    7c48:	000dcbc0 	call	dcbc <__malloc_unlock>
    7c4c:	9005883a 	mov	r2,r18
    7c50:	003f4006 	br	7954 <__alt_data_end+0xfffbe574>
    7c54:	a8c00217 	ldw	r3,8(r21)
    7c58:	90c00215 	stw	r3,8(r18)
    7c5c:	a8c00317 	ldw	r3,12(r21)
    7c60:	90c00315 	stw	r3,12(r18)
    7c64:	30801126 	beq	r6,r2,7cac <_realloc_r+0x4c8>
    7c68:	90800404 	addi	r2,r18,16
    7c6c:	a8c00404 	addi	r3,r21,16
    7c70:	003f1906 	br	78d8 <__alt_data_end+0xfffbe4f8>
    7c74:	90ffff17 	ldw	r3,-4(r18)
    7c78:	00bfff04 	movi	r2,-4
    7c7c:	a825883a 	mov	r18,r21
    7c80:	1884703a 	and	r2,r3,r2
    7c84:	80a1883a 	add	r16,r16,r2
    7c88:	003f2406 	br	791c <__alt_data_end+0xfffbe53c>
    7c8c:	a8800217 	ldw	r2,8(r21)
    7c90:	b0800415 	stw	r2,16(r22)
    7c94:	a8800317 	ldw	r2,12(r21)
    7c98:	b0800515 	stw	r2,20(r22)
    7c9c:	31000a26 	beq	r6,r4,7cc8 <_realloc_r+0x4e4>
    7ca0:	b0800604 	addi	r2,r22,24
    7ca4:	ad400404 	addi	r21,r21,16
    7ca8:	003fa906 	br	7b50 <__alt_data_end+0xfffbe770>
    7cac:	a9000417 	ldw	r4,16(r21)
    7cb0:	90800604 	addi	r2,r18,24
    7cb4:	a8c00604 	addi	r3,r21,24
    7cb8:	91000415 	stw	r4,16(r18)
    7cbc:	a9000517 	ldw	r4,20(r21)
    7cc0:	91000515 	stw	r4,20(r18)
    7cc4:	003f0406 	br	78d8 <__alt_data_end+0xfffbe4f8>
    7cc8:	a8c00417 	ldw	r3,16(r21)
    7ccc:	ad400604 	addi	r21,r21,24
    7cd0:	b0800804 	addi	r2,r22,32
    7cd4:	b0c00615 	stw	r3,24(r22)
    7cd8:	a8ffff17 	ldw	r3,-4(r21)
    7cdc:	b0c00715 	stw	r3,28(r22)
    7ce0:	003f9b06 	br	7b50 <__alt_data_end+0xfffbe770>
    7ce4:	9005883a 	mov	r2,r18
    7ce8:	003fc706 	br	7c08 <__alt_data_end+0xfffbe828>
    7cec:	a80b883a 	mov	r5,r21
    7cf0:	9009883a 	mov	r4,r18
    7cf4:	00063400 	call	6340 <memmove>
    7cf8:	003fc906 	br	7c20 <__alt_data_end+0xfffbe840>
    7cfc:	a8800217 	ldw	r2,8(r21)
    7d00:	b0800415 	stw	r2,16(r22)
    7d04:	a8800317 	ldw	r2,12(r21)
    7d08:	b0800515 	stw	r2,20(r22)
    7d0c:	31000726 	beq	r6,r4,7d2c <_realloc_r+0x548>
    7d10:	b0800604 	addi	r2,r22,24
    7d14:	ad400404 	addi	r21,r21,16
    7d18:	003fbb06 	br	7c08 <__alt_data_end+0xfffbe828>
    7d1c:	a009883a 	mov	r4,r20
    7d20:	000dcbc0 	call	dcbc <__malloc_unlock>
    7d24:	0005883a 	mov	r2,zero
    7d28:	003f0a06 	br	7954 <__alt_data_end+0xfffbe574>
    7d2c:	a8c00417 	ldw	r3,16(r21)
    7d30:	ad400604 	addi	r21,r21,24
    7d34:	b0800804 	addi	r2,r22,32
    7d38:	b0c00615 	stw	r3,24(r22)
    7d3c:	a8ffff17 	ldw	r3,-4(r21)
    7d40:	b0c00715 	stw	r3,28(r22)
    7d44:	003fb006 	br	7c08 <__alt_data_end+0xfffbe828>

00007d48 <__fpclassifyd>:
    7d48:	00a00034 	movhi	r2,32768
    7d4c:	10bfffc4 	addi	r2,r2,-1
    7d50:	2884703a 	and	r2,r5,r2
    7d54:	10000726 	beq	r2,zero,7d74 <__fpclassifyd+0x2c>
    7d58:	00fffc34 	movhi	r3,65520
    7d5c:	019ff834 	movhi	r6,32736
    7d60:	28c7883a 	add	r3,r5,r3
    7d64:	31bfffc4 	addi	r6,r6,-1
    7d68:	30c00536 	bltu	r6,r3,7d80 <__fpclassifyd+0x38>
    7d6c:	00800104 	movi	r2,4
    7d70:	f800283a 	ret
    7d74:	2000021e 	bne	r4,zero,7d80 <__fpclassifyd+0x38>
    7d78:	00800084 	movi	r2,2
    7d7c:	f800283a 	ret
    7d80:	00dffc34 	movhi	r3,32752
    7d84:	019ff834 	movhi	r6,32736
    7d88:	28cb883a 	add	r5,r5,r3
    7d8c:	31bfffc4 	addi	r6,r6,-1
    7d90:	317ff62e 	bgeu	r6,r5,7d6c <__alt_data_end+0xfffbe98c>
    7d94:	01400434 	movhi	r5,16
    7d98:	297fffc4 	addi	r5,r5,-1
    7d9c:	28800236 	bltu	r5,r2,7da8 <__fpclassifyd+0x60>
    7da0:	008000c4 	movi	r2,3
    7da4:	f800283a 	ret
    7da8:	10c00226 	beq	r2,r3,7db4 <__fpclassifyd+0x6c>
    7dac:	0005883a 	mov	r2,zero
    7db0:	f800283a 	ret
    7db4:	2005003a 	cmpeq	r2,r4,zero
    7db8:	f800283a 	ret

00007dbc <_sbrk_r>:
    7dbc:	defffd04 	addi	sp,sp,-12
    7dc0:	dc000015 	stw	r16,0(sp)
    7dc4:	04000074 	movhi	r16,1
    7dc8:	dc400115 	stw	r17,4(sp)
    7dcc:	840fc904 	addi	r16,r16,16164
    7dd0:	2023883a 	mov	r17,r4
    7dd4:	2809883a 	mov	r4,r5
    7dd8:	dfc00215 	stw	ra,8(sp)
    7ddc:	80000015 	stw	zero,0(r16)
    7de0:	000deb80 	call	deb8 <sbrk>
    7de4:	00ffffc4 	movi	r3,-1
    7de8:	10c00526 	beq	r2,r3,7e00 <_sbrk_r+0x44>
    7dec:	dfc00217 	ldw	ra,8(sp)
    7df0:	dc400117 	ldw	r17,4(sp)
    7df4:	dc000017 	ldw	r16,0(sp)
    7df8:	dec00304 	addi	sp,sp,12
    7dfc:	f800283a 	ret
    7e00:	80c00017 	ldw	r3,0(r16)
    7e04:	183ff926 	beq	r3,zero,7dec <__alt_data_end+0xfffbea0c>
    7e08:	88c00015 	stw	r3,0(r17)
    7e0c:	003ff706 	br	7dec <__alt_data_end+0xfffbea0c>

00007e10 <__sread>:
    7e10:	defffe04 	addi	sp,sp,-8
    7e14:	dc000015 	stw	r16,0(sp)
    7e18:	2821883a 	mov	r16,r5
    7e1c:	2940038f 	ldh	r5,14(r5)
    7e20:	dfc00115 	stw	ra,4(sp)
    7e24:	0009e240 	call	9e24 <_read_r>
    7e28:	10000716 	blt	r2,zero,7e48 <__sread+0x38>
    7e2c:	80c01417 	ldw	r3,80(r16)
    7e30:	1887883a 	add	r3,r3,r2
    7e34:	80c01415 	stw	r3,80(r16)
    7e38:	dfc00117 	ldw	ra,4(sp)
    7e3c:	dc000017 	ldw	r16,0(sp)
    7e40:	dec00204 	addi	sp,sp,8
    7e44:	f800283a 	ret
    7e48:	80c0030b 	ldhu	r3,12(r16)
    7e4c:	18fbffcc 	andi	r3,r3,61439
    7e50:	80c0030d 	sth	r3,12(r16)
    7e54:	dfc00117 	ldw	ra,4(sp)
    7e58:	dc000017 	ldw	r16,0(sp)
    7e5c:	dec00204 	addi	sp,sp,8
    7e60:	f800283a 	ret

00007e64 <__seofread>:
    7e64:	0005883a 	mov	r2,zero
    7e68:	f800283a 	ret

00007e6c <__swrite>:
    7e6c:	2880030b 	ldhu	r2,12(r5)
    7e70:	defffb04 	addi	sp,sp,-20
    7e74:	dcc00315 	stw	r19,12(sp)
    7e78:	dc800215 	stw	r18,8(sp)
    7e7c:	dc400115 	stw	r17,4(sp)
    7e80:	dc000015 	stw	r16,0(sp)
    7e84:	dfc00415 	stw	ra,16(sp)
    7e88:	10c0400c 	andi	r3,r2,256
    7e8c:	2821883a 	mov	r16,r5
    7e90:	2023883a 	mov	r17,r4
    7e94:	3025883a 	mov	r18,r6
    7e98:	3827883a 	mov	r19,r7
    7e9c:	18000526 	beq	r3,zero,7eb4 <__swrite+0x48>
    7ea0:	2940038f 	ldh	r5,14(r5)
    7ea4:	01c00084 	movi	r7,2
    7ea8:	000d883a 	mov	r6,zero
    7eac:	0009dc40 	call	9dc4 <_lseek_r>
    7eb0:	8080030b 	ldhu	r2,12(r16)
    7eb4:	8140038f 	ldh	r5,14(r16)
    7eb8:	10bbffcc 	andi	r2,r2,61439
    7ebc:	980f883a 	mov	r7,r19
    7ec0:	900d883a 	mov	r6,r18
    7ec4:	8809883a 	mov	r4,r17
    7ec8:	8080030d 	sth	r2,12(r16)
    7ecc:	dfc00417 	ldw	ra,16(sp)
    7ed0:	dcc00317 	ldw	r19,12(sp)
    7ed4:	dc800217 	ldw	r18,8(sp)
    7ed8:	dc400117 	ldw	r17,4(sp)
    7edc:	dc000017 	ldw	r16,0(sp)
    7ee0:	dec00504 	addi	sp,sp,20
    7ee4:	00098781 	jmpi	9878 <_write_r>

00007ee8 <__sseek>:
    7ee8:	defffe04 	addi	sp,sp,-8
    7eec:	dc000015 	stw	r16,0(sp)
    7ef0:	2821883a 	mov	r16,r5
    7ef4:	2940038f 	ldh	r5,14(r5)
    7ef8:	dfc00115 	stw	ra,4(sp)
    7efc:	0009dc40 	call	9dc4 <_lseek_r>
    7f00:	00ffffc4 	movi	r3,-1
    7f04:	10c00826 	beq	r2,r3,7f28 <__sseek+0x40>
    7f08:	80c0030b 	ldhu	r3,12(r16)
    7f0c:	80801415 	stw	r2,80(r16)
    7f10:	18c40014 	ori	r3,r3,4096
    7f14:	80c0030d 	sth	r3,12(r16)
    7f18:	dfc00117 	ldw	ra,4(sp)
    7f1c:	dc000017 	ldw	r16,0(sp)
    7f20:	dec00204 	addi	sp,sp,8
    7f24:	f800283a 	ret
    7f28:	80c0030b 	ldhu	r3,12(r16)
    7f2c:	18fbffcc 	andi	r3,r3,61439
    7f30:	80c0030d 	sth	r3,12(r16)
    7f34:	dfc00117 	ldw	ra,4(sp)
    7f38:	dc000017 	ldw	r16,0(sp)
    7f3c:	dec00204 	addi	sp,sp,8
    7f40:	f800283a 	ret

00007f44 <__sclose>:
    7f44:	2940038f 	ldh	r5,14(r5)
    7f48:	00098d81 	jmpi	98d8 <_close_r>

00007f4c <strcmp>:
    7f4c:	2144b03a 	or	r2,r4,r5
    7f50:	108000cc 	andi	r2,r2,3
    7f54:	1000171e 	bne	r2,zero,7fb4 <strcmp+0x68>
    7f58:	20800017 	ldw	r2,0(r4)
    7f5c:	28c00017 	ldw	r3,0(r5)
    7f60:	10c0141e 	bne	r2,r3,7fb4 <strcmp+0x68>
    7f64:	027fbff4 	movhi	r9,65279
    7f68:	4a7fbfc4 	addi	r9,r9,-257
    7f6c:	0086303a 	nor	r3,zero,r2
    7f70:	02202074 	movhi	r8,32897
    7f74:	1245883a 	add	r2,r2,r9
    7f78:	42202004 	addi	r8,r8,-32640
    7f7c:	10c4703a 	and	r2,r2,r3
    7f80:	1204703a 	and	r2,r2,r8
    7f84:	10000226 	beq	r2,zero,7f90 <strcmp+0x44>
    7f88:	00002306 	br	8018 <strcmp+0xcc>
    7f8c:	1000221e 	bne	r2,zero,8018 <strcmp+0xcc>
    7f90:	21000104 	addi	r4,r4,4
    7f94:	20c00017 	ldw	r3,0(r4)
    7f98:	29400104 	addi	r5,r5,4
    7f9c:	29800017 	ldw	r6,0(r5)
    7fa0:	1a4f883a 	add	r7,r3,r9
    7fa4:	00c4303a 	nor	r2,zero,r3
    7fa8:	3884703a 	and	r2,r7,r2
    7fac:	1204703a 	and	r2,r2,r8
    7fb0:	19bff626 	beq	r3,r6,7f8c <__alt_data_end+0xfffbebac>
    7fb4:	20800003 	ldbu	r2,0(r4)
    7fb8:	10c03fcc 	andi	r3,r2,255
    7fbc:	18c0201c 	xori	r3,r3,128
    7fc0:	18ffe004 	addi	r3,r3,-128
    7fc4:	18000c26 	beq	r3,zero,7ff8 <strcmp+0xac>
    7fc8:	29800007 	ldb	r6,0(r5)
    7fcc:	19800326 	beq	r3,r6,7fdc <strcmp+0x90>
    7fd0:	00001306 	br	8020 <strcmp+0xd4>
    7fd4:	29800007 	ldb	r6,0(r5)
    7fd8:	11800b1e 	bne	r2,r6,8008 <strcmp+0xbc>
    7fdc:	21000044 	addi	r4,r4,1
    7fe0:	20c00003 	ldbu	r3,0(r4)
    7fe4:	29400044 	addi	r5,r5,1
    7fe8:	18803fcc 	andi	r2,r3,255
    7fec:	1080201c 	xori	r2,r2,128
    7ff0:	10bfe004 	addi	r2,r2,-128
    7ff4:	103ff71e 	bne	r2,zero,7fd4 <__alt_data_end+0xfffbebf4>
    7ff8:	0007883a 	mov	r3,zero
    7ffc:	28800003 	ldbu	r2,0(r5)
    8000:	1885c83a 	sub	r2,r3,r2
    8004:	f800283a 	ret
    8008:	28800003 	ldbu	r2,0(r5)
    800c:	18c03fcc 	andi	r3,r3,255
    8010:	1885c83a 	sub	r2,r3,r2
    8014:	f800283a 	ret
    8018:	0005883a 	mov	r2,zero
    801c:	f800283a 	ret
    8020:	10c03fcc 	andi	r3,r2,255
    8024:	003ff506 	br	7ffc <__alt_data_end+0xfffbec1c>

00008028 <__sprint_r.part.0>:
    8028:	28801917 	ldw	r2,100(r5)
    802c:	defff604 	addi	sp,sp,-40
    8030:	dd400515 	stw	r21,20(sp)
    8034:	dfc00915 	stw	ra,36(sp)
    8038:	df000815 	stw	fp,32(sp)
    803c:	ddc00715 	stw	r23,28(sp)
    8040:	dd800615 	stw	r22,24(sp)
    8044:	dd000415 	stw	r20,16(sp)
    8048:	dcc00315 	stw	r19,12(sp)
    804c:	dc800215 	stw	r18,8(sp)
    8050:	dc400115 	stw	r17,4(sp)
    8054:	dc000015 	stw	r16,0(sp)
    8058:	1088000c 	andi	r2,r2,8192
    805c:	302b883a 	mov	r21,r6
    8060:	10002e26 	beq	r2,zero,811c <__sprint_r.part.0+0xf4>
    8064:	30800217 	ldw	r2,8(r6)
    8068:	35800017 	ldw	r22,0(r6)
    806c:	10002926 	beq	r2,zero,8114 <__sprint_r.part.0+0xec>
    8070:	2827883a 	mov	r19,r5
    8074:	2029883a 	mov	r20,r4
    8078:	b5c00104 	addi	r23,r22,4
    807c:	04bfffc4 	movi	r18,-1
    8080:	bc400017 	ldw	r17,0(r23)
    8084:	b4000017 	ldw	r16,0(r22)
    8088:	0039883a 	mov	fp,zero
    808c:	8822d0ba 	srli	r17,r17,2
    8090:	8800031e 	bne	r17,zero,80a0 <__sprint_r.part.0+0x78>
    8094:	00001806 	br	80f8 <__sprint_r.part.0+0xd0>
    8098:	84000104 	addi	r16,r16,4
    809c:	8f001526 	beq	r17,fp,80f4 <__sprint_r.part.0+0xcc>
    80a0:	81400017 	ldw	r5,0(r16)
    80a4:	980d883a 	mov	r6,r19
    80a8:	a009883a 	mov	r4,r20
    80ac:	0009c700 	call	9c70 <_fputwc_r>
    80b0:	e7000044 	addi	fp,fp,1
    80b4:	14bff81e 	bne	r2,r18,8098 <__alt_data_end+0xfffbecb8>
    80b8:	9005883a 	mov	r2,r18
    80bc:	a8000215 	stw	zero,8(r21)
    80c0:	a8000115 	stw	zero,4(r21)
    80c4:	dfc00917 	ldw	ra,36(sp)
    80c8:	df000817 	ldw	fp,32(sp)
    80cc:	ddc00717 	ldw	r23,28(sp)
    80d0:	dd800617 	ldw	r22,24(sp)
    80d4:	dd400517 	ldw	r21,20(sp)
    80d8:	dd000417 	ldw	r20,16(sp)
    80dc:	dcc00317 	ldw	r19,12(sp)
    80e0:	dc800217 	ldw	r18,8(sp)
    80e4:	dc400117 	ldw	r17,4(sp)
    80e8:	dc000017 	ldw	r16,0(sp)
    80ec:	dec00a04 	addi	sp,sp,40
    80f0:	f800283a 	ret
    80f4:	a8800217 	ldw	r2,8(r21)
    80f8:	8c63883a 	add	r17,r17,r17
    80fc:	8c63883a 	add	r17,r17,r17
    8100:	1445c83a 	sub	r2,r2,r17
    8104:	a8800215 	stw	r2,8(r21)
    8108:	b5800204 	addi	r22,r22,8
    810c:	bdc00204 	addi	r23,r23,8
    8110:	103fdb1e 	bne	r2,zero,8080 <__alt_data_end+0xfffbeca0>
    8114:	0005883a 	mov	r2,zero
    8118:	003fe806 	br	80bc <__alt_data_end+0xfffbecdc>
    811c:	00050200 	call	5020 <__sfvwrite_r>
    8120:	003fe606 	br	80bc <__alt_data_end+0xfffbecdc>

00008124 <__sprint_r>:
    8124:	30c00217 	ldw	r3,8(r6)
    8128:	18000126 	beq	r3,zero,8130 <__sprint_r+0xc>
    812c:	00080281 	jmpi	8028 <__sprint_r.part.0>
    8130:	30000115 	stw	zero,4(r6)
    8134:	0005883a 	mov	r2,zero
    8138:	f800283a 	ret

0000813c <___vfiprintf_internal_r>:
    813c:	deffca04 	addi	sp,sp,-216
    8140:	dd403115 	stw	r21,196(sp)
    8144:	dfc03515 	stw	ra,212(sp)
    8148:	df003415 	stw	fp,208(sp)
    814c:	ddc03315 	stw	r23,204(sp)
    8150:	dd803215 	stw	r22,200(sp)
    8154:	dd003015 	stw	r20,192(sp)
    8158:	dcc02f15 	stw	r19,188(sp)
    815c:	dc802e15 	stw	r18,184(sp)
    8160:	dc402d15 	stw	r17,180(sp)
    8164:	dc002c15 	stw	r16,176(sp)
    8168:	d9002115 	stw	r4,132(sp)
    816c:	d9402015 	stw	r5,128(sp)
    8170:	d9c02215 	stw	r7,136(sp)
    8174:	302b883a 	mov	r21,r6
    8178:	20000226 	beq	r4,zero,8184 <___vfiprintf_internal_r+0x48>
    817c:	20800e17 	ldw	r2,56(r4)
    8180:	1000cf26 	beq	r2,zero,84c0 <___vfiprintf_internal_r+0x384>
    8184:	d8c02017 	ldw	r3,128(sp)
    8188:	1880030b 	ldhu	r2,12(r3)
    818c:	10c8000c 	andi	r3,r2,8192
    8190:	1800071e 	bne	r3,zero,81b0 <___vfiprintf_internal_r+0x74>
    8194:	d9402017 	ldw	r5,128(sp)
    8198:	00f7ffc4 	movi	r3,-8193
    819c:	10880014 	ori	r2,r2,8192
    81a0:	29001917 	ldw	r4,100(r5)
    81a4:	2880030d 	sth	r2,12(r5)
    81a8:	20c6703a 	and	r3,r4,r3
    81ac:	28c01915 	stw	r3,100(r5)
    81b0:	10c0020c 	andi	r3,r2,8
    81b4:	1800a526 	beq	r3,zero,844c <___vfiprintf_internal_r+0x310>
    81b8:	d9002017 	ldw	r4,128(sp)
    81bc:	20c00417 	ldw	r3,16(r4)
    81c0:	1800a226 	beq	r3,zero,844c <___vfiprintf_internal_r+0x310>
    81c4:	1080068c 	andi	r2,r2,26
    81c8:	00c00284 	movi	r3,10
    81cc:	10c0a826 	beq	r2,r3,8470 <___vfiprintf_internal_r+0x334>
    81d0:	d9001a04 	addi	r4,sp,104
    81d4:	d94019c4 	addi	r5,sp,103
    81d8:	04800074 	movhi	r18,1
    81dc:	2145c83a 	sub	r2,r4,r5
    81e0:	9481f804 	addi	r18,r18,2016
    81e4:	d9001e15 	stw	r4,120(sp)
    81e8:	d9401f15 	stw	r5,124(sp)
    81ec:	dec01a15 	stw	sp,104(sp)
    81f0:	d8001c15 	stw	zero,112(sp)
    81f4:	d8001b15 	stw	zero,108(sp)
    81f8:	d811883a 	mov	r8,sp
    81fc:	d8002615 	stw	zero,152(sp)
    8200:	d8002415 	stw	zero,144(sp)
    8204:	d8802815 	stw	r2,160(sp)
    8208:	a82d883a 	mov	r22,r21
    820c:	b0800007 	ldb	r2,0(r22)
    8210:	10040d26 	beq	r2,zero,9248 <___vfiprintf_internal_r+0x110c>
    8214:	00c00944 	movi	r3,37
    8218:	b029883a 	mov	r20,r22
    821c:	10c0021e 	bne	r2,r3,8228 <___vfiprintf_internal_r+0xec>
    8220:	00001606 	br	827c <___vfiprintf_internal_r+0x140>
    8224:	10c00326 	beq	r2,r3,8234 <___vfiprintf_internal_r+0xf8>
    8228:	a5000044 	addi	r20,r20,1
    822c:	a0800007 	ldb	r2,0(r20)
    8230:	103ffc1e 	bne	r2,zero,8224 <__alt_data_end+0xfffbee44>
    8234:	a5a1c83a 	sub	r16,r20,r22
    8238:	80001026 	beq	r16,zero,827c <___vfiprintf_internal_r+0x140>
    823c:	d8c01c17 	ldw	r3,112(sp)
    8240:	d8801b17 	ldw	r2,108(sp)
    8244:	45800015 	stw	r22,0(r8)
    8248:	80c7883a 	add	r3,r16,r3
    824c:	10800044 	addi	r2,r2,1
    8250:	44000115 	stw	r16,4(r8)
    8254:	d8c01c15 	stw	r3,112(sp)
    8258:	d8801b15 	stw	r2,108(sp)
    825c:	010001c4 	movi	r4,7
    8260:	2080750e 	bge	r4,r2,8438 <___vfiprintf_internal_r+0x2fc>
    8264:	1803951e 	bne	r3,zero,90bc <___vfiprintf_internal_r+0xf80>
    8268:	d8c02417 	ldw	r3,144(sp)
    826c:	d8001b15 	stw	zero,108(sp)
    8270:	d811883a 	mov	r8,sp
    8274:	1c07883a 	add	r3,r3,r16
    8278:	d8c02415 	stw	r3,144(sp)
    827c:	a0800007 	ldb	r2,0(r20)
    8280:	1002e026 	beq	r2,zero,8e04 <___vfiprintf_internal_r+0xcc8>
    8284:	a5800044 	addi	r22,r20,1
    8288:	a0c00047 	ldb	r3,1(r20)
    828c:	d8001d85 	stb	zero,118(sp)
    8290:	0027883a 	mov	r19,zero
    8294:	d8002305 	stb	zero,140(sp)
    8298:	043fffc4 	movi	r16,-1
    829c:	d8002515 	stw	zero,148(sp)
    82a0:	0023883a 	mov	r17,zero
    82a4:	05001604 	movi	r20,88
    82a8:	05400244 	movi	r21,9
    82ac:	402f883a 	mov	r23,r8
    82b0:	b5800044 	addi	r22,r22,1
    82b4:	18bff804 	addi	r2,r3,-32
    82b8:	a0827736 	bltu	r20,r2,8c98 <___vfiprintf_internal_r+0xb5c>
    82bc:	100490ba 	slli	r2,r2,2
    82c0:	01000074 	movhi	r4,1
    82c4:	2120b504 	addi	r4,r4,-32044
    82c8:	1105883a 	add	r2,r2,r4
    82cc:	10800017 	ldw	r2,0(r2)
    82d0:	1000683a 	jmp	r2
    82d4:	00008998 	cmpnei	zero,zero,550
    82d8:	00008c98 	cmpnei	zero,zero,562
    82dc:	00008c98 	cmpnei	zero,zero,562
    82e0:	000089b4 	movhi	zero,550
    82e4:	00008c98 	cmpnei	zero,zero,562
    82e8:	00008c98 	cmpnei	zero,zero,562
    82ec:	00008c98 	cmpnei	zero,zero,562
    82f0:	00008c98 	cmpnei	zero,zero,562
    82f4:	00008c98 	cmpnei	zero,zero,562
    82f8:	00008c98 	cmpnei	zero,zero,562
    82fc:	00008bbc 	xorhi	zero,zero,558
    8300:	00008be0 	cmpeqi	zero,zero,559
    8304:	00008c98 	cmpnei	zero,zero,562
    8308:	000084d8 	cmpnei	zero,zero,531
    830c:	00008bf4 	movhi	zero,559
    8310:	00008c98 	cmpnei	zero,zero,562
    8314:	000089c0 	call	89c <___vfprintf_internal_r+0xc0>
    8318:	000089cc 	andi	zero,zero,551
    831c:	000089cc 	andi	zero,zero,551
    8320:	000089cc 	andi	zero,zero,551
    8324:	000089cc 	andi	zero,zero,551
    8328:	000089cc 	andi	zero,zero,551
    832c:	000089cc 	andi	zero,zero,551
    8330:	000089cc 	andi	zero,zero,551
    8334:	000089cc 	andi	zero,zero,551
    8338:	000089cc 	andi	zero,zero,551
    833c:	00008c98 	cmpnei	zero,zero,562
    8340:	00008c98 	cmpnei	zero,zero,562
    8344:	00008c98 	cmpnei	zero,zero,562
    8348:	00008c98 	cmpnei	zero,zero,562
    834c:	00008c98 	cmpnei	zero,zero,562
    8350:	00008c98 	cmpnei	zero,zero,562
    8354:	00008c98 	cmpnei	zero,zero,562
    8358:	00008c98 	cmpnei	zero,zero,562
    835c:	00008c98 	cmpnei	zero,zero,562
    8360:	00008c98 	cmpnei	zero,zero,562
    8364:	00008a0c 	andi	zero,zero,552
    8368:	00008c98 	cmpnei	zero,zero,562
    836c:	00008c98 	cmpnei	zero,zero,562
    8370:	00008c98 	cmpnei	zero,zero,562
    8374:	00008c98 	cmpnei	zero,zero,562
    8378:	00008c98 	cmpnei	zero,zero,562
    837c:	00008c98 	cmpnei	zero,zero,562
    8380:	00008c98 	cmpnei	zero,zero,562
    8384:	00008c98 	cmpnei	zero,zero,562
    8388:	00008c98 	cmpnei	zero,zero,562
    838c:	00008c98 	cmpnei	zero,zero,562
    8390:	00008a48 	cmpgei	zero,zero,553
    8394:	00008c98 	cmpnei	zero,zero,562
    8398:	00008c98 	cmpnei	zero,zero,562
    839c:	00008c98 	cmpnei	zero,zero,562
    83a0:	00008c98 	cmpnei	zero,zero,562
    83a4:	00008c98 	cmpnei	zero,zero,562
    83a8:	00008aa4 	muli	zero,zero,554
    83ac:	00008c98 	cmpnei	zero,zero,562
    83b0:	00008c98 	cmpnei	zero,zero,562
    83b4:	00008b18 	cmpnei	zero,zero,556
    83b8:	00008c98 	cmpnei	zero,zero,562
    83bc:	00008c98 	cmpnei	zero,zero,562
    83c0:	00008c98 	cmpnei	zero,zero,562
    83c4:	00008c98 	cmpnei	zero,zero,562
    83c8:	00008c98 	cmpnei	zero,zero,562
    83cc:	00008c98 	cmpnei	zero,zero,562
    83d0:	00008c98 	cmpnei	zero,zero,562
    83d4:	00008c98 	cmpnei	zero,zero,562
    83d8:	00008c98 	cmpnei	zero,zero,562
    83dc:	00008c98 	cmpnei	zero,zero,562
    83e0:	000088c0 	call	88c <___vfprintf_internal_r+0xb0>
    83e4:	000088f0 	cmpltui	zero,zero,547
    83e8:	00008c98 	cmpnei	zero,zero,562
    83ec:	00008c98 	cmpnei	zero,zero,562
    83f0:	00008c98 	cmpnei	zero,zero,562
    83f4:	00008c40 	call	8c4 <___vfprintf_internal_r+0xe8>
    83f8:	000088f0 	cmpltui	zero,zero,547
    83fc:	00008c98 	cmpnei	zero,zero,562
    8400:	00008c98 	cmpnei	zero,zero,562
    8404:	00008798 	cmpnei	zero,zero,542
    8408:	00008c98 	cmpnei	zero,zero,562
    840c:	000087ac 	andhi	zero,zero,542
    8410:	000087e4 	muli	zero,zero,543
    8414:	000084e4 	muli	zero,zero,531
    8418:	0000878c 	andi	zero,zero,542
    841c:	00008c98 	cmpnei	zero,zero,562
    8420:	00008b58 	cmpnei	zero,zero,557
    8424:	00008c98 	cmpnei	zero,zero,562
    8428:	00008ba4 	muli	zero,zero,558
    842c:	00008c98 	cmpnei	zero,zero,562
    8430:	00008c98 	cmpnei	zero,zero,562
    8434:	00008868 	cmpgeui	zero,zero,545
    8438:	42000204 	addi	r8,r8,8
    843c:	d8c02417 	ldw	r3,144(sp)
    8440:	1c07883a 	add	r3,r3,r16
    8444:	d8c02415 	stw	r3,144(sp)
    8448:	003f8c06 	br	827c <__alt_data_end+0xfffbee9c>
    844c:	d9402017 	ldw	r5,128(sp)
    8450:	d9002117 	ldw	r4,132(sp)
    8454:	0002b900 	call	2b90 <__swsetup_r>
    8458:	1003c11e 	bne	r2,zero,9360 <___vfiprintf_internal_r+0x1224>
    845c:	d9402017 	ldw	r5,128(sp)
    8460:	00c00284 	movi	r3,10
    8464:	2880030b 	ldhu	r2,12(r5)
    8468:	1080068c 	andi	r2,r2,26
    846c:	10ff581e 	bne	r2,r3,81d0 <__alt_data_end+0xfffbedf0>
    8470:	d8c02017 	ldw	r3,128(sp)
    8474:	1880038f 	ldh	r2,14(r3)
    8478:	103f5516 	blt	r2,zero,81d0 <__alt_data_end+0xfffbedf0>
    847c:	d9c02217 	ldw	r7,136(sp)
    8480:	d9002117 	ldw	r4,132(sp)
    8484:	a80d883a 	mov	r6,r21
    8488:	180b883a 	mov	r5,r3
    848c:	00096640 	call	9664 <__sbprintf>
    8490:	dfc03517 	ldw	ra,212(sp)
    8494:	df003417 	ldw	fp,208(sp)
    8498:	ddc03317 	ldw	r23,204(sp)
    849c:	dd803217 	ldw	r22,200(sp)
    84a0:	dd403117 	ldw	r21,196(sp)
    84a4:	dd003017 	ldw	r20,192(sp)
    84a8:	dcc02f17 	ldw	r19,188(sp)
    84ac:	dc802e17 	ldw	r18,184(sp)
    84b0:	dc402d17 	ldw	r17,180(sp)
    84b4:	dc002c17 	ldw	r16,176(sp)
    84b8:	dec03604 	addi	sp,sp,216
    84bc:	f800283a 	ret
    84c0:	0004b9c0 	call	4b9c <__sinit>
    84c4:	003f2f06 	br	8184 <__alt_data_end+0xfffbeda4>
    84c8:	d8c02517 	ldw	r3,148(sp)
    84cc:	d8802215 	stw	r2,136(sp)
    84d0:	00c7c83a 	sub	r3,zero,r3
    84d4:	d8c02515 	stw	r3,148(sp)
    84d8:	8c400114 	ori	r17,r17,4
    84dc:	b0c00007 	ldb	r3,0(r22)
    84e0:	003f7306 	br	82b0 <__alt_data_end+0xfffbeed0>
    84e4:	00800c04 	movi	r2,48
    84e8:	d9402217 	ldw	r5,136(sp)
    84ec:	d8801d05 	stb	r2,116(sp)
    84f0:	00801e04 	movi	r2,120
    84f4:	d8801d45 	stb	r2,117(sp)
    84f8:	d8001d85 	stb	zero,118(sp)
    84fc:	b811883a 	mov	r8,r23
    8500:	28c00104 	addi	r3,r5,4
    8504:	2cc00017 	ldw	r19,0(r5)
    8508:	0029883a 	mov	r20,zero
    850c:	88800094 	ori	r2,r17,2
    8510:	80032516 	blt	r16,zero,91a8 <___vfiprintf_internal_r+0x106c>
    8514:	00bfdfc4 	movi	r2,-129
    8518:	88a2703a 	and	r17,r17,r2
    851c:	d8c02215 	stw	r3,136(sp)
    8520:	8c400094 	ori	r17,r17,2
    8524:	98032a1e 	bne	r19,zero,91d0 <___vfiprintf_internal_r+0x1094>
    8528:	00800074 	movhi	r2,1
    852c:	10819704 	addi	r2,r2,1628
    8530:	d8802615 	stw	r2,152(sp)
    8534:	002b883a 	mov	r21,zero
    8538:	8001741e 	bne	r16,zero,8b0c <___vfiprintf_internal_r+0x9d0>
    853c:	0021883a 	mov	r16,zero
    8540:	0029883a 	mov	r20,zero
    8544:	ddc01a04 	addi	r23,sp,104
    8548:	8027883a 	mov	r19,r16
    854c:	8500010e 	bge	r16,r20,8554 <___vfiprintf_internal_r+0x418>
    8550:	a027883a 	mov	r19,r20
    8554:	ad403fcc 	andi	r21,r21,255
    8558:	ad40201c 	xori	r21,r21,128
    855c:	ad7fe004 	addi	r21,r21,-128
    8560:	a8000126 	beq	r21,zero,8568 <___vfiprintf_internal_r+0x42c>
    8564:	9cc00044 	addi	r19,r19,1
    8568:	89c0008c 	andi	r7,r17,2
    856c:	38000126 	beq	r7,zero,8574 <___vfiprintf_internal_r+0x438>
    8570:	9cc00084 	addi	r19,r19,2
    8574:	88c0210c 	andi	r3,r17,132
    8578:	1801dd1e 	bne	r3,zero,8cf0 <___vfiprintf_internal_r+0xbb4>
    857c:	d9402517 	ldw	r5,148(sp)
    8580:	2cebc83a 	sub	r21,r5,r19
    8584:	0541da0e 	bge	zero,r21,8cf0 <___vfiprintf_internal_r+0xbb4>
    8588:	07000404 	movi	fp,16
    858c:	d8801c17 	ldw	r2,112(sp)
    8590:	e543be0e 	bge	fp,r21,948c <___vfiprintf_internal_r+0x1350>
    8594:	01400074 	movhi	r5,1
    8598:	2941fc04 	addi	r5,r5,2032
    859c:	dc002715 	stw	r16,156(sp)
    85a0:	d9801b17 	ldw	r6,108(sp)
    85a4:	a821883a 	mov	r16,r21
    85a8:	d9402315 	stw	r5,140(sp)
    85ac:	028001c4 	movi	r10,7
    85b0:	d9c02915 	stw	r7,164(sp)
    85b4:	182b883a 	mov	r21,r3
    85b8:	00000506 	br	85d0 <___vfiprintf_internal_r+0x494>
    85bc:	31000084 	addi	r4,r6,2
    85c0:	42000204 	addi	r8,r8,8
    85c4:	180d883a 	mov	r6,r3
    85c8:	843ffc04 	addi	r16,r16,-16
    85cc:	e4000f0e 	bge	fp,r16,860c <___vfiprintf_internal_r+0x4d0>
    85d0:	01000074 	movhi	r4,1
    85d4:	10800404 	addi	r2,r2,16
    85d8:	30c00044 	addi	r3,r6,1
    85dc:	2101fc04 	addi	r4,r4,2032
    85e0:	41000015 	stw	r4,0(r8)
    85e4:	47000115 	stw	fp,4(r8)
    85e8:	d8801c15 	stw	r2,112(sp)
    85ec:	d8c01b15 	stw	r3,108(sp)
    85f0:	50fff20e 	bge	r10,r3,85bc <__alt_data_end+0xfffbf1dc>
    85f4:	1001b21e 	bne	r2,zero,8cc0 <___vfiprintf_internal_r+0xb84>
    85f8:	843ffc04 	addi	r16,r16,-16
    85fc:	000d883a 	mov	r6,zero
    8600:	01000044 	movi	r4,1
    8604:	d811883a 	mov	r8,sp
    8608:	e43ff116 	blt	fp,r16,85d0 <__alt_data_end+0xfffbf1f0>
    860c:	a807883a 	mov	r3,r21
    8610:	d9c02917 	ldw	r7,164(sp)
    8614:	802b883a 	mov	r21,r16
    8618:	dc002717 	ldw	r16,156(sp)
    861c:	d9402317 	ldw	r5,140(sp)
    8620:	a885883a 	add	r2,r21,r2
    8624:	45400115 	stw	r21,4(r8)
    8628:	41400015 	stw	r5,0(r8)
    862c:	d8801c15 	stw	r2,112(sp)
    8630:	d9001b15 	stw	r4,108(sp)
    8634:	014001c4 	movi	r5,7
    8638:	29026216 	blt	r5,r4,8fc4 <___vfiprintf_internal_r+0xe88>
    863c:	d9801d87 	ldb	r6,118(sp)
    8640:	42000204 	addi	r8,r8,8
    8644:	21400044 	addi	r5,r4,1
    8648:	3001ae1e 	bne	r6,zero,8d04 <___vfiprintf_internal_r+0xbc8>
    864c:	3801bb26 	beq	r7,zero,8d3c <___vfiprintf_internal_r+0xc00>
    8650:	d9001d04 	addi	r4,sp,116
    8654:	10800084 	addi	r2,r2,2
    8658:	41000015 	stw	r4,0(r8)
    865c:	01000084 	movi	r4,2
    8660:	41000115 	stw	r4,4(r8)
    8664:	d8801c15 	stw	r2,112(sp)
    8668:	d9401b15 	stw	r5,108(sp)
    866c:	010001c4 	movi	r4,7
    8670:	2142680e 	bge	r4,r5,9014 <___vfiprintf_internal_r+0xed8>
    8674:	1002b11e 	bne	r2,zero,913c <___vfiprintf_internal_r+0x1000>
    8678:	01802004 	movi	r6,128
    867c:	01400044 	movi	r5,1
    8680:	0009883a 	mov	r4,zero
    8684:	d811883a 	mov	r8,sp
    8688:	1981ae1e 	bne	r3,r6,8d44 <___vfiprintf_internal_r+0xc08>
    868c:	d8c02517 	ldw	r3,148(sp)
    8690:	1cf9c83a 	sub	fp,r3,r19
    8694:	0701ab0e 	bge	zero,fp,8d44 <___vfiprintf_internal_r+0xc08>
    8698:	05400404 	movi	r21,16
    869c:	af03a90e 	bge	r21,fp,9544 <___vfiprintf_internal_r+0x1408>
    86a0:	01400074 	movhi	r5,1
    86a4:	2941f804 	addi	r5,r5,2016
    86a8:	d9402315 	stw	r5,140(sp)
    86ac:	01c001c4 	movi	r7,7
    86b0:	00000506 	br	86c8 <___vfiprintf_internal_r+0x58c>
    86b4:	21800084 	addi	r6,r4,2
    86b8:	42000204 	addi	r8,r8,8
    86bc:	1809883a 	mov	r4,r3
    86c0:	e73ffc04 	addi	fp,fp,-16
    86c4:	af000d0e 	bge	r21,fp,86fc <___vfiprintf_internal_r+0x5c0>
    86c8:	10800404 	addi	r2,r2,16
    86cc:	20c00044 	addi	r3,r4,1
    86d0:	44800015 	stw	r18,0(r8)
    86d4:	45400115 	stw	r21,4(r8)
    86d8:	d8801c15 	stw	r2,112(sp)
    86dc:	d8c01b15 	stw	r3,108(sp)
    86e0:	38fff40e 	bge	r7,r3,86b4 <__alt_data_end+0xfffbf2d4>
    86e4:	10022b1e 	bne	r2,zero,8f94 <___vfiprintf_internal_r+0xe58>
    86e8:	e73ffc04 	addi	fp,fp,-16
    86ec:	01800044 	movi	r6,1
    86f0:	0009883a 	mov	r4,zero
    86f4:	d811883a 	mov	r8,sp
    86f8:	af3ff316 	blt	r21,fp,86c8 <__alt_data_end+0xfffbf2e8>
    86fc:	d8c02317 	ldw	r3,140(sp)
    8700:	1705883a 	add	r2,r2,fp
    8704:	47000115 	stw	fp,4(r8)
    8708:	40c00015 	stw	r3,0(r8)
    870c:	d8801c15 	stw	r2,112(sp)
    8710:	d9801b15 	stw	r6,108(sp)
    8714:	00c001c4 	movi	r3,7
    8718:	19829416 	blt	r3,r6,916c <___vfiprintf_internal_r+0x1030>
    871c:	8521c83a 	sub	r16,r16,r20
    8720:	42000204 	addi	r8,r8,8
    8724:	31400044 	addi	r5,r6,1
    8728:	3009883a 	mov	r4,r6
    872c:	04018716 	blt	zero,r16,8d4c <___vfiprintf_internal_r+0xc10>
    8730:	a085883a 	add	r2,r20,r2
    8734:	45c00015 	stw	r23,0(r8)
    8738:	45000115 	stw	r20,4(r8)
    873c:	d8801c15 	stw	r2,112(sp)
    8740:	d9401b15 	stw	r5,108(sp)
    8744:	00c001c4 	movi	r3,7
    8748:	1941c20e 	bge	r3,r5,8e54 <___vfiprintf_internal_r+0xd18>
    874c:	1002531e 	bne	r2,zero,909c <___vfiprintf_internal_r+0xf60>
    8750:	d8001b15 	stw	zero,108(sp)
    8754:	8c40010c 	andi	r17,r17,4
    8758:	88023226 	beq	r17,zero,9024 <___vfiprintf_internal_r+0xee8>
    875c:	d9002517 	ldw	r4,148(sp)
    8760:	24e3c83a 	sub	r17,r4,r19
    8764:	04432916 	blt	zero,r17,940c <___vfiprintf_internal_r+0x12d0>
    8768:	d8802517 	ldw	r2,148(sp)
    876c:	14c0010e 	bge	r2,r19,8774 <___vfiprintf_internal_r+0x638>
    8770:	9805883a 	mov	r2,r19
    8774:	d8c02417 	ldw	r3,144(sp)
    8778:	1887883a 	add	r3,r3,r2
    877c:	d8c02415 	stw	r3,144(sp)
    8780:	d8001b15 	stw	zero,108(sp)
    8784:	d811883a 	mov	r8,sp
    8788:	003ea006 	br	820c <__alt_data_end+0xfffbee2c>
    878c:	8c400814 	ori	r17,r17,32
    8790:	b0c00007 	ldb	r3,0(r22)
    8794:	003ec606 	br	82b0 <__alt_data_end+0xfffbeed0>
    8798:	b0c00007 	ldb	r3,0(r22)
    879c:	00801b04 	movi	r2,108
    87a0:	18832026 	beq	r3,r2,9424 <___vfiprintf_internal_r+0x12e8>
    87a4:	8c400414 	ori	r17,r17,16
    87a8:	003ec106 	br	82b0 <__alt_data_end+0xfffbeed0>
    87ac:	9cc03fcc 	andi	r19,r19,255
    87b0:	b811883a 	mov	r8,r23
    87b4:	9803981e 	bne	r19,zero,9618 <___vfiprintf_internal_r+0x14dc>
    87b8:	8880080c 	andi	r2,r17,32
    87bc:	1002be26 	beq	r2,zero,92b8 <___vfiprintf_internal_r+0x117c>
    87c0:	d9002217 	ldw	r4,136(sp)
    87c4:	d9402417 	ldw	r5,144(sp)
    87c8:	20800017 	ldw	r2,0(r4)
    87cc:	2807d7fa 	srai	r3,r5,31
    87d0:	21000104 	addi	r4,r4,4
    87d4:	d9002215 	stw	r4,136(sp)
    87d8:	11400015 	stw	r5,0(r2)
    87dc:	10c00115 	stw	r3,4(r2)
    87e0:	003e8a06 	br	820c <__alt_data_end+0xfffbee2c>
    87e4:	9cc03fcc 	andi	r19,r19,255
    87e8:	b811883a 	mov	r8,r23
    87ec:	9803871e 	bne	r19,zero,960c <___vfiprintf_internal_r+0x14d0>
    87f0:	8880080c 	andi	r2,r17,32
    87f4:	10009a26 	beq	r2,zero,8a60 <___vfiprintf_internal_r+0x924>
    87f8:	d9002217 	ldw	r4,136(sp)
    87fc:	d8001d85 	stb	zero,118(sp)
    8800:	20800204 	addi	r2,r4,8
    8804:	24c00017 	ldw	r19,0(r4)
    8808:	25000117 	ldw	r20,4(r4)
    880c:	8002a416 	blt	r16,zero,92a0 <___vfiprintf_internal_r+0x1164>
    8810:	013fdfc4 	movi	r4,-129
    8814:	9d06b03a 	or	r3,r19,r20
    8818:	d8802215 	stw	r2,136(sp)
    881c:	8922703a 	and	r17,r17,r4
    8820:	18009b26 	beq	r3,zero,8a90 <___vfiprintf_internal_r+0x954>
    8824:	002b883a 	mov	r21,zero
    8828:	ddc01a04 	addi	r23,sp,104
    882c:	9806d0fa 	srli	r3,r19,3
    8830:	a008977a 	slli	r4,r20,29
    8834:	a028d0fa 	srli	r20,r20,3
    8838:	9cc001cc 	andi	r19,r19,7
    883c:	98800c04 	addi	r2,r19,48
    8840:	bdffffc4 	addi	r23,r23,-1
    8844:	20e6b03a 	or	r19,r4,r3
    8848:	b8800005 	stb	r2,0(r23)
    884c:	9d06b03a 	or	r3,r19,r20
    8850:	183ff61e 	bne	r3,zero,882c <__alt_data_end+0xfffbf44c>
    8854:	88c0004c 	andi	r3,r17,1
    8858:	18021f1e 	bne	r3,zero,90d8 <___vfiprintf_internal_r+0xf9c>
    885c:	d9401e17 	ldw	r5,120(sp)
    8860:	2de9c83a 	sub	r20,r5,r23
    8864:	003f3806 	br	8548 <__alt_data_end+0xfffbf168>
    8868:	9cc03fcc 	andi	r19,r19,255
    886c:	b811883a 	mov	r8,r23
    8870:	98034f1e 	bne	r19,zero,95b0 <___vfiprintf_internal_r+0x1474>
    8874:	00800074 	movhi	r2,1
    8878:	10819704 	addi	r2,r2,1628
    887c:	d8802615 	stw	r2,152(sp)
    8880:	8880080c 	andi	r2,r17,32
    8884:	1000ac26 	beq	r2,zero,8b38 <___vfiprintf_internal_r+0x9fc>
    8888:	d9002217 	ldw	r4,136(sp)
    888c:	24c00017 	ldw	r19,0(r4)
    8890:	25000117 	ldw	r20,4(r4)
    8894:	21000204 	addi	r4,r4,8
    8898:	d9002215 	stw	r4,136(sp)
    889c:	8880004c 	andi	r2,r17,1
    88a0:	1001e726 	beq	r2,zero,9040 <___vfiprintf_internal_r+0xf04>
    88a4:	9d04b03a 	or	r2,r19,r20
    88a8:	10025c1e 	bne	r2,zero,921c <___vfiprintf_internal_r+0x10e0>
    88ac:	d8001d85 	stb	zero,118(sp)
    88b0:	80024416 	blt	r16,zero,91c4 <___vfiprintf_internal_r+0x1088>
    88b4:	00bfdfc4 	movi	r2,-129
    88b8:	88a2703a 	and	r17,r17,r2
    88bc:	003f1d06 	br	8534 <__alt_data_end+0xfffbf154>
    88c0:	d8c02217 	ldw	r3,136(sp)
    88c4:	04c00044 	movi	r19,1
    88c8:	b811883a 	mov	r8,r23
    88cc:	18800017 	ldw	r2,0(r3)
    88d0:	18c00104 	addi	r3,r3,4
    88d4:	d8001d85 	stb	zero,118(sp)
    88d8:	d8801005 	stb	r2,64(sp)
    88dc:	d8c02215 	stw	r3,136(sp)
    88e0:	9829883a 	mov	r20,r19
    88e4:	ddc01004 	addi	r23,sp,64
    88e8:	0021883a 	mov	r16,zero
    88ec:	003f1e06 	br	8568 <__alt_data_end+0xfffbf188>
    88f0:	9cc03fcc 	andi	r19,r19,255
    88f4:	b811883a 	mov	r8,r23
    88f8:	9803331e 	bne	r19,zero,95c8 <___vfiprintf_internal_r+0x148c>
    88fc:	8880080c 	andi	r2,r17,32
    8900:	10004826 	beq	r2,zero,8a24 <___vfiprintf_internal_r+0x8e8>
    8904:	d9002217 	ldw	r4,136(sp)
    8908:	20800117 	ldw	r2,4(r4)
    890c:	24c00017 	ldw	r19,0(r4)
    8910:	21000204 	addi	r4,r4,8
    8914:	d9002215 	stw	r4,136(sp)
    8918:	1029883a 	mov	r20,r2
    891c:	10024c16 	blt	r2,zero,9250 <___vfiprintf_internal_r+0x1114>
    8920:	dd401d83 	ldbu	r21,118(sp)
    8924:	80007116 	blt	r16,zero,8aec <___vfiprintf_internal_r+0x9b0>
    8928:	00ffdfc4 	movi	r3,-129
    892c:	9d04b03a 	or	r2,r19,r20
    8930:	88e2703a 	and	r17,r17,r3
    8934:	1000d126 	beq	r2,zero,8c7c <___vfiprintf_internal_r+0xb40>
    8938:	a0023526 	beq	r20,zero,9210 <___vfiprintf_internal_r+0x10d4>
    893c:	ddc01a04 	addi	r23,sp,104
    8940:	4039883a 	mov	fp,r8
    8944:	9809883a 	mov	r4,r19
    8948:	a00b883a 	mov	r5,r20
    894c:	01800284 	movi	r6,10
    8950:	000f883a 	mov	r7,zero
    8954:	000a6680 	call	a668 <__umoddi3>
    8958:	10800c04 	addi	r2,r2,48
    895c:	bdffffc4 	addi	r23,r23,-1
    8960:	9809883a 	mov	r4,r19
    8964:	a00b883a 	mov	r5,r20
    8968:	b8800005 	stb	r2,0(r23)
    896c:	01800284 	movi	r6,10
    8970:	000f883a 	mov	r7,zero
    8974:	000a06c0 	call	a06c <__udivdi3>
    8978:	1027883a 	mov	r19,r2
    897c:	10c4b03a 	or	r2,r2,r3
    8980:	1829883a 	mov	r20,r3
    8984:	103fef1e 	bne	r2,zero,8944 <__alt_data_end+0xfffbf564>
    8988:	d9001e17 	ldw	r4,120(sp)
    898c:	e011883a 	mov	r8,fp
    8990:	25e9c83a 	sub	r20,r4,r23
    8994:	003eec06 	br	8548 <__alt_data_end+0xfffbf168>
    8998:	d8802307 	ldb	r2,140(sp)
    899c:	1002361e 	bne	r2,zero,9278 <___vfiprintf_internal_r+0x113c>
    89a0:	00c00804 	movi	r3,32
    89a4:	d8c02305 	stb	r3,140(sp)
    89a8:	04c00044 	movi	r19,1
    89ac:	b0c00007 	ldb	r3,0(r22)
    89b0:	003e3f06 	br	82b0 <__alt_data_end+0xfffbeed0>
    89b4:	8c400054 	ori	r17,r17,1
    89b8:	b0c00007 	ldb	r3,0(r22)
    89bc:	003e3c06 	br	82b0 <__alt_data_end+0xfffbeed0>
    89c0:	8c402014 	ori	r17,r17,128
    89c4:	b0c00007 	ldb	r3,0(r22)
    89c8:	003e3906 	br	82b0 <__alt_data_end+0xfffbeed0>
    89cc:	dc002715 	stw	r16,156(sp)
    89d0:	d8002515 	stw	zero,148(sp)
    89d4:	1f3ff404 	addi	fp,r3,-48
    89d8:	0009883a 	mov	r4,zero
    89dc:	b021883a 	mov	r16,r22
    89e0:	01400284 	movi	r5,10
    89e4:	000ade00 	call	ade0 <__mulsi3>
    89e8:	80c00007 	ldb	r3,0(r16)
    89ec:	e089883a 	add	r4,fp,r2
    89f0:	b5800044 	addi	r22,r22,1
    89f4:	1f3ff404 	addi	fp,r3,-48
    89f8:	b021883a 	mov	r16,r22
    89fc:	af3ff82e 	bgeu	r21,fp,89e0 <__alt_data_end+0xfffbf600>
    8a00:	d9002515 	stw	r4,148(sp)
    8a04:	dc002717 	ldw	r16,156(sp)
    8a08:	003e2a06 	br	82b4 <__alt_data_end+0xfffbeed4>
    8a0c:	9cc03fcc 	andi	r19,r19,255
    8a10:	b811883a 	mov	r8,r23
    8a14:	9802e91e 	bne	r19,zero,95bc <___vfiprintf_internal_r+0x1480>
    8a18:	8c400414 	ori	r17,r17,16
    8a1c:	8880080c 	andi	r2,r17,32
    8a20:	103fb81e 	bne	r2,zero,8904 <__alt_data_end+0xfffbf524>
    8a24:	8880040c 	andi	r2,r17,16
    8a28:	10022e26 	beq	r2,zero,92e4 <___vfiprintf_internal_r+0x11a8>
    8a2c:	d9402217 	ldw	r5,136(sp)
    8a30:	2cc00017 	ldw	r19,0(r5)
    8a34:	29400104 	addi	r5,r5,4
    8a38:	d9402215 	stw	r5,136(sp)
    8a3c:	9829d7fa 	srai	r20,r19,31
    8a40:	a005883a 	mov	r2,r20
    8a44:	003fb506 	br	891c <__alt_data_end+0xfffbf53c>
    8a48:	9cc03fcc 	andi	r19,r19,255
    8a4c:	b811883a 	mov	r8,r23
    8a50:	9802fa1e 	bne	r19,zero,963c <___vfiprintf_internal_r+0x1500>
    8a54:	8c400414 	ori	r17,r17,16
    8a58:	8880080c 	andi	r2,r17,32
    8a5c:	103f661e 	bne	r2,zero,87f8 <__alt_data_end+0xfffbf418>
    8a60:	8880040c 	andi	r2,r17,16
    8a64:	10020626 	beq	r2,zero,9280 <___vfiprintf_internal_r+0x1144>
    8a68:	d9402217 	ldw	r5,136(sp)
    8a6c:	d8001d85 	stb	zero,118(sp)
    8a70:	0029883a 	mov	r20,zero
    8a74:	28800104 	addi	r2,r5,4
    8a78:	2cc00017 	ldw	r19,0(r5)
    8a7c:	80020816 	blt	r16,zero,92a0 <___vfiprintf_internal_r+0x1164>
    8a80:	00ffdfc4 	movi	r3,-129
    8a84:	d8802215 	stw	r2,136(sp)
    8a88:	88e2703a 	and	r17,r17,r3
    8a8c:	983f651e 	bne	r19,zero,8824 <__alt_data_end+0xfffbf444>
    8a90:	002b883a 	mov	r21,zero
    8a94:	8002cf26 	beq	r16,zero,95d4 <___vfiprintf_internal_r+0x1498>
    8a98:	0027883a 	mov	r19,zero
    8a9c:	0029883a 	mov	r20,zero
    8aa0:	003f6106 	br	8828 <__alt_data_end+0xfffbf448>
    8aa4:	9cc03fcc 	andi	r19,r19,255
    8aa8:	b811883a 	mov	r8,r23
    8aac:	9802e01e 	bne	r19,zero,9630 <___vfiprintf_internal_r+0x14f4>
    8ab0:	8c400414 	ori	r17,r17,16
    8ab4:	8880080c 	andi	r2,r17,32
    8ab8:	1000641e 	bne	r2,zero,8c4c <___vfiprintf_internal_r+0xb10>
    8abc:	8880040c 	andi	r2,r17,16
    8ac0:	1001c81e 	bne	r2,zero,91e4 <___vfiprintf_internal_r+0x10a8>
    8ac4:	8880100c 	andi	r2,r17,64
    8ac8:	d8001d85 	stb	zero,118(sp)
    8acc:	1002281e 	bne	r2,zero,9370 <___vfiprintf_internal_r+0x1234>
    8ad0:	d9002217 	ldw	r4,136(sp)
    8ad4:	0029883a 	mov	r20,zero
    8ad8:	20800104 	addi	r2,r4,4
    8adc:	24c00017 	ldw	r19,0(r4)
    8ae0:	8001c60e 	bge	r16,zero,91fc <___vfiprintf_internal_r+0x10c0>
    8ae4:	d8802215 	stw	r2,136(sp)
    8ae8:	002b883a 	mov	r21,zero
    8aec:	9d04b03a 	or	r2,r19,r20
    8af0:	103f911e 	bne	r2,zero,8938 <__alt_data_end+0xfffbf558>
    8af4:	00800044 	movi	r2,1
    8af8:	10803fcc 	andi	r2,r2,255
    8afc:	00c00044 	movi	r3,1
    8b00:	10c05f26 	beq	r2,r3,8c80 <___vfiprintf_internal_r+0xb44>
    8b04:	00c00084 	movi	r3,2
    8b08:	10ffe31e 	bne	r2,r3,8a98 <__alt_data_end+0xfffbf6b8>
    8b0c:	0027883a 	mov	r19,zero
    8b10:	0029883a 	mov	r20,zero
    8b14:	00015106 	br	905c <___vfiprintf_internal_r+0xf20>
    8b18:	9cc03fcc 	andi	r19,r19,255
    8b1c:	b811883a 	mov	r8,r23
    8b20:	9802c01e 	bne	r19,zero,9624 <___vfiprintf_internal_r+0x14e8>
    8b24:	01400074 	movhi	r5,1
    8b28:	29419204 	addi	r5,r5,1608
    8b2c:	d9402615 	stw	r5,152(sp)
    8b30:	8880080c 	andi	r2,r17,32
    8b34:	103f541e 	bne	r2,zero,8888 <__alt_data_end+0xfffbf4a8>
    8b38:	8880040c 	andi	r2,r17,16
    8b3c:	1001f226 	beq	r2,zero,9308 <___vfiprintf_internal_r+0x11cc>
    8b40:	d9402217 	ldw	r5,136(sp)
    8b44:	0029883a 	mov	r20,zero
    8b48:	2cc00017 	ldw	r19,0(r5)
    8b4c:	29400104 	addi	r5,r5,4
    8b50:	d9402215 	stw	r5,136(sp)
    8b54:	003f5106 	br	889c <__alt_data_end+0xfffbf4bc>
    8b58:	d8c02217 	ldw	r3,136(sp)
    8b5c:	b811883a 	mov	r8,r23
    8b60:	d8001d85 	stb	zero,118(sp)
    8b64:	1dc00017 	ldw	r23,0(r3)
    8b68:	1f000104 	addi	fp,r3,4
    8b6c:	b8025926 	beq	r23,zero,94d4 <___vfiprintf_internal_r+0x1398>
    8b70:	80023316 	blt	r16,zero,9440 <___vfiprintf_internal_r+0x1304>
    8b74:	800d883a 	mov	r6,r16
    8b78:	000b883a 	mov	r5,zero
    8b7c:	b809883a 	mov	r4,r23
    8b80:	da002a15 	stw	r8,168(sp)
    8b84:	00061140 	call	6114 <memchr>
    8b88:	da002a17 	ldw	r8,168(sp)
    8b8c:	10026826 	beq	r2,zero,9530 <___vfiprintf_internal_r+0x13f4>
    8b90:	15e9c83a 	sub	r20,r2,r23
    8b94:	dd401d83 	ldbu	r21,118(sp)
    8b98:	df002215 	stw	fp,136(sp)
    8b9c:	0021883a 	mov	r16,zero
    8ba0:	003e6906 	br	8548 <__alt_data_end+0xfffbf168>
    8ba4:	9cc03fcc 	andi	r19,r19,255
    8ba8:	b811883a 	mov	r8,r23
    8bac:	983fc126 	beq	r19,zero,8ab4 <__alt_data_end+0xfffbf6d4>
    8bb0:	d8c02303 	ldbu	r3,140(sp)
    8bb4:	d8c01d85 	stb	r3,118(sp)
    8bb8:	003fbe06 	br	8ab4 <__alt_data_end+0xfffbf6d4>
    8bbc:	d9002217 	ldw	r4,136(sp)
    8bc0:	d9402217 	ldw	r5,136(sp)
    8bc4:	21000017 	ldw	r4,0(r4)
    8bc8:	28800104 	addi	r2,r5,4
    8bcc:	d9002515 	stw	r4,148(sp)
    8bd0:	203e3d16 	blt	r4,zero,84c8 <__alt_data_end+0xfffbf0e8>
    8bd4:	d8802215 	stw	r2,136(sp)
    8bd8:	b0c00007 	ldb	r3,0(r22)
    8bdc:	003db406 	br	82b0 <__alt_data_end+0xfffbeed0>
    8be0:	00c00ac4 	movi	r3,43
    8be4:	d8c02305 	stb	r3,140(sp)
    8be8:	04c00044 	movi	r19,1
    8bec:	b0c00007 	ldb	r3,0(r22)
    8bf0:	003daf06 	br	82b0 <__alt_data_end+0xfffbeed0>
    8bf4:	b0c00007 	ldb	r3,0(r22)
    8bf8:	01000a84 	movi	r4,42
    8bfc:	b4000044 	addi	r16,r22,1
    8c00:	19025e26 	beq	r3,r4,957c <___vfiprintf_internal_r+0x1440>
    8c04:	1f3ff404 	addi	fp,r3,-48
    8c08:	0009883a 	mov	r4,zero
    8c0c:	af025236 	bltu	r21,fp,9558 <___vfiprintf_internal_r+0x141c>
    8c10:	01400284 	movi	r5,10
    8c14:	000ade00 	call	ade0 <__mulsi3>
    8c18:	80c00007 	ldb	r3,0(r16)
    8c1c:	1709883a 	add	r4,r2,fp
    8c20:	85800044 	addi	r22,r16,1
    8c24:	1f3ff404 	addi	fp,r3,-48
    8c28:	b021883a 	mov	r16,r22
    8c2c:	af3ff82e 	bgeu	r21,fp,8c10 <__alt_data_end+0xfffbf830>
    8c30:	2021883a 	mov	r16,r4
    8c34:	203d9f0e 	bge	r4,zero,82b4 <__alt_data_end+0xfffbeed4>
    8c38:	043fffc4 	movi	r16,-1
    8c3c:	003d9d06 	br	82b4 <__alt_data_end+0xfffbeed4>
    8c40:	8c401014 	ori	r17,r17,64
    8c44:	b0c00007 	ldb	r3,0(r22)
    8c48:	003d9906 	br	82b0 <__alt_data_end+0xfffbeed0>
    8c4c:	d9002217 	ldw	r4,136(sp)
    8c50:	d8001d85 	stb	zero,118(sp)
    8c54:	20c00204 	addi	r3,r4,8
    8c58:	24c00017 	ldw	r19,0(r4)
    8c5c:	25000117 	ldw	r20,4(r4)
    8c60:	8001e716 	blt	r16,zero,9400 <___vfiprintf_internal_r+0x12c4>
    8c64:	013fdfc4 	movi	r4,-129
    8c68:	9d04b03a 	or	r2,r19,r20
    8c6c:	d8c02215 	stw	r3,136(sp)
    8c70:	8922703a 	and	r17,r17,r4
    8c74:	002b883a 	mov	r21,zero
    8c78:	103f2f1e 	bne	r2,zero,8938 <__alt_data_end+0xfffbf558>
    8c7c:	803e2f26 	beq	r16,zero,853c <__alt_data_end+0xfffbf15c>
    8c80:	0027883a 	mov	r19,zero
    8c84:	9cc00c04 	addi	r19,r19,48
    8c88:	dcc019c5 	stb	r19,103(sp)
    8c8c:	dd002817 	ldw	r20,160(sp)
    8c90:	ddc019c4 	addi	r23,sp,103
    8c94:	003e2c06 	br	8548 <__alt_data_end+0xfffbf168>
    8c98:	9cc03fcc 	andi	r19,r19,255
    8c9c:	b811883a 	mov	r8,r23
    8ca0:	9802571e 	bne	r19,zero,9600 <___vfiprintf_internal_r+0x14c4>
    8ca4:	18005726 	beq	r3,zero,8e04 <___vfiprintf_internal_r+0xcc8>
    8ca8:	04c00044 	movi	r19,1
    8cac:	d8c01005 	stb	r3,64(sp)
    8cb0:	d8001d85 	stb	zero,118(sp)
    8cb4:	9829883a 	mov	r20,r19
    8cb8:	ddc01004 	addi	r23,sp,64
    8cbc:	003f0a06 	br	88e8 <__alt_data_end+0xfffbf508>
    8cc0:	d9402017 	ldw	r5,128(sp)
    8cc4:	d9002117 	ldw	r4,132(sp)
    8cc8:	d9801a04 	addi	r6,sp,104
    8ccc:	da802a15 	stw	r10,168(sp)
    8cd0:	00080280 	call	8028 <__sprint_r.part.0>
    8cd4:	da802a17 	ldw	r10,168(sp)
    8cd8:	1000501e 	bne	r2,zero,8e1c <___vfiprintf_internal_r+0xce0>
    8cdc:	d9801b17 	ldw	r6,108(sp)
    8ce0:	d8801c17 	ldw	r2,112(sp)
    8ce4:	d811883a 	mov	r8,sp
    8ce8:	31000044 	addi	r4,r6,1
    8cec:	003e3606 	br	85c8 <__alt_data_end+0xfffbf1e8>
    8cf0:	d9001b17 	ldw	r4,108(sp)
    8cf4:	d8801c17 	ldw	r2,112(sp)
    8cf8:	21400044 	addi	r5,r4,1
    8cfc:	d9801d87 	ldb	r6,118(sp)
    8d00:	303e5226 	beq	r6,zero,864c <__alt_data_end+0xfffbf26c>
    8d04:	01800044 	movi	r6,1
    8d08:	d9001d84 	addi	r4,sp,118
    8d0c:	1185883a 	add	r2,r2,r6
    8d10:	41000015 	stw	r4,0(r8)
    8d14:	41800115 	stw	r6,4(r8)
    8d18:	d8801c15 	stw	r2,112(sp)
    8d1c:	d9401b15 	stw	r5,108(sp)
    8d20:	010001c4 	movi	r4,7
    8d24:	2140b00e 	bge	r4,r5,8fe8 <___vfiprintf_internal_r+0xeac>
    8d28:	1000f61e 	bne	r2,zero,9104 <___vfiprintf_internal_r+0xfc8>
    8d2c:	3800b31e 	bne	r7,zero,8ffc <___vfiprintf_internal_r+0xec0>
    8d30:	0009883a 	mov	r4,zero
    8d34:	300b883a 	mov	r5,r6
    8d38:	d811883a 	mov	r8,sp
    8d3c:	01802004 	movi	r6,128
    8d40:	19be5226 	beq	r3,r6,868c <__alt_data_end+0xfffbf2ac>
    8d44:	8521c83a 	sub	r16,r16,r20
    8d48:	043e790e 	bge	zero,r16,8730 <__alt_data_end+0xfffbf350>
    8d4c:	05400404 	movi	r21,16
    8d50:	ac01b00e 	bge	r21,r16,9414 <___vfiprintf_internal_r+0x12d8>
    8d54:	01400074 	movhi	r5,1
    8d58:	2941f804 	addi	r5,r5,2016
    8d5c:	d9402315 	stw	r5,140(sp)
    8d60:	070001c4 	movi	fp,7
    8d64:	00000506 	br	8d7c <___vfiprintf_internal_r+0xc40>
    8d68:	21400084 	addi	r5,r4,2
    8d6c:	42000204 	addi	r8,r8,8
    8d70:	1809883a 	mov	r4,r3
    8d74:	843ffc04 	addi	r16,r16,-16
    8d78:	ac000d0e 	bge	r21,r16,8db0 <___vfiprintf_internal_r+0xc74>
    8d7c:	10800404 	addi	r2,r2,16
    8d80:	20c00044 	addi	r3,r4,1
    8d84:	44800015 	stw	r18,0(r8)
    8d88:	45400115 	stw	r21,4(r8)
    8d8c:	d8801c15 	stw	r2,112(sp)
    8d90:	d8c01b15 	stw	r3,108(sp)
    8d94:	e0fff40e 	bge	fp,r3,8d68 <__alt_data_end+0xfffbf988>
    8d98:	1000101e 	bne	r2,zero,8ddc <___vfiprintf_internal_r+0xca0>
    8d9c:	843ffc04 	addi	r16,r16,-16
    8da0:	01400044 	movi	r5,1
    8da4:	0009883a 	mov	r4,zero
    8da8:	d811883a 	mov	r8,sp
    8dac:	ac3ff316 	blt	r21,r16,8d7c <__alt_data_end+0xfffbf99c>
    8db0:	d8c02317 	ldw	r3,140(sp)
    8db4:	1405883a 	add	r2,r2,r16
    8db8:	44000115 	stw	r16,4(r8)
    8dbc:	40c00015 	stw	r3,0(r8)
    8dc0:	d8801c15 	stw	r2,112(sp)
    8dc4:	d9401b15 	stw	r5,108(sp)
    8dc8:	00c001c4 	movi	r3,7
    8dcc:	19401916 	blt	r3,r5,8e34 <___vfiprintf_internal_r+0xcf8>
    8dd0:	42000204 	addi	r8,r8,8
    8dd4:	29400044 	addi	r5,r5,1
    8dd8:	003e5506 	br	8730 <__alt_data_end+0xfffbf350>
    8ddc:	d9402017 	ldw	r5,128(sp)
    8de0:	d9002117 	ldw	r4,132(sp)
    8de4:	d9801a04 	addi	r6,sp,104
    8de8:	00080280 	call	8028 <__sprint_r.part.0>
    8dec:	10000b1e 	bne	r2,zero,8e1c <___vfiprintf_internal_r+0xce0>
    8df0:	d9001b17 	ldw	r4,108(sp)
    8df4:	d8801c17 	ldw	r2,112(sp)
    8df8:	d811883a 	mov	r8,sp
    8dfc:	21400044 	addi	r5,r4,1
    8e00:	003fdc06 	br	8d74 <__alt_data_end+0xfffbf994>
    8e04:	d8801c17 	ldw	r2,112(sp)
    8e08:	10000426 	beq	r2,zero,8e1c <___vfiprintf_internal_r+0xce0>
    8e0c:	d9402017 	ldw	r5,128(sp)
    8e10:	d9002117 	ldw	r4,132(sp)
    8e14:	d9801a04 	addi	r6,sp,104
    8e18:	00080280 	call	8028 <__sprint_r.part.0>
    8e1c:	d9402017 	ldw	r5,128(sp)
    8e20:	2880030b 	ldhu	r2,12(r5)
    8e24:	1080100c 	andi	r2,r2,64
    8e28:	10014d1e 	bne	r2,zero,9360 <___vfiprintf_internal_r+0x1224>
    8e2c:	d8802417 	ldw	r2,144(sp)
    8e30:	003d9706 	br	8490 <__alt_data_end+0xfffbf0b0>
    8e34:	1000d21e 	bne	r2,zero,9180 <___vfiprintf_internal_r+0x1044>
    8e38:	00c00044 	movi	r3,1
    8e3c:	a005883a 	mov	r2,r20
    8e40:	ddc00015 	stw	r23,0(sp)
    8e44:	dd000115 	stw	r20,4(sp)
    8e48:	dd001c15 	stw	r20,112(sp)
    8e4c:	d8c01b15 	stw	r3,108(sp)
    8e50:	d811883a 	mov	r8,sp
    8e54:	42000204 	addi	r8,r8,8
    8e58:	8c40010c 	andi	r17,r17,4
    8e5c:	88004026 	beq	r17,zero,8f60 <___vfiprintf_internal_r+0xe24>
    8e60:	d9002517 	ldw	r4,148(sp)
    8e64:	24e3c83a 	sub	r17,r4,r19
    8e68:	04403d0e 	bge	zero,r17,8f60 <___vfiprintf_internal_r+0xe24>
    8e6c:	04000404 	movi	r16,16
    8e70:	8441a90e 	bge	r16,r17,9518 <___vfiprintf_internal_r+0x13dc>
    8e74:	00c00074 	movhi	r3,1
    8e78:	18c1fc04 	addi	r3,r3,2032
    8e7c:	d9001b17 	ldw	r4,108(sp)
    8e80:	d8c02315 	stw	r3,140(sp)
    8e84:	050001c4 	movi	r20,7
    8e88:	dd402117 	ldw	r21,132(sp)
    8e8c:	ddc02017 	ldw	r23,128(sp)
    8e90:	00000506 	br	8ea8 <___vfiprintf_internal_r+0xd6c>
    8e94:	21400084 	addi	r5,r4,2
    8e98:	42000204 	addi	r8,r8,8
    8e9c:	1809883a 	mov	r4,r3
    8ea0:	8c7ffc04 	addi	r17,r17,-16
    8ea4:	84400f0e 	bge	r16,r17,8ee4 <___vfiprintf_internal_r+0xda8>
    8ea8:	01400074 	movhi	r5,1
    8eac:	10800404 	addi	r2,r2,16
    8eb0:	20c00044 	addi	r3,r4,1
    8eb4:	2941fc04 	addi	r5,r5,2032
    8eb8:	41400015 	stw	r5,0(r8)
    8ebc:	44000115 	stw	r16,4(r8)
    8ec0:	d8801c15 	stw	r2,112(sp)
    8ec4:	d8c01b15 	stw	r3,108(sp)
    8ec8:	a0fff20e 	bge	r20,r3,8e94 <__alt_data_end+0xfffbfab4>
    8ecc:	1000141e 	bne	r2,zero,8f20 <___vfiprintf_internal_r+0xde4>
    8ed0:	8c7ffc04 	addi	r17,r17,-16
    8ed4:	01400044 	movi	r5,1
    8ed8:	0009883a 	mov	r4,zero
    8edc:	d811883a 	mov	r8,sp
    8ee0:	847ff116 	blt	r16,r17,8ea8 <__alt_data_end+0xfffbfac8>
    8ee4:	d8c02317 	ldw	r3,140(sp)
    8ee8:	1445883a 	add	r2,r2,r17
    8eec:	44400115 	stw	r17,4(r8)
    8ef0:	40c00015 	stw	r3,0(r8)
    8ef4:	d8801c15 	stw	r2,112(sp)
    8ef8:	d9401b15 	stw	r5,108(sp)
    8efc:	00c001c4 	movi	r3,7
    8f00:	1940170e 	bge	r3,r5,8f60 <___vfiprintf_internal_r+0xe24>
    8f04:	1000101e 	bne	r2,zero,8f48 <___vfiprintf_internal_r+0xe0c>
    8f08:	d8802517 	ldw	r2,148(sp)
    8f0c:	14c11616 	blt	r2,r19,9368 <___vfiprintf_internal_r+0x122c>
    8f10:	d9002417 	ldw	r4,144(sp)
    8f14:	2089883a 	add	r4,r4,r2
    8f18:	d9002415 	stw	r4,144(sp)
    8f1c:	003e1806 	br	8780 <__alt_data_end+0xfffbf3a0>
    8f20:	d9801a04 	addi	r6,sp,104
    8f24:	b80b883a 	mov	r5,r23
    8f28:	a809883a 	mov	r4,r21
    8f2c:	00080280 	call	8028 <__sprint_r.part.0>
    8f30:	103fba1e 	bne	r2,zero,8e1c <__alt_data_end+0xfffbfa3c>
    8f34:	d9001b17 	ldw	r4,108(sp)
    8f38:	d8801c17 	ldw	r2,112(sp)
    8f3c:	d811883a 	mov	r8,sp
    8f40:	21400044 	addi	r5,r4,1
    8f44:	003fd606 	br	8ea0 <__alt_data_end+0xfffbfac0>
    8f48:	d9402017 	ldw	r5,128(sp)
    8f4c:	d9002117 	ldw	r4,132(sp)
    8f50:	d9801a04 	addi	r6,sp,104
    8f54:	00080280 	call	8028 <__sprint_r.part.0>
    8f58:	103fb01e 	bne	r2,zero,8e1c <__alt_data_end+0xfffbfa3c>
    8f5c:	d8801c17 	ldw	r2,112(sp)
    8f60:	d8c02517 	ldw	r3,148(sp)
    8f64:	1cc0010e 	bge	r3,r19,8f6c <___vfiprintf_internal_r+0xe30>
    8f68:	9807883a 	mov	r3,r19
    8f6c:	d9002417 	ldw	r4,144(sp)
    8f70:	20c9883a 	add	r4,r4,r3
    8f74:	d9002415 	stw	r4,144(sp)
    8f78:	103e0126 	beq	r2,zero,8780 <__alt_data_end+0xfffbf3a0>
    8f7c:	d9402017 	ldw	r5,128(sp)
    8f80:	d9002117 	ldw	r4,132(sp)
    8f84:	d9801a04 	addi	r6,sp,104
    8f88:	00080280 	call	8028 <__sprint_r.part.0>
    8f8c:	103dfc26 	beq	r2,zero,8780 <__alt_data_end+0xfffbf3a0>
    8f90:	003fa206 	br	8e1c <__alt_data_end+0xfffbfa3c>
    8f94:	d9402017 	ldw	r5,128(sp)
    8f98:	d9002117 	ldw	r4,132(sp)
    8f9c:	d9801a04 	addi	r6,sp,104
    8fa0:	d9c02b15 	stw	r7,172(sp)
    8fa4:	00080280 	call	8028 <__sprint_r.part.0>
    8fa8:	d9c02b17 	ldw	r7,172(sp)
    8fac:	103f9b1e 	bne	r2,zero,8e1c <__alt_data_end+0xfffbfa3c>
    8fb0:	d9001b17 	ldw	r4,108(sp)
    8fb4:	d8801c17 	ldw	r2,112(sp)
    8fb8:	d811883a 	mov	r8,sp
    8fbc:	21800044 	addi	r6,r4,1
    8fc0:	003dbf06 	br	86c0 <__alt_data_end+0xfffbf2e0>
    8fc4:	1000d81e 	bne	r2,zero,9328 <___vfiprintf_internal_r+0x11ec>
    8fc8:	d9001d87 	ldb	r4,118(sp)
    8fcc:	20000a26 	beq	r4,zero,8ff8 <___vfiprintf_internal_r+0xebc>
    8fd0:	00800044 	movi	r2,1
    8fd4:	d9001d84 	addi	r4,sp,118
    8fd8:	100b883a 	mov	r5,r2
    8fdc:	d9000015 	stw	r4,0(sp)
    8fe0:	d8800115 	stw	r2,4(sp)
    8fe4:	d811883a 	mov	r8,sp
    8fe8:	2809883a 	mov	r4,r5
    8fec:	42000204 	addi	r8,r8,8
    8ff0:	29400044 	addi	r5,r5,1
    8ff4:	003d9506 	br	864c <__alt_data_end+0xfffbf26c>
    8ff8:	3800fd26 	beq	r7,zero,93f0 <___vfiprintf_internal_r+0x12b4>
    8ffc:	00800084 	movi	r2,2
    9000:	d9001d04 	addi	r4,sp,116
    9004:	d9000015 	stw	r4,0(sp)
    9008:	d8800115 	stw	r2,4(sp)
    900c:	01400044 	movi	r5,1
    9010:	d811883a 	mov	r8,sp
    9014:	2809883a 	mov	r4,r5
    9018:	42000204 	addi	r8,r8,8
    901c:	29400044 	addi	r5,r5,1
    9020:	003f4606 	br	8d3c <__alt_data_end+0xfffbf95c>
    9024:	d8802517 	ldw	r2,148(sp)
    9028:	14c0010e 	bge	r2,r19,9030 <___vfiprintf_internal_r+0xef4>
    902c:	9805883a 	mov	r2,r19
    9030:	d9402417 	ldw	r5,144(sp)
    9034:	288b883a 	add	r5,r5,r2
    9038:	d9402415 	stw	r5,144(sp)
    903c:	003dd006 	br	8780 <__alt_data_end+0xfffbf3a0>
    9040:	d8001d85 	stb	zero,118(sp)
    9044:	80005d16 	blt	r16,zero,91bc <___vfiprintf_internal_r+0x1080>
    9048:	00ffdfc4 	movi	r3,-129
    904c:	9d04b03a 	or	r2,r19,r20
    9050:	88e2703a 	and	r17,r17,r3
    9054:	103d3726 	beq	r2,zero,8534 <__alt_data_end+0xfffbf154>
    9058:	002b883a 	mov	r21,zero
    905c:	d9002617 	ldw	r4,152(sp)
    9060:	ddc01a04 	addi	r23,sp,104
    9064:	988003cc 	andi	r2,r19,15
    9068:	a006973a 	slli	r3,r20,28
    906c:	2085883a 	add	r2,r4,r2
    9070:	9826d13a 	srli	r19,r19,4
    9074:	10800003 	ldbu	r2,0(r2)
    9078:	a028d13a 	srli	r20,r20,4
    907c:	bdffffc4 	addi	r23,r23,-1
    9080:	1ce6b03a 	or	r19,r3,r19
    9084:	b8800005 	stb	r2,0(r23)
    9088:	9d04b03a 	or	r2,r19,r20
    908c:	103ff51e 	bne	r2,zero,9064 <__alt_data_end+0xfffbfc84>
    9090:	d8801e17 	ldw	r2,120(sp)
    9094:	15e9c83a 	sub	r20,r2,r23
    9098:	003d2b06 	br	8548 <__alt_data_end+0xfffbf168>
    909c:	d9402017 	ldw	r5,128(sp)
    90a0:	d9002117 	ldw	r4,132(sp)
    90a4:	d9801a04 	addi	r6,sp,104
    90a8:	00080280 	call	8028 <__sprint_r.part.0>
    90ac:	103f5b1e 	bne	r2,zero,8e1c <__alt_data_end+0xfffbfa3c>
    90b0:	d8801c17 	ldw	r2,112(sp)
    90b4:	d811883a 	mov	r8,sp
    90b8:	003f6706 	br	8e58 <__alt_data_end+0xfffbfa78>
    90bc:	d9402017 	ldw	r5,128(sp)
    90c0:	d9002117 	ldw	r4,132(sp)
    90c4:	d9801a04 	addi	r6,sp,104
    90c8:	00080280 	call	8028 <__sprint_r.part.0>
    90cc:	103f531e 	bne	r2,zero,8e1c <__alt_data_end+0xfffbfa3c>
    90d0:	d811883a 	mov	r8,sp
    90d4:	003cd906 	br	843c <__alt_data_end+0xfffbf05c>
    90d8:	10803fcc 	andi	r2,r2,255
    90dc:	1080201c 	xori	r2,r2,128
    90e0:	10bfe004 	addi	r2,r2,-128
    90e4:	00c00c04 	movi	r3,48
    90e8:	10ffe926 	beq	r2,r3,9090 <__alt_data_end+0xfffbfcb0>
    90ec:	b8ffffc5 	stb	r3,-1(r23)
    90f0:	d8c01e17 	ldw	r3,120(sp)
    90f4:	b8bfffc4 	addi	r2,r23,-1
    90f8:	102f883a 	mov	r23,r2
    90fc:	18a9c83a 	sub	r20,r3,r2
    9100:	003d1106 	br	8548 <__alt_data_end+0xfffbf168>
    9104:	d9402017 	ldw	r5,128(sp)
    9108:	d9002117 	ldw	r4,132(sp)
    910c:	d9801a04 	addi	r6,sp,104
    9110:	d8c02a15 	stw	r3,168(sp)
    9114:	d9c02b15 	stw	r7,172(sp)
    9118:	00080280 	call	8028 <__sprint_r.part.0>
    911c:	d8c02a17 	ldw	r3,168(sp)
    9120:	d9c02b17 	ldw	r7,172(sp)
    9124:	103f3d1e 	bne	r2,zero,8e1c <__alt_data_end+0xfffbfa3c>
    9128:	d9001b17 	ldw	r4,108(sp)
    912c:	d8801c17 	ldw	r2,112(sp)
    9130:	d811883a 	mov	r8,sp
    9134:	21400044 	addi	r5,r4,1
    9138:	003d4406 	br	864c <__alt_data_end+0xfffbf26c>
    913c:	d9402017 	ldw	r5,128(sp)
    9140:	d9002117 	ldw	r4,132(sp)
    9144:	d9801a04 	addi	r6,sp,104
    9148:	d8c02a15 	stw	r3,168(sp)
    914c:	00080280 	call	8028 <__sprint_r.part.0>
    9150:	d8c02a17 	ldw	r3,168(sp)
    9154:	103f311e 	bne	r2,zero,8e1c <__alt_data_end+0xfffbfa3c>
    9158:	d9001b17 	ldw	r4,108(sp)
    915c:	d8801c17 	ldw	r2,112(sp)
    9160:	d811883a 	mov	r8,sp
    9164:	21400044 	addi	r5,r4,1
    9168:	003ef406 	br	8d3c <__alt_data_end+0xfffbf95c>
    916c:	1000bd1e 	bne	r2,zero,9464 <___vfiprintf_internal_r+0x1328>
    9170:	01400044 	movi	r5,1
    9174:	0009883a 	mov	r4,zero
    9178:	d811883a 	mov	r8,sp
    917c:	003ef106 	br	8d44 <__alt_data_end+0xfffbf964>
    9180:	d9402017 	ldw	r5,128(sp)
    9184:	d9002117 	ldw	r4,132(sp)
    9188:	d9801a04 	addi	r6,sp,104
    918c:	00080280 	call	8028 <__sprint_r.part.0>
    9190:	103f221e 	bne	r2,zero,8e1c <__alt_data_end+0xfffbfa3c>
    9194:	d9401b17 	ldw	r5,108(sp)
    9198:	d8801c17 	ldw	r2,112(sp)
    919c:	d811883a 	mov	r8,sp
    91a0:	29400044 	addi	r5,r5,1
    91a4:	003d6206 	br	8730 <__alt_data_end+0xfffbf350>
    91a8:	01400074 	movhi	r5,1
    91ac:	29419704 	addi	r5,r5,1628
    91b0:	d9402615 	stw	r5,152(sp)
    91b4:	d8c02215 	stw	r3,136(sp)
    91b8:	1023883a 	mov	r17,r2
    91bc:	9d04b03a 	or	r2,r19,r20
    91c0:	103fa51e 	bne	r2,zero,9058 <__alt_data_end+0xfffbfc78>
    91c4:	002b883a 	mov	r21,zero
    91c8:	00800084 	movi	r2,2
    91cc:	003e4a06 	br	8af8 <__alt_data_end+0xfffbf718>
    91d0:	01400074 	movhi	r5,1
    91d4:	29419704 	addi	r5,r5,1628
    91d8:	002b883a 	mov	r21,zero
    91dc:	d9402615 	stw	r5,152(sp)
    91e0:	003f9e06 	br	905c <__alt_data_end+0xfffbfc7c>
    91e4:	d9402217 	ldw	r5,136(sp)
    91e8:	d8001d85 	stb	zero,118(sp)
    91ec:	0029883a 	mov	r20,zero
    91f0:	28800104 	addi	r2,r5,4
    91f4:	2cc00017 	ldw	r19,0(r5)
    91f8:	803e3a16 	blt	r16,zero,8ae4 <__alt_data_end+0xfffbf704>
    91fc:	00ffdfc4 	movi	r3,-129
    9200:	d8802215 	stw	r2,136(sp)
    9204:	88e2703a 	and	r17,r17,r3
    9208:	002b883a 	mov	r21,zero
    920c:	983e9b26 	beq	r19,zero,8c7c <__alt_data_end+0xfffbf89c>
    9210:	00800244 	movi	r2,9
    9214:	14fdc936 	bltu	r2,r19,893c <__alt_data_end+0xfffbf55c>
    9218:	003e9a06 	br	8c84 <__alt_data_end+0xfffbf8a4>
    921c:	00800c04 	movi	r2,48
    9220:	d8c01d45 	stb	r3,117(sp)
    9224:	d8801d05 	stb	r2,116(sp)
    9228:	d8001d85 	stb	zero,118(sp)
    922c:	88c00094 	ori	r3,r17,2
    9230:	80009c16 	blt	r16,zero,94a4 <___vfiprintf_internal_r+0x1368>
    9234:	00bfdfc4 	movi	r2,-129
    9238:	88a2703a 	and	r17,r17,r2
    923c:	8c400094 	ori	r17,r17,2
    9240:	002b883a 	mov	r21,zero
    9244:	003f8506 	br	905c <__alt_data_end+0xfffbfc7c>
    9248:	b029883a 	mov	r20,r22
    924c:	003c0b06 	br	827c <__alt_data_end+0xfffbee9c>
    9250:	04e7c83a 	sub	r19,zero,r19
    9254:	05400b44 	movi	r21,45
    9258:	9804c03a 	cmpne	r2,r19,zero
    925c:	0529c83a 	sub	r20,zero,r20
    9260:	dd401d85 	stb	r21,118(sp)
    9264:	a0a9c83a 	sub	r20,r20,r2
    9268:	80009716 	blt	r16,zero,94c8 <___vfiprintf_internal_r+0x138c>
    926c:	00bfdfc4 	movi	r2,-129
    9270:	88a2703a 	and	r17,r17,r2
    9274:	003db006 	br	8938 <__alt_data_end+0xfffbf558>
    9278:	b0c00007 	ldb	r3,0(r22)
    927c:	003c0c06 	br	82b0 <__alt_data_end+0xfffbeed0>
    9280:	8880100c 	andi	r2,r17,64
    9284:	d8001d85 	stb	zero,118(sp)
    9288:	1000461e 	bne	r2,zero,93a4 <___vfiprintf_internal_r+0x1268>
    928c:	d9002217 	ldw	r4,136(sp)
    9290:	0029883a 	mov	r20,zero
    9294:	20800104 	addi	r2,r4,4
    9298:	24c00017 	ldw	r19,0(r4)
    929c:	803df80e 	bge	r16,zero,8a80 <__alt_data_end+0xfffbf6a0>
    92a0:	9d06b03a 	or	r3,r19,r20
    92a4:	d8802215 	stw	r2,136(sp)
    92a8:	183d5e1e 	bne	r3,zero,8824 <__alt_data_end+0xfffbf444>
    92ac:	002b883a 	mov	r21,zero
    92b0:	0005883a 	mov	r2,zero
    92b4:	003e1006 	br	8af8 <__alt_data_end+0xfffbf718>
    92b8:	8880040c 	andi	r2,r17,16
    92bc:	1000321e 	bne	r2,zero,9388 <___vfiprintf_internal_r+0x124c>
    92c0:	8c40100c 	andi	r17,r17,64
    92c4:	88008d26 	beq	r17,zero,94fc <___vfiprintf_internal_r+0x13c0>
    92c8:	d9402217 	ldw	r5,136(sp)
    92cc:	d8c02417 	ldw	r3,144(sp)
    92d0:	28800017 	ldw	r2,0(r5)
    92d4:	29400104 	addi	r5,r5,4
    92d8:	d9402215 	stw	r5,136(sp)
    92dc:	10c0000d 	sth	r3,0(r2)
    92e0:	003bca06 	br	820c <__alt_data_end+0xfffbee2c>
    92e4:	8880100c 	andi	r2,r17,64
    92e8:	10003a26 	beq	r2,zero,93d4 <___vfiprintf_internal_r+0x1298>
    92ec:	d8802217 	ldw	r2,136(sp)
    92f0:	14c0000f 	ldh	r19,0(r2)
    92f4:	10800104 	addi	r2,r2,4
    92f8:	d8802215 	stw	r2,136(sp)
    92fc:	9829d7fa 	srai	r20,r19,31
    9300:	a005883a 	mov	r2,r20
    9304:	003d8506 	br	891c <__alt_data_end+0xfffbf53c>
    9308:	8880100c 	andi	r2,r17,64
    930c:	10002b26 	beq	r2,zero,93bc <___vfiprintf_internal_r+0x1280>
    9310:	d8802217 	ldw	r2,136(sp)
    9314:	0029883a 	mov	r20,zero
    9318:	14c0000b 	ldhu	r19,0(r2)
    931c:	10800104 	addi	r2,r2,4
    9320:	d8802215 	stw	r2,136(sp)
    9324:	003d5d06 	br	889c <__alt_data_end+0xfffbf4bc>
    9328:	d9402017 	ldw	r5,128(sp)
    932c:	d9002117 	ldw	r4,132(sp)
    9330:	d9801a04 	addi	r6,sp,104
    9334:	d8c02a15 	stw	r3,168(sp)
    9338:	d9c02b15 	stw	r7,172(sp)
    933c:	00080280 	call	8028 <__sprint_r.part.0>
    9340:	d8c02a17 	ldw	r3,168(sp)
    9344:	d9c02b17 	ldw	r7,172(sp)
    9348:	103eb41e 	bne	r2,zero,8e1c <__alt_data_end+0xfffbfa3c>
    934c:	d9001b17 	ldw	r4,108(sp)
    9350:	d8801c17 	ldw	r2,112(sp)
    9354:	d811883a 	mov	r8,sp
    9358:	21400044 	addi	r5,r4,1
    935c:	003e6706 	br	8cfc <__alt_data_end+0xfffbf91c>
    9360:	00bfffc4 	movi	r2,-1
    9364:	003c4a06 	br	8490 <__alt_data_end+0xfffbf0b0>
    9368:	9805883a 	mov	r2,r19
    936c:	003ee806 	br	8f10 <__alt_data_end+0xfffbfb30>
    9370:	d8c02217 	ldw	r3,136(sp)
    9374:	0029883a 	mov	r20,zero
    9378:	18800104 	addi	r2,r3,4
    937c:	1cc0000b 	ldhu	r19,0(r3)
    9380:	803f9e0e 	bge	r16,zero,91fc <__alt_data_end+0xfffbfe1c>
    9384:	003dd706 	br	8ae4 <__alt_data_end+0xfffbf704>
    9388:	d8c02217 	ldw	r3,136(sp)
    938c:	d9002417 	ldw	r4,144(sp)
    9390:	18800017 	ldw	r2,0(r3)
    9394:	18c00104 	addi	r3,r3,4
    9398:	d8c02215 	stw	r3,136(sp)
    939c:	11000015 	stw	r4,0(r2)
    93a0:	003b9a06 	br	820c <__alt_data_end+0xfffbee2c>
    93a4:	d8c02217 	ldw	r3,136(sp)
    93a8:	0029883a 	mov	r20,zero
    93ac:	18800104 	addi	r2,r3,4
    93b0:	1cc0000b 	ldhu	r19,0(r3)
    93b4:	803db20e 	bge	r16,zero,8a80 <__alt_data_end+0xfffbf6a0>
    93b8:	003fb906 	br	92a0 <__alt_data_end+0xfffbfec0>
    93bc:	d9002217 	ldw	r4,136(sp)
    93c0:	0029883a 	mov	r20,zero
    93c4:	24c00017 	ldw	r19,0(r4)
    93c8:	21000104 	addi	r4,r4,4
    93cc:	d9002215 	stw	r4,136(sp)
    93d0:	003d3206 	br	889c <__alt_data_end+0xfffbf4bc>
    93d4:	d8c02217 	ldw	r3,136(sp)
    93d8:	1cc00017 	ldw	r19,0(r3)
    93dc:	18c00104 	addi	r3,r3,4
    93e0:	d8c02215 	stw	r3,136(sp)
    93e4:	9829d7fa 	srai	r20,r19,31
    93e8:	a005883a 	mov	r2,r20
    93ec:	003d4b06 	br	891c <__alt_data_end+0xfffbf53c>
    93f0:	0009883a 	mov	r4,zero
    93f4:	01400044 	movi	r5,1
    93f8:	d811883a 	mov	r8,sp
    93fc:	003e4f06 	br	8d3c <__alt_data_end+0xfffbf95c>
    9400:	d8c02215 	stw	r3,136(sp)
    9404:	002b883a 	mov	r21,zero
    9408:	003db806 	br	8aec <__alt_data_end+0xfffbf70c>
    940c:	d811883a 	mov	r8,sp
    9410:	003e9606 	br	8e6c <__alt_data_end+0xfffbfa8c>
    9414:	01000074 	movhi	r4,1
    9418:	2101f804 	addi	r4,r4,2016
    941c:	d9002315 	stw	r4,140(sp)
    9420:	003e6306 	br	8db0 <__alt_data_end+0xfffbf9d0>
    9424:	b0c00043 	ldbu	r3,1(r22)
    9428:	8c400814 	ori	r17,r17,32
    942c:	b5800044 	addi	r22,r22,1
    9430:	18c03fcc 	andi	r3,r3,255
    9434:	18c0201c 	xori	r3,r3,128
    9438:	18ffe004 	addi	r3,r3,-128
    943c:	003b9c06 	br	82b0 <__alt_data_end+0xfffbeed0>
    9440:	b809883a 	mov	r4,r23
    9444:	da002a15 	stw	r8,168(sp)
    9448:	00007440 	call	744 <strlen>
    944c:	1029883a 	mov	r20,r2
    9450:	dd401d83 	ldbu	r21,118(sp)
    9454:	df002215 	stw	fp,136(sp)
    9458:	0021883a 	mov	r16,zero
    945c:	da002a17 	ldw	r8,168(sp)
    9460:	003c3906 	br	8548 <__alt_data_end+0xfffbf168>
    9464:	d9402017 	ldw	r5,128(sp)
    9468:	d9002117 	ldw	r4,132(sp)
    946c:	d9801a04 	addi	r6,sp,104
    9470:	00080280 	call	8028 <__sprint_r.part.0>
    9474:	103e691e 	bne	r2,zero,8e1c <__alt_data_end+0xfffbfa3c>
    9478:	d9001b17 	ldw	r4,108(sp)
    947c:	d8801c17 	ldw	r2,112(sp)
    9480:	d811883a 	mov	r8,sp
    9484:	21400044 	addi	r5,r4,1
    9488:	003e2e06 	br	8d44 <__alt_data_end+0xfffbf964>
    948c:	01000074 	movhi	r4,1
    9490:	2101fc04 	addi	r4,r4,2032
    9494:	d9002315 	stw	r4,140(sp)
    9498:	d9001b17 	ldw	r4,108(sp)
    949c:	21000044 	addi	r4,r4,1
    94a0:	003c5e06 	br	861c <__alt_data_end+0xfffbf23c>
    94a4:	002b883a 	mov	r21,zero
    94a8:	00800084 	movi	r2,2
    94ac:	10803fcc 	andi	r2,r2,255
    94b0:	01000044 	movi	r4,1
    94b4:	11002b26 	beq	r2,r4,9564 <___vfiprintf_internal_r+0x1428>
    94b8:	01000084 	movi	r4,2
    94bc:	11002b1e 	bne	r2,r4,956c <___vfiprintf_internal_r+0x1430>
    94c0:	1823883a 	mov	r17,r3
    94c4:	003ee506 	br	905c <__alt_data_end+0xfffbfc7c>
    94c8:	8807883a 	mov	r3,r17
    94cc:	00800044 	movi	r2,1
    94d0:	003ff606 	br	94ac <__alt_data_end+0xfffc00cc>
    94d4:	00800184 	movi	r2,6
    94d8:	1400012e 	bgeu	r2,r16,94e0 <___vfiprintf_internal_r+0x13a4>
    94dc:	1021883a 	mov	r16,r2
    94e0:	8029883a 	mov	r20,r16
    94e4:	8027883a 	mov	r19,r16
    94e8:	80002216 	blt	r16,zero,9574 <___vfiprintf_internal_r+0x1438>
    94ec:	05c00074 	movhi	r23,1
    94f0:	df002215 	stw	fp,136(sp)
    94f4:	bdc19c04 	addi	r23,r23,1648
    94f8:	003cfb06 	br	88e8 <__alt_data_end+0xfffbf508>
    94fc:	d9002217 	ldw	r4,136(sp)
    9500:	d9402417 	ldw	r5,144(sp)
    9504:	20800017 	ldw	r2,0(r4)
    9508:	21000104 	addi	r4,r4,4
    950c:	d9002215 	stw	r4,136(sp)
    9510:	11400015 	stw	r5,0(r2)
    9514:	003b3d06 	br	820c <__alt_data_end+0xfffbee2c>
    9518:	01400074 	movhi	r5,1
    951c:	2941fc04 	addi	r5,r5,2032
    9520:	d9402315 	stw	r5,140(sp)
    9524:	d9401b17 	ldw	r5,108(sp)
    9528:	29400044 	addi	r5,r5,1
    952c:	003e6d06 	br	8ee4 <__alt_data_end+0xfffbfb04>
    9530:	8029883a 	mov	r20,r16
    9534:	dd401d83 	ldbu	r21,118(sp)
    9538:	df002215 	stw	fp,136(sp)
    953c:	0021883a 	mov	r16,zero
    9540:	003c0106 	br	8548 <__alt_data_end+0xfffbf168>
    9544:	00c00074 	movhi	r3,1
    9548:	18c1f804 	addi	r3,r3,2016
    954c:	d8c02315 	stw	r3,140(sp)
    9550:	280d883a 	mov	r6,r5
    9554:	003c6906 	br	86fc <__alt_data_end+0xfffbf31c>
    9558:	802d883a 	mov	r22,r16
    955c:	0021883a 	mov	r16,zero
    9560:	003b5406 	br	82b4 <__alt_data_end+0xfffbeed4>
    9564:	1823883a 	mov	r17,r3
    9568:	003cf306 	br	8938 <__alt_data_end+0xfffbf558>
    956c:	1823883a 	mov	r17,r3
    9570:	003cad06 	br	8828 <__alt_data_end+0xfffbf448>
    9574:	0027883a 	mov	r19,zero
    9578:	003fdc06 	br	94ec <__alt_data_end+0xfffc010c>
    957c:	d9402217 	ldw	r5,136(sp)
    9580:	8005883a 	mov	r2,r16
    9584:	b0c00043 	ldbu	r3,1(r22)
    9588:	2c000017 	ldw	r16,0(r5)
    958c:	29000104 	addi	r4,r5,4
    9590:	d9002215 	stw	r4,136(sp)
    9594:	102d883a 	mov	r22,r2
    9598:	803fa50e 	bge	r16,zero,9430 <__alt_data_end+0xfffc0050>
    959c:	18c03fcc 	andi	r3,r3,255
    95a0:	18c0201c 	xori	r3,r3,128
    95a4:	043fffc4 	movi	r16,-1
    95a8:	18ffe004 	addi	r3,r3,-128
    95ac:	003b4006 	br	82b0 <__alt_data_end+0xfffbeed0>
    95b0:	d9402303 	ldbu	r5,140(sp)
    95b4:	d9401d85 	stb	r5,118(sp)
    95b8:	003cae06 	br	8874 <__alt_data_end+0xfffbf494>
    95bc:	d8c02303 	ldbu	r3,140(sp)
    95c0:	d8c01d85 	stb	r3,118(sp)
    95c4:	003d1406 	br	8a18 <__alt_data_end+0xfffbf638>
    95c8:	d8c02303 	ldbu	r3,140(sp)
    95cc:	d8c01d85 	stb	r3,118(sp)
    95d0:	003cca06 	br	88fc <__alt_data_end+0xfffbf51c>
    95d4:	8880004c 	andi	r2,r17,1
    95d8:	002b883a 	mov	r21,zero
    95dc:	10000526 	beq	r2,zero,95f4 <___vfiprintf_internal_r+0x14b8>
    95e0:	00800c04 	movi	r2,48
    95e4:	d88019c5 	stb	r2,103(sp)
    95e8:	dd002817 	ldw	r20,160(sp)
    95ec:	ddc019c4 	addi	r23,sp,103
    95f0:	003bd506 	br	8548 <__alt_data_end+0xfffbf168>
    95f4:	0029883a 	mov	r20,zero
    95f8:	ddc01a04 	addi	r23,sp,104
    95fc:	003bd206 	br	8548 <__alt_data_end+0xfffbf168>
    9600:	d9002303 	ldbu	r4,140(sp)
    9604:	d9001d85 	stb	r4,118(sp)
    9608:	003da606 	br	8ca4 <__alt_data_end+0xfffbf8c4>
    960c:	d8c02303 	ldbu	r3,140(sp)
    9610:	d8c01d85 	stb	r3,118(sp)
    9614:	003c7606 	br	87f0 <__alt_data_end+0xfffbf410>
    9618:	d8c02303 	ldbu	r3,140(sp)
    961c:	d8c01d85 	stb	r3,118(sp)
    9620:	003c6506 	br	87b8 <__alt_data_end+0xfffbf3d8>
    9624:	d9002303 	ldbu	r4,140(sp)
    9628:	d9001d85 	stb	r4,118(sp)
    962c:	003d3d06 	br	8b24 <__alt_data_end+0xfffbf744>
    9630:	d8c02303 	ldbu	r3,140(sp)
    9634:	d8c01d85 	stb	r3,118(sp)
    9638:	003d1d06 	br	8ab0 <__alt_data_end+0xfffbf6d0>
    963c:	d8c02303 	ldbu	r3,140(sp)
    9640:	d8c01d85 	stb	r3,118(sp)
    9644:	003d0306 	br	8a54 <__alt_data_end+0xfffbf674>

00009648 <__vfiprintf_internal>:
    9648:	00800074 	movhi	r2,1
    964c:	1088f904 	addi	r2,r2,9188
    9650:	300f883a 	mov	r7,r6
    9654:	280d883a 	mov	r6,r5
    9658:	200b883a 	mov	r5,r4
    965c:	11000017 	ldw	r4,0(r2)
    9660:	000813c1 	jmpi	813c <___vfiprintf_internal_r>

00009664 <__sbprintf>:
    9664:	2880030b 	ldhu	r2,12(r5)
    9668:	2ac01917 	ldw	r11,100(r5)
    966c:	2a80038b 	ldhu	r10,14(r5)
    9670:	2a400717 	ldw	r9,28(r5)
    9674:	2a000917 	ldw	r8,36(r5)
    9678:	defee204 	addi	sp,sp,-1144
    967c:	00c10004 	movi	r3,1024
    9680:	dc011a15 	stw	r16,1128(sp)
    9684:	10bfff4c 	andi	r2,r2,65533
    9688:	2821883a 	mov	r16,r5
    968c:	d8cb883a 	add	r5,sp,r3
    9690:	dc811c15 	stw	r18,1136(sp)
    9694:	dc411b15 	stw	r17,1132(sp)
    9698:	dfc11d15 	stw	ra,1140(sp)
    969c:	2025883a 	mov	r18,r4
    96a0:	d881030d 	sth	r2,1036(sp)
    96a4:	dac11915 	stw	r11,1124(sp)
    96a8:	da81038d 	sth	r10,1038(sp)
    96ac:	da410715 	stw	r9,1052(sp)
    96b0:	da010915 	stw	r8,1060(sp)
    96b4:	dec10015 	stw	sp,1024(sp)
    96b8:	dec10415 	stw	sp,1040(sp)
    96bc:	d8c10215 	stw	r3,1032(sp)
    96c0:	d8c10515 	stw	r3,1044(sp)
    96c4:	d8010615 	stw	zero,1048(sp)
    96c8:	000813c0 	call	813c <___vfiprintf_internal_r>
    96cc:	1023883a 	mov	r17,r2
    96d0:	10000416 	blt	r2,zero,96e4 <__sbprintf+0x80>
    96d4:	d9410004 	addi	r5,sp,1024
    96d8:	9009883a 	mov	r4,r18
    96dc:	00047b00 	call	47b0 <_fflush_r>
    96e0:	10000d1e 	bne	r2,zero,9718 <__sbprintf+0xb4>
    96e4:	d881030b 	ldhu	r2,1036(sp)
    96e8:	1080100c 	andi	r2,r2,64
    96ec:	10000326 	beq	r2,zero,96fc <__sbprintf+0x98>
    96f0:	8080030b 	ldhu	r2,12(r16)
    96f4:	10801014 	ori	r2,r2,64
    96f8:	8080030d 	sth	r2,12(r16)
    96fc:	8805883a 	mov	r2,r17
    9700:	dfc11d17 	ldw	ra,1140(sp)
    9704:	dc811c17 	ldw	r18,1136(sp)
    9708:	dc411b17 	ldw	r17,1132(sp)
    970c:	dc011a17 	ldw	r16,1128(sp)
    9710:	dec11e04 	addi	sp,sp,1144
    9714:	f800283a 	ret
    9718:	047fffc4 	movi	r17,-1
    971c:	003ff106 	br	96e4 <__alt_data_end+0xfffc0304>

00009720 <__swbuf_r>:
    9720:	defffb04 	addi	sp,sp,-20
    9724:	dcc00315 	stw	r19,12(sp)
    9728:	dc800215 	stw	r18,8(sp)
    972c:	dc000015 	stw	r16,0(sp)
    9730:	dfc00415 	stw	ra,16(sp)
    9734:	dc400115 	stw	r17,4(sp)
    9738:	2025883a 	mov	r18,r4
    973c:	2827883a 	mov	r19,r5
    9740:	3021883a 	mov	r16,r6
    9744:	20000226 	beq	r4,zero,9750 <__swbuf_r+0x30>
    9748:	20800e17 	ldw	r2,56(r4)
    974c:	10004226 	beq	r2,zero,9858 <__swbuf_r+0x138>
    9750:	80800617 	ldw	r2,24(r16)
    9754:	8100030b 	ldhu	r4,12(r16)
    9758:	80800215 	stw	r2,8(r16)
    975c:	2080020c 	andi	r2,r4,8
    9760:	10003626 	beq	r2,zero,983c <__swbuf_r+0x11c>
    9764:	80c00417 	ldw	r3,16(r16)
    9768:	18003426 	beq	r3,zero,983c <__swbuf_r+0x11c>
    976c:	2088000c 	andi	r2,r4,8192
    9770:	9c403fcc 	andi	r17,r19,255
    9774:	10001a26 	beq	r2,zero,97e0 <__swbuf_r+0xc0>
    9778:	80800017 	ldw	r2,0(r16)
    977c:	81000517 	ldw	r4,20(r16)
    9780:	10c7c83a 	sub	r3,r2,r3
    9784:	1900200e 	bge	r3,r4,9808 <__swbuf_r+0xe8>
    9788:	18c00044 	addi	r3,r3,1
    978c:	81000217 	ldw	r4,8(r16)
    9790:	11400044 	addi	r5,r2,1
    9794:	81400015 	stw	r5,0(r16)
    9798:	213fffc4 	addi	r4,r4,-1
    979c:	81000215 	stw	r4,8(r16)
    97a0:	14c00005 	stb	r19,0(r2)
    97a4:	80800517 	ldw	r2,20(r16)
    97a8:	10c01e26 	beq	r2,r3,9824 <__swbuf_r+0x104>
    97ac:	8080030b 	ldhu	r2,12(r16)
    97b0:	1080004c 	andi	r2,r2,1
    97b4:	10000226 	beq	r2,zero,97c0 <__swbuf_r+0xa0>
    97b8:	00800284 	movi	r2,10
    97bc:	88801926 	beq	r17,r2,9824 <__swbuf_r+0x104>
    97c0:	8805883a 	mov	r2,r17
    97c4:	dfc00417 	ldw	ra,16(sp)
    97c8:	dcc00317 	ldw	r19,12(sp)
    97cc:	dc800217 	ldw	r18,8(sp)
    97d0:	dc400117 	ldw	r17,4(sp)
    97d4:	dc000017 	ldw	r16,0(sp)
    97d8:	dec00504 	addi	sp,sp,20
    97dc:	f800283a 	ret
    97e0:	81401917 	ldw	r5,100(r16)
    97e4:	00b7ffc4 	movi	r2,-8193
    97e8:	21080014 	ori	r4,r4,8192
    97ec:	2884703a 	and	r2,r5,r2
    97f0:	80801915 	stw	r2,100(r16)
    97f4:	80800017 	ldw	r2,0(r16)
    97f8:	8100030d 	sth	r4,12(r16)
    97fc:	81000517 	ldw	r4,20(r16)
    9800:	10c7c83a 	sub	r3,r2,r3
    9804:	193fe016 	blt	r3,r4,9788 <__alt_data_end+0xfffc03a8>
    9808:	800b883a 	mov	r5,r16
    980c:	9009883a 	mov	r4,r18
    9810:	00047b00 	call	47b0 <_fflush_r>
    9814:	1000071e 	bne	r2,zero,9834 <__swbuf_r+0x114>
    9818:	80800017 	ldw	r2,0(r16)
    981c:	00c00044 	movi	r3,1
    9820:	003fda06 	br	978c <__alt_data_end+0xfffc03ac>
    9824:	800b883a 	mov	r5,r16
    9828:	9009883a 	mov	r4,r18
    982c:	00047b00 	call	47b0 <_fflush_r>
    9830:	103fe326 	beq	r2,zero,97c0 <__alt_data_end+0xfffc03e0>
    9834:	00bfffc4 	movi	r2,-1
    9838:	003fe206 	br	97c4 <__alt_data_end+0xfffc03e4>
    983c:	800b883a 	mov	r5,r16
    9840:	9009883a 	mov	r4,r18
    9844:	0002b900 	call	2b90 <__swsetup_r>
    9848:	103ffa1e 	bne	r2,zero,9834 <__alt_data_end+0xfffc0454>
    984c:	8100030b 	ldhu	r4,12(r16)
    9850:	80c00417 	ldw	r3,16(r16)
    9854:	003fc506 	br	976c <__alt_data_end+0xfffc038c>
    9858:	0004b9c0 	call	4b9c <__sinit>
    985c:	003fbc06 	br	9750 <__alt_data_end+0xfffc0370>

00009860 <__swbuf>:
    9860:	00800074 	movhi	r2,1
    9864:	1088f904 	addi	r2,r2,9188
    9868:	280d883a 	mov	r6,r5
    986c:	200b883a 	mov	r5,r4
    9870:	11000017 	ldw	r4,0(r2)
    9874:	00097201 	jmpi	9720 <__swbuf_r>

00009878 <_write_r>:
    9878:	defffd04 	addi	sp,sp,-12
    987c:	2805883a 	mov	r2,r5
    9880:	dc000015 	stw	r16,0(sp)
    9884:	04000074 	movhi	r16,1
    9888:	dc400115 	stw	r17,4(sp)
    988c:	300b883a 	mov	r5,r6
    9890:	840fc904 	addi	r16,r16,16164
    9894:	2023883a 	mov	r17,r4
    9898:	380d883a 	mov	r6,r7
    989c:	1009883a 	mov	r4,r2
    98a0:	dfc00215 	stw	ra,8(sp)
    98a4:	80000015 	stw	zero,0(r16)
    98a8:	000dfe80 	call	dfe8 <write>
    98ac:	00ffffc4 	movi	r3,-1
    98b0:	10c00526 	beq	r2,r3,98c8 <_write_r+0x50>
    98b4:	dfc00217 	ldw	ra,8(sp)
    98b8:	dc400117 	ldw	r17,4(sp)
    98bc:	dc000017 	ldw	r16,0(sp)
    98c0:	dec00304 	addi	sp,sp,12
    98c4:	f800283a 	ret
    98c8:	80c00017 	ldw	r3,0(r16)
    98cc:	183ff926 	beq	r3,zero,98b4 <__alt_data_end+0xfffc04d4>
    98d0:	88c00015 	stw	r3,0(r17)
    98d4:	003ff706 	br	98b4 <__alt_data_end+0xfffc04d4>

000098d8 <_close_r>:
    98d8:	defffd04 	addi	sp,sp,-12
    98dc:	dc000015 	stw	r16,0(sp)
    98e0:	04000074 	movhi	r16,1
    98e4:	dc400115 	stw	r17,4(sp)
    98e8:	840fc904 	addi	r16,r16,16164
    98ec:	2023883a 	mov	r17,r4
    98f0:	2809883a 	mov	r4,r5
    98f4:	dfc00215 	stw	ra,8(sp)
    98f8:	80000015 	stw	zero,0(r16)
    98fc:	000d6fc0 	call	d6fc <close>
    9900:	00ffffc4 	movi	r3,-1
    9904:	10c00526 	beq	r2,r3,991c <_close_r+0x44>
    9908:	dfc00217 	ldw	ra,8(sp)
    990c:	dc400117 	ldw	r17,4(sp)
    9910:	dc000017 	ldw	r16,0(sp)
    9914:	dec00304 	addi	sp,sp,12
    9918:	f800283a 	ret
    991c:	80c00017 	ldw	r3,0(r16)
    9920:	183ff926 	beq	r3,zero,9908 <__alt_data_end+0xfffc0528>
    9924:	88c00015 	stw	r3,0(r17)
    9928:	003ff706 	br	9908 <__alt_data_end+0xfffc0528>

0000992c <_calloc_r>:
    992c:	defffe04 	addi	sp,sp,-8
    9930:	2805883a 	mov	r2,r5
    9934:	dc000015 	stw	r16,0(sp)
    9938:	300b883a 	mov	r5,r6
    993c:	2021883a 	mov	r16,r4
    9940:	1009883a 	mov	r4,r2
    9944:	dfc00115 	stw	ra,4(sp)
    9948:	000ade00 	call	ade0 <__mulsi3>
    994c:	100b883a 	mov	r5,r2
    9950:	8009883a 	mov	r4,r16
    9954:	00059080 	call	5908 <_malloc_r>
    9958:	10002926 	beq	r2,zero,9a00 <_calloc_r+0xd4>
    995c:	11bfff17 	ldw	r6,-4(r2)
    9960:	1021883a 	mov	r16,r2
    9964:	00bfff04 	movi	r2,-4
    9968:	308c703a 	and	r6,r6,r2
    996c:	00c00904 	movi	r3,36
    9970:	308d883a 	add	r6,r6,r2
    9974:	19801636 	bltu	r3,r6,99d0 <_calloc_r+0xa4>
    9978:	008004c4 	movi	r2,19
    997c:	11800b2e 	bgeu	r2,r6,99ac <_calloc_r+0x80>
    9980:	80000015 	stw	zero,0(r16)
    9984:	80000115 	stw	zero,4(r16)
    9988:	008006c4 	movi	r2,27
    998c:	11801a2e 	bgeu	r2,r6,99f8 <_calloc_r+0xcc>
    9990:	80000215 	stw	zero,8(r16)
    9994:	80000315 	stw	zero,12(r16)
    9998:	30c0151e 	bne	r6,r3,99f0 <_calloc_r+0xc4>
    999c:	80000415 	stw	zero,16(r16)
    99a0:	80800604 	addi	r2,r16,24
    99a4:	80000515 	stw	zero,20(r16)
    99a8:	00000106 	br	99b0 <_calloc_r+0x84>
    99ac:	8005883a 	mov	r2,r16
    99b0:	10000015 	stw	zero,0(r2)
    99b4:	10000115 	stw	zero,4(r2)
    99b8:	10000215 	stw	zero,8(r2)
    99bc:	8005883a 	mov	r2,r16
    99c0:	dfc00117 	ldw	ra,4(sp)
    99c4:	dc000017 	ldw	r16,0(sp)
    99c8:	dec00204 	addi	sp,sp,8
    99cc:	f800283a 	ret
    99d0:	000b883a 	mov	r5,zero
    99d4:	8009883a 	mov	r4,r16
    99d8:	000649c0 	call	649c <memset>
    99dc:	8005883a 	mov	r2,r16
    99e0:	dfc00117 	ldw	ra,4(sp)
    99e4:	dc000017 	ldw	r16,0(sp)
    99e8:	dec00204 	addi	sp,sp,8
    99ec:	f800283a 	ret
    99f0:	80800404 	addi	r2,r16,16
    99f4:	003fee06 	br	99b0 <__alt_data_end+0xfffc05d0>
    99f8:	80800204 	addi	r2,r16,8
    99fc:	003fec06 	br	99b0 <__alt_data_end+0xfffc05d0>
    9a00:	0005883a 	mov	r2,zero
    9a04:	003fee06 	br	99c0 <__alt_data_end+0xfffc05e0>

00009a08 <_fclose_r>:
    9a08:	28003926 	beq	r5,zero,9af0 <_fclose_r+0xe8>
    9a0c:	defffc04 	addi	sp,sp,-16
    9a10:	dc400115 	stw	r17,4(sp)
    9a14:	dc000015 	stw	r16,0(sp)
    9a18:	dfc00315 	stw	ra,12(sp)
    9a1c:	dc800215 	stw	r18,8(sp)
    9a20:	2023883a 	mov	r17,r4
    9a24:	2821883a 	mov	r16,r5
    9a28:	20000226 	beq	r4,zero,9a34 <_fclose_r+0x2c>
    9a2c:	20800e17 	ldw	r2,56(r4)
    9a30:	10002726 	beq	r2,zero,9ad0 <_fclose_r+0xc8>
    9a34:	8080030f 	ldh	r2,12(r16)
    9a38:	1000071e 	bne	r2,zero,9a58 <_fclose_r+0x50>
    9a3c:	0005883a 	mov	r2,zero
    9a40:	dfc00317 	ldw	ra,12(sp)
    9a44:	dc800217 	ldw	r18,8(sp)
    9a48:	dc400117 	ldw	r17,4(sp)
    9a4c:	dc000017 	ldw	r16,0(sp)
    9a50:	dec00404 	addi	sp,sp,16
    9a54:	f800283a 	ret
    9a58:	800b883a 	mov	r5,r16
    9a5c:	8809883a 	mov	r4,r17
    9a60:	00045940 	call	4594 <__sflush_r>
    9a64:	1025883a 	mov	r18,r2
    9a68:	80800b17 	ldw	r2,44(r16)
    9a6c:	10000426 	beq	r2,zero,9a80 <_fclose_r+0x78>
    9a70:	81400717 	ldw	r5,28(r16)
    9a74:	8809883a 	mov	r4,r17
    9a78:	103ee83a 	callr	r2
    9a7c:	10001616 	blt	r2,zero,9ad8 <_fclose_r+0xd0>
    9a80:	8080030b 	ldhu	r2,12(r16)
    9a84:	1080200c 	andi	r2,r2,128
    9a88:	1000151e 	bne	r2,zero,9ae0 <_fclose_r+0xd8>
    9a8c:	81400c17 	ldw	r5,48(r16)
    9a90:	28000526 	beq	r5,zero,9aa8 <_fclose_r+0xa0>
    9a94:	80801004 	addi	r2,r16,64
    9a98:	28800226 	beq	r5,r2,9aa4 <_fclose_r+0x9c>
    9a9c:	8809883a 	mov	r4,r17
    9aa0:	0004d100 	call	4d10 <_free_r>
    9aa4:	80000c15 	stw	zero,48(r16)
    9aa8:	81401117 	ldw	r5,68(r16)
    9aac:	28000326 	beq	r5,zero,9abc <_fclose_r+0xb4>
    9ab0:	8809883a 	mov	r4,r17
    9ab4:	0004d100 	call	4d10 <_free_r>
    9ab8:	80001115 	stw	zero,68(r16)
    9abc:	0004bac0 	call	4bac <__sfp_lock_acquire>
    9ac0:	8000030d 	sth	zero,12(r16)
    9ac4:	0004bb00 	call	4bb0 <__sfp_lock_release>
    9ac8:	9005883a 	mov	r2,r18
    9acc:	003fdc06 	br	9a40 <__alt_data_end+0xfffc0660>
    9ad0:	0004b9c0 	call	4b9c <__sinit>
    9ad4:	003fd706 	br	9a34 <__alt_data_end+0xfffc0654>
    9ad8:	04bfffc4 	movi	r18,-1
    9adc:	003fe806 	br	9a80 <__alt_data_end+0xfffc06a0>
    9ae0:	81400417 	ldw	r5,16(r16)
    9ae4:	8809883a 	mov	r4,r17
    9ae8:	0004d100 	call	4d10 <_free_r>
    9aec:	003fe706 	br	9a8c <__alt_data_end+0xfffc06ac>
    9af0:	0005883a 	mov	r2,zero
    9af4:	f800283a 	ret

00009af8 <fclose>:
    9af8:	00800074 	movhi	r2,1
    9afc:	1088f904 	addi	r2,r2,9188
    9b00:	200b883a 	mov	r5,r4
    9b04:	11000017 	ldw	r4,0(r2)
    9b08:	0009a081 	jmpi	9a08 <_fclose_r>

00009b0c <__fputwc>:
    9b0c:	defff804 	addi	sp,sp,-32
    9b10:	dcc00415 	stw	r19,16(sp)
    9b14:	dc800315 	stw	r18,12(sp)
    9b18:	dc000115 	stw	r16,4(sp)
    9b1c:	dfc00715 	stw	ra,28(sp)
    9b20:	dd400615 	stw	r21,24(sp)
    9b24:	dd000515 	stw	r20,20(sp)
    9b28:	dc400215 	stw	r17,8(sp)
    9b2c:	2027883a 	mov	r19,r4
    9b30:	2825883a 	mov	r18,r5
    9b34:	3021883a 	mov	r16,r6
    9b38:	00056f80 	call	56f8 <__locale_mb_cur_max>
    9b3c:	00c00044 	movi	r3,1
    9b40:	10c03e26 	beq	r2,r3,9c3c <__fputwc+0x130>
    9b44:	81c01704 	addi	r7,r16,92
    9b48:	900d883a 	mov	r6,r18
    9b4c:	d80b883a 	mov	r5,sp
    9b50:	9809883a 	mov	r4,r19
    9b54:	0009e840 	call	9e84 <_wcrtomb_r>
    9b58:	1029883a 	mov	r20,r2
    9b5c:	00bfffc4 	movi	r2,-1
    9b60:	a0802026 	beq	r20,r2,9be4 <__fputwc+0xd8>
    9b64:	d9400003 	ldbu	r5,0(sp)
    9b68:	a0001c26 	beq	r20,zero,9bdc <__fputwc+0xd0>
    9b6c:	0023883a 	mov	r17,zero
    9b70:	05400284 	movi	r21,10
    9b74:	00000906 	br	9b9c <__fputwc+0x90>
    9b78:	80800017 	ldw	r2,0(r16)
    9b7c:	11400005 	stb	r5,0(r2)
    9b80:	80c00017 	ldw	r3,0(r16)
    9b84:	18c00044 	addi	r3,r3,1
    9b88:	80c00015 	stw	r3,0(r16)
    9b8c:	8c400044 	addi	r17,r17,1
    9b90:	dc45883a 	add	r2,sp,r17
    9b94:	8d00112e 	bgeu	r17,r20,9bdc <__fputwc+0xd0>
    9b98:	11400003 	ldbu	r5,0(r2)
    9b9c:	80c00217 	ldw	r3,8(r16)
    9ba0:	18ffffc4 	addi	r3,r3,-1
    9ba4:	80c00215 	stw	r3,8(r16)
    9ba8:	183ff30e 	bge	r3,zero,9b78 <__alt_data_end+0xfffc0798>
    9bac:	80800617 	ldw	r2,24(r16)
    9bb0:	18801916 	blt	r3,r2,9c18 <__fputwc+0x10c>
    9bb4:	80800017 	ldw	r2,0(r16)
    9bb8:	11400005 	stb	r5,0(r2)
    9bbc:	80800017 	ldw	r2,0(r16)
    9bc0:	10c00003 	ldbu	r3,0(r2)
    9bc4:	10800044 	addi	r2,r2,1
    9bc8:	1d402326 	beq	r3,r21,9c58 <__fputwc+0x14c>
    9bcc:	80800015 	stw	r2,0(r16)
    9bd0:	8c400044 	addi	r17,r17,1
    9bd4:	dc45883a 	add	r2,sp,r17
    9bd8:	8d3fef36 	bltu	r17,r20,9b98 <__alt_data_end+0xfffc07b8>
    9bdc:	9005883a 	mov	r2,r18
    9be0:	00000406 	br	9bf4 <__fputwc+0xe8>
    9be4:	80c0030b 	ldhu	r3,12(r16)
    9be8:	a005883a 	mov	r2,r20
    9bec:	18c01014 	ori	r3,r3,64
    9bf0:	80c0030d 	sth	r3,12(r16)
    9bf4:	dfc00717 	ldw	ra,28(sp)
    9bf8:	dd400617 	ldw	r21,24(sp)
    9bfc:	dd000517 	ldw	r20,20(sp)
    9c00:	dcc00417 	ldw	r19,16(sp)
    9c04:	dc800317 	ldw	r18,12(sp)
    9c08:	dc400217 	ldw	r17,8(sp)
    9c0c:	dc000117 	ldw	r16,4(sp)
    9c10:	dec00804 	addi	sp,sp,32
    9c14:	f800283a 	ret
    9c18:	800d883a 	mov	r6,r16
    9c1c:	29403fcc 	andi	r5,r5,255
    9c20:	9809883a 	mov	r4,r19
    9c24:	00097200 	call	9720 <__swbuf_r>
    9c28:	10bfffe0 	cmpeqi	r2,r2,-1
    9c2c:	10803fcc 	andi	r2,r2,255
    9c30:	103fd626 	beq	r2,zero,9b8c <__alt_data_end+0xfffc07ac>
    9c34:	00bfffc4 	movi	r2,-1
    9c38:	003fee06 	br	9bf4 <__alt_data_end+0xfffc0814>
    9c3c:	90ffffc4 	addi	r3,r18,-1
    9c40:	01003f84 	movi	r4,254
    9c44:	20ffbf36 	bltu	r4,r3,9b44 <__alt_data_end+0xfffc0764>
    9c48:	900b883a 	mov	r5,r18
    9c4c:	dc800005 	stb	r18,0(sp)
    9c50:	1029883a 	mov	r20,r2
    9c54:	003fc506 	br	9b6c <__alt_data_end+0xfffc078c>
    9c58:	800d883a 	mov	r6,r16
    9c5c:	a80b883a 	mov	r5,r21
    9c60:	9809883a 	mov	r4,r19
    9c64:	00097200 	call	9720 <__swbuf_r>
    9c68:	10bfffe0 	cmpeqi	r2,r2,-1
    9c6c:	003fef06 	br	9c2c <__alt_data_end+0xfffc084c>

00009c70 <_fputwc_r>:
    9c70:	3080030b 	ldhu	r2,12(r6)
    9c74:	10c8000c 	andi	r3,r2,8192
    9c78:	1800051e 	bne	r3,zero,9c90 <_fputwc_r+0x20>
    9c7c:	30c01917 	ldw	r3,100(r6)
    9c80:	10880014 	ori	r2,r2,8192
    9c84:	3080030d 	sth	r2,12(r6)
    9c88:	18880014 	ori	r2,r3,8192
    9c8c:	30801915 	stw	r2,100(r6)
    9c90:	0009b0c1 	jmpi	9b0c <__fputwc>

00009c94 <fputwc>:
    9c94:	00800074 	movhi	r2,1
    9c98:	defffc04 	addi	sp,sp,-16
    9c9c:	1088f904 	addi	r2,r2,9188
    9ca0:	dc000115 	stw	r16,4(sp)
    9ca4:	14000017 	ldw	r16,0(r2)
    9ca8:	dc400215 	stw	r17,8(sp)
    9cac:	dfc00315 	stw	ra,12(sp)
    9cb0:	2023883a 	mov	r17,r4
    9cb4:	80000226 	beq	r16,zero,9cc0 <fputwc+0x2c>
    9cb8:	80800e17 	ldw	r2,56(r16)
    9cbc:	10001026 	beq	r2,zero,9d00 <fputwc+0x6c>
    9cc0:	2880030b 	ldhu	r2,12(r5)
    9cc4:	10c8000c 	andi	r3,r2,8192
    9cc8:	1800051e 	bne	r3,zero,9ce0 <fputwc+0x4c>
    9ccc:	28c01917 	ldw	r3,100(r5)
    9cd0:	10880014 	ori	r2,r2,8192
    9cd4:	2880030d 	sth	r2,12(r5)
    9cd8:	18880014 	ori	r2,r3,8192
    9cdc:	28801915 	stw	r2,100(r5)
    9ce0:	280d883a 	mov	r6,r5
    9ce4:	8009883a 	mov	r4,r16
    9ce8:	880b883a 	mov	r5,r17
    9cec:	dfc00317 	ldw	ra,12(sp)
    9cf0:	dc400217 	ldw	r17,8(sp)
    9cf4:	dc000117 	ldw	r16,4(sp)
    9cf8:	dec00404 	addi	sp,sp,16
    9cfc:	0009b0c1 	jmpi	9b0c <__fputwc>
    9d00:	8009883a 	mov	r4,r16
    9d04:	d9400015 	stw	r5,0(sp)
    9d08:	0004b9c0 	call	4b9c <__sinit>
    9d0c:	d9400017 	ldw	r5,0(sp)
    9d10:	003feb06 	br	9cc0 <__alt_data_end+0xfffc08e0>

00009d14 <_fstat_r>:
    9d14:	defffd04 	addi	sp,sp,-12
    9d18:	2805883a 	mov	r2,r5
    9d1c:	dc000015 	stw	r16,0(sp)
    9d20:	04000074 	movhi	r16,1
    9d24:	dc400115 	stw	r17,4(sp)
    9d28:	840fc904 	addi	r16,r16,16164
    9d2c:	2023883a 	mov	r17,r4
    9d30:	300b883a 	mov	r5,r6
    9d34:	1009883a 	mov	r4,r2
    9d38:	dfc00215 	stw	ra,8(sp)
    9d3c:	80000015 	stw	zero,0(r16)
    9d40:	000d8500 	call	d850 <fstat>
    9d44:	00ffffc4 	movi	r3,-1
    9d48:	10c00526 	beq	r2,r3,9d60 <_fstat_r+0x4c>
    9d4c:	dfc00217 	ldw	ra,8(sp)
    9d50:	dc400117 	ldw	r17,4(sp)
    9d54:	dc000017 	ldw	r16,0(sp)
    9d58:	dec00304 	addi	sp,sp,12
    9d5c:	f800283a 	ret
    9d60:	80c00017 	ldw	r3,0(r16)
    9d64:	183ff926 	beq	r3,zero,9d4c <__alt_data_end+0xfffc096c>
    9d68:	88c00015 	stw	r3,0(r17)
    9d6c:	003ff706 	br	9d4c <__alt_data_end+0xfffc096c>

00009d70 <_isatty_r>:
    9d70:	defffd04 	addi	sp,sp,-12
    9d74:	dc000015 	stw	r16,0(sp)
    9d78:	04000074 	movhi	r16,1
    9d7c:	dc400115 	stw	r17,4(sp)
    9d80:	840fc904 	addi	r16,r16,16164
    9d84:	2023883a 	mov	r17,r4
    9d88:	2809883a 	mov	r4,r5
    9d8c:	dfc00215 	stw	ra,8(sp)
    9d90:	80000015 	stw	zero,0(r16)
    9d94:	000d9580 	call	d958 <isatty>
    9d98:	00ffffc4 	movi	r3,-1
    9d9c:	10c00526 	beq	r2,r3,9db4 <_isatty_r+0x44>
    9da0:	dfc00217 	ldw	ra,8(sp)
    9da4:	dc400117 	ldw	r17,4(sp)
    9da8:	dc000017 	ldw	r16,0(sp)
    9dac:	dec00304 	addi	sp,sp,12
    9db0:	f800283a 	ret
    9db4:	80c00017 	ldw	r3,0(r16)
    9db8:	183ff926 	beq	r3,zero,9da0 <__alt_data_end+0xfffc09c0>
    9dbc:	88c00015 	stw	r3,0(r17)
    9dc0:	003ff706 	br	9da0 <__alt_data_end+0xfffc09c0>

00009dc4 <_lseek_r>:
    9dc4:	defffd04 	addi	sp,sp,-12
    9dc8:	2805883a 	mov	r2,r5
    9dcc:	dc000015 	stw	r16,0(sp)
    9dd0:	04000074 	movhi	r16,1
    9dd4:	dc400115 	stw	r17,4(sp)
    9dd8:	300b883a 	mov	r5,r6
    9ddc:	840fc904 	addi	r16,r16,16164
    9de0:	2023883a 	mov	r17,r4
    9de4:	380d883a 	mov	r6,r7
    9de8:	1009883a 	mov	r4,r2
    9dec:	dfc00215 	stw	ra,8(sp)
    9df0:	80000015 	stw	zero,0(r16)
    9df4:	000db400 	call	db40 <lseek>
    9df8:	00ffffc4 	movi	r3,-1
    9dfc:	10c00526 	beq	r2,r3,9e14 <_lseek_r+0x50>
    9e00:	dfc00217 	ldw	ra,8(sp)
    9e04:	dc400117 	ldw	r17,4(sp)
    9e08:	dc000017 	ldw	r16,0(sp)
    9e0c:	dec00304 	addi	sp,sp,12
    9e10:	f800283a 	ret
    9e14:	80c00017 	ldw	r3,0(r16)
    9e18:	183ff926 	beq	r3,zero,9e00 <__alt_data_end+0xfffc0a20>
    9e1c:	88c00015 	stw	r3,0(r17)
    9e20:	003ff706 	br	9e00 <__alt_data_end+0xfffc0a20>

00009e24 <_read_r>:
    9e24:	defffd04 	addi	sp,sp,-12
    9e28:	2805883a 	mov	r2,r5
    9e2c:	dc000015 	stw	r16,0(sp)
    9e30:	04000074 	movhi	r16,1
    9e34:	dc400115 	stw	r17,4(sp)
    9e38:	300b883a 	mov	r5,r6
    9e3c:	840fc904 	addi	r16,r16,16164
    9e40:	2023883a 	mov	r17,r4
    9e44:	380d883a 	mov	r6,r7
    9e48:	1009883a 	mov	r4,r2
    9e4c:	dfc00215 	stw	ra,8(sp)
    9e50:	80000015 	stw	zero,0(r16)
    9e54:	000dd300 	call	dd30 <read>
    9e58:	00ffffc4 	movi	r3,-1
    9e5c:	10c00526 	beq	r2,r3,9e74 <_read_r+0x50>
    9e60:	dfc00217 	ldw	ra,8(sp)
    9e64:	dc400117 	ldw	r17,4(sp)
    9e68:	dc000017 	ldw	r16,0(sp)
    9e6c:	dec00304 	addi	sp,sp,12
    9e70:	f800283a 	ret
    9e74:	80c00017 	ldw	r3,0(r16)
    9e78:	183ff926 	beq	r3,zero,9e60 <__alt_data_end+0xfffc0a80>
    9e7c:	88c00015 	stw	r3,0(r17)
    9e80:	003ff706 	br	9e60 <__alt_data_end+0xfffc0a80>

00009e84 <_wcrtomb_r>:
    9e84:	defff604 	addi	sp,sp,-40
    9e88:	00800074 	movhi	r2,1
    9e8c:	dc800815 	stw	r18,32(sp)
    9e90:	dc400715 	stw	r17,28(sp)
    9e94:	dc000615 	stw	r16,24(sp)
    9e98:	1088fd04 	addi	r2,r2,9204
    9e9c:	dfc00915 	stw	ra,36(sp)
    9ea0:	2021883a 	mov	r16,r4
    9ea4:	3823883a 	mov	r17,r7
    9ea8:	14800017 	ldw	r18,0(r2)
    9eac:	28001426 	beq	r5,zero,9f00 <_wcrtomb_r+0x7c>
    9eb0:	d9400415 	stw	r5,16(sp)
    9eb4:	d9800515 	stw	r6,20(sp)
    9eb8:	00056ec0 	call	56ec <__locale_charset>
    9ebc:	d9800517 	ldw	r6,20(sp)
    9ec0:	d9400417 	ldw	r5,16(sp)
    9ec4:	100f883a 	mov	r7,r2
    9ec8:	dc400015 	stw	r17,0(sp)
    9ecc:	8009883a 	mov	r4,r16
    9ed0:	903ee83a 	callr	r18
    9ed4:	00ffffc4 	movi	r3,-1
    9ed8:	10c0031e 	bne	r2,r3,9ee8 <_wcrtomb_r+0x64>
    9edc:	88000015 	stw	zero,0(r17)
    9ee0:	00c02284 	movi	r3,138
    9ee4:	80c00015 	stw	r3,0(r16)
    9ee8:	dfc00917 	ldw	ra,36(sp)
    9eec:	dc800817 	ldw	r18,32(sp)
    9ef0:	dc400717 	ldw	r17,28(sp)
    9ef4:	dc000617 	ldw	r16,24(sp)
    9ef8:	dec00a04 	addi	sp,sp,40
    9efc:	f800283a 	ret
    9f00:	00056ec0 	call	56ec <__locale_charset>
    9f04:	100f883a 	mov	r7,r2
    9f08:	dc400015 	stw	r17,0(sp)
    9f0c:	000d883a 	mov	r6,zero
    9f10:	d9400104 	addi	r5,sp,4
    9f14:	8009883a 	mov	r4,r16
    9f18:	903ee83a 	callr	r18
    9f1c:	003fed06 	br	9ed4 <__alt_data_end+0xfffc0af4>

00009f20 <wcrtomb>:
    9f20:	defff604 	addi	sp,sp,-40
    9f24:	00800074 	movhi	r2,1
    9f28:	dc800615 	stw	r18,24(sp)
    9f2c:	dc400515 	stw	r17,20(sp)
    9f30:	1088f904 	addi	r2,r2,9188
    9f34:	dfc00915 	stw	ra,36(sp)
    9f38:	dd000815 	stw	r20,32(sp)
    9f3c:	dcc00715 	stw	r19,28(sp)
    9f40:	dc000415 	stw	r16,16(sp)
    9f44:	3025883a 	mov	r18,r6
    9f48:	14400017 	ldw	r17,0(r2)
    9f4c:	20001926 	beq	r4,zero,9fb4 <wcrtomb+0x94>
    9f50:	00800074 	movhi	r2,1
    9f54:	1088fd04 	addi	r2,r2,9204
    9f58:	15000017 	ldw	r20,0(r2)
    9f5c:	2021883a 	mov	r16,r4
    9f60:	2827883a 	mov	r19,r5
    9f64:	00056ec0 	call	56ec <__locale_charset>
    9f68:	100f883a 	mov	r7,r2
    9f6c:	dc800015 	stw	r18,0(sp)
    9f70:	980d883a 	mov	r6,r19
    9f74:	800b883a 	mov	r5,r16
    9f78:	8809883a 	mov	r4,r17
    9f7c:	a03ee83a 	callr	r20
    9f80:	00ffffc4 	movi	r3,-1
    9f84:	10c0031e 	bne	r2,r3,9f94 <wcrtomb+0x74>
    9f88:	90000015 	stw	zero,0(r18)
    9f8c:	00c02284 	movi	r3,138
    9f90:	88c00015 	stw	r3,0(r17)
    9f94:	dfc00917 	ldw	ra,36(sp)
    9f98:	dd000817 	ldw	r20,32(sp)
    9f9c:	dcc00717 	ldw	r19,28(sp)
    9fa0:	dc800617 	ldw	r18,24(sp)
    9fa4:	dc400517 	ldw	r17,20(sp)
    9fa8:	dc000417 	ldw	r16,16(sp)
    9fac:	dec00a04 	addi	sp,sp,40
    9fb0:	f800283a 	ret
    9fb4:	00800074 	movhi	r2,1
    9fb8:	1088fd04 	addi	r2,r2,9204
    9fbc:	14000017 	ldw	r16,0(r2)
    9fc0:	00056ec0 	call	56ec <__locale_charset>
    9fc4:	100f883a 	mov	r7,r2
    9fc8:	dc800015 	stw	r18,0(sp)
    9fcc:	000d883a 	mov	r6,zero
    9fd0:	d9400104 	addi	r5,sp,4
    9fd4:	8809883a 	mov	r4,r17
    9fd8:	803ee83a 	callr	r16
    9fdc:	003fe806 	br	9f80 <__alt_data_end+0xfffc0ba0>

00009fe0 <__ascii_wctomb>:
    9fe0:	28000526 	beq	r5,zero,9ff8 <__ascii_wctomb+0x18>
    9fe4:	00803fc4 	movi	r2,255
    9fe8:	11800536 	bltu	r2,r6,a000 <__ascii_wctomb+0x20>
    9fec:	29800005 	stb	r6,0(r5)
    9ff0:	00800044 	movi	r2,1
    9ff4:	f800283a 	ret
    9ff8:	0005883a 	mov	r2,zero
    9ffc:	f800283a 	ret
    a000:	00802284 	movi	r2,138
    a004:	20800015 	stw	r2,0(r4)
    a008:	00bfffc4 	movi	r2,-1
    a00c:	f800283a 	ret

0000a010 <_wctomb_r>:
    a010:	00800074 	movhi	r2,1
    a014:	defff904 	addi	sp,sp,-28
    a018:	1088fd04 	addi	r2,r2,9204
    a01c:	dfc00615 	stw	ra,24(sp)
    a020:	dc400515 	stw	r17,20(sp)
    a024:	dc000415 	stw	r16,16(sp)
    a028:	3823883a 	mov	r17,r7
    a02c:	14000017 	ldw	r16,0(r2)
    a030:	d9000115 	stw	r4,4(sp)
    a034:	d9400215 	stw	r5,8(sp)
    a038:	d9800315 	stw	r6,12(sp)
    a03c:	00056ec0 	call	56ec <__locale_charset>
    a040:	d9800317 	ldw	r6,12(sp)
    a044:	d9400217 	ldw	r5,8(sp)
    a048:	d9000117 	ldw	r4,4(sp)
    a04c:	100f883a 	mov	r7,r2
    a050:	dc400015 	stw	r17,0(sp)
    a054:	803ee83a 	callr	r16
    a058:	dfc00617 	ldw	ra,24(sp)
    a05c:	dc400517 	ldw	r17,20(sp)
    a060:	dc000417 	ldw	r16,16(sp)
    a064:	dec00704 	addi	sp,sp,28
    a068:	f800283a 	ret

0000a06c <__udivdi3>:
    a06c:	defff404 	addi	sp,sp,-48
    a070:	dcc00515 	stw	r19,20(sp)
    a074:	dc000215 	stw	r16,8(sp)
    a078:	dfc00b15 	stw	ra,44(sp)
    a07c:	df000a15 	stw	fp,40(sp)
    a080:	ddc00915 	stw	r23,36(sp)
    a084:	dd800815 	stw	r22,32(sp)
    a088:	dd400715 	stw	r21,28(sp)
    a08c:	dd000615 	stw	r20,24(sp)
    a090:	dc800415 	stw	r18,16(sp)
    a094:	dc400315 	stw	r17,12(sp)
    a098:	2027883a 	mov	r19,r4
    a09c:	2821883a 	mov	r16,r5
    a0a0:	3800461e 	bne	r7,zero,a1bc <__udivdi3+0x150>
    a0a4:	3023883a 	mov	r17,r6
    a0a8:	2025883a 	mov	r18,r4
    a0ac:	2980572e 	bgeu	r5,r6,a20c <__udivdi3+0x1a0>
    a0b0:	00bfffd4 	movui	r2,65535
    a0b4:	282d883a 	mov	r22,r5
    a0b8:	1180b236 	bltu	r2,r6,a384 <__udivdi3+0x318>
    a0bc:	00803fc4 	movi	r2,255
    a0c0:	1185803a 	cmpltu	r2,r2,r6
    a0c4:	100490fa 	slli	r2,r2,3
    a0c8:	3086d83a 	srl	r3,r6,r2
    a0cc:	01000074 	movhi	r4,1
    a0d0:	21020004 	addi	r4,r4,2048
    a0d4:	20c7883a 	add	r3,r4,r3
    a0d8:	18c00003 	ldbu	r3,0(r3)
    a0dc:	1885883a 	add	r2,r3,r2
    a0e0:	00c00804 	movi	r3,32
    a0e4:	1887c83a 	sub	r3,r3,r2
    a0e8:	18000526 	beq	r3,zero,a100 <__udivdi3+0x94>
    a0ec:	80e0983a 	sll	r16,r16,r3
    a0f0:	9884d83a 	srl	r2,r19,r2
    a0f4:	30e2983a 	sll	r17,r6,r3
    a0f8:	98e4983a 	sll	r18,r19,r3
    a0fc:	142cb03a 	or	r22,r2,r16
    a100:	882ad43a 	srli	r21,r17,16
    a104:	b009883a 	mov	r4,r22
    a108:	8d3fffcc 	andi	r20,r17,65535
    a10c:	a80b883a 	mov	r5,r21
    a110:	000ad880 	call	ad88 <__umodsi3>
    a114:	b009883a 	mov	r4,r22
    a118:	a80b883a 	mov	r5,r21
    a11c:	1027883a 	mov	r19,r2
    a120:	000ad240 	call	ad24 <__udivsi3>
    a124:	100b883a 	mov	r5,r2
    a128:	a009883a 	mov	r4,r20
    a12c:	102d883a 	mov	r22,r2
    a130:	000ade00 	call	ade0 <__mulsi3>
    a134:	9826943a 	slli	r19,r19,16
    a138:	9006d43a 	srli	r3,r18,16
    a13c:	1cc6b03a 	or	r3,r3,r19
    a140:	1880052e 	bgeu	r3,r2,a158 <__udivdi3+0xec>
    a144:	1c47883a 	add	r3,r3,r17
    a148:	b13fffc4 	addi	r4,r22,-1
    a14c:	1c400136 	bltu	r3,r17,a154 <__udivdi3+0xe8>
    a150:	18814236 	bltu	r3,r2,a65c <__udivdi3+0x5f0>
    a154:	202d883a 	mov	r22,r4
    a158:	18a1c83a 	sub	r16,r3,r2
    a15c:	8009883a 	mov	r4,r16
    a160:	a80b883a 	mov	r5,r21
    a164:	000ad880 	call	ad88 <__umodsi3>
    a168:	1027883a 	mov	r19,r2
    a16c:	8009883a 	mov	r4,r16
    a170:	a80b883a 	mov	r5,r21
    a174:	9826943a 	slli	r19,r19,16
    a178:	000ad240 	call	ad24 <__udivsi3>
    a17c:	100b883a 	mov	r5,r2
    a180:	a009883a 	mov	r4,r20
    a184:	94bfffcc 	andi	r18,r18,65535
    a188:	1021883a 	mov	r16,r2
    a18c:	94e4b03a 	or	r18,r18,r19
    a190:	000ade00 	call	ade0 <__mulsi3>
    a194:	9080052e 	bgeu	r18,r2,a1ac <__udivdi3+0x140>
    a198:	8ca5883a 	add	r18,r17,r18
    a19c:	80ffffc4 	addi	r3,r16,-1
    a1a0:	94410c36 	bltu	r18,r17,a5d4 <__udivdi3+0x568>
    a1a4:	90810b2e 	bgeu	r18,r2,a5d4 <__udivdi3+0x568>
    a1a8:	843fff84 	addi	r16,r16,-2
    a1ac:	b004943a 	slli	r2,r22,16
    a1b0:	0007883a 	mov	r3,zero
    a1b4:	1404b03a 	or	r2,r2,r16
    a1b8:	00005e06 	br	a334 <__udivdi3+0x2c8>
    a1bc:	29c05b36 	bltu	r5,r7,a32c <__udivdi3+0x2c0>
    a1c0:	00bfffd4 	movui	r2,65535
    a1c4:	11c0672e 	bgeu	r2,r7,a364 <__udivdi3+0x2f8>
    a1c8:	00804034 	movhi	r2,256
    a1cc:	10bfffc4 	addi	r2,r2,-1
    a1d0:	11c10a36 	bltu	r2,r7,a5fc <__udivdi3+0x590>
    a1d4:	00800404 	movi	r2,16
    a1d8:	3886d83a 	srl	r3,r7,r2
    a1dc:	01000074 	movhi	r4,1
    a1e0:	21020004 	addi	r4,r4,2048
    a1e4:	20c7883a 	add	r3,r4,r3
    a1e8:	18c00003 	ldbu	r3,0(r3)
    a1ec:	05c00804 	movi	r23,32
    a1f0:	1885883a 	add	r2,r3,r2
    a1f4:	b8afc83a 	sub	r23,r23,r2
    a1f8:	b800671e 	bne	r23,zero,a398 <__udivdi3+0x32c>
    a1fc:	3c010536 	bltu	r7,r16,a614 <__udivdi3+0x5a8>
    a200:	9985403a 	cmpgeu	r2,r19,r6
    a204:	0007883a 	mov	r3,zero
    a208:	00004a06 	br	a334 <__udivdi3+0x2c8>
    a20c:	3000041e 	bne	r6,zero,a220 <__udivdi3+0x1b4>
    a210:	000b883a 	mov	r5,zero
    a214:	01000044 	movi	r4,1
    a218:	000ad240 	call	ad24 <__udivsi3>
    a21c:	1023883a 	mov	r17,r2
    a220:	00bfffd4 	movui	r2,65535
    a224:	1440532e 	bgeu	r2,r17,a374 <__udivdi3+0x308>
    a228:	00804034 	movhi	r2,256
    a22c:	10bfffc4 	addi	r2,r2,-1
    a230:	1440f436 	bltu	r2,r17,a604 <__udivdi3+0x598>
    a234:	00800404 	movi	r2,16
    a238:	8886d83a 	srl	r3,r17,r2
    a23c:	01000074 	movhi	r4,1
    a240:	21020004 	addi	r4,r4,2048
    a244:	20c7883a 	add	r3,r4,r3
    a248:	18c00003 	ldbu	r3,0(r3)
    a24c:	1885883a 	add	r2,r3,r2
    a250:	00c00804 	movi	r3,32
    a254:	1887c83a 	sub	r3,r3,r2
    a258:	1800a51e 	bne	r3,zero,a4f0 <__udivdi3+0x484>
    a25c:	882ad43a 	srli	r21,r17,16
    a260:	8461c83a 	sub	r16,r16,r17
    a264:	8d3fffcc 	andi	r20,r17,65535
    a268:	00c00044 	movi	r3,1
    a26c:	a80b883a 	mov	r5,r21
    a270:	8009883a 	mov	r4,r16
    a274:	d8c00115 	stw	r3,4(sp)
    a278:	000ad880 	call	ad88 <__umodsi3>
    a27c:	a80b883a 	mov	r5,r21
    a280:	8009883a 	mov	r4,r16
    a284:	1027883a 	mov	r19,r2
    a288:	000ad240 	call	ad24 <__udivsi3>
    a28c:	a00b883a 	mov	r5,r20
    a290:	1009883a 	mov	r4,r2
    a294:	102d883a 	mov	r22,r2
    a298:	000ade00 	call	ade0 <__mulsi3>
    a29c:	9826943a 	slli	r19,r19,16
    a2a0:	900ed43a 	srli	r7,r18,16
    a2a4:	d8c00117 	ldw	r3,4(sp)
    a2a8:	3cceb03a 	or	r7,r7,r19
    a2ac:	3880052e 	bgeu	r7,r2,a2c4 <__udivdi3+0x258>
    a2b0:	3c4f883a 	add	r7,r7,r17
    a2b4:	b13fffc4 	addi	r4,r22,-1
    a2b8:	3c400136 	bltu	r7,r17,a2c0 <__udivdi3+0x254>
    a2bc:	3880e436 	bltu	r7,r2,a650 <__udivdi3+0x5e4>
    a2c0:	202d883a 	mov	r22,r4
    a2c4:	38a1c83a 	sub	r16,r7,r2
    a2c8:	8009883a 	mov	r4,r16
    a2cc:	a80b883a 	mov	r5,r21
    a2d0:	d8c00115 	stw	r3,4(sp)
    a2d4:	000ad880 	call	ad88 <__umodsi3>
    a2d8:	1027883a 	mov	r19,r2
    a2dc:	8009883a 	mov	r4,r16
    a2e0:	a80b883a 	mov	r5,r21
    a2e4:	9826943a 	slli	r19,r19,16
    a2e8:	000ad240 	call	ad24 <__udivsi3>
    a2ec:	a00b883a 	mov	r5,r20
    a2f0:	1009883a 	mov	r4,r2
    a2f4:	94bfffcc 	andi	r18,r18,65535
    a2f8:	1021883a 	mov	r16,r2
    a2fc:	94e4b03a 	or	r18,r18,r19
    a300:	000ade00 	call	ade0 <__mulsi3>
    a304:	d8c00117 	ldw	r3,4(sp)
    a308:	9080052e 	bgeu	r18,r2,a320 <__udivdi3+0x2b4>
    a30c:	8ca5883a 	add	r18,r17,r18
    a310:	813fffc4 	addi	r4,r16,-1
    a314:	9440ad36 	bltu	r18,r17,a5cc <__udivdi3+0x560>
    a318:	9080ac2e 	bgeu	r18,r2,a5cc <__udivdi3+0x560>
    a31c:	843fff84 	addi	r16,r16,-2
    a320:	b004943a 	slli	r2,r22,16
    a324:	1404b03a 	or	r2,r2,r16
    a328:	00000206 	br	a334 <__udivdi3+0x2c8>
    a32c:	0007883a 	mov	r3,zero
    a330:	0005883a 	mov	r2,zero
    a334:	dfc00b17 	ldw	ra,44(sp)
    a338:	df000a17 	ldw	fp,40(sp)
    a33c:	ddc00917 	ldw	r23,36(sp)
    a340:	dd800817 	ldw	r22,32(sp)
    a344:	dd400717 	ldw	r21,28(sp)
    a348:	dd000617 	ldw	r20,24(sp)
    a34c:	dcc00517 	ldw	r19,20(sp)
    a350:	dc800417 	ldw	r18,16(sp)
    a354:	dc400317 	ldw	r17,12(sp)
    a358:	dc000217 	ldw	r16,8(sp)
    a35c:	dec00c04 	addi	sp,sp,48
    a360:	f800283a 	ret
    a364:	00803fc4 	movi	r2,255
    a368:	11c5803a 	cmpltu	r2,r2,r7
    a36c:	100490fa 	slli	r2,r2,3
    a370:	003f9906 	br	a1d8 <__alt_data_end+0xfffc0df8>
    a374:	00803fc4 	movi	r2,255
    a378:	1445803a 	cmpltu	r2,r2,r17
    a37c:	100490fa 	slli	r2,r2,3
    a380:	003fad06 	br	a238 <__alt_data_end+0xfffc0e58>
    a384:	00804034 	movhi	r2,256
    a388:	10bfffc4 	addi	r2,r2,-1
    a38c:	11809f36 	bltu	r2,r6,a60c <__udivdi3+0x5a0>
    a390:	00800404 	movi	r2,16
    a394:	003f4c06 	br	a0c8 <__alt_data_end+0xfffc0ce8>
    a398:	3dce983a 	sll	r7,r7,r23
    a39c:	30b8d83a 	srl	fp,r6,r2
    a3a0:	80a2d83a 	srl	r17,r16,r2
    a3a4:	35cc983a 	sll	r6,r6,r23
    a3a8:	3f38b03a 	or	fp,r7,fp
    a3ac:	e024d43a 	srli	r18,fp,16
    a3b0:	9884d83a 	srl	r2,r19,r2
    a3b4:	85e0983a 	sll	r16,r16,r23
    a3b8:	8809883a 	mov	r4,r17
    a3bc:	900b883a 	mov	r5,r18
    a3c0:	d9800015 	stw	r6,0(sp)
    a3c4:	1420b03a 	or	r16,r2,r16
    a3c8:	000ad880 	call	ad88 <__umodsi3>
    a3cc:	900b883a 	mov	r5,r18
    a3d0:	8809883a 	mov	r4,r17
    a3d4:	1029883a 	mov	r20,r2
    a3d8:	e5bfffcc 	andi	r22,fp,65535
    a3dc:	000ad240 	call	ad24 <__udivsi3>
    a3e0:	100b883a 	mov	r5,r2
    a3e4:	b009883a 	mov	r4,r22
    a3e8:	102b883a 	mov	r21,r2
    a3ec:	000ade00 	call	ade0 <__mulsi3>
    a3f0:	a028943a 	slli	r20,r20,16
    a3f4:	8006d43a 	srli	r3,r16,16
    a3f8:	1d06b03a 	or	r3,r3,r20
    a3fc:	1880042e 	bgeu	r3,r2,a410 <__udivdi3+0x3a4>
    a400:	1f07883a 	add	r3,r3,fp
    a404:	a93fffc4 	addi	r4,r21,-1
    a408:	1f00892e 	bgeu	r3,fp,a630 <__udivdi3+0x5c4>
    a40c:	202b883a 	mov	r21,r4
    a410:	18a3c83a 	sub	r17,r3,r2
    a414:	8809883a 	mov	r4,r17
    a418:	900b883a 	mov	r5,r18
    a41c:	000ad880 	call	ad88 <__umodsi3>
    a420:	1029883a 	mov	r20,r2
    a424:	8809883a 	mov	r4,r17
    a428:	900b883a 	mov	r5,r18
    a42c:	a028943a 	slli	r20,r20,16
    a430:	000ad240 	call	ad24 <__udivsi3>
    a434:	100b883a 	mov	r5,r2
    a438:	b009883a 	mov	r4,r22
    a43c:	843fffcc 	andi	r16,r16,65535
    a440:	1023883a 	mov	r17,r2
    a444:	8520b03a 	or	r16,r16,r20
    a448:	000ade00 	call	ade0 <__mulsi3>
    a44c:	8080042e 	bgeu	r16,r2,a460 <__udivdi3+0x3f4>
    a450:	8721883a 	add	r16,r16,fp
    a454:	88ffffc4 	addi	r3,r17,-1
    a458:	8700712e 	bgeu	r16,fp,a620 <__udivdi3+0x5b4>
    a45c:	1823883a 	mov	r17,r3
    a460:	a80e943a 	slli	r7,r21,16
    a464:	d8c00017 	ldw	r3,0(sp)
    a468:	80a1c83a 	sub	r16,r16,r2
    a46c:	3c64b03a 	or	r18,r7,r17
    a470:	1d3fffcc 	andi	r20,r3,65535
    a474:	9022d43a 	srli	r17,r18,16
    a478:	95bfffcc 	andi	r22,r18,65535
    a47c:	a00b883a 	mov	r5,r20
    a480:	b009883a 	mov	r4,r22
    a484:	182ad43a 	srli	r21,r3,16
    a488:	000ade00 	call	ade0 <__mulsi3>
    a48c:	a00b883a 	mov	r5,r20
    a490:	8809883a 	mov	r4,r17
    a494:	1039883a 	mov	fp,r2
    a498:	000ade00 	call	ade0 <__mulsi3>
    a49c:	8809883a 	mov	r4,r17
    a4a0:	a80b883a 	mov	r5,r21
    a4a4:	1029883a 	mov	r20,r2
    a4a8:	000ade00 	call	ade0 <__mulsi3>
    a4ac:	a80b883a 	mov	r5,r21
    a4b0:	b009883a 	mov	r4,r22
    a4b4:	1023883a 	mov	r17,r2
    a4b8:	000ade00 	call	ade0 <__mulsi3>
    a4bc:	e006d43a 	srli	r3,fp,16
    a4c0:	1505883a 	add	r2,r2,r20
    a4c4:	1887883a 	add	r3,r3,r2
    a4c8:	1d00022e 	bgeu	r3,r20,a4d4 <__udivdi3+0x468>
    a4cc:	00800074 	movhi	r2,1
    a4d0:	88a3883a 	add	r17,r17,r2
    a4d4:	1804d43a 	srli	r2,r3,16
    a4d8:	1463883a 	add	r17,r2,r17
    a4dc:	84404436 	bltu	r16,r17,a5f0 <__udivdi3+0x584>
    a4e0:	84403e26 	beq	r16,r17,a5dc <__udivdi3+0x570>
    a4e4:	9005883a 	mov	r2,r18
    a4e8:	0007883a 	mov	r3,zero
    a4ec:	003f9106 	br	a334 <__alt_data_end+0xfffc0f54>
    a4f0:	88e2983a 	sll	r17,r17,r3
    a4f4:	80aed83a 	srl	r23,r16,r2
    a4f8:	80e0983a 	sll	r16,r16,r3
    a4fc:	882ad43a 	srli	r21,r17,16
    a500:	9884d83a 	srl	r2,r19,r2
    a504:	b809883a 	mov	r4,r23
    a508:	a80b883a 	mov	r5,r21
    a50c:	98e4983a 	sll	r18,r19,r3
    a510:	142cb03a 	or	r22,r2,r16
    a514:	000ad880 	call	ad88 <__umodsi3>
    a518:	b809883a 	mov	r4,r23
    a51c:	a80b883a 	mov	r5,r21
    a520:	1027883a 	mov	r19,r2
    a524:	8d3fffcc 	andi	r20,r17,65535
    a528:	000ad240 	call	ad24 <__udivsi3>
    a52c:	a009883a 	mov	r4,r20
    a530:	100b883a 	mov	r5,r2
    a534:	102f883a 	mov	r23,r2
    a538:	000ade00 	call	ade0 <__mulsi3>
    a53c:	9826943a 	slli	r19,r19,16
    a540:	b008d43a 	srli	r4,r22,16
    a544:	24c8b03a 	or	r4,r4,r19
    a548:	2080062e 	bgeu	r4,r2,a564 <__udivdi3+0x4f8>
    a54c:	2449883a 	add	r4,r4,r17
    a550:	b8ffffc4 	addi	r3,r23,-1
    a554:	24403c36 	bltu	r4,r17,a648 <__udivdi3+0x5dc>
    a558:	20803b2e 	bgeu	r4,r2,a648 <__udivdi3+0x5dc>
    a55c:	bdffff84 	addi	r23,r23,-2
    a560:	2449883a 	add	r4,r4,r17
    a564:	20a1c83a 	sub	r16,r4,r2
    a568:	a80b883a 	mov	r5,r21
    a56c:	8009883a 	mov	r4,r16
    a570:	000ad880 	call	ad88 <__umodsi3>
    a574:	a80b883a 	mov	r5,r21
    a578:	8009883a 	mov	r4,r16
    a57c:	1027883a 	mov	r19,r2
    a580:	000ad240 	call	ad24 <__udivsi3>
    a584:	a009883a 	mov	r4,r20
    a588:	100b883a 	mov	r5,r2
    a58c:	9826943a 	slli	r19,r19,16
    a590:	1039883a 	mov	fp,r2
    a594:	000ade00 	call	ade0 <__mulsi3>
    a598:	b13fffcc 	andi	r4,r22,65535
    a59c:	24c8b03a 	or	r4,r4,r19
    a5a0:	2080062e 	bgeu	r4,r2,a5bc <__udivdi3+0x550>
    a5a4:	2449883a 	add	r4,r4,r17
    a5a8:	e0ffffc4 	addi	r3,fp,-1
    a5ac:	24402436 	bltu	r4,r17,a640 <__udivdi3+0x5d4>
    a5b0:	2080232e 	bgeu	r4,r2,a640 <__udivdi3+0x5d4>
    a5b4:	e73fff84 	addi	fp,fp,-2
    a5b8:	2449883a 	add	r4,r4,r17
    a5bc:	b82e943a 	slli	r23,r23,16
    a5c0:	20a1c83a 	sub	r16,r4,r2
    a5c4:	bf06b03a 	or	r3,r23,fp
    a5c8:	003f2806 	br	a26c <__alt_data_end+0xfffc0e8c>
    a5cc:	2021883a 	mov	r16,r4
    a5d0:	003f5306 	br	a320 <__alt_data_end+0xfffc0f40>
    a5d4:	1821883a 	mov	r16,r3
    a5d8:	003ef406 	br	a1ac <__alt_data_end+0xfffc0dcc>
    a5dc:	1806943a 	slli	r3,r3,16
    a5e0:	9de6983a 	sll	r19,r19,r23
    a5e4:	e73fffcc 	andi	fp,fp,65535
    a5e8:	1f07883a 	add	r3,r3,fp
    a5ec:	98ffbd2e 	bgeu	r19,r3,a4e4 <__alt_data_end+0xfffc1104>
    a5f0:	90bfffc4 	addi	r2,r18,-1
    a5f4:	0007883a 	mov	r3,zero
    a5f8:	003f4e06 	br	a334 <__alt_data_end+0xfffc0f54>
    a5fc:	00800604 	movi	r2,24
    a600:	003ef506 	br	a1d8 <__alt_data_end+0xfffc0df8>
    a604:	00800604 	movi	r2,24
    a608:	003f0b06 	br	a238 <__alt_data_end+0xfffc0e58>
    a60c:	00800604 	movi	r2,24
    a610:	003ead06 	br	a0c8 <__alt_data_end+0xfffc0ce8>
    a614:	0007883a 	mov	r3,zero
    a618:	00800044 	movi	r2,1
    a61c:	003f4506 	br	a334 <__alt_data_end+0xfffc0f54>
    a620:	80bf8e2e 	bgeu	r16,r2,a45c <__alt_data_end+0xfffc107c>
    a624:	8c7fff84 	addi	r17,r17,-2
    a628:	8721883a 	add	r16,r16,fp
    a62c:	003f8c06 	br	a460 <__alt_data_end+0xfffc1080>
    a630:	18bf762e 	bgeu	r3,r2,a40c <__alt_data_end+0xfffc102c>
    a634:	ad7fff84 	addi	r21,r21,-2
    a638:	1f07883a 	add	r3,r3,fp
    a63c:	003f7406 	br	a410 <__alt_data_end+0xfffc1030>
    a640:	1839883a 	mov	fp,r3
    a644:	003fdd06 	br	a5bc <__alt_data_end+0xfffc11dc>
    a648:	182f883a 	mov	r23,r3
    a64c:	003fc506 	br	a564 <__alt_data_end+0xfffc1184>
    a650:	b5bfff84 	addi	r22,r22,-2
    a654:	3c4f883a 	add	r7,r7,r17
    a658:	003f1a06 	br	a2c4 <__alt_data_end+0xfffc0ee4>
    a65c:	b5bfff84 	addi	r22,r22,-2
    a660:	1c47883a 	add	r3,r3,r17
    a664:	003ebc06 	br	a158 <__alt_data_end+0xfffc0d78>

0000a668 <__umoddi3>:
    a668:	defff304 	addi	sp,sp,-52
    a66c:	df000b15 	stw	fp,44(sp)
    a670:	dc400415 	stw	r17,16(sp)
    a674:	dc000315 	stw	r16,12(sp)
    a678:	dfc00c15 	stw	ra,48(sp)
    a67c:	ddc00a15 	stw	r23,40(sp)
    a680:	dd800915 	stw	r22,36(sp)
    a684:	dd400815 	stw	r21,32(sp)
    a688:	dd000715 	stw	r20,28(sp)
    a68c:	dcc00615 	stw	r19,24(sp)
    a690:	dc800515 	stw	r18,20(sp)
    a694:	2021883a 	mov	r16,r4
    a698:	2823883a 	mov	r17,r5
    a69c:	2839883a 	mov	fp,r5
    a6a0:	3800401e 	bne	r7,zero,a7a4 <__umoddi3+0x13c>
    a6a4:	3027883a 	mov	r19,r6
    a6a8:	2029883a 	mov	r20,r4
    a6ac:	2980552e 	bgeu	r5,r6,a804 <__umoddi3+0x19c>
    a6b0:	00bfffd4 	movui	r2,65535
    a6b4:	1180a236 	bltu	r2,r6,a940 <__umoddi3+0x2d8>
    a6b8:	01003fc4 	movi	r4,255
    a6bc:	2189803a 	cmpltu	r4,r4,r6
    a6c0:	200890fa 	slli	r4,r4,3
    a6c4:	3104d83a 	srl	r2,r6,r4
    a6c8:	00c00074 	movhi	r3,1
    a6cc:	18c20004 	addi	r3,r3,2048
    a6d0:	1885883a 	add	r2,r3,r2
    a6d4:	10c00003 	ldbu	r3,0(r2)
    a6d8:	00800804 	movi	r2,32
    a6dc:	1909883a 	add	r4,r3,r4
    a6e0:	1125c83a 	sub	r18,r2,r4
    a6e4:	90000526 	beq	r18,zero,a6fc <__umoddi3+0x94>
    a6e8:	8ca2983a 	sll	r17,r17,r18
    a6ec:	8108d83a 	srl	r4,r16,r4
    a6f0:	34a6983a 	sll	r19,r6,r18
    a6f4:	84a8983a 	sll	r20,r16,r18
    a6f8:	2478b03a 	or	fp,r4,r17
    a6fc:	982cd43a 	srli	r22,r19,16
    a700:	e009883a 	mov	r4,fp
    a704:	9dffffcc 	andi	r23,r19,65535
    a708:	b00b883a 	mov	r5,r22
    a70c:	000ad880 	call	ad88 <__umodsi3>
    a710:	b00b883a 	mov	r5,r22
    a714:	e009883a 	mov	r4,fp
    a718:	102b883a 	mov	r21,r2
    a71c:	000ad240 	call	ad24 <__udivsi3>
    a720:	100b883a 	mov	r5,r2
    a724:	b809883a 	mov	r4,r23
    a728:	000ade00 	call	ade0 <__mulsi3>
    a72c:	a82a943a 	slli	r21,r21,16
    a730:	a006d43a 	srli	r3,r20,16
    a734:	1d46b03a 	or	r3,r3,r21
    a738:	1880032e 	bgeu	r3,r2,a748 <__umoddi3+0xe0>
    a73c:	1cc7883a 	add	r3,r3,r19
    a740:	1cc00136 	bltu	r3,r19,a748 <__umoddi3+0xe0>
    a744:	18813136 	bltu	r3,r2,ac0c <__umoddi3+0x5a4>
    a748:	18a1c83a 	sub	r16,r3,r2
    a74c:	b00b883a 	mov	r5,r22
    a750:	8009883a 	mov	r4,r16
    a754:	000ad880 	call	ad88 <__umodsi3>
    a758:	b00b883a 	mov	r5,r22
    a75c:	8009883a 	mov	r4,r16
    a760:	1023883a 	mov	r17,r2
    a764:	000ad240 	call	ad24 <__udivsi3>
    a768:	100b883a 	mov	r5,r2
    a76c:	b809883a 	mov	r4,r23
    a770:	8822943a 	slli	r17,r17,16
    a774:	000ade00 	call	ade0 <__mulsi3>
    a778:	a0ffffcc 	andi	r3,r20,65535
    a77c:	1c46b03a 	or	r3,r3,r17
    a780:	1880042e 	bgeu	r3,r2,a794 <__umoddi3+0x12c>
    a784:	1cc7883a 	add	r3,r3,r19
    a788:	1cc00236 	bltu	r3,r19,a794 <__umoddi3+0x12c>
    a78c:	1880012e 	bgeu	r3,r2,a794 <__umoddi3+0x12c>
    a790:	1cc7883a 	add	r3,r3,r19
    a794:	1885c83a 	sub	r2,r3,r2
    a798:	1484d83a 	srl	r2,r2,r18
    a79c:	0007883a 	mov	r3,zero
    a7a0:	00005306 	br	a8f0 <__umoddi3+0x288>
    a7a4:	29c05036 	bltu	r5,r7,a8e8 <__umoddi3+0x280>
    a7a8:	00bfffd4 	movui	r2,65535
    a7ac:	11c05c2e 	bgeu	r2,r7,a920 <__umoddi3+0x2b8>
    a7b0:	00804034 	movhi	r2,256
    a7b4:	10bfffc4 	addi	r2,r2,-1
    a7b8:	11c10636 	bltu	r2,r7,abd4 <__umoddi3+0x56c>
    a7bc:	01000404 	movi	r4,16
    a7c0:	3904d83a 	srl	r2,r7,r4
    a7c4:	00c00074 	movhi	r3,1
    a7c8:	18c20004 	addi	r3,r3,2048
    a7cc:	1885883a 	add	r2,r3,r2
    a7d0:	14c00003 	ldbu	r19,0(r2)
    a7d4:	00c00804 	movi	r3,32
    a7d8:	9927883a 	add	r19,r19,r4
    a7dc:	1ce9c83a 	sub	r20,r3,r19
    a7e0:	a0005c1e 	bne	r20,zero,a954 <__umoddi3+0x2ec>
    a7e4:	3c400136 	bltu	r7,r17,a7ec <__umoddi3+0x184>
    a7e8:	81810a36 	bltu	r16,r6,ac14 <__umoddi3+0x5ac>
    a7ec:	8185c83a 	sub	r2,r16,r6
    a7f0:	89e3c83a 	sub	r17,r17,r7
    a7f4:	8089803a 	cmpltu	r4,r16,r2
    a7f8:	8939c83a 	sub	fp,r17,r4
    a7fc:	e007883a 	mov	r3,fp
    a800:	00003b06 	br	a8f0 <__umoddi3+0x288>
    a804:	3000041e 	bne	r6,zero,a818 <__umoddi3+0x1b0>
    a808:	000b883a 	mov	r5,zero
    a80c:	01000044 	movi	r4,1
    a810:	000ad240 	call	ad24 <__udivsi3>
    a814:	1027883a 	mov	r19,r2
    a818:	00bfffd4 	movui	r2,65535
    a81c:	14c0442e 	bgeu	r2,r19,a930 <__umoddi3+0x2c8>
    a820:	00804034 	movhi	r2,256
    a824:	10bfffc4 	addi	r2,r2,-1
    a828:	14c0ec36 	bltu	r2,r19,abdc <__umoddi3+0x574>
    a82c:	00800404 	movi	r2,16
    a830:	9886d83a 	srl	r3,r19,r2
    a834:	01000074 	movhi	r4,1
    a838:	21020004 	addi	r4,r4,2048
    a83c:	20c7883a 	add	r3,r4,r3
    a840:	18c00003 	ldbu	r3,0(r3)
    a844:	1887883a 	add	r3,r3,r2
    a848:	00800804 	movi	r2,32
    a84c:	10e5c83a 	sub	r18,r2,r3
    a850:	9000ab1e 	bne	r18,zero,ab00 <__umoddi3+0x498>
    a854:	982cd43a 	srli	r22,r19,16
    a858:	8ce3c83a 	sub	r17,r17,r19
    a85c:	9dffffcc 	andi	r23,r19,65535
    a860:	b00b883a 	mov	r5,r22
    a864:	8809883a 	mov	r4,r17
    a868:	000ad880 	call	ad88 <__umodsi3>
    a86c:	b00b883a 	mov	r5,r22
    a870:	8809883a 	mov	r4,r17
    a874:	102b883a 	mov	r21,r2
    a878:	000ad240 	call	ad24 <__udivsi3>
    a87c:	b80b883a 	mov	r5,r23
    a880:	1009883a 	mov	r4,r2
    a884:	000ade00 	call	ade0 <__mulsi3>
    a888:	a82a943a 	slli	r21,r21,16
    a88c:	a006d43a 	srli	r3,r20,16
    a890:	1d46b03a 	or	r3,r3,r21
    a894:	1880042e 	bgeu	r3,r2,a8a8 <__umoddi3+0x240>
    a898:	1cc7883a 	add	r3,r3,r19
    a89c:	1cc00236 	bltu	r3,r19,a8a8 <__umoddi3+0x240>
    a8a0:	1880012e 	bgeu	r3,r2,a8a8 <__umoddi3+0x240>
    a8a4:	1cc7883a 	add	r3,r3,r19
    a8a8:	18a1c83a 	sub	r16,r3,r2
    a8ac:	b00b883a 	mov	r5,r22
    a8b0:	8009883a 	mov	r4,r16
    a8b4:	000ad880 	call	ad88 <__umodsi3>
    a8b8:	1023883a 	mov	r17,r2
    a8bc:	b00b883a 	mov	r5,r22
    a8c0:	8009883a 	mov	r4,r16
    a8c4:	000ad240 	call	ad24 <__udivsi3>
    a8c8:	8822943a 	slli	r17,r17,16
    a8cc:	b80b883a 	mov	r5,r23
    a8d0:	1009883a 	mov	r4,r2
    a8d4:	000ade00 	call	ade0 <__mulsi3>
    a8d8:	a53fffcc 	andi	r20,r20,65535
    a8dc:	a446b03a 	or	r3,r20,r17
    a8e0:	18bfac2e 	bgeu	r3,r2,a794 <__alt_data_end+0xfffc13b4>
    a8e4:	003fa706 	br	a784 <__alt_data_end+0xfffc13a4>
    a8e8:	2005883a 	mov	r2,r4
    a8ec:	2807883a 	mov	r3,r5
    a8f0:	dfc00c17 	ldw	ra,48(sp)
    a8f4:	df000b17 	ldw	fp,44(sp)
    a8f8:	ddc00a17 	ldw	r23,40(sp)
    a8fc:	dd800917 	ldw	r22,36(sp)
    a900:	dd400817 	ldw	r21,32(sp)
    a904:	dd000717 	ldw	r20,28(sp)
    a908:	dcc00617 	ldw	r19,24(sp)
    a90c:	dc800517 	ldw	r18,20(sp)
    a910:	dc400417 	ldw	r17,16(sp)
    a914:	dc000317 	ldw	r16,12(sp)
    a918:	dec00d04 	addi	sp,sp,52
    a91c:	f800283a 	ret
    a920:	04c03fc4 	movi	r19,255
    a924:	99c9803a 	cmpltu	r4,r19,r7
    a928:	200890fa 	slli	r4,r4,3
    a92c:	003fa406 	br	a7c0 <__alt_data_end+0xfffc13e0>
    a930:	00803fc4 	movi	r2,255
    a934:	14c5803a 	cmpltu	r2,r2,r19
    a938:	100490fa 	slli	r2,r2,3
    a93c:	003fbc06 	br	a830 <__alt_data_end+0xfffc1450>
    a940:	00804034 	movhi	r2,256
    a944:	10bfffc4 	addi	r2,r2,-1
    a948:	1180a636 	bltu	r2,r6,abe4 <__umoddi3+0x57c>
    a94c:	01000404 	movi	r4,16
    a950:	003f5c06 	br	a6c4 <__alt_data_end+0xfffc12e4>
    a954:	3d0e983a 	sll	r7,r7,r20
    a958:	34ead83a 	srl	r21,r6,r19
    a95c:	8cc6d83a 	srl	r3,r17,r19
    a960:	8d10983a 	sll	r8,r17,r20
    a964:	3d6ab03a 	or	r21,r7,r21
    a968:	a82cd43a 	srli	r22,r21,16
    a96c:	84e2d83a 	srl	r17,r16,r19
    a970:	1809883a 	mov	r4,r3
    a974:	b00b883a 	mov	r5,r22
    a978:	8a22b03a 	or	r17,r17,r8
    a97c:	3524983a 	sll	r18,r6,r20
    a980:	dc400015 	stw	r17,0(sp)
    a984:	d8c00115 	stw	r3,4(sp)
    a988:	000ad880 	call	ad88 <__umodsi3>
    a98c:	d8c00117 	ldw	r3,4(sp)
    a990:	b00b883a 	mov	r5,r22
    a994:	1039883a 	mov	fp,r2
    a998:	1809883a 	mov	r4,r3
    a99c:	000ad240 	call	ad24 <__udivsi3>
    a9a0:	adffffcc 	andi	r23,r21,65535
    a9a4:	100b883a 	mov	r5,r2
    a9a8:	b809883a 	mov	r4,r23
    a9ac:	1023883a 	mov	r17,r2
    a9b0:	000ade00 	call	ade0 <__mulsi3>
    a9b4:	d9400017 	ldw	r5,0(sp)
    a9b8:	e008943a 	slli	r4,fp,16
    a9bc:	8520983a 	sll	r16,r16,r20
    a9c0:	2806d43a 	srli	r3,r5,16
    a9c4:	1906b03a 	or	r3,r3,r4
    a9c8:	1880042e 	bgeu	r3,r2,a9dc <__umoddi3+0x374>
    a9cc:	1d47883a 	add	r3,r3,r21
    a9d0:	893fffc4 	addi	r4,r17,-1
    a9d4:	1d40892e 	bgeu	r3,r21,abfc <__umoddi3+0x594>
    a9d8:	2023883a 	mov	r17,r4
    a9dc:	18b9c83a 	sub	fp,r3,r2
    a9e0:	b00b883a 	mov	r5,r22
    a9e4:	e009883a 	mov	r4,fp
    a9e8:	000ad880 	call	ad88 <__umodsi3>
    a9ec:	b00b883a 	mov	r5,r22
    a9f0:	e009883a 	mov	r4,fp
    a9f4:	d8800215 	stw	r2,8(sp)
    a9f8:	000ad240 	call	ad24 <__udivsi3>
    a9fc:	100b883a 	mov	r5,r2
    aa00:	b809883a 	mov	r4,r23
    aa04:	102d883a 	mov	r22,r2
    aa08:	000ade00 	call	ade0 <__mulsi3>
    aa0c:	d9800217 	ldw	r6,8(sp)
    aa10:	d8c00017 	ldw	r3,0(sp)
    aa14:	300c943a 	slli	r6,r6,16
    aa18:	1a3fffcc 	andi	r8,r3,65535
    aa1c:	4190b03a 	or	r8,r8,r6
    aa20:	4080042e 	bgeu	r8,r2,aa34 <__umoddi3+0x3cc>
    aa24:	4551883a 	add	r8,r8,r21
    aa28:	b0ffffc4 	addi	r3,r22,-1
    aa2c:	45406f2e 	bgeu	r8,r21,abec <__umoddi3+0x584>
    aa30:	182d883a 	mov	r22,r3
    aa34:	880e943a 	slli	r7,r17,16
    aa38:	9006d43a 	srli	r3,r18,16
    aa3c:	91bfffcc 	andi	r6,r18,65535
    aa40:	3dacb03a 	or	r22,r7,r22
    aa44:	b02ed43a 	srli	r23,r22,16
    aa48:	b5bfffcc 	andi	r22,r22,65535
    aa4c:	300b883a 	mov	r5,r6
    aa50:	b009883a 	mov	r4,r22
    aa54:	40a3c83a 	sub	r17,r8,r2
    aa58:	d8c00115 	stw	r3,4(sp)
    aa5c:	d9800215 	stw	r6,8(sp)
    aa60:	000ade00 	call	ade0 <__mulsi3>
    aa64:	d9800217 	ldw	r6,8(sp)
    aa68:	b809883a 	mov	r4,r23
    aa6c:	1039883a 	mov	fp,r2
    aa70:	300b883a 	mov	r5,r6
    aa74:	000ade00 	call	ade0 <__mulsi3>
    aa78:	d8c00117 	ldw	r3,4(sp)
    aa7c:	b809883a 	mov	r4,r23
    aa80:	d8800215 	stw	r2,8(sp)
    aa84:	180b883a 	mov	r5,r3
    aa88:	000ade00 	call	ade0 <__mulsi3>
    aa8c:	d8c00117 	ldw	r3,4(sp)
    aa90:	b009883a 	mov	r4,r22
    aa94:	102f883a 	mov	r23,r2
    aa98:	180b883a 	mov	r5,r3
    aa9c:	000ade00 	call	ade0 <__mulsi3>
    aaa0:	d9800217 	ldw	r6,8(sp)
    aaa4:	e006d43a 	srli	r3,fp,16
    aaa8:	1185883a 	add	r2,r2,r6
    aaac:	1885883a 	add	r2,r3,r2
    aab0:	1180022e 	bgeu	r2,r6,aabc <__umoddi3+0x454>
    aab4:	00c00074 	movhi	r3,1
    aab8:	b8ef883a 	add	r23,r23,r3
    aabc:	1006d43a 	srli	r3,r2,16
    aac0:	1004943a 	slli	r2,r2,16
    aac4:	e73fffcc 	andi	fp,fp,65535
    aac8:	1dc7883a 	add	r3,r3,r23
    aacc:	1739883a 	add	fp,r2,fp
    aad0:	88c03a36 	bltu	r17,r3,abbc <__umoddi3+0x554>
    aad4:	88c05126 	beq	r17,r3,ac1c <__umoddi3+0x5b4>
    aad8:	88c9c83a 	sub	r4,r17,r3
    aadc:	e00f883a 	mov	r7,fp
    aae0:	81cfc83a 	sub	r7,r16,r7
    aae4:	81c7803a 	cmpltu	r3,r16,r7
    aae8:	20c7c83a 	sub	r3,r4,r3
    aaec:	1cc4983a 	sll	r2,r3,r19
    aaf0:	3d0ed83a 	srl	r7,r7,r20
    aaf4:	1d06d83a 	srl	r3,r3,r20
    aaf8:	11c4b03a 	or	r2,r2,r7
    aafc:	003f7c06 	br	a8f0 <__alt_data_end+0xfffc1510>
    ab00:	9ca6983a 	sll	r19,r19,r18
    ab04:	88f8d83a 	srl	fp,r17,r3
    ab08:	80c4d83a 	srl	r2,r16,r3
    ab0c:	982cd43a 	srli	r22,r19,16
    ab10:	8ca2983a 	sll	r17,r17,r18
    ab14:	e009883a 	mov	r4,fp
    ab18:	b00b883a 	mov	r5,r22
    ab1c:	146ab03a 	or	r21,r2,r17
    ab20:	000ad880 	call	ad88 <__umodsi3>
    ab24:	b00b883a 	mov	r5,r22
    ab28:	e009883a 	mov	r4,fp
    ab2c:	1029883a 	mov	r20,r2
    ab30:	9dffffcc 	andi	r23,r19,65535
    ab34:	000ad240 	call	ad24 <__udivsi3>
    ab38:	b809883a 	mov	r4,r23
    ab3c:	100b883a 	mov	r5,r2
    ab40:	000ade00 	call	ade0 <__mulsi3>
    ab44:	a008943a 	slli	r4,r20,16
    ab48:	a806d43a 	srli	r3,r21,16
    ab4c:	84a8983a 	sll	r20,r16,r18
    ab50:	1906b03a 	or	r3,r3,r4
    ab54:	1880042e 	bgeu	r3,r2,ab68 <__umoddi3+0x500>
    ab58:	1cc7883a 	add	r3,r3,r19
    ab5c:	1cc00236 	bltu	r3,r19,ab68 <__umoddi3+0x500>
    ab60:	1880012e 	bgeu	r3,r2,ab68 <__umoddi3+0x500>
    ab64:	1cc7883a 	add	r3,r3,r19
    ab68:	18a3c83a 	sub	r17,r3,r2
    ab6c:	b00b883a 	mov	r5,r22
    ab70:	8809883a 	mov	r4,r17
    ab74:	000ad880 	call	ad88 <__umodsi3>
    ab78:	b00b883a 	mov	r5,r22
    ab7c:	8809883a 	mov	r4,r17
    ab80:	1021883a 	mov	r16,r2
    ab84:	000ad240 	call	ad24 <__udivsi3>
    ab88:	100b883a 	mov	r5,r2
    ab8c:	b809883a 	mov	r4,r23
    ab90:	8020943a 	slli	r16,r16,16
    ab94:	000ade00 	call	ade0 <__mulsi3>
    ab98:	a8ffffcc 	andi	r3,r21,65535
    ab9c:	1c06b03a 	or	r3,r3,r16
    aba0:	1880042e 	bgeu	r3,r2,abb4 <__umoddi3+0x54c>
    aba4:	1cc7883a 	add	r3,r3,r19
    aba8:	1cc00236 	bltu	r3,r19,abb4 <__umoddi3+0x54c>
    abac:	1880012e 	bgeu	r3,r2,abb4 <__umoddi3+0x54c>
    abb0:	1cc7883a 	add	r3,r3,r19
    abb4:	18a3c83a 	sub	r17,r3,r2
    abb8:	003f2906 	br	a860 <__alt_data_end+0xfffc1480>
    abbc:	e48fc83a 	sub	r7,fp,r18
    abc0:	1d49c83a 	sub	r4,r3,r21
    abc4:	e1f9803a 	cmpltu	fp,fp,r7
    abc8:	2739c83a 	sub	fp,r4,fp
    abcc:	8f09c83a 	sub	r4,r17,fp
    abd0:	003fc306 	br	aae0 <__alt_data_end+0xfffc1700>
    abd4:	01000604 	movi	r4,24
    abd8:	003ef906 	br	a7c0 <__alt_data_end+0xfffc13e0>
    abdc:	00800604 	movi	r2,24
    abe0:	003f1306 	br	a830 <__alt_data_end+0xfffc1450>
    abe4:	01000604 	movi	r4,24
    abe8:	003eb606 	br	a6c4 <__alt_data_end+0xfffc12e4>
    abec:	40bf902e 	bgeu	r8,r2,aa30 <__alt_data_end+0xfffc1650>
    abf0:	b5bfff84 	addi	r22,r22,-2
    abf4:	4551883a 	add	r8,r8,r21
    abf8:	003f8e06 	br	aa34 <__alt_data_end+0xfffc1654>
    abfc:	18bf762e 	bgeu	r3,r2,a9d8 <__alt_data_end+0xfffc15f8>
    ac00:	8c7fff84 	addi	r17,r17,-2
    ac04:	1d47883a 	add	r3,r3,r21
    ac08:	003f7406 	br	a9dc <__alt_data_end+0xfffc15fc>
    ac0c:	1cc7883a 	add	r3,r3,r19
    ac10:	003ecd06 	br	a748 <__alt_data_end+0xfffc1368>
    ac14:	8005883a 	mov	r2,r16
    ac18:	003ef806 	br	a7fc <__alt_data_end+0xfffc141c>
    ac1c:	873fe736 	bltu	r16,fp,abbc <__alt_data_end+0xfffc17dc>
    ac20:	e00f883a 	mov	r7,fp
    ac24:	0009883a 	mov	r4,zero
    ac28:	003fad06 	br	aae0 <__alt_data_end+0xfffc1700>

0000ac2c <__divsi3>:
    ac2c:	20001b16 	blt	r4,zero,ac9c <__divsi3+0x70>
    ac30:	000f883a 	mov	r7,zero
    ac34:	28001616 	blt	r5,zero,ac90 <__divsi3+0x64>
    ac38:	200d883a 	mov	r6,r4
    ac3c:	29001a2e 	bgeu	r5,r4,aca8 <__divsi3+0x7c>
    ac40:	00800804 	movi	r2,32
    ac44:	00c00044 	movi	r3,1
    ac48:	00000106 	br	ac50 <__divsi3+0x24>
    ac4c:	10000d26 	beq	r2,zero,ac84 <__divsi3+0x58>
    ac50:	294b883a 	add	r5,r5,r5
    ac54:	10bfffc4 	addi	r2,r2,-1
    ac58:	18c7883a 	add	r3,r3,r3
    ac5c:	293ffb36 	bltu	r5,r4,ac4c <__alt_data_end+0xfffc186c>
    ac60:	0005883a 	mov	r2,zero
    ac64:	18000726 	beq	r3,zero,ac84 <__divsi3+0x58>
    ac68:	0005883a 	mov	r2,zero
    ac6c:	31400236 	bltu	r6,r5,ac78 <__divsi3+0x4c>
    ac70:	314dc83a 	sub	r6,r6,r5
    ac74:	10c4b03a 	or	r2,r2,r3
    ac78:	1806d07a 	srli	r3,r3,1
    ac7c:	280ad07a 	srli	r5,r5,1
    ac80:	183ffa1e 	bne	r3,zero,ac6c <__alt_data_end+0xfffc188c>
    ac84:	38000126 	beq	r7,zero,ac8c <__divsi3+0x60>
    ac88:	0085c83a 	sub	r2,zero,r2
    ac8c:	f800283a 	ret
    ac90:	014bc83a 	sub	r5,zero,r5
    ac94:	39c0005c 	xori	r7,r7,1
    ac98:	003fe706 	br	ac38 <__alt_data_end+0xfffc1858>
    ac9c:	0109c83a 	sub	r4,zero,r4
    aca0:	01c00044 	movi	r7,1
    aca4:	003fe306 	br	ac34 <__alt_data_end+0xfffc1854>
    aca8:	00c00044 	movi	r3,1
    acac:	003fee06 	br	ac68 <__alt_data_end+0xfffc1888>

0000acb0 <__modsi3>:
    acb0:	20001716 	blt	r4,zero,ad10 <__modsi3+0x60>
    acb4:	000f883a 	mov	r7,zero
    acb8:	2005883a 	mov	r2,r4
    acbc:	28001216 	blt	r5,zero,ad08 <__modsi3+0x58>
    acc0:	2900162e 	bgeu	r5,r4,ad1c <__modsi3+0x6c>
    acc4:	01800804 	movi	r6,32
    acc8:	00c00044 	movi	r3,1
    accc:	00000106 	br	acd4 <__modsi3+0x24>
    acd0:	30000a26 	beq	r6,zero,acfc <__modsi3+0x4c>
    acd4:	294b883a 	add	r5,r5,r5
    acd8:	31bfffc4 	addi	r6,r6,-1
    acdc:	18c7883a 	add	r3,r3,r3
    ace0:	293ffb36 	bltu	r5,r4,acd0 <__alt_data_end+0xfffc18f0>
    ace4:	18000526 	beq	r3,zero,acfc <__modsi3+0x4c>
    ace8:	1806d07a 	srli	r3,r3,1
    acec:	11400136 	bltu	r2,r5,acf4 <__modsi3+0x44>
    acf0:	1145c83a 	sub	r2,r2,r5
    acf4:	280ad07a 	srli	r5,r5,1
    acf8:	183ffb1e 	bne	r3,zero,ace8 <__alt_data_end+0xfffc1908>
    acfc:	38000126 	beq	r7,zero,ad04 <__modsi3+0x54>
    ad00:	0085c83a 	sub	r2,zero,r2
    ad04:	f800283a 	ret
    ad08:	014bc83a 	sub	r5,zero,r5
    ad0c:	003fec06 	br	acc0 <__alt_data_end+0xfffc18e0>
    ad10:	0109c83a 	sub	r4,zero,r4
    ad14:	01c00044 	movi	r7,1
    ad18:	003fe706 	br	acb8 <__alt_data_end+0xfffc18d8>
    ad1c:	00c00044 	movi	r3,1
    ad20:	003ff106 	br	ace8 <__alt_data_end+0xfffc1908>

0000ad24 <__udivsi3>:
    ad24:	200d883a 	mov	r6,r4
    ad28:	2900152e 	bgeu	r5,r4,ad80 <__udivsi3+0x5c>
    ad2c:	28001416 	blt	r5,zero,ad80 <__udivsi3+0x5c>
    ad30:	00800804 	movi	r2,32
    ad34:	00c00044 	movi	r3,1
    ad38:	00000206 	br	ad44 <__udivsi3+0x20>
    ad3c:	10000e26 	beq	r2,zero,ad78 <__udivsi3+0x54>
    ad40:	28000516 	blt	r5,zero,ad58 <__udivsi3+0x34>
    ad44:	294b883a 	add	r5,r5,r5
    ad48:	10bfffc4 	addi	r2,r2,-1
    ad4c:	18c7883a 	add	r3,r3,r3
    ad50:	293ffa36 	bltu	r5,r4,ad3c <__alt_data_end+0xfffc195c>
    ad54:	18000826 	beq	r3,zero,ad78 <__udivsi3+0x54>
    ad58:	0005883a 	mov	r2,zero
    ad5c:	31400236 	bltu	r6,r5,ad68 <__udivsi3+0x44>
    ad60:	314dc83a 	sub	r6,r6,r5
    ad64:	10c4b03a 	or	r2,r2,r3
    ad68:	1806d07a 	srli	r3,r3,1
    ad6c:	280ad07a 	srli	r5,r5,1
    ad70:	183ffa1e 	bne	r3,zero,ad5c <__alt_data_end+0xfffc197c>
    ad74:	f800283a 	ret
    ad78:	0005883a 	mov	r2,zero
    ad7c:	f800283a 	ret
    ad80:	00c00044 	movi	r3,1
    ad84:	003ff406 	br	ad58 <__alt_data_end+0xfffc1978>

0000ad88 <__umodsi3>:
    ad88:	2005883a 	mov	r2,r4
    ad8c:	2900122e 	bgeu	r5,r4,add8 <__umodsi3+0x50>
    ad90:	28001116 	blt	r5,zero,add8 <__umodsi3+0x50>
    ad94:	01800804 	movi	r6,32
    ad98:	00c00044 	movi	r3,1
    ad9c:	00000206 	br	ada8 <__umodsi3+0x20>
    ada0:	30000c26 	beq	r6,zero,add4 <__umodsi3+0x4c>
    ada4:	28000516 	blt	r5,zero,adbc <__umodsi3+0x34>
    ada8:	294b883a 	add	r5,r5,r5
    adac:	31bfffc4 	addi	r6,r6,-1
    adb0:	18c7883a 	add	r3,r3,r3
    adb4:	293ffa36 	bltu	r5,r4,ada0 <__alt_data_end+0xfffc19c0>
    adb8:	18000626 	beq	r3,zero,add4 <__umodsi3+0x4c>
    adbc:	1806d07a 	srli	r3,r3,1
    adc0:	11400136 	bltu	r2,r5,adc8 <__umodsi3+0x40>
    adc4:	1145c83a 	sub	r2,r2,r5
    adc8:	280ad07a 	srli	r5,r5,1
    adcc:	183ffb1e 	bne	r3,zero,adbc <__alt_data_end+0xfffc19dc>
    add0:	f800283a 	ret
    add4:	f800283a 	ret
    add8:	00c00044 	movi	r3,1
    addc:	003ff706 	br	adbc <__alt_data_end+0xfffc19dc>

0000ade0 <__mulsi3>:
    ade0:	0005883a 	mov	r2,zero
    ade4:	20000726 	beq	r4,zero,ae04 <__mulsi3+0x24>
    ade8:	20c0004c 	andi	r3,r4,1
    adec:	2008d07a 	srli	r4,r4,1
    adf0:	18000126 	beq	r3,zero,adf8 <__mulsi3+0x18>
    adf4:	1145883a 	add	r2,r2,r5
    adf8:	294b883a 	add	r5,r5,r5
    adfc:	203ffa1e 	bne	r4,zero,ade8 <__alt_data_end+0xfffc1a08>
    ae00:	f800283a 	ret
    ae04:	f800283a 	ret

0000ae08 <__adddf3>:
    ae08:	02c00434 	movhi	r11,16
    ae0c:	5affffc4 	addi	r11,r11,-1
    ae10:	2806d7fa 	srli	r3,r5,31
    ae14:	2ad4703a 	and	r10,r5,r11
    ae18:	3ad2703a 	and	r9,r7,r11
    ae1c:	3804d53a 	srli	r2,r7,20
    ae20:	3018d77a 	srli	r12,r6,29
    ae24:	280ad53a 	srli	r5,r5,20
    ae28:	501490fa 	slli	r10,r10,3
    ae2c:	2010d77a 	srli	r8,r4,29
    ae30:	481290fa 	slli	r9,r9,3
    ae34:	380ed7fa 	srli	r7,r7,31
    ae38:	defffb04 	addi	sp,sp,-20
    ae3c:	dc800215 	stw	r18,8(sp)
    ae40:	dc400115 	stw	r17,4(sp)
    ae44:	dc000015 	stw	r16,0(sp)
    ae48:	dfc00415 	stw	ra,16(sp)
    ae4c:	dcc00315 	stw	r19,12(sp)
    ae50:	1c803fcc 	andi	r18,r3,255
    ae54:	2c01ffcc 	andi	r16,r5,2047
    ae58:	5210b03a 	or	r8,r10,r8
    ae5c:	202290fa 	slli	r17,r4,3
    ae60:	1081ffcc 	andi	r2,r2,2047
    ae64:	4b12b03a 	or	r9,r9,r12
    ae68:	300c90fa 	slli	r6,r6,3
    ae6c:	91c07526 	beq	r18,r7,b044 <__adddf3+0x23c>
    ae70:	8087c83a 	sub	r3,r16,r2
    ae74:	00c0ab0e 	bge	zero,r3,b124 <__adddf3+0x31c>
    ae78:	10002a1e 	bne	r2,zero,af24 <__adddf3+0x11c>
    ae7c:	4984b03a 	or	r2,r9,r6
    ae80:	1000961e 	bne	r2,zero,b0dc <__adddf3+0x2d4>
    ae84:	888001cc 	andi	r2,r17,7
    ae88:	10000726 	beq	r2,zero,aea8 <__adddf3+0xa0>
    ae8c:	888003cc 	andi	r2,r17,15
    ae90:	00c00104 	movi	r3,4
    ae94:	10c00426 	beq	r2,r3,aea8 <__adddf3+0xa0>
    ae98:	88c7883a 	add	r3,r17,r3
    ae9c:	1c63803a 	cmpltu	r17,r3,r17
    aea0:	4451883a 	add	r8,r8,r17
    aea4:	1823883a 	mov	r17,r3
    aea8:	4080202c 	andhi	r2,r8,128
    aeac:	10005926 	beq	r2,zero,b014 <__adddf3+0x20c>
    aeb0:	84000044 	addi	r16,r16,1
    aeb4:	0081ffc4 	movi	r2,2047
    aeb8:	8080ba26 	beq	r16,r2,b1a4 <__adddf3+0x39c>
    aebc:	00bfe034 	movhi	r2,65408
    aec0:	10bfffc4 	addi	r2,r2,-1
    aec4:	4090703a 	and	r8,r8,r2
    aec8:	4004977a 	slli	r2,r8,29
    aecc:	4010927a 	slli	r8,r8,9
    aed0:	8822d0fa 	srli	r17,r17,3
    aed4:	8401ffcc 	andi	r16,r16,2047
    aed8:	4010d33a 	srli	r8,r8,12
    aedc:	9007883a 	mov	r3,r18
    aee0:	1444b03a 	or	r2,r2,r17
    aee4:	8401ffcc 	andi	r16,r16,2047
    aee8:	8020953a 	slli	r16,r16,20
    aeec:	18c03fcc 	andi	r3,r3,255
    aef0:	01000434 	movhi	r4,16
    aef4:	213fffc4 	addi	r4,r4,-1
    aef8:	180697fa 	slli	r3,r3,31
    aefc:	4110703a 	and	r8,r8,r4
    af00:	4410b03a 	or	r8,r8,r16
    af04:	40c6b03a 	or	r3,r8,r3
    af08:	dfc00417 	ldw	ra,16(sp)
    af0c:	dcc00317 	ldw	r19,12(sp)
    af10:	dc800217 	ldw	r18,8(sp)
    af14:	dc400117 	ldw	r17,4(sp)
    af18:	dc000017 	ldw	r16,0(sp)
    af1c:	dec00504 	addi	sp,sp,20
    af20:	f800283a 	ret
    af24:	0081ffc4 	movi	r2,2047
    af28:	80bfd626 	beq	r16,r2,ae84 <__alt_data_end+0xfffc1aa4>
    af2c:	4a402034 	orhi	r9,r9,128
    af30:	00800e04 	movi	r2,56
    af34:	10c09f16 	blt	r2,r3,b1b4 <__adddf3+0x3ac>
    af38:	008007c4 	movi	r2,31
    af3c:	10c0c216 	blt	r2,r3,b248 <__adddf3+0x440>
    af40:	00800804 	movi	r2,32
    af44:	10c5c83a 	sub	r2,r2,r3
    af48:	488a983a 	sll	r5,r9,r2
    af4c:	30c8d83a 	srl	r4,r6,r3
    af50:	3084983a 	sll	r2,r6,r2
    af54:	48c6d83a 	srl	r3,r9,r3
    af58:	290cb03a 	or	r6,r5,r4
    af5c:	1004c03a 	cmpne	r2,r2,zero
    af60:	308cb03a 	or	r6,r6,r2
    af64:	898dc83a 	sub	r6,r17,r6
    af68:	89a3803a 	cmpltu	r17,r17,r6
    af6c:	40d1c83a 	sub	r8,r8,r3
    af70:	4451c83a 	sub	r8,r8,r17
    af74:	3023883a 	mov	r17,r6
    af78:	4080202c 	andhi	r2,r8,128
    af7c:	10002326 	beq	r2,zero,b00c <__adddf3+0x204>
    af80:	04c02034 	movhi	r19,128
    af84:	9cffffc4 	addi	r19,r19,-1
    af88:	44e6703a 	and	r19,r8,r19
    af8c:	98007626 	beq	r19,zero,b168 <__adddf3+0x360>
    af90:	9809883a 	mov	r4,r19
    af94:	000d6480 	call	d648 <__clzsi2>
    af98:	10fffe04 	addi	r3,r2,-8
    af9c:	010007c4 	movi	r4,31
    afa0:	20c07716 	blt	r4,r3,b180 <__adddf3+0x378>
    afa4:	00800804 	movi	r2,32
    afa8:	10c5c83a 	sub	r2,r2,r3
    afac:	8884d83a 	srl	r2,r17,r2
    afb0:	98d0983a 	sll	r8,r19,r3
    afb4:	88e2983a 	sll	r17,r17,r3
    afb8:	1204b03a 	or	r2,r2,r8
    afbc:	1c007416 	blt	r3,r16,b190 <__adddf3+0x388>
    afc0:	1c21c83a 	sub	r16,r3,r16
    afc4:	82000044 	addi	r8,r16,1
    afc8:	00c007c4 	movi	r3,31
    afcc:	1a009116 	blt	r3,r8,b214 <__adddf3+0x40c>
    afd0:	00c00804 	movi	r3,32
    afd4:	1a07c83a 	sub	r3,r3,r8
    afd8:	8a08d83a 	srl	r4,r17,r8
    afdc:	88e2983a 	sll	r17,r17,r3
    afe0:	10c6983a 	sll	r3,r2,r3
    afe4:	1210d83a 	srl	r8,r2,r8
    afe8:	8804c03a 	cmpne	r2,r17,zero
    afec:	1906b03a 	or	r3,r3,r4
    aff0:	18a2b03a 	or	r17,r3,r2
    aff4:	0021883a 	mov	r16,zero
    aff8:	003fa206 	br	ae84 <__alt_data_end+0xfffc1aa4>
    affc:	1890b03a 	or	r8,r3,r2
    b000:	40017d26 	beq	r8,zero,b5f8 <__adddf3+0x7f0>
    b004:	1011883a 	mov	r8,r2
    b008:	1823883a 	mov	r17,r3
    b00c:	888001cc 	andi	r2,r17,7
    b010:	103f9e1e 	bne	r2,zero,ae8c <__alt_data_end+0xfffc1aac>
    b014:	4004977a 	slli	r2,r8,29
    b018:	8822d0fa 	srli	r17,r17,3
    b01c:	4010d0fa 	srli	r8,r8,3
    b020:	9007883a 	mov	r3,r18
    b024:	1444b03a 	or	r2,r2,r17
    b028:	0101ffc4 	movi	r4,2047
    b02c:	81002426 	beq	r16,r4,b0c0 <__adddf3+0x2b8>
    b030:	8120703a 	and	r16,r16,r4
    b034:	01000434 	movhi	r4,16
    b038:	213fffc4 	addi	r4,r4,-1
    b03c:	4110703a 	and	r8,r8,r4
    b040:	003fa806 	br	aee4 <__alt_data_end+0xfffc1b04>
    b044:	8089c83a 	sub	r4,r16,r2
    b048:	01005e0e 	bge	zero,r4,b1c4 <__adddf3+0x3bc>
    b04c:	10002b26 	beq	r2,zero,b0fc <__adddf3+0x2f4>
    b050:	0081ffc4 	movi	r2,2047
    b054:	80bf8b26 	beq	r16,r2,ae84 <__alt_data_end+0xfffc1aa4>
    b058:	4a402034 	orhi	r9,r9,128
    b05c:	00800e04 	movi	r2,56
    b060:	1100a40e 	bge	r2,r4,b2f4 <__adddf3+0x4ec>
    b064:	498cb03a 	or	r6,r9,r6
    b068:	300ac03a 	cmpne	r5,r6,zero
    b06c:	0013883a 	mov	r9,zero
    b070:	2c4b883a 	add	r5,r5,r17
    b074:	2c63803a 	cmpltu	r17,r5,r17
    b078:	4a11883a 	add	r8,r9,r8
    b07c:	8a11883a 	add	r8,r17,r8
    b080:	2823883a 	mov	r17,r5
    b084:	4080202c 	andhi	r2,r8,128
    b088:	103fe026 	beq	r2,zero,b00c <__alt_data_end+0xfffc1c2c>
    b08c:	84000044 	addi	r16,r16,1
    b090:	0081ffc4 	movi	r2,2047
    b094:	8080d226 	beq	r16,r2,b3e0 <__adddf3+0x5d8>
    b098:	00bfe034 	movhi	r2,65408
    b09c:	10bfffc4 	addi	r2,r2,-1
    b0a0:	4090703a 	and	r8,r8,r2
    b0a4:	880ad07a 	srli	r5,r17,1
    b0a8:	400897fa 	slli	r4,r8,31
    b0ac:	88c0004c 	andi	r3,r17,1
    b0b0:	28e2b03a 	or	r17,r5,r3
    b0b4:	4010d07a 	srli	r8,r8,1
    b0b8:	2462b03a 	or	r17,r4,r17
    b0bc:	003f7106 	br	ae84 <__alt_data_end+0xfffc1aa4>
    b0c0:	4088b03a 	or	r4,r8,r2
    b0c4:	20014526 	beq	r4,zero,b5dc <__adddf3+0x7d4>
    b0c8:	01000434 	movhi	r4,16
    b0cc:	42000234 	orhi	r8,r8,8
    b0d0:	213fffc4 	addi	r4,r4,-1
    b0d4:	4110703a 	and	r8,r8,r4
    b0d8:	003f8206 	br	aee4 <__alt_data_end+0xfffc1b04>
    b0dc:	18ffffc4 	addi	r3,r3,-1
    b0e0:	1800491e 	bne	r3,zero,b208 <__adddf3+0x400>
    b0e4:	898bc83a 	sub	r5,r17,r6
    b0e8:	8963803a 	cmpltu	r17,r17,r5
    b0ec:	4251c83a 	sub	r8,r8,r9
    b0f0:	4451c83a 	sub	r8,r8,r17
    b0f4:	2823883a 	mov	r17,r5
    b0f8:	003f9f06 	br	af78 <__alt_data_end+0xfffc1b98>
    b0fc:	4984b03a 	or	r2,r9,r6
    b100:	103f6026 	beq	r2,zero,ae84 <__alt_data_end+0xfffc1aa4>
    b104:	213fffc4 	addi	r4,r4,-1
    b108:	2000931e 	bne	r4,zero,b358 <__adddf3+0x550>
    b10c:	898d883a 	add	r6,r17,r6
    b110:	3463803a 	cmpltu	r17,r6,r17
    b114:	4251883a 	add	r8,r8,r9
    b118:	8a11883a 	add	r8,r17,r8
    b11c:	3023883a 	mov	r17,r6
    b120:	003fd806 	br	b084 <__alt_data_end+0xfffc1ca4>
    b124:	1800541e 	bne	r3,zero,b278 <__adddf3+0x470>
    b128:	80800044 	addi	r2,r16,1
    b12c:	1081ffcc 	andi	r2,r2,2047
    b130:	00c00044 	movi	r3,1
    b134:	1880a00e 	bge	r3,r2,b3b8 <__adddf3+0x5b0>
    b138:	8989c83a 	sub	r4,r17,r6
    b13c:	8905803a 	cmpltu	r2,r17,r4
    b140:	4267c83a 	sub	r19,r8,r9
    b144:	98a7c83a 	sub	r19,r19,r2
    b148:	9880202c 	andhi	r2,r19,128
    b14c:	10006326 	beq	r2,zero,b2dc <__adddf3+0x4d4>
    b150:	3463c83a 	sub	r17,r6,r17
    b154:	4a07c83a 	sub	r3,r9,r8
    b158:	344d803a 	cmpltu	r6,r6,r17
    b15c:	19a7c83a 	sub	r19,r3,r6
    b160:	3825883a 	mov	r18,r7
    b164:	983f8a1e 	bne	r19,zero,af90 <__alt_data_end+0xfffc1bb0>
    b168:	8809883a 	mov	r4,r17
    b16c:	000d6480 	call	d648 <__clzsi2>
    b170:	10800804 	addi	r2,r2,32
    b174:	10fffe04 	addi	r3,r2,-8
    b178:	010007c4 	movi	r4,31
    b17c:	20ff890e 	bge	r4,r3,afa4 <__alt_data_end+0xfffc1bc4>
    b180:	10bff604 	addi	r2,r2,-40
    b184:	8884983a 	sll	r2,r17,r2
    b188:	0023883a 	mov	r17,zero
    b18c:	1c3f8c0e 	bge	r3,r16,afc0 <__alt_data_end+0xfffc1be0>
    b190:	023fe034 	movhi	r8,65408
    b194:	423fffc4 	addi	r8,r8,-1
    b198:	80e1c83a 	sub	r16,r16,r3
    b19c:	1210703a 	and	r8,r2,r8
    b1a0:	003f3806 	br	ae84 <__alt_data_end+0xfffc1aa4>
    b1a4:	9007883a 	mov	r3,r18
    b1a8:	0011883a 	mov	r8,zero
    b1ac:	0005883a 	mov	r2,zero
    b1b0:	003f4c06 	br	aee4 <__alt_data_end+0xfffc1b04>
    b1b4:	498cb03a 	or	r6,r9,r6
    b1b8:	300cc03a 	cmpne	r6,r6,zero
    b1bc:	0007883a 	mov	r3,zero
    b1c0:	003f6806 	br	af64 <__alt_data_end+0xfffc1b84>
    b1c4:	20009c1e 	bne	r4,zero,b438 <__adddf3+0x630>
    b1c8:	80800044 	addi	r2,r16,1
    b1cc:	1141ffcc 	andi	r5,r2,2047
    b1d0:	01000044 	movi	r4,1
    b1d4:	2140670e 	bge	r4,r5,b374 <__adddf3+0x56c>
    b1d8:	0101ffc4 	movi	r4,2047
    b1dc:	11007f26 	beq	r2,r4,b3dc <__adddf3+0x5d4>
    b1e0:	898d883a 	add	r6,r17,r6
    b1e4:	4247883a 	add	r3,r8,r9
    b1e8:	3451803a 	cmpltu	r8,r6,r17
    b1ec:	40d1883a 	add	r8,r8,r3
    b1f0:	402297fa 	slli	r17,r8,31
    b1f4:	300cd07a 	srli	r6,r6,1
    b1f8:	4010d07a 	srli	r8,r8,1
    b1fc:	1021883a 	mov	r16,r2
    b200:	89a2b03a 	or	r17,r17,r6
    b204:	003f1f06 	br	ae84 <__alt_data_end+0xfffc1aa4>
    b208:	0081ffc4 	movi	r2,2047
    b20c:	80bf481e 	bne	r16,r2,af30 <__alt_data_end+0xfffc1b50>
    b210:	003f1c06 	br	ae84 <__alt_data_end+0xfffc1aa4>
    b214:	843ff844 	addi	r16,r16,-31
    b218:	01000804 	movi	r4,32
    b21c:	1406d83a 	srl	r3,r2,r16
    b220:	41005026 	beq	r8,r4,b364 <__adddf3+0x55c>
    b224:	01001004 	movi	r4,64
    b228:	2211c83a 	sub	r8,r4,r8
    b22c:	1204983a 	sll	r2,r2,r8
    b230:	88a2b03a 	or	r17,r17,r2
    b234:	8822c03a 	cmpne	r17,r17,zero
    b238:	1c62b03a 	or	r17,r3,r17
    b23c:	0011883a 	mov	r8,zero
    b240:	0021883a 	mov	r16,zero
    b244:	003f7106 	br	b00c <__alt_data_end+0xfffc1c2c>
    b248:	193ff804 	addi	r4,r3,-32
    b24c:	00800804 	movi	r2,32
    b250:	4908d83a 	srl	r4,r9,r4
    b254:	18804526 	beq	r3,r2,b36c <__adddf3+0x564>
    b258:	00801004 	movi	r2,64
    b25c:	10c5c83a 	sub	r2,r2,r3
    b260:	4886983a 	sll	r3,r9,r2
    b264:	198cb03a 	or	r6,r3,r6
    b268:	300cc03a 	cmpne	r6,r6,zero
    b26c:	218cb03a 	or	r6,r4,r6
    b270:	0007883a 	mov	r3,zero
    b274:	003f3b06 	br	af64 <__alt_data_end+0xfffc1b84>
    b278:	80002a26 	beq	r16,zero,b324 <__adddf3+0x51c>
    b27c:	0101ffc4 	movi	r4,2047
    b280:	11006826 	beq	r2,r4,b424 <__adddf3+0x61c>
    b284:	00c7c83a 	sub	r3,zero,r3
    b288:	42002034 	orhi	r8,r8,128
    b28c:	01000e04 	movi	r4,56
    b290:	20c07c16 	blt	r4,r3,b484 <__adddf3+0x67c>
    b294:	010007c4 	movi	r4,31
    b298:	20c0da16 	blt	r4,r3,b604 <__adddf3+0x7fc>
    b29c:	01000804 	movi	r4,32
    b2a0:	20c9c83a 	sub	r4,r4,r3
    b2a4:	4114983a 	sll	r10,r8,r4
    b2a8:	88cad83a 	srl	r5,r17,r3
    b2ac:	8908983a 	sll	r4,r17,r4
    b2b0:	40c6d83a 	srl	r3,r8,r3
    b2b4:	5162b03a 	or	r17,r10,r5
    b2b8:	2008c03a 	cmpne	r4,r4,zero
    b2bc:	8922b03a 	or	r17,r17,r4
    b2c0:	3463c83a 	sub	r17,r6,r17
    b2c4:	48c7c83a 	sub	r3,r9,r3
    b2c8:	344d803a 	cmpltu	r6,r6,r17
    b2cc:	1991c83a 	sub	r8,r3,r6
    b2d0:	1021883a 	mov	r16,r2
    b2d4:	3825883a 	mov	r18,r7
    b2d8:	003f2706 	br	af78 <__alt_data_end+0xfffc1b98>
    b2dc:	24d0b03a 	or	r8,r4,r19
    b2e0:	40001b1e 	bne	r8,zero,b350 <__adddf3+0x548>
    b2e4:	0005883a 	mov	r2,zero
    b2e8:	0007883a 	mov	r3,zero
    b2ec:	0021883a 	mov	r16,zero
    b2f0:	003f4d06 	br	b028 <__alt_data_end+0xfffc1c48>
    b2f4:	008007c4 	movi	r2,31
    b2f8:	11003c16 	blt	r2,r4,b3ec <__adddf3+0x5e4>
    b2fc:	00800804 	movi	r2,32
    b300:	1105c83a 	sub	r2,r2,r4
    b304:	488e983a 	sll	r7,r9,r2
    b308:	310ad83a 	srl	r5,r6,r4
    b30c:	3084983a 	sll	r2,r6,r2
    b310:	4912d83a 	srl	r9,r9,r4
    b314:	394ab03a 	or	r5,r7,r5
    b318:	1004c03a 	cmpne	r2,r2,zero
    b31c:	288ab03a 	or	r5,r5,r2
    b320:	003f5306 	br	b070 <__alt_data_end+0xfffc1c90>
    b324:	4448b03a 	or	r4,r8,r17
    b328:	20003e26 	beq	r4,zero,b424 <__adddf3+0x61c>
    b32c:	00c6303a 	nor	r3,zero,r3
    b330:	18003a1e 	bne	r3,zero,b41c <__adddf3+0x614>
    b334:	3463c83a 	sub	r17,r6,r17
    b338:	4a07c83a 	sub	r3,r9,r8
    b33c:	344d803a 	cmpltu	r6,r6,r17
    b340:	1991c83a 	sub	r8,r3,r6
    b344:	1021883a 	mov	r16,r2
    b348:	3825883a 	mov	r18,r7
    b34c:	003f0a06 	br	af78 <__alt_data_end+0xfffc1b98>
    b350:	2023883a 	mov	r17,r4
    b354:	003f0d06 	br	af8c <__alt_data_end+0xfffc1bac>
    b358:	0081ffc4 	movi	r2,2047
    b35c:	80bf3f1e 	bne	r16,r2,b05c <__alt_data_end+0xfffc1c7c>
    b360:	003ec806 	br	ae84 <__alt_data_end+0xfffc1aa4>
    b364:	0005883a 	mov	r2,zero
    b368:	003fb106 	br	b230 <__alt_data_end+0xfffc1e50>
    b36c:	0007883a 	mov	r3,zero
    b370:	003fbc06 	br	b264 <__alt_data_end+0xfffc1e84>
    b374:	4444b03a 	or	r2,r8,r17
    b378:	8000871e 	bne	r16,zero,b598 <__adddf3+0x790>
    b37c:	1000ba26 	beq	r2,zero,b668 <__adddf3+0x860>
    b380:	4984b03a 	or	r2,r9,r6
    b384:	103ebf26 	beq	r2,zero,ae84 <__alt_data_end+0xfffc1aa4>
    b388:	8985883a 	add	r2,r17,r6
    b38c:	4247883a 	add	r3,r8,r9
    b390:	1451803a 	cmpltu	r8,r2,r17
    b394:	40d1883a 	add	r8,r8,r3
    b398:	40c0202c 	andhi	r3,r8,128
    b39c:	1023883a 	mov	r17,r2
    b3a0:	183f1a26 	beq	r3,zero,b00c <__alt_data_end+0xfffc1c2c>
    b3a4:	00bfe034 	movhi	r2,65408
    b3a8:	10bfffc4 	addi	r2,r2,-1
    b3ac:	2021883a 	mov	r16,r4
    b3b0:	4090703a 	and	r8,r8,r2
    b3b4:	003eb306 	br	ae84 <__alt_data_end+0xfffc1aa4>
    b3b8:	4444b03a 	or	r2,r8,r17
    b3bc:	8000291e 	bne	r16,zero,b464 <__adddf3+0x65c>
    b3c0:	10004b1e 	bne	r2,zero,b4f0 <__adddf3+0x6e8>
    b3c4:	4990b03a 	or	r8,r9,r6
    b3c8:	40008b26 	beq	r8,zero,b5f8 <__adddf3+0x7f0>
    b3cc:	4811883a 	mov	r8,r9
    b3d0:	3023883a 	mov	r17,r6
    b3d4:	3825883a 	mov	r18,r7
    b3d8:	003eaa06 	br	ae84 <__alt_data_end+0xfffc1aa4>
    b3dc:	1021883a 	mov	r16,r2
    b3e0:	0011883a 	mov	r8,zero
    b3e4:	0005883a 	mov	r2,zero
    b3e8:	003f0f06 	br	b028 <__alt_data_end+0xfffc1c48>
    b3ec:	217ff804 	addi	r5,r4,-32
    b3f0:	00800804 	movi	r2,32
    b3f4:	494ad83a 	srl	r5,r9,r5
    b3f8:	20807d26 	beq	r4,r2,b5f0 <__adddf3+0x7e8>
    b3fc:	00801004 	movi	r2,64
    b400:	1109c83a 	sub	r4,r2,r4
    b404:	4912983a 	sll	r9,r9,r4
    b408:	498cb03a 	or	r6,r9,r6
    b40c:	300cc03a 	cmpne	r6,r6,zero
    b410:	298ab03a 	or	r5,r5,r6
    b414:	0013883a 	mov	r9,zero
    b418:	003f1506 	br	b070 <__alt_data_end+0xfffc1c90>
    b41c:	0101ffc4 	movi	r4,2047
    b420:	113f9a1e 	bne	r2,r4,b28c <__alt_data_end+0xfffc1eac>
    b424:	4811883a 	mov	r8,r9
    b428:	3023883a 	mov	r17,r6
    b42c:	1021883a 	mov	r16,r2
    b430:	3825883a 	mov	r18,r7
    b434:	003e9306 	br	ae84 <__alt_data_end+0xfffc1aa4>
    b438:	8000161e 	bne	r16,zero,b494 <__adddf3+0x68c>
    b43c:	444ab03a 	or	r5,r8,r17
    b440:	28005126 	beq	r5,zero,b588 <__adddf3+0x780>
    b444:	0108303a 	nor	r4,zero,r4
    b448:	20004d1e 	bne	r4,zero,b580 <__adddf3+0x778>
    b44c:	89a3883a 	add	r17,r17,r6
    b450:	4253883a 	add	r9,r8,r9
    b454:	898d803a 	cmpltu	r6,r17,r6
    b458:	3251883a 	add	r8,r6,r9
    b45c:	1021883a 	mov	r16,r2
    b460:	003f0806 	br	b084 <__alt_data_end+0xfffc1ca4>
    b464:	1000301e 	bne	r2,zero,b528 <__adddf3+0x720>
    b468:	4984b03a 	or	r2,r9,r6
    b46c:	10007126 	beq	r2,zero,b634 <__adddf3+0x82c>
    b470:	4811883a 	mov	r8,r9
    b474:	3023883a 	mov	r17,r6
    b478:	3825883a 	mov	r18,r7
    b47c:	0401ffc4 	movi	r16,2047
    b480:	003e8006 	br	ae84 <__alt_data_end+0xfffc1aa4>
    b484:	4462b03a 	or	r17,r8,r17
    b488:	8822c03a 	cmpne	r17,r17,zero
    b48c:	0007883a 	mov	r3,zero
    b490:	003f8b06 	br	b2c0 <__alt_data_end+0xfffc1ee0>
    b494:	0141ffc4 	movi	r5,2047
    b498:	11403b26 	beq	r2,r5,b588 <__adddf3+0x780>
    b49c:	0109c83a 	sub	r4,zero,r4
    b4a0:	42002034 	orhi	r8,r8,128
    b4a4:	01400e04 	movi	r5,56
    b4a8:	29006716 	blt	r5,r4,b648 <__adddf3+0x840>
    b4ac:	014007c4 	movi	r5,31
    b4b0:	29007016 	blt	r5,r4,b674 <__adddf3+0x86c>
    b4b4:	01400804 	movi	r5,32
    b4b8:	290bc83a 	sub	r5,r5,r4
    b4bc:	4154983a 	sll	r10,r8,r5
    b4c0:	890ed83a 	srl	r7,r17,r4
    b4c4:	894a983a 	sll	r5,r17,r5
    b4c8:	4108d83a 	srl	r4,r8,r4
    b4cc:	51e2b03a 	or	r17,r10,r7
    b4d0:	280ac03a 	cmpne	r5,r5,zero
    b4d4:	8962b03a 	or	r17,r17,r5
    b4d8:	89a3883a 	add	r17,r17,r6
    b4dc:	2253883a 	add	r9,r4,r9
    b4e0:	898d803a 	cmpltu	r6,r17,r6
    b4e4:	3251883a 	add	r8,r6,r9
    b4e8:	1021883a 	mov	r16,r2
    b4ec:	003ee506 	br	b084 <__alt_data_end+0xfffc1ca4>
    b4f0:	4984b03a 	or	r2,r9,r6
    b4f4:	103e6326 	beq	r2,zero,ae84 <__alt_data_end+0xfffc1aa4>
    b4f8:	8987c83a 	sub	r3,r17,r6
    b4fc:	88c9803a 	cmpltu	r4,r17,r3
    b500:	4245c83a 	sub	r2,r8,r9
    b504:	1105c83a 	sub	r2,r2,r4
    b508:	1100202c 	andhi	r4,r2,128
    b50c:	203ebb26 	beq	r4,zero,affc <__alt_data_end+0xfffc1c1c>
    b510:	3463c83a 	sub	r17,r6,r17
    b514:	4a07c83a 	sub	r3,r9,r8
    b518:	344d803a 	cmpltu	r6,r6,r17
    b51c:	1991c83a 	sub	r8,r3,r6
    b520:	3825883a 	mov	r18,r7
    b524:	003e5706 	br	ae84 <__alt_data_end+0xfffc1aa4>
    b528:	4984b03a 	or	r2,r9,r6
    b52c:	10002e26 	beq	r2,zero,b5e8 <__adddf3+0x7e0>
    b530:	4004d0fa 	srli	r2,r8,3
    b534:	8822d0fa 	srli	r17,r17,3
    b538:	4010977a 	slli	r8,r8,29
    b53c:	10c0022c 	andhi	r3,r2,8
    b540:	4462b03a 	or	r17,r8,r17
    b544:	18000826 	beq	r3,zero,b568 <__adddf3+0x760>
    b548:	4808d0fa 	srli	r4,r9,3
    b54c:	20c0022c 	andhi	r3,r4,8
    b550:	1800051e 	bne	r3,zero,b568 <__adddf3+0x760>
    b554:	300cd0fa 	srli	r6,r6,3
    b558:	4806977a 	slli	r3,r9,29
    b55c:	2005883a 	mov	r2,r4
    b560:	3825883a 	mov	r18,r7
    b564:	19a2b03a 	or	r17,r3,r6
    b568:	8810d77a 	srli	r8,r17,29
    b56c:	100490fa 	slli	r2,r2,3
    b570:	882290fa 	slli	r17,r17,3
    b574:	0401ffc4 	movi	r16,2047
    b578:	4090b03a 	or	r8,r8,r2
    b57c:	003e4106 	br	ae84 <__alt_data_end+0xfffc1aa4>
    b580:	0141ffc4 	movi	r5,2047
    b584:	117fc71e 	bne	r2,r5,b4a4 <__alt_data_end+0xfffc20c4>
    b588:	4811883a 	mov	r8,r9
    b58c:	3023883a 	mov	r17,r6
    b590:	1021883a 	mov	r16,r2
    b594:	003e3b06 	br	ae84 <__alt_data_end+0xfffc1aa4>
    b598:	10002f26 	beq	r2,zero,b658 <__adddf3+0x850>
    b59c:	4984b03a 	or	r2,r9,r6
    b5a0:	10001126 	beq	r2,zero,b5e8 <__adddf3+0x7e0>
    b5a4:	4004d0fa 	srli	r2,r8,3
    b5a8:	8822d0fa 	srli	r17,r17,3
    b5ac:	4010977a 	slli	r8,r8,29
    b5b0:	10c0022c 	andhi	r3,r2,8
    b5b4:	4462b03a 	or	r17,r8,r17
    b5b8:	183feb26 	beq	r3,zero,b568 <__alt_data_end+0xfffc2188>
    b5bc:	4808d0fa 	srli	r4,r9,3
    b5c0:	20c0022c 	andhi	r3,r4,8
    b5c4:	183fe81e 	bne	r3,zero,b568 <__alt_data_end+0xfffc2188>
    b5c8:	300cd0fa 	srli	r6,r6,3
    b5cc:	4806977a 	slli	r3,r9,29
    b5d0:	2005883a 	mov	r2,r4
    b5d4:	19a2b03a 	or	r17,r3,r6
    b5d8:	003fe306 	br	b568 <__alt_data_end+0xfffc2188>
    b5dc:	0011883a 	mov	r8,zero
    b5e0:	0005883a 	mov	r2,zero
    b5e4:	003e3f06 	br	aee4 <__alt_data_end+0xfffc1b04>
    b5e8:	0401ffc4 	movi	r16,2047
    b5ec:	003e2506 	br	ae84 <__alt_data_end+0xfffc1aa4>
    b5f0:	0013883a 	mov	r9,zero
    b5f4:	003f8406 	br	b408 <__alt_data_end+0xfffc2028>
    b5f8:	0005883a 	mov	r2,zero
    b5fc:	0007883a 	mov	r3,zero
    b600:	003e8906 	br	b028 <__alt_data_end+0xfffc1c48>
    b604:	197ff804 	addi	r5,r3,-32
    b608:	01000804 	movi	r4,32
    b60c:	414ad83a 	srl	r5,r8,r5
    b610:	19002426 	beq	r3,r4,b6a4 <__adddf3+0x89c>
    b614:	01001004 	movi	r4,64
    b618:	20c7c83a 	sub	r3,r4,r3
    b61c:	40c6983a 	sll	r3,r8,r3
    b620:	1c46b03a 	or	r3,r3,r17
    b624:	1806c03a 	cmpne	r3,r3,zero
    b628:	28e2b03a 	or	r17,r5,r3
    b62c:	0007883a 	mov	r3,zero
    b630:	003f2306 	br	b2c0 <__alt_data_end+0xfffc1ee0>
    b634:	0007883a 	mov	r3,zero
    b638:	5811883a 	mov	r8,r11
    b63c:	00bfffc4 	movi	r2,-1
    b640:	0401ffc4 	movi	r16,2047
    b644:	003e7806 	br	b028 <__alt_data_end+0xfffc1c48>
    b648:	4462b03a 	or	r17,r8,r17
    b64c:	8822c03a 	cmpne	r17,r17,zero
    b650:	0009883a 	mov	r4,zero
    b654:	003fa006 	br	b4d8 <__alt_data_end+0xfffc20f8>
    b658:	4811883a 	mov	r8,r9
    b65c:	3023883a 	mov	r17,r6
    b660:	0401ffc4 	movi	r16,2047
    b664:	003e0706 	br	ae84 <__alt_data_end+0xfffc1aa4>
    b668:	4811883a 	mov	r8,r9
    b66c:	3023883a 	mov	r17,r6
    b670:	003e0406 	br	ae84 <__alt_data_end+0xfffc1aa4>
    b674:	21fff804 	addi	r7,r4,-32
    b678:	01400804 	movi	r5,32
    b67c:	41ced83a 	srl	r7,r8,r7
    b680:	21400a26 	beq	r4,r5,b6ac <__adddf3+0x8a4>
    b684:	01401004 	movi	r5,64
    b688:	2909c83a 	sub	r4,r5,r4
    b68c:	4108983a 	sll	r4,r8,r4
    b690:	2448b03a 	or	r4,r4,r17
    b694:	2008c03a 	cmpne	r4,r4,zero
    b698:	3922b03a 	or	r17,r7,r4
    b69c:	0009883a 	mov	r4,zero
    b6a0:	003f8d06 	br	b4d8 <__alt_data_end+0xfffc20f8>
    b6a4:	0007883a 	mov	r3,zero
    b6a8:	003fdd06 	br	b620 <__alt_data_end+0xfffc2240>
    b6ac:	0009883a 	mov	r4,zero
    b6b0:	003ff706 	br	b690 <__alt_data_end+0xfffc22b0>

0000b6b4 <__divdf3>:
    b6b4:	defff004 	addi	sp,sp,-64
    b6b8:	dc800815 	stw	r18,32(sp)
    b6bc:	2824d53a 	srli	r18,r5,20
    b6c0:	dd800c15 	stw	r22,48(sp)
    b6c4:	282cd7fa 	srli	r22,r5,31
    b6c8:	dc000615 	stw	r16,24(sp)
    b6cc:	04000434 	movhi	r16,16
    b6d0:	843fffc4 	addi	r16,r16,-1
    b6d4:	dfc00f15 	stw	ra,60(sp)
    b6d8:	df000e15 	stw	fp,56(sp)
    b6dc:	ddc00d15 	stw	r23,52(sp)
    b6e0:	dd400b15 	stw	r21,44(sp)
    b6e4:	dd000a15 	stw	r20,40(sp)
    b6e8:	dcc00915 	stw	r19,36(sp)
    b6ec:	dc400715 	stw	r17,28(sp)
    b6f0:	9481ffcc 	andi	r18,r18,2047
    b6f4:	2c20703a 	and	r16,r5,r16
    b6f8:	b2003fcc 	andi	r8,r22,255
    b6fc:	90006126 	beq	r18,zero,b884 <__divdf3+0x1d0>
    b700:	0081ffc4 	movi	r2,2047
    b704:	202b883a 	mov	r21,r4
    b708:	90803726 	beq	r18,r2,b7e8 <__divdf3+0x134>
    b70c:	80800434 	orhi	r2,r16,16
    b710:	100490fa 	slli	r2,r2,3
    b714:	2020d77a 	srli	r16,r4,29
    b718:	202a90fa 	slli	r21,r4,3
    b71c:	94bf0044 	addi	r18,r18,-1023
    b720:	80a0b03a 	or	r16,r16,r2
    b724:	0013883a 	mov	r9,zero
    b728:	000b883a 	mov	r5,zero
    b72c:	3806d53a 	srli	r3,r7,20
    b730:	382ed7fa 	srli	r23,r7,31
    b734:	04400434 	movhi	r17,16
    b738:	8c7fffc4 	addi	r17,r17,-1
    b73c:	18c1ffcc 	andi	r3,r3,2047
    b740:	3029883a 	mov	r20,r6
    b744:	3c62703a 	and	r17,r7,r17
    b748:	bf003fcc 	andi	fp,r23,255
    b74c:	18006e26 	beq	r3,zero,b908 <__divdf3+0x254>
    b750:	0081ffc4 	movi	r2,2047
    b754:	18806626 	beq	r3,r2,b8f0 <__divdf3+0x23c>
    b758:	88800434 	orhi	r2,r17,16
    b75c:	100490fa 	slli	r2,r2,3
    b760:	3022d77a 	srli	r17,r6,29
    b764:	302890fa 	slli	r20,r6,3
    b768:	18ff0044 	addi	r3,r3,-1023
    b76c:	88a2b03a 	or	r17,r17,r2
    b770:	000f883a 	mov	r7,zero
    b774:	b5e6f03a 	xor	r19,r22,r23
    b778:	3a4cb03a 	or	r6,r7,r9
    b77c:	008003c4 	movi	r2,15
    b780:	9809883a 	mov	r4,r19
    b784:	90c7c83a 	sub	r3,r18,r3
    b788:	9cc03fcc 	andi	r19,r19,255
    b78c:	11809636 	bltu	r2,r6,b9e8 <__divdf3+0x334>
    b790:	300c90ba 	slli	r6,r6,2
    b794:	00800074 	movhi	r2,1
    b798:	10adea04 	addi	r2,r2,-18520
    b79c:	308d883a 	add	r6,r6,r2
    b7a0:	30800017 	ldw	r2,0(r6)
    b7a4:	1000683a 	jmp	r2
    b7a8:	0000b9e8 	cmpgeui	zero,zero,743
    b7ac:	0000b820 	cmpeqi	zero,zero,736
    b7b0:	0000b9d8 	cmpnei	zero,zero,743
    b7b4:	0000b814 	movui	zero,736
    b7b8:	0000b9d8 	cmpnei	zero,zero,743
    b7bc:	0000b9ac 	andhi	zero,zero,742
    b7c0:	0000b9d8 	cmpnei	zero,zero,743
    b7c4:	0000b814 	movui	zero,736
    b7c8:	0000b820 	cmpeqi	zero,zero,736
    b7cc:	0000b820 	cmpeqi	zero,zero,736
    b7d0:	0000b9ac 	andhi	zero,zero,742
    b7d4:	0000b814 	movui	zero,736
    b7d8:	0000b804 	movi	zero,736
    b7dc:	0000b804 	movi	zero,736
    b7e0:	0000b804 	movi	zero,736
    b7e4:	0000bd70 	cmpltui	zero,zero,757
    b7e8:	2404b03a 	or	r2,r4,r16
    b7ec:	10006c1e 	bne	r2,zero,b9a0 <__divdf3+0x2ec>
    b7f0:	02400204 	movi	r9,8
    b7f4:	0021883a 	mov	r16,zero
    b7f8:	002b883a 	mov	r21,zero
    b7fc:	01400084 	movi	r5,2
    b800:	003fca06 	br	b72c <__alt_data_end+0xfffc234c>
    b804:	8023883a 	mov	r17,r16
    b808:	a829883a 	mov	r20,r21
    b80c:	4039883a 	mov	fp,r8
    b810:	280f883a 	mov	r7,r5
    b814:	00800084 	movi	r2,2
    b818:	3881601e 	bne	r7,r2,bd9c <__divdf3+0x6e8>
    b81c:	e027883a 	mov	r19,fp
    b820:	9900004c 	andi	r4,r19,1
    b824:	0081ffc4 	movi	r2,2047
    b828:	0021883a 	mov	r16,zero
    b82c:	002b883a 	mov	r21,zero
    b830:	1004953a 	slli	r2,r2,20
    b834:	20c03fcc 	andi	r3,r4,255
    b838:	01400434 	movhi	r5,16
    b83c:	297fffc4 	addi	r5,r5,-1
    b840:	180697fa 	slli	r3,r3,31
    b844:	8160703a 	and	r16,r16,r5
    b848:	80a0b03a 	or	r16,r16,r2
    b84c:	80c6b03a 	or	r3,r16,r3
    b850:	a805883a 	mov	r2,r21
    b854:	dfc00f17 	ldw	ra,60(sp)
    b858:	df000e17 	ldw	fp,56(sp)
    b85c:	ddc00d17 	ldw	r23,52(sp)
    b860:	dd800c17 	ldw	r22,48(sp)
    b864:	dd400b17 	ldw	r21,44(sp)
    b868:	dd000a17 	ldw	r20,40(sp)
    b86c:	dcc00917 	ldw	r19,36(sp)
    b870:	dc800817 	ldw	r18,32(sp)
    b874:	dc400717 	ldw	r17,28(sp)
    b878:	dc000617 	ldw	r16,24(sp)
    b87c:	dec01004 	addi	sp,sp,64
    b880:	f800283a 	ret
    b884:	2404b03a 	or	r2,r4,r16
    b888:	2023883a 	mov	r17,r4
    b88c:	10003f26 	beq	r2,zero,b98c <__divdf3+0x2d8>
    b890:	80015e26 	beq	r16,zero,be0c <__divdf3+0x758>
    b894:	8009883a 	mov	r4,r16
    b898:	d9800215 	stw	r6,8(sp)
    b89c:	d9c00515 	stw	r7,20(sp)
    b8a0:	da000415 	stw	r8,16(sp)
    b8a4:	000d6480 	call	d648 <__clzsi2>
    b8a8:	d9800217 	ldw	r6,8(sp)
    b8ac:	d9c00517 	ldw	r7,20(sp)
    b8b0:	da000417 	ldw	r8,16(sp)
    b8b4:	113ffd44 	addi	r4,r2,-11
    b8b8:	00c00704 	movi	r3,28
    b8bc:	19014f16 	blt	r3,r4,bdfc <__divdf3+0x748>
    b8c0:	00c00744 	movi	r3,29
    b8c4:	157ffe04 	addi	r21,r2,-8
    b8c8:	1907c83a 	sub	r3,r3,r4
    b8cc:	8560983a 	sll	r16,r16,r21
    b8d0:	88c6d83a 	srl	r3,r17,r3
    b8d4:	8d6a983a 	sll	r21,r17,r21
    b8d8:	1c20b03a 	or	r16,r3,r16
    b8dc:	1080fcc4 	addi	r2,r2,1011
    b8e0:	00a5c83a 	sub	r18,zero,r2
    b8e4:	0013883a 	mov	r9,zero
    b8e8:	000b883a 	mov	r5,zero
    b8ec:	003f8f06 	br	b72c <__alt_data_end+0xfffc234c>
    b8f0:	3444b03a 	or	r2,r6,r17
    b8f4:	1000231e 	bne	r2,zero,b984 <__divdf3+0x2d0>
    b8f8:	0023883a 	mov	r17,zero
    b8fc:	0029883a 	mov	r20,zero
    b900:	01c00084 	movi	r7,2
    b904:	003f9b06 	br	b774 <__alt_data_end+0xfffc2394>
    b908:	3444b03a 	or	r2,r6,r17
    b90c:	10001926 	beq	r2,zero,b974 <__divdf3+0x2c0>
    b910:	88014b26 	beq	r17,zero,be40 <__divdf3+0x78c>
    b914:	8809883a 	mov	r4,r17
    b918:	d9400115 	stw	r5,4(sp)
    b91c:	d9800215 	stw	r6,8(sp)
    b920:	da000415 	stw	r8,16(sp)
    b924:	da400315 	stw	r9,12(sp)
    b928:	000d6480 	call	d648 <__clzsi2>
    b92c:	d9400117 	ldw	r5,4(sp)
    b930:	d9800217 	ldw	r6,8(sp)
    b934:	da000417 	ldw	r8,16(sp)
    b938:	da400317 	ldw	r9,12(sp)
    b93c:	113ffd44 	addi	r4,r2,-11
    b940:	00c00704 	movi	r3,28
    b944:	19013a16 	blt	r3,r4,be30 <__divdf3+0x77c>
    b948:	00c00744 	movi	r3,29
    b94c:	153ffe04 	addi	r20,r2,-8
    b950:	1907c83a 	sub	r3,r3,r4
    b954:	8d22983a 	sll	r17,r17,r20
    b958:	30c6d83a 	srl	r3,r6,r3
    b95c:	3528983a 	sll	r20,r6,r20
    b960:	1c62b03a 	or	r17,r3,r17
    b964:	1080fcc4 	addi	r2,r2,1011
    b968:	0087c83a 	sub	r3,zero,r2
    b96c:	000f883a 	mov	r7,zero
    b970:	003f8006 	br	b774 <__alt_data_end+0xfffc2394>
    b974:	0023883a 	mov	r17,zero
    b978:	0029883a 	mov	r20,zero
    b97c:	01c00044 	movi	r7,1
    b980:	003f7c06 	br	b774 <__alt_data_end+0xfffc2394>
    b984:	01c000c4 	movi	r7,3
    b988:	003f7a06 	br	b774 <__alt_data_end+0xfffc2394>
    b98c:	02400104 	movi	r9,4
    b990:	0021883a 	mov	r16,zero
    b994:	002b883a 	mov	r21,zero
    b998:	01400044 	movi	r5,1
    b99c:	003f6306 	br	b72c <__alt_data_end+0xfffc234c>
    b9a0:	02400304 	movi	r9,12
    b9a4:	014000c4 	movi	r5,3
    b9a8:	003f6006 	br	b72c <__alt_data_end+0xfffc234c>
    b9ac:	04000434 	movhi	r16,16
    b9b0:	0009883a 	mov	r4,zero
    b9b4:	843fffc4 	addi	r16,r16,-1
    b9b8:	057fffc4 	movi	r21,-1
    b9bc:	0081ffc4 	movi	r2,2047
    b9c0:	003f9b06 	br	b830 <__alt_data_end+0xfffc2450>
    b9c4:	00c00044 	movi	r3,1
    b9c8:	1887c83a 	sub	r3,r3,r2
    b9cc:	01000e04 	movi	r4,56
    b9d0:	20c1530e 	bge	r4,r3,bf20 <__divdf3+0x86c>
    b9d4:	9900004c 	andi	r4,r19,1
    b9d8:	0005883a 	mov	r2,zero
    b9dc:	0021883a 	mov	r16,zero
    b9e0:	002b883a 	mov	r21,zero
    b9e4:	003f9206 	br	b830 <__alt_data_end+0xfffc2450>
    b9e8:	8c012e36 	bltu	r17,r16,bea4 <__divdf3+0x7f0>
    b9ec:	84412c26 	beq	r16,r17,bea0 <__divdf3+0x7ec>
    b9f0:	a82f883a 	mov	r23,r21
    b9f4:	18ffffc4 	addi	r3,r3,-1
    b9f8:	002b883a 	mov	r21,zero
    b9fc:	a004d63a 	srli	r2,r20,24
    ba00:	8822923a 	slli	r17,r17,8
    ba04:	a028923a 	slli	r20,r20,8
    ba08:	8009883a 	mov	r4,r16
    ba0c:	88acb03a 	or	r22,r17,r2
    ba10:	dd000015 	stw	r20,0(sp)
    ba14:	b028d43a 	srli	r20,r22,16
    ba18:	d8c00215 	stw	r3,8(sp)
    ba1c:	b4bfffcc 	andi	r18,r22,65535
    ba20:	a00b883a 	mov	r5,r20
    ba24:	000ad240 	call	ad24 <__udivsi3>
    ba28:	100b883a 	mov	r5,r2
    ba2c:	9009883a 	mov	r4,r18
    ba30:	1023883a 	mov	r17,r2
    ba34:	000ade00 	call	ade0 <__mulsi3>
    ba38:	8009883a 	mov	r4,r16
    ba3c:	a00b883a 	mov	r5,r20
    ba40:	1039883a 	mov	fp,r2
    ba44:	000ad880 	call	ad88 <__umodsi3>
    ba48:	1004943a 	slli	r2,r2,16
    ba4c:	b808d43a 	srli	r4,r23,16
    ba50:	d8c00217 	ldw	r3,8(sp)
    ba54:	2084b03a 	or	r2,r4,r2
    ba58:	1700062e 	bgeu	r2,fp,ba74 <__divdf3+0x3c0>
    ba5c:	1585883a 	add	r2,r2,r22
    ba60:	893fffc4 	addi	r4,r17,-1
    ba64:	15811d36 	bltu	r2,r22,bedc <__divdf3+0x828>
    ba68:	17011c2e 	bgeu	r2,fp,bedc <__divdf3+0x828>
    ba6c:	8c7fff84 	addi	r17,r17,-2
    ba70:	1585883a 	add	r2,r2,r22
    ba74:	1739c83a 	sub	fp,r2,fp
    ba78:	a00b883a 	mov	r5,r20
    ba7c:	e009883a 	mov	r4,fp
    ba80:	d8c00215 	stw	r3,8(sp)
    ba84:	000ad240 	call	ad24 <__udivsi3>
    ba88:	100b883a 	mov	r5,r2
    ba8c:	9009883a 	mov	r4,r18
    ba90:	1021883a 	mov	r16,r2
    ba94:	000ade00 	call	ade0 <__mulsi3>
    ba98:	a00b883a 	mov	r5,r20
    ba9c:	e009883a 	mov	r4,fp
    baa0:	d8800415 	stw	r2,16(sp)
    baa4:	000ad880 	call	ad88 <__umodsi3>
    baa8:	1004943a 	slli	r2,r2,16
    baac:	da000417 	ldw	r8,16(sp)
    bab0:	bdffffcc 	andi	r23,r23,65535
    bab4:	b884b03a 	or	r2,r23,r2
    bab8:	d8c00217 	ldw	r3,8(sp)
    babc:	1200062e 	bgeu	r2,r8,bad8 <__divdf3+0x424>
    bac0:	1585883a 	add	r2,r2,r22
    bac4:	813fffc4 	addi	r4,r16,-1
    bac8:	15810236 	bltu	r2,r22,bed4 <__divdf3+0x820>
    bacc:	1201012e 	bgeu	r2,r8,bed4 <__divdf3+0x820>
    bad0:	843fff84 	addi	r16,r16,-2
    bad4:	1585883a 	add	r2,r2,r22
    bad8:	8822943a 	slli	r17,r17,16
    badc:	d9800017 	ldw	r6,0(sp)
    bae0:	1211c83a 	sub	r8,r2,r8
    bae4:	8c22b03a 	or	r17,r17,r16
    bae8:	373fffcc 	andi	fp,r6,65535
    baec:	8abfffcc 	andi	r10,r17,65535
    baf0:	8820d43a 	srli	r16,r17,16
    baf4:	5009883a 	mov	r4,r10
    baf8:	e00b883a 	mov	r5,fp
    bafc:	302ed43a 	srli	r23,r6,16
    bb00:	d8c00215 	stw	r3,8(sp)
    bb04:	da000415 	stw	r8,16(sp)
    bb08:	da800115 	stw	r10,4(sp)
    bb0c:	000ade00 	call	ade0 <__mulsi3>
    bb10:	800b883a 	mov	r5,r16
    bb14:	e009883a 	mov	r4,fp
    bb18:	d8800515 	stw	r2,20(sp)
    bb1c:	000ade00 	call	ade0 <__mulsi3>
    bb20:	8009883a 	mov	r4,r16
    bb24:	b80b883a 	mov	r5,r23
    bb28:	d8800315 	stw	r2,12(sp)
    bb2c:	000ade00 	call	ade0 <__mulsi3>
    bb30:	da800117 	ldw	r10,4(sp)
    bb34:	b80b883a 	mov	r5,r23
    bb38:	1021883a 	mov	r16,r2
    bb3c:	5009883a 	mov	r4,r10
    bb40:	000ade00 	call	ade0 <__mulsi3>
    bb44:	d9c00517 	ldw	r7,20(sp)
    bb48:	da400317 	ldw	r9,12(sp)
    bb4c:	d8c00217 	ldw	r3,8(sp)
    bb50:	3808d43a 	srli	r4,r7,16
    bb54:	1245883a 	add	r2,r2,r9
    bb58:	da000417 	ldw	r8,16(sp)
    bb5c:	2085883a 	add	r2,r4,r2
    bb60:	1240022e 	bgeu	r2,r9,bb6c <__divdf3+0x4b8>
    bb64:	01000074 	movhi	r4,1
    bb68:	8121883a 	add	r16,r16,r4
    bb6c:	1008d43a 	srli	r4,r2,16
    bb70:	1004943a 	slli	r2,r2,16
    bb74:	39ffffcc 	andi	r7,r7,65535
    bb78:	2409883a 	add	r4,r4,r16
    bb7c:	11c5883a 	add	r2,r2,r7
    bb80:	4100bb36 	bltu	r8,r4,be70 <__divdf3+0x7bc>
    bb84:	4100d726 	beq	r8,r4,bee4 <__divdf3+0x830>
    bb88:	4109c83a 	sub	r4,r8,r4
    bb8c:	a8a1c83a 	sub	r16,r21,r2
    bb90:	ac2b803a 	cmpltu	r21,r21,r16
    bb94:	256bc83a 	sub	r21,r4,r21
    bb98:	b540d926 	beq	r22,r21,bf00 <__divdf3+0x84c>
    bb9c:	a00b883a 	mov	r5,r20
    bba0:	a809883a 	mov	r4,r21
    bba4:	d8c00215 	stw	r3,8(sp)
    bba8:	000ad240 	call	ad24 <__udivsi3>
    bbac:	100b883a 	mov	r5,r2
    bbb0:	9009883a 	mov	r4,r18
    bbb4:	d8800515 	stw	r2,20(sp)
    bbb8:	000ade00 	call	ade0 <__mulsi3>
    bbbc:	a809883a 	mov	r4,r21
    bbc0:	a00b883a 	mov	r5,r20
    bbc4:	d8800415 	stw	r2,16(sp)
    bbc8:	000ad880 	call	ad88 <__umodsi3>
    bbcc:	1004943a 	slli	r2,r2,16
    bbd0:	8008d43a 	srli	r4,r16,16
    bbd4:	da000417 	ldw	r8,16(sp)
    bbd8:	d8c00217 	ldw	r3,8(sp)
    bbdc:	2084b03a 	or	r2,r4,r2
    bbe0:	d9c00517 	ldw	r7,20(sp)
    bbe4:	1200062e 	bgeu	r2,r8,bc00 <__divdf3+0x54c>
    bbe8:	1585883a 	add	r2,r2,r22
    bbec:	393fffc4 	addi	r4,r7,-1
    bbf0:	1580c536 	bltu	r2,r22,bf08 <__divdf3+0x854>
    bbf4:	1200c42e 	bgeu	r2,r8,bf08 <__divdf3+0x854>
    bbf8:	39ffff84 	addi	r7,r7,-2
    bbfc:	1585883a 	add	r2,r2,r22
    bc00:	122bc83a 	sub	r21,r2,r8
    bc04:	a00b883a 	mov	r5,r20
    bc08:	a809883a 	mov	r4,r21
    bc0c:	d8c00215 	stw	r3,8(sp)
    bc10:	d9c00515 	stw	r7,20(sp)
    bc14:	000ad240 	call	ad24 <__udivsi3>
    bc18:	9009883a 	mov	r4,r18
    bc1c:	100b883a 	mov	r5,r2
    bc20:	d8800415 	stw	r2,16(sp)
    bc24:	000ade00 	call	ade0 <__mulsi3>
    bc28:	a809883a 	mov	r4,r21
    bc2c:	a00b883a 	mov	r5,r20
    bc30:	1025883a 	mov	r18,r2
    bc34:	000ad880 	call	ad88 <__umodsi3>
    bc38:	1004943a 	slli	r2,r2,16
    bc3c:	813fffcc 	andi	r4,r16,65535
    bc40:	d8c00217 	ldw	r3,8(sp)
    bc44:	20a0b03a 	or	r16,r4,r2
    bc48:	d9c00517 	ldw	r7,20(sp)
    bc4c:	da000417 	ldw	r8,16(sp)
    bc50:	8480062e 	bgeu	r16,r18,bc6c <__divdf3+0x5b8>
    bc54:	85a1883a 	add	r16,r16,r22
    bc58:	40bfffc4 	addi	r2,r8,-1
    bc5c:	8580ac36 	bltu	r16,r22,bf10 <__divdf3+0x85c>
    bc60:	8480ab2e 	bgeu	r16,r18,bf10 <__divdf3+0x85c>
    bc64:	423fff84 	addi	r8,r8,-2
    bc68:	85a1883a 	add	r16,r16,r22
    bc6c:	3804943a 	slli	r2,r7,16
    bc70:	84a1c83a 	sub	r16,r16,r18
    bc74:	e009883a 	mov	r4,fp
    bc78:	1228b03a 	or	r20,r2,r8
    bc7c:	a1ffffcc 	andi	r7,r20,65535
    bc80:	a024d43a 	srli	r18,r20,16
    bc84:	380b883a 	mov	r5,r7
    bc88:	d8c00215 	stw	r3,8(sp)
    bc8c:	d9c00515 	stw	r7,20(sp)
    bc90:	000ade00 	call	ade0 <__mulsi3>
    bc94:	900b883a 	mov	r5,r18
    bc98:	e009883a 	mov	r4,fp
    bc9c:	102b883a 	mov	r21,r2
    bca0:	000ade00 	call	ade0 <__mulsi3>
    bca4:	900b883a 	mov	r5,r18
    bca8:	b809883a 	mov	r4,r23
    bcac:	1039883a 	mov	fp,r2
    bcb0:	000ade00 	call	ade0 <__mulsi3>
    bcb4:	d9c00517 	ldw	r7,20(sp)
    bcb8:	b80b883a 	mov	r5,r23
    bcbc:	1025883a 	mov	r18,r2
    bcc0:	3809883a 	mov	r4,r7
    bcc4:	000ade00 	call	ade0 <__mulsi3>
    bcc8:	a808d43a 	srli	r4,r21,16
    bccc:	1705883a 	add	r2,r2,fp
    bcd0:	d8c00217 	ldw	r3,8(sp)
    bcd4:	2085883a 	add	r2,r4,r2
    bcd8:	1700022e 	bgeu	r2,fp,bce4 <__divdf3+0x630>
    bcdc:	01000074 	movhi	r4,1
    bce0:	9125883a 	add	r18,r18,r4
    bce4:	1008d43a 	srli	r4,r2,16
    bce8:	1004943a 	slli	r2,r2,16
    bcec:	ad7fffcc 	andi	r21,r21,65535
    bcf0:	2489883a 	add	r4,r4,r18
    bcf4:	1545883a 	add	r2,r2,r21
    bcf8:	81003836 	bltu	r16,r4,bddc <__divdf3+0x728>
    bcfc:	81003626 	beq	r16,r4,bdd8 <__divdf3+0x724>
    bd00:	a5000054 	ori	r20,r20,1
    bd04:	1880ffc4 	addi	r2,r3,1023
    bd08:	00bf2e0e 	bge	zero,r2,b9c4 <__alt_data_end+0xfffc25e4>
    bd0c:	a10001cc 	andi	r4,r20,7
    bd10:	20000726 	beq	r4,zero,bd30 <__divdf3+0x67c>
    bd14:	a10003cc 	andi	r4,r20,15
    bd18:	01400104 	movi	r5,4
    bd1c:	21400426 	beq	r4,r5,bd30 <__divdf3+0x67c>
    bd20:	a149883a 	add	r4,r20,r5
    bd24:	2529803a 	cmpltu	r20,r4,r20
    bd28:	8d23883a 	add	r17,r17,r20
    bd2c:	2029883a 	mov	r20,r4
    bd30:	8900402c 	andhi	r4,r17,256
    bd34:	20000426 	beq	r4,zero,bd48 <__divdf3+0x694>
    bd38:	18810004 	addi	r2,r3,1024
    bd3c:	00ffc034 	movhi	r3,65280
    bd40:	18ffffc4 	addi	r3,r3,-1
    bd44:	88e2703a 	and	r17,r17,r3
    bd48:	00c1ff84 	movi	r3,2046
    bd4c:	18beb416 	blt	r3,r2,b820 <__alt_data_end+0xfffc2440>
    bd50:	a028d0fa 	srli	r20,r20,3
    bd54:	882a977a 	slli	r21,r17,29
    bd58:	8820927a 	slli	r16,r17,9
    bd5c:	1081ffcc 	andi	r2,r2,2047
    bd60:	ad2ab03a 	or	r21,r21,r20
    bd64:	8020d33a 	srli	r16,r16,12
    bd68:	9900004c 	andi	r4,r19,1
    bd6c:	003eb006 	br	b830 <__alt_data_end+0xfffc2450>
    bd70:	8080022c 	andhi	r2,r16,8
    bd74:	10001226 	beq	r2,zero,bdc0 <__divdf3+0x70c>
    bd78:	8880022c 	andhi	r2,r17,8
    bd7c:	1000101e 	bne	r2,zero,bdc0 <__divdf3+0x70c>
    bd80:	00800434 	movhi	r2,16
    bd84:	8c000234 	orhi	r16,r17,8
    bd88:	10bfffc4 	addi	r2,r2,-1
    bd8c:	b809883a 	mov	r4,r23
    bd90:	80a0703a 	and	r16,r16,r2
    bd94:	a02b883a 	mov	r21,r20
    bd98:	003f0806 	br	b9bc <__alt_data_end+0xfffc25dc>
    bd9c:	008000c4 	movi	r2,3
    bda0:	3880b126 	beq	r7,r2,c068 <__divdf3+0x9b4>
    bda4:	00800044 	movi	r2,1
    bda8:	38805b1e 	bne	r7,r2,bf18 <__divdf3+0x864>
    bdac:	e009883a 	mov	r4,fp
    bdb0:	0005883a 	mov	r2,zero
    bdb4:	0021883a 	mov	r16,zero
    bdb8:	002b883a 	mov	r21,zero
    bdbc:	003e9c06 	br	b830 <__alt_data_end+0xfffc2450>
    bdc0:	00800434 	movhi	r2,16
    bdc4:	84000234 	orhi	r16,r16,8
    bdc8:	10bfffc4 	addi	r2,r2,-1
    bdcc:	b009883a 	mov	r4,r22
    bdd0:	80a0703a 	and	r16,r16,r2
    bdd4:	003ef906 	br	b9bc <__alt_data_end+0xfffc25dc>
    bdd8:	103fca26 	beq	r2,zero,bd04 <__alt_data_end+0xfffc2924>
    bddc:	b421883a 	add	r16,r22,r16
    bde0:	a17fffc4 	addi	r5,r20,-1
    bde4:	8580422e 	bgeu	r16,r22,bef0 <__divdf3+0x83c>
    bde8:	2829883a 	mov	r20,r5
    bdec:	813fc41e 	bne	r16,r4,bd00 <__alt_data_end+0xfffc2920>
    bdf0:	d9800017 	ldw	r6,0(sp)
    bdf4:	30bfc21e 	bne	r6,r2,bd00 <__alt_data_end+0xfffc2920>
    bdf8:	003fc206 	br	bd04 <__alt_data_end+0xfffc2924>
    bdfc:	143ff604 	addi	r16,r2,-40
    be00:	8c20983a 	sll	r16,r17,r16
    be04:	002b883a 	mov	r21,zero
    be08:	003eb406 	br	b8dc <__alt_data_end+0xfffc24fc>
    be0c:	d9800215 	stw	r6,8(sp)
    be10:	d9c00515 	stw	r7,20(sp)
    be14:	da000415 	stw	r8,16(sp)
    be18:	000d6480 	call	d648 <__clzsi2>
    be1c:	10800804 	addi	r2,r2,32
    be20:	da000417 	ldw	r8,16(sp)
    be24:	d9c00517 	ldw	r7,20(sp)
    be28:	d9800217 	ldw	r6,8(sp)
    be2c:	003ea106 	br	b8b4 <__alt_data_end+0xfffc24d4>
    be30:	147ff604 	addi	r17,r2,-40
    be34:	3462983a 	sll	r17,r6,r17
    be38:	0029883a 	mov	r20,zero
    be3c:	003ec906 	br	b964 <__alt_data_end+0xfffc2584>
    be40:	3009883a 	mov	r4,r6
    be44:	d9400115 	stw	r5,4(sp)
    be48:	d9800215 	stw	r6,8(sp)
    be4c:	da000415 	stw	r8,16(sp)
    be50:	da400315 	stw	r9,12(sp)
    be54:	000d6480 	call	d648 <__clzsi2>
    be58:	10800804 	addi	r2,r2,32
    be5c:	da400317 	ldw	r9,12(sp)
    be60:	da000417 	ldw	r8,16(sp)
    be64:	d9800217 	ldw	r6,8(sp)
    be68:	d9400117 	ldw	r5,4(sp)
    be6c:	003eb306 	br	b93c <__alt_data_end+0xfffc255c>
    be70:	d9800017 	ldw	r6,0(sp)
    be74:	a9ab883a 	add	r21,r21,r6
    be78:	a98b803a 	cmpltu	r5,r21,r6
    be7c:	2d8b883a 	add	r5,r5,r22
    be80:	2a11883a 	add	r8,r5,r8
    be84:	897fffc4 	addi	r5,r17,-1
    be88:	b2000c2e 	bgeu	r22,r8,bebc <__divdf3+0x808>
    be8c:	41003f36 	bltu	r8,r4,bf8c <__divdf3+0x8d8>
    be90:	22006c26 	beq	r4,r8,c044 <__divdf3+0x990>
    be94:	4109c83a 	sub	r4,r8,r4
    be98:	2823883a 	mov	r17,r5
    be9c:	003f3b06 	br	bb8c <__alt_data_end+0xfffc27ac>
    bea0:	ad3ed336 	bltu	r21,r20,b9f0 <__alt_data_end+0xfffc2610>
    bea4:	a804d07a 	srli	r2,r21,1
    bea8:	802e97fa 	slli	r23,r16,31
    beac:	a82a97fa 	slli	r21,r21,31
    beb0:	8020d07a 	srli	r16,r16,1
    beb4:	b8aeb03a 	or	r23,r23,r2
    beb8:	003ed006 	br	b9fc <__alt_data_end+0xfffc261c>
    bebc:	b23ff51e 	bne	r22,r8,be94 <__alt_data_end+0xfffc2ab4>
    bec0:	d9800017 	ldw	r6,0(sp)
    bec4:	a9bff12e 	bgeu	r21,r6,be8c <__alt_data_end+0xfffc2aac>
    bec8:	b109c83a 	sub	r4,r22,r4
    becc:	2823883a 	mov	r17,r5
    bed0:	003f2e06 	br	bb8c <__alt_data_end+0xfffc27ac>
    bed4:	2021883a 	mov	r16,r4
    bed8:	003eff06 	br	bad8 <__alt_data_end+0xfffc26f8>
    bedc:	2023883a 	mov	r17,r4
    bee0:	003ee406 	br	ba74 <__alt_data_end+0xfffc2694>
    bee4:	a8bfe236 	bltu	r21,r2,be70 <__alt_data_end+0xfffc2a90>
    bee8:	0009883a 	mov	r4,zero
    beec:	003f2706 	br	bb8c <__alt_data_end+0xfffc27ac>
    bef0:	81002d36 	bltu	r16,r4,bfa8 <__divdf3+0x8f4>
    bef4:	24005626 	beq	r4,r16,c050 <__divdf3+0x99c>
    bef8:	2829883a 	mov	r20,r5
    befc:	003f8006 	br	bd00 <__alt_data_end+0xfffc2920>
    bf00:	053fffc4 	movi	r20,-1
    bf04:	003f7f06 	br	bd04 <__alt_data_end+0xfffc2924>
    bf08:	200f883a 	mov	r7,r4
    bf0c:	003f3c06 	br	bc00 <__alt_data_end+0xfffc2820>
    bf10:	1011883a 	mov	r8,r2
    bf14:	003f5506 	br	bc6c <__alt_data_end+0xfffc288c>
    bf18:	e027883a 	mov	r19,fp
    bf1c:	003f7906 	br	bd04 <__alt_data_end+0xfffc2924>
    bf20:	010007c4 	movi	r4,31
    bf24:	20c02816 	blt	r4,r3,bfc8 <__divdf3+0x914>
    bf28:	00800804 	movi	r2,32
    bf2c:	10c5c83a 	sub	r2,r2,r3
    bf30:	888a983a 	sll	r5,r17,r2
    bf34:	a0c8d83a 	srl	r4,r20,r3
    bf38:	a084983a 	sll	r2,r20,r2
    bf3c:	88e2d83a 	srl	r17,r17,r3
    bf40:	2906b03a 	or	r3,r5,r4
    bf44:	1004c03a 	cmpne	r2,r2,zero
    bf48:	1886b03a 	or	r3,r3,r2
    bf4c:	188001cc 	andi	r2,r3,7
    bf50:	10000726 	beq	r2,zero,bf70 <__divdf3+0x8bc>
    bf54:	188003cc 	andi	r2,r3,15
    bf58:	01000104 	movi	r4,4
    bf5c:	11000426 	beq	r2,r4,bf70 <__divdf3+0x8bc>
    bf60:	1805883a 	mov	r2,r3
    bf64:	10c00104 	addi	r3,r2,4
    bf68:	1885803a 	cmpltu	r2,r3,r2
    bf6c:	88a3883a 	add	r17,r17,r2
    bf70:	8880202c 	andhi	r2,r17,128
    bf74:	10002926 	beq	r2,zero,c01c <__divdf3+0x968>
    bf78:	9900004c 	andi	r4,r19,1
    bf7c:	00800044 	movi	r2,1
    bf80:	0021883a 	mov	r16,zero
    bf84:	002b883a 	mov	r21,zero
    bf88:	003e2906 	br	b830 <__alt_data_end+0xfffc2450>
    bf8c:	d9800017 	ldw	r6,0(sp)
    bf90:	8c7fff84 	addi	r17,r17,-2
    bf94:	a9ab883a 	add	r21,r21,r6
    bf98:	a98b803a 	cmpltu	r5,r21,r6
    bf9c:	2d8b883a 	add	r5,r5,r22
    bfa0:	2a11883a 	add	r8,r5,r8
    bfa4:	003ef806 	br	bb88 <__alt_data_end+0xfffc27a8>
    bfa8:	d9800017 	ldw	r6,0(sp)
    bfac:	318f883a 	add	r7,r6,r6
    bfb0:	398b803a 	cmpltu	r5,r7,r6
    bfb4:	2d8d883a 	add	r6,r5,r22
    bfb8:	81a1883a 	add	r16,r16,r6
    bfbc:	a17fff84 	addi	r5,r20,-2
    bfc0:	d9c00015 	stw	r7,0(sp)
    bfc4:	003f8806 	br	bde8 <__alt_data_end+0xfffc2a08>
    bfc8:	013ff844 	movi	r4,-31
    bfcc:	2085c83a 	sub	r2,r4,r2
    bfd0:	8888d83a 	srl	r4,r17,r2
    bfd4:	00800804 	movi	r2,32
    bfd8:	18802126 	beq	r3,r2,c060 <__divdf3+0x9ac>
    bfdc:	04001004 	movi	r16,64
    bfe0:	80c7c83a 	sub	r3,r16,r3
    bfe4:	88e0983a 	sll	r16,r17,r3
    bfe8:	8504b03a 	or	r2,r16,r20
    bfec:	1004c03a 	cmpne	r2,r2,zero
    bff0:	2084b03a 	or	r2,r4,r2
    bff4:	144001cc 	andi	r17,r2,7
    bff8:	88000d1e 	bne	r17,zero,c030 <__divdf3+0x97c>
    bffc:	0021883a 	mov	r16,zero
    c000:	102ad0fa 	srli	r21,r2,3
    c004:	9900004c 	andi	r4,r19,1
    c008:	0005883a 	mov	r2,zero
    c00c:	ac6ab03a 	or	r21,r21,r17
    c010:	003e0706 	br	b830 <__alt_data_end+0xfffc2450>
    c014:	1007883a 	mov	r3,r2
    c018:	0023883a 	mov	r17,zero
    c01c:	8820927a 	slli	r16,r17,9
    c020:	1805883a 	mov	r2,r3
    c024:	8822977a 	slli	r17,r17,29
    c028:	8020d33a 	srli	r16,r16,12
    c02c:	003ff406 	br	c000 <__alt_data_end+0xfffc2c20>
    c030:	10c003cc 	andi	r3,r2,15
    c034:	01000104 	movi	r4,4
    c038:	193ff626 	beq	r3,r4,c014 <__alt_data_end+0xfffc2c34>
    c03c:	0023883a 	mov	r17,zero
    c040:	003fc806 	br	bf64 <__alt_data_end+0xfffc2b84>
    c044:	a8bfd136 	bltu	r21,r2,bf8c <__alt_data_end+0xfffc2bac>
    c048:	2823883a 	mov	r17,r5
    c04c:	003fa606 	br	bee8 <__alt_data_end+0xfffc2b08>
    c050:	d9800017 	ldw	r6,0(sp)
    c054:	30bfd436 	bltu	r6,r2,bfa8 <__alt_data_end+0xfffc2bc8>
    c058:	2829883a 	mov	r20,r5
    c05c:	003f6406 	br	bdf0 <__alt_data_end+0xfffc2a10>
    c060:	0021883a 	mov	r16,zero
    c064:	003fe006 	br	bfe8 <__alt_data_end+0xfffc2c08>
    c068:	00800434 	movhi	r2,16
    c06c:	8c000234 	orhi	r16,r17,8
    c070:	10bfffc4 	addi	r2,r2,-1
    c074:	e009883a 	mov	r4,fp
    c078:	80a0703a 	and	r16,r16,r2
    c07c:	a02b883a 	mov	r21,r20
    c080:	003e4e06 	br	b9bc <__alt_data_end+0xfffc25dc>

0000c084 <__eqdf2>:
    c084:	2804d53a 	srli	r2,r5,20
    c088:	3806d53a 	srli	r3,r7,20
    c08c:	02000434 	movhi	r8,16
    c090:	423fffc4 	addi	r8,r8,-1
    c094:	1081ffcc 	andi	r2,r2,2047
    c098:	0281ffc4 	movi	r10,2047
    c09c:	2a12703a 	and	r9,r5,r8
    c0a0:	18c1ffcc 	andi	r3,r3,2047
    c0a4:	3a10703a 	and	r8,r7,r8
    c0a8:	280ad7fa 	srli	r5,r5,31
    c0ac:	380ed7fa 	srli	r7,r7,31
    c0b0:	12801026 	beq	r2,r10,c0f4 <__eqdf2+0x70>
    c0b4:	0281ffc4 	movi	r10,2047
    c0b8:	1a800a26 	beq	r3,r10,c0e4 <__eqdf2+0x60>
    c0bc:	10c00226 	beq	r2,r3,c0c8 <__eqdf2+0x44>
    c0c0:	00800044 	movi	r2,1
    c0c4:	f800283a 	ret
    c0c8:	4a3ffd1e 	bne	r9,r8,c0c0 <__alt_data_end+0xfffc2ce0>
    c0cc:	21bffc1e 	bne	r4,r6,c0c0 <__alt_data_end+0xfffc2ce0>
    c0d0:	29c00c26 	beq	r5,r7,c104 <__eqdf2+0x80>
    c0d4:	103ffa1e 	bne	r2,zero,c0c0 <__alt_data_end+0xfffc2ce0>
    c0d8:	2244b03a 	or	r2,r4,r9
    c0dc:	1004c03a 	cmpne	r2,r2,zero
    c0e0:	f800283a 	ret
    c0e4:	3214b03a 	or	r10,r6,r8
    c0e8:	503ff426 	beq	r10,zero,c0bc <__alt_data_end+0xfffc2cdc>
    c0ec:	00800044 	movi	r2,1
    c0f0:	f800283a 	ret
    c0f4:	2254b03a 	or	r10,r4,r9
    c0f8:	503fee26 	beq	r10,zero,c0b4 <__alt_data_end+0xfffc2cd4>
    c0fc:	00800044 	movi	r2,1
    c100:	f800283a 	ret
    c104:	0005883a 	mov	r2,zero
    c108:	f800283a 	ret

0000c10c <__gedf2>:
    c10c:	2804d53a 	srli	r2,r5,20
    c110:	3806d53a 	srli	r3,r7,20
    c114:	02000434 	movhi	r8,16
    c118:	423fffc4 	addi	r8,r8,-1
    c11c:	1081ffcc 	andi	r2,r2,2047
    c120:	0241ffc4 	movi	r9,2047
    c124:	2a14703a 	and	r10,r5,r8
    c128:	18c1ffcc 	andi	r3,r3,2047
    c12c:	3a10703a 	and	r8,r7,r8
    c130:	280ad7fa 	srli	r5,r5,31
    c134:	380ed7fa 	srli	r7,r7,31
    c138:	12401d26 	beq	r2,r9,c1b0 <__gedf2+0xa4>
    c13c:	0241ffc4 	movi	r9,2047
    c140:	1a401226 	beq	r3,r9,c18c <__gedf2+0x80>
    c144:	1000081e 	bne	r2,zero,c168 <__gedf2+0x5c>
    c148:	2296b03a 	or	r11,r4,r10
    c14c:	5813003a 	cmpeq	r9,r11,zero
    c150:	1800091e 	bne	r3,zero,c178 <__gedf2+0x6c>
    c154:	3218b03a 	or	r12,r6,r8
    c158:	6000071e 	bne	r12,zero,c178 <__gedf2+0x6c>
    c15c:	0005883a 	mov	r2,zero
    c160:	5800101e 	bne	r11,zero,c1a4 <__gedf2+0x98>
    c164:	f800283a 	ret
    c168:	18000c1e 	bne	r3,zero,c19c <__gedf2+0x90>
    c16c:	3212b03a 	or	r9,r6,r8
    c170:	48000c26 	beq	r9,zero,c1a4 <__gedf2+0x98>
    c174:	0013883a 	mov	r9,zero
    c178:	39c03fcc 	andi	r7,r7,255
    c17c:	48000826 	beq	r9,zero,c1a0 <__gedf2+0x94>
    c180:	38000926 	beq	r7,zero,c1a8 <__gedf2+0x9c>
    c184:	00800044 	movi	r2,1
    c188:	f800283a 	ret
    c18c:	3212b03a 	or	r9,r6,r8
    c190:	483fec26 	beq	r9,zero,c144 <__alt_data_end+0xfffc2d64>
    c194:	00bfff84 	movi	r2,-2
    c198:	f800283a 	ret
    c19c:	39c03fcc 	andi	r7,r7,255
    c1a0:	29c00626 	beq	r5,r7,c1bc <__gedf2+0xb0>
    c1a4:	283ff726 	beq	r5,zero,c184 <__alt_data_end+0xfffc2da4>
    c1a8:	00bfffc4 	movi	r2,-1
    c1ac:	f800283a 	ret
    c1b0:	2292b03a 	or	r9,r4,r10
    c1b4:	483fe126 	beq	r9,zero,c13c <__alt_data_end+0xfffc2d5c>
    c1b8:	003ff606 	br	c194 <__alt_data_end+0xfffc2db4>
    c1bc:	18bff916 	blt	r3,r2,c1a4 <__alt_data_end+0xfffc2dc4>
    c1c0:	10c00316 	blt	r2,r3,c1d0 <__gedf2+0xc4>
    c1c4:	42bff736 	bltu	r8,r10,c1a4 <__alt_data_end+0xfffc2dc4>
    c1c8:	52000326 	beq	r10,r8,c1d8 <__gedf2+0xcc>
    c1cc:	5200042e 	bgeu	r10,r8,c1e0 <__gedf2+0xd4>
    c1d0:	283fec1e 	bne	r5,zero,c184 <__alt_data_end+0xfffc2da4>
    c1d4:	003ff406 	br	c1a8 <__alt_data_end+0xfffc2dc8>
    c1d8:	313ff236 	bltu	r6,r4,c1a4 <__alt_data_end+0xfffc2dc4>
    c1dc:	21bffc36 	bltu	r4,r6,c1d0 <__alt_data_end+0xfffc2df0>
    c1e0:	0005883a 	mov	r2,zero
    c1e4:	f800283a 	ret

0000c1e8 <__ledf2>:
    c1e8:	2804d53a 	srli	r2,r5,20
    c1ec:	3810d53a 	srli	r8,r7,20
    c1f0:	00c00434 	movhi	r3,16
    c1f4:	18ffffc4 	addi	r3,r3,-1
    c1f8:	1081ffcc 	andi	r2,r2,2047
    c1fc:	0241ffc4 	movi	r9,2047
    c200:	28d4703a 	and	r10,r5,r3
    c204:	4201ffcc 	andi	r8,r8,2047
    c208:	38c6703a 	and	r3,r7,r3
    c20c:	280ad7fa 	srli	r5,r5,31
    c210:	380ed7fa 	srli	r7,r7,31
    c214:	12401f26 	beq	r2,r9,c294 <__ledf2+0xac>
    c218:	0241ffc4 	movi	r9,2047
    c21c:	42401426 	beq	r8,r9,c270 <__ledf2+0x88>
    c220:	1000091e 	bne	r2,zero,c248 <__ledf2+0x60>
    c224:	2296b03a 	or	r11,r4,r10
    c228:	5813003a 	cmpeq	r9,r11,zero
    c22c:	29403fcc 	andi	r5,r5,255
    c230:	40000a1e 	bne	r8,zero,c25c <__ledf2+0x74>
    c234:	30d8b03a 	or	r12,r6,r3
    c238:	6000081e 	bne	r12,zero,c25c <__ledf2+0x74>
    c23c:	0005883a 	mov	r2,zero
    c240:	5800111e 	bne	r11,zero,c288 <__ledf2+0xa0>
    c244:	f800283a 	ret
    c248:	29403fcc 	andi	r5,r5,255
    c24c:	40000c1e 	bne	r8,zero,c280 <__ledf2+0x98>
    c250:	30d2b03a 	or	r9,r6,r3
    c254:	48000c26 	beq	r9,zero,c288 <__ledf2+0xa0>
    c258:	0013883a 	mov	r9,zero
    c25c:	39c03fcc 	andi	r7,r7,255
    c260:	48000826 	beq	r9,zero,c284 <__ledf2+0x9c>
    c264:	38001126 	beq	r7,zero,c2ac <__ledf2+0xc4>
    c268:	00800044 	movi	r2,1
    c26c:	f800283a 	ret
    c270:	30d2b03a 	or	r9,r6,r3
    c274:	483fea26 	beq	r9,zero,c220 <__alt_data_end+0xfffc2e40>
    c278:	00800084 	movi	r2,2
    c27c:	f800283a 	ret
    c280:	39c03fcc 	andi	r7,r7,255
    c284:	39400726 	beq	r7,r5,c2a4 <__ledf2+0xbc>
    c288:	2800081e 	bne	r5,zero,c2ac <__ledf2+0xc4>
    c28c:	00800044 	movi	r2,1
    c290:	f800283a 	ret
    c294:	2292b03a 	or	r9,r4,r10
    c298:	483fdf26 	beq	r9,zero,c218 <__alt_data_end+0xfffc2e38>
    c29c:	00800084 	movi	r2,2
    c2a0:	f800283a 	ret
    c2a4:	4080030e 	bge	r8,r2,c2b4 <__ledf2+0xcc>
    c2a8:	383fef26 	beq	r7,zero,c268 <__alt_data_end+0xfffc2e88>
    c2ac:	00bfffc4 	movi	r2,-1
    c2b0:	f800283a 	ret
    c2b4:	123feb16 	blt	r2,r8,c264 <__alt_data_end+0xfffc2e84>
    c2b8:	1abff336 	bltu	r3,r10,c288 <__alt_data_end+0xfffc2ea8>
    c2bc:	50c00326 	beq	r10,r3,c2cc <__ledf2+0xe4>
    c2c0:	50c0042e 	bgeu	r10,r3,c2d4 <__ledf2+0xec>
    c2c4:	283fe81e 	bne	r5,zero,c268 <__alt_data_end+0xfffc2e88>
    c2c8:	003ff806 	br	c2ac <__alt_data_end+0xfffc2ecc>
    c2cc:	313fee36 	bltu	r6,r4,c288 <__alt_data_end+0xfffc2ea8>
    c2d0:	21bffc36 	bltu	r4,r6,c2c4 <__alt_data_end+0xfffc2ee4>
    c2d4:	0005883a 	mov	r2,zero
    c2d8:	f800283a 	ret

0000c2dc <__muldf3>:
    c2dc:	deffee04 	addi	sp,sp,-72
    c2e0:	dd000c15 	stw	r20,48(sp)
    c2e4:	2828d53a 	srli	r20,r5,20
    c2e8:	ddc00f15 	stw	r23,60(sp)
    c2ec:	282ed7fa 	srli	r23,r5,31
    c2f0:	dc000815 	stw	r16,32(sp)
    c2f4:	04000434 	movhi	r16,16
    c2f8:	dcc00b15 	stw	r19,44(sp)
    c2fc:	843fffc4 	addi	r16,r16,-1
    c300:	dfc01115 	stw	ra,68(sp)
    c304:	df001015 	stw	fp,64(sp)
    c308:	dd800e15 	stw	r22,56(sp)
    c30c:	dd400d15 	stw	r21,52(sp)
    c310:	dc800a15 	stw	r18,40(sp)
    c314:	dc400915 	stw	r17,36(sp)
    c318:	a501ffcc 	andi	r20,r20,2047
    c31c:	2c20703a 	and	r16,r5,r16
    c320:	b827883a 	mov	r19,r23
    c324:	ba403fcc 	andi	r9,r23,255
    c328:	a0006026 	beq	r20,zero,c4ac <__muldf3+0x1d0>
    c32c:	0081ffc4 	movi	r2,2047
    c330:	202d883a 	mov	r22,r4
    c334:	a0803626 	beq	r20,r2,c410 <__muldf3+0x134>
    c338:	84000434 	orhi	r16,r16,16
    c33c:	200ad77a 	srli	r5,r4,29
    c340:	800490fa 	slli	r2,r16,3
    c344:	202c90fa 	slli	r22,r4,3
    c348:	a53f0044 	addi	r20,r20,-1023
    c34c:	28a0b03a 	or	r16,r5,r2
    c350:	002b883a 	mov	r21,zero
    c354:	000b883a 	mov	r5,zero
    c358:	3804d53a 	srli	r2,r7,20
    c35c:	3838d7fa 	srli	fp,r7,31
    c360:	04400434 	movhi	r17,16
    c364:	8c7fffc4 	addi	r17,r17,-1
    c368:	1081ffcc 	andi	r2,r2,2047
    c36c:	3025883a 	mov	r18,r6
    c370:	3c62703a 	and	r17,r7,r17
    c374:	e2803fcc 	andi	r10,fp,255
    c378:	10006d26 	beq	r2,zero,c530 <__muldf3+0x254>
    c37c:	00c1ffc4 	movi	r3,2047
    c380:	10c06526 	beq	r2,r3,c518 <__muldf3+0x23c>
    c384:	8c400434 	orhi	r17,r17,16
    c388:	300ed77a 	srli	r7,r6,29
    c38c:	880690fa 	slli	r3,r17,3
    c390:	302490fa 	slli	r18,r6,3
    c394:	10bf0044 	addi	r2,r2,-1023
    c398:	38e2b03a 	or	r17,r7,r3
    c39c:	000f883a 	mov	r7,zero
    c3a0:	a087883a 	add	r3,r20,r2
    c3a4:	010003c4 	movi	r4,15
    c3a8:	3d44b03a 	or	r2,r7,r21
    c3ac:	e5ccf03a 	xor	r6,fp,r23
    c3b0:	1a000044 	addi	r8,r3,1
    c3b4:	20809b36 	bltu	r4,r2,c624 <__muldf3+0x348>
    c3b8:	100490ba 	slli	r2,r2,2
    c3bc:	01000074 	movhi	r4,1
    c3c0:	2130f404 	addi	r4,r4,-15408
    c3c4:	1105883a 	add	r2,r2,r4
    c3c8:	10800017 	ldw	r2,0(r2)
    c3cc:	1000683a 	jmp	r2
    c3d0:	0000c624 	muli	zero,zero,792
    c3d4:	0000c430 	cmpltui	zero,zero,784
    c3d8:	0000c430 	cmpltui	zero,zero,784
    c3dc:	0000c42c 	andhi	zero,zero,784
    c3e0:	0000c600 	call	c60 <___vfprintf_internal_r+0x484>
    c3e4:	0000c600 	call	c60 <___vfprintf_internal_r+0x484>
    c3e8:	0000c5e8 	cmpgeui	zero,zero,791
    c3ec:	0000c42c 	andhi	zero,zero,784
    c3f0:	0000c600 	call	c60 <___vfprintf_internal_r+0x484>
    c3f4:	0000c5e8 	cmpgeui	zero,zero,791
    c3f8:	0000c600 	call	c60 <___vfprintf_internal_r+0x484>
    c3fc:	0000c42c 	andhi	zero,zero,784
    c400:	0000c610 	cmplti	zero,zero,792
    c404:	0000c610 	cmplti	zero,zero,792
    c408:	0000c610 	cmplti	zero,zero,792
    c40c:	0000c970 	cmpltui	zero,zero,805
    c410:	2404b03a 	or	r2,r4,r16
    c414:	1000711e 	bne	r2,zero,c5dc <__muldf3+0x300>
    c418:	05400204 	movi	r21,8
    c41c:	0021883a 	mov	r16,zero
    c420:	002d883a 	mov	r22,zero
    c424:	01400084 	movi	r5,2
    c428:	003fcb06 	br	c358 <__alt_data_end+0xfffc2f78>
    c42c:	500d883a 	mov	r6,r10
    c430:	00800084 	movi	r2,2
    c434:	38805926 	beq	r7,r2,c59c <__muldf3+0x2c0>
    c438:	008000c4 	movi	r2,3
    c43c:	3881bb26 	beq	r7,r2,cb2c <__muldf3+0x850>
    c440:	00800044 	movi	r2,1
    c444:	3881961e 	bne	r7,r2,caa0 <__muldf3+0x7c4>
    c448:	3027883a 	mov	r19,r6
    c44c:	0005883a 	mov	r2,zero
    c450:	0021883a 	mov	r16,zero
    c454:	002d883a 	mov	r22,zero
    c458:	1004953a 	slli	r2,r2,20
    c45c:	98c03fcc 	andi	r3,r19,255
    c460:	04400434 	movhi	r17,16
    c464:	8c7fffc4 	addi	r17,r17,-1
    c468:	180697fa 	slli	r3,r3,31
    c46c:	8460703a 	and	r16,r16,r17
    c470:	80a0b03a 	or	r16,r16,r2
    c474:	80c6b03a 	or	r3,r16,r3
    c478:	b005883a 	mov	r2,r22
    c47c:	dfc01117 	ldw	ra,68(sp)
    c480:	df001017 	ldw	fp,64(sp)
    c484:	ddc00f17 	ldw	r23,60(sp)
    c488:	dd800e17 	ldw	r22,56(sp)
    c48c:	dd400d17 	ldw	r21,52(sp)
    c490:	dd000c17 	ldw	r20,48(sp)
    c494:	dcc00b17 	ldw	r19,44(sp)
    c498:	dc800a17 	ldw	r18,40(sp)
    c49c:	dc400917 	ldw	r17,36(sp)
    c4a0:	dc000817 	ldw	r16,32(sp)
    c4a4:	dec01204 	addi	sp,sp,72
    c4a8:	f800283a 	ret
    c4ac:	2404b03a 	or	r2,r4,r16
    c4b0:	202b883a 	mov	r21,r4
    c4b4:	10004426 	beq	r2,zero,c5c8 <__muldf3+0x2ec>
    c4b8:	80015126 	beq	r16,zero,ca00 <__muldf3+0x724>
    c4bc:	8009883a 	mov	r4,r16
    c4c0:	d9800715 	stw	r6,28(sp)
    c4c4:	d9c00215 	stw	r7,8(sp)
    c4c8:	da400415 	stw	r9,16(sp)
    c4cc:	000d6480 	call	d648 <__clzsi2>
    c4d0:	d9800717 	ldw	r6,28(sp)
    c4d4:	d9c00217 	ldw	r7,8(sp)
    c4d8:	da400417 	ldw	r9,16(sp)
    c4dc:	113ffd44 	addi	r4,r2,-11
    c4e0:	00c00704 	movi	r3,28
    c4e4:	19014216 	blt	r3,r4,c9f0 <__muldf3+0x714>
    c4e8:	00c00744 	movi	r3,29
    c4ec:	15bffe04 	addi	r22,r2,-8
    c4f0:	1907c83a 	sub	r3,r3,r4
    c4f4:	85a0983a 	sll	r16,r16,r22
    c4f8:	a8c6d83a 	srl	r3,r21,r3
    c4fc:	adac983a 	sll	r22,r21,r22
    c500:	1c20b03a 	or	r16,r3,r16
    c504:	1080fcc4 	addi	r2,r2,1011
    c508:	00a9c83a 	sub	r20,zero,r2
    c50c:	002b883a 	mov	r21,zero
    c510:	000b883a 	mov	r5,zero
    c514:	003f9006 	br	c358 <__alt_data_end+0xfffc2f78>
    c518:	3446b03a 	or	r3,r6,r17
    c51c:	1800281e 	bne	r3,zero,c5c0 <__muldf3+0x2e4>
    c520:	0023883a 	mov	r17,zero
    c524:	0025883a 	mov	r18,zero
    c528:	01c00084 	movi	r7,2
    c52c:	003f9c06 	br	c3a0 <__alt_data_end+0xfffc2fc0>
    c530:	3446b03a 	or	r3,r6,r17
    c534:	18001e26 	beq	r3,zero,c5b0 <__muldf3+0x2d4>
    c538:	88012126 	beq	r17,zero,c9c0 <__muldf3+0x6e4>
    c53c:	8809883a 	mov	r4,r17
    c540:	d9400215 	stw	r5,8(sp)
    c544:	d9800715 	stw	r6,28(sp)
    c548:	da400415 	stw	r9,16(sp)
    c54c:	da800315 	stw	r10,12(sp)
    c550:	000d6480 	call	d648 <__clzsi2>
    c554:	d9400217 	ldw	r5,8(sp)
    c558:	d9800717 	ldw	r6,28(sp)
    c55c:	da400417 	ldw	r9,16(sp)
    c560:	da800317 	ldw	r10,12(sp)
    c564:	113ffd44 	addi	r4,r2,-11
    c568:	00c00704 	movi	r3,28
    c56c:	19011016 	blt	r3,r4,c9b0 <__muldf3+0x6d4>
    c570:	00c00744 	movi	r3,29
    c574:	14bffe04 	addi	r18,r2,-8
    c578:	1907c83a 	sub	r3,r3,r4
    c57c:	8ca2983a 	sll	r17,r17,r18
    c580:	30c6d83a 	srl	r3,r6,r3
    c584:	34a4983a 	sll	r18,r6,r18
    c588:	1c62b03a 	or	r17,r3,r17
    c58c:	1080fcc4 	addi	r2,r2,1011
    c590:	0085c83a 	sub	r2,zero,r2
    c594:	000f883a 	mov	r7,zero
    c598:	003f8106 	br	c3a0 <__alt_data_end+0xfffc2fc0>
    c59c:	3027883a 	mov	r19,r6
    c5a0:	0081ffc4 	movi	r2,2047
    c5a4:	0021883a 	mov	r16,zero
    c5a8:	002d883a 	mov	r22,zero
    c5ac:	003faa06 	br	c458 <__alt_data_end+0xfffc3078>
    c5b0:	0023883a 	mov	r17,zero
    c5b4:	0025883a 	mov	r18,zero
    c5b8:	01c00044 	movi	r7,1
    c5bc:	003f7806 	br	c3a0 <__alt_data_end+0xfffc2fc0>
    c5c0:	01c000c4 	movi	r7,3
    c5c4:	003f7606 	br	c3a0 <__alt_data_end+0xfffc2fc0>
    c5c8:	05400104 	movi	r21,4
    c5cc:	0021883a 	mov	r16,zero
    c5d0:	002d883a 	mov	r22,zero
    c5d4:	01400044 	movi	r5,1
    c5d8:	003f5f06 	br	c358 <__alt_data_end+0xfffc2f78>
    c5dc:	05400304 	movi	r21,12
    c5e0:	014000c4 	movi	r5,3
    c5e4:	003f5c06 	br	c358 <__alt_data_end+0xfffc2f78>
    c5e8:	04000434 	movhi	r16,16
    c5ec:	0027883a 	mov	r19,zero
    c5f0:	843fffc4 	addi	r16,r16,-1
    c5f4:	05bfffc4 	movi	r22,-1
    c5f8:	0081ffc4 	movi	r2,2047
    c5fc:	003f9606 	br	c458 <__alt_data_end+0xfffc3078>
    c600:	8023883a 	mov	r17,r16
    c604:	b025883a 	mov	r18,r22
    c608:	280f883a 	mov	r7,r5
    c60c:	003f8806 	br	c430 <__alt_data_end+0xfffc3050>
    c610:	8023883a 	mov	r17,r16
    c614:	b025883a 	mov	r18,r22
    c618:	480d883a 	mov	r6,r9
    c61c:	280f883a 	mov	r7,r5
    c620:	003f8306 	br	c430 <__alt_data_end+0xfffc3050>
    c624:	b026d43a 	srli	r19,r22,16
    c628:	902ed43a 	srli	r23,r18,16
    c62c:	b5bfffcc 	andi	r22,r22,65535
    c630:	94bfffcc 	andi	r18,r18,65535
    c634:	b00b883a 	mov	r5,r22
    c638:	9009883a 	mov	r4,r18
    c63c:	d8c00515 	stw	r3,20(sp)
    c640:	d9800715 	stw	r6,28(sp)
    c644:	da000615 	stw	r8,24(sp)
    c648:	000ade00 	call	ade0 <__mulsi3>
    c64c:	980b883a 	mov	r5,r19
    c650:	9009883a 	mov	r4,r18
    c654:	1029883a 	mov	r20,r2
    c658:	000ade00 	call	ade0 <__mulsi3>
    c65c:	b80b883a 	mov	r5,r23
    c660:	9809883a 	mov	r4,r19
    c664:	102b883a 	mov	r21,r2
    c668:	000ade00 	call	ade0 <__mulsi3>
    c66c:	b809883a 	mov	r4,r23
    c670:	b00b883a 	mov	r5,r22
    c674:	1039883a 	mov	fp,r2
    c678:	000ade00 	call	ade0 <__mulsi3>
    c67c:	a008d43a 	srli	r4,r20,16
    c680:	1545883a 	add	r2,r2,r21
    c684:	d8c00517 	ldw	r3,20(sp)
    c688:	2085883a 	add	r2,r4,r2
    c68c:	d9800717 	ldw	r6,28(sp)
    c690:	da000617 	ldw	r8,24(sp)
    c694:	1540022e 	bgeu	r2,r21,c6a0 <__muldf3+0x3c4>
    c698:	01000074 	movhi	r4,1
    c69c:	e139883a 	add	fp,fp,r4
    c6a0:	100e943a 	slli	r7,r2,16
    c6a4:	1004d43a 	srli	r2,r2,16
    c6a8:	882ad43a 	srli	r21,r17,16
    c6ac:	a53fffcc 	andi	r20,r20,65535
    c6b0:	8c7fffcc 	andi	r17,r17,65535
    c6b4:	3d29883a 	add	r20,r7,r20
    c6b8:	b00b883a 	mov	r5,r22
    c6bc:	8809883a 	mov	r4,r17
    c6c0:	d8c00515 	stw	r3,20(sp)
    c6c4:	d9800715 	stw	r6,28(sp)
    c6c8:	da000615 	stw	r8,24(sp)
    c6cc:	dd000115 	stw	r20,4(sp)
    c6d0:	d8800015 	stw	r2,0(sp)
    c6d4:	000ade00 	call	ade0 <__mulsi3>
    c6d8:	980b883a 	mov	r5,r19
    c6dc:	8809883a 	mov	r4,r17
    c6e0:	d8800215 	stw	r2,8(sp)
    c6e4:	000ade00 	call	ade0 <__mulsi3>
    c6e8:	9809883a 	mov	r4,r19
    c6ec:	a80b883a 	mov	r5,r21
    c6f0:	1029883a 	mov	r20,r2
    c6f4:	000ade00 	call	ade0 <__mulsi3>
    c6f8:	b00b883a 	mov	r5,r22
    c6fc:	a809883a 	mov	r4,r21
    c700:	d8800415 	stw	r2,16(sp)
    c704:	000ade00 	call	ade0 <__mulsi3>
    c708:	d9c00217 	ldw	r7,8(sp)
    c70c:	1505883a 	add	r2,r2,r20
    c710:	d8c00517 	ldw	r3,20(sp)
    c714:	3826d43a 	srli	r19,r7,16
    c718:	d9800717 	ldw	r6,28(sp)
    c71c:	da000617 	ldw	r8,24(sp)
    c720:	9885883a 	add	r2,r19,r2
    c724:	da400417 	ldw	r9,16(sp)
    c728:	1500022e 	bgeu	r2,r20,c734 <__muldf3+0x458>
    c72c:	01000074 	movhi	r4,1
    c730:	4913883a 	add	r9,r9,r4
    c734:	1028d43a 	srli	r20,r2,16
    c738:	1004943a 	slli	r2,r2,16
    c73c:	802cd43a 	srli	r22,r16,16
    c740:	843fffcc 	andi	r16,r16,65535
    c744:	3cffffcc 	andi	r19,r7,65535
    c748:	9009883a 	mov	r4,r18
    c74c:	800b883a 	mov	r5,r16
    c750:	a269883a 	add	r20,r20,r9
    c754:	d8c00515 	stw	r3,20(sp)
    c758:	d9800715 	stw	r6,28(sp)
    c75c:	da000615 	stw	r8,24(sp)
    c760:	14e7883a 	add	r19,r2,r19
    c764:	000ade00 	call	ade0 <__mulsi3>
    c768:	9009883a 	mov	r4,r18
    c76c:	b00b883a 	mov	r5,r22
    c770:	d8800315 	stw	r2,12(sp)
    c774:	000ade00 	call	ade0 <__mulsi3>
    c778:	b809883a 	mov	r4,r23
    c77c:	b00b883a 	mov	r5,r22
    c780:	d8800215 	stw	r2,8(sp)
    c784:	000ade00 	call	ade0 <__mulsi3>
    c788:	b80b883a 	mov	r5,r23
    c78c:	8009883a 	mov	r4,r16
    c790:	d8800415 	stw	r2,16(sp)
    c794:	000ade00 	call	ade0 <__mulsi3>
    c798:	da800317 	ldw	r10,12(sp)
    c79c:	d9c00217 	ldw	r7,8(sp)
    c7a0:	d9000017 	ldw	r4,0(sp)
    c7a4:	502ed43a 	srli	r23,r10,16
    c7a8:	11c5883a 	add	r2,r2,r7
    c7ac:	24e5883a 	add	r18,r4,r19
    c7b0:	b885883a 	add	r2,r23,r2
    c7b4:	d8c00517 	ldw	r3,20(sp)
    c7b8:	d9800717 	ldw	r6,28(sp)
    c7bc:	da000617 	ldw	r8,24(sp)
    c7c0:	da400417 	ldw	r9,16(sp)
    c7c4:	11c0022e 	bgeu	r2,r7,c7d0 <__muldf3+0x4f4>
    c7c8:	01000074 	movhi	r4,1
    c7cc:	4913883a 	add	r9,r9,r4
    c7d0:	100ed43a 	srli	r7,r2,16
    c7d4:	1004943a 	slli	r2,r2,16
    c7d8:	55ffffcc 	andi	r23,r10,65535
    c7dc:	3a53883a 	add	r9,r7,r9
    c7e0:	8809883a 	mov	r4,r17
    c7e4:	800b883a 	mov	r5,r16
    c7e8:	d8c00515 	stw	r3,20(sp)
    c7ec:	d9800715 	stw	r6,28(sp)
    c7f0:	da000615 	stw	r8,24(sp)
    c7f4:	da400415 	stw	r9,16(sp)
    c7f8:	15ef883a 	add	r23,r2,r23
    c7fc:	000ade00 	call	ade0 <__mulsi3>
    c800:	8809883a 	mov	r4,r17
    c804:	b00b883a 	mov	r5,r22
    c808:	d8800215 	stw	r2,8(sp)
    c80c:	000ade00 	call	ade0 <__mulsi3>
    c810:	b00b883a 	mov	r5,r22
    c814:	a809883a 	mov	r4,r21
    c818:	d8800315 	stw	r2,12(sp)
    c81c:	000ade00 	call	ade0 <__mulsi3>
    c820:	8009883a 	mov	r4,r16
    c824:	a80b883a 	mov	r5,r21
    c828:	1023883a 	mov	r17,r2
    c82c:	000ade00 	call	ade0 <__mulsi3>
    c830:	d9c00217 	ldw	r7,8(sp)
    c834:	da800317 	ldw	r10,12(sp)
    c838:	d8c00517 	ldw	r3,20(sp)
    c83c:	3808d43a 	srli	r4,r7,16
    c840:	1285883a 	add	r2,r2,r10
    c844:	d9800717 	ldw	r6,28(sp)
    c848:	2085883a 	add	r2,r4,r2
    c84c:	da000617 	ldw	r8,24(sp)
    c850:	da400417 	ldw	r9,16(sp)
    c854:	1280022e 	bgeu	r2,r10,c860 <__muldf3+0x584>
    c858:	01000074 	movhi	r4,1
    c85c:	8923883a 	add	r17,r17,r4
    c860:	1008943a 	slli	r4,r2,16
    c864:	39ffffcc 	andi	r7,r7,65535
    c868:	e4b9883a 	add	fp,fp,r18
    c86c:	21cf883a 	add	r7,r4,r7
    c870:	e4e7803a 	cmpltu	r19,fp,r19
    c874:	3d0f883a 	add	r7,r7,r20
    c878:	bf39883a 	add	fp,r23,fp
    c87c:	99c9883a 	add	r4,r19,r7
    c880:	e5ef803a 	cmpltu	r23,fp,r23
    c884:	490b883a 	add	r5,r9,r4
    c888:	1004d43a 	srli	r2,r2,16
    c88c:	b965883a 	add	r18,r23,r5
    c890:	24c9803a 	cmpltu	r4,r4,r19
    c894:	3d29803a 	cmpltu	r20,r7,r20
    c898:	a128b03a 	or	r20,r20,r4
    c89c:	95ef803a 	cmpltu	r23,r18,r23
    c8a0:	2a53803a 	cmpltu	r9,r5,r9
    c8a4:	a0a9883a 	add	r20,r20,r2
    c8a8:	4deeb03a 	or	r23,r9,r23
    c8ac:	a5ef883a 	add	r23,r20,r23
    c8b0:	bc63883a 	add	r17,r23,r17
    c8b4:	e004927a 	slli	r2,fp,9
    c8b8:	d9000117 	ldw	r4,4(sp)
    c8bc:	882e927a 	slli	r23,r17,9
    c8c0:	9022d5fa 	srli	r17,r18,23
    c8c4:	e038d5fa 	srli	fp,fp,23
    c8c8:	1104b03a 	or	r2,r2,r4
    c8cc:	9024927a 	slli	r18,r18,9
    c8d0:	1004c03a 	cmpne	r2,r2,zero
    c8d4:	bc62b03a 	or	r17,r23,r17
    c8d8:	1738b03a 	or	fp,r2,fp
    c8dc:	8880402c 	andhi	r2,r17,256
    c8e0:	e4a4b03a 	or	r18,fp,r18
    c8e4:	10000726 	beq	r2,zero,c904 <__muldf3+0x628>
    c8e8:	9006d07a 	srli	r3,r18,1
    c8ec:	880497fa 	slli	r2,r17,31
    c8f0:	9480004c 	andi	r18,r18,1
    c8f4:	8822d07a 	srli	r17,r17,1
    c8f8:	1ca4b03a 	or	r18,r3,r18
    c8fc:	14a4b03a 	or	r18,r2,r18
    c900:	4007883a 	mov	r3,r8
    c904:	1880ffc4 	addi	r2,r3,1023
    c908:	0080460e 	bge	zero,r2,ca24 <__muldf3+0x748>
    c90c:	910001cc 	andi	r4,r18,7
    c910:	20000726 	beq	r4,zero,c930 <__muldf3+0x654>
    c914:	910003cc 	andi	r4,r18,15
    c918:	01400104 	movi	r5,4
    c91c:	21400426 	beq	r4,r5,c930 <__muldf3+0x654>
    c920:	9149883a 	add	r4,r18,r5
    c924:	24a5803a 	cmpltu	r18,r4,r18
    c928:	8ca3883a 	add	r17,r17,r18
    c92c:	2025883a 	mov	r18,r4
    c930:	8900402c 	andhi	r4,r17,256
    c934:	20000426 	beq	r4,zero,c948 <__muldf3+0x66c>
    c938:	18810004 	addi	r2,r3,1024
    c93c:	00ffc034 	movhi	r3,65280
    c940:	18ffffc4 	addi	r3,r3,-1
    c944:	88e2703a 	and	r17,r17,r3
    c948:	00c1ff84 	movi	r3,2046
    c94c:	18bf1316 	blt	r3,r2,c59c <__alt_data_end+0xfffc31bc>
    c950:	882c977a 	slli	r22,r17,29
    c954:	9024d0fa 	srli	r18,r18,3
    c958:	8822927a 	slli	r17,r17,9
    c95c:	1081ffcc 	andi	r2,r2,2047
    c960:	b4acb03a 	or	r22,r22,r18
    c964:	8820d33a 	srli	r16,r17,12
    c968:	3027883a 	mov	r19,r6
    c96c:	003eba06 	br	c458 <__alt_data_end+0xfffc3078>
    c970:	8080022c 	andhi	r2,r16,8
    c974:	10000926 	beq	r2,zero,c99c <__muldf3+0x6c0>
    c978:	8880022c 	andhi	r2,r17,8
    c97c:	1000071e 	bne	r2,zero,c99c <__muldf3+0x6c0>
    c980:	00800434 	movhi	r2,16
    c984:	8c000234 	orhi	r16,r17,8
    c988:	10bfffc4 	addi	r2,r2,-1
    c98c:	e027883a 	mov	r19,fp
    c990:	80a0703a 	and	r16,r16,r2
    c994:	902d883a 	mov	r22,r18
    c998:	003f1706 	br	c5f8 <__alt_data_end+0xfffc3218>
    c99c:	00800434 	movhi	r2,16
    c9a0:	84000234 	orhi	r16,r16,8
    c9a4:	10bfffc4 	addi	r2,r2,-1
    c9a8:	80a0703a 	and	r16,r16,r2
    c9ac:	003f1206 	br	c5f8 <__alt_data_end+0xfffc3218>
    c9b0:	147ff604 	addi	r17,r2,-40
    c9b4:	3462983a 	sll	r17,r6,r17
    c9b8:	0025883a 	mov	r18,zero
    c9bc:	003ef306 	br	c58c <__alt_data_end+0xfffc31ac>
    c9c0:	3009883a 	mov	r4,r6
    c9c4:	d9400215 	stw	r5,8(sp)
    c9c8:	d9800715 	stw	r6,28(sp)
    c9cc:	da400415 	stw	r9,16(sp)
    c9d0:	da800315 	stw	r10,12(sp)
    c9d4:	000d6480 	call	d648 <__clzsi2>
    c9d8:	10800804 	addi	r2,r2,32
    c9dc:	da800317 	ldw	r10,12(sp)
    c9e0:	da400417 	ldw	r9,16(sp)
    c9e4:	d9800717 	ldw	r6,28(sp)
    c9e8:	d9400217 	ldw	r5,8(sp)
    c9ec:	003edd06 	br	c564 <__alt_data_end+0xfffc3184>
    c9f0:	143ff604 	addi	r16,r2,-40
    c9f4:	ac20983a 	sll	r16,r21,r16
    c9f8:	002d883a 	mov	r22,zero
    c9fc:	003ec106 	br	c504 <__alt_data_end+0xfffc3124>
    ca00:	d9800715 	stw	r6,28(sp)
    ca04:	d9c00215 	stw	r7,8(sp)
    ca08:	da400415 	stw	r9,16(sp)
    ca0c:	000d6480 	call	d648 <__clzsi2>
    ca10:	10800804 	addi	r2,r2,32
    ca14:	da400417 	ldw	r9,16(sp)
    ca18:	d9c00217 	ldw	r7,8(sp)
    ca1c:	d9800717 	ldw	r6,28(sp)
    ca20:	003eae06 	br	c4dc <__alt_data_end+0xfffc30fc>
    ca24:	00c00044 	movi	r3,1
    ca28:	1887c83a 	sub	r3,r3,r2
    ca2c:	01000e04 	movi	r4,56
    ca30:	20fe8516 	blt	r4,r3,c448 <__alt_data_end+0xfffc3068>
    ca34:	010007c4 	movi	r4,31
    ca38:	20c01b16 	blt	r4,r3,caa8 <__muldf3+0x7cc>
    ca3c:	00800804 	movi	r2,32
    ca40:	10c5c83a 	sub	r2,r2,r3
    ca44:	888a983a 	sll	r5,r17,r2
    ca48:	90c8d83a 	srl	r4,r18,r3
    ca4c:	9084983a 	sll	r2,r18,r2
    ca50:	88e2d83a 	srl	r17,r17,r3
    ca54:	2906b03a 	or	r3,r5,r4
    ca58:	1004c03a 	cmpne	r2,r2,zero
    ca5c:	1886b03a 	or	r3,r3,r2
    ca60:	188001cc 	andi	r2,r3,7
    ca64:	10000726 	beq	r2,zero,ca84 <__muldf3+0x7a8>
    ca68:	188003cc 	andi	r2,r3,15
    ca6c:	01000104 	movi	r4,4
    ca70:	11000426 	beq	r2,r4,ca84 <__muldf3+0x7a8>
    ca74:	1805883a 	mov	r2,r3
    ca78:	10c00104 	addi	r3,r2,4
    ca7c:	1885803a 	cmpltu	r2,r3,r2
    ca80:	88a3883a 	add	r17,r17,r2
    ca84:	8880202c 	andhi	r2,r17,128
    ca88:	10001c26 	beq	r2,zero,cafc <__muldf3+0x820>
    ca8c:	3027883a 	mov	r19,r6
    ca90:	00800044 	movi	r2,1
    ca94:	0021883a 	mov	r16,zero
    ca98:	002d883a 	mov	r22,zero
    ca9c:	003e6e06 	br	c458 <__alt_data_end+0xfffc3078>
    caa0:	4007883a 	mov	r3,r8
    caa4:	003f9706 	br	c904 <__alt_data_end+0xfffc3524>
    caa8:	017ff844 	movi	r5,-31
    caac:	2885c83a 	sub	r2,r5,r2
    cab0:	888ad83a 	srl	r5,r17,r2
    cab4:	00800804 	movi	r2,32
    cab8:	18801a26 	beq	r3,r2,cb24 <__muldf3+0x848>
    cabc:	01001004 	movi	r4,64
    cac0:	20c7c83a 	sub	r3,r4,r3
    cac4:	88e2983a 	sll	r17,r17,r3
    cac8:	8ca4b03a 	or	r18,r17,r18
    cacc:	9004c03a 	cmpne	r2,r18,zero
    cad0:	2884b03a 	or	r2,r5,r2
    cad4:	144001cc 	andi	r17,r2,7
    cad8:	88000d1e 	bne	r17,zero,cb10 <__muldf3+0x834>
    cadc:	0021883a 	mov	r16,zero
    cae0:	102cd0fa 	srli	r22,r2,3
    cae4:	3027883a 	mov	r19,r6
    cae8:	0005883a 	mov	r2,zero
    caec:	b46cb03a 	or	r22,r22,r17
    caf0:	003e5906 	br	c458 <__alt_data_end+0xfffc3078>
    caf4:	1007883a 	mov	r3,r2
    caf8:	0023883a 	mov	r17,zero
    cafc:	8820927a 	slli	r16,r17,9
    cb00:	1805883a 	mov	r2,r3
    cb04:	8822977a 	slli	r17,r17,29
    cb08:	8020d33a 	srli	r16,r16,12
    cb0c:	003ff406 	br	cae0 <__alt_data_end+0xfffc3700>
    cb10:	10c003cc 	andi	r3,r2,15
    cb14:	01000104 	movi	r4,4
    cb18:	193ff626 	beq	r3,r4,caf4 <__alt_data_end+0xfffc3714>
    cb1c:	0023883a 	mov	r17,zero
    cb20:	003fd506 	br	ca78 <__alt_data_end+0xfffc3698>
    cb24:	0023883a 	mov	r17,zero
    cb28:	003fe706 	br	cac8 <__alt_data_end+0xfffc36e8>
    cb2c:	00800434 	movhi	r2,16
    cb30:	8c000234 	orhi	r16,r17,8
    cb34:	10bfffc4 	addi	r2,r2,-1
    cb38:	3027883a 	mov	r19,r6
    cb3c:	80a0703a 	and	r16,r16,r2
    cb40:	902d883a 	mov	r22,r18
    cb44:	003eac06 	br	c5f8 <__alt_data_end+0xfffc3218>

0000cb48 <__subdf3>:
    cb48:	02000434 	movhi	r8,16
    cb4c:	423fffc4 	addi	r8,r8,-1
    cb50:	defffb04 	addi	sp,sp,-20
    cb54:	2a14703a 	and	r10,r5,r8
    cb58:	3812d53a 	srli	r9,r7,20
    cb5c:	3a10703a 	and	r8,r7,r8
    cb60:	2006d77a 	srli	r3,r4,29
    cb64:	3004d77a 	srli	r2,r6,29
    cb68:	dc000015 	stw	r16,0(sp)
    cb6c:	501490fa 	slli	r10,r10,3
    cb70:	2820d53a 	srli	r16,r5,20
    cb74:	401090fa 	slli	r8,r8,3
    cb78:	dc800215 	stw	r18,8(sp)
    cb7c:	dc400115 	stw	r17,4(sp)
    cb80:	dfc00415 	stw	ra,16(sp)
    cb84:	202290fa 	slli	r17,r4,3
    cb88:	dcc00315 	stw	r19,12(sp)
    cb8c:	4a41ffcc 	andi	r9,r9,2047
    cb90:	0101ffc4 	movi	r4,2047
    cb94:	2824d7fa 	srli	r18,r5,31
    cb98:	8401ffcc 	andi	r16,r16,2047
    cb9c:	50c6b03a 	or	r3,r10,r3
    cba0:	380ed7fa 	srli	r7,r7,31
    cba4:	408ab03a 	or	r5,r8,r2
    cba8:	300c90fa 	slli	r6,r6,3
    cbac:	49009626 	beq	r9,r4,ce08 <__subdf3+0x2c0>
    cbb0:	39c0005c 	xori	r7,r7,1
    cbb4:	8245c83a 	sub	r2,r16,r9
    cbb8:	3c807426 	beq	r7,r18,cd8c <__subdf3+0x244>
    cbbc:	0080af0e 	bge	zero,r2,ce7c <__subdf3+0x334>
    cbc0:	48002a1e 	bne	r9,zero,cc6c <__subdf3+0x124>
    cbc4:	2988b03a 	or	r4,r5,r6
    cbc8:	20009a1e 	bne	r4,zero,ce34 <__subdf3+0x2ec>
    cbcc:	888001cc 	andi	r2,r17,7
    cbd0:	10000726 	beq	r2,zero,cbf0 <__subdf3+0xa8>
    cbd4:	888003cc 	andi	r2,r17,15
    cbd8:	01000104 	movi	r4,4
    cbdc:	11000426 	beq	r2,r4,cbf0 <__subdf3+0xa8>
    cbe0:	890b883a 	add	r5,r17,r4
    cbe4:	2c63803a 	cmpltu	r17,r5,r17
    cbe8:	1c47883a 	add	r3,r3,r17
    cbec:	2823883a 	mov	r17,r5
    cbf0:	1880202c 	andhi	r2,r3,128
    cbf4:	10005926 	beq	r2,zero,cd5c <__subdf3+0x214>
    cbf8:	84000044 	addi	r16,r16,1
    cbfc:	0081ffc4 	movi	r2,2047
    cc00:	8080be26 	beq	r16,r2,cefc <__subdf3+0x3b4>
    cc04:	017fe034 	movhi	r5,65408
    cc08:	297fffc4 	addi	r5,r5,-1
    cc0c:	1946703a 	and	r3,r3,r5
    cc10:	1804977a 	slli	r2,r3,29
    cc14:	1806927a 	slli	r3,r3,9
    cc18:	8822d0fa 	srli	r17,r17,3
    cc1c:	8401ffcc 	andi	r16,r16,2047
    cc20:	180ad33a 	srli	r5,r3,12
    cc24:	9100004c 	andi	r4,r18,1
    cc28:	1444b03a 	or	r2,r2,r17
    cc2c:	80c1ffcc 	andi	r3,r16,2047
    cc30:	1820953a 	slli	r16,r3,20
    cc34:	20c03fcc 	andi	r3,r4,255
    cc38:	180897fa 	slli	r4,r3,31
    cc3c:	00c00434 	movhi	r3,16
    cc40:	18ffffc4 	addi	r3,r3,-1
    cc44:	28c6703a 	and	r3,r5,r3
    cc48:	1c06b03a 	or	r3,r3,r16
    cc4c:	1906b03a 	or	r3,r3,r4
    cc50:	dfc00417 	ldw	ra,16(sp)
    cc54:	dcc00317 	ldw	r19,12(sp)
    cc58:	dc800217 	ldw	r18,8(sp)
    cc5c:	dc400117 	ldw	r17,4(sp)
    cc60:	dc000017 	ldw	r16,0(sp)
    cc64:	dec00504 	addi	sp,sp,20
    cc68:	f800283a 	ret
    cc6c:	0101ffc4 	movi	r4,2047
    cc70:	813fd626 	beq	r16,r4,cbcc <__alt_data_end+0xfffc37ec>
    cc74:	29402034 	orhi	r5,r5,128
    cc78:	01000e04 	movi	r4,56
    cc7c:	2080a316 	blt	r4,r2,cf0c <__subdf3+0x3c4>
    cc80:	010007c4 	movi	r4,31
    cc84:	2080c616 	blt	r4,r2,cfa0 <__subdf3+0x458>
    cc88:	01000804 	movi	r4,32
    cc8c:	2089c83a 	sub	r4,r4,r2
    cc90:	2910983a 	sll	r8,r5,r4
    cc94:	308ed83a 	srl	r7,r6,r2
    cc98:	3108983a 	sll	r4,r6,r4
    cc9c:	2884d83a 	srl	r2,r5,r2
    cca0:	41ccb03a 	or	r6,r8,r7
    cca4:	2008c03a 	cmpne	r4,r4,zero
    cca8:	310cb03a 	or	r6,r6,r4
    ccac:	898dc83a 	sub	r6,r17,r6
    ccb0:	89a3803a 	cmpltu	r17,r17,r6
    ccb4:	1887c83a 	sub	r3,r3,r2
    ccb8:	1c47c83a 	sub	r3,r3,r17
    ccbc:	3023883a 	mov	r17,r6
    ccc0:	1880202c 	andhi	r2,r3,128
    ccc4:	10002326 	beq	r2,zero,cd54 <__subdf3+0x20c>
    ccc8:	04c02034 	movhi	r19,128
    cccc:	9cffffc4 	addi	r19,r19,-1
    ccd0:	1ce6703a 	and	r19,r3,r19
    ccd4:	98007a26 	beq	r19,zero,cec0 <__subdf3+0x378>
    ccd8:	9809883a 	mov	r4,r19
    ccdc:	000d6480 	call	d648 <__clzsi2>
    cce0:	113ffe04 	addi	r4,r2,-8
    cce4:	00c007c4 	movi	r3,31
    cce8:	19007b16 	blt	r3,r4,ced8 <__subdf3+0x390>
    ccec:	00800804 	movi	r2,32
    ccf0:	1105c83a 	sub	r2,r2,r4
    ccf4:	8884d83a 	srl	r2,r17,r2
    ccf8:	9906983a 	sll	r3,r19,r4
    ccfc:	8922983a 	sll	r17,r17,r4
    cd00:	10c4b03a 	or	r2,r2,r3
    cd04:	24007816 	blt	r4,r16,cee8 <__subdf3+0x3a0>
    cd08:	2421c83a 	sub	r16,r4,r16
    cd0c:	80c00044 	addi	r3,r16,1
    cd10:	010007c4 	movi	r4,31
    cd14:	20c09516 	blt	r4,r3,cf6c <__subdf3+0x424>
    cd18:	01400804 	movi	r5,32
    cd1c:	28cbc83a 	sub	r5,r5,r3
    cd20:	88c8d83a 	srl	r4,r17,r3
    cd24:	8962983a 	sll	r17,r17,r5
    cd28:	114a983a 	sll	r5,r2,r5
    cd2c:	10c6d83a 	srl	r3,r2,r3
    cd30:	8804c03a 	cmpne	r2,r17,zero
    cd34:	290ab03a 	or	r5,r5,r4
    cd38:	28a2b03a 	or	r17,r5,r2
    cd3c:	0021883a 	mov	r16,zero
    cd40:	003fa206 	br	cbcc <__alt_data_end+0xfffc37ec>
    cd44:	2090b03a 	or	r8,r4,r2
    cd48:	40018e26 	beq	r8,zero,d384 <__subdf3+0x83c>
    cd4c:	1007883a 	mov	r3,r2
    cd50:	2023883a 	mov	r17,r4
    cd54:	888001cc 	andi	r2,r17,7
    cd58:	103f9e1e 	bne	r2,zero,cbd4 <__alt_data_end+0xfffc37f4>
    cd5c:	1804977a 	slli	r2,r3,29
    cd60:	8822d0fa 	srli	r17,r17,3
    cd64:	1810d0fa 	srli	r8,r3,3
    cd68:	9100004c 	andi	r4,r18,1
    cd6c:	1444b03a 	or	r2,r2,r17
    cd70:	00c1ffc4 	movi	r3,2047
    cd74:	80c02826 	beq	r16,r3,ce18 <__subdf3+0x2d0>
    cd78:	01400434 	movhi	r5,16
    cd7c:	297fffc4 	addi	r5,r5,-1
    cd80:	80e0703a 	and	r16,r16,r3
    cd84:	414a703a 	and	r5,r8,r5
    cd88:	003fa806 	br	cc2c <__alt_data_end+0xfffc384c>
    cd8c:	0080630e 	bge	zero,r2,cf1c <__subdf3+0x3d4>
    cd90:	48003026 	beq	r9,zero,ce54 <__subdf3+0x30c>
    cd94:	0101ffc4 	movi	r4,2047
    cd98:	813f8c26 	beq	r16,r4,cbcc <__alt_data_end+0xfffc37ec>
    cd9c:	29402034 	orhi	r5,r5,128
    cda0:	01000e04 	movi	r4,56
    cda4:	2080a90e 	bge	r4,r2,d04c <__subdf3+0x504>
    cda8:	298cb03a 	or	r6,r5,r6
    cdac:	3012c03a 	cmpne	r9,r6,zero
    cdb0:	0005883a 	mov	r2,zero
    cdb4:	4c53883a 	add	r9,r9,r17
    cdb8:	4c63803a 	cmpltu	r17,r9,r17
    cdbc:	10c7883a 	add	r3,r2,r3
    cdc0:	88c7883a 	add	r3,r17,r3
    cdc4:	4823883a 	mov	r17,r9
    cdc8:	1880202c 	andhi	r2,r3,128
    cdcc:	1000d026 	beq	r2,zero,d110 <__subdf3+0x5c8>
    cdd0:	84000044 	addi	r16,r16,1
    cdd4:	0081ffc4 	movi	r2,2047
    cdd8:	8080fe26 	beq	r16,r2,d1d4 <__subdf3+0x68c>
    cddc:	00bfe034 	movhi	r2,65408
    cde0:	10bfffc4 	addi	r2,r2,-1
    cde4:	1886703a 	and	r3,r3,r2
    cde8:	880ad07a 	srli	r5,r17,1
    cdec:	180497fa 	slli	r2,r3,31
    cdf0:	8900004c 	andi	r4,r17,1
    cdf4:	2922b03a 	or	r17,r5,r4
    cdf8:	1806d07a 	srli	r3,r3,1
    cdfc:	1462b03a 	or	r17,r2,r17
    ce00:	3825883a 	mov	r18,r7
    ce04:	003f7106 	br	cbcc <__alt_data_end+0xfffc37ec>
    ce08:	2984b03a 	or	r2,r5,r6
    ce0c:	103f6826 	beq	r2,zero,cbb0 <__alt_data_end+0xfffc37d0>
    ce10:	39c03fcc 	andi	r7,r7,255
    ce14:	003f6706 	br	cbb4 <__alt_data_end+0xfffc37d4>
    ce18:	4086b03a 	or	r3,r8,r2
    ce1c:	18015226 	beq	r3,zero,d368 <__subdf3+0x820>
    ce20:	00c00434 	movhi	r3,16
    ce24:	41400234 	orhi	r5,r8,8
    ce28:	18ffffc4 	addi	r3,r3,-1
    ce2c:	28ca703a 	and	r5,r5,r3
    ce30:	003f7e06 	br	cc2c <__alt_data_end+0xfffc384c>
    ce34:	10bfffc4 	addi	r2,r2,-1
    ce38:	1000491e 	bne	r2,zero,cf60 <__subdf3+0x418>
    ce3c:	898fc83a 	sub	r7,r17,r6
    ce40:	89e3803a 	cmpltu	r17,r17,r7
    ce44:	1947c83a 	sub	r3,r3,r5
    ce48:	1c47c83a 	sub	r3,r3,r17
    ce4c:	3823883a 	mov	r17,r7
    ce50:	003f9b06 	br	ccc0 <__alt_data_end+0xfffc38e0>
    ce54:	2988b03a 	or	r4,r5,r6
    ce58:	203f5c26 	beq	r4,zero,cbcc <__alt_data_end+0xfffc37ec>
    ce5c:	10bfffc4 	addi	r2,r2,-1
    ce60:	1000931e 	bne	r2,zero,d0b0 <__subdf3+0x568>
    ce64:	898d883a 	add	r6,r17,r6
    ce68:	3463803a 	cmpltu	r17,r6,r17
    ce6c:	1947883a 	add	r3,r3,r5
    ce70:	88c7883a 	add	r3,r17,r3
    ce74:	3023883a 	mov	r17,r6
    ce78:	003fd306 	br	cdc8 <__alt_data_end+0xfffc39e8>
    ce7c:	1000541e 	bne	r2,zero,cfd0 <__subdf3+0x488>
    ce80:	80800044 	addi	r2,r16,1
    ce84:	1081ffcc 	andi	r2,r2,2047
    ce88:	01000044 	movi	r4,1
    ce8c:	2080a20e 	bge	r4,r2,d118 <__subdf3+0x5d0>
    ce90:	8989c83a 	sub	r4,r17,r6
    ce94:	8905803a 	cmpltu	r2,r17,r4
    ce98:	1967c83a 	sub	r19,r3,r5
    ce9c:	98a7c83a 	sub	r19,r19,r2
    cea0:	9880202c 	andhi	r2,r19,128
    cea4:	10006326 	beq	r2,zero,d034 <__subdf3+0x4ec>
    cea8:	3463c83a 	sub	r17,r6,r17
    ceac:	28c7c83a 	sub	r3,r5,r3
    ceb0:	344d803a 	cmpltu	r6,r6,r17
    ceb4:	19a7c83a 	sub	r19,r3,r6
    ceb8:	3825883a 	mov	r18,r7
    cebc:	983f861e 	bne	r19,zero,ccd8 <__alt_data_end+0xfffc38f8>
    cec0:	8809883a 	mov	r4,r17
    cec4:	000d6480 	call	d648 <__clzsi2>
    cec8:	10800804 	addi	r2,r2,32
    cecc:	113ffe04 	addi	r4,r2,-8
    ced0:	00c007c4 	movi	r3,31
    ced4:	193f850e 	bge	r3,r4,ccec <__alt_data_end+0xfffc390c>
    ced8:	10bff604 	addi	r2,r2,-40
    cedc:	8884983a 	sll	r2,r17,r2
    cee0:	0023883a 	mov	r17,zero
    cee4:	243f880e 	bge	r4,r16,cd08 <__alt_data_end+0xfffc3928>
    cee8:	00ffe034 	movhi	r3,65408
    ceec:	18ffffc4 	addi	r3,r3,-1
    cef0:	8121c83a 	sub	r16,r16,r4
    cef4:	10c6703a 	and	r3,r2,r3
    cef8:	003f3406 	br	cbcc <__alt_data_end+0xfffc37ec>
    cefc:	9100004c 	andi	r4,r18,1
    cf00:	000b883a 	mov	r5,zero
    cf04:	0005883a 	mov	r2,zero
    cf08:	003f4806 	br	cc2c <__alt_data_end+0xfffc384c>
    cf0c:	298cb03a 	or	r6,r5,r6
    cf10:	300cc03a 	cmpne	r6,r6,zero
    cf14:	0005883a 	mov	r2,zero
    cf18:	003f6406 	br	ccac <__alt_data_end+0xfffc38cc>
    cf1c:	10009a1e 	bne	r2,zero,d188 <__subdf3+0x640>
    cf20:	82400044 	addi	r9,r16,1
    cf24:	4881ffcc 	andi	r2,r9,2047
    cf28:	02800044 	movi	r10,1
    cf2c:	5080670e 	bge	r10,r2,d0cc <__subdf3+0x584>
    cf30:	0081ffc4 	movi	r2,2047
    cf34:	4880af26 	beq	r9,r2,d1f4 <__subdf3+0x6ac>
    cf38:	898d883a 	add	r6,r17,r6
    cf3c:	1945883a 	add	r2,r3,r5
    cf40:	3447803a 	cmpltu	r3,r6,r17
    cf44:	1887883a 	add	r3,r3,r2
    cf48:	182297fa 	slli	r17,r3,31
    cf4c:	300cd07a 	srli	r6,r6,1
    cf50:	1806d07a 	srli	r3,r3,1
    cf54:	4821883a 	mov	r16,r9
    cf58:	89a2b03a 	or	r17,r17,r6
    cf5c:	003f1b06 	br	cbcc <__alt_data_end+0xfffc37ec>
    cf60:	0101ffc4 	movi	r4,2047
    cf64:	813f441e 	bne	r16,r4,cc78 <__alt_data_end+0xfffc3898>
    cf68:	003f1806 	br	cbcc <__alt_data_end+0xfffc37ec>
    cf6c:	843ff844 	addi	r16,r16,-31
    cf70:	01400804 	movi	r5,32
    cf74:	1408d83a 	srl	r4,r2,r16
    cf78:	19405026 	beq	r3,r5,d0bc <__subdf3+0x574>
    cf7c:	01401004 	movi	r5,64
    cf80:	28c7c83a 	sub	r3,r5,r3
    cf84:	10c4983a 	sll	r2,r2,r3
    cf88:	88a2b03a 	or	r17,r17,r2
    cf8c:	8822c03a 	cmpne	r17,r17,zero
    cf90:	2462b03a 	or	r17,r4,r17
    cf94:	0007883a 	mov	r3,zero
    cf98:	0021883a 	mov	r16,zero
    cf9c:	003f6d06 	br	cd54 <__alt_data_end+0xfffc3974>
    cfa0:	11fff804 	addi	r7,r2,-32
    cfa4:	01000804 	movi	r4,32
    cfa8:	29ced83a 	srl	r7,r5,r7
    cfac:	11004526 	beq	r2,r4,d0c4 <__subdf3+0x57c>
    cfb0:	01001004 	movi	r4,64
    cfb4:	2089c83a 	sub	r4,r4,r2
    cfb8:	2904983a 	sll	r2,r5,r4
    cfbc:	118cb03a 	or	r6,r2,r6
    cfc0:	300cc03a 	cmpne	r6,r6,zero
    cfc4:	398cb03a 	or	r6,r7,r6
    cfc8:	0005883a 	mov	r2,zero
    cfcc:	003f3706 	br	ccac <__alt_data_end+0xfffc38cc>
    cfd0:	80002a26 	beq	r16,zero,d07c <__subdf3+0x534>
    cfd4:	0101ffc4 	movi	r4,2047
    cfd8:	49006626 	beq	r9,r4,d174 <__subdf3+0x62c>
    cfdc:	0085c83a 	sub	r2,zero,r2
    cfe0:	18c02034 	orhi	r3,r3,128
    cfe4:	01000e04 	movi	r4,56
    cfe8:	20807e16 	blt	r4,r2,d1e4 <__subdf3+0x69c>
    cfec:	010007c4 	movi	r4,31
    cff0:	2080e716 	blt	r4,r2,d390 <__subdf3+0x848>
    cff4:	01000804 	movi	r4,32
    cff8:	2089c83a 	sub	r4,r4,r2
    cffc:	1914983a 	sll	r10,r3,r4
    d000:	8890d83a 	srl	r8,r17,r2
    d004:	8908983a 	sll	r4,r17,r4
    d008:	1884d83a 	srl	r2,r3,r2
    d00c:	5222b03a 	or	r17,r10,r8
    d010:	2006c03a 	cmpne	r3,r4,zero
    d014:	88e2b03a 	or	r17,r17,r3
    d018:	3463c83a 	sub	r17,r6,r17
    d01c:	2885c83a 	sub	r2,r5,r2
    d020:	344d803a 	cmpltu	r6,r6,r17
    d024:	1187c83a 	sub	r3,r2,r6
    d028:	4821883a 	mov	r16,r9
    d02c:	3825883a 	mov	r18,r7
    d030:	003f2306 	br	ccc0 <__alt_data_end+0xfffc38e0>
    d034:	24d0b03a 	or	r8,r4,r19
    d038:	40001b1e 	bne	r8,zero,d0a8 <__subdf3+0x560>
    d03c:	0005883a 	mov	r2,zero
    d040:	0009883a 	mov	r4,zero
    d044:	0021883a 	mov	r16,zero
    d048:	003f4906 	br	cd70 <__alt_data_end+0xfffc3990>
    d04c:	010007c4 	movi	r4,31
    d050:	20803a16 	blt	r4,r2,d13c <__subdf3+0x5f4>
    d054:	01000804 	movi	r4,32
    d058:	2089c83a 	sub	r4,r4,r2
    d05c:	2912983a 	sll	r9,r5,r4
    d060:	3090d83a 	srl	r8,r6,r2
    d064:	3108983a 	sll	r4,r6,r4
    d068:	2884d83a 	srl	r2,r5,r2
    d06c:	4a12b03a 	or	r9,r9,r8
    d070:	2008c03a 	cmpne	r4,r4,zero
    d074:	4912b03a 	or	r9,r9,r4
    d078:	003f4e06 	br	cdb4 <__alt_data_end+0xfffc39d4>
    d07c:	1c48b03a 	or	r4,r3,r17
    d080:	20003c26 	beq	r4,zero,d174 <__subdf3+0x62c>
    d084:	0084303a 	nor	r2,zero,r2
    d088:	1000381e 	bne	r2,zero,d16c <__subdf3+0x624>
    d08c:	3463c83a 	sub	r17,r6,r17
    d090:	28c5c83a 	sub	r2,r5,r3
    d094:	344d803a 	cmpltu	r6,r6,r17
    d098:	1187c83a 	sub	r3,r2,r6
    d09c:	4821883a 	mov	r16,r9
    d0a0:	3825883a 	mov	r18,r7
    d0a4:	003f0606 	br	ccc0 <__alt_data_end+0xfffc38e0>
    d0a8:	2023883a 	mov	r17,r4
    d0ac:	003f0906 	br	ccd4 <__alt_data_end+0xfffc38f4>
    d0b0:	0101ffc4 	movi	r4,2047
    d0b4:	813f3a1e 	bne	r16,r4,cda0 <__alt_data_end+0xfffc39c0>
    d0b8:	003ec406 	br	cbcc <__alt_data_end+0xfffc37ec>
    d0bc:	0005883a 	mov	r2,zero
    d0c0:	003fb106 	br	cf88 <__alt_data_end+0xfffc3ba8>
    d0c4:	0005883a 	mov	r2,zero
    d0c8:	003fbc06 	br	cfbc <__alt_data_end+0xfffc3bdc>
    d0cc:	1c44b03a 	or	r2,r3,r17
    d0d0:	80008e1e 	bne	r16,zero,d30c <__subdf3+0x7c4>
    d0d4:	1000c826 	beq	r2,zero,d3f8 <__subdf3+0x8b0>
    d0d8:	2984b03a 	or	r2,r5,r6
    d0dc:	103ebb26 	beq	r2,zero,cbcc <__alt_data_end+0xfffc37ec>
    d0e0:	8989883a 	add	r4,r17,r6
    d0e4:	1945883a 	add	r2,r3,r5
    d0e8:	2447803a 	cmpltu	r3,r4,r17
    d0ec:	1887883a 	add	r3,r3,r2
    d0f0:	1880202c 	andhi	r2,r3,128
    d0f4:	2023883a 	mov	r17,r4
    d0f8:	103f1626 	beq	r2,zero,cd54 <__alt_data_end+0xfffc3974>
    d0fc:	00bfe034 	movhi	r2,65408
    d100:	10bfffc4 	addi	r2,r2,-1
    d104:	5021883a 	mov	r16,r10
    d108:	1886703a 	and	r3,r3,r2
    d10c:	003eaf06 	br	cbcc <__alt_data_end+0xfffc37ec>
    d110:	3825883a 	mov	r18,r7
    d114:	003f0f06 	br	cd54 <__alt_data_end+0xfffc3974>
    d118:	1c44b03a 	or	r2,r3,r17
    d11c:	8000251e 	bne	r16,zero,d1b4 <__subdf3+0x66c>
    d120:	1000661e 	bne	r2,zero,d2bc <__subdf3+0x774>
    d124:	2990b03a 	or	r8,r5,r6
    d128:	40009626 	beq	r8,zero,d384 <__subdf3+0x83c>
    d12c:	2807883a 	mov	r3,r5
    d130:	3023883a 	mov	r17,r6
    d134:	3825883a 	mov	r18,r7
    d138:	003ea406 	br	cbcc <__alt_data_end+0xfffc37ec>
    d13c:	127ff804 	addi	r9,r2,-32
    d140:	01000804 	movi	r4,32
    d144:	2a52d83a 	srl	r9,r5,r9
    d148:	11008c26 	beq	r2,r4,d37c <__subdf3+0x834>
    d14c:	01001004 	movi	r4,64
    d150:	2085c83a 	sub	r2,r4,r2
    d154:	2884983a 	sll	r2,r5,r2
    d158:	118cb03a 	or	r6,r2,r6
    d15c:	300cc03a 	cmpne	r6,r6,zero
    d160:	4992b03a 	or	r9,r9,r6
    d164:	0005883a 	mov	r2,zero
    d168:	003f1206 	br	cdb4 <__alt_data_end+0xfffc39d4>
    d16c:	0101ffc4 	movi	r4,2047
    d170:	493f9c1e 	bne	r9,r4,cfe4 <__alt_data_end+0xfffc3c04>
    d174:	2807883a 	mov	r3,r5
    d178:	3023883a 	mov	r17,r6
    d17c:	4821883a 	mov	r16,r9
    d180:	3825883a 	mov	r18,r7
    d184:	003e9106 	br	cbcc <__alt_data_end+0xfffc37ec>
    d188:	80001f1e 	bne	r16,zero,d208 <__subdf3+0x6c0>
    d18c:	1c48b03a 	or	r4,r3,r17
    d190:	20005a26 	beq	r4,zero,d2fc <__subdf3+0x7b4>
    d194:	0084303a 	nor	r2,zero,r2
    d198:	1000561e 	bne	r2,zero,d2f4 <__subdf3+0x7ac>
    d19c:	89a3883a 	add	r17,r17,r6
    d1a0:	1945883a 	add	r2,r3,r5
    d1a4:	898d803a 	cmpltu	r6,r17,r6
    d1a8:	3087883a 	add	r3,r6,r2
    d1ac:	4821883a 	mov	r16,r9
    d1b0:	003f0506 	br	cdc8 <__alt_data_end+0xfffc39e8>
    d1b4:	10002b1e 	bne	r2,zero,d264 <__subdf3+0x71c>
    d1b8:	2984b03a 	or	r2,r5,r6
    d1bc:	10008026 	beq	r2,zero,d3c0 <__subdf3+0x878>
    d1c0:	2807883a 	mov	r3,r5
    d1c4:	3023883a 	mov	r17,r6
    d1c8:	3825883a 	mov	r18,r7
    d1cc:	0401ffc4 	movi	r16,2047
    d1d0:	003e7e06 	br	cbcc <__alt_data_end+0xfffc37ec>
    d1d4:	3809883a 	mov	r4,r7
    d1d8:	0011883a 	mov	r8,zero
    d1dc:	0005883a 	mov	r2,zero
    d1e0:	003ee306 	br	cd70 <__alt_data_end+0xfffc3990>
    d1e4:	1c62b03a 	or	r17,r3,r17
    d1e8:	8822c03a 	cmpne	r17,r17,zero
    d1ec:	0005883a 	mov	r2,zero
    d1f0:	003f8906 	br	d018 <__alt_data_end+0xfffc3c38>
    d1f4:	3809883a 	mov	r4,r7
    d1f8:	4821883a 	mov	r16,r9
    d1fc:	0011883a 	mov	r8,zero
    d200:	0005883a 	mov	r2,zero
    d204:	003eda06 	br	cd70 <__alt_data_end+0xfffc3990>
    d208:	0101ffc4 	movi	r4,2047
    d20c:	49003b26 	beq	r9,r4,d2fc <__subdf3+0x7b4>
    d210:	0085c83a 	sub	r2,zero,r2
    d214:	18c02034 	orhi	r3,r3,128
    d218:	01000e04 	movi	r4,56
    d21c:	20806e16 	blt	r4,r2,d3d8 <__subdf3+0x890>
    d220:	010007c4 	movi	r4,31
    d224:	20807716 	blt	r4,r2,d404 <__subdf3+0x8bc>
    d228:	01000804 	movi	r4,32
    d22c:	2089c83a 	sub	r4,r4,r2
    d230:	1914983a 	sll	r10,r3,r4
    d234:	8890d83a 	srl	r8,r17,r2
    d238:	8908983a 	sll	r4,r17,r4
    d23c:	1884d83a 	srl	r2,r3,r2
    d240:	5222b03a 	or	r17,r10,r8
    d244:	2006c03a 	cmpne	r3,r4,zero
    d248:	88e2b03a 	or	r17,r17,r3
    d24c:	89a3883a 	add	r17,r17,r6
    d250:	1145883a 	add	r2,r2,r5
    d254:	898d803a 	cmpltu	r6,r17,r6
    d258:	3087883a 	add	r3,r6,r2
    d25c:	4821883a 	mov	r16,r9
    d260:	003ed906 	br	cdc8 <__alt_data_end+0xfffc39e8>
    d264:	2984b03a 	or	r2,r5,r6
    d268:	10004226 	beq	r2,zero,d374 <__subdf3+0x82c>
    d26c:	1808d0fa 	srli	r4,r3,3
    d270:	8822d0fa 	srli	r17,r17,3
    d274:	1806977a 	slli	r3,r3,29
    d278:	2080022c 	andhi	r2,r4,8
    d27c:	1c62b03a 	or	r17,r3,r17
    d280:	10000826 	beq	r2,zero,d2a4 <__subdf3+0x75c>
    d284:	2812d0fa 	srli	r9,r5,3
    d288:	4880022c 	andhi	r2,r9,8
    d28c:	1000051e 	bne	r2,zero,d2a4 <__subdf3+0x75c>
    d290:	300cd0fa 	srli	r6,r6,3
    d294:	2804977a 	slli	r2,r5,29
    d298:	4809883a 	mov	r4,r9
    d29c:	3825883a 	mov	r18,r7
    d2a0:	11a2b03a 	or	r17,r2,r6
    d2a4:	8806d77a 	srli	r3,r17,29
    d2a8:	200890fa 	slli	r4,r4,3
    d2ac:	882290fa 	slli	r17,r17,3
    d2b0:	0401ffc4 	movi	r16,2047
    d2b4:	1906b03a 	or	r3,r3,r4
    d2b8:	003e4406 	br	cbcc <__alt_data_end+0xfffc37ec>
    d2bc:	2984b03a 	or	r2,r5,r6
    d2c0:	103e4226 	beq	r2,zero,cbcc <__alt_data_end+0xfffc37ec>
    d2c4:	8989c83a 	sub	r4,r17,r6
    d2c8:	8911803a 	cmpltu	r8,r17,r4
    d2cc:	1945c83a 	sub	r2,r3,r5
    d2d0:	1205c83a 	sub	r2,r2,r8
    d2d4:	1200202c 	andhi	r8,r2,128
    d2d8:	403e9a26 	beq	r8,zero,cd44 <__alt_data_end+0xfffc3964>
    d2dc:	3463c83a 	sub	r17,r6,r17
    d2e0:	28c5c83a 	sub	r2,r5,r3
    d2e4:	344d803a 	cmpltu	r6,r6,r17
    d2e8:	1187c83a 	sub	r3,r2,r6
    d2ec:	3825883a 	mov	r18,r7
    d2f0:	003e3606 	br	cbcc <__alt_data_end+0xfffc37ec>
    d2f4:	0101ffc4 	movi	r4,2047
    d2f8:	493fc71e 	bne	r9,r4,d218 <__alt_data_end+0xfffc3e38>
    d2fc:	2807883a 	mov	r3,r5
    d300:	3023883a 	mov	r17,r6
    d304:	4821883a 	mov	r16,r9
    d308:	003e3006 	br	cbcc <__alt_data_end+0xfffc37ec>
    d30c:	10003626 	beq	r2,zero,d3e8 <__subdf3+0x8a0>
    d310:	2984b03a 	or	r2,r5,r6
    d314:	10001726 	beq	r2,zero,d374 <__subdf3+0x82c>
    d318:	1808d0fa 	srli	r4,r3,3
    d31c:	8822d0fa 	srli	r17,r17,3
    d320:	1806977a 	slli	r3,r3,29
    d324:	2080022c 	andhi	r2,r4,8
    d328:	1c62b03a 	or	r17,r3,r17
    d32c:	10000726 	beq	r2,zero,d34c <__subdf3+0x804>
    d330:	2812d0fa 	srli	r9,r5,3
    d334:	4880022c 	andhi	r2,r9,8
    d338:	1000041e 	bne	r2,zero,d34c <__subdf3+0x804>
    d33c:	300cd0fa 	srli	r6,r6,3
    d340:	2804977a 	slli	r2,r5,29
    d344:	4809883a 	mov	r4,r9
    d348:	11a2b03a 	or	r17,r2,r6
    d34c:	8806d77a 	srli	r3,r17,29
    d350:	200890fa 	slli	r4,r4,3
    d354:	882290fa 	slli	r17,r17,3
    d358:	3825883a 	mov	r18,r7
    d35c:	1906b03a 	or	r3,r3,r4
    d360:	0401ffc4 	movi	r16,2047
    d364:	003e1906 	br	cbcc <__alt_data_end+0xfffc37ec>
    d368:	000b883a 	mov	r5,zero
    d36c:	0005883a 	mov	r2,zero
    d370:	003e2e06 	br	cc2c <__alt_data_end+0xfffc384c>
    d374:	0401ffc4 	movi	r16,2047
    d378:	003e1406 	br	cbcc <__alt_data_end+0xfffc37ec>
    d37c:	0005883a 	mov	r2,zero
    d380:	003f7506 	br	d158 <__alt_data_end+0xfffc3d78>
    d384:	0005883a 	mov	r2,zero
    d388:	0009883a 	mov	r4,zero
    d38c:	003e7806 	br	cd70 <__alt_data_end+0xfffc3990>
    d390:	123ff804 	addi	r8,r2,-32
    d394:	01000804 	movi	r4,32
    d398:	1a10d83a 	srl	r8,r3,r8
    d39c:	11002526 	beq	r2,r4,d434 <__subdf3+0x8ec>
    d3a0:	01001004 	movi	r4,64
    d3a4:	2085c83a 	sub	r2,r4,r2
    d3a8:	1884983a 	sll	r2,r3,r2
    d3ac:	1444b03a 	or	r2,r2,r17
    d3b0:	1004c03a 	cmpne	r2,r2,zero
    d3b4:	40a2b03a 	or	r17,r8,r2
    d3b8:	0005883a 	mov	r2,zero
    d3bc:	003f1606 	br	d018 <__alt_data_end+0xfffc3c38>
    d3c0:	02000434 	movhi	r8,16
    d3c4:	0009883a 	mov	r4,zero
    d3c8:	423fffc4 	addi	r8,r8,-1
    d3cc:	00bfffc4 	movi	r2,-1
    d3d0:	0401ffc4 	movi	r16,2047
    d3d4:	003e6606 	br	cd70 <__alt_data_end+0xfffc3990>
    d3d8:	1c62b03a 	or	r17,r3,r17
    d3dc:	8822c03a 	cmpne	r17,r17,zero
    d3e0:	0005883a 	mov	r2,zero
    d3e4:	003f9906 	br	d24c <__alt_data_end+0xfffc3e6c>
    d3e8:	2807883a 	mov	r3,r5
    d3ec:	3023883a 	mov	r17,r6
    d3f0:	0401ffc4 	movi	r16,2047
    d3f4:	003df506 	br	cbcc <__alt_data_end+0xfffc37ec>
    d3f8:	2807883a 	mov	r3,r5
    d3fc:	3023883a 	mov	r17,r6
    d400:	003df206 	br	cbcc <__alt_data_end+0xfffc37ec>
    d404:	123ff804 	addi	r8,r2,-32
    d408:	01000804 	movi	r4,32
    d40c:	1a10d83a 	srl	r8,r3,r8
    d410:	11000a26 	beq	r2,r4,d43c <__subdf3+0x8f4>
    d414:	01001004 	movi	r4,64
    d418:	2085c83a 	sub	r2,r4,r2
    d41c:	1884983a 	sll	r2,r3,r2
    d420:	1444b03a 	or	r2,r2,r17
    d424:	1004c03a 	cmpne	r2,r2,zero
    d428:	40a2b03a 	or	r17,r8,r2
    d42c:	0005883a 	mov	r2,zero
    d430:	003f8606 	br	d24c <__alt_data_end+0xfffc3e6c>
    d434:	0005883a 	mov	r2,zero
    d438:	003fdc06 	br	d3ac <__alt_data_end+0xfffc3fcc>
    d43c:	0005883a 	mov	r2,zero
    d440:	003ff706 	br	d420 <__alt_data_end+0xfffc4040>

0000d444 <__fixdfsi>:
    d444:	280cd53a 	srli	r6,r5,20
    d448:	00c00434 	movhi	r3,16
    d44c:	18ffffc4 	addi	r3,r3,-1
    d450:	3181ffcc 	andi	r6,r6,2047
    d454:	01c0ff84 	movi	r7,1022
    d458:	28c6703a 	and	r3,r5,r3
    d45c:	280ad7fa 	srli	r5,r5,31
    d460:	3980120e 	bge	r7,r6,d4ac <__fixdfsi+0x68>
    d464:	00810744 	movi	r2,1053
    d468:	11800c16 	blt	r2,r6,d49c <__fixdfsi+0x58>
    d46c:	00810cc4 	movi	r2,1075
    d470:	1185c83a 	sub	r2,r2,r6
    d474:	01c007c4 	movi	r7,31
    d478:	18c00434 	orhi	r3,r3,16
    d47c:	38800d16 	blt	r7,r2,d4b4 <__fixdfsi+0x70>
    d480:	31befb44 	addi	r6,r6,-1043
    d484:	2084d83a 	srl	r2,r4,r2
    d488:	1986983a 	sll	r3,r3,r6
    d48c:	1884b03a 	or	r2,r3,r2
    d490:	28000726 	beq	r5,zero,d4b0 <__fixdfsi+0x6c>
    d494:	0085c83a 	sub	r2,zero,r2
    d498:	f800283a 	ret
    d49c:	00a00034 	movhi	r2,32768
    d4a0:	10bfffc4 	addi	r2,r2,-1
    d4a4:	2885883a 	add	r2,r5,r2
    d4a8:	f800283a 	ret
    d4ac:	0005883a 	mov	r2,zero
    d4b0:	f800283a 	ret
    d4b4:	008104c4 	movi	r2,1043
    d4b8:	1185c83a 	sub	r2,r2,r6
    d4bc:	1884d83a 	srl	r2,r3,r2
    d4c0:	003ff306 	br	d490 <__alt_data_end+0xfffc40b0>

0000d4c4 <__floatsidf>:
    d4c4:	defffd04 	addi	sp,sp,-12
    d4c8:	dfc00215 	stw	ra,8(sp)
    d4cc:	dc400115 	stw	r17,4(sp)
    d4d0:	dc000015 	stw	r16,0(sp)
    d4d4:	20002b26 	beq	r4,zero,d584 <__floatsidf+0xc0>
    d4d8:	2023883a 	mov	r17,r4
    d4dc:	2020d7fa 	srli	r16,r4,31
    d4e0:	20002d16 	blt	r4,zero,d598 <__floatsidf+0xd4>
    d4e4:	8809883a 	mov	r4,r17
    d4e8:	000d6480 	call	d648 <__clzsi2>
    d4ec:	01410784 	movi	r5,1054
    d4f0:	288bc83a 	sub	r5,r5,r2
    d4f4:	01010cc4 	movi	r4,1075
    d4f8:	2149c83a 	sub	r4,r4,r5
    d4fc:	00c007c4 	movi	r3,31
    d500:	1900160e 	bge	r3,r4,d55c <__floatsidf+0x98>
    d504:	00c104c4 	movi	r3,1043
    d508:	1947c83a 	sub	r3,r3,r5
    d50c:	88c6983a 	sll	r3,r17,r3
    d510:	00800434 	movhi	r2,16
    d514:	10bfffc4 	addi	r2,r2,-1
    d518:	1886703a 	and	r3,r3,r2
    d51c:	2941ffcc 	andi	r5,r5,2047
    d520:	800d883a 	mov	r6,r16
    d524:	0005883a 	mov	r2,zero
    d528:	280a953a 	slli	r5,r5,20
    d52c:	31803fcc 	andi	r6,r6,255
    d530:	01000434 	movhi	r4,16
    d534:	300c97fa 	slli	r6,r6,31
    d538:	213fffc4 	addi	r4,r4,-1
    d53c:	1906703a 	and	r3,r3,r4
    d540:	1946b03a 	or	r3,r3,r5
    d544:	1986b03a 	or	r3,r3,r6
    d548:	dfc00217 	ldw	ra,8(sp)
    d54c:	dc400117 	ldw	r17,4(sp)
    d550:	dc000017 	ldw	r16,0(sp)
    d554:	dec00304 	addi	sp,sp,12
    d558:	f800283a 	ret
    d55c:	00c002c4 	movi	r3,11
    d560:	1887c83a 	sub	r3,r3,r2
    d564:	88c6d83a 	srl	r3,r17,r3
    d568:	8904983a 	sll	r2,r17,r4
    d56c:	01000434 	movhi	r4,16
    d570:	213fffc4 	addi	r4,r4,-1
    d574:	2941ffcc 	andi	r5,r5,2047
    d578:	1906703a 	and	r3,r3,r4
    d57c:	800d883a 	mov	r6,r16
    d580:	003fe906 	br	d528 <__alt_data_end+0xfffc4148>
    d584:	000d883a 	mov	r6,zero
    d588:	000b883a 	mov	r5,zero
    d58c:	0007883a 	mov	r3,zero
    d590:	0005883a 	mov	r2,zero
    d594:	003fe406 	br	d528 <__alt_data_end+0xfffc4148>
    d598:	0123c83a 	sub	r17,zero,r4
    d59c:	003fd106 	br	d4e4 <__alt_data_end+0xfffc4104>

0000d5a0 <__floatunsidf>:
    d5a0:	defffe04 	addi	sp,sp,-8
    d5a4:	dc000015 	stw	r16,0(sp)
    d5a8:	dfc00115 	stw	ra,4(sp)
    d5ac:	2021883a 	mov	r16,r4
    d5b0:	20002226 	beq	r4,zero,d63c <__floatunsidf+0x9c>
    d5b4:	000d6480 	call	d648 <__clzsi2>
    d5b8:	01010784 	movi	r4,1054
    d5bc:	2089c83a 	sub	r4,r4,r2
    d5c0:	01810cc4 	movi	r6,1075
    d5c4:	310dc83a 	sub	r6,r6,r4
    d5c8:	00c007c4 	movi	r3,31
    d5cc:	1980120e 	bge	r3,r6,d618 <__floatunsidf+0x78>
    d5d0:	00c104c4 	movi	r3,1043
    d5d4:	1907c83a 	sub	r3,r3,r4
    d5d8:	80ca983a 	sll	r5,r16,r3
    d5dc:	00800434 	movhi	r2,16
    d5e0:	10bfffc4 	addi	r2,r2,-1
    d5e4:	2101ffcc 	andi	r4,r4,2047
    d5e8:	0021883a 	mov	r16,zero
    d5ec:	288a703a 	and	r5,r5,r2
    d5f0:	2008953a 	slli	r4,r4,20
    d5f4:	00c00434 	movhi	r3,16
    d5f8:	18ffffc4 	addi	r3,r3,-1
    d5fc:	28c6703a 	and	r3,r5,r3
    d600:	8005883a 	mov	r2,r16
    d604:	1906b03a 	or	r3,r3,r4
    d608:	dfc00117 	ldw	ra,4(sp)
    d60c:	dc000017 	ldw	r16,0(sp)
    d610:	dec00204 	addi	sp,sp,8
    d614:	f800283a 	ret
    d618:	00c002c4 	movi	r3,11
    d61c:	188bc83a 	sub	r5,r3,r2
    d620:	814ad83a 	srl	r5,r16,r5
    d624:	00c00434 	movhi	r3,16
    d628:	18ffffc4 	addi	r3,r3,-1
    d62c:	81a0983a 	sll	r16,r16,r6
    d630:	2101ffcc 	andi	r4,r4,2047
    d634:	28ca703a 	and	r5,r5,r3
    d638:	003fed06 	br	d5f0 <__alt_data_end+0xfffc4210>
    d63c:	0009883a 	mov	r4,zero
    d640:	000b883a 	mov	r5,zero
    d644:	003fea06 	br	d5f0 <__alt_data_end+0xfffc4210>

0000d648 <__clzsi2>:
    d648:	00bfffd4 	movui	r2,65535
    d64c:	11000536 	bltu	r2,r4,d664 <__clzsi2+0x1c>
    d650:	00803fc4 	movi	r2,255
    d654:	11000f36 	bltu	r2,r4,d694 <__clzsi2+0x4c>
    d658:	00800804 	movi	r2,32
    d65c:	0007883a 	mov	r3,zero
    d660:	00000506 	br	d678 <__clzsi2+0x30>
    d664:	00804034 	movhi	r2,256
    d668:	10bfffc4 	addi	r2,r2,-1
    d66c:	11000c2e 	bgeu	r2,r4,d6a0 <__clzsi2+0x58>
    d670:	00800204 	movi	r2,8
    d674:	00c00604 	movi	r3,24
    d678:	20c8d83a 	srl	r4,r4,r3
    d67c:	00c00074 	movhi	r3,1
    d680:	18c20004 	addi	r3,r3,2048
    d684:	1909883a 	add	r4,r3,r4
    d688:	20c00003 	ldbu	r3,0(r4)
    d68c:	10c5c83a 	sub	r2,r2,r3
    d690:	f800283a 	ret
    d694:	00800604 	movi	r2,24
    d698:	00c00204 	movi	r3,8
    d69c:	003ff606 	br	d678 <__alt_data_end+0xfffc4298>
    d6a0:	00800404 	movi	r2,16
    d6a4:	1007883a 	mov	r3,r2
    d6a8:	003ff306 	br	d678 <__alt_data_end+0xfffc4298>

0000d6ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d6ac:	defffe04 	addi	sp,sp,-8
    d6b0:	dfc00115 	stw	ra,4(sp)
    d6b4:	df000015 	stw	fp,0(sp)
    d6b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d6bc:	00800074 	movhi	r2,1
    d6c0:	10890304 	addi	r2,r2,9228
    d6c4:	10800017 	ldw	r2,0(r2)
    d6c8:	10000526 	beq	r2,zero,d6e0 <alt_get_errno+0x34>
    d6cc:	00800074 	movhi	r2,1
    d6d0:	10890304 	addi	r2,r2,9228
    d6d4:	10800017 	ldw	r2,0(r2)
    d6d8:	103ee83a 	callr	r2
    d6dc:	00000206 	br	d6e8 <alt_get_errno+0x3c>
    d6e0:	00800074 	movhi	r2,1
    d6e4:	108fc904 	addi	r2,r2,16164
}
    d6e8:	e037883a 	mov	sp,fp
    d6ec:	dfc00117 	ldw	ra,4(sp)
    d6f0:	df000017 	ldw	fp,0(sp)
    d6f4:	dec00204 	addi	sp,sp,8
    d6f8:	f800283a 	ret

0000d6fc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d6fc:	defffb04 	addi	sp,sp,-20
    d700:	dfc00415 	stw	ra,16(sp)
    d704:	df000315 	stw	fp,12(sp)
    d708:	df000304 	addi	fp,sp,12
    d70c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d710:	e0bfff17 	ldw	r2,-4(fp)
    d714:	10000816 	blt	r2,zero,d738 <close+0x3c>
    d718:	01400304 	movi	r5,12
    d71c:	e13fff17 	ldw	r4,-4(fp)
    d720:	000ade00 	call	ade0 <__mulsi3>
    d724:	1007883a 	mov	r3,r2
    d728:	00800074 	movhi	r2,1
    d72c:	10848004 	addi	r2,r2,4608
    d730:	1885883a 	add	r2,r3,r2
    d734:	00000106 	br	d73c <close+0x40>
    d738:	0005883a 	mov	r2,zero
    d73c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d740:	e0bffd17 	ldw	r2,-12(fp)
    d744:	10001926 	beq	r2,zero,d7ac <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d748:	e0bffd17 	ldw	r2,-12(fp)
    d74c:	10800017 	ldw	r2,0(r2)
    d750:	10800417 	ldw	r2,16(r2)
    d754:	10000626 	beq	r2,zero,d770 <close+0x74>
    d758:	e0bffd17 	ldw	r2,-12(fp)
    d75c:	10800017 	ldw	r2,0(r2)
    d760:	10800417 	ldw	r2,16(r2)
    d764:	e13ffd17 	ldw	r4,-12(fp)
    d768:	103ee83a 	callr	r2
    d76c:	00000106 	br	d774 <close+0x78>
    d770:	0005883a 	mov	r2,zero
    d774:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d778:	e13fff17 	ldw	r4,-4(fp)
    d77c:	000de340 	call	de34 <alt_release_fd>
    if (rval < 0)
    d780:	e0bffe17 	ldw	r2,-8(fp)
    d784:	1000070e 	bge	r2,zero,d7a4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    d788:	000d6ac0 	call	d6ac <alt_get_errno>
    d78c:	1007883a 	mov	r3,r2
    d790:	e0bffe17 	ldw	r2,-8(fp)
    d794:	0085c83a 	sub	r2,zero,r2
    d798:	18800015 	stw	r2,0(r3)
      return -1;
    d79c:	00bfffc4 	movi	r2,-1
    d7a0:	00000706 	br	d7c0 <close+0xc4>
    }
    return 0;
    d7a4:	0005883a 	mov	r2,zero
    d7a8:	00000506 	br	d7c0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d7ac:	000d6ac0 	call	d6ac <alt_get_errno>
    d7b0:	1007883a 	mov	r3,r2
    d7b4:	00801444 	movi	r2,81
    d7b8:	18800015 	stw	r2,0(r3)
    return -1;
    d7bc:	00bfffc4 	movi	r2,-1
  }
}
    d7c0:	e037883a 	mov	sp,fp
    d7c4:	dfc00117 	ldw	ra,4(sp)
    d7c8:	df000017 	ldw	fp,0(sp)
    d7cc:	dec00204 	addi	sp,sp,8
    d7d0:	f800283a 	ret

0000d7d4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d7d4:	defffc04 	addi	sp,sp,-16
    d7d8:	df000315 	stw	fp,12(sp)
    d7dc:	df000304 	addi	fp,sp,12
    d7e0:	e13ffd15 	stw	r4,-12(fp)
    d7e4:	e17ffe15 	stw	r5,-8(fp)
    d7e8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d7ec:	e0bfff17 	ldw	r2,-4(fp)
}
    d7f0:	e037883a 	mov	sp,fp
    d7f4:	df000017 	ldw	fp,0(sp)
    d7f8:	dec00104 	addi	sp,sp,4
    d7fc:	f800283a 	ret

0000d800 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d800:	defffe04 	addi	sp,sp,-8
    d804:	dfc00115 	stw	ra,4(sp)
    d808:	df000015 	stw	fp,0(sp)
    d80c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d810:	00800074 	movhi	r2,1
    d814:	10890304 	addi	r2,r2,9228
    d818:	10800017 	ldw	r2,0(r2)
    d81c:	10000526 	beq	r2,zero,d834 <alt_get_errno+0x34>
    d820:	00800074 	movhi	r2,1
    d824:	10890304 	addi	r2,r2,9228
    d828:	10800017 	ldw	r2,0(r2)
    d82c:	103ee83a 	callr	r2
    d830:	00000206 	br	d83c <alt_get_errno+0x3c>
    d834:	00800074 	movhi	r2,1
    d838:	108fc904 	addi	r2,r2,16164
}
    d83c:	e037883a 	mov	sp,fp
    d840:	dfc00117 	ldw	ra,4(sp)
    d844:	df000017 	ldw	fp,0(sp)
    d848:	dec00204 	addi	sp,sp,8
    d84c:	f800283a 	ret

0000d850 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d850:	defffb04 	addi	sp,sp,-20
    d854:	dfc00415 	stw	ra,16(sp)
    d858:	df000315 	stw	fp,12(sp)
    d85c:	df000304 	addi	fp,sp,12
    d860:	e13ffe15 	stw	r4,-8(fp)
    d864:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d868:	e0bffe17 	ldw	r2,-8(fp)
    d86c:	10000816 	blt	r2,zero,d890 <fstat+0x40>
    d870:	01400304 	movi	r5,12
    d874:	e13ffe17 	ldw	r4,-8(fp)
    d878:	000ade00 	call	ade0 <__mulsi3>
    d87c:	1007883a 	mov	r3,r2
    d880:	00800074 	movhi	r2,1
    d884:	10848004 	addi	r2,r2,4608
    d888:	1885883a 	add	r2,r3,r2
    d88c:	00000106 	br	d894 <fstat+0x44>
    d890:	0005883a 	mov	r2,zero
    d894:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d898:	e0bffd17 	ldw	r2,-12(fp)
    d89c:	10001026 	beq	r2,zero,d8e0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d8a0:	e0bffd17 	ldw	r2,-12(fp)
    d8a4:	10800017 	ldw	r2,0(r2)
    d8a8:	10800817 	ldw	r2,32(r2)
    d8ac:	10000726 	beq	r2,zero,d8cc <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    d8b0:	e0bffd17 	ldw	r2,-12(fp)
    d8b4:	10800017 	ldw	r2,0(r2)
    d8b8:	10800817 	ldw	r2,32(r2)
    d8bc:	e17fff17 	ldw	r5,-4(fp)
    d8c0:	e13ffd17 	ldw	r4,-12(fp)
    d8c4:	103ee83a 	callr	r2
    d8c8:	00000a06 	br	d8f4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d8cc:	e0bfff17 	ldw	r2,-4(fp)
    d8d0:	00c80004 	movi	r3,8192
    d8d4:	10c00115 	stw	r3,4(r2)
      return 0;
    d8d8:	0005883a 	mov	r2,zero
    d8dc:	00000506 	br	d8f4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d8e0:	000d8000 	call	d800 <alt_get_errno>
    d8e4:	1007883a 	mov	r3,r2
    d8e8:	00801444 	movi	r2,81
    d8ec:	18800015 	stw	r2,0(r3)
    return -1;
    d8f0:	00bfffc4 	movi	r2,-1
  }
}
    d8f4:	e037883a 	mov	sp,fp
    d8f8:	dfc00117 	ldw	ra,4(sp)
    d8fc:	df000017 	ldw	fp,0(sp)
    d900:	dec00204 	addi	sp,sp,8
    d904:	f800283a 	ret

0000d908 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d908:	defffe04 	addi	sp,sp,-8
    d90c:	dfc00115 	stw	ra,4(sp)
    d910:	df000015 	stw	fp,0(sp)
    d914:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d918:	00800074 	movhi	r2,1
    d91c:	10890304 	addi	r2,r2,9228
    d920:	10800017 	ldw	r2,0(r2)
    d924:	10000526 	beq	r2,zero,d93c <alt_get_errno+0x34>
    d928:	00800074 	movhi	r2,1
    d92c:	10890304 	addi	r2,r2,9228
    d930:	10800017 	ldw	r2,0(r2)
    d934:	103ee83a 	callr	r2
    d938:	00000206 	br	d944 <alt_get_errno+0x3c>
    d93c:	00800074 	movhi	r2,1
    d940:	108fc904 	addi	r2,r2,16164
}
    d944:	e037883a 	mov	sp,fp
    d948:	dfc00117 	ldw	ra,4(sp)
    d94c:	df000017 	ldw	fp,0(sp)
    d950:	dec00204 	addi	sp,sp,8
    d954:	f800283a 	ret

0000d958 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d958:	deffed04 	addi	sp,sp,-76
    d95c:	dfc01215 	stw	ra,72(sp)
    d960:	df001115 	stw	fp,68(sp)
    d964:	df001104 	addi	fp,sp,68
    d968:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d96c:	e0bfff17 	ldw	r2,-4(fp)
    d970:	10000816 	blt	r2,zero,d994 <isatty+0x3c>
    d974:	01400304 	movi	r5,12
    d978:	e13fff17 	ldw	r4,-4(fp)
    d97c:	000ade00 	call	ade0 <__mulsi3>
    d980:	1007883a 	mov	r3,r2
    d984:	00800074 	movhi	r2,1
    d988:	10848004 	addi	r2,r2,4608
    d98c:	1885883a 	add	r2,r3,r2
    d990:	00000106 	br	d998 <isatty+0x40>
    d994:	0005883a 	mov	r2,zero
    d998:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d99c:	e0bfef17 	ldw	r2,-68(fp)
    d9a0:	10000e26 	beq	r2,zero,d9dc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d9a4:	e0bfef17 	ldw	r2,-68(fp)
    d9a8:	10800017 	ldw	r2,0(r2)
    d9ac:	10800817 	ldw	r2,32(r2)
    d9b0:	1000021e 	bne	r2,zero,d9bc <isatty+0x64>
    {
      return 1;
    d9b4:	00800044 	movi	r2,1
    d9b8:	00000d06 	br	d9f0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d9bc:	e0bff004 	addi	r2,fp,-64
    d9c0:	100b883a 	mov	r5,r2
    d9c4:	e13fff17 	ldw	r4,-4(fp)
    d9c8:	000d8500 	call	d850 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d9cc:	e0bff117 	ldw	r2,-60(fp)
    d9d0:	10880020 	cmpeqi	r2,r2,8192
    d9d4:	10803fcc 	andi	r2,r2,255
    d9d8:	00000506 	br	d9f0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d9dc:	000d9080 	call	d908 <alt_get_errno>
    d9e0:	1007883a 	mov	r3,r2
    d9e4:	00801444 	movi	r2,81
    d9e8:	18800015 	stw	r2,0(r3)
    return 0;
    d9ec:	0005883a 	mov	r2,zero
  }
}
    d9f0:	e037883a 	mov	sp,fp
    d9f4:	dfc00117 	ldw	ra,4(sp)
    d9f8:	df000017 	ldw	fp,0(sp)
    d9fc:	dec00204 	addi	sp,sp,8
    da00:	f800283a 	ret

0000da04 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    da04:	defffc04 	addi	sp,sp,-16
    da08:	df000315 	stw	fp,12(sp)
    da0c:	df000304 	addi	fp,sp,12
    da10:	e13ffd15 	stw	r4,-12(fp)
    da14:	e17ffe15 	stw	r5,-8(fp)
    da18:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    da1c:	e0fffe17 	ldw	r3,-8(fp)
    da20:	e0bffd17 	ldw	r2,-12(fp)
    da24:	18800c26 	beq	r3,r2,da58 <alt_load_section+0x54>
  {
    while( to != end )
    da28:	00000806 	br	da4c <alt_load_section+0x48>
    {
      *to++ = *from++;
    da2c:	e0bffe17 	ldw	r2,-8(fp)
    da30:	10c00104 	addi	r3,r2,4
    da34:	e0fffe15 	stw	r3,-8(fp)
    da38:	e0fffd17 	ldw	r3,-12(fp)
    da3c:	19000104 	addi	r4,r3,4
    da40:	e13ffd15 	stw	r4,-12(fp)
    da44:	18c00017 	ldw	r3,0(r3)
    da48:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    da4c:	e0fffe17 	ldw	r3,-8(fp)
    da50:	e0bfff17 	ldw	r2,-4(fp)
    da54:	18bff51e 	bne	r3,r2,da2c <__alt_data_end+0xfffc464c>
    {
      *to++ = *from++;
    }
  }
}
    da58:	0001883a 	nop
    da5c:	e037883a 	mov	sp,fp
    da60:	df000017 	ldw	fp,0(sp)
    da64:	dec00104 	addi	sp,sp,4
    da68:	f800283a 	ret

0000da6c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    da6c:	defffe04 	addi	sp,sp,-8
    da70:	dfc00115 	stw	ra,4(sp)
    da74:	df000015 	stw	fp,0(sp)
    da78:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    da7c:	01800074 	movhi	r6,1
    da80:	31890804 	addi	r6,r6,9248
    da84:	01400074 	movhi	r5,1
    da88:	29424d04 	addi	r5,r5,2356
    da8c:	01000074 	movhi	r4,1
    da90:	21090804 	addi	r4,r4,9248
    da94:	000da040 	call	da04 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    da98:	01800034 	movhi	r6,0
    da9c:	31808c04 	addi	r6,r6,560
    daa0:	01400034 	movhi	r5,0
    daa4:	29400804 	addi	r5,r5,32
    daa8:	01000034 	movhi	r4,0
    daac:	21000804 	addi	r4,r4,32
    dab0:	000da040 	call	da04 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    dab4:	01800074 	movhi	r6,1
    dab8:	31824d04 	addi	r6,r6,2356
    dabc:	01400074 	movhi	r5,1
    dac0:	29413d04 	addi	r5,r5,1268
    dac4:	01000074 	movhi	r4,1
    dac8:	21013d04 	addi	r4,r4,1268
    dacc:	000da040 	call	da04 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    dad0:	000f3bc0 	call	f3bc <alt_dcache_flush_all>
  alt_icache_flush_all();
    dad4:	000f5900 	call	f590 <alt_icache_flush_all>
}
    dad8:	0001883a 	nop
    dadc:	e037883a 	mov	sp,fp
    dae0:	dfc00117 	ldw	ra,4(sp)
    dae4:	df000017 	ldw	fp,0(sp)
    dae8:	dec00204 	addi	sp,sp,8
    daec:	f800283a 	ret

0000daf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    daf0:	defffe04 	addi	sp,sp,-8
    daf4:	dfc00115 	stw	ra,4(sp)
    daf8:	df000015 	stw	fp,0(sp)
    dafc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    db00:	00800074 	movhi	r2,1
    db04:	10890304 	addi	r2,r2,9228
    db08:	10800017 	ldw	r2,0(r2)
    db0c:	10000526 	beq	r2,zero,db24 <alt_get_errno+0x34>
    db10:	00800074 	movhi	r2,1
    db14:	10890304 	addi	r2,r2,9228
    db18:	10800017 	ldw	r2,0(r2)
    db1c:	103ee83a 	callr	r2
    db20:	00000206 	br	db2c <alt_get_errno+0x3c>
    db24:	00800074 	movhi	r2,1
    db28:	108fc904 	addi	r2,r2,16164
}
    db2c:	e037883a 	mov	sp,fp
    db30:	dfc00117 	ldw	ra,4(sp)
    db34:	df000017 	ldw	fp,0(sp)
    db38:	dec00204 	addi	sp,sp,8
    db3c:	f800283a 	ret

0000db40 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    db40:	defff904 	addi	sp,sp,-28
    db44:	dfc00615 	stw	ra,24(sp)
    db48:	df000515 	stw	fp,20(sp)
    db4c:	df000504 	addi	fp,sp,20
    db50:	e13ffd15 	stw	r4,-12(fp)
    db54:	e17ffe15 	stw	r5,-8(fp)
    db58:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    db5c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    db60:	e0bffd17 	ldw	r2,-12(fp)
    db64:	10000816 	blt	r2,zero,db88 <lseek+0x48>
    db68:	01400304 	movi	r5,12
    db6c:	e13ffd17 	ldw	r4,-12(fp)
    db70:	000ade00 	call	ade0 <__mulsi3>
    db74:	1007883a 	mov	r3,r2
    db78:	00800074 	movhi	r2,1
    db7c:	10848004 	addi	r2,r2,4608
    db80:	1885883a 	add	r2,r3,r2
    db84:	00000106 	br	db8c <lseek+0x4c>
    db88:	0005883a 	mov	r2,zero
    db8c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    db90:	e0bffc17 	ldw	r2,-16(fp)
    db94:	10001026 	beq	r2,zero,dbd8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    db98:	e0bffc17 	ldw	r2,-16(fp)
    db9c:	10800017 	ldw	r2,0(r2)
    dba0:	10800717 	ldw	r2,28(r2)
    dba4:	10000926 	beq	r2,zero,dbcc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    dba8:	e0bffc17 	ldw	r2,-16(fp)
    dbac:	10800017 	ldw	r2,0(r2)
    dbb0:	10800717 	ldw	r2,28(r2)
    dbb4:	e1bfff17 	ldw	r6,-4(fp)
    dbb8:	e17ffe17 	ldw	r5,-8(fp)
    dbbc:	e13ffc17 	ldw	r4,-16(fp)
    dbc0:	103ee83a 	callr	r2
    dbc4:	e0bffb15 	stw	r2,-20(fp)
    dbc8:	00000506 	br	dbe0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    dbcc:	00bfde84 	movi	r2,-134
    dbd0:	e0bffb15 	stw	r2,-20(fp)
    dbd4:	00000206 	br	dbe0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    dbd8:	00bfebc4 	movi	r2,-81
    dbdc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    dbe0:	e0bffb17 	ldw	r2,-20(fp)
    dbe4:	1000070e 	bge	r2,zero,dc04 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    dbe8:	000daf00 	call	daf0 <alt_get_errno>
    dbec:	1007883a 	mov	r3,r2
    dbf0:	e0bffb17 	ldw	r2,-20(fp)
    dbf4:	0085c83a 	sub	r2,zero,r2
    dbf8:	18800015 	stw	r2,0(r3)
    rc = -1;
    dbfc:	00bfffc4 	movi	r2,-1
    dc00:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    dc04:	e0bffb17 	ldw	r2,-20(fp)
}
    dc08:	e037883a 	mov	sp,fp
    dc0c:	dfc00117 	ldw	ra,4(sp)
    dc10:	df000017 	ldw	fp,0(sp)
    dc14:	dec00204 	addi	sp,sp,8
    dc18:	f800283a 	ret

0000dc1c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    dc1c:	defffd04 	addi	sp,sp,-12
    dc20:	dfc00215 	stw	ra,8(sp)
    dc24:	df000115 	stw	fp,4(sp)
    dc28:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    dc2c:	0009883a 	mov	r4,zero
    dc30:	000e1200 	call	e120 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    dc34:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    dc38:	000e1580 	call	e158 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    dc3c:	01800074 	movhi	r6,1
    dc40:	31824304 	addi	r6,r6,2316
    dc44:	01400074 	movhi	r5,1
    dc48:	29424304 	addi	r5,r5,2316
    dc4c:	01000074 	movhi	r4,1
    dc50:	21024304 	addi	r4,r4,2316
    dc54:	000f9640 	call	f964 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    dc58:	000f4d00 	call	f4d0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    dc5c:	01000074 	movhi	r4,1
    dc60:	213d4c04 	addi	r4,r4,-2768
    dc64:	00101600 	call	10160 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    dc68:	d0a6d217 	ldw	r2,-25784(gp)
    dc6c:	d0e6d317 	ldw	r3,-25780(gp)
    dc70:	d126d417 	ldw	r4,-25776(gp)
    dc74:	200d883a 	mov	r6,r4
    dc78:	180b883a 	mov	r5,r3
    dc7c:	1009883a 	mov	r4,r2
    dc80:	000026c0 	call	26c <main>
    dc84:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    dc88:	01000044 	movi	r4,1
    dc8c:	000d6fc0 	call	d6fc <close>
  exit (result);
    dc90:	e13fff17 	ldw	r4,-4(fp)
    dc94:	00101740 	call	10174 <exit>

0000dc98 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    dc98:	defffe04 	addi	sp,sp,-8
    dc9c:	df000115 	stw	fp,4(sp)
    dca0:	df000104 	addi	fp,sp,4
    dca4:	e13fff15 	stw	r4,-4(fp)
}
    dca8:	0001883a 	nop
    dcac:	e037883a 	mov	sp,fp
    dcb0:	df000017 	ldw	fp,0(sp)
    dcb4:	dec00104 	addi	sp,sp,4
    dcb8:	f800283a 	ret

0000dcbc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    dcbc:	defffe04 	addi	sp,sp,-8
    dcc0:	df000115 	stw	fp,4(sp)
    dcc4:	df000104 	addi	fp,sp,4
    dcc8:	e13fff15 	stw	r4,-4(fp)
}
    dccc:	0001883a 	nop
    dcd0:	e037883a 	mov	sp,fp
    dcd4:	df000017 	ldw	fp,0(sp)
    dcd8:	dec00104 	addi	sp,sp,4
    dcdc:	f800283a 	ret

0000dce0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dce0:	defffe04 	addi	sp,sp,-8
    dce4:	dfc00115 	stw	ra,4(sp)
    dce8:	df000015 	stw	fp,0(sp)
    dcec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dcf0:	00800074 	movhi	r2,1
    dcf4:	10890304 	addi	r2,r2,9228
    dcf8:	10800017 	ldw	r2,0(r2)
    dcfc:	10000526 	beq	r2,zero,dd14 <alt_get_errno+0x34>
    dd00:	00800074 	movhi	r2,1
    dd04:	10890304 	addi	r2,r2,9228
    dd08:	10800017 	ldw	r2,0(r2)
    dd0c:	103ee83a 	callr	r2
    dd10:	00000206 	br	dd1c <alt_get_errno+0x3c>
    dd14:	00800074 	movhi	r2,1
    dd18:	108fc904 	addi	r2,r2,16164
}
    dd1c:	e037883a 	mov	sp,fp
    dd20:	dfc00117 	ldw	ra,4(sp)
    dd24:	df000017 	ldw	fp,0(sp)
    dd28:	dec00204 	addi	sp,sp,8
    dd2c:	f800283a 	ret

0000dd30 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    dd30:	defff904 	addi	sp,sp,-28
    dd34:	dfc00615 	stw	ra,24(sp)
    dd38:	df000515 	stw	fp,20(sp)
    dd3c:	df000504 	addi	fp,sp,20
    dd40:	e13ffd15 	stw	r4,-12(fp)
    dd44:	e17ffe15 	stw	r5,-8(fp)
    dd48:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dd4c:	e0bffd17 	ldw	r2,-12(fp)
    dd50:	10000816 	blt	r2,zero,dd74 <read+0x44>
    dd54:	01400304 	movi	r5,12
    dd58:	e13ffd17 	ldw	r4,-12(fp)
    dd5c:	000ade00 	call	ade0 <__mulsi3>
    dd60:	1007883a 	mov	r3,r2
    dd64:	00800074 	movhi	r2,1
    dd68:	10848004 	addi	r2,r2,4608
    dd6c:	1885883a 	add	r2,r3,r2
    dd70:	00000106 	br	dd78 <read+0x48>
    dd74:	0005883a 	mov	r2,zero
    dd78:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    dd7c:	e0bffb17 	ldw	r2,-20(fp)
    dd80:	10002226 	beq	r2,zero,de0c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    dd84:	e0bffb17 	ldw	r2,-20(fp)
    dd88:	10800217 	ldw	r2,8(r2)
    dd8c:	108000cc 	andi	r2,r2,3
    dd90:	10800060 	cmpeqi	r2,r2,1
    dd94:	1000181e 	bne	r2,zero,ddf8 <read+0xc8>
        (fd->dev->read))
    dd98:	e0bffb17 	ldw	r2,-20(fp)
    dd9c:	10800017 	ldw	r2,0(r2)
    dda0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    dda4:	10001426 	beq	r2,zero,ddf8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    dda8:	e0bffb17 	ldw	r2,-20(fp)
    ddac:	10800017 	ldw	r2,0(r2)
    ddb0:	10800517 	ldw	r2,20(r2)
    ddb4:	e0ffff17 	ldw	r3,-4(fp)
    ddb8:	180d883a 	mov	r6,r3
    ddbc:	e17ffe17 	ldw	r5,-8(fp)
    ddc0:	e13ffb17 	ldw	r4,-20(fp)
    ddc4:	103ee83a 	callr	r2
    ddc8:	e0bffc15 	stw	r2,-16(fp)
    ddcc:	e0bffc17 	ldw	r2,-16(fp)
    ddd0:	1000070e 	bge	r2,zero,ddf0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    ddd4:	000dce00 	call	dce0 <alt_get_errno>
    ddd8:	1007883a 	mov	r3,r2
    dddc:	e0bffc17 	ldw	r2,-16(fp)
    dde0:	0085c83a 	sub	r2,zero,r2
    dde4:	18800015 	stw	r2,0(r3)
          return -1;
    dde8:	00bfffc4 	movi	r2,-1
    ddec:	00000c06 	br	de20 <read+0xf0>
        }
        return rval;
    ddf0:	e0bffc17 	ldw	r2,-16(fp)
    ddf4:	00000a06 	br	de20 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    ddf8:	000dce00 	call	dce0 <alt_get_errno>
    ddfc:	1007883a 	mov	r3,r2
    de00:	00800344 	movi	r2,13
    de04:	18800015 	stw	r2,0(r3)
    de08:	00000406 	br	de1c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    de0c:	000dce00 	call	dce0 <alt_get_errno>
    de10:	1007883a 	mov	r3,r2
    de14:	00801444 	movi	r2,81
    de18:	18800015 	stw	r2,0(r3)
  }
  return -1;
    de1c:	00bfffc4 	movi	r2,-1
}
    de20:	e037883a 	mov	sp,fp
    de24:	dfc00117 	ldw	ra,4(sp)
    de28:	df000017 	ldw	fp,0(sp)
    de2c:	dec00204 	addi	sp,sp,8
    de30:	f800283a 	ret

0000de34 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    de34:	defffc04 	addi	sp,sp,-16
    de38:	dfc00315 	stw	ra,12(sp)
    de3c:	df000215 	stw	fp,8(sp)
    de40:	dc000115 	stw	r16,4(sp)
    de44:	df000204 	addi	fp,sp,8
    de48:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    de4c:	e0bffe17 	ldw	r2,-8(fp)
    de50:	108000d0 	cmplti	r2,r2,3
    de54:	1000111e 	bne	r2,zero,de9c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    de58:	04000074 	movhi	r16,1
    de5c:	84048004 	addi	r16,r16,4608
    de60:	e0bffe17 	ldw	r2,-8(fp)
    de64:	01400304 	movi	r5,12
    de68:	1009883a 	mov	r4,r2
    de6c:	000ade00 	call	ade0 <__mulsi3>
    de70:	8085883a 	add	r2,r16,r2
    de74:	10800204 	addi	r2,r2,8
    de78:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    de7c:	04000074 	movhi	r16,1
    de80:	84048004 	addi	r16,r16,4608
    de84:	e0bffe17 	ldw	r2,-8(fp)
    de88:	01400304 	movi	r5,12
    de8c:	1009883a 	mov	r4,r2
    de90:	000ade00 	call	ade0 <__mulsi3>
    de94:	8085883a 	add	r2,r16,r2
    de98:	10000015 	stw	zero,0(r2)
  }
}
    de9c:	0001883a 	nop
    dea0:	e6ffff04 	addi	sp,fp,-4
    dea4:	dfc00217 	ldw	ra,8(sp)
    dea8:	df000117 	ldw	fp,4(sp)
    deac:	dc000017 	ldw	r16,0(sp)
    deb0:	dec00304 	addi	sp,sp,12
    deb4:	f800283a 	ret

0000deb8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    deb8:	defff904 	addi	sp,sp,-28
    debc:	df000615 	stw	fp,24(sp)
    dec0:	df000604 	addi	fp,sp,24
    dec4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dec8:	0005303a 	rdctl	r2,status
    decc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ded0:	e0fffe17 	ldw	r3,-8(fp)
    ded4:	00bfff84 	movi	r2,-2
    ded8:	1884703a 	and	r2,r3,r2
    dedc:	1001703a 	wrctl	status,r2
  
  return context;
    dee0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    dee4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    dee8:	d0a00c17 	ldw	r2,-32720(gp)
    deec:	10c000c4 	addi	r3,r2,3
    def0:	00bfff04 	movi	r2,-4
    def4:	1884703a 	and	r2,r3,r2
    def8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    defc:	d0e00c17 	ldw	r3,-32720(gp)
    df00:	e0bfff17 	ldw	r2,-4(fp)
    df04:	1887883a 	add	r3,r3,r2
    df08:	00800174 	movhi	r2,5
    df0c:	10a4f804 	addi	r2,r2,-27680
    df10:	10c0062e 	bgeu	r2,r3,df2c <sbrk+0x74>
    df14:	e0bffb17 	ldw	r2,-20(fp)
    df18:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    df1c:	e0bffa17 	ldw	r2,-24(fp)
    df20:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    df24:	00bfffc4 	movi	r2,-1
    df28:	00000b06 	br	df58 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    df2c:	d0a00c17 	ldw	r2,-32720(gp)
    df30:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    df34:	d0e00c17 	ldw	r3,-32720(gp)
    df38:	e0bfff17 	ldw	r2,-4(fp)
    df3c:	1885883a 	add	r2,r3,r2
    df40:	d0a00c15 	stw	r2,-32720(gp)
    df44:	e0bffb17 	ldw	r2,-20(fp)
    df48:	e0bffc15 	stw	r2,-16(fp)
    df4c:	e0bffc17 	ldw	r2,-16(fp)
    df50:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    df54:	e0bffd17 	ldw	r2,-12(fp)
} 
    df58:	e037883a 	mov	sp,fp
    df5c:	df000017 	ldw	fp,0(sp)
    df60:	dec00104 	addi	sp,sp,4
    df64:	f800283a 	ret

0000df68 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    df68:	defffd04 	addi	sp,sp,-12
    df6c:	dfc00215 	stw	ra,8(sp)
    df70:	df000115 	stw	fp,4(sp)
    df74:	df000104 	addi	fp,sp,4
    df78:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    df7c:	e13fff17 	ldw	r4,-4(fp)
    df80:	000f2640 	call	f264 <alt_busy_sleep>
}
    df84:	e037883a 	mov	sp,fp
    df88:	dfc00117 	ldw	ra,4(sp)
    df8c:	df000017 	ldw	fp,0(sp)
    df90:	dec00204 	addi	sp,sp,8
    df94:	f800283a 	ret

0000df98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    df98:	defffe04 	addi	sp,sp,-8
    df9c:	dfc00115 	stw	ra,4(sp)
    dfa0:	df000015 	stw	fp,0(sp)
    dfa4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dfa8:	00800074 	movhi	r2,1
    dfac:	10890304 	addi	r2,r2,9228
    dfb0:	10800017 	ldw	r2,0(r2)
    dfb4:	10000526 	beq	r2,zero,dfcc <alt_get_errno+0x34>
    dfb8:	00800074 	movhi	r2,1
    dfbc:	10890304 	addi	r2,r2,9228
    dfc0:	10800017 	ldw	r2,0(r2)
    dfc4:	103ee83a 	callr	r2
    dfc8:	00000206 	br	dfd4 <alt_get_errno+0x3c>
    dfcc:	00800074 	movhi	r2,1
    dfd0:	108fc904 	addi	r2,r2,16164
}
    dfd4:	e037883a 	mov	sp,fp
    dfd8:	dfc00117 	ldw	ra,4(sp)
    dfdc:	df000017 	ldw	fp,0(sp)
    dfe0:	dec00204 	addi	sp,sp,8
    dfe4:	f800283a 	ret

0000dfe8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    dfe8:	defff904 	addi	sp,sp,-28
    dfec:	dfc00615 	stw	ra,24(sp)
    dff0:	df000515 	stw	fp,20(sp)
    dff4:	df000504 	addi	fp,sp,20
    dff8:	e13ffd15 	stw	r4,-12(fp)
    dffc:	e17ffe15 	stw	r5,-8(fp)
    e000:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e004:	e0bffd17 	ldw	r2,-12(fp)
    e008:	10000816 	blt	r2,zero,e02c <write+0x44>
    e00c:	01400304 	movi	r5,12
    e010:	e13ffd17 	ldw	r4,-12(fp)
    e014:	000ade00 	call	ade0 <__mulsi3>
    e018:	1007883a 	mov	r3,r2
    e01c:	00800074 	movhi	r2,1
    e020:	10848004 	addi	r2,r2,4608
    e024:	1885883a 	add	r2,r3,r2
    e028:	00000106 	br	e030 <write+0x48>
    e02c:	0005883a 	mov	r2,zero
    e030:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e034:	e0bffb17 	ldw	r2,-20(fp)
    e038:	10002126 	beq	r2,zero,e0c0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    e03c:	e0bffb17 	ldw	r2,-20(fp)
    e040:	10800217 	ldw	r2,8(r2)
    e044:	108000cc 	andi	r2,r2,3
    e048:	10001826 	beq	r2,zero,e0ac <write+0xc4>
    e04c:	e0bffb17 	ldw	r2,-20(fp)
    e050:	10800017 	ldw	r2,0(r2)
    e054:	10800617 	ldw	r2,24(r2)
    e058:	10001426 	beq	r2,zero,e0ac <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    e05c:	e0bffb17 	ldw	r2,-20(fp)
    e060:	10800017 	ldw	r2,0(r2)
    e064:	10800617 	ldw	r2,24(r2)
    e068:	e0ffff17 	ldw	r3,-4(fp)
    e06c:	180d883a 	mov	r6,r3
    e070:	e17ffe17 	ldw	r5,-8(fp)
    e074:	e13ffb17 	ldw	r4,-20(fp)
    e078:	103ee83a 	callr	r2
    e07c:	e0bffc15 	stw	r2,-16(fp)
    e080:	e0bffc17 	ldw	r2,-16(fp)
    e084:	1000070e 	bge	r2,zero,e0a4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    e088:	000df980 	call	df98 <alt_get_errno>
    e08c:	1007883a 	mov	r3,r2
    e090:	e0bffc17 	ldw	r2,-16(fp)
    e094:	0085c83a 	sub	r2,zero,r2
    e098:	18800015 	stw	r2,0(r3)
        return -1;
    e09c:	00bfffc4 	movi	r2,-1
    e0a0:	00000c06 	br	e0d4 <write+0xec>
      }
      return rval;
    e0a4:	e0bffc17 	ldw	r2,-16(fp)
    e0a8:	00000a06 	br	e0d4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    e0ac:	000df980 	call	df98 <alt_get_errno>
    e0b0:	1007883a 	mov	r3,r2
    e0b4:	00800344 	movi	r2,13
    e0b8:	18800015 	stw	r2,0(r3)
    e0bc:	00000406 	br	e0d0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    e0c0:	000df980 	call	df98 <alt_get_errno>
    e0c4:	1007883a 	mov	r3,r2
    e0c8:	00801444 	movi	r2,81
    e0cc:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e0d0:	00bfffc4 	movi	r2,-1
}
    e0d4:	e037883a 	mov	sp,fp
    e0d8:	dfc00117 	ldw	ra,4(sp)
    e0dc:	df000017 	ldw	fp,0(sp)
    e0e0:	dec00204 	addi	sp,sp,8
    e0e4:	f800283a 	ret

0000e0e8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    e0e8:	defffd04 	addi	sp,sp,-12
    e0ec:	dfc00215 	stw	ra,8(sp)
    e0f0:	df000115 	stw	fp,4(sp)
    e0f4:	df000104 	addi	fp,sp,4
    e0f8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    e0fc:	01400074 	movhi	r5,1
    e100:	29490004 	addi	r5,r5,9216
    e104:	e13fff17 	ldw	r4,-4(fp)
    e108:	000f42c0 	call	f42c <alt_dev_llist_insert>
}
    e10c:	e037883a 	mov	sp,fp
    e110:	dfc00117 	ldw	ra,4(sp)
    e114:	df000017 	ldw	fp,0(sp)
    e118:	dec00204 	addi	sp,sp,8
    e11c:	f800283a 	ret

0000e120 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    e120:	defffd04 	addi	sp,sp,-12
    e124:	dfc00215 	stw	ra,8(sp)
    e128:	df000115 	stw	fp,4(sp)
    e12c:	df000104 	addi	fp,sp,4
    e130:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    e134:	000fe280 	call	fe28 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    e138:	00800044 	movi	r2,1
    e13c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    e140:	0001883a 	nop
    e144:	e037883a 	mov	sp,fp
    e148:	dfc00117 	ldw	ra,4(sp)
    e14c:	df000017 	ldw	fp,0(sp)
    e150:	dec00204 	addi	sp,sp,8
    e154:	f800283a 	ret

0000e158 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    e158:	defffe04 	addi	sp,sp,-8
    e15c:	dfc00115 	stw	ra,4(sp)
    e160:	df000015 	stw	fp,0(sp)
    e164:	d839883a 	mov	fp,sp
    ALTERA_AVALON_FIFO_INIT ( FIFO_0, fifo_0);
    e168:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_1, fifo_1);
    e16c:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    e170:	000d883a 	mov	r6,zero
    e174:	000b883a 	mov	r5,zero
    e178:	01000074 	movhi	r4,1
    e17c:	2104ea04 	addi	r4,r4,5032
    e180:	000e8100 	call	e810 <altera_avalon_jtag_uart_init>
    e184:	01000074 	movhi	r4,1
    e188:	2104e004 	addi	r4,r4,4992
    e18c:	000e0e80 	call	e0e8 <alt_dev_reg>
}
    e190:	0001883a 	nop
    e194:	e037883a 	mov	sp,fp
    e198:	dfc00117 	ldw	ra,4(sp)
    e19c:	df000017 	ldw	fp,0(sp)
    e1a0:	dec00204 	addi	sp,sp,8
    e1a4:	f800283a 	ret

0000e1a8 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
    e1a8:	defffa04 	addi	sp,sp,-24
    e1ac:	dfc00515 	stw	ra,20(sp)
    e1b0:	df000415 	stw	fp,16(sp)
    e1b4:	df000404 	addi	fp,sp,16
    e1b8:	e13ffc15 	stw	r4,-16(fp)
    e1bc:	e17ffd15 	stw	r5,-12(fp)
    e1c0:	e1bffe15 	stw	r6,-8(fp)
    e1c4:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
    e1c8:	01400fc4 	movi	r5,63
    e1cc:	e13ffc17 	ldw	r4,-16(fp)
    e1d0:	000e3740 	call	e374 <altera_avalon_fifo_clear_event>
    e1d4:	10000226 	beq	r2,zero,e1e0 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    e1d8:	00bfffc4 	movi	r2,-1
    e1dc:	00001306 	br	e22c <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
    e1e0:	e17ffd17 	ldw	r5,-12(fp)
    e1e4:	e13ffc17 	ldw	r4,-16(fp)
    e1e8:	000e3d40 	call	e3d4 <altera_avalon_fifo_write_ienable>
    e1ec:	10000226 	beq	r2,zero,e1f8 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    e1f0:	00bfff84 	movi	r2,-2
    e1f4:	00000d06 	br	e22c <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
    e1f8:	e17fff17 	ldw	r5,-4(fp)
    e1fc:	e13ffc17 	ldw	r4,-16(fp)
    e200:	000e4300 	call	e430 <altera_avalon_fifo_write_almostfull>
    e204:	10000226 	beq	r2,zero,e210 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    e208:	00bfff44 	movi	r2,-3
    e20c:	00000706 	br	e22c <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
    e210:	e17ffe17 	ldw	r5,-8(fp)
    e214:	e13ffc17 	ldw	r4,-16(fp)
    e218:	000e48c0 	call	e48c <altera_avalon_fifo_write_almostempty>
    e21c:	10000226 	beq	r2,zero,e228 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    e220:	00bfff44 	movi	r2,-3
    e224:	00000106 	br	e22c <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
    e228:	0005883a 	mov	r2,zero
}
    e22c:	e037883a 	mov	sp,fp
    e230:	dfc00117 	ldw	ra,4(sp)
    e234:	df000017 	ldw	fp,0(sp)
    e238:	dec00204 	addi	sp,sp,8
    e23c:	f800283a 	ret

0000e240 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    e240:	defffd04 	addi	sp,sp,-12
    e244:	df000215 	stw	fp,8(sp)
    e248:	df000204 	addi	fp,sp,8
    e24c:	e13ffe15 	stw	r4,-8(fp)
    e250:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
    e254:	e0bffe17 	ldw	r2,-8(fp)
    e258:	10800104 	addi	r2,r2,4
    e25c:	10800037 	ldwio	r2,0(r2)
    e260:	1007883a 	mov	r3,r2
    e264:	e0bfff17 	ldw	r2,-4(fp)
    e268:	1884703a 	and	r2,r3,r2
}
    e26c:	e037883a 	mov	sp,fp
    e270:	df000017 	ldw	fp,0(sp)
    e274:	dec00104 	addi	sp,sp,4
    e278:	f800283a 	ret

0000e27c <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
    e27c:	defffd04 	addi	sp,sp,-12
    e280:	df000215 	stw	fp,8(sp)
    e284:	df000204 	addi	fp,sp,8
    e288:	e13ffe15 	stw	r4,-8(fp)
    e28c:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
    e290:	e0bffe17 	ldw	r2,-8(fp)
    e294:	10800304 	addi	r2,r2,12
    e298:	10800037 	ldwio	r2,0(r2)
    e29c:	1007883a 	mov	r3,r2
    e2a0:	e0bfff17 	ldw	r2,-4(fp)
    e2a4:	1884703a 	and	r2,r3,r2
}
    e2a8:	e037883a 	mov	sp,fp
    e2ac:	df000017 	ldw	fp,0(sp)
    e2b0:	dec00104 	addi	sp,sp,4
    e2b4:	f800283a 	ret

0000e2b8 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
    e2b8:	defffe04 	addi	sp,sp,-8
    e2bc:	df000115 	stw	fp,4(sp)
    e2c0:	df000104 	addi	fp,sp,4
    e2c4:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
    e2c8:	e0bfff17 	ldw	r2,-4(fp)
    e2cc:	10800404 	addi	r2,r2,16
    e2d0:	10800037 	ldwio	r2,0(r2)
}
    e2d4:	e037883a 	mov	sp,fp
    e2d8:	df000017 	ldw	fp,0(sp)
    e2dc:	dec00104 	addi	sp,sp,4
    e2e0:	f800283a 	ret

0000e2e4 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
    e2e4:	defffe04 	addi	sp,sp,-8
    e2e8:	df000115 	stw	fp,4(sp)
    e2ec:	df000104 	addi	fp,sp,4
    e2f0:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
    e2f4:	e0bfff17 	ldw	r2,-4(fp)
    e2f8:	10800504 	addi	r2,r2,20
    e2fc:	10800037 	ldwio	r2,0(r2)
}
    e300:	e037883a 	mov	sp,fp
    e304:	df000017 	ldw	fp,0(sp)
    e308:	dec00104 	addi	sp,sp,4
    e30c:	f800283a 	ret

0000e310 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
    e310:	defffd04 	addi	sp,sp,-12
    e314:	df000215 	stw	fp,8(sp)
    e318:	df000204 	addi	fp,sp,8
    e31c:	e13ffe15 	stw	r4,-8(fp)
    e320:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
    e324:	e0bffe17 	ldw	r2,-8(fp)
    e328:	10800204 	addi	r2,r2,8
    e32c:	10800037 	ldwio	r2,0(r2)
    e330:	1007883a 	mov	r3,r2
    e334:	e0bfff17 	ldw	r2,-4(fp)
    e338:	1884703a 	and	r2,r3,r2
}
    e33c:	e037883a 	mov	sp,fp
    e340:	df000017 	ldw	fp,0(sp)
    e344:	dec00104 	addi	sp,sp,4
    e348:	f800283a 	ret

0000e34c <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
    e34c:	defffe04 	addi	sp,sp,-8
    e350:	df000115 	stw	fp,4(sp)
    e354:	df000104 	addi	fp,sp,4
    e358:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
    e35c:	e0bfff17 	ldw	r2,-4(fp)
    e360:	10800037 	ldwio	r2,0(r2)
}
    e364:	e037883a 	mov	sp,fp
    e368:	df000017 	ldw	fp,0(sp)
    e36c:	dec00104 	addi	sp,sp,4
    e370:	f800283a 	ret

0000e374 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
    e374:	defffd04 	addi	sp,sp,-12
    e378:	df000215 	stw	fp,8(sp)
    e37c:	df000204 	addi	fp,sp,8
    e380:	e13ffe15 	stw	r4,-8(fp)
    e384:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
    e388:	e0bffe17 	ldw	r2,-8(fp)
    e38c:	10800204 	addi	r2,r2,8
    e390:	1007883a 	mov	r3,r2
    e394:	e0bfff17 	ldw	r2,-4(fp)
    e398:	18800035 	stwio	r2,0(r3)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
    e39c:	e0bffe17 	ldw	r2,-8(fp)
    e3a0:	10800204 	addi	r2,r2,8
    e3a4:	10800037 	ldwio	r2,0(r2)
    e3a8:	1007883a 	mov	r3,r2
    e3ac:	e0bfff17 	ldw	r2,-4(fp)
    e3b0:	1884703a 	and	r2,r3,r2
    e3b4:	1000021e 	bne	r2,zero,e3c0 <altera_avalon_fifo_clear_event+0x4c>
        return ALTERA_AVALON_FIFO_OK;
    e3b8:	0005883a 	mov	r2,zero
    e3bc:	00000106 	br	e3c4 <altera_avalon_fifo_clear_event+0x50>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    e3c0:	00bfffc4 	movi	r2,-1
}
    e3c4:	e037883a 	mov	sp,fp
    e3c8:	df000017 	ldw	fp,0(sp)
    e3cc:	dec00104 	addi	sp,sp,4
    e3d0:	f800283a 	ret

0000e3d4 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    e3d4:	defffd04 	addi	sp,sp,-12
    e3d8:	df000215 	stw	fp,8(sp)
    e3dc:	df000204 	addi	fp,sp,8
    e3e0:	e13ffe15 	stw	r4,-8(fp)
    e3e4:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
    e3e8:	e0bffe17 	ldw	r2,-8(fp)
    e3ec:	10800304 	addi	r2,r2,12
    e3f0:	1007883a 	mov	r3,r2
    e3f4:	e0bfff17 	ldw	r2,-4(fp)
    e3f8:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
    e3fc:	e0bffe17 	ldw	r2,-8(fp)
    e400:	10800304 	addi	r2,r2,12
    e404:	10800037 	ldwio	r2,0(r2)
    e408:	1007883a 	mov	r3,r2
    e40c:	e0bfff17 	ldw	r2,-4(fp)
    e410:	1880021e 	bne	r3,r2,e41c <altera_avalon_fifo_write_ienable+0x48>
        return ALTERA_AVALON_FIFO_OK;
    e414:	0005883a 	mov	r2,zero
    e418:	00000106 	br	e420 <altera_avalon_fifo_write_ienable+0x4c>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    e41c:	00bfff84 	movi	r2,-2
}
    e420:	e037883a 	mov	sp,fp
    e424:	df000017 	ldw	fp,0(sp)
    e428:	dec00104 	addi	sp,sp,4
    e42c:	f800283a 	ret

0000e430 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    e430:	defffd04 	addi	sp,sp,-12
    e434:	df000215 	stw	fp,8(sp)
    e438:	df000204 	addi	fp,sp,8
    e43c:	e13ffe15 	stw	r4,-8(fp)
    e440:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
    e444:	e0bffe17 	ldw	r2,-8(fp)
    e448:	10800404 	addi	r2,r2,16
    e44c:	1007883a 	mov	r3,r2
    e450:	e0bfff17 	ldw	r2,-4(fp)
    e454:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
    e458:	e0bffe17 	ldw	r2,-8(fp)
    e45c:	10800404 	addi	r2,r2,16
    e460:	10800037 	ldwio	r2,0(r2)
    e464:	1007883a 	mov	r3,r2
    e468:	e0bfff17 	ldw	r2,-4(fp)
    e46c:	1880021e 	bne	r3,r2,e478 <altera_avalon_fifo_write_almostfull+0x48>
        return ALTERA_AVALON_FIFO_OK;
    e470:	0005883a 	mov	r2,zero
    e474:	00000106 	br	e47c <altera_avalon_fifo_write_almostfull+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    e478:	00bfff44 	movi	r2,-3
}
    e47c:	e037883a 	mov	sp,fp
    e480:	df000017 	ldw	fp,0(sp)
    e484:	dec00104 	addi	sp,sp,4
    e488:	f800283a 	ret

0000e48c <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    e48c:	defffd04 	addi	sp,sp,-12
    e490:	df000215 	stw	fp,8(sp)
    e494:	df000204 	addi	fp,sp,8
    e498:	e13ffe15 	stw	r4,-8(fp)
    e49c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
    e4a0:	e0bffe17 	ldw	r2,-8(fp)
    e4a4:	10800504 	addi	r2,r2,20
    e4a8:	1007883a 	mov	r3,r2
    e4ac:	e0bfff17 	ldw	r2,-4(fp)
    e4b0:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
    e4b4:	e0bffe17 	ldw	r2,-8(fp)
    e4b8:	10800504 	addi	r2,r2,20
    e4bc:	10800037 	ldwio	r2,0(r2)
    e4c0:	1007883a 	mov	r3,r2
    e4c4:	e0bfff17 	ldw	r2,-4(fp)
    e4c8:	1880021e 	bne	r3,r2,e4d4 <altera_avalon_fifo_write_almostempty+0x48>
        return ALTERA_AVALON_FIFO_OK;
    e4cc:	0005883a 	mov	r2,zero
    e4d0:	00000106 	br	e4d8 <altera_avalon_fifo_write_almostempty+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    e4d4:	00bfff44 	movi	r2,-3
}
    e4d8:	e037883a 	mov	sp,fp
    e4dc:	df000017 	ldw	fp,0(sp)
    e4e0:	dec00104 	addi	sp,sp,4
    e4e4:	f800283a 	ret

0000e4e8 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
    e4e8:	defffb04 	addi	sp,sp,-20
    e4ec:	dfc00415 	stw	ra,16(sp)
    e4f0:	df000315 	stw	fp,12(sp)
    e4f4:	df000304 	addi	fp,sp,12
    e4f8:	e13ffd15 	stw	r4,-12(fp)
    e4fc:	e17ffe15 	stw	r5,-8(fp)
    e500:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
    e504:	01400044 	movi	r5,1
    e508:	e13ffe17 	ldw	r4,-8(fp)
    e50c:	000e2400 	call	e240 <altera_avalon_fifo_read_status>
    e510:	1000051e 	bne	r2,zero,e528 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
    e514:	e0bffd17 	ldw	r2,-12(fp)
    e518:	e0ffff17 	ldw	r3,-4(fp)
    e51c:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
    e520:	0005883a 	mov	r2,zero
    e524:	00000106 	br	e52c <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
    e528:	00bfff04 	movi	r2,-4
    }
}
    e52c:	e037883a 	mov	sp,fp
    e530:	dfc00117 	ldw	ra,4(sp)
    e534:	df000017 	ldw	fp,0(sp)
    e538:	dec00204 	addi	sp,sp,8
    e53c:	f800283a 	ret

0000e540 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    e540:	defffa04 	addi	sp,sp,-24
    e544:	dfc00515 	stw	ra,20(sp)
    e548:	df000415 	stw	fp,16(sp)
    e54c:	df000404 	addi	fp,sp,16
    e550:	e13ffd15 	stw	r4,-12(fp)
    e554:	e17ffe15 	stw	r5,-8(fp)
    e558:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
    e55c:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
    e560:	e0bfff17 	ldw	r2,-4(fp)
    e564:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    e568:	01400084 	movi	r5,2
    e56c:	e13ffe17 	ldw	r4,-8(fp)
    e570:	000e2400 	call	e240 <altera_avalon_fifo_read_status>
    e574:	1000071e 	bne	r2,zero,e594 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
    e578:	e13ffe17 	ldw	r4,-8(fp)
    e57c:	000e34c0 	call	e34c <altera_avalon_fifo_read_level>
    e580:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    e584:	e0bffd17 	ldw	r2,-12(fp)
    e588:	10c00037 	ldwio	r3,0(r2)
    e58c:	e0bfff17 	ldw	r2,-4(fp)
    e590:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
    e594:	e0bffc17 	ldw	r2,-16(fp)
}
    e598:	e037883a 	mov	sp,fp
    e59c:	dfc00117 	ldw	ra,4(sp)
    e5a0:	df000017 	ldw	fp,0(sp)
    e5a4:	dec00204 	addi	sp,sp,8
    e5a8:	f800283a 	ret

0000e5ac <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
    e5ac:	defffc04 	addi	sp,sp,-16
    e5b0:	dfc00315 	stw	ra,12(sp)
    e5b4:	df000215 	stw	fp,8(sp)
    e5b8:	df000204 	addi	fp,sp,8
    e5bc:	e13ffe15 	stw	r4,-8(fp)
    e5c0:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    e5c4:	01400084 	movi	r5,2
    e5c8:	e13fff17 	ldw	r4,-4(fp)
    e5cc:	000e2400 	call	e240 <altera_avalon_fifo_read_status>
    e5d0:	1000031e 	bne	r2,zero,e5e0 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    e5d4:	e0bffe17 	ldw	r2,-8(fp)
    e5d8:	10800037 	ldwio	r2,0(r2)
    e5dc:	00000106 	br	e5e4 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
    e5e0:	0005883a 	mov	r2,zero
}
    e5e4:	e037883a 	mov	sp,fp
    e5e8:	dfc00117 	ldw	ra,4(sp)
    e5ec:	df000017 	ldw	fp,0(sp)
    e5f0:	dec00204 	addi	sp,sp,8
    e5f4:	f800283a 	ret

0000e5f8 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
    e5f8:	defffb04 	addi	sp,sp,-20
    e5fc:	dfc00415 	stw	ra,16(sp)
    e600:	df000315 	stw	fp,12(sp)
    e604:	df000304 	addi	fp,sp,12
    e608:	e13ffd15 	stw	r4,-12(fp)
    e60c:	e17ffe15 	stw	r5,-8(fp)
    e610:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
    e614:	01400044 	movi	r5,1
    e618:	e13ffe17 	ldw	r4,-8(fp)
    e61c:	000e2400 	call	e240 <altera_avalon_fifo_read_status>
    e620:	1000071e 	bne	r2,zero,e640 <altera_avalon_fifo_write_other_info+0x48>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
    e624:	e0bffd17 	ldw	r2,-12(fp)
    e628:	10800104 	addi	r2,r2,4
    e62c:	1007883a 	mov	r3,r2
    e630:	e0bfff17 	ldw	r2,-4(fp)
    e634:	18800035 	stwio	r2,0(r3)
	return ALTERA_AVALON_FIFO_OK;
    e638:	0005883a 	mov	r2,zero
    e63c:	00000106 	br	e644 <altera_avalon_fifo_write_other_info+0x4c>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
    e640:	00bfff04 	movi	r2,-4
    }
}
    e644:	e037883a 	mov	sp,fp
    e648:	dfc00117 	ldw	ra,4(sp)
    e64c:	df000017 	ldw	fp,0(sp)
    e650:	dec00204 	addi	sp,sp,8
    e654:	f800283a 	ret

0000e658 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
    e658:	defffe04 	addi	sp,sp,-8
    e65c:	df000115 	stw	fp,4(sp)
    e660:	df000104 	addi	fp,sp,4
    e664:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
    e668:	e0bfff17 	ldw	r2,-4(fp)
    e66c:	10800104 	addi	r2,r2,4
    e670:	10800037 	ldwio	r2,0(r2)
}
    e674:	e037883a 	mov	sp,fp
    e678:	df000017 	ldw	fp,0(sp)
    e67c:	dec00104 	addi	sp,sp,4
    e680:	f800283a 	ret

0000e684 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
    e684:	defffe04 	addi	sp,sp,-8
    e688:	df000115 	stw	fp,4(sp)
    e68c:	df000104 	addi	fp,sp,4
    e690:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
    e694:	e0bfff17 	ldw	r2,-4(fp)
    e698:	10800037 	ldwio	r2,0(r2)
}
    e69c:	e037883a 	mov	sp,fp
    e6a0:	df000017 	ldw	fp,0(sp)
    e6a4:	dec00104 	addi	sp,sp,4
    e6a8:	f800283a 	ret

0000e6ac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    e6ac:	defffa04 	addi	sp,sp,-24
    e6b0:	dfc00515 	stw	ra,20(sp)
    e6b4:	df000415 	stw	fp,16(sp)
    e6b8:	df000404 	addi	fp,sp,16
    e6bc:	e13ffd15 	stw	r4,-12(fp)
    e6c0:	e17ffe15 	stw	r5,-8(fp)
    e6c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e6c8:	e0bffd17 	ldw	r2,-12(fp)
    e6cc:	10800017 	ldw	r2,0(r2)
    e6d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    e6d4:	e0bffc17 	ldw	r2,-16(fp)
    e6d8:	10c00a04 	addi	r3,r2,40
    e6dc:	e0bffd17 	ldw	r2,-12(fp)
    e6e0:	10800217 	ldw	r2,8(r2)
    e6e4:	100f883a 	mov	r7,r2
    e6e8:	e1bfff17 	ldw	r6,-4(fp)
    e6ec:	e17ffe17 	ldw	r5,-8(fp)
    e6f0:	1809883a 	mov	r4,r3
    e6f4:	000ece40 	call	ece4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    e6f8:	e037883a 	mov	sp,fp
    e6fc:	dfc00117 	ldw	ra,4(sp)
    e700:	df000017 	ldw	fp,0(sp)
    e704:	dec00204 	addi	sp,sp,8
    e708:	f800283a 	ret

0000e70c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    e70c:	defffa04 	addi	sp,sp,-24
    e710:	dfc00515 	stw	ra,20(sp)
    e714:	df000415 	stw	fp,16(sp)
    e718:	df000404 	addi	fp,sp,16
    e71c:	e13ffd15 	stw	r4,-12(fp)
    e720:	e17ffe15 	stw	r5,-8(fp)
    e724:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e728:	e0bffd17 	ldw	r2,-12(fp)
    e72c:	10800017 	ldw	r2,0(r2)
    e730:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    e734:	e0bffc17 	ldw	r2,-16(fp)
    e738:	10c00a04 	addi	r3,r2,40
    e73c:	e0bffd17 	ldw	r2,-12(fp)
    e740:	10800217 	ldw	r2,8(r2)
    e744:	100f883a 	mov	r7,r2
    e748:	e1bfff17 	ldw	r6,-4(fp)
    e74c:	e17ffe17 	ldw	r5,-8(fp)
    e750:	1809883a 	mov	r4,r3
    e754:	000ef000 	call	ef00 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    e758:	e037883a 	mov	sp,fp
    e75c:	dfc00117 	ldw	ra,4(sp)
    e760:	df000017 	ldw	fp,0(sp)
    e764:	dec00204 	addi	sp,sp,8
    e768:	f800283a 	ret

0000e76c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    e76c:	defffc04 	addi	sp,sp,-16
    e770:	dfc00315 	stw	ra,12(sp)
    e774:	df000215 	stw	fp,8(sp)
    e778:	df000204 	addi	fp,sp,8
    e77c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e780:	e0bfff17 	ldw	r2,-4(fp)
    e784:	10800017 	ldw	r2,0(r2)
    e788:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    e78c:	e0bffe17 	ldw	r2,-8(fp)
    e790:	10c00a04 	addi	r3,r2,40
    e794:	e0bfff17 	ldw	r2,-4(fp)
    e798:	10800217 	ldw	r2,8(r2)
    e79c:	100b883a 	mov	r5,r2
    e7a0:	1809883a 	mov	r4,r3
    e7a4:	000eb8c0 	call	eb8c <altera_avalon_jtag_uart_close>
}
    e7a8:	e037883a 	mov	sp,fp
    e7ac:	dfc00117 	ldw	ra,4(sp)
    e7b0:	df000017 	ldw	fp,0(sp)
    e7b4:	dec00204 	addi	sp,sp,8
    e7b8:	f800283a 	ret

0000e7bc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    e7bc:	defffa04 	addi	sp,sp,-24
    e7c0:	dfc00515 	stw	ra,20(sp)
    e7c4:	df000415 	stw	fp,16(sp)
    e7c8:	df000404 	addi	fp,sp,16
    e7cc:	e13ffd15 	stw	r4,-12(fp)
    e7d0:	e17ffe15 	stw	r5,-8(fp)
    e7d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    e7d8:	e0bffd17 	ldw	r2,-12(fp)
    e7dc:	10800017 	ldw	r2,0(r2)
    e7e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    e7e4:	e0bffc17 	ldw	r2,-16(fp)
    e7e8:	10800a04 	addi	r2,r2,40
    e7ec:	e1bfff17 	ldw	r6,-4(fp)
    e7f0:	e17ffe17 	ldw	r5,-8(fp)
    e7f4:	1009883a 	mov	r4,r2
    e7f8:	000ebf40 	call	ebf4 <altera_avalon_jtag_uart_ioctl>
}
    e7fc:	e037883a 	mov	sp,fp
    e800:	dfc00117 	ldw	ra,4(sp)
    e804:	df000017 	ldw	fp,0(sp)
    e808:	dec00204 	addi	sp,sp,8
    e80c:	f800283a 	ret

0000e810 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    e810:	defffa04 	addi	sp,sp,-24
    e814:	dfc00515 	stw	ra,20(sp)
    e818:	df000415 	stw	fp,16(sp)
    e81c:	df000404 	addi	fp,sp,16
    e820:	e13ffd15 	stw	r4,-12(fp)
    e824:	e17ffe15 	stw	r5,-8(fp)
    e828:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e82c:	e0bffd17 	ldw	r2,-12(fp)
    e830:	00c00044 	movi	r3,1
    e834:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    e838:	e0bffd17 	ldw	r2,-12(fp)
    e83c:	10800017 	ldw	r2,0(r2)
    e840:	10800104 	addi	r2,r2,4
    e844:	1007883a 	mov	r3,r2
    e848:	e0bffd17 	ldw	r2,-12(fp)
    e84c:	10800817 	ldw	r2,32(r2)
    e850:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    e854:	e0bffe17 	ldw	r2,-8(fp)
    e858:	e0ffff17 	ldw	r3,-4(fp)
    e85c:	d8000015 	stw	zero,0(sp)
    e860:	e1fffd17 	ldw	r7,-12(fp)
    e864:	01800074 	movhi	r6,1
    e868:	31ba3604 	addi	r6,r6,-5928
    e86c:	180b883a 	mov	r5,r3
    e870:	1009883a 	mov	r4,r2
    e874:	000f5b00 	call	f5b0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    e878:	e0bffd17 	ldw	r2,-12(fp)
    e87c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    e880:	e0bffd17 	ldw	r2,-12(fp)
    e884:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e888:	00800074 	movhi	r2,1
    e88c:	108fce04 	addi	r2,r2,16184
    e890:	10800017 	ldw	r2,0(r2)
    e894:	e1fffd17 	ldw	r7,-12(fp)
    e898:	01800074 	movhi	r6,1
    e89c:	31bab904 	addi	r6,r6,-5404
    e8a0:	100b883a 	mov	r5,r2
    e8a4:	1809883a 	mov	r4,r3
    e8a8:	000f1240 	call	f124 <alt_alarm_start>
    e8ac:	1000040e 	bge	r2,zero,e8c0 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    e8b0:	e0fffd17 	ldw	r3,-12(fp)
    e8b4:	00a00034 	movhi	r2,32768
    e8b8:	10bfffc4 	addi	r2,r2,-1
    e8bc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    e8c0:	0001883a 	nop
    e8c4:	e037883a 	mov	sp,fp
    e8c8:	dfc00117 	ldw	ra,4(sp)
    e8cc:	df000017 	ldw	fp,0(sp)
    e8d0:	dec00204 	addi	sp,sp,8
    e8d4:	f800283a 	ret

0000e8d8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    e8d8:	defff804 	addi	sp,sp,-32
    e8dc:	df000715 	stw	fp,28(sp)
    e8e0:	df000704 	addi	fp,sp,28
    e8e4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    e8e8:	e0bfff17 	ldw	r2,-4(fp)
    e8ec:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    e8f0:	e0bffb17 	ldw	r2,-20(fp)
    e8f4:	10800017 	ldw	r2,0(r2)
    e8f8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e8fc:	e0bffc17 	ldw	r2,-16(fp)
    e900:	10800104 	addi	r2,r2,4
    e904:	10800037 	ldwio	r2,0(r2)
    e908:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    e90c:	e0bffd17 	ldw	r2,-12(fp)
    e910:	1080c00c 	andi	r2,r2,768
    e914:	10006d26 	beq	r2,zero,eacc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    e918:	e0bffd17 	ldw	r2,-12(fp)
    e91c:	1080400c 	andi	r2,r2,256
    e920:	10003526 	beq	r2,zero,e9f8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    e924:	00800074 	movhi	r2,1
    e928:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e92c:	e0bffb17 	ldw	r2,-20(fp)
    e930:	10800a17 	ldw	r2,40(r2)
    e934:	10800044 	addi	r2,r2,1
    e938:	1081ffcc 	andi	r2,r2,2047
    e93c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    e940:	e0bffb17 	ldw	r2,-20(fp)
    e944:	10c00b17 	ldw	r3,44(r2)
    e948:	e0bffe17 	ldw	r2,-8(fp)
    e94c:	18801526 	beq	r3,r2,e9a4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    e950:	e0bffc17 	ldw	r2,-16(fp)
    e954:	10800037 	ldwio	r2,0(r2)
    e958:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    e95c:	e0bff917 	ldw	r2,-28(fp)
    e960:	10a0000c 	andi	r2,r2,32768
    e964:	10001126 	beq	r2,zero,e9ac <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    e968:	e0bffb17 	ldw	r2,-20(fp)
    e96c:	10800a17 	ldw	r2,40(r2)
    e970:	e0fff917 	ldw	r3,-28(fp)
    e974:	1809883a 	mov	r4,r3
    e978:	e0fffb17 	ldw	r3,-20(fp)
    e97c:	1885883a 	add	r2,r3,r2
    e980:	10800e04 	addi	r2,r2,56
    e984:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e988:	e0bffb17 	ldw	r2,-20(fp)
    e98c:	10800a17 	ldw	r2,40(r2)
    e990:	10800044 	addi	r2,r2,1
    e994:	10c1ffcc 	andi	r3,r2,2047
    e998:	e0bffb17 	ldw	r2,-20(fp)
    e99c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    e9a0:	003fe206 	br	e92c <__alt_data_end+0xfffc554c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    e9a4:	0001883a 	nop
    e9a8:	00000106 	br	e9b0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    e9ac:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    e9b0:	e0bff917 	ldw	r2,-28(fp)
    e9b4:	10bfffec 	andhi	r2,r2,65535
    e9b8:	10000f26 	beq	r2,zero,e9f8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e9bc:	e0bffb17 	ldw	r2,-20(fp)
    e9c0:	10c00817 	ldw	r3,32(r2)
    e9c4:	00bfff84 	movi	r2,-2
    e9c8:	1886703a 	and	r3,r3,r2
    e9cc:	e0bffb17 	ldw	r2,-20(fp)
    e9d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    e9d4:	e0bffc17 	ldw	r2,-16(fp)
    e9d8:	10800104 	addi	r2,r2,4
    e9dc:	1007883a 	mov	r3,r2
    e9e0:	e0bffb17 	ldw	r2,-20(fp)
    e9e4:	10800817 	ldw	r2,32(r2)
    e9e8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e9ec:	e0bffc17 	ldw	r2,-16(fp)
    e9f0:	10800104 	addi	r2,r2,4
    e9f4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    e9f8:	e0bffd17 	ldw	r2,-12(fp)
    e9fc:	1080800c 	andi	r2,r2,512
    ea00:	103fbe26 	beq	r2,zero,e8fc <__alt_data_end+0xfffc551c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ea04:	e0bffd17 	ldw	r2,-12(fp)
    ea08:	1004d43a 	srli	r2,r2,16
    ea0c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    ea10:	00001406 	br	ea64 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    ea14:	e0bffc17 	ldw	r2,-16(fp)
    ea18:	e0fffb17 	ldw	r3,-20(fp)
    ea1c:	18c00d17 	ldw	r3,52(r3)
    ea20:	e13ffb17 	ldw	r4,-20(fp)
    ea24:	20c7883a 	add	r3,r4,r3
    ea28:	18c20e04 	addi	r3,r3,2104
    ea2c:	18c00003 	ldbu	r3,0(r3)
    ea30:	18c03fcc 	andi	r3,r3,255
    ea34:	18c0201c 	xori	r3,r3,128
    ea38:	18ffe004 	addi	r3,r3,-128
    ea3c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ea40:	e0bffb17 	ldw	r2,-20(fp)
    ea44:	10800d17 	ldw	r2,52(r2)
    ea48:	10800044 	addi	r2,r2,1
    ea4c:	10c1ffcc 	andi	r3,r2,2047
    ea50:	e0bffb17 	ldw	r2,-20(fp)
    ea54:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    ea58:	e0bffa17 	ldw	r2,-24(fp)
    ea5c:	10bfffc4 	addi	r2,r2,-1
    ea60:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    ea64:	e0bffa17 	ldw	r2,-24(fp)
    ea68:	10000526 	beq	r2,zero,ea80 <altera_avalon_jtag_uart_irq+0x1a8>
    ea6c:	e0bffb17 	ldw	r2,-20(fp)
    ea70:	10c00d17 	ldw	r3,52(r2)
    ea74:	e0bffb17 	ldw	r2,-20(fp)
    ea78:	10800c17 	ldw	r2,48(r2)
    ea7c:	18bfe51e 	bne	r3,r2,ea14 <__alt_data_end+0xfffc5634>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    ea80:	e0bffa17 	ldw	r2,-24(fp)
    ea84:	103f9d26 	beq	r2,zero,e8fc <__alt_data_end+0xfffc551c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ea88:	e0bffb17 	ldw	r2,-20(fp)
    ea8c:	10c00817 	ldw	r3,32(r2)
    ea90:	00bfff44 	movi	r2,-3
    ea94:	1886703a 	and	r3,r3,r2
    ea98:	e0bffb17 	ldw	r2,-20(fp)
    ea9c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    eaa0:	e0bffb17 	ldw	r2,-20(fp)
    eaa4:	10800017 	ldw	r2,0(r2)
    eaa8:	10800104 	addi	r2,r2,4
    eaac:	1007883a 	mov	r3,r2
    eab0:	e0bffb17 	ldw	r2,-20(fp)
    eab4:	10800817 	ldw	r2,32(r2)
    eab8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    eabc:	e0bffc17 	ldw	r2,-16(fp)
    eac0:	10800104 	addi	r2,r2,4
    eac4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    eac8:	003f8c06 	br	e8fc <__alt_data_end+0xfffc551c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    eacc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    ead0:	0001883a 	nop
    ead4:	e037883a 	mov	sp,fp
    ead8:	df000017 	ldw	fp,0(sp)
    eadc:	dec00104 	addi	sp,sp,4
    eae0:	f800283a 	ret

0000eae4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    eae4:	defff804 	addi	sp,sp,-32
    eae8:	df000715 	stw	fp,28(sp)
    eaec:	df000704 	addi	fp,sp,28
    eaf0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    eaf4:	e0bffb17 	ldw	r2,-20(fp)
    eaf8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    eafc:	e0bff917 	ldw	r2,-28(fp)
    eb00:	10800017 	ldw	r2,0(r2)
    eb04:	10800104 	addi	r2,r2,4
    eb08:	10800037 	ldwio	r2,0(r2)
    eb0c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    eb10:	e0bffa17 	ldw	r2,-24(fp)
    eb14:	1081000c 	andi	r2,r2,1024
    eb18:	10000b26 	beq	r2,zero,eb48 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    eb1c:	e0bff917 	ldw	r2,-28(fp)
    eb20:	10800017 	ldw	r2,0(r2)
    eb24:	10800104 	addi	r2,r2,4
    eb28:	1007883a 	mov	r3,r2
    eb2c:	e0bff917 	ldw	r2,-28(fp)
    eb30:	10800817 	ldw	r2,32(r2)
    eb34:	10810014 	ori	r2,r2,1024
    eb38:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    eb3c:	e0bff917 	ldw	r2,-28(fp)
    eb40:	10000915 	stw	zero,36(r2)
    eb44:	00000a06 	br	eb70 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    eb48:	e0bff917 	ldw	r2,-28(fp)
    eb4c:	10c00917 	ldw	r3,36(r2)
    eb50:	00a00034 	movhi	r2,32768
    eb54:	10bfff04 	addi	r2,r2,-4
    eb58:	10c00536 	bltu	r2,r3,eb70 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    eb5c:	e0bff917 	ldw	r2,-28(fp)
    eb60:	10800917 	ldw	r2,36(r2)
    eb64:	10c00044 	addi	r3,r2,1
    eb68:	e0bff917 	ldw	r2,-28(fp)
    eb6c:	10c00915 	stw	r3,36(r2)
    eb70:	00800074 	movhi	r2,1
    eb74:	108fce04 	addi	r2,r2,16184
    eb78:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    eb7c:	e037883a 	mov	sp,fp
    eb80:	df000017 	ldw	fp,0(sp)
    eb84:	dec00104 	addi	sp,sp,4
    eb88:	f800283a 	ret

0000eb8c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    eb8c:	defffd04 	addi	sp,sp,-12
    eb90:	df000215 	stw	fp,8(sp)
    eb94:	df000204 	addi	fp,sp,8
    eb98:	e13ffe15 	stw	r4,-8(fp)
    eb9c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    eba0:	00000506 	br	ebb8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    eba4:	e0bfff17 	ldw	r2,-4(fp)
    eba8:	1090000c 	andi	r2,r2,16384
    ebac:	10000226 	beq	r2,zero,ebb8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    ebb0:	00bffd44 	movi	r2,-11
    ebb4:	00000b06 	br	ebe4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ebb8:	e0bffe17 	ldw	r2,-8(fp)
    ebbc:	10c00d17 	ldw	r3,52(r2)
    ebc0:	e0bffe17 	ldw	r2,-8(fp)
    ebc4:	10800c17 	ldw	r2,48(r2)
    ebc8:	18800526 	beq	r3,r2,ebe0 <altera_avalon_jtag_uart_close+0x54>
    ebcc:	e0bffe17 	ldw	r2,-8(fp)
    ebd0:	10c00917 	ldw	r3,36(r2)
    ebd4:	e0bffe17 	ldw	r2,-8(fp)
    ebd8:	10800117 	ldw	r2,4(r2)
    ebdc:	18bff136 	bltu	r3,r2,eba4 <__alt_data_end+0xfffc57c4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    ebe0:	0005883a 	mov	r2,zero
}
    ebe4:	e037883a 	mov	sp,fp
    ebe8:	df000017 	ldw	fp,0(sp)
    ebec:	dec00104 	addi	sp,sp,4
    ebf0:	f800283a 	ret

0000ebf4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    ebf4:	defffa04 	addi	sp,sp,-24
    ebf8:	df000515 	stw	fp,20(sp)
    ebfc:	df000504 	addi	fp,sp,20
    ec00:	e13ffd15 	stw	r4,-12(fp)
    ec04:	e17ffe15 	stw	r5,-8(fp)
    ec08:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    ec0c:	00bff9c4 	movi	r2,-25
    ec10:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    ec14:	e0bffe17 	ldw	r2,-8(fp)
    ec18:	10da8060 	cmpeqi	r3,r2,27137
    ec1c:	1800031e 	bne	r3,zero,ec2c <altera_avalon_jtag_uart_ioctl+0x38>
    ec20:	109a80a0 	cmpeqi	r2,r2,27138
    ec24:	1000181e 	bne	r2,zero,ec88 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    ec28:	00002906 	br	ecd0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    ec2c:	e0bffd17 	ldw	r2,-12(fp)
    ec30:	10c00117 	ldw	r3,4(r2)
    ec34:	00a00034 	movhi	r2,32768
    ec38:	10bfffc4 	addi	r2,r2,-1
    ec3c:	18802126 	beq	r3,r2,ecc4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    ec40:	e0bfff17 	ldw	r2,-4(fp)
    ec44:	10800017 	ldw	r2,0(r2)
    ec48:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    ec4c:	e0bffc17 	ldw	r2,-16(fp)
    ec50:	10800090 	cmplti	r2,r2,2
    ec54:	1000061e 	bne	r2,zero,ec70 <altera_avalon_jtag_uart_ioctl+0x7c>
    ec58:	e0fffc17 	ldw	r3,-16(fp)
    ec5c:	00a00034 	movhi	r2,32768
    ec60:	10bfffc4 	addi	r2,r2,-1
    ec64:	18800226 	beq	r3,r2,ec70 <altera_avalon_jtag_uart_ioctl+0x7c>
    ec68:	e0bffc17 	ldw	r2,-16(fp)
    ec6c:	00000206 	br	ec78 <altera_avalon_jtag_uart_ioctl+0x84>
    ec70:	00a00034 	movhi	r2,32768
    ec74:	10bfff84 	addi	r2,r2,-2
    ec78:	e0fffd17 	ldw	r3,-12(fp)
    ec7c:	18800115 	stw	r2,4(r3)
      rc = 0;
    ec80:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    ec84:	00000f06 	br	ecc4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    ec88:	e0bffd17 	ldw	r2,-12(fp)
    ec8c:	10c00117 	ldw	r3,4(r2)
    ec90:	00a00034 	movhi	r2,32768
    ec94:	10bfffc4 	addi	r2,r2,-1
    ec98:	18800c26 	beq	r3,r2,eccc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    ec9c:	e0bffd17 	ldw	r2,-12(fp)
    eca0:	10c00917 	ldw	r3,36(r2)
    eca4:	e0bffd17 	ldw	r2,-12(fp)
    eca8:	10800117 	ldw	r2,4(r2)
    ecac:	1885803a 	cmpltu	r2,r3,r2
    ecb0:	10c03fcc 	andi	r3,r2,255
    ecb4:	e0bfff17 	ldw	r2,-4(fp)
    ecb8:	10c00015 	stw	r3,0(r2)
      rc = 0;
    ecbc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    ecc0:	00000206 	br	eccc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    ecc4:	0001883a 	nop
    ecc8:	00000106 	br	ecd0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    eccc:	0001883a 	nop

  default:
    break;
  }

  return rc;
    ecd0:	e0bffb17 	ldw	r2,-20(fp)
}
    ecd4:	e037883a 	mov	sp,fp
    ecd8:	df000017 	ldw	fp,0(sp)
    ecdc:	dec00104 	addi	sp,sp,4
    ece0:	f800283a 	ret

0000ece4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    ece4:	defff304 	addi	sp,sp,-52
    ece8:	dfc00c15 	stw	ra,48(sp)
    ecec:	df000b15 	stw	fp,44(sp)
    ecf0:	df000b04 	addi	fp,sp,44
    ecf4:	e13ffc15 	stw	r4,-16(fp)
    ecf8:	e17ffd15 	stw	r5,-12(fp)
    ecfc:	e1bffe15 	stw	r6,-8(fp)
    ed00:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    ed04:	e0bffd17 	ldw	r2,-12(fp)
    ed08:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ed0c:	00004706 	br	ee2c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    ed10:	e0bffc17 	ldw	r2,-16(fp)
    ed14:	10800a17 	ldw	r2,40(r2)
    ed18:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    ed1c:	e0bffc17 	ldw	r2,-16(fp)
    ed20:	10800b17 	ldw	r2,44(r2)
    ed24:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    ed28:	e0fff717 	ldw	r3,-36(fp)
    ed2c:	e0bff817 	ldw	r2,-32(fp)
    ed30:	18800536 	bltu	r3,r2,ed48 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    ed34:	e0fff717 	ldw	r3,-36(fp)
    ed38:	e0bff817 	ldw	r2,-32(fp)
    ed3c:	1885c83a 	sub	r2,r3,r2
    ed40:	e0bff615 	stw	r2,-40(fp)
    ed44:	00000406 	br	ed58 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    ed48:	00c20004 	movi	r3,2048
    ed4c:	e0bff817 	ldw	r2,-32(fp)
    ed50:	1885c83a 	sub	r2,r3,r2
    ed54:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    ed58:	e0bff617 	ldw	r2,-40(fp)
    ed5c:	10001e26 	beq	r2,zero,edd8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    ed60:	e0fffe17 	ldw	r3,-8(fp)
    ed64:	e0bff617 	ldw	r2,-40(fp)
    ed68:	1880022e 	bgeu	r3,r2,ed74 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    ed6c:	e0bffe17 	ldw	r2,-8(fp)
    ed70:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    ed74:	e0bffc17 	ldw	r2,-16(fp)
    ed78:	10c00e04 	addi	r3,r2,56
    ed7c:	e0bff817 	ldw	r2,-32(fp)
    ed80:	1885883a 	add	r2,r3,r2
    ed84:	e1bff617 	ldw	r6,-40(fp)
    ed88:	100b883a 	mov	r5,r2
    ed8c:	e13ff517 	ldw	r4,-44(fp)
    ed90:	00061f80 	call	61f8 <memcpy>
      ptr   += n;
    ed94:	e0fff517 	ldw	r3,-44(fp)
    ed98:	e0bff617 	ldw	r2,-40(fp)
    ed9c:	1885883a 	add	r2,r3,r2
    eda0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    eda4:	e0fffe17 	ldw	r3,-8(fp)
    eda8:	e0bff617 	ldw	r2,-40(fp)
    edac:	1885c83a 	sub	r2,r3,r2
    edb0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    edb4:	e0fff817 	ldw	r3,-32(fp)
    edb8:	e0bff617 	ldw	r2,-40(fp)
    edbc:	1885883a 	add	r2,r3,r2
    edc0:	10c1ffcc 	andi	r3,r2,2047
    edc4:	e0bffc17 	ldw	r2,-16(fp)
    edc8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    edcc:	e0bffe17 	ldw	r2,-8(fp)
    edd0:	00bfcf16 	blt	zero,r2,ed10 <__alt_data_end+0xfffc5930>
    edd4:	00000106 	br	eddc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    edd8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    eddc:	e0fff517 	ldw	r3,-44(fp)
    ede0:	e0bffd17 	ldw	r2,-12(fp)
    ede4:	1880141e 	bne	r3,r2,ee38 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    ede8:	e0bfff17 	ldw	r2,-4(fp)
    edec:	1090000c 	andi	r2,r2,16384
    edf0:	1000131e 	bne	r2,zero,ee40 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    edf4:	0001883a 	nop
    edf8:	e0bffc17 	ldw	r2,-16(fp)
    edfc:	10c00a17 	ldw	r3,40(r2)
    ee00:	e0bff717 	ldw	r2,-36(fp)
    ee04:	1880051e 	bne	r3,r2,ee1c <altera_avalon_jtag_uart_read+0x138>
    ee08:	e0bffc17 	ldw	r2,-16(fp)
    ee0c:	10c00917 	ldw	r3,36(r2)
    ee10:	e0bffc17 	ldw	r2,-16(fp)
    ee14:	10800117 	ldw	r2,4(r2)
    ee18:	18bff736 	bltu	r3,r2,edf8 <__alt_data_end+0xfffc5a18>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    ee1c:	e0bffc17 	ldw	r2,-16(fp)
    ee20:	10c00a17 	ldw	r3,40(r2)
    ee24:	e0bff717 	ldw	r2,-36(fp)
    ee28:	18800726 	beq	r3,r2,ee48 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ee2c:	e0bffe17 	ldw	r2,-8(fp)
    ee30:	00bfb716 	blt	zero,r2,ed10 <__alt_data_end+0xfffc5930>
    ee34:	00000506 	br	ee4c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    ee38:	0001883a 	nop
    ee3c:	00000306 	br	ee4c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    ee40:	0001883a 	nop
    ee44:	00000106 	br	ee4c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    ee48:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    ee4c:	e0fff517 	ldw	r3,-44(fp)
    ee50:	e0bffd17 	ldw	r2,-12(fp)
    ee54:	18801826 	beq	r3,r2,eeb8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ee58:	0005303a 	rdctl	r2,status
    ee5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ee60:	e0fffb17 	ldw	r3,-20(fp)
    ee64:	00bfff84 	movi	r2,-2
    ee68:	1884703a 	and	r2,r3,r2
    ee6c:	1001703a 	wrctl	status,r2
  
  return context;
    ee70:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    ee74:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ee78:	e0bffc17 	ldw	r2,-16(fp)
    ee7c:	10800817 	ldw	r2,32(r2)
    ee80:	10c00054 	ori	r3,r2,1
    ee84:	e0bffc17 	ldw	r2,-16(fp)
    ee88:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ee8c:	e0bffc17 	ldw	r2,-16(fp)
    ee90:	10800017 	ldw	r2,0(r2)
    ee94:	10800104 	addi	r2,r2,4
    ee98:	1007883a 	mov	r3,r2
    ee9c:	e0bffc17 	ldw	r2,-16(fp)
    eea0:	10800817 	ldw	r2,32(r2)
    eea4:	18800035 	stwio	r2,0(r3)
    eea8:	e0bffa17 	ldw	r2,-24(fp)
    eeac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eeb0:	e0bff917 	ldw	r2,-28(fp)
    eeb4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    eeb8:	e0fff517 	ldw	r3,-44(fp)
    eebc:	e0bffd17 	ldw	r2,-12(fp)
    eec0:	18800426 	beq	r3,r2,eed4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    eec4:	e0fff517 	ldw	r3,-44(fp)
    eec8:	e0bffd17 	ldw	r2,-12(fp)
    eecc:	1885c83a 	sub	r2,r3,r2
    eed0:	00000606 	br	eeec <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    eed4:	e0bfff17 	ldw	r2,-4(fp)
    eed8:	1090000c 	andi	r2,r2,16384
    eedc:	10000226 	beq	r2,zero,eee8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    eee0:	00bffd44 	movi	r2,-11
    eee4:	00000106 	br	eeec <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    eee8:	00bffec4 	movi	r2,-5
}
    eeec:	e037883a 	mov	sp,fp
    eef0:	dfc00117 	ldw	ra,4(sp)
    eef4:	df000017 	ldw	fp,0(sp)
    eef8:	dec00204 	addi	sp,sp,8
    eefc:	f800283a 	ret

0000ef00 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    ef00:	defff304 	addi	sp,sp,-52
    ef04:	dfc00c15 	stw	ra,48(sp)
    ef08:	df000b15 	stw	fp,44(sp)
    ef0c:	df000b04 	addi	fp,sp,44
    ef10:	e13ffc15 	stw	r4,-16(fp)
    ef14:	e17ffd15 	stw	r5,-12(fp)
    ef18:	e1bffe15 	stw	r6,-8(fp)
    ef1c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    ef20:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    ef24:	e0bffd17 	ldw	r2,-12(fp)
    ef28:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    ef2c:	00003706 	br	f00c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    ef30:	e0bffc17 	ldw	r2,-16(fp)
    ef34:	10800c17 	ldw	r2,48(r2)
    ef38:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    ef3c:	e0bffc17 	ldw	r2,-16(fp)
    ef40:	10800d17 	ldw	r2,52(r2)
    ef44:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    ef48:	e0fff917 	ldw	r3,-28(fp)
    ef4c:	e0bff517 	ldw	r2,-44(fp)
    ef50:	1880062e 	bgeu	r3,r2,ef6c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    ef54:	e0fff517 	ldw	r3,-44(fp)
    ef58:	e0bff917 	ldw	r2,-28(fp)
    ef5c:	1885c83a 	sub	r2,r3,r2
    ef60:	10bfffc4 	addi	r2,r2,-1
    ef64:	e0bff615 	stw	r2,-40(fp)
    ef68:	00000b06 	br	ef98 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    ef6c:	e0bff517 	ldw	r2,-44(fp)
    ef70:	10000526 	beq	r2,zero,ef88 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    ef74:	00c20004 	movi	r3,2048
    ef78:	e0bff917 	ldw	r2,-28(fp)
    ef7c:	1885c83a 	sub	r2,r3,r2
    ef80:	e0bff615 	stw	r2,-40(fp)
    ef84:	00000406 	br	ef98 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    ef88:	00c1ffc4 	movi	r3,2047
    ef8c:	e0bff917 	ldw	r2,-28(fp)
    ef90:	1885c83a 	sub	r2,r3,r2
    ef94:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    ef98:	e0bff617 	ldw	r2,-40(fp)
    ef9c:	10001e26 	beq	r2,zero,f018 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    efa0:	e0fffe17 	ldw	r3,-8(fp)
    efa4:	e0bff617 	ldw	r2,-40(fp)
    efa8:	1880022e 	bgeu	r3,r2,efb4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    efac:	e0bffe17 	ldw	r2,-8(fp)
    efb0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    efb4:	e0bffc17 	ldw	r2,-16(fp)
    efb8:	10c20e04 	addi	r3,r2,2104
    efbc:	e0bff917 	ldw	r2,-28(fp)
    efc0:	1885883a 	add	r2,r3,r2
    efc4:	e1bff617 	ldw	r6,-40(fp)
    efc8:	e17ffd17 	ldw	r5,-12(fp)
    efcc:	1009883a 	mov	r4,r2
    efd0:	00061f80 	call	61f8 <memcpy>
      ptr   += n;
    efd4:	e0fffd17 	ldw	r3,-12(fp)
    efd8:	e0bff617 	ldw	r2,-40(fp)
    efdc:	1885883a 	add	r2,r3,r2
    efe0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    efe4:	e0fffe17 	ldw	r3,-8(fp)
    efe8:	e0bff617 	ldw	r2,-40(fp)
    efec:	1885c83a 	sub	r2,r3,r2
    eff0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    eff4:	e0fff917 	ldw	r3,-28(fp)
    eff8:	e0bff617 	ldw	r2,-40(fp)
    effc:	1885883a 	add	r2,r3,r2
    f000:	10c1ffcc 	andi	r3,r2,2047
    f004:	e0bffc17 	ldw	r2,-16(fp)
    f008:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f00c:	e0bffe17 	ldw	r2,-8(fp)
    f010:	00bfc716 	blt	zero,r2,ef30 <__alt_data_end+0xfffc5b50>
    f014:	00000106 	br	f01c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    f018:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f01c:	0005303a 	rdctl	r2,status
    f020:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f024:	e0fffb17 	ldw	r3,-20(fp)
    f028:	00bfff84 	movi	r2,-2
    f02c:	1884703a 	and	r2,r3,r2
    f030:	1001703a 	wrctl	status,r2
  
  return context;
    f034:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    f038:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f03c:	e0bffc17 	ldw	r2,-16(fp)
    f040:	10800817 	ldw	r2,32(r2)
    f044:	10c00094 	ori	r3,r2,2
    f048:	e0bffc17 	ldw	r2,-16(fp)
    f04c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f050:	e0bffc17 	ldw	r2,-16(fp)
    f054:	10800017 	ldw	r2,0(r2)
    f058:	10800104 	addi	r2,r2,4
    f05c:	1007883a 	mov	r3,r2
    f060:	e0bffc17 	ldw	r2,-16(fp)
    f064:	10800817 	ldw	r2,32(r2)
    f068:	18800035 	stwio	r2,0(r3)
    f06c:	e0bffa17 	ldw	r2,-24(fp)
    f070:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f074:	e0bff817 	ldw	r2,-32(fp)
    f078:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    f07c:	e0bffe17 	ldw	r2,-8(fp)
    f080:	0080100e 	bge	zero,r2,f0c4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    f084:	e0bfff17 	ldw	r2,-4(fp)
    f088:	1090000c 	andi	r2,r2,16384
    f08c:	1000101e 	bne	r2,zero,f0d0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f090:	0001883a 	nop
    f094:	e0bffc17 	ldw	r2,-16(fp)
    f098:	10c00d17 	ldw	r3,52(r2)
    f09c:	e0bff517 	ldw	r2,-44(fp)
    f0a0:	1880051e 	bne	r3,r2,f0b8 <altera_avalon_jtag_uart_write+0x1b8>
    f0a4:	e0bffc17 	ldw	r2,-16(fp)
    f0a8:	10c00917 	ldw	r3,36(r2)
    f0ac:	e0bffc17 	ldw	r2,-16(fp)
    f0b0:	10800117 	ldw	r2,4(r2)
    f0b4:	18bff736 	bltu	r3,r2,f094 <__alt_data_end+0xfffc5cb4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    f0b8:	e0bffc17 	ldw	r2,-16(fp)
    f0bc:	10800917 	ldw	r2,36(r2)
    f0c0:	1000051e 	bne	r2,zero,f0d8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    f0c4:	e0bffe17 	ldw	r2,-8(fp)
    f0c8:	00bfd016 	blt	zero,r2,f00c <__alt_data_end+0xfffc5c2c>
    f0cc:	00000306 	br	f0dc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    f0d0:	0001883a 	nop
    f0d4:	00000106 	br	f0dc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    f0d8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f0dc:	e0fffd17 	ldw	r3,-12(fp)
    f0e0:	e0bff717 	ldw	r2,-36(fp)
    f0e4:	18800426 	beq	r3,r2,f0f8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    f0e8:	e0fffd17 	ldw	r3,-12(fp)
    f0ec:	e0bff717 	ldw	r2,-36(fp)
    f0f0:	1885c83a 	sub	r2,r3,r2
    f0f4:	00000606 	br	f110 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    f0f8:	e0bfff17 	ldw	r2,-4(fp)
    f0fc:	1090000c 	andi	r2,r2,16384
    f100:	10000226 	beq	r2,zero,f10c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    f104:	00bffd44 	movi	r2,-11
    f108:	00000106 	br	f110 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    f10c:	00bffec4 	movi	r2,-5
}
    f110:	e037883a 	mov	sp,fp
    f114:	dfc00117 	ldw	ra,4(sp)
    f118:	df000017 	ldw	fp,0(sp)
    f11c:	dec00204 	addi	sp,sp,8
    f120:	f800283a 	ret

0000f124 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    f124:	defff504 	addi	sp,sp,-44
    f128:	df000a15 	stw	fp,40(sp)
    f12c:	df000a04 	addi	fp,sp,40
    f130:	e13ffc15 	stw	r4,-16(fp)
    f134:	e17ffd15 	stw	r5,-12(fp)
    f138:	e1bffe15 	stw	r6,-8(fp)
    f13c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    f140:	e03ff615 	stw	zero,-40(fp)
    f144:	00800074 	movhi	r2,1
    f148:	108fce04 	addi	r2,r2,16184
    f14c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    f150:	10003f26 	beq	r2,zero,f250 <alt_alarm_start+0x12c>
  {
    if (alarm)
    f154:	e0bffc17 	ldw	r2,-16(fp)
    f158:	10003b26 	beq	r2,zero,f248 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    f15c:	e0bffc17 	ldw	r2,-16(fp)
    f160:	e0fffe17 	ldw	r3,-8(fp)
    f164:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    f168:	e0bffc17 	ldw	r2,-16(fp)
    f16c:	e0ffff17 	ldw	r3,-4(fp)
    f170:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f174:	0005303a 	rdctl	r2,status
    f178:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f17c:	e0fff917 	ldw	r3,-28(fp)
    f180:	00bfff84 	movi	r2,-2
    f184:	1884703a 	and	r2,r3,r2
    f188:	1001703a 	wrctl	status,r2
  
  return context;
    f18c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    f190:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    f194:	00800074 	movhi	r2,1
    f198:	108fcf04 	addi	r2,r2,16188
    f19c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    f1a0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    f1a4:	e0fffd17 	ldw	r3,-12(fp)
    f1a8:	e0bff617 	ldw	r2,-40(fp)
    f1ac:	1885883a 	add	r2,r3,r2
    f1b0:	10c00044 	addi	r3,r2,1
    f1b4:	e0bffc17 	ldw	r2,-16(fp)
    f1b8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    f1bc:	e0bffc17 	ldw	r2,-16(fp)
    f1c0:	10c00217 	ldw	r3,8(r2)
    f1c4:	e0bff617 	ldw	r2,-40(fp)
    f1c8:	1880042e 	bgeu	r3,r2,f1dc <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    f1cc:	e0bffc17 	ldw	r2,-16(fp)
    f1d0:	00c00044 	movi	r3,1
    f1d4:	10c00405 	stb	r3,16(r2)
    f1d8:	00000206 	br	f1e4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    f1dc:	e0bffc17 	ldw	r2,-16(fp)
    f1e0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    f1e4:	e0fffc17 	ldw	r3,-16(fp)
    f1e8:	00800074 	movhi	r2,1
    f1ec:	10890604 	addi	r2,r2,9240
    f1f0:	e0bffa15 	stw	r2,-24(fp)
    f1f4:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f1f8:	e0bffb17 	ldw	r2,-20(fp)
    f1fc:	e0fffa17 	ldw	r3,-24(fp)
    f200:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    f204:	e0bffa17 	ldw	r2,-24(fp)
    f208:	10c00017 	ldw	r3,0(r2)
    f20c:	e0bffb17 	ldw	r2,-20(fp)
    f210:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    f214:	e0bffa17 	ldw	r2,-24(fp)
    f218:	10800017 	ldw	r2,0(r2)
    f21c:	e0fffb17 	ldw	r3,-20(fp)
    f220:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    f224:	e0bffa17 	ldw	r2,-24(fp)
    f228:	e0fffb17 	ldw	r3,-20(fp)
    f22c:	10c00015 	stw	r3,0(r2)
    f230:	e0bff817 	ldw	r2,-32(fp)
    f234:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f238:	e0bff717 	ldw	r2,-36(fp)
    f23c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    f240:	0005883a 	mov	r2,zero
    f244:	00000306 	br	f254 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    f248:	00bffa84 	movi	r2,-22
    f24c:	00000106 	br	f254 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    f250:	00bfde84 	movi	r2,-134
  }
}
    f254:	e037883a 	mov	sp,fp
    f258:	df000017 	ldw	fp,0(sp)
    f25c:	dec00104 	addi	sp,sp,4
    f260:	f800283a 	ret

0000f264 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    f264:	defffa04 	addi	sp,sp,-24
    f268:	dfc00515 	stw	ra,20(sp)
    f26c:	df000415 	stw	fp,16(sp)
    f270:	df000404 	addi	fp,sp,16
    f274:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    f278:	00800244 	movi	r2,9
    f27c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    f280:	014003f4 	movhi	r5,15
    f284:	29509004 	addi	r5,r5,16960
    f288:	e13ffd17 	ldw	r4,-12(fp)
    f28c:	000ade00 	call	ade0 <__mulsi3>
    f290:	100b883a 	mov	r5,r2
    f294:	01017db4 	movhi	r4,1526
    f298:	21384004 	addi	r4,r4,-7936
    f29c:	000ad240 	call	ad24 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f2a0:	100b883a 	mov	r5,r2
    f2a4:	01200034 	movhi	r4,32768
    f2a8:	213fffc4 	addi	r4,r4,-1
    f2ac:	000ad240 	call	ad24 <__udivsi3>
    f2b0:	100b883a 	mov	r5,r2
    f2b4:	e13fff17 	ldw	r4,-4(fp)
    f2b8:	000ad240 	call	ad24 <__udivsi3>
    f2bc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    f2c0:	e0bffe17 	ldw	r2,-8(fp)
    f2c4:	10002a26 	beq	r2,zero,f370 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    f2c8:	e03ffc15 	stw	zero,-16(fp)
    f2cc:	00001706 	br	f32c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f2d0:	00a00034 	movhi	r2,32768
    f2d4:	10bfffc4 	addi	r2,r2,-1
    f2d8:	10bfffc4 	addi	r2,r2,-1
    f2dc:	103ffe1e 	bne	r2,zero,f2d8 <__alt_data_end+0xfffc5ef8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    f2e0:	014003f4 	movhi	r5,15
    f2e4:	29509004 	addi	r5,r5,16960
    f2e8:	e13ffd17 	ldw	r4,-12(fp)
    f2ec:	000ade00 	call	ade0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f2f0:	100b883a 	mov	r5,r2
    f2f4:	01017db4 	movhi	r4,1526
    f2f8:	21384004 	addi	r4,r4,-7936
    f2fc:	000ad240 	call	ad24 <__udivsi3>
    f300:	100b883a 	mov	r5,r2
    f304:	01200034 	movhi	r4,32768
    f308:	213fffc4 	addi	r4,r4,-1
    f30c:	000ad240 	call	ad24 <__udivsi3>
    f310:	1007883a 	mov	r3,r2
    f314:	e0bfff17 	ldw	r2,-4(fp)
    f318:	10c5c83a 	sub	r2,r2,r3
    f31c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    f320:	e0bffc17 	ldw	r2,-16(fp)
    f324:	10800044 	addi	r2,r2,1
    f328:	e0bffc15 	stw	r2,-16(fp)
    f32c:	e0fffc17 	ldw	r3,-16(fp)
    f330:	e0bffe17 	ldw	r2,-8(fp)
    f334:	18bfe616 	blt	r3,r2,f2d0 <__alt_data_end+0xfffc5ef0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    f338:	014003f4 	movhi	r5,15
    f33c:	29509004 	addi	r5,r5,16960
    f340:	e13ffd17 	ldw	r4,-12(fp)
    f344:	000ade00 	call	ade0 <__mulsi3>
    f348:	100b883a 	mov	r5,r2
    f34c:	01017db4 	movhi	r4,1526
    f350:	21384004 	addi	r4,r4,-7936
    f354:	000ad240 	call	ad24 <__udivsi3>
    f358:	e17fff17 	ldw	r5,-4(fp)
    f35c:	1009883a 	mov	r4,r2
    f360:	000ade00 	call	ade0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f364:	10bfffc4 	addi	r2,r2,-1
    f368:	103ffe1e 	bne	r2,zero,f364 <__alt_data_end+0xfffc5f84>
    f36c:	00000d06 	br	f3a4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    f370:	014003f4 	movhi	r5,15
    f374:	29509004 	addi	r5,r5,16960
    f378:	e13ffd17 	ldw	r4,-12(fp)
    f37c:	000ade00 	call	ade0 <__mulsi3>
    f380:	100b883a 	mov	r5,r2
    f384:	01017db4 	movhi	r4,1526
    f388:	21384004 	addi	r4,r4,-7936
    f38c:	000ad240 	call	ad24 <__udivsi3>
    f390:	e17fff17 	ldw	r5,-4(fp)
    f394:	1009883a 	mov	r4,r2
    f398:	000ade00 	call	ade0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f39c:	10bfffc4 	addi	r2,r2,-1
    f3a0:	00bffe16 	blt	zero,r2,f39c <__alt_data_end+0xfffc5fbc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    f3a4:	0005883a 	mov	r2,zero
}
    f3a8:	e037883a 	mov	sp,fp
    f3ac:	dfc00117 	ldw	ra,4(sp)
    f3b0:	df000017 	ldw	fp,0(sp)
    f3b4:	dec00204 	addi	sp,sp,8
    f3b8:	f800283a 	ret

0000f3bc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    f3bc:	deffff04 	addi	sp,sp,-4
    f3c0:	df000015 	stw	fp,0(sp)
    f3c4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    f3c8:	0001883a 	nop
    f3cc:	e037883a 	mov	sp,fp
    f3d0:	df000017 	ldw	fp,0(sp)
    f3d4:	dec00104 	addi	sp,sp,4
    f3d8:	f800283a 	ret

0000f3dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f3dc:	defffe04 	addi	sp,sp,-8
    f3e0:	dfc00115 	stw	ra,4(sp)
    f3e4:	df000015 	stw	fp,0(sp)
    f3e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f3ec:	00800074 	movhi	r2,1
    f3f0:	10890304 	addi	r2,r2,9228
    f3f4:	10800017 	ldw	r2,0(r2)
    f3f8:	10000526 	beq	r2,zero,f410 <alt_get_errno+0x34>
    f3fc:	00800074 	movhi	r2,1
    f400:	10890304 	addi	r2,r2,9228
    f404:	10800017 	ldw	r2,0(r2)
    f408:	103ee83a 	callr	r2
    f40c:	00000206 	br	f418 <alt_get_errno+0x3c>
    f410:	00800074 	movhi	r2,1
    f414:	108fc904 	addi	r2,r2,16164
}
    f418:	e037883a 	mov	sp,fp
    f41c:	dfc00117 	ldw	ra,4(sp)
    f420:	df000017 	ldw	fp,0(sp)
    f424:	dec00204 	addi	sp,sp,8
    f428:	f800283a 	ret

0000f42c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    f42c:	defffa04 	addi	sp,sp,-24
    f430:	dfc00515 	stw	ra,20(sp)
    f434:	df000415 	stw	fp,16(sp)
    f438:	df000404 	addi	fp,sp,16
    f43c:	e13ffe15 	stw	r4,-8(fp)
    f440:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    f444:	e0bffe17 	ldw	r2,-8(fp)
    f448:	10000326 	beq	r2,zero,f458 <alt_dev_llist_insert+0x2c>
    f44c:	e0bffe17 	ldw	r2,-8(fp)
    f450:	10800217 	ldw	r2,8(r2)
    f454:	1000061e 	bne	r2,zero,f470 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    f458:	000f3dc0 	call	f3dc <alt_get_errno>
    f45c:	1007883a 	mov	r3,r2
    f460:	00800584 	movi	r2,22
    f464:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    f468:	00bffa84 	movi	r2,-22
    f46c:	00001306 	br	f4bc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    f470:	e0bffe17 	ldw	r2,-8(fp)
    f474:	e0ffff17 	ldw	r3,-4(fp)
    f478:	e0fffc15 	stw	r3,-16(fp)
    f47c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f480:	e0bffd17 	ldw	r2,-12(fp)
    f484:	e0fffc17 	ldw	r3,-16(fp)
    f488:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    f48c:	e0bffc17 	ldw	r2,-16(fp)
    f490:	10c00017 	ldw	r3,0(r2)
    f494:	e0bffd17 	ldw	r2,-12(fp)
    f498:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    f49c:	e0bffc17 	ldw	r2,-16(fp)
    f4a0:	10800017 	ldw	r2,0(r2)
    f4a4:	e0fffd17 	ldw	r3,-12(fp)
    f4a8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    f4ac:	e0bffc17 	ldw	r2,-16(fp)
    f4b0:	e0fffd17 	ldw	r3,-12(fp)
    f4b4:	10c00015 	stw	r3,0(r2)

  return 0;  
    f4b8:	0005883a 	mov	r2,zero
}
    f4bc:	e037883a 	mov	sp,fp
    f4c0:	dfc00117 	ldw	ra,4(sp)
    f4c4:	df000017 	ldw	fp,0(sp)
    f4c8:	dec00204 	addi	sp,sp,8
    f4cc:	f800283a 	ret

0000f4d0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f4d0:	defffd04 	addi	sp,sp,-12
    f4d4:	dfc00215 	stw	ra,8(sp)
    f4d8:	df000115 	stw	fp,4(sp)
    f4dc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f4e0:	00800074 	movhi	r2,1
    f4e4:	10813c04 	addi	r2,r2,1264
    f4e8:	e0bfff15 	stw	r2,-4(fp)
    f4ec:	00000606 	br	f508 <_do_ctors+0x38>
        (*ctor) (); 
    f4f0:	e0bfff17 	ldw	r2,-4(fp)
    f4f4:	10800017 	ldw	r2,0(r2)
    f4f8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f4fc:	e0bfff17 	ldw	r2,-4(fp)
    f500:	10bfff04 	addi	r2,r2,-4
    f504:	e0bfff15 	stw	r2,-4(fp)
    f508:	e0ffff17 	ldw	r3,-4(fp)
    f50c:	00800074 	movhi	r2,1
    f510:	10813d04 	addi	r2,r2,1268
    f514:	18bff62e 	bgeu	r3,r2,f4f0 <__alt_data_end+0xfffc6110>
        (*ctor) (); 
}
    f518:	0001883a 	nop
    f51c:	e037883a 	mov	sp,fp
    f520:	dfc00117 	ldw	ra,4(sp)
    f524:	df000017 	ldw	fp,0(sp)
    f528:	dec00204 	addi	sp,sp,8
    f52c:	f800283a 	ret

0000f530 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f530:	defffd04 	addi	sp,sp,-12
    f534:	dfc00215 	stw	ra,8(sp)
    f538:	df000115 	stw	fp,4(sp)
    f53c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f540:	00800074 	movhi	r2,1
    f544:	10813c04 	addi	r2,r2,1264
    f548:	e0bfff15 	stw	r2,-4(fp)
    f54c:	00000606 	br	f568 <_do_dtors+0x38>
        (*dtor) (); 
    f550:	e0bfff17 	ldw	r2,-4(fp)
    f554:	10800017 	ldw	r2,0(r2)
    f558:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f55c:	e0bfff17 	ldw	r2,-4(fp)
    f560:	10bfff04 	addi	r2,r2,-4
    f564:	e0bfff15 	stw	r2,-4(fp)
    f568:	e0ffff17 	ldw	r3,-4(fp)
    f56c:	00800074 	movhi	r2,1
    f570:	10813d04 	addi	r2,r2,1268
    f574:	18bff62e 	bgeu	r3,r2,f550 <__alt_data_end+0xfffc6170>
        (*dtor) (); 
}
    f578:	0001883a 	nop
    f57c:	e037883a 	mov	sp,fp
    f580:	dfc00117 	ldw	ra,4(sp)
    f584:	df000017 	ldw	fp,0(sp)
    f588:	dec00204 	addi	sp,sp,8
    f58c:	f800283a 	ret

0000f590 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    f590:	deffff04 	addi	sp,sp,-4
    f594:	df000015 	stw	fp,0(sp)
    f598:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    f59c:	0001883a 	nop
    f5a0:	e037883a 	mov	sp,fp
    f5a4:	df000017 	ldw	fp,0(sp)
    f5a8:	dec00104 	addi	sp,sp,4
    f5ac:	f800283a 	ret

0000f5b0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    f5b0:	defff904 	addi	sp,sp,-28
    f5b4:	dfc00615 	stw	ra,24(sp)
    f5b8:	df000515 	stw	fp,20(sp)
    f5bc:	df000504 	addi	fp,sp,20
    f5c0:	e13ffc15 	stw	r4,-16(fp)
    f5c4:	e17ffd15 	stw	r5,-12(fp)
    f5c8:	e1bffe15 	stw	r6,-8(fp)
    f5cc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    f5d0:	e0800217 	ldw	r2,8(fp)
    f5d4:	d8800015 	stw	r2,0(sp)
    f5d8:	e1ffff17 	ldw	r7,-4(fp)
    f5dc:	e1bffe17 	ldw	r6,-8(fp)
    f5e0:	e17ffd17 	ldw	r5,-12(fp)
    f5e4:	e13ffc17 	ldw	r4,-16(fp)
    f5e8:	000f7900 	call	f790 <alt_iic_isr_register>
}  
    f5ec:	e037883a 	mov	sp,fp
    f5f0:	dfc00117 	ldw	ra,4(sp)
    f5f4:	df000017 	ldw	fp,0(sp)
    f5f8:	dec00204 	addi	sp,sp,8
    f5fc:	f800283a 	ret

0000f600 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    f600:	defff904 	addi	sp,sp,-28
    f604:	df000615 	stw	fp,24(sp)
    f608:	df000604 	addi	fp,sp,24
    f60c:	e13ffe15 	stw	r4,-8(fp)
    f610:	e17fff15 	stw	r5,-4(fp)
    f614:	e0bfff17 	ldw	r2,-4(fp)
    f618:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f61c:	0005303a 	rdctl	r2,status
    f620:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f624:	e0fffb17 	ldw	r3,-20(fp)
    f628:	00bfff84 	movi	r2,-2
    f62c:	1884703a 	and	r2,r3,r2
    f630:	1001703a 	wrctl	status,r2
  
  return context;
    f634:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    f638:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    f63c:	00c00044 	movi	r3,1
    f640:	e0bffa17 	ldw	r2,-24(fp)
    f644:	1884983a 	sll	r2,r3,r2
    f648:	1007883a 	mov	r3,r2
    f64c:	00800074 	movhi	r2,1
    f650:	108fcd04 	addi	r2,r2,16180
    f654:	10800017 	ldw	r2,0(r2)
    f658:	1886b03a 	or	r3,r3,r2
    f65c:	00800074 	movhi	r2,1
    f660:	108fcd04 	addi	r2,r2,16180
    f664:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f668:	00800074 	movhi	r2,1
    f66c:	108fcd04 	addi	r2,r2,16180
    f670:	10800017 	ldw	r2,0(r2)
    f674:	100170fa 	wrctl	ienable,r2
    f678:	e0bffc17 	ldw	r2,-16(fp)
    f67c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f680:	e0bffd17 	ldw	r2,-12(fp)
    f684:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    f688:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    f68c:	0001883a 	nop
}
    f690:	e037883a 	mov	sp,fp
    f694:	df000017 	ldw	fp,0(sp)
    f698:	dec00104 	addi	sp,sp,4
    f69c:	f800283a 	ret

0000f6a0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    f6a0:	defff904 	addi	sp,sp,-28
    f6a4:	df000615 	stw	fp,24(sp)
    f6a8:	df000604 	addi	fp,sp,24
    f6ac:	e13ffe15 	stw	r4,-8(fp)
    f6b0:	e17fff15 	stw	r5,-4(fp)
    f6b4:	e0bfff17 	ldw	r2,-4(fp)
    f6b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f6bc:	0005303a 	rdctl	r2,status
    f6c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f6c4:	e0fffb17 	ldw	r3,-20(fp)
    f6c8:	00bfff84 	movi	r2,-2
    f6cc:	1884703a 	and	r2,r3,r2
    f6d0:	1001703a 	wrctl	status,r2
  
  return context;
    f6d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    f6d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    f6dc:	00c00044 	movi	r3,1
    f6e0:	e0bffa17 	ldw	r2,-24(fp)
    f6e4:	1884983a 	sll	r2,r3,r2
    f6e8:	0084303a 	nor	r2,zero,r2
    f6ec:	1007883a 	mov	r3,r2
    f6f0:	00800074 	movhi	r2,1
    f6f4:	108fcd04 	addi	r2,r2,16180
    f6f8:	10800017 	ldw	r2,0(r2)
    f6fc:	1886703a 	and	r3,r3,r2
    f700:	00800074 	movhi	r2,1
    f704:	108fcd04 	addi	r2,r2,16180
    f708:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f70c:	00800074 	movhi	r2,1
    f710:	108fcd04 	addi	r2,r2,16180
    f714:	10800017 	ldw	r2,0(r2)
    f718:	100170fa 	wrctl	ienable,r2
    f71c:	e0bffc17 	ldw	r2,-16(fp)
    f720:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f724:	e0bffd17 	ldw	r2,-12(fp)
    f728:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    f72c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    f730:	0001883a 	nop
}
    f734:	e037883a 	mov	sp,fp
    f738:	df000017 	ldw	fp,0(sp)
    f73c:	dec00104 	addi	sp,sp,4
    f740:	f800283a 	ret

0000f744 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    f744:	defffc04 	addi	sp,sp,-16
    f748:	df000315 	stw	fp,12(sp)
    f74c:	df000304 	addi	fp,sp,12
    f750:	e13ffe15 	stw	r4,-8(fp)
    f754:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    f758:	000530fa 	rdctl	r2,ienable
    f75c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    f760:	00c00044 	movi	r3,1
    f764:	e0bfff17 	ldw	r2,-4(fp)
    f768:	1884983a 	sll	r2,r3,r2
    f76c:	1007883a 	mov	r3,r2
    f770:	e0bffd17 	ldw	r2,-12(fp)
    f774:	1884703a 	and	r2,r3,r2
    f778:	1004c03a 	cmpne	r2,r2,zero
    f77c:	10803fcc 	andi	r2,r2,255
}
    f780:	e037883a 	mov	sp,fp
    f784:	df000017 	ldw	fp,0(sp)
    f788:	dec00104 	addi	sp,sp,4
    f78c:	f800283a 	ret

0000f790 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    f790:	defff504 	addi	sp,sp,-44
    f794:	dfc00a15 	stw	ra,40(sp)
    f798:	df000915 	stw	fp,36(sp)
    f79c:	df000904 	addi	fp,sp,36
    f7a0:	e13ffc15 	stw	r4,-16(fp)
    f7a4:	e17ffd15 	stw	r5,-12(fp)
    f7a8:	e1bffe15 	stw	r6,-8(fp)
    f7ac:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    f7b0:	00bffa84 	movi	r2,-22
    f7b4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    f7b8:	e0bffd17 	ldw	r2,-12(fp)
    f7bc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    f7c0:	e0bff817 	ldw	r2,-32(fp)
    f7c4:	10800808 	cmpgei	r2,r2,32
    f7c8:	1000271e 	bne	r2,zero,f868 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f7cc:	0005303a 	rdctl	r2,status
    f7d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f7d4:	e0fffb17 	ldw	r3,-20(fp)
    f7d8:	00bfff84 	movi	r2,-2
    f7dc:	1884703a 	and	r2,r3,r2
    f7e0:	1001703a 	wrctl	status,r2
  
  return context;
    f7e4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    f7e8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    f7ec:	00800074 	movhi	r2,1
    f7f0:	108fdb04 	addi	r2,r2,16236
    f7f4:	e0fff817 	ldw	r3,-32(fp)
    f7f8:	180690fa 	slli	r3,r3,3
    f7fc:	10c5883a 	add	r2,r2,r3
    f800:	e0fffe17 	ldw	r3,-8(fp)
    f804:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    f808:	00800074 	movhi	r2,1
    f80c:	108fdb04 	addi	r2,r2,16236
    f810:	e0fff817 	ldw	r3,-32(fp)
    f814:	180690fa 	slli	r3,r3,3
    f818:	10c5883a 	add	r2,r2,r3
    f81c:	10800104 	addi	r2,r2,4
    f820:	e0ffff17 	ldw	r3,-4(fp)
    f824:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    f828:	e0bffe17 	ldw	r2,-8(fp)
    f82c:	10000526 	beq	r2,zero,f844 <alt_iic_isr_register+0xb4>
    f830:	e0bff817 	ldw	r2,-32(fp)
    f834:	100b883a 	mov	r5,r2
    f838:	e13ffc17 	ldw	r4,-16(fp)
    f83c:	000f6000 	call	f600 <alt_ic_irq_enable>
    f840:	00000406 	br	f854 <alt_iic_isr_register+0xc4>
    f844:	e0bff817 	ldw	r2,-32(fp)
    f848:	100b883a 	mov	r5,r2
    f84c:	e13ffc17 	ldw	r4,-16(fp)
    f850:	000f6a00 	call	f6a0 <alt_ic_irq_disable>
    f854:	e0bff715 	stw	r2,-36(fp)
    f858:	e0bffa17 	ldw	r2,-24(fp)
    f85c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f860:	e0bff917 	ldw	r2,-28(fp)
    f864:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    f868:	e0bff717 	ldw	r2,-36(fp)
}
    f86c:	e037883a 	mov	sp,fp
    f870:	dfc00117 	ldw	ra,4(sp)
    f874:	df000017 	ldw	fp,0(sp)
    f878:	dec00204 	addi	sp,sp,8
    f87c:	f800283a 	ret

0000f880 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    f880:	defff804 	addi	sp,sp,-32
    f884:	dfc00715 	stw	ra,28(sp)
    f888:	df000615 	stw	fp,24(sp)
    f88c:	dc000515 	stw	r16,20(sp)
    f890:	df000604 	addi	fp,sp,24
    f894:	e13ffb15 	stw	r4,-20(fp)
    f898:	e17ffc15 	stw	r5,-16(fp)
    f89c:	e1bffd15 	stw	r6,-12(fp)
    f8a0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    f8a4:	e1bffe17 	ldw	r6,-8(fp)
    f8a8:	e17ffd17 	ldw	r5,-12(fp)
    f8ac:	e13ffc17 	ldw	r4,-16(fp)
    f8b0:	000fb240 	call	fb24 <open>
    f8b4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    f8b8:	e0bffa17 	ldw	r2,-24(fp)
    f8bc:	10002216 	blt	r2,zero,f948 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    f8c0:	04000074 	movhi	r16,1
    f8c4:	84048004 	addi	r16,r16,4608
    f8c8:	e0bffa17 	ldw	r2,-24(fp)
    f8cc:	01400304 	movi	r5,12
    f8d0:	1009883a 	mov	r4,r2
    f8d4:	000ade00 	call	ade0 <__mulsi3>
    f8d8:	8085883a 	add	r2,r16,r2
    f8dc:	10c00017 	ldw	r3,0(r2)
    f8e0:	e0bffb17 	ldw	r2,-20(fp)
    f8e4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    f8e8:	04000074 	movhi	r16,1
    f8ec:	84048004 	addi	r16,r16,4608
    f8f0:	e0bffa17 	ldw	r2,-24(fp)
    f8f4:	01400304 	movi	r5,12
    f8f8:	1009883a 	mov	r4,r2
    f8fc:	000ade00 	call	ade0 <__mulsi3>
    f900:	8085883a 	add	r2,r16,r2
    f904:	10800104 	addi	r2,r2,4
    f908:	10c00017 	ldw	r3,0(r2)
    f90c:	e0bffb17 	ldw	r2,-20(fp)
    f910:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f914:	04000074 	movhi	r16,1
    f918:	84048004 	addi	r16,r16,4608
    f91c:	e0bffa17 	ldw	r2,-24(fp)
    f920:	01400304 	movi	r5,12
    f924:	1009883a 	mov	r4,r2
    f928:	000ade00 	call	ade0 <__mulsi3>
    f92c:	8085883a 	add	r2,r16,r2
    f930:	10800204 	addi	r2,r2,8
    f934:	10c00017 	ldw	r3,0(r2)
    f938:	e0bffb17 	ldw	r2,-20(fp)
    f93c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    f940:	e13ffa17 	ldw	r4,-24(fp)
    f944:	000de340 	call	de34 <alt_release_fd>
  }
} 
    f948:	0001883a 	nop
    f94c:	e6ffff04 	addi	sp,fp,-4
    f950:	dfc00217 	ldw	ra,8(sp)
    f954:	df000117 	ldw	fp,4(sp)
    f958:	dc000017 	ldw	r16,0(sp)
    f95c:	dec00304 	addi	sp,sp,12
    f960:	f800283a 	ret

0000f964 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f964:	defffb04 	addi	sp,sp,-20
    f968:	dfc00415 	stw	ra,16(sp)
    f96c:	df000315 	stw	fp,12(sp)
    f970:	df000304 	addi	fp,sp,12
    f974:	e13ffd15 	stw	r4,-12(fp)
    f978:	e17ffe15 	stw	r5,-8(fp)
    f97c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    f980:	01c07fc4 	movi	r7,511
    f984:	01800044 	movi	r6,1
    f988:	e17ffd17 	ldw	r5,-12(fp)
    f98c:	01000074 	movhi	r4,1
    f990:	21048304 	addi	r4,r4,4620
    f994:	000f8800 	call	f880 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    f998:	01c07fc4 	movi	r7,511
    f99c:	000d883a 	mov	r6,zero
    f9a0:	e17ffe17 	ldw	r5,-8(fp)
    f9a4:	01000074 	movhi	r4,1
    f9a8:	21048004 	addi	r4,r4,4608
    f9ac:	000f8800 	call	f880 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    f9b0:	01c07fc4 	movi	r7,511
    f9b4:	01800044 	movi	r6,1
    f9b8:	e17fff17 	ldw	r5,-4(fp)
    f9bc:	01000074 	movhi	r4,1
    f9c0:	21048604 	addi	r4,r4,4632
    f9c4:	000f8800 	call	f880 <alt_open_fd>
}  
    f9c8:	0001883a 	nop
    f9cc:	e037883a 	mov	sp,fp
    f9d0:	dfc00117 	ldw	ra,4(sp)
    f9d4:	df000017 	ldw	fp,0(sp)
    f9d8:	dec00204 	addi	sp,sp,8
    f9dc:	f800283a 	ret

0000f9e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f9e0:	defffe04 	addi	sp,sp,-8
    f9e4:	dfc00115 	stw	ra,4(sp)
    f9e8:	df000015 	stw	fp,0(sp)
    f9ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f9f0:	00800074 	movhi	r2,1
    f9f4:	10890304 	addi	r2,r2,9228
    f9f8:	10800017 	ldw	r2,0(r2)
    f9fc:	10000526 	beq	r2,zero,fa14 <alt_get_errno+0x34>
    fa00:	00800074 	movhi	r2,1
    fa04:	10890304 	addi	r2,r2,9228
    fa08:	10800017 	ldw	r2,0(r2)
    fa0c:	103ee83a 	callr	r2
    fa10:	00000206 	br	fa1c <alt_get_errno+0x3c>
    fa14:	00800074 	movhi	r2,1
    fa18:	108fc904 	addi	r2,r2,16164
}
    fa1c:	e037883a 	mov	sp,fp
    fa20:	dfc00117 	ldw	ra,4(sp)
    fa24:	df000017 	ldw	fp,0(sp)
    fa28:	dec00204 	addi	sp,sp,8
    fa2c:	f800283a 	ret

0000fa30 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    fa30:	defffb04 	addi	sp,sp,-20
    fa34:	dfc00415 	stw	ra,16(sp)
    fa38:	df000315 	stw	fp,12(sp)
    fa3c:	dc000215 	stw	r16,8(sp)
    fa40:	df000304 	addi	fp,sp,12
    fa44:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    fa48:	e0bffe17 	ldw	r2,-8(fp)
    fa4c:	10800217 	ldw	r2,8(r2)
    fa50:	10d00034 	orhi	r3,r2,16384
    fa54:	e0bffe17 	ldw	r2,-8(fp)
    fa58:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    fa5c:	e03ffd15 	stw	zero,-12(fp)
    fa60:	00002306 	br	faf0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    fa64:	04000074 	movhi	r16,1
    fa68:	84048004 	addi	r16,r16,4608
    fa6c:	e0bffd17 	ldw	r2,-12(fp)
    fa70:	01400304 	movi	r5,12
    fa74:	1009883a 	mov	r4,r2
    fa78:	000ade00 	call	ade0 <__mulsi3>
    fa7c:	8085883a 	add	r2,r16,r2
    fa80:	10c00017 	ldw	r3,0(r2)
    fa84:	e0bffe17 	ldw	r2,-8(fp)
    fa88:	10800017 	ldw	r2,0(r2)
    fa8c:	1880151e 	bne	r3,r2,fae4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    fa90:	04000074 	movhi	r16,1
    fa94:	84048004 	addi	r16,r16,4608
    fa98:	e0bffd17 	ldw	r2,-12(fp)
    fa9c:	01400304 	movi	r5,12
    faa0:	1009883a 	mov	r4,r2
    faa4:	000ade00 	call	ade0 <__mulsi3>
    faa8:	8085883a 	add	r2,r16,r2
    faac:	10800204 	addi	r2,r2,8
    fab0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    fab4:	10000b0e 	bge	r2,zero,fae4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    fab8:	01400304 	movi	r5,12
    fabc:	e13ffd17 	ldw	r4,-12(fp)
    fac0:	000ade00 	call	ade0 <__mulsi3>
    fac4:	1007883a 	mov	r3,r2
    fac8:	00800074 	movhi	r2,1
    facc:	10848004 	addi	r2,r2,4608
    fad0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    fad4:	e0bffe17 	ldw	r2,-8(fp)
    fad8:	18800226 	beq	r3,r2,fae4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    fadc:	00bffcc4 	movi	r2,-13
    fae0:	00000a06 	br	fb0c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    fae4:	e0bffd17 	ldw	r2,-12(fp)
    fae8:	10800044 	addi	r2,r2,1
    faec:	e0bffd15 	stw	r2,-12(fp)
    faf0:	00800074 	movhi	r2,1
    faf4:	10890204 	addi	r2,r2,9224
    faf8:	10800017 	ldw	r2,0(r2)
    fafc:	1007883a 	mov	r3,r2
    fb00:	e0bffd17 	ldw	r2,-12(fp)
    fb04:	18bfd72e 	bgeu	r3,r2,fa64 <__alt_data_end+0xfffc6684>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    fb08:	0005883a 	mov	r2,zero
}
    fb0c:	e6ffff04 	addi	sp,fp,-4
    fb10:	dfc00217 	ldw	ra,8(sp)
    fb14:	df000117 	ldw	fp,4(sp)
    fb18:	dc000017 	ldw	r16,0(sp)
    fb1c:	dec00304 	addi	sp,sp,12
    fb20:	f800283a 	ret

0000fb24 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    fb24:	defff604 	addi	sp,sp,-40
    fb28:	dfc00915 	stw	ra,36(sp)
    fb2c:	df000815 	stw	fp,32(sp)
    fb30:	df000804 	addi	fp,sp,32
    fb34:	e13ffd15 	stw	r4,-12(fp)
    fb38:	e17ffe15 	stw	r5,-8(fp)
    fb3c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    fb40:	00bfffc4 	movi	r2,-1
    fb44:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    fb48:	00bffb44 	movi	r2,-19
    fb4c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    fb50:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    fb54:	01400074 	movhi	r5,1
    fb58:	29490004 	addi	r5,r5,9216
    fb5c:	e13ffd17 	ldw	r4,-12(fp)
    fb60:	000fe4c0 	call	fe4c <alt_find_dev>
    fb64:	e0bff815 	stw	r2,-32(fp)
    fb68:	e0bff817 	ldw	r2,-32(fp)
    fb6c:	1000051e 	bne	r2,zero,fb84 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    fb70:	e13ffd17 	ldw	r4,-12(fp)
    fb74:	000fedc0 	call	fedc <alt_find_file>
    fb78:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    fb7c:	00800044 	movi	r2,1
    fb80:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    fb84:	e0bff817 	ldw	r2,-32(fp)
    fb88:	10002b26 	beq	r2,zero,fc38 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    fb8c:	e13ff817 	ldw	r4,-32(fp)
    fb90:	000fff00 	call	fff0 <alt_get_fd>
    fb94:	e0bff915 	stw	r2,-28(fp)
    fb98:	e0bff917 	ldw	r2,-28(fp)
    fb9c:	1000030e 	bge	r2,zero,fbac <open+0x88>
    {
      status = index;
    fba0:	e0bff917 	ldw	r2,-28(fp)
    fba4:	e0bffa15 	stw	r2,-24(fp)
    fba8:	00002506 	br	fc40 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    fbac:	01400304 	movi	r5,12
    fbb0:	e13ff917 	ldw	r4,-28(fp)
    fbb4:	000ade00 	call	ade0 <__mulsi3>
    fbb8:	1007883a 	mov	r3,r2
    fbbc:	00800074 	movhi	r2,1
    fbc0:	10848004 	addi	r2,r2,4608
    fbc4:	1885883a 	add	r2,r3,r2
    fbc8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    fbcc:	e0fffe17 	ldw	r3,-8(fp)
    fbd0:	00900034 	movhi	r2,16384
    fbd4:	10bfffc4 	addi	r2,r2,-1
    fbd8:	1886703a 	and	r3,r3,r2
    fbdc:	e0bffc17 	ldw	r2,-16(fp)
    fbe0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    fbe4:	e0bffb17 	ldw	r2,-20(fp)
    fbe8:	1000051e 	bne	r2,zero,fc00 <open+0xdc>
    fbec:	e13ffc17 	ldw	r4,-16(fp)
    fbf0:	000fa300 	call	fa30 <alt_file_locked>
    fbf4:	e0bffa15 	stw	r2,-24(fp)
    fbf8:	e0bffa17 	ldw	r2,-24(fp)
    fbfc:	10001016 	blt	r2,zero,fc40 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    fc00:	e0bff817 	ldw	r2,-32(fp)
    fc04:	10800317 	ldw	r2,12(r2)
    fc08:	10000826 	beq	r2,zero,fc2c <open+0x108>
    fc0c:	e0bff817 	ldw	r2,-32(fp)
    fc10:	10800317 	ldw	r2,12(r2)
    fc14:	e1ffff17 	ldw	r7,-4(fp)
    fc18:	e1bffe17 	ldw	r6,-8(fp)
    fc1c:	e17ffd17 	ldw	r5,-12(fp)
    fc20:	e13ffc17 	ldw	r4,-16(fp)
    fc24:	103ee83a 	callr	r2
    fc28:	00000106 	br	fc30 <open+0x10c>
    fc2c:	0005883a 	mov	r2,zero
    fc30:	e0bffa15 	stw	r2,-24(fp)
    fc34:	00000206 	br	fc40 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    fc38:	00bffb44 	movi	r2,-19
    fc3c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    fc40:	e0bffa17 	ldw	r2,-24(fp)
    fc44:	1000090e 	bge	r2,zero,fc6c <open+0x148>
  {
    alt_release_fd (index);  
    fc48:	e13ff917 	ldw	r4,-28(fp)
    fc4c:	000de340 	call	de34 <alt_release_fd>
    ALT_ERRNO = -status;
    fc50:	000f9e00 	call	f9e0 <alt_get_errno>
    fc54:	1007883a 	mov	r3,r2
    fc58:	e0bffa17 	ldw	r2,-24(fp)
    fc5c:	0085c83a 	sub	r2,zero,r2
    fc60:	18800015 	stw	r2,0(r3)
    return -1;
    fc64:	00bfffc4 	movi	r2,-1
    fc68:	00000106 	br	fc70 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    fc6c:	e0bff917 	ldw	r2,-28(fp)
}
    fc70:	e037883a 	mov	sp,fp
    fc74:	dfc00117 	ldw	ra,4(sp)
    fc78:	df000017 	ldw	fp,0(sp)
    fc7c:	dec00204 	addi	sp,sp,8
    fc80:	f800283a 	ret

0000fc84 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    fc84:	defffa04 	addi	sp,sp,-24
    fc88:	df000515 	stw	fp,20(sp)
    fc8c:	df000504 	addi	fp,sp,20
    fc90:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fc94:	0005303a 	rdctl	r2,status
    fc98:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fc9c:	e0fffc17 	ldw	r3,-16(fp)
    fca0:	00bfff84 	movi	r2,-2
    fca4:	1884703a 	and	r2,r3,r2
    fca8:	1001703a 	wrctl	status,r2
  
  return context;
    fcac:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    fcb0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    fcb4:	e0bfff17 	ldw	r2,-4(fp)
    fcb8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    fcbc:	e0bffd17 	ldw	r2,-12(fp)
    fcc0:	10800017 	ldw	r2,0(r2)
    fcc4:	e0fffd17 	ldw	r3,-12(fp)
    fcc8:	18c00117 	ldw	r3,4(r3)
    fccc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    fcd0:	e0bffd17 	ldw	r2,-12(fp)
    fcd4:	10800117 	ldw	r2,4(r2)
    fcd8:	e0fffd17 	ldw	r3,-12(fp)
    fcdc:	18c00017 	ldw	r3,0(r3)
    fce0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    fce4:	e0bffd17 	ldw	r2,-12(fp)
    fce8:	e0fffd17 	ldw	r3,-12(fp)
    fcec:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    fcf0:	e0bffd17 	ldw	r2,-12(fp)
    fcf4:	e0fffd17 	ldw	r3,-12(fp)
    fcf8:	10c00015 	stw	r3,0(r2)
    fcfc:	e0bffb17 	ldw	r2,-20(fp)
    fd00:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fd04:	e0bffe17 	ldw	r2,-8(fp)
    fd08:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    fd0c:	0001883a 	nop
    fd10:	e037883a 	mov	sp,fp
    fd14:	df000017 	ldw	fp,0(sp)
    fd18:	dec00104 	addi	sp,sp,4
    fd1c:	f800283a 	ret

0000fd20 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    fd20:	defffb04 	addi	sp,sp,-20
    fd24:	dfc00415 	stw	ra,16(sp)
    fd28:	df000315 	stw	fp,12(sp)
    fd2c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    fd30:	d0a00e17 	ldw	r2,-32712(gp)
    fd34:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    fd38:	d0a6d717 	ldw	r2,-25764(gp)
    fd3c:	10800044 	addi	r2,r2,1
    fd40:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    fd44:	00002e06 	br	fe00 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    fd48:	e0bffd17 	ldw	r2,-12(fp)
    fd4c:	10800017 	ldw	r2,0(r2)
    fd50:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    fd54:	e0bffd17 	ldw	r2,-12(fp)
    fd58:	10800403 	ldbu	r2,16(r2)
    fd5c:	10803fcc 	andi	r2,r2,255
    fd60:	10000426 	beq	r2,zero,fd74 <alt_tick+0x54>
    fd64:	d0a6d717 	ldw	r2,-25764(gp)
    fd68:	1000021e 	bne	r2,zero,fd74 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    fd6c:	e0bffd17 	ldw	r2,-12(fp)
    fd70:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    fd74:	e0bffd17 	ldw	r2,-12(fp)
    fd78:	10800217 	ldw	r2,8(r2)
    fd7c:	d0e6d717 	ldw	r3,-25764(gp)
    fd80:	18801d36 	bltu	r3,r2,fdf8 <alt_tick+0xd8>
    fd84:	e0bffd17 	ldw	r2,-12(fp)
    fd88:	10800403 	ldbu	r2,16(r2)
    fd8c:	10803fcc 	andi	r2,r2,255
    fd90:	1000191e 	bne	r2,zero,fdf8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    fd94:	e0bffd17 	ldw	r2,-12(fp)
    fd98:	10800317 	ldw	r2,12(r2)
    fd9c:	e0fffd17 	ldw	r3,-12(fp)
    fda0:	18c00517 	ldw	r3,20(r3)
    fda4:	1809883a 	mov	r4,r3
    fda8:	103ee83a 	callr	r2
    fdac:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    fdb0:	e0bfff17 	ldw	r2,-4(fp)
    fdb4:	1000031e 	bne	r2,zero,fdc4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    fdb8:	e13ffd17 	ldw	r4,-12(fp)
    fdbc:	000fc840 	call	fc84 <alt_alarm_stop>
    fdc0:	00000d06 	br	fdf8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    fdc4:	e0bffd17 	ldw	r2,-12(fp)
    fdc8:	10c00217 	ldw	r3,8(r2)
    fdcc:	e0bfff17 	ldw	r2,-4(fp)
    fdd0:	1887883a 	add	r3,r3,r2
    fdd4:	e0bffd17 	ldw	r2,-12(fp)
    fdd8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    fddc:	e0bffd17 	ldw	r2,-12(fp)
    fde0:	10c00217 	ldw	r3,8(r2)
    fde4:	d0a6d717 	ldw	r2,-25764(gp)
    fde8:	1880032e 	bgeu	r3,r2,fdf8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    fdec:	e0bffd17 	ldw	r2,-12(fp)
    fdf0:	00c00044 	movi	r3,1
    fdf4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    fdf8:	e0bffe17 	ldw	r2,-8(fp)
    fdfc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    fe00:	e0fffd17 	ldw	r3,-12(fp)
    fe04:	d0a00e04 	addi	r2,gp,-32712
    fe08:	18bfcf1e 	bne	r3,r2,fd48 <__alt_data_end+0xfffc6968>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    fe0c:	0001883a 	nop
}
    fe10:	0001883a 	nop
    fe14:	e037883a 	mov	sp,fp
    fe18:	dfc00117 	ldw	ra,4(sp)
    fe1c:	df000017 	ldw	fp,0(sp)
    fe20:	dec00204 	addi	sp,sp,8
    fe24:	f800283a 	ret

0000fe28 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    fe28:	deffff04 	addi	sp,sp,-4
    fe2c:	df000015 	stw	fp,0(sp)
    fe30:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    fe34:	000170fa 	wrctl	ienable,zero
}
    fe38:	0001883a 	nop
    fe3c:	e037883a 	mov	sp,fp
    fe40:	df000017 	ldw	fp,0(sp)
    fe44:	dec00104 	addi	sp,sp,4
    fe48:	f800283a 	ret

0000fe4c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    fe4c:	defffa04 	addi	sp,sp,-24
    fe50:	dfc00515 	stw	ra,20(sp)
    fe54:	df000415 	stw	fp,16(sp)
    fe58:	df000404 	addi	fp,sp,16
    fe5c:	e13ffe15 	stw	r4,-8(fp)
    fe60:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    fe64:	e0bfff17 	ldw	r2,-4(fp)
    fe68:	10800017 	ldw	r2,0(r2)
    fe6c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    fe70:	e13ffe17 	ldw	r4,-8(fp)
    fe74:	00007440 	call	744 <strlen>
    fe78:	10800044 	addi	r2,r2,1
    fe7c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    fe80:	00000d06 	br	feb8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    fe84:	e0bffc17 	ldw	r2,-16(fp)
    fe88:	10800217 	ldw	r2,8(r2)
    fe8c:	e0fffd17 	ldw	r3,-12(fp)
    fe90:	180d883a 	mov	r6,r3
    fe94:	e17ffe17 	ldw	r5,-8(fp)
    fe98:	1009883a 	mov	r4,r2
    fe9c:	00101ac0 	call	101ac <memcmp>
    fea0:	1000021e 	bne	r2,zero,feac <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    fea4:	e0bffc17 	ldw	r2,-16(fp)
    fea8:	00000706 	br	fec8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    feac:	e0bffc17 	ldw	r2,-16(fp)
    feb0:	10800017 	ldw	r2,0(r2)
    feb4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    feb8:	e0fffc17 	ldw	r3,-16(fp)
    febc:	e0bfff17 	ldw	r2,-4(fp)
    fec0:	18bff01e 	bne	r3,r2,fe84 <__alt_data_end+0xfffc6aa4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    fec4:	0005883a 	mov	r2,zero
}
    fec8:	e037883a 	mov	sp,fp
    fecc:	dfc00117 	ldw	ra,4(sp)
    fed0:	df000017 	ldw	fp,0(sp)
    fed4:	dec00204 	addi	sp,sp,8
    fed8:	f800283a 	ret

0000fedc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    fedc:	defffb04 	addi	sp,sp,-20
    fee0:	dfc00415 	stw	ra,16(sp)
    fee4:	df000315 	stw	fp,12(sp)
    fee8:	df000304 	addi	fp,sp,12
    feec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    fef0:	00800074 	movhi	r2,1
    fef4:	1088fe04 	addi	r2,r2,9208
    fef8:	10800017 	ldw	r2,0(r2)
    fefc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ff00:	00003106 	br	ffc8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    ff04:	e0bffd17 	ldw	r2,-12(fp)
    ff08:	10800217 	ldw	r2,8(r2)
    ff0c:	1009883a 	mov	r4,r2
    ff10:	00007440 	call	744 <strlen>
    ff14:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    ff18:	e0bffd17 	ldw	r2,-12(fp)
    ff1c:	10c00217 	ldw	r3,8(r2)
    ff20:	e0bffe17 	ldw	r2,-8(fp)
    ff24:	10bfffc4 	addi	r2,r2,-1
    ff28:	1885883a 	add	r2,r3,r2
    ff2c:	10800003 	ldbu	r2,0(r2)
    ff30:	10803fcc 	andi	r2,r2,255
    ff34:	1080201c 	xori	r2,r2,128
    ff38:	10bfe004 	addi	r2,r2,-128
    ff3c:	10800bd8 	cmpnei	r2,r2,47
    ff40:	1000031e 	bne	r2,zero,ff50 <alt_find_file+0x74>
    {
      len -= 1;
    ff44:	e0bffe17 	ldw	r2,-8(fp)
    ff48:	10bfffc4 	addi	r2,r2,-1
    ff4c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ff50:	e0bffe17 	ldw	r2,-8(fp)
    ff54:	e0ffff17 	ldw	r3,-4(fp)
    ff58:	1885883a 	add	r2,r3,r2
    ff5c:	10800003 	ldbu	r2,0(r2)
    ff60:	10803fcc 	andi	r2,r2,255
    ff64:	1080201c 	xori	r2,r2,128
    ff68:	10bfe004 	addi	r2,r2,-128
    ff6c:	10800be0 	cmpeqi	r2,r2,47
    ff70:	1000081e 	bne	r2,zero,ff94 <alt_find_file+0xb8>
    ff74:	e0bffe17 	ldw	r2,-8(fp)
    ff78:	e0ffff17 	ldw	r3,-4(fp)
    ff7c:	1885883a 	add	r2,r3,r2
    ff80:	10800003 	ldbu	r2,0(r2)
    ff84:	10803fcc 	andi	r2,r2,255
    ff88:	1080201c 	xori	r2,r2,128
    ff8c:	10bfe004 	addi	r2,r2,-128
    ff90:	10000a1e 	bne	r2,zero,ffbc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    ff94:	e0bffd17 	ldw	r2,-12(fp)
    ff98:	10800217 	ldw	r2,8(r2)
    ff9c:	e0fffe17 	ldw	r3,-8(fp)
    ffa0:	180d883a 	mov	r6,r3
    ffa4:	e17fff17 	ldw	r5,-4(fp)
    ffa8:	1009883a 	mov	r4,r2
    ffac:	00101ac0 	call	101ac <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ffb0:	1000021e 	bne	r2,zero,ffbc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    ffb4:	e0bffd17 	ldw	r2,-12(fp)
    ffb8:	00000806 	br	ffdc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    ffbc:	e0bffd17 	ldw	r2,-12(fp)
    ffc0:	10800017 	ldw	r2,0(r2)
    ffc4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ffc8:	e0fffd17 	ldw	r3,-12(fp)
    ffcc:	00800074 	movhi	r2,1
    ffd0:	1088fe04 	addi	r2,r2,9208
    ffd4:	18bfcb1e 	bne	r3,r2,ff04 <__alt_data_end+0xfffc6b24>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    ffd8:	0005883a 	mov	r2,zero
}
    ffdc:	e037883a 	mov	sp,fp
    ffe0:	dfc00117 	ldw	ra,4(sp)
    ffe4:	df000017 	ldw	fp,0(sp)
    ffe8:	dec00204 	addi	sp,sp,8
    ffec:	f800283a 	ret

0000fff0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    fff0:	defffa04 	addi	sp,sp,-24
    fff4:	dfc00515 	stw	ra,20(sp)
    fff8:	df000415 	stw	fp,16(sp)
    fffc:	dc000315 	stw	r16,12(sp)
   10000:	df000404 	addi	fp,sp,16
   10004:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   10008:	00bffa04 	movi	r2,-24
   1000c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10010:	e03ffc15 	stw	zero,-16(fp)
   10014:	00002106 	br	1009c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   10018:	04000074 	movhi	r16,1
   1001c:	84048004 	addi	r16,r16,4608
   10020:	e0bffc17 	ldw	r2,-16(fp)
   10024:	01400304 	movi	r5,12
   10028:	1009883a 	mov	r4,r2
   1002c:	000ade00 	call	ade0 <__mulsi3>
   10030:	8085883a 	add	r2,r16,r2
   10034:	10800017 	ldw	r2,0(r2)
   10038:	1000151e 	bne	r2,zero,10090 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   1003c:	04000074 	movhi	r16,1
   10040:	84048004 	addi	r16,r16,4608
   10044:	e0bffc17 	ldw	r2,-16(fp)
   10048:	01400304 	movi	r5,12
   1004c:	1009883a 	mov	r4,r2
   10050:	000ade00 	call	ade0 <__mulsi3>
   10054:	8085883a 	add	r2,r16,r2
   10058:	e0fffe17 	ldw	r3,-8(fp)
   1005c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   10060:	00800074 	movhi	r2,1
   10064:	10890204 	addi	r2,r2,9224
   10068:	10c00017 	ldw	r3,0(r2)
   1006c:	e0bffc17 	ldw	r2,-16(fp)
   10070:	1880040e 	bge	r3,r2,10084 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   10074:	00800074 	movhi	r2,1
   10078:	10890204 	addi	r2,r2,9224
   1007c:	e0fffc17 	ldw	r3,-16(fp)
   10080:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   10084:	e0bffc17 	ldw	r2,-16(fp)
   10088:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1008c:	00000606 	br	100a8 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10090:	e0bffc17 	ldw	r2,-16(fp)
   10094:	10800044 	addi	r2,r2,1
   10098:	e0bffc15 	stw	r2,-16(fp)
   1009c:	e0bffc17 	ldw	r2,-16(fp)
   100a0:	10800810 	cmplti	r2,r2,32
   100a4:	103fdc1e 	bne	r2,zero,10018 <__alt_data_end+0xfffc6c38>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   100a8:	e0bffd17 	ldw	r2,-12(fp)
}
   100ac:	e6ffff04 	addi	sp,fp,-4
   100b0:	dfc00217 	ldw	ra,8(sp)
   100b4:	df000117 	ldw	fp,4(sp)
   100b8:	dc000017 	ldw	r16,0(sp)
   100bc:	dec00304 	addi	sp,sp,12
   100c0:	f800283a 	ret

000100c4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   100c4:	defffe04 	addi	sp,sp,-8
   100c8:	df000115 	stw	fp,4(sp)
   100cc:	df000104 	addi	fp,sp,4
   100d0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   100d4:	e0bfff17 	ldw	r2,-4(fp)
   100d8:	10bffe84 	addi	r2,r2,-6
   100dc:	10c00428 	cmpgeui	r3,r2,16
   100e0:	18001a1e 	bne	r3,zero,1014c <alt_exception_cause_generated_bad_addr+0x88>
   100e4:	100690ba 	slli	r3,r2,2
   100e8:	00800074 	movhi	r2,1
   100ec:	10803f04 	addi	r2,r2,252
   100f0:	1885883a 	add	r2,r3,r2
   100f4:	10800017 	ldw	r2,0(r2)
   100f8:	1000683a 	jmp	r2
   100fc:	0001013c 	xorhi	zero,zero,1028
   10100:	0001013c 	xorhi	zero,zero,1028
   10104:	0001014c 	andi	zero,zero,1029
   10108:	0001014c 	andi	zero,zero,1029
   1010c:	0001014c 	andi	zero,zero,1029
   10110:	0001013c 	xorhi	zero,zero,1028
   10114:	00010144 	movi	zero,1029
   10118:	0001014c 	andi	zero,zero,1029
   1011c:	0001013c 	xorhi	zero,zero,1028
   10120:	0001013c 	xorhi	zero,zero,1028
   10124:	0001014c 	andi	zero,zero,1029
   10128:	0001013c 	xorhi	zero,zero,1028
   1012c:	00010144 	movi	zero,1029
   10130:	0001014c 	andi	zero,zero,1029
   10134:	0001014c 	andi	zero,zero,1029
   10138:	0001013c 	xorhi	zero,zero,1028
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1013c:	00800044 	movi	r2,1
   10140:	00000306 	br	10150 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10144:	0005883a 	mov	r2,zero
   10148:	00000106 	br	10150 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1014c:	0005883a 	mov	r2,zero
  }
}
   10150:	e037883a 	mov	sp,fp
   10154:	df000017 	ldw	fp,0(sp)
   10158:	dec00104 	addi	sp,sp,4
   1015c:	f800283a 	ret

00010160 <atexit>:
   10160:	200b883a 	mov	r5,r4
   10164:	000f883a 	mov	r7,zero
   10168:	000d883a 	mov	r6,zero
   1016c:	0009883a 	mov	r4,zero
   10170:	00102281 	jmpi	10228 <__register_exitproc>

00010174 <exit>:
   10174:	defffe04 	addi	sp,sp,-8
   10178:	000b883a 	mov	r5,zero
   1017c:	dc000015 	stw	r16,0(sp)
   10180:	dfc00115 	stw	ra,4(sp)
   10184:	2021883a 	mov	r16,r4
   10188:	00103400 	call	10340 <__call_exitprocs>
   1018c:	00800074 	movhi	r2,1
   10190:	1088f804 	addi	r2,r2,9184
   10194:	11000017 	ldw	r4,0(r2)
   10198:	20800f17 	ldw	r2,60(r4)
   1019c:	10000126 	beq	r2,zero,101a4 <exit+0x30>
   101a0:	103ee83a 	callr	r2
   101a4:	8009883a 	mov	r4,r16
   101a8:	00104c00 	call	104c0 <_exit>

000101ac <memcmp>:
   101ac:	01c000c4 	movi	r7,3
   101b0:	3980192e 	bgeu	r7,r6,10218 <memcmp+0x6c>
   101b4:	2144b03a 	or	r2,r4,r5
   101b8:	11c4703a 	and	r2,r2,r7
   101bc:	10000f26 	beq	r2,zero,101fc <memcmp+0x50>
   101c0:	20800003 	ldbu	r2,0(r4)
   101c4:	28c00003 	ldbu	r3,0(r5)
   101c8:	10c0151e 	bne	r2,r3,10220 <memcmp+0x74>
   101cc:	31bfff84 	addi	r6,r6,-2
   101d0:	01ffffc4 	movi	r7,-1
   101d4:	00000406 	br	101e8 <memcmp+0x3c>
   101d8:	20800003 	ldbu	r2,0(r4)
   101dc:	28c00003 	ldbu	r3,0(r5)
   101e0:	31bfffc4 	addi	r6,r6,-1
   101e4:	10c00e1e 	bne	r2,r3,10220 <memcmp+0x74>
   101e8:	21000044 	addi	r4,r4,1
   101ec:	29400044 	addi	r5,r5,1
   101f0:	31fff91e 	bne	r6,r7,101d8 <__alt_data_end+0xfffc6df8>
   101f4:	0005883a 	mov	r2,zero
   101f8:	f800283a 	ret
   101fc:	20c00017 	ldw	r3,0(r4)
   10200:	28800017 	ldw	r2,0(r5)
   10204:	18bfee1e 	bne	r3,r2,101c0 <__alt_data_end+0xfffc6de0>
   10208:	31bfff04 	addi	r6,r6,-4
   1020c:	21000104 	addi	r4,r4,4
   10210:	29400104 	addi	r5,r5,4
   10214:	39bff936 	bltu	r7,r6,101fc <__alt_data_end+0xfffc6e1c>
   10218:	303fe91e 	bne	r6,zero,101c0 <__alt_data_end+0xfffc6de0>
   1021c:	003ff506 	br	101f4 <__alt_data_end+0xfffc6e14>
   10220:	10c5c83a 	sub	r2,r2,r3
   10224:	f800283a 	ret

00010228 <__register_exitproc>:
   10228:	defffa04 	addi	sp,sp,-24
   1022c:	dc000315 	stw	r16,12(sp)
   10230:	04000074 	movhi	r16,1
   10234:	8408f804 	addi	r16,r16,9184
   10238:	80c00017 	ldw	r3,0(r16)
   1023c:	dc400415 	stw	r17,16(sp)
   10240:	dfc00515 	stw	ra,20(sp)
   10244:	18805217 	ldw	r2,328(r3)
   10248:	2023883a 	mov	r17,r4
   1024c:	10003726 	beq	r2,zero,1032c <__register_exitproc+0x104>
   10250:	10c00117 	ldw	r3,4(r2)
   10254:	010007c4 	movi	r4,31
   10258:	20c00e16 	blt	r4,r3,10294 <__register_exitproc+0x6c>
   1025c:	1a000044 	addi	r8,r3,1
   10260:	8800221e 	bne	r17,zero,102ec <__register_exitproc+0xc4>
   10264:	18c00084 	addi	r3,r3,2
   10268:	18c7883a 	add	r3,r3,r3
   1026c:	18c7883a 	add	r3,r3,r3
   10270:	12000115 	stw	r8,4(r2)
   10274:	10c7883a 	add	r3,r2,r3
   10278:	19400015 	stw	r5,0(r3)
   1027c:	0005883a 	mov	r2,zero
   10280:	dfc00517 	ldw	ra,20(sp)
   10284:	dc400417 	ldw	r17,16(sp)
   10288:	dc000317 	ldw	r16,12(sp)
   1028c:	dec00604 	addi	sp,sp,24
   10290:	f800283a 	ret
   10294:	00800034 	movhi	r2,0
   10298:	10800004 	addi	r2,r2,0
   1029c:	10002626 	beq	r2,zero,10338 <__register_exitproc+0x110>
   102a0:	01006404 	movi	r4,400
   102a4:	d9400015 	stw	r5,0(sp)
   102a8:	d9800115 	stw	r6,4(sp)
   102ac:	d9c00215 	stw	r7,8(sp)
   102b0:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
   102b4:	d9400017 	ldw	r5,0(sp)
   102b8:	d9800117 	ldw	r6,4(sp)
   102bc:	d9c00217 	ldw	r7,8(sp)
   102c0:	10001d26 	beq	r2,zero,10338 <__register_exitproc+0x110>
   102c4:	81000017 	ldw	r4,0(r16)
   102c8:	10000115 	stw	zero,4(r2)
   102cc:	02000044 	movi	r8,1
   102d0:	22405217 	ldw	r9,328(r4)
   102d4:	0007883a 	mov	r3,zero
   102d8:	12400015 	stw	r9,0(r2)
   102dc:	20805215 	stw	r2,328(r4)
   102e0:	10006215 	stw	zero,392(r2)
   102e4:	10006315 	stw	zero,396(r2)
   102e8:	883fde26 	beq	r17,zero,10264 <__alt_data_end+0xfffc6e84>
   102ec:	18c9883a 	add	r4,r3,r3
   102f0:	2109883a 	add	r4,r4,r4
   102f4:	1109883a 	add	r4,r2,r4
   102f8:	21802215 	stw	r6,136(r4)
   102fc:	01800044 	movi	r6,1
   10300:	12406217 	ldw	r9,392(r2)
   10304:	30cc983a 	sll	r6,r6,r3
   10308:	4992b03a 	or	r9,r9,r6
   1030c:	12406215 	stw	r9,392(r2)
   10310:	21c04215 	stw	r7,264(r4)
   10314:	01000084 	movi	r4,2
   10318:	893fd21e 	bne	r17,r4,10264 <__alt_data_end+0xfffc6e84>
   1031c:	11006317 	ldw	r4,396(r2)
   10320:	218cb03a 	or	r6,r4,r6
   10324:	11806315 	stw	r6,396(r2)
   10328:	003fce06 	br	10264 <__alt_data_end+0xfffc6e84>
   1032c:	18805304 	addi	r2,r3,332
   10330:	18805215 	stw	r2,328(r3)
   10334:	003fc606 	br	10250 <__alt_data_end+0xfffc6e70>
   10338:	00bfffc4 	movi	r2,-1
   1033c:	003fd006 	br	10280 <__alt_data_end+0xfffc6ea0>

00010340 <__call_exitprocs>:
   10340:	defff504 	addi	sp,sp,-44
   10344:	df000915 	stw	fp,36(sp)
   10348:	dd400615 	stw	r21,24(sp)
   1034c:	dc800315 	stw	r18,12(sp)
   10350:	dfc00a15 	stw	ra,40(sp)
   10354:	ddc00815 	stw	r23,32(sp)
   10358:	dd800715 	stw	r22,28(sp)
   1035c:	dd000515 	stw	r20,20(sp)
   10360:	dcc00415 	stw	r19,16(sp)
   10364:	dc400215 	stw	r17,8(sp)
   10368:	dc000115 	stw	r16,4(sp)
   1036c:	d9000015 	stw	r4,0(sp)
   10370:	2839883a 	mov	fp,r5
   10374:	04800044 	movi	r18,1
   10378:	057fffc4 	movi	r21,-1
   1037c:	00800074 	movhi	r2,1
   10380:	1088f804 	addi	r2,r2,9184
   10384:	12000017 	ldw	r8,0(r2)
   10388:	45005217 	ldw	r20,328(r8)
   1038c:	44c05204 	addi	r19,r8,328
   10390:	a0001c26 	beq	r20,zero,10404 <__call_exitprocs+0xc4>
   10394:	a0800117 	ldw	r2,4(r20)
   10398:	15ffffc4 	addi	r23,r2,-1
   1039c:	b8000d16 	blt	r23,zero,103d4 <__call_exitprocs+0x94>
   103a0:	14000044 	addi	r16,r2,1
   103a4:	8421883a 	add	r16,r16,r16
   103a8:	8421883a 	add	r16,r16,r16
   103ac:	84402004 	addi	r17,r16,128
   103b0:	a463883a 	add	r17,r20,r17
   103b4:	a421883a 	add	r16,r20,r16
   103b8:	e0001e26 	beq	fp,zero,10434 <__call_exitprocs+0xf4>
   103bc:	80804017 	ldw	r2,256(r16)
   103c0:	e0801c26 	beq	fp,r2,10434 <__call_exitprocs+0xf4>
   103c4:	bdffffc4 	addi	r23,r23,-1
   103c8:	843fff04 	addi	r16,r16,-4
   103cc:	8c7fff04 	addi	r17,r17,-4
   103d0:	bd7ff91e 	bne	r23,r21,103b8 <__alt_data_end+0xfffc6fd8>
   103d4:	00800034 	movhi	r2,0
   103d8:	10800004 	addi	r2,r2,0
   103dc:	10000926 	beq	r2,zero,10404 <__call_exitprocs+0xc4>
   103e0:	a0800117 	ldw	r2,4(r20)
   103e4:	1000301e 	bne	r2,zero,104a8 <__call_exitprocs+0x168>
   103e8:	a0800017 	ldw	r2,0(r20)
   103ec:	10003226 	beq	r2,zero,104b8 <__call_exitprocs+0x178>
   103f0:	a009883a 	mov	r4,r20
   103f4:	98800015 	stw	r2,0(r19)
   103f8:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
   103fc:	9d000017 	ldw	r20,0(r19)
   10400:	a03fe41e 	bne	r20,zero,10394 <__alt_data_end+0xfffc6fb4>
   10404:	dfc00a17 	ldw	ra,40(sp)
   10408:	df000917 	ldw	fp,36(sp)
   1040c:	ddc00817 	ldw	r23,32(sp)
   10410:	dd800717 	ldw	r22,28(sp)
   10414:	dd400617 	ldw	r21,24(sp)
   10418:	dd000517 	ldw	r20,20(sp)
   1041c:	dcc00417 	ldw	r19,16(sp)
   10420:	dc800317 	ldw	r18,12(sp)
   10424:	dc400217 	ldw	r17,8(sp)
   10428:	dc000117 	ldw	r16,4(sp)
   1042c:	dec00b04 	addi	sp,sp,44
   10430:	f800283a 	ret
   10434:	a0800117 	ldw	r2,4(r20)
   10438:	80c00017 	ldw	r3,0(r16)
   1043c:	10bfffc4 	addi	r2,r2,-1
   10440:	15c01426 	beq	r2,r23,10494 <__call_exitprocs+0x154>
   10444:	80000015 	stw	zero,0(r16)
   10448:	183fde26 	beq	r3,zero,103c4 <__alt_data_end+0xfffc6fe4>
   1044c:	95c8983a 	sll	r4,r18,r23
   10450:	a0806217 	ldw	r2,392(r20)
   10454:	a5800117 	ldw	r22,4(r20)
   10458:	2084703a 	and	r2,r4,r2
   1045c:	10000b26 	beq	r2,zero,1048c <__call_exitprocs+0x14c>
   10460:	a0806317 	ldw	r2,396(r20)
   10464:	2088703a 	and	r4,r4,r2
   10468:	20000c1e 	bne	r4,zero,1049c <__call_exitprocs+0x15c>
   1046c:	89400017 	ldw	r5,0(r17)
   10470:	d9000017 	ldw	r4,0(sp)
   10474:	183ee83a 	callr	r3
   10478:	a0800117 	ldw	r2,4(r20)
   1047c:	15bfbf1e 	bne	r2,r22,1037c <__alt_data_end+0xfffc6f9c>
   10480:	98800017 	ldw	r2,0(r19)
   10484:	153fcf26 	beq	r2,r20,103c4 <__alt_data_end+0xfffc6fe4>
   10488:	003fbc06 	br	1037c <__alt_data_end+0xfffc6f9c>
   1048c:	183ee83a 	callr	r3
   10490:	003ff906 	br	10478 <__alt_data_end+0xfffc7098>
   10494:	a5c00115 	stw	r23,4(r20)
   10498:	003feb06 	br	10448 <__alt_data_end+0xfffc7068>
   1049c:	89000017 	ldw	r4,0(r17)
   104a0:	183ee83a 	callr	r3
   104a4:	003ff406 	br	10478 <__alt_data_end+0xfffc7098>
   104a8:	a0800017 	ldw	r2,0(r20)
   104ac:	a027883a 	mov	r19,r20
   104b0:	1029883a 	mov	r20,r2
   104b4:	003fb606 	br	10390 <__alt_data_end+0xfffc6fb0>
   104b8:	0005883a 	mov	r2,zero
   104bc:	003ffb06 	br	104ac <__alt_data_end+0xfffc70cc>

000104c0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   104c0:	defffd04 	addi	sp,sp,-12
   104c4:	df000215 	stw	fp,8(sp)
   104c8:	df000204 	addi	fp,sp,8
   104cc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   104d0:	0001883a 	nop
   104d4:	e0bfff17 	ldw	r2,-4(fp)
   104d8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   104dc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   104e0:	10000226 	beq	r2,zero,104ec <_exit+0x2c>
    ALT_SIM_FAIL();
   104e4:	002af070 	cmpltui	zero,zero,43969
   104e8:	00000106 	br	104f0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   104ec:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   104f0:	003fff06 	br	104f0 <__alt_data_end+0xfffc7110>
